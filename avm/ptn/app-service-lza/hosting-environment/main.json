{
  "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "_generator": {
      "name": "bicep",
      "version": "0.32.4.45862",
      "templateHash": "13599289799413153196"
    },
    "name": "App Service Landing Zone Accelerator",
    "description": "This Azure App Service pattern module represents an Azure App Service deployment aligned with the cloud adoption framework",
    "owner": "Azure/module-maintainers"
  },
  "parameters": {
    "workloadName": {
      "type": "string",
      "defaultValue": "[format('appsvc{0}', take(uniqueString(subscription().id), 4))]",
      "maxLength": 10,
      "metadata": {
        "description": "Optional. suffix (max 10 characters long) that will be used to name the resources in a pattern like <resourceAbbreviation>-<workloadName>."
      }
    },
    "location": {
      "type": "string",
      "defaultValue": "[deployment().location]",
      "metadata": {
        "description": "Optional. Azure region where the resources will be deployed in."
      }
    },
    "environmentName": {
      "type": "string",
      "defaultValue": "test",
      "maxLength": 8,
      "metadata": {
        "description": "Optional. The name of the environmentName (e.g. \"dev\", \"test\", \"prod\", \"preprod\", \"staging\", \"uat\", \"dr\", \"qa\"). Up to 8 characters long."
      }
    },
    "deployAseV3": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Optional. Default is false. Set to true if you want to deploy ASE v3 instead of Multitenant App Service Plan."
      }
    },
    "vnetSpokeAddressSpace": {
      "type": "string",
      "defaultValue": "10.240.0.0/20",
      "metadata": {
        "description": "Optional. CIDR of the SPOKE vnet i.e. 192.168.0.0/24."
      }
    },
    "subnetSpokeAppSvcAddressSpace": {
      "type": "string",
      "defaultValue": "10.240.0.0/26",
      "metadata": {
        "description": "Optional. CIDR of the subnet that will hold the app services plan. ATTENTION: ASEv3 needs a /24 network."
      }
    },
    "subnetSpokeDevOpsAddressSpace": {
      "type": "string",
      "defaultValue": "10.240.10.128/26",
      "metadata": {
        "description": "Optional. CIDR of the subnet that will hold devOps agents etc."
      }
    },
    "subnetSpokePrivateEndpointAddressSpace": {
      "type": "string",
      "defaultValue": "10.240.11.0/24",
      "metadata": {
        "description": "Optional. CIDR of the subnet that will hold the private endpoints of the supporting services."
      }
    },
    "vnetHubResourceId": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Optional. Default is empty. If given, peering between spoke and and existing hub vnet will be created."
      }
    },
    "firewallInternalIp": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Optional. Internal IP of the Azure firewall deployed in Hub. Used for creating UDR to route all vnet egress traffic through Firewall. If empty no UDR."
      }
    },
    "vmSize": {
      "type": "string",
      "defaultValue": "Standard_D2s_v4",
      "metadata": {
        "description": "Optional. The size of the jump box virtual machine to create. See https://learn.microsoft.com/azure/virtual-machines/sizes for more information."
      }
    },
    "webAppPlanSku": {
      "type": "string",
      "defaultValue": "P1V3",
      "allowedValues": [
        "S1",
        "S2",
        "S3",
        "P1V3",
        "P2V3",
        "P3V3",
        "EP1",
        "EP2",
        "EP3",
        "ASE_I1V2",
        "ASE_I2V2",
        "ASE_I3V2"
      ],
      "metadata": {
        "description": "Optional. Defines the name, tier, size, family and capacity of the App Service Plan. EP* is only for functions."
      }
    },
    "zoneRedundant": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Optional. Set to true if you want to deploy the App Service Plan in a zone redundant manner. Defult is true."
      }
    },
    "webAppBaseOs": {
      "type": "string",
      "defaultValue": "windows",
      "allowedValues": [
        "windows",
        "linux"
      ],
      "metadata": {
        "description": "Optional. Kind of server OS of the App Service Plan. Default is \"windows\"."
      }
    },
    "adminUsername": {
      "type": "string",
      "defaultValue": "azureuser",
      "metadata": {
        "description": "Conditional. Required if jumpbox deployed. The username of the admin user of the jumpbox VM."
      }
    },
    "adminPassword": {
      "type": "securestring",
      "defaultValue": "",
      "metadata": {
        "description": "Conditional. Required if jumpbox deployed and not using SSH key. The password of the admin user of the jumpbox VM."
      }
    },
    "enableEgressLockdown": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Optional. Set to true if you want to intercept all outbound traffic with azure firewall."
      }
    },
    "deployJumpHost": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Optional. Set to true if you want to deploy a jumpbox/devops VM."
      }
    },
    "vmAuthenticationType": {
      "type": "string",
      "defaultValue": "password",
      "allowedValues": [
        "sshPublicKey",
        "password"
      ],
      "metadata": {
        "description": "Optional. Type of authentication to use on the Virtual Machine. SSH key is recommended. Default is \"password\"."
      }
    },
    "bastionResourceId": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Optional. The resource ID of the bastion host. If set, the spoke virtual network will be peered with the hub virtual network and the bastion host will be allowed to connect to the jump box. Default is empty."
      }
    },
    "tags": {
      "type": "object",
      "defaultValue": {},
      "metadata": {
        "description": "Optional. Tags to apply to all resources."
      }
    },
    "enableTelemetry": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Optional. Enable/Disable usage telemetry for module."
      }
    },
    "autoApproveAfdPrivateEndpoint": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Optional. Set to true if you want to auto-approve the private endpoint connection to the Azure Front Door."
      }
    }
  },
  "variables": {
    "resourceSuffix": "[format('{0}-{1}-{2}', parameters('workloadName'), parameters('environmentName'), parameters('location'))]",
    "resourceGroupName": "[format('rg-spoke-{0}', variables('resourceSuffix'))]"
  },
  "resources": [
    {
      "condition": "[parameters('enableTelemetry')]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2024-03-01",
      "name": "[format('46d3xbcp.ptn.appsvclza-hostingenvironment.{0}', substring(uniqueString(deployment().name, parameters('location')), 0, 4))]",
      "location": "[parameters('location')]",
      "properties": {
        "mode": "Incremental",
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "resources": [],
          "outputs": {
            "telemetry": {
              "type": "String",
              "value": "For more information, see https://aka.ms/avm/TelemetryInfo"
            }
          }
        }
      }
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('{0}-deployment', uniqueString(deployment().name, parameters('location'), variables('resourceGroupName')))]",
      "location": "[deployment().location]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "name": {
            "value": "[variables('resourceGroupName')]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "tags": {
            "value": "[parameters('tags')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
          "languageVersion": "2.0",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.29.47.4906",
              "templateHash": "12239489478811281495"
            },
            "name": "Resource Groups",
            "description": "This module deploys a Resource Group.",
            "owner": "Azure/module-maintainers"
          },
          "definitions": {
            "lockType": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Specify the name of lock."
                  }
                },
                "kind": {
                  "type": "string",
                  "allowedValues": [
                    "CanNotDelete",
                    "None",
                    "ReadOnly"
                  ],
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Specify the type of lock."
                  }
                }
              },
              "nullable": true
            },
            "roleAssignmentType": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. The name (as GUID) of the role assignment. If not provided, a GUID will be generated."
                    }
                  },
                  "roleDefinitionIdOrName": {
                    "type": "string",
                    "metadata": {
                      "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                    }
                  },
                  "principalId": {
                    "type": "string",
                    "metadata": {
                      "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                    }
                  },
                  "principalType": {
                    "type": "string",
                    "allowedValues": [
                      "Device",
                      "ForeignGroup",
                      "Group",
                      "ServicePrincipal",
                      "User"
                    ],
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. The principal type of the assigned principal ID."
                    }
                  },
                  "description": {
                    "type": "string",
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. The description of the role assignment."
                    }
                  },
                  "condition": {
                    "type": "string",
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                    }
                  },
                  "conditionVersion": {
                    "type": "string",
                    "allowedValues": [
                      "2.0"
                    ],
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. Version of the condition."
                    }
                  },
                  "delegatedManagedIdentityResourceId": {
                    "type": "string",
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. The Resource Id of the delegated managed identity resource."
                    }
                  }
                }
              },
              "nullable": true
            }
          },
          "parameters": {
            "name": {
              "type": "string",
              "metadata": {
                "description": "Required. The name of the Resource Group."
              }
            },
            "location": {
              "type": "string",
              "defaultValue": "[deployment().location]",
              "metadata": {
                "description": "Optional. Location of the Resource Group. It uses the deployment's location when not provided."
              }
            },
            "lock": {
              "$ref": "#/definitions/lockType",
              "metadata": {
                "description": "Optional. The lock settings of the service."
              }
            },
            "roleAssignments": {
              "$ref": "#/definitions/roleAssignmentType",
              "metadata": {
                "description": "Optional. Array of role assignments to create."
              }
            },
            "tags": {
              "type": "object",
              "nullable": true,
              "metadata": {
                "description": "Optional. Tags of the storage account resource."
              }
            },
            "enableTelemetry": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Optional. Enable/Disable usage telemetry for module."
              }
            }
          },
          "resources": {
            "avmTelemetry": {
              "condition": "[parameters('enableTelemetry')]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2024-03-01",
              "name": "[format('46d3xbcp.res.resources-resourcegroup.{0}.{1}', replace('0.4.0', '.', '-'), substring(uniqueString(deployment().name, parameters('location')), 0, 4))]",
              "location": "[parameters('location')]",
              "properties": {
                "mode": "Incremental",
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "resources": [],
                  "outputs": {
                    "telemetry": {
                      "type": "String",
                      "value": "For more information, see https://aka.ms/avm/TelemetryInfo"
                    }
                  }
                }
              }
            },
            "resourceGroup": {
              "type": "Microsoft.Resources/resourceGroups",
              "apiVersion": "2021-04-01",
              "name": "[parameters('name')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "properties": {}
            },
            "resourceGroup_lock": {
              "condition": "[and(not(empty(coalesce(parameters('lock'), createObject()))), not(equals(tryGet(parameters('lock'), 'kind'), 'None')))]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('{0}-RG-Lock', uniqueString(deployment().name, parameters('location')))]",
              "resourceGroup": "[parameters('name')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "lock": {
                    "value": "[parameters('lock')]"
                  },
                  "name": {
                    "value": "[parameters('name')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "languageVersion": "2.0",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.29.47.4906",
                      "templateHash": "16740360506283584978"
                    }
                  },
                  "definitions": {
                    "lockType": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Specify the name of lock."
                          }
                        },
                        "kind": {
                          "type": "string",
                          "allowedValues": [
                            "CanNotDelete",
                            "None",
                            "ReadOnly"
                          ],
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Specify the type of lock."
                          }
                        }
                      },
                      "nullable": true
                    }
                  },
                  "parameters": {
                    "lock": {
                      "$ref": "#/definitions/lockType",
                      "metadata": {
                        "description": "Optional. The lock settings of the service."
                      }
                    },
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The name of the Resource Group."
                      }
                    }
                  },
                  "resources": {
                    "resourceGroup_lock": {
                      "condition": "[and(not(empty(coalesce(parameters('lock'), createObject()))), not(equals(tryGet(parameters('lock'), 'kind'), 'None')))]",
                      "type": "Microsoft.Authorization/locks",
                      "apiVersion": "2020-05-01",
                      "name": "[coalesce(tryGet(parameters('lock'), 'name'), format('lock-{0}', parameters('name')))]",
                      "properties": {
                        "level": "[coalesce(tryGet(parameters('lock'), 'kind'), '')]",
                        "notes": "[if(equals(tryGet(parameters('lock'), 'kind'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot delete or modify the resource or child resources.')]"
                      }
                    }
                  }
                }
              },
              "dependsOn": [
                "resourceGroup"
              ]
            },
            "resourceGroup_roleAssignments": {
              "condition": "[not(empty(coalesce(parameters('roleAssignments'), createArray())))]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('{0}-RG-RoleAssignments', uniqueString(deployment().name, parameters('location')))]",
              "resourceGroup": "[parameters('name')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "roleAssignments": {
                    "value": "[parameters('roleAssignments')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "languageVersion": "2.0",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.29.47.4906",
                      "templateHash": "10992477577200576081"
                    }
                  },
                  "definitions": {
                    "roleAssignmentType": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "name": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The name (as GUID) of the role assignment. If not provided, a GUID will be generated."
                            }
                          },
                          "roleDefinitionIdOrName": {
                            "type": "string",
                            "metadata": {
                              "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                            }
                          },
                          "principalId": {
                            "type": "string",
                            "metadata": {
                              "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                            }
                          },
                          "principalType": {
                            "type": "string",
                            "allowedValues": [
                              "Device",
                              "ForeignGroup",
                              "Group",
                              "ServicePrincipal",
                              "User"
                            ],
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The principal type of the assigned principal ID."
                            }
                          },
                          "description": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The description of the role assignment."
                            }
                          },
                          "condition": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                            }
                          },
                          "conditionVersion": {
                            "type": "string",
                            "allowedValues": [
                              "2.0"
                            ],
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. Version of the condition."
                            }
                          },
                          "delegatedManagedIdentityResourceId": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The Resource Id of the delegated managed identity resource."
                            }
                          }
                        }
                      },
                      "nullable": true
                    }
                  },
                  "parameters": {
                    "roleAssignments": {
                      "$ref": "#/definitions/roleAssignmentType",
                      "metadata": {
                        "description": "Optional. Array of role assignments to create."
                      }
                    }
                  },
                  "variables": {
                    "copy": [
                      {
                        "name": "formattedRoleAssignments",
                        "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]",
                        "input": "[union(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')], createObject('roleDefinitionId', coalesce(tryGet(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName), if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName)))))]"
                      }
                    ],
                    "builtInRoleNames": {
                      "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                      "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                      "Quota Request Operator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '0e5f05e5-9ab9-446b-b98d-1e2157c94125')]",
                      "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                      "Resource Policy Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '36243c78-bf99-498c-9df9-86d9f8d28608')]",
                      "Role Based Access Control Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]",
                      "Tag Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4a9ae827-6dc8-4573-8ac7-8239d42aa03f')]",
                      "Template Spec Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '1c9b6475-caf0-4164-b5a1-2142a7116f4b')]",
                      "Template Spec Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '392ae280-861d-42bd-9ea5-08ee6d83b80e')]",
                      "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]"
                    }
                  },
                  "resources": {
                    "resourceGroup_roleAssignments": {
                      "copy": {
                        "name": "resourceGroup_roleAssignments",
                        "count": "[length(coalesce(variables('formattedRoleAssignments'), createArray()))]"
                      },
                      "type": "Microsoft.Authorization/roleAssignments",
                      "apiVersion": "2022-04-01",
                      "name": "[coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'name'), guid(resourceGroup().id, coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId, coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId))]",
                      "properties": {
                        "roleDefinitionId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId]",
                        "principalId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId]",
                        "description": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'description')]",
                        "principalType": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'principalType')]",
                        "condition": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition')]",
                        "conditionVersion": "[if(not(empty(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                        "delegatedManagedIdentityResourceId": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
                      }
                    }
                  }
                }
              },
              "dependsOn": [
                "resourceGroup"
              ]
            }
          },
          "outputs": {
            "name": {
              "type": "string",
              "metadata": {
                "description": "The name of the resource group."
              },
              "value": "[parameters('name')]"
            },
            "resourceId": {
              "type": "string",
              "metadata": {
                "description": "The resource ID of the resource group."
              },
              "value": "[subscriptionResourceId('Microsoft.Resources/resourceGroups', parameters('name'))]"
            },
            "location": {
              "type": "string",
              "metadata": {
                "description": "The location the resource was deployed into."
              },
              "value": "[reference('resourceGroup', '2021-04-01', 'full').location]"
            }
          }
        }
      }
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "NamingDeployment",
      "resourceGroup": "[variables('resourceGroupName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "location": {
            "value": "[parameters('location')]"
          },
          "suffix": {
            "value": [
              "[parameters('environmentName')]"
            ]
          },
          "uniqueLength": {
            "value": 6
          },
          "uniqueSeed": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('{0}-deployment', uniqueString(deployment().name, parameters('location'), variables('resourceGroupName')))), '2022-09-01').outputs.resourceId.value]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "languageVersion": "2.0",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.32.4.45862",
              "templateHash": "10880623363562531040"
            },
            "name": "Azure Naming module",
            "description": "Module to maintain a consistent naming of Azure resources.",
            "owner": "https://github.com/nianton"
          },
          "definitions": {
            "ServiceNameType": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string"
                },
                "nameUnique": {
                  "type": "string"
                },
                "slug": {
                  "type": "string"
                }
              },
              "metadata": {
                "__bicep_export!": true
              }
            },
            "NamingOutput": {
              "type": "object",
              "properties": {
                "aiSearch": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "analysisServicesServer": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "apiManagement": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "appConfiguration": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "appServiceEnvironment": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "appServicePlan": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "appService": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "applicationGateway": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "applicationInsights": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "applicationSecurityGroup": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "automationAccount": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "automationCertificate": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "automationCredential": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "automationRunbook": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "automationSchedule": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "automationVariable": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "availabilitySet": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "bastionHost": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "batchAccount": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "batchApplication": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "batchCertificate": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "batchPool": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "botChannelDirectline": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "botChannelEmail": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "botChannelMsTeams": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "botChannelSlack": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "botChannelsRegistration": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "botConnection": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "botWebApp": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "cdnEndpoint": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "cdnProfile": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "chaosExperiment": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "chaosTarget": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "cognitiveAccount": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "cognitiveServicesOpenAi": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "cognitiveServicesComputerVision": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "cognitiveServicesContentModerator": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "cognitiveServicesContentSafety": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "cognitiveServicesCustomVisionPrediction": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "cognitiveServicesCustomVisionTraining": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "cognitiveServicesDocumentIntelligence": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "cognitiveServicesMultiServiceAccount": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "cognitiveServicesVideoIndexer": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "cognitiveServicesFaceApi": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "cognitiveServicesImmersiveReader": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "cognitiveServicesLanguageService": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "cognitiveServicesSpeechService": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "cognitiveServicesTranslator": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "containerApps": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "containerAppsEnvironment": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "containerGroup": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "containerRegistry": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "containerRegistryWebhook": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "cosmosdbAccount": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "customProvider": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "dashboard": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "dataFactory": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "dataFactoryDatasetMysql": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "dataFactoryDatasetPostgresql": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "dataFactoryDatasetSqlServerTable": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "dataFactoryIntegrationRuntimeManaged": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "dataFactoryLinkedServiceDataLakeStorageGen2": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "dataFactoryLinkedServiceKeyVault": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "dataFactoryLinkedServiceMysql": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "dataFactoryLinkedServicePostgresql": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "dataFactoryLinkedServiceSqlServer": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "dataFactoryPipeline": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "dataFactoryTriggerSchedule": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "dataLakeAnalyticsAccount": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "dataLakeAnalyticsFirewallRule": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "dataLakeStore": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "dataLakeStoreFirewallRule": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "databaseMigrationProject": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "databaseMigrationService": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "databricksWorkspace": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "devTestLab": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "devTestLinuxVirtualMachine": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "devTestWindowsVirtualMachine": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "diskEncryptionSet": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "dnsZone": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "eventGridDomain": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "eventGridDomainTopic": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "eventGridEventSubscription": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "eventGridTopic": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "eventHub": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "eventHubAuthorizationRule": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "eventHubConsumerGroup": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "eventHubNamespace": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "eventHubNamespaceAuthorizationRule": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "eventHubNamespaceDisasterRecoveryConfig": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "expressRouteCircuit": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "expressRouteGateway": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "firewall": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "firewallPolicy": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "frontDoor": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "frontDoorFirewallPolicy": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "functionApp": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "grafana": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "hdInsightHadoopCluster": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "hdInsightHbaseCluster": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "hdInsightInteractiveQueryCluster": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "hdInsightKafkaCluster": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "hdInsightMlServicesCluster": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "hdInsightRserverCluster": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "hdInsightSparkCluster": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "hdInsightStormCluster": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "image": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "iotCentralApplication": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "iotHub": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "iotHubConsumerGroup": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "iotHubDps": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "iotHubDpsCertificate": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "keyVault": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "keyVaultCertificate": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "keyVaultKey": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "keyVaultSecret": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "kubernetesCluster": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "kustoCluster": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "kustoDatabase": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "kustoEventHubDataConnection": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "loadBalancer": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "loadBalancerNatRule": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "loadTesting": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "linuxVirtualMachine": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "linuxVirtualMachineScaleSet": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "localNetworkGateway": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "logicApp": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "logAnalyticsWorkspace": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "machineLearningWorkspace": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "managedDisk": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "managedIdentity": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "mapsAccount": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "mariadbDatabase": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "mariadbFirewallRule": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "mariadbServer": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "mariadbVirtualNetworkRule": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "mssqlDatabase": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "mssqlElasticpool": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "mssqlServer": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "mysqlDatabase": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "mysqlFirewallRule": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "mysqlServer": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "mysqlVirtualNetworkRule": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "networkInterface": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "networkSecurityGroup": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "networkSecurityGroupRule": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "networkSecurityRule": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "networkWatcher": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "notificationHub": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "notificationHubAuthorizationRule": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "notificationHubNamespace": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "pointToSiteVpnGateway": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "postgresqlDatabase": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "postgresqlFirewallRule": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "postgresqlServer": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "postgresqlVirtualNetworkRule": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "powerbiEmbedded": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "privateDnsZone": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "publicIp": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "publicIpPrefix": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "redisCache": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "redisFirewallRule": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "relayHybridConnection": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "relayNamespace": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "resourceGroup": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "roleAssignment": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "roleDefinition": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "route": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "routeTable": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "serviceFabricCluster": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "serviceFabricManagedCluster": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "serviceBusNamespace": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "serviceBusNamespaceAuthorizationRule": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "serviceBusQueue": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "serviceBusQueueAuthorizationRule": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "serviceBusSubscription": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "serviceBusSubscriptionRule": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "serviceBusTopic": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "serviceBusTopicAuthorizationRule": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "sharedImage": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "sharedImageGallery": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "signalrService": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "snapshots": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "sqlElasticpool": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "sqlFailoverGroup": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "sqlFirewallRule": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "sqlServer": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "storageAccount": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "storageBlob": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "storageContainer": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "storageDataLakeGen2Filesystem": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "storageQueue": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "storageShare": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "storageShareDirectory": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "storageTable": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "streamAnalyticsFunctionJavascriptUdf": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "streamAnalyticsJob": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "streamAnalyticsOutputBlob": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "streamAnalyticsOutputEventHub": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "streamAnalyticsOutputMssql": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "streamAnalyticsOutputServiceBusQueue": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "streamAnalyticsOutputServiceBusTopic": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "streamAnalyticsReferenceInputBlob": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "streamAnalyticsStreamInputBlob": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "streamAnalyticsStreamInputEventHub": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "streamAnalyticsStreamInputIotHub": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "subnet": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "templateDeployment": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "trafficManagerProfile": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "virtualMachine": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "virtualMachineScaleSet": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "virtualNetwork": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "virtualNetworkGateway": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "virtualNetworkPeering": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "virtualWan": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "windowsVirtualMachine": {
                  "$ref": "#/definitions/ServiceNameType"
                },
                "windowsVirtualMachineScaleSet": {
                  "$ref": "#/definitions/ServiceNameType"
                }
              },
              "metadata": {
                "__bicep_export!": true
              }
            }
          },
          "parameters": {
            "prefix": {
              "type": "array",
              "defaultValue": [],
              "metadata": {
                "description": "Optional. It is not recommended that you use prefix by azure you should be using a suffix for your resources."
              }
            },
            "suffix": {
              "type": "array",
              "defaultValue": [],
              "metadata": {
                "description": "Optional. It is recommended that you specify a suffix for consistency. Please use only lowercase characters when possible."
              }
            },
            "uniqueSeed": {
              "type": "string",
              "defaultValue": "[resourceGroup().id]",
              "metadata": {
                "description": "Optional. Custom seed value for the unique string to be created -defaults to resourceGroup Id."
              }
            },
            "uniqueLength": {
              "type": "int",
              "defaultValue": 4,
              "metadata": {
                "description": "Optional. Max length of the uniqueness suffix to be added -defaults to 4"
              }
            },
            "useDashes": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Optional. Use dashes as separator where applicable -defaults to true"
              }
            },
            "useLowerCase": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Optional. Create names using lowercase letters -defaults to true"
              }
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]",
              "metadata": {
                "description": "Optional. Used when region abbreviation is needed (placeholder value is \"**location**)"
              }
            }
          },
          "variables": {
            "uniquePart": "[substring(uniqueString(parameters('uniqueSeed')), 0, parameters('uniqueLength'))]",
            "delimiter": "[if(parameters('useDashes'), '-', '')]",
            "locationPlaceholder": "**location**",
            "regionAbbreviations": {
              "australiacentral": "auc",
              "australiacentral2": "auc2",
              "australiaeast": "aue",
              "australiasoutheast": "ause",
              "brazilsouth": "brs",
              "brazilsoutheast": "brse",
              "brazilus": "brus",
              "canadacentral": "canc",
              "canadaeast": "cane",
              "centralindia": "cin",
              "centralus": "cus",
              "centraluseuap": "cuseuap",
              "eastasia": "ea",
              "eastus": "eus",
              "eastus2": "eus2",
              "eastus2euap": "eus2euap",
              "eastusstg": "eusstg",
              "francecentral": "frc",
              "francesouth": "frs",
              "germanynorth": "gern",
              "germanywestcentral": "gerwc",
              "israelcentral": "isc",
              "italynorth": "itn",
              "japaneast": "jae",
              "japanwest": "jaw",
              "jioindiacentral": "jioinc",
              "jioindiawest": "jioinw",
              "koreacentral": "koc",
              "koreasouth": "kors",
              "mexicocentral": "mxc",
              "northcentralus": "ncus",
              "northeurope": "neu",
              "norwayeast": "nore",
              "norwaywest": "norw",
              "polandcentral": "polc",
              "qatarcentral": "qatc",
              "southafricanorth": "san",
              "southafricawest": "saw",
              "southcentralus": "scus",
              "southeastasia": "sea",
              "southindia": "sin",
              "swedencentral": "swc",
              "switzerlandnorth": "swn",
              "switzerlandwest": "sww",
              "uaecentral": "uaec",
              "uaenorth": "uaen",
              "uksouth": "uks",
              "ukwest": "ukw",
              "westcentralus": "wcus",
              "westeurope": "weu",
              "westindia": "win",
              "westus": "wus",
              "westus2": "wus2",
              "westus3": "wus3"
            },
            "strPrefixJoined": "[if(empty(parameters('prefix')), '', format('{0}{1}', replace(replace(replace(string(parameters('prefix')), '[\"', ''), '\"]', ''), '\",\"', variables('delimiter')), variables('delimiter')))]",
            "strPrefixInterim": "[if(parameters('useLowerCase'), toLower(variables('strPrefixJoined')), variables('strPrefixJoined'))]",
            "strPrefix": "[replace(variables('strPrefixInterim'), variables('locationPlaceholder'), variables('regionAbbreviations')[parameters('location')])]",
            "strSuffixJoined": "[if(empty(parameters('suffix')), '', format('{0}{1}', variables('delimiter'), replace(replace(replace(string(parameters('suffix')), '[\"', ''), '\"]', ''), '\",\"', variables('delimiter'))))]",
            "strSuffixInterim": "[if(parameters('useLowerCase'), toLower(variables('strSuffixJoined')), variables('strSuffixJoined'))]",
            "strSuffix": "[replace(variables('strSuffixInterim'), variables('locationPlaceholder'), variables('regionAbbreviations')[parameters('location')])]",
            "placeholder": "[[****]",
            "nameTemplate": "[format('{0}{1}{2}', variables('strPrefix'), variables('placeholder'), variables('strSuffix'))]",
            "nameUniqueTemplate": "[format('{0}{1}{2}{3}{4}', variables('strPrefix'), variables('placeholder'), variables('strSuffix'), variables('delimiter'), variables('uniquePart'))]",
            "nameSafeTemplate": "[toLower(replace(variables('nameTemplate'), variables('delimiter'), ''))]",
            "nameUniqueSafeTemplate": "[toLower(replace(variables('nameUniqueTemplate'), variables('delimiter'), ''))]",
            "d": "[variables('delimiter')]",
            "ph": "[variables('placeholder')]",
            "nt": "[variables('nameTemplate')]",
            "nut": "[variables('nameUniqueTemplate')]",
            "nst": "[variables('nameSafeTemplate')]",
            "nust": "[variables('nameUniqueSafeTemplate')]",
            "names": {
              "aiSearch": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'srch'), 60), variables('d')), take(replace(variables('nt'), variables('ph'), 'srch'), sub(60, 1)), take(replace(variables('nt'), variables('ph'), 'srch'), 60))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'srch'), 60), variables('d')), take(replace(variables('nut'), variables('ph'), 'srch'), sub(60, 1)), take(replace(variables('nut'), variables('ph'), 'srch'), 60))]",
                "slug": "srch"
              },
              "analysisServicesServer": {
                "name": "[take(replace(variables('nst'), variables('ph'), 'as'), 63)]",
                "nameUnique": "[take(replace(variables('nust'), variables('ph'), 'as'), 63)]",
                "slug": "as"
              },
              "apiManagement": {
                "name": "[take(replace(variables('nst'), variables('ph'), 'apim'), 50)]",
                "nameUnique": "[take(replace(variables('nust'), variables('ph'), 'apim'), 50)]",
                "slug": "apim"
              },
              "appConfiguration": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'appcg'), 50), variables('d')), take(replace(variables('nt'), variables('ph'), 'appcg'), sub(50, 1)), take(replace(variables('nt'), variables('ph'), 'appcg'), 50))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'appcg'), 50), variables('d')), take(replace(variables('nut'), variables('ph'), 'appcg'), sub(50, 1)), take(replace(variables('nut'), variables('ph'), 'appcg'), 50))]",
                "slug": "appcg"
              },
              "appServiceEnvironment": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'ase'), 36), variables('d')), take(replace(variables('nt'), variables('ph'), 'ase'), sub(36, 1)), take(replace(variables('nt'), variables('ph'), 'ase'), 36))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'ase'), 36), variables('d')), take(replace(variables('nut'), variables('ph'), 'ase'), sub(36, 1)), take(replace(variables('nut'), variables('ph'), 'ase'), 36))]",
                "slug": "ase"
              },
              "appServicePlan": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'plan'), 40), variables('d')), take(replace(variables('nt'), variables('ph'), 'plan'), sub(40, 1)), take(replace(variables('nt'), variables('ph'), 'plan'), 40))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'plan'), 40), variables('d')), take(replace(variables('nut'), variables('ph'), 'plan'), sub(40, 1)), take(replace(variables('nut'), variables('ph'), 'plan'), 40))]",
                "slug": "plan"
              },
              "appService": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'app'), 60), variables('d')), take(replace(variables('nt'), variables('ph'), 'app'), sub(60, 1)), take(replace(variables('nt'), variables('ph'), 'app'), 60))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'app'), 60), variables('d')), take(replace(variables('nut'), variables('ph'), 'app'), sub(60, 1)), take(replace(variables('nut'), variables('ph'), 'app'), 60))]",
                "slug": "app"
              },
              "applicationGateway": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'agw'), 80), variables('d')), take(replace(variables('nt'), variables('ph'), 'agw'), sub(80, 1)), take(replace(variables('nt'), variables('ph'), 'agw'), 80))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'agw'), 80), variables('d')), take(replace(variables('nut'), variables('ph'), 'agw'), sub(80, 1)), take(replace(variables('nut'), variables('ph'), 'agw'), 80))]",
                "slug": "agw"
              },
              "applicationInsights": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'appi'), 260), variables('d')), take(replace(variables('nt'), variables('ph'), 'appi'), sub(260, 1)), take(replace(variables('nt'), variables('ph'), 'appi'), 260))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'appi'), 260), variables('d')), take(replace(variables('nut'), variables('ph'), 'appi'), sub(260, 1)), take(replace(variables('nut'), variables('ph'), 'appi'), 260))]",
                "slug": "appi"
              },
              "applicationSecurityGroup": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'asg'), 80), variables('d')), take(replace(variables('nt'), variables('ph'), 'asg'), sub(80, 1)), take(replace(variables('nt'), variables('ph'), 'asg'), 80))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'asg'), 80), variables('d')), take(replace(variables('nut'), variables('ph'), 'asg'), sub(80, 1)), take(replace(variables('nut'), variables('ph'), 'asg'), 80))]",
                "slug": "asg"
              },
              "automationAccount": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'aa'), 50), variables('d')), take(replace(variables('nt'), variables('ph'), 'aa'), sub(50, 1)), take(replace(variables('nt'), variables('ph'), 'aa'), 50))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'aa'), 50), variables('d')), take(replace(variables('nut'), variables('ph'), 'aa'), sub(50, 1)), take(replace(variables('nut'), variables('ph'), 'aa'), 50))]",
                "slug": "aa"
              },
              "automationCertificate": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'aacert'), 128), variables('d')), take(replace(variables('nt'), variables('ph'), 'aacert'), sub(128, 1)), take(replace(variables('nt'), variables('ph'), 'aacert'), 128))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'aacert'), 128), variables('d')), take(replace(variables('nut'), variables('ph'), 'aacert'), sub(128, 1)), take(replace(variables('nut'), variables('ph'), 'aacert'), 128))]",
                "slug": "aacert"
              },
              "automationCredential": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'aacred'), 128), variables('d')), take(replace(variables('nt'), variables('ph'), 'aacred'), sub(128, 1)), take(replace(variables('nt'), variables('ph'), 'aacred'), 128))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'aacred'), 128), variables('d')), take(replace(variables('nut'), variables('ph'), 'aacred'), sub(128, 1)), take(replace(variables('nut'), variables('ph'), 'aacred'), 128))]",
                "slug": "aacred"
              },
              "automationRunbook": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'aacred'), 63), variables('d')), take(replace(variables('nt'), variables('ph'), 'aacred'), sub(63, 1)), take(replace(variables('nt'), variables('ph'), 'aacred'), 63))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'aacred'), 63), variables('d')), take(replace(variables('nut'), variables('ph'), 'aacred'), sub(63, 1)), take(replace(variables('nut'), variables('ph'), 'aacred'), 63))]",
                "slug": "aacred"
              },
              "automationSchedule": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'aasched'), 128), variables('d')), take(replace(variables('nt'), variables('ph'), 'aasched'), sub(128, 1)), take(replace(variables('nt'), variables('ph'), 'aasched'), 128))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'aasched'), 128), variables('d')), take(replace(variables('nut'), variables('ph'), 'aasched'), sub(128, 1)), take(replace(variables('nut'), variables('ph'), 'aasched'), 128))]",
                "slug": "aasched"
              },
              "automationVariable": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'aavar'), 128), variables('d')), take(replace(variables('nt'), variables('ph'), 'aavar'), sub(128, 1)), take(replace(variables('nt'), variables('ph'), 'aavar'), 128))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'aavar'), 128), variables('d')), take(replace(variables('nut'), variables('ph'), 'aavar'), sub(128, 1)), take(replace(variables('nut'), variables('ph'), 'aavar'), 128))]",
                "slug": "aavar"
              },
              "availabilitySet": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'avail'), 80), variables('d')), take(replace(variables('nt'), variables('ph'), 'avail'), sub(80, 1)), take(replace(variables('nt'), variables('ph'), 'avail'), 80))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'avail'), 80), variables('d')), take(replace(variables('nut'), variables('ph'), 'avail'), sub(80, 1)), take(replace(variables('nut'), variables('ph'), 'avail'), 80))]",
                "slug": "avail"
              },
              "bastionHost": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'bas'), 80), variables('d')), take(replace(variables('nt'), variables('ph'), 'bas'), sub(80, 1)), take(replace(variables('nt'), variables('ph'), 'bas'), 80))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'bas'), 80), variables('d')), take(replace(variables('nut'), variables('ph'), 'bas'), sub(80, 1)), take(replace(variables('nut'), variables('ph'), 'bas'), 80))]",
                "slug": "bas"
              },
              "batchAccount": {
                "name": "[take(replace(variables('nst'), variables('ph'), 'ba'), 24)]",
                "nameUnique": "[take(replace(variables('nust'), variables('ph'), 'ba'), 24)]",
                "slug": "ba"
              },
              "batchApplication": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'baapp'), 64), variables('d')), take(replace(variables('nt'), variables('ph'), 'baapp'), sub(64, 1)), take(replace(variables('nt'), variables('ph'), 'baapp'), 64))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'baapp'), 64), variables('d')), take(replace(variables('nut'), variables('ph'), 'baapp'), sub(64, 1)), take(replace(variables('nut'), variables('ph'), 'baapp'), 64))]",
                "slug": "baapp"
              },
              "batchCertificate": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'bacert'), 45), variables('d')), take(replace(variables('nt'), variables('ph'), 'bacert'), sub(45, 1)), take(replace(variables('nt'), variables('ph'), 'bacert'), 45))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'bacert'), 45), variables('d')), take(replace(variables('nut'), variables('ph'), 'bacert'), sub(45, 1)), take(replace(variables('nut'), variables('ph'), 'bacert'), 45))]",
                "slug": "bacert"
              },
              "batchPool": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'bapool'), 24), variables('d')), take(replace(variables('nt'), variables('ph'), 'bapool'), sub(24, 1)), take(replace(variables('nt'), variables('ph'), 'bapool'), 24))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'bapool'), 24), variables('d')), take(replace(variables('nut'), variables('ph'), 'bapool'), sub(24, 1)), take(replace(variables('nut'), variables('ph'), 'bapool'), 24))]",
                "slug": "bapool"
              },
              "botChannelDirectline": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'botline'), 64), variables('d')), take(replace(variables('nt'), variables('ph'), 'botline'), sub(64, 1)), take(replace(variables('nt'), variables('ph'), 'botline'), 64))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'botline'), 64), variables('d')), take(replace(variables('nut'), variables('ph'), 'botline'), sub(64, 1)), take(replace(variables('nut'), variables('ph'), 'botline'), 64))]",
                "slug": "botline"
              },
              "botChannelEmail": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'botmail'), 64), variables('d')), take(replace(variables('nt'), variables('ph'), 'botmail'), sub(64, 1)), take(replace(variables('nt'), variables('ph'), 'botmail'), 64))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'botmail'), 64), variables('d')), take(replace(variables('nut'), variables('ph'), 'botmail'), sub(64, 1)), take(replace(variables('nut'), variables('ph'), 'botmail'), 64))]",
                "slug": "botmail"
              },
              "botChannelMsTeams": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'botteams'), 64), variables('d')), take(replace(variables('nt'), variables('ph'), 'botteams'), sub(64, 1)), take(replace(variables('nt'), variables('ph'), 'botteams'), 64))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'botteams'), 64), variables('d')), take(replace(variables('nut'), variables('ph'), 'botteams'), sub(64, 1)), take(replace(variables('nut'), variables('ph'), 'botteams'), 64))]",
                "slug": "botteams"
              },
              "botChannelSlack": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'botslack'), 64), variables('d')), take(replace(variables('nt'), variables('ph'), 'botslack'), sub(64, 1)), take(replace(variables('nt'), variables('ph'), 'botslack'), 64))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'botslack'), 64), variables('d')), take(replace(variables('nut'), variables('ph'), 'botslack'), sub(64, 1)), take(replace(variables('nut'), variables('ph'), 'botslack'), 64))]",
                "slug": "botslack"
              },
              "botChannelsRegistration": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'botchan'), 64), variables('d')), take(replace(variables('nt'), variables('ph'), 'botchan'), sub(64, 1)), take(replace(variables('nt'), variables('ph'), 'botchan'), 64))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'botchan'), 64), variables('d')), take(replace(variables('nut'), variables('ph'), 'botchan'), sub(64, 1)), take(replace(variables('nut'), variables('ph'), 'botchan'), 64))]",
                "slug": "botchan"
              },
              "botConnection": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'botcon'), 64), variables('d')), take(replace(variables('nt'), variables('ph'), 'botcon'), sub(64, 1)), take(replace(variables('nt'), variables('ph'), 'botcon'), 64))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'botcon'), 64), variables('d')), take(replace(variables('nut'), variables('ph'), 'botcon'), sub(64, 1)), take(replace(variables('nut'), variables('ph'), 'botcon'), 64))]",
                "slug": "botcon"
              },
              "botWebApp": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'bot'), 64), variables('d')), take(replace(variables('nt'), variables('ph'), 'bot'), sub(64, 1)), take(replace(variables('nt'), variables('ph'), 'bot'), 64))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'bot'), 64), variables('d')), take(replace(variables('nut'), variables('ph'), 'bot'), sub(64, 1)), take(replace(variables('nut'), variables('ph'), 'bot'), 64))]",
                "slug": "bot"
              },
              "cdnEndpoint": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'cdn'), 50), variables('d')), take(replace(variables('nt'), variables('ph'), 'cdn'), sub(50, 1)), take(replace(variables('nt'), variables('ph'), 'cdn'), 50))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'cdn'), 50), variables('d')), take(replace(variables('nut'), variables('ph'), 'cdn'), sub(50, 1)), take(replace(variables('nut'), variables('ph'), 'cdn'), 50))]",
                "slug": "cdn"
              },
              "cdnProfile": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'cdnprof'), 260), variables('d')), take(replace(variables('nt'), variables('ph'), 'cdnprof'), sub(260, 1)), take(replace(variables('nt'), variables('ph'), 'cdnprof'), 260))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'cdnprof'), 260), variables('d')), take(replace(variables('nut'), variables('ph'), 'cdnprof'), sub(260, 1)), take(replace(variables('nut'), variables('ph'), 'cdnprof'), 260))]",
                "slug": "cdnprof"
              },
              "chaosExperiment": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'chaosexp'), 128), variables('d')), take(replace(variables('nt'), variables('ph'), 'chaosexp'), sub(128, 1)), take(replace(variables('nt'), variables('ph'), 'chaosexp'), 128))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'chaosexp'), 128), variables('d')), take(replace(variables('nut'), variables('ph'), 'chaosexp'), sub(128, 1)), take(replace(variables('nut'), variables('ph'), 'chaosexp'), 128))]",
                "slug": "chaosexp"
              },
              "chaosTarget": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'chaostarget'), 128), variables('d')), take(replace(variables('nt'), variables('ph'), 'chaostarget'), sub(128, 1)), take(replace(variables('nt'), variables('ph'), 'chaostarget'), 128))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'chaostarget'), 128), variables('d')), take(replace(variables('nut'), variables('ph'), 'chaostarget'), sub(128, 1)), take(replace(variables('nut'), variables('ph'), 'chaostarget'), 128))]",
                "slug": "chaostarget"
              },
              "cognitiveAccount": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'cog'), 64), variables('d')), take(replace(variables('nt'), variables('ph'), 'cog'), sub(64, 1)), take(replace(variables('nt'), variables('ph'), 'cog'), 64))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'cog'), 64), variables('d')), take(replace(variables('nut'), variables('ph'), 'cog'), sub(64, 1)), take(replace(variables('nut'), variables('ph'), 'cog'), 64))]",
                "slug": "cog"
              },
              "cognitiveServicesOpenAi": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'oai'), 64), variables('d')), take(replace(variables('nt'), variables('ph'), 'oai'), sub(64, 1)), take(replace(variables('nt'), variables('ph'), 'oai'), 64))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'oai'), 64), variables('d')), take(replace(variables('nut'), variables('ph'), 'oai'), sub(64, 1)), take(replace(variables('nut'), variables('ph'), 'oai'), 64))]",
                "slug": "oai"
              },
              "cognitiveServicesComputerVision": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'cv'), 64), variables('d')), take(replace(variables('nt'), variables('ph'), 'cv'), sub(64, 1)), take(replace(variables('nt'), variables('ph'), 'cv'), 64))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'cv'), 64), variables('d')), take(replace(variables('nut'), variables('ph'), 'cv'), sub(64, 1)), take(replace(variables('nut'), variables('ph'), 'cv'), 64))]",
                "slug": "cv"
              },
              "cognitiveServicesContentModerator": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'cm'), 64), variables('d')), take(replace(variables('nt'), variables('ph'), 'cm'), sub(64, 1)), take(replace(variables('nt'), variables('ph'), 'cm'), 64))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'cm'), 64), variables('d')), take(replace(variables('nut'), variables('ph'), 'cm'), sub(64, 1)), take(replace(variables('nut'), variables('ph'), 'cm'), 64))]",
                "slug": "cm"
              },
              "cognitiveServicesContentSafety": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'cs'), 64), variables('d')), take(replace(variables('nt'), variables('ph'), 'cs'), sub(64, 1)), take(replace(variables('nt'), variables('ph'), 'cs'), 64))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'cs'), 64), variables('d')), take(replace(variables('nut'), variables('ph'), 'cs'), sub(64, 1)), take(replace(variables('nut'), variables('ph'), 'cs'), 64))]",
                "slug": "cs"
              },
              "cognitiveServicesCustomVisionPrediction": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'cstv'), 64), variables('d')), take(replace(variables('nt'), variables('ph'), 'cstv'), sub(64, 1)), take(replace(variables('nt'), variables('ph'), 'cstv'), 64))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'cstv'), 64), variables('d')), take(replace(variables('nut'), variables('ph'), 'cstv'), sub(64, 1)), take(replace(variables('nut'), variables('ph'), 'cstv'), 64))]",
                "slug": "cstv"
              },
              "cognitiveServicesCustomVisionTraining": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'cstvt'), 64), variables('d')), take(replace(variables('nt'), variables('ph'), 'cstvt'), sub(64, 1)), take(replace(variables('nt'), variables('ph'), 'cstvt'), 64))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'cstvt'), 64), variables('d')), take(replace(variables('nut'), variables('ph'), 'cstvt'), sub(64, 1)), take(replace(variables('nut'), variables('ph'), 'cstvt'), 64))]",
                "slug": "cstvt"
              },
              "cognitiveServicesDocumentIntelligence": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'di'), 64), variables('d')), take(replace(variables('nt'), variables('ph'), 'di'), sub(64, 1)), take(replace(variables('nt'), variables('ph'), 'di'), 64))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'di'), 64), variables('d')), take(replace(variables('nut'), variables('ph'), 'di'), sub(64, 1)), take(replace(variables('nut'), variables('ph'), 'di'), 64))]",
                "slug": "di"
              },
              "cognitiveServicesMultiServiceAccount": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'aisa'), 64), variables('d')), take(replace(variables('nt'), variables('ph'), 'aisa'), sub(64, 1)), take(replace(variables('nt'), variables('ph'), 'aisa'), 64))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'aisa'), 64), variables('d')), take(replace(variables('nut'), variables('ph'), 'aisa'), sub(64, 1)), take(replace(variables('nut'), variables('ph'), 'aisa'), 64))]",
                "slug": "aisa"
              },
              "cognitiveServicesVideoIndexer": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'avi'), 64), variables('d')), take(replace(variables('nt'), variables('ph'), 'avi'), sub(64, 1)), take(replace(variables('nt'), variables('ph'), 'avi'), 64))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'avi'), 64), variables('d')), take(replace(variables('nut'), variables('ph'), 'avi'), sub(64, 1)), take(replace(variables('nut'), variables('ph'), 'avi'), 64))]",
                "slug": "avi"
              },
              "cognitiveServicesFaceApi": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'face'), 64), variables('d')), take(replace(variables('nt'), variables('ph'), 'face'), sub(64, 1)), take(replace(variables('nt'), variables('ph'), 'face'), 64))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'face'), 64), variables('d')), take(replace(variables('nut'), variables('ph'), 'face'), sub(64, 1)), take(replace(variables('nut'), variables('ph'), 'face'), 64))]",
                "slug": "face"
              },
              "cognitiveServicesImmersiveReader": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'ir'), 64), variables('d')), take(replace(variables('nt'), variables('ph'), 'ir'), sub(64, 1)), take(replace(variables('nt'), variables('ph'), 'ir'), 64))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'ir'), 64), variables('d')), take(replace(variables('nut'), variables('ph'), 'ir'), sub(64, 1)), take(replace(variables('nut'), variables('ph'), 'ir'), 64))]",
                "slug": "ir"
              },
              "cognitiveServicesLanguageService": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'lang'), 64), variables('d')), take(replace(variables('nt'), variables('ph'), 'lang'), sub(64, 1)), take(replace(variables('nt'), variables('ph'), 'lang'), 64))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'lang'), 64), variables('d')), take(replace(variables('nut'), variables('ph'), 'lang'), sub(64, 1)), take(replace(variables('nut'), variables('ph'), 'lang'), 64))]",
                "slug": "lang"
              },
              "cognitiveServicesSpeechService": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'spch'), 64), variables('d')), take(replace(variables('nt'), variables('ph'), 'spch'), sub(64, 1)), take(replace(variables('nt'), variables('ph'), 'spch'), 64))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'spch'), 64), variables('d')), take(replace(variables('nut'), variables('ph'), 'spch'), sub(64, 1)), take(replace(variables('nut'), variables('ph'), 'spch'), 64))]",
                "slug": "spch"
              },
              "cognitiveServicesTranslator": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'trsl'), 64), variables('d')), take(replace(variables('nt'), variables('ph'), 'trsl'), sub(64, 1)), take(replace(variables('nt'), variables('ph'), 'trsl'), 64))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'trsl'), 64), variables('d')), take(replace(variables('nut'), variables('ph'), 'trsl'), sub(64, 1)), take(replace(variables('nut'), variables('ph'), 'trsl'), 64))]",
                "slug": "trsl"
              },
              "containerApps": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'ca'), 32), variables('d')), take(replace(variables('nt'), variables('ph'), 'ca'), sub(32, 1)), take(replace(variables('nt'), variables('ph'), 'ca'), 32))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'ca'), 32), variables('d')), take(replace(variables('nut'), variables('ph'), 'ca'), sub(32, 1)), take(replace(variables('nut'), variables('ph'), 'ca'), 32))]",
                "slug": "ca"
              },
              "containerAppsEnvironment": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'cae'), 64), variables('d')), take(replace(variables('nt'), variables('ph'), 'cae'), sub(64, 1)), take(replace(variables('nt'), variables('ph'), 'cae'), 64))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'cae'), 64), variables('d')), take(replace(variables('nut'), variables('ph'), 'cae'), sub(64, 1)), take(replace(variables('nut'), variables('ph'), 'cae'), 64))]",
                "slug": "cae"
              },
              "containerGroup": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'cg'), 63), variables('d')), take(replace(variables('nt'), variables('ph'), 'cg'), sub(63, 1)), take(replace(variables('nt'), variables('ph'), 'cg'), 63))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'cg'), 63), variables('d')), take(replace(variables('nut'), variables('ph'), 'cg'), sub(63, 1)), take(replace(variables('nut'), variables('ph'), 'cg'), 63))]",
                "slug": "cg"
              },
              "containerRegistry": {
                "name": "[take(replace(variables('nst'), variables('ph'), 'acr'), 63)]",
                "nameUnique": "[take(replace(variables('nust'), variables('ph'), 'acr'), 63)]",
                "slug": "acr"
              },
              "containerRegistryWebhook": {
                "name": "[take(replace(variables('nst'), variables('ph'), 'crwh'), 50)]",
                "nameUnique": "[take(replace(variables('nust'), variables('ph'), 'crwh'), 50)]",
                "slug": "crwh"
              },
              "cosmosdbAccount": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'cosmos'), 63), variables('d')), take(replace(variables('nt'), variables('ph'), 'cosmos'), sub(63, 1)), take(replace(variables('nt'), variables('ph'), 'cosmos'), 63))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'cosmos'), 63), variables('d')), take(replace(variables('nut'), variables('ph'), 'cosmos'), sub(63, 1)), take(replace(variables('nut'), variables('ph'), 'cosmos'), 63))]",
                "slug": "cosmos"
              },
              "customProvider": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'prov'), 64), variables('d')), take(replace(variables('nt'), variables('ph'), 'prov'), sub(64, 1)), take(replace(variables('nt'), variables('ph'), 'prov'), 64))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'prov'), 64), variables('d')), take(replace(variables('nut'), variables('ph'), 'prov'), sub(64, 1)), take(replace(variables('nut'), variables('ph'), 'prov'), 64))]",
                "slug": "prov"
              },
              "dashboard": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'dsb'), 160), variables('d')), take(replace(variables('nt'), variables('ph'), 'dsb'), sub(160, 1)), take(replace(variables('nt'), variables('ph'), 'dsb'), 160))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'dsb'), 160), variables('d')), take(replace(variables('nut'), variables('ph'), 'dsb'), sub(160, 1)), take(replace(variables('nut'), variables('ph'), 'dsb'), 160))]",
                "slug": "dsb"
              },
              "dataFactory": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'adf'), 63), variables('d')), take(replace(variables('nt'), variables('ph'), 'adf'), sub(63, 1)), take(replace(variables('nt'), variables('ph'), 'adf'), 63))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'adf'), 63), variables('d')), take(replace(variables('nut'), variables('ph'), 'adf'), sub(63, 1)), take(replace(variables('nut'), variables('ph'), 'adf'), 63))]",
                "slug": "adf"
              },
              "dataFactoryDatasetMysql": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'adfmysql'), 260), variables('d')), take(replace(variables('nt'), variables('ph'), 'adfmysql'), sub(260, 1)), take(replace(variables('nt'), variables('ph'), 'adfmysql'), 260))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'adfmysql'), 260), variables('d')), take(replace(variables('nut'), variables('ph'), 'adfmysql'), sub(260, 1)), take(replace(variables('nut'), variables('ph'), 'adfmysql'), 260))]",
                "slug": "adfmysql"
              },
              "dataFactoryDatasetPostgresql": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'adfpsql'), 260), variables('d')), take(replace(variables('nt'), variables('ph'), 'adfpsql'), sub(260, 1)), take(replace(variables('nt'), variables('ph'), 'adfpsql'), 260))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'adfpsql'), 260), variables('d')), take(replace(variables('nut'), variables('ph'), 'adfpsql'), sub(260, 1)), take(replace(variables('nut'), variables('ph'), 'adfpsql'), 260))]",
                "slug": "adfpsql"
              },
              "dataFactoryDatasetSqlServerTable": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'adfmssql'), 260), variables('d')), take(replace(variables('nt'), variables('ph'), 'adfmssql'), sub(260, 1)), take(replace(variables('nt'), variables('ph'), 'adfmssql'), 260))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'adfmssql'), 260), variables('d')), take(replace(variables('nut'), variables('ph'), 'adfmssql'), sub(260, 1)), take(replace(variables('nut'), variables('ph'), 'adfmssql'), 260))]",
                "slug": "adfmssql"
              },
              "dataFactoryIntegrationRuntimeManaged": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'adfir'), 63), variables('d')), take(replace(variables('nt'), variables('ph'), 'adfir'), sub(63, 1)), take(replace(variables('nt'), variables('ph'), 'adfir'), 63))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'adfir'), 63), variables('d')), take(replace(variables('nut'), variables('ph'), 'adfir'), sub(63, 1)), take(replace(variables('nut'), variables('ph'), 'adfir'), 63))]",
                "slug": "adfir"
              },
              "dataFactoryLinkedServiceDataLakeStorageGen2": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'adfsvst'), 260), variables('d')), take(replace(variables('nt'), variables('ph'), 'adfsvst'), sub(260, 1)), take(replace(variables('nt'), variables('ph'), 'adfsvst'), 260))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'adfsvst'), 260), variables('d')), take(replace(variables('nut'), variables('ph'), 'adfsvst'), sub(260, 1)), take(replace(variables('nut'), variables('ph'), 'adfsvst'), 260))]",
                "slug": "adfsvst"
              },
              "dataFactoryLinkedServiceKeyVault": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'adfsvkv'), 260), variables('d')), take(replace(variables('nt'), variables('ph'), 'adfsvkv'), sub(260, 1)), take(replace(variables('nt'), variables('ph'), 'adfsvkv'), 260))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'adfsvkv'), 260), variables('d')), take(replace(variables('nut'), variables('ph'), 'adfsvkv'), sub(260, 1)), take(replace(variables('nut'), variables('ph'), 'adfsvkv'), 260))]",
                "slug": "adfsvkv"
              },
              "dataFactoryLinkedServiceMysql": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'adfsvmysql'), 260), variables('d')), take(replace(variables('nt'), variables('ph'), 'adfsvmysql'), sub(260, 1)), take(replace(variables('nt'), variables('ph'), 'adfsvmysql'), 260))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'adfsvmysql'), 260), variables('d')), take(replace(variables('nut'), variables('ph'), 'adfsvmysql'), sub(260, 1)), take(replace(variables('nut'), variables('ph'), 'adfsvmysql'), 260))]",
                "slug": "adfsvmysql"
              },
              "dataFactoryLinkedServicePostgresql": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'adfsvpsql'), 260), variables('d')), take(replace(variables('nt'), variables('ph'), 'adfsvpsql'), sub(260, 1)), take(replace(variables('nt'), variables('ph'), 'adfsvpsql'), 260))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'adfsvpsql'), 260), variables('d')), take(replace(variables('nut'), variables('ph'), 'adfsvpsql'), sub(260, 1)), take(replace(variables('nut'), variables('ph'), 'adfsvpsql'), 260))]",
                "slug": "adfsvpsql"
              },
              "dataFactoryLinkedServiceSqlServer": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'adfsvmssql'), 260), variables('d')), take(replace(variables('nt'), variables('ph'), 'adfsvmssql'), sub(260, 1)), take(replace(variables('nt'), variables('ph'), 'adfsvmssql'), 260))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'adfsvmssql'), 260), variables('d')), take(replace(variables('nut'), variables('ph'), 'adfsvmssql'), sub(260, 1)), take(replace(variables('nut'), variables('ph'), 'adfsvmssql'), 260))]",
                "slug": "adfsvmssql"
              },
              "dataFactoryPipeline": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'adfpl'), 260), variables('d')), take(replace(variables('nt'), variables('ph'), 'adfpl'), sub(260, 1)), take(replace(variables('nt'), variables('ph'), 'adfpl'), 260))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'adfpl'), 260), variables('d')), take(replace(variables('nut'), variables('ph'), 'adfpl'), sub(260, 1)), take(replace(variables('nut'), variables('ph'), 'adfpl'), 260))]",
                "slug": "adfpl"
              },
              "dataFactoryTriggerSchedule": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'adftg'), 260), variables('d')), take(replace(variables('nt'), variables('ph'), 'adftg'), sub(260, 1)), take(replace(variables('nt'), variables('ph'), 'adftg'), 260))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'adftg'), 260), variables('d')), take(replace(variables('nut'), variables('ph'), 'adftg'), sub(260, 1)), take(replace(variables('nut'), variables('ph'), 'adftg'), 260))]",
                "slug": "adftg"
              },
              "dataLakeAnalyticsAccount": {
                "name": "[take(replace(variables('nst'), variables('ph'), 'dla'), 24)]",
                "nameUnique": "[take(replace(variables('nust'), variables('ph'), 'dla'), 24)]",
                "slug": "dla"
              },
              "dataLakeAnalyticsFirewallRule": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'dlfw'), 50), variables('d')), take(replace(variables('nt'), variables('ph'), 'dlfw'), sub(50, 1)), take(replace(variables('nt'), variables('ph'), 'dlfw'), 50))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'dlfw'), 50), variables('d')), take(replace(variables('nut'), variables('ph'), 'dlfw'), sub(50, 1)), take(replace(variables('nut'), variables('ph'), 'dlfw'), 50))]",
                "slug": "dlfw"
              },
              "dataLakeStore": {
                "name": "[take(replace(variables('nst'), variables('ph'), 'dls'), 24)]",
                "nameUnique": "[take(replace(variables('nust'), variables('ph'), 'dls'), 24)]",
                "slug": "dls"
              },
              "dataLakeStoreFirewallRule": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'dlsfw'), 50), variables('d')), take(replace(variables('nt'), variables('ph'), 'dlsfw'), sub(50, 1)), take(replace(variables('nt'), variables('ph'), 'dlsfw'), 50))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'dlsfw'), 50), variables('d')), take(replace(variables('nut'), variables('ph'), 'dlsfw'), sub(50, 1)), take(replace(variables('nut'), variables('ph'), 'dlsfw'), 50))]",
                "slug": "dlsfw"
              },
              "databaseMigrationProject": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'migr'), 57), variables('d')), take(replace(variables('nt'), variables('ph'), 'migr'), sub(57, 1)), take(replace(variables('nt'), variables('ph'), 'migr'), 57))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'migr'), 57), variables('d')), take(replace(variables('nut'), variables('ph'), 'migr'), sub(57, 1)), take(replace(variables('nut'), variables('ph'), 'migr'), 57))]",
                "slug": "migr"
              },
              "databaseMigrationService": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'dms'), 62), variables('d')), take(replace(variables('nt'), variables('ph'), 'dms'), sub(62, 1)), take(replace(variables('nt'), variables('ph'), 'dms'), 62))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'dms'), 62), variables('d')), take(replace(variables('nut'), variables('ph'), 'dms'), sub(62, 1)), take(replace(variables('nut'), variables('ph'), 'dms'), 62))]",
                "slug": "dms"
              },
              "databricksWorkspace": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'dbw'), 30), variables('d')), take(replace(variables('nt'), variables('ph'), 'dbw'), sub(30, 1)), take(replace(variables('nt'), variables('ph'), 'dbw'), 30))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'dbw'), 30), variables('d')), take(replace(variables('nut'), variables('ph'), 'dbw'), sub(30, 1)), take(replace(variables('nut'), variables('ph'), 'dbw'), 30))]",
                "slug": "dbw"
              },
              "devTestLab": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'lab'), 50), variables('d')), take(replace(variables('nt'), variables('ph'), 'lab'), sub(50, 1)), take(replace(variables('nt'), variables('ph'), 'lab'), 50))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'lab'), 50), variables('d')), take(replace(variables('nut'), variables('ph'), 'lab'), sub(50, 1)), take(replace(variables('nut'), variables('ph'), 'lab'), 50))]",
                "slug": "lab"
              },
              "devTestLinuxVirtualMachine": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'labvm'), 64), variables('d')), take(replace(variables('nt'), variables('ph'), 'labvm'), sub(64, 1)), take(replace(variables('nt'), variables('ph'), 'labvm'), 64))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'labvm'), 64), variables('d')), take(replace(variables('nut'), variables('ph'), 'labvm'), sub(64, 1)), take(replace(variables('nut'), variables('ph'), 'labvm'), 64))]",
                "slug": "labvm"
              },
              "devTestWindowsVirtualMachine": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'labvm'), 15), variables('d')), take(replace(variables('nt'), variables('ph'), 'labvm'), sub(15, 1)), take(replace(variables('nt'), variables('ph'), 'labvm'), 15))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'labvm'), 15), variables('d')), take(replace(variables('nut'), variables('ph'), 'labvm'), sub(15, 1)), take(replace(variables('nut'), variables('ph'), 'labvm'), 15))]",
                "slug": "labvm"
              },
              "diskEncryptionSet": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'des'), 80), variables('d')), take(replace(variables('nt'), variables('ph'), 'des'), sub(80, 1)), take(replace(variables('nt'), variables('ph'), 'des'), 80))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'des'), 80), variables('d')), take(replace(variables('nut'), variables('ph'), 'des'), sub(80, 1)), take(replace(variables('nut'), variables('ph'), 'des'), 80))]",
                "slug": "des"
              },
              "dnsZone": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'dns'), 63), variables('d')), take(replace(variables('nt'), variables('ph'), 'dns'), sub(63, 1)), take(replace(variables('nt'), variables('ph'), 'dns'), 63))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'dns'), 63), variables('d')), take(replace(variables('nut'), variables('ph'), 'dns'), sub(63, 1)), take(replace(variables('nut'), variables('ph'), 'dns'), 63))]",
                "slug": "dns"
              },
              "eventGridDomain": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'egd'), 50), variables('d')), take(replace(variables('nt'), variables('ph'), 'egd'), sub(50, 1)), take(replace(variables('nt'), variables('ph'), 'egd'), 50))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'egd'), 50), variables('d')), take(replace(variables('nut'), variables('ph'), 'egd'), sub(50, 1)), take(replace(variables('nut'), variables('ph'), 'egd'), 50))]",
                "slug": "egd"
              },
              "eventGridDomainTopic": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'egdt'), 50), variables('d')), take(replace(variables('nt'), variables('ph'), 'egdt'), sub(50, 1)), take(replace(variables('nt'), variables('ph'), 'egdt'), 50))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'egdt'), 50), variables('d')), take(replace(variables('nut'), variables('ph'), 'egdt'), sub(50, 1)), take(replace(variables('nut'), variables('ph'), 'egdt'), 50))]",
                "slug": "egdt"
              },
              "eventGridEventSubscription": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'egs'), 64), variables('d')), take(replace(variables('nt'), variables('ph'), 'egs'), sub(64, 1)), take(replace(variables('nt'), variables('ph'), 'egs'), 64))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'egs'), 64), variables('d')), take(replace(variables('nut'), variables('ph'), 'egs'), sub(64, 1)), take(replace(variables('nut'), variables('ph'), 'egs'), 64))]",
                "slug": "egs"
              },
              "eventGridTopic": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'egt'), 50), variables('d')), take(replace(variables('nt'), variables('ph'), 'egt'), sub(50, 1)), take(replace(variables('nt'), variables('ph'), 'egt'), 50))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'egt'), 50), variables('d')), take(replace(variables('nut'), variables('ph'), 'egt'), sub(50, 1)), take(replace(variables('nut'), variables('ph'), 'egt'), 50))]",
                "slug": "egt"
              },
              "eventHub": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'evh'), 50), variables('d')), take(replace(variables('nt'), variables('ph'), 'evh'), sub(50, 1)), take(replace(variables('nt'), variables('ph'), 'evh'), 50))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'evh'), 50), variables('d')), take(replace(variables('nut'), variables('ph'), 'evh'), sub(50, 1)), take(replace(variables('nut'), variables('ph'), 'evh'), 50))]",
                "slug": "evh"
              },
              "eventHubAuthorizationRule": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'ehar'), 50), variables('d')), take(replace(variables('nt'), variables('ph'), 'ehar'), sub(50, 1)), take(replace(variables('nt'), variables('ph'), 'ehar'), 50))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'ehar'), 50), variables('d')), take(replace(variables('nut'), variables('ph'), 'ehar'), sub(50, 1)), take(replace(variables('nut'), variables('ph'), 'ehar'), 50))]",
                "slug": "ehar"
              },
              "eventHubConsumerGroup": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'ehcg'), 50), variables('d')), take(replace(variables('nt'), variables('ph'), 'ehcg'), sub(50, 1)), take(replace(variables('nt'), variables('ph'), 'ehcg'), 50))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'ehcg'), 50), variables('d')), take(replace(variables('nut'), variables('ph'), 'ehcg'), sub(50, 1)), take(replace(variables('nut'), variables('ph'), 'ehcg'), 50))]",
                "slug": "ehcg"
              },
              "eventHubNamespace": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'ehn'), 50), variables('d')), take(replace(variables('nt'), variables('ph'), 'ehn'), sub(50, 1)), take(replace(variables('nt'), variables('ph'), 'ehn'), 50))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'ehn'), 50), variables('d')), take(replace(variables('nut'), variables('ph'), 'ehn'), sub(50, 1)), take(replace(variables('nut'), variables('ph'), 'ehn'), 50))]",
                "slug": "ehn"
              },
              "eventHubNamespaceAuthorizationRule": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'ehnar'), 50), variables('d')), take(replace(variables('nt'), variables('ph'), 'ehnar'), sub(50, 1)), take(replace(variables('nt'), variables('ph'), 'ehnar'), 50))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'ehnar'), 50), variables('d')), take(replace(variables('nut'), variables('ph'), 'ehnar'), sub(50, 1)), take(replace(variables('nut'), variables('ph'), 'ehnar'), 50))]",
                "slug": "ehnar"
              },
              "eventHubNamespaceDisasterRecoveryConfig": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'ehdr'), 50), variables('d')), take(replace(variables('nt'), variables('ph'), 'ehdr'), sub(50, 1)), take(replace(variables('nt'), variables('ph'), 'ehdr'), 50))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'ehdr'), 50), variables('d')), take(replace(variables('nut'), variables('ph'), 'ehdr'), sub(50, 1)), take(replace(variables('nut'), variables('ph'), 'ehdr'), 50))]",
                "slug": "ehdr"
              },
              "expressRouteCircuit": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'erc'), 80), variables('d')), take(replace(variables('nt'), variables('ph'), 'erc'), sub(80, 1)), take(replace(variables('nt'), variables('ph'), 'erc'), 80))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'erc'), 80), variables('d')), take(replace(variables('nut'), variables('ph'), 'erc'), sub(80, 1)), take(replace(variables('nut'), variables('ph'), 'erc'), 80))]",
                "slug": "erc"
              },
              "expressRouteGateway": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'ergw'), 80), variables('d')), take(replace(variables('nt'), variables('ph'), 'ergw'), sub(80, 1)), take(replace(variables('nt'), variables('ph'), 'ergw'), 80))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'ergw'), 80), variables('d')), take(replace(variables('nut'), variables('ph'), 'ergw'), sub(80, 1)), take(replace(variables('nut'), variables('ph'), 'ergw'), 80))]",
                "slug": "ergw"
              },
              "firewall": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'afw'), 80), variables('d')), take(replace(variables('nt'), variables('ph'), 'afw'), sub(80, 1)), take(replace(variables('nt'), variables('ph'), 'afw'), 80))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'afw'), 80), variables('d')), take(replace(variables('nut'), variables('ph'), 'afw'), sub(80, 1)), take(replace(variables('nut'), variables('ph'), 'afw'), 80))]",
                "slug": "afw"
              },
              "firewallPolicy": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'afwp'), 80), variables('d')), take(replace(variables('nt'), variables('ph'), 'afwp'), sub(80, 1)), take(replace(variables('nt'), variables('ph'), 'afwp'), 80))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'afwp'), 80), variables('d')), take(replace(variables('nut'), variables('ph'), 'afwp'), sub(80, 1)), take(replace(variables('nut'), variables('ph'), 'afwp'), 80))]",
                "slug": "afwp"
              },
              "frontDoor": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'fd'), 64), variables('d')), take(replace(variables('nt'), variables('ph'), 'fd'), sub(64, 1)), take(replace(variables('nt'), variables('ph'), 'fd'), 64))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'fd'), 64), variables('d')), take(replace(variables('nut'), variables('ph'), 'fd'), sub(64, 1)), take(replace(variables('nut'), variables('ph'), 'fd'), 64))]",
                "slug": "fd"
              },
              "frontDoorFirewallPolicy": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'fdfw'), 80), variables('d')), take(replace(variables('nt'), variables('ph'), 'fdfw'), sub(80, 1)), take(replace(variables('nt'), variables('ph'), 'fdfw'), 80))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'fdfw'), 80), variables('d')), take(replace(variables('nut'), variables('ph'), 'fdfw'), sub(80, 1)), take(replace(variables('nut'), variables('ph'), 'fdfw'), 80))]",
                "slug": "fdfw"
              },
              "functionApp": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'func'), 60), variables('d')), take(replace(variables('nt'), variables('ph'), 'func'), sub(60, 1)), take(replace(variables('nt'), variables('ph'), 'func'), 60))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'func'), 60), variables('d')), take(replace(variables('nut'), variables('ph'), 'func'), sub(60, 1)), take(replace(variables('nut'), variables('ph'), 'func'), 60))]",
                "slug": "func"
              },
              "grafana": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'grfn'), 23), variables('d')), take(replace(variables('nt'), variables('ph'), 'grfn'), sub(23, 1)), take(replace(variables('nt'), variables('ph'), 'grfn'), 23))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'grfn'), 23), variables('d')), take(replace(variables('nut'), variables('ph'), 'grfn'), sub(23, 1)), take(replace(variables('nut'), variables('ph'), 'grfn'), 23))]",
                "slug": "grfn"
              },
              "hdInsightHadoopCluster": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'hadoop'), 59), variables('d')), take(replace(variables('nt'), variables('ph'), 'hadoop'), sub(59, 1)), take(replace(variables('nt'), variables('ph'), 'hadoop'), 59))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'hadoop'), 59), variables('d')), take(replace(variables('nut'), variables('ph'), 'hadoop'), sub(59, 1)), take(replace(variables('nut'), variables('ph'), 'hadoop'), 59))]",
                "slug": "hadoop"
              },
              "hdInsightHbaseCluster": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'hbase'), 59), variables('d')), take(replace(variables('nt'), variables('ph'), 'hbase'), sub(59, 1)), take(replace(variables('nt'), variables('ph'), 'hbase'), 59))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'hbase'), 59), variables('d')), take(replace(variables('nut'), variables('ph'), 'hbase'), sub(59, 1)), take(replace(variables('nut'), variables('ph'), 'hbase'), 59))]",
                "slug": "hbase"
              },
              "hdInsightInteractiveQueryCluster": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'iqr'), 59), variables('d')), take(replace(variables('nt'), variables('ph'), 'iqr'), sub(59, 1)), take(replace(variables('nt'), variables('ph'), 'iqr'), 59))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'iqr'), 59), variables('d')), take(replace(variables('nut'), variables('ph'), 'iqr'), sub(59, 1)), take(replace(variables('nut'), variables('ph'), 'iqr'), 59))]",
                "slug": "iqr"
              },
              "hdInsightKafkaCluster": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'kafka'), 59), variables('d')), take(replace(variables('nt'), variables('ph'), 'kafka'), sub(59, 1)), take(replace(variables('nt'), variables('ph'), 'kafka'), 59))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'kafka'), 59), variables('d')), take(replace(variables('nut'), variables('ph'), 'kafka'), sub(59, 1)), take(replace(variables('nut'), variables('ph'), 'kafka'), 59))]",
                "slug": "kafka"
              },
              "hdInsightMlServicesCluster": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'mls'), 59), variables('d')), take(replace(variables('nt'), variables('ph'), 'mls'), sub(59, 1)), take(replace(variables('nt'), variables('ph'), 'mls'), 59))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'mls'), 59), variables('d')), take(replace(variables('nut'), variables('ph'), 'mls'), sub(59, 1)), take(replace(variables('nut'), variables('ph'), 'mls'), 59))]",
                "slug": "mls"
              },
              "hdInsightRserverCluster": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'rsv'), 59), variables('d')), take(replace(variables('nt'), variables('ph'), 'rsv'), sub(59, 1)), take(replace(variables('nt'), variables('ph'), 'rsv'), 59))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'rsv'), 59), variables('d')), take(replace(variables('nut'), variables('ph'), 'rsv'), sub(59, 1)), take(replace(variables('nut'), variables('ph'), 'rsv'), 59))]",
                "slug": "rsv"
              },
              "hdInsightSparkCluster": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'spark'), 59), variables('d')), take(replace(variables('nt'), variables('ph'), 'spark'), sub(59, 1)), take(replace(variables('nt'), variables('ph'), 'spark'), 59))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'spark'), 59), variables('d')), take(replace(variables('nut'), variables('ph'), 'spark'), sub(59, 1)), take(replace(variables('nut'), variables('ph'), 'spark'), 59))]",
                "slug": "spark"
              },
              "hdInsightStormCluster": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'storm'), 59), variables('d')), take(replace(variables('nt'), variables('ph'), 'storm'), sub(59, 1)), take(replace(variables('nt'), variables('ph'), 'storm'), 59))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'storm'), 59), variables('d')), take(replace(variables('nut'), variables('ph'), 'storm'), sub(59, 1)), take(replace(variables('nut'), variables('ph'), 'storm'), 59))]",
                "slug": "storm"
              },
              "image": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'img'), 80), variables('d')), take(replace(variables('nt'), variables('ph'), 'img'), sub(80, 1)), take(replace(variables('nt'), variables('ph'), 'img'), 80))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'img'), 80), variables('d')), take(replace(variables('nut'), variables('ph'), 'img'), sub(80, 1)), take(replace(variables('nut'), variables('ph'), 'img'), 80))]",
                "slug": "img"
              },
              "iotCentralApplication": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'iotapp'), 63), variables('d')), take(replace(variables('nt'), variables('ph'), 'iotapp'), sub(63, 1)), take(replace(variables('nt'), variables('ph'), 'iotapp'), 63))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'iotapp'), 63), variables('d')), take(replace(variables('nut'), variables('ph'), 'iotapp'), sub(63, 1)), take(replace(variables('nut'), variables('ph'), 'iotapp'), 63))]",
                "slug": "iotapp"
              },
              "iotHub": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'iot'), 50), variables('d')), take(replace(variables('nt'), variables('ph'), 'iot'), sub(50, 1)), take(replace(variables('nt'), variables('ph'), 'iot'), 50))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'iot'), 50), variables('d')), take(replace(variables('nut'), variables('ph'), 'iot'), sub(50, 1)), take(replace(variables('nut'), variables('ph'), 'iot'), 50))]",
                "slug": "iot"
              },
              "iotHubConsumerGroup": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'iotcg'), 50), variables('d')), take(replace(variables('nt'), variables('ph'), 'iotcg'), sub(50, 1)), take(replace(variables('nt'), variables('ph'), 'iotcg'), 50))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'iotcg'), 50), variables('d')), take(replace(variables('nut'), variables('ph'), 'iotcg'), sub(50, 1)), take(replace(variables('nut'), variables('ph'), 'iotcg'), 50))]",
                "slug": "iotcg"
              },
              "iotHubDps": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'dps'), 64), variables('d')), take(replace(variables('nt'), variables('ph'), 'dps'), sub(64, 1)), take(replace(variables('nt'), variables('ph'), 'dps'), 64))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'dps'), 64), variables('d')), take(replace(variables('nut'), variables('ph'), 'dps'), sub(64, 1)), take(replace(variables('nut'), variables('ph'), 'dps'), 64))]",
                "slug": "dps"
              },
              "iotHubDpsCertificate": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'dpscert'), 64), variables('d')), take(replace(variables('nt'), variables('ph'), 'dpscert'), sub(64, 1)), take(replace(variables('nt'), variables('ph'), 'dpscert'), 64))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'dpscert'), 64), variables('d')), take(replace(variables('nut'), variables('ph'), 'dpscert'), sub(64, 1)), take(replace(variables('nut'), variables('ph'), 'dpscert'), 64))]",
                "slug": "dpscert"
              },
              "keyVault": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'kv'), 24), variables('d')), take(replace(variables('nt'), variables('ph'), 'kv'), sub(24, 1)), take(replace(variables('nt'), variables('ph'), 'kv'), 24))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'kv'), 24), variables('d')), take(replace(variables('nut'), variables('ph'), 'kv'), sub(24, 1)), take(replace(variables('nut'), variables('ph'), 'kv'), 24))]",
                "slug": "kv"
              },
              "keyVaultCertificate": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'kvc'), 127), variables('d')), take(replace(variables('nt'), variables('ph'), 'kvc'), sub(127, 1)), take(replace(variables('nt'), variables('ph'), 'kvc'), 127))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'kvc'), 127), variables('d')), take(replace(variables('nut'), variables('ph'), 'kvc'), sub(127, 1)), take(replace(variables('nut'), variables('ph'), 'kvc'), 127))]",
                "slug": "kvc"
              },
              "keyVaultKey": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'kvk'), 127), variables('d')), take(replace(variables('nt'), variables('ph'), 'kvk'), sub(127, 1)), take(replace(variables('nt'), variables('ph'), 'kvk'), 127))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'kvk'), 127), variables('d')), take(replace(variables('nut'), variables('ph'), 'kvk'), sub(127, 1)), take(replace(variables('nut'), variables('ph'), 'kvk'), 127))]",
                "slug": "kvk"
              },
              "keyVaultSecret": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'kvs'), 127), variables('d')), take(replace(variables('nt'), variables('ph'), 'kvs'), sub(127, 1)), take(replace(variables('nt'), variables('ph'), 'kvs'), 127))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'kvs'), 127), variables('d')), take(replace(variables('nut'), variables('ph'), 'kvs'), sub(127, 1)), take(replace(variables('nut'), variables('ph'), 'kvs'), 127))]",
                "slug": "kvs"
              },
              "kubernetesCluster": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'aks'), 63), variables('d')), take(replace(variables('nt'), variables('ph'), 'aks'), sub(63, 1)), take(replace(variables('nt'), variables('ph'), 'aks'), 63))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'aks'), 63), variables('d')), take(replace(variables('nut'), variables('ph'), 'aks'), sub(63, 1)), take(replace(variables('nut'), variables('ph'), 'aks'), 63))]",
                "slug": "aks"
              },
              "kustoCluster": {
                "name": "[take(replace(variables('nst'), variables('ph'), 'kc'), 22)]",
                "nameUnique": "[take(replace(variables('nust'), variables('ph'), 'kc'), 22)]",
                "slug": "kc"
              },
              "kustoDatabase": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'kdb'), 260), variables('d')), take(replace(variables('nt'), variables('ph'), 'kdb'), sub(260, 1)), take(replace(variables('nt'), variables('ph'), 'kdb'), 260))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'kdb'), 260), variables('d')), take(replace(variables('nut'), variables('ph'), 'kdb'), sub(260, 1)), take(replace(variables('nut'), variables('ph'), 'kdb'), 260))]",
                "slug": "kdb"
              },
              "kustoEventHubDataConnection": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'kehc'), 40), variables('d')), take(replace(variables('nt'), variables('ph'), 'kehc'), sub(40, 1)), take(replace(variables('nt'), variables('ph'), 'kehc'), 40))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'kehc'), 40), variables('d')), take(replace(variables('nut'), variables('ph'), 'kehc'), sub(40, 1)), take(replace(variables('nut'), variables('ph'), 'kehc'), 40))]",
                "slug": "kehc"
              },
              "loadBalancer": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'lb'), 80), variables('d')), take(replace(variables('nt'), variables('ph'), 'lb'), sub(80, 1)), take(replace(variables('nt'), variables('ph'), 'lb'), 80))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'lb'), 80), variables('d')), take(replace(variables('nut'), variables('ph'), 'lb'), sub(80, 1)), take(replace(variables('nut'), variables('ph'), 'lb'), 80))]",
                "slug": "lb"
              },
              "loadBalancerNatRule": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'lbnatrl'), 80), variables('d')), take(replace(variables('nt'), variables('ph'), 'lbnatrl'), sub(80, 1)), take(replace(variables('nt'), variables('ph'), 'lbnatrl'), 80))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'lbnatrl'), 80), variables('d')), take(replace(variables('nut'), variables('ph'), 'lbnatrl'), sub(80, 1)), take(replace(variables('nut'), variables('ph'), 'lbnatrl'), 80))]",
                "slug": "lbnatrl"
              },
              "loadTesting": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'lt'), 64), variables('d')), take(replace(variables('nt'), variables('ph'), 'lt'), sub(64, 1)), take(replace(variables('nt'), variables('ph'), 'lt'), 64))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'lt'), 64), variables('d')), take(replace(variables('nut'), variables('ph'), 'lt'), sub(64, 1)), take(replace(variables('nut'), variables('ph'), 'lt'), 64))]",
                "slug": "lt"
              },
              "linuxVirtualMachine": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'vm'), 64), variables('d')), take(replace(variables('nt'), variables('ph'), 'vm'), sub(64, 1)), take(replace(variables('nt'), variables('ph'), 'vm'), 64))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'vm'), 64), variables('d')), take(replace(variables('nut'), variables('ph'), 'vm'), sub(64, 1)), take(replace(variables('nut'), variables('ph'), 'vm'), 64))]",
                "slug": "vm"
              },
              "linuxVirtualMachineScaleSet": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'vmss'), 64), variables('d')), take(replace(variables('nt'), variables('ph'), 'vmss'), sub(64, 1)), take(replace(variables('nt'), variables('ph'), 'vmss'), 64))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'vmss'), 64), variables('d')), take(replace(variables('nut'), variables('ph'), 'vmss'), sub(64, 1)), take(replace(variables('nut'), variables('ph'), 'vmss'), 64))]",
                "slug": "vmss"
              },
              "localNetworkGateway": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'lgw'), 80), variables('d')), take(replace(variables('nt'), variables('ph'), 'lgw'), sub(80, 1)), take(replace(variables('nt'), variables('ph'), 'lgw'), 80))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'lgw'), 80), variables('d')), take(replace(variables('nut'), variables('ph'), 'lgw'), sub(80, 1)), take(replace(variables('nut'), variables('ph'), 'lgw'), 80))]",
                "slug": "lgw"
              },
              "logicApp": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'logic'), 43), variables('d')), take(replace(variables('nt'), variables('ph'), 'logic'), sub(43, 1)), take(replace(variables('nt'), variables('ph'), 'logic'), 43))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'logic'), 43), variables('d')), take(replace(variables('nut'), variables('ph'), 'logic'), sub(43, 1)), take(replace(variables('nut'), variables('ph'), 'logic'), 43))]",
                "slug": "logic"
              },
              "logAnalyticsWorkspace": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'log'), 63), variables('d')), take(replace(variables('nt'), variables('ph'), 'log'), sub(63, 1)), take(replace(variables('nt'), variables('ph'), 'log'), 63))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'log'), 63), variables('d')), take(replace(variables('nut'), variables('ph'), 'log'), sub(63, 1)), take(replace(variables('nut'), variables('ph'), 'log'), 63))]",
                "slug": "log"
              },
              "machineLearningWorkspace": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'mlw'), 260), variables('d')), take(replace(variables('nt'), variables('ph'), 'mlw'), sub(260, 1)), take(replace(variables('nt'), variables('ph'), 'mlw'), 260))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'mlw'), 260), variables('d')), take(replace(variables('nut'), variables('ph'), 'mlw'), sub(260, 1)), take(replace(variables('nut'), variables('ph'), 'mlw'), 260))]",
                "slug": "mlw"
              },
              "managedDisk": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'dsk'), 80), variables('d')), take(replace(variables('nt'), variables('ph'), 'dsk'), sub(80, 1)), take(replace(variables('nt'), variables('ph'), 'dsk'), 80))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'dsk'), 80), variables('d')), take(replace(variables('nut'), variables('ph'), 'dsk'), sub(80, 1)), take(replace(variables('nut'), variables('ph'), 'dsk'), 80))]",
                "slug": "dsk"
              },
              "managedIdentity": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'id'), 128), variables('d')), take(replace(variables('nt'), variables('ph'), 'id'), sub(128, 1)), take(replace(variables('nt'), variables('ph'), 'id'), 128))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'id'), 128), variables('d')), take(replace(variables('nut'), variables('ph'), 'id'), sub(128, 1)), take(replace(variables('nut'), variables('ph'), 'id'), 128))]",
                "slug": "id"
              },
              "mapsAccount": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'map'), 98), variables('d')), take(replace(variables('nt'), variables('ph'), 'map'), sub(98, 1)), take(replace(variables('nt'), variables('ph'), 'map'), 98))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'map'), 98), variables('d')), take(replace(variables('nut'), variables('ph'), 'map'), sub(98, 1)), take(replace(variables('nut'), variables('ph'), 'map'), 98))]",
                "slug": "map"
              },
              "mariadbDatabase": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'mariadb'), 63), variables('d')), take(replace(variables('nt'), variables('ph'), 'mariadb'), sub(63, 1)), take(replace(variables('nt'), variables('ph'), 'mariadb'), 63))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'mariadb'), 63), variables('d')), take(replace(variables('nut'), variables('ph'), 'mariadb'), sub(63, 1)), take(replace(variables('nut'), variables('ph'), 'mariadb'), 63))]",
                "slug": "mariadb"
              },
              "mariadbFirewallRule": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'mariafw'), 128), variables('d')), take(replace(variables('nt'), variables('ph'), 'mariafw'), sub(128, 1)), take(replace(variables('nt'), variables('ph'), 'mariafw'), 128))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'mariafw'), 128), variables('d')), take(replace(variables('nut'), variables('ph'), 'mariafw'), sub(128, 1)), take(replace(variables('nut'), variables('ph'), 'mariafw'), 128))]",
                "slug": "mariafw"
              },
              "mariadbServer": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'maria'), 63), variables('d')), take(replace(variables('nt'), variables('ph'), 'maria'), sub(63, 1)), take(replace(variables('nt'), variables('ph'), 'maria'), 63))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'maria'), 63), variables('d')), take(replace(variables('nut'), variables('ph'), 'maria'), sub(63, 1)), take(replace(variables('nut'), variables('ph'), 'maria'), 63))]",
                "slug": "maria"
              },
              "mariadbVirtualNetworkRule": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'mariavn'), 128), variables('d')), take(replace(variables('nt'), variables('ph'), 'mariavn'), sub(128, 1)), take(replace(variables('nt'), variables('ph'), 'mariavn'), 128))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'mariavn'), 128), variables('d')), take(replace(variables('nut'), variables('ph'), 'mariavn'), sub(128, 1)), take(replace(variables('nut'), variables('ph'), 'mariavn'), 128))]",
                "slug": "mariavn"
              },
              "mssqlDatabase": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'sqldb'), 128), variables('d')), take(replace(variables('nt'), variables('ph'), 'sqldb'), sub(128, 1)), take(replace(variables('nt'), variables('ph'), 'sqldb'), 128))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'sqldb'), 128), variables('d')), take(replace(variables('nut'), variables('ph'), 'sqldb'), sub(128, 1)), take(replace(variables('nut'), variables('ph'), 'sqldb'), 128))]",
                "slug": "sqldb"
              },
              "mssqlElasticpool": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'sqlep'), 128), variables('d')), take(replace(variables('nt'), variables('ph'), 'sqlep'), sub(128, 1)), take(replace(variables('nt'), variables('ph'), 'sqlep'), 128))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'sqlep'), 128), variables('d')), take(replace(variables('nut'), variables('ph'), 'sqlep'), sub(128, 1)), take(replace(variables('nut'), variables('ph'), 'sqlep'), 128))]",
                "slug": "sqlep"
              },
              "mssqlServer": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'sql'), 63), variables('d')), take(replace(variables('nt'), variables('ph'), 'sql'), sub(63, 1)), take(replace(variables('nt'), variables('ph'), 'sql'), 63))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'sql'), 63), variables('d')), take(replace(variables('nut'), variables('ph'), 'sql'), sub(63, 1)), take(replace(variables('nut'), variables('ph'), 'sql'), 63))]",
                "slug": "sql"
              },
              "mysqlDatabase": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'mysqldb'), 63), variables('d')), take(replace(variables('nt'), variables('ph'), 'mysqldb'), sub(63, 1)), take(replace(variables('nt'), variables('ph'), 'mysqldb'), 63))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'mysqldb'), 63), variables('d')), take(replace(variables('nut'), variables('ph'), 'mysqldb'), sub(63, 1)), take(replace(variables('nut'), variables('ph'), 'mysqldb'), 63))]",
                "slug": "mysqldb"
              },
              "mysqlFirewallRule": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'mysqlfw'), 128), variables('d')), take(replace(variables('nt'), variables('ph'), 'mysqlfw'), sub(128, 1)), take(replace(variables('nt'), variables('ph'), 'mysqlfw'), 128))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'mysqlfw'), 128), variables('d')), take(replace(variables('nut'), variables('ph'), 'mysqlfw'), sub(128, 1)), take(replace(variables('nut'), variables('ph'), 'mysqlfw'), 128))]",
                "slug": "mysqlfw"
              },
              "mysqlServer": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'mysql'), 63), variables('d')), take(replace(variables('nt'), variables('ph'), 'mysql'), sub(63, 1)), take(replace(variables('nt'), variables('ph'), 'mysql'), 63))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'mysql'), 63), variables('d')), take(replace(variables('nut'), variables('ph'), 'mysql'), sub(63, 1)), take(replace(variables('nut'), variables('ph'), 'mysql'), 63))]",
                "slug": "mysql"
              },
              "mysqlVirtualNetworkRule": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'mysqlvn'), 128), variables('d')), take(replace(variables('nt'), variables('ph'), 'mysqlvn'), sub(128, 1)), take(replace(variables('nt'), variables('ph'), 'mysqlvn'), 128))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'mysqlvn'), 128), variables('d')), take(replace(variables('nut'), variables('ph'), 'mysqlvn'), sub(128, 1)), take(replace(variables('nut'), variables('ph'), 'mysqlvn'), 128))]",
                "slug": "mysqlvn"
              },
              "networkInterface": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'nic'), 80), variables('d')), take(replace(variables('nt'), variables('ph'), 'nic'), sub(80, 1)), take(replace(variables('nt'), variables('ph'), 'nic'), 80))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'nic'), 80), variables('d')), take(replace(variables('nut'), variables('ph'), 'nic'), sub(80, 1)), take(replace(variables('nut'), variables('ph'), 'nic'), 80))]",
                "slug": "nic"
              },
              "networkSecurityGroup": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'nsg'), 80), variables('d')), take(replace(variables('nt'), variables('ph'), 'nsg'), sub(80, 1)), take(replace(variables('nt'), variables('ph'), 'nsg'), 80))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'nsg'), 80), variables('d')), take(replace(variables('nut'), variables('ph'), 'nsg'), sub(80, 1)), take(replace(variables('nut'), variables('ph'), 'nsg'), 80))]",
                "slug": "nsg"
              },
              "networkSecurityGroupRule": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'nsgr'), 80), variables('d')), take(replace(variables('nt'), variables('ph'), 'nsgr'), sub(80, 1)), take(replace(variables('nt'), variables('ph'), 'nsgr'), 80))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'nsgr'), 80), variables('d')), take(replace(variables('nut'), variables('ph'), 'nsgr'), sub(80, 1)), take(replace(variables('nut'), variables('ph'), 'nsgr'), 80))]",
                "slug": "nsgr"
              },
              "networkSecurityRule": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'nsgr'), 80), variables('d')), take(replace(variables('nt'), variables('ph'), 'nsgr'), sub(80, 1)), take(replace(variables('nt'), variables('ph'), 'nsgr'), 80))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'nsgr'), 80), variables('d')), take(replace(variables('nut'), variables('ph'), 'nsgr'), sub(80, 1)), take(replace(variables('nut'), variables('ph'), 'nsgr'), 80))]",
                "slug": "nsgr"
              },
              "networkWatcher": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'nw'), 80), variables('d')), take(replace(variables('nt'), variables('ph'), 'nw'), sub(80, 1)), take(replace(variables('nt'), variables('ph'), 'nw'), 80))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'nw'), 80), variables('d')), take(replace(variables('nut'), variables('ph'), 'nw'), sub(80, 1)), take(replace(variables('nut'), variables('ph'), 'nw'), 80))]",
                "slug": "nw"
              },
              "notificationHub": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'nh'), 260), variables('d')), take(replace(variables('nt'), variables('ph'), 'nh'), sub(260, 1)), take(replace(variables('nt'), variables('ph'), 'nh'), 260))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'nh'), 260), variables('d')), take(replace(variables('nut'), variables('ph'), 'nh'), sub(260, 1)), take(replace(variables('nut'), variables('ph'), 'nh'), 260))]",
                "slug": "nh"
              },
              "notificationHubAuthorizationRule": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'dnsrec'), 256), variables('d')), take(replace(variables('nt'), variables('ph'), 'dnsrec'), sub(256, 1)), take(replace(variables('nt'), variables('ph'), 'dnsrec'), 256))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'dnsrec'), 256), variables('d')), take(replace(variables('nut'), variables('ph'), 'dnsrec'), sub(256, 1)), take(replace(variables('nut'), variables('ph'), 'dnsrec'), 256))]",
                "slug": "dnsrec"
              },
              "notificationHubNamespace": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'dnsrec'), 50), variables('d')), take(replace(variables('nt'), variables('ph'), 'dnsrec'), sub(50, 1)), take(replace(variables('nt'), variables('ph'), 'dnsrec'), 50))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'dnsrec'), 50), variables('d')), take(replace(variables('nut'), variables('ph'), 'dnsrec'), sub(50, 1)), take(replace(variables('nut'), variables('ph'), 'dnsrec'), 50))]",
                "slug": "dnsrec"
              },
              "pointToSiteVpnGateway": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'vpngw'), 80), variables('d')), take(replace(variables('nt'), variables('ph'), 'vpngw'), sub(80, 1)), take(replace(variables('nt'), variables('ph'), 'vpngw'), 80))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'vpngw'), 80), variables('d')), take(replace(variables('nut'), variables('ph'), 'vpngw'), sub(80, 1)), take(replace(variables('nut'), variables('ph'), 'vpngw'), 80))]",
                "slug": "vpngw"
              },
              "postgresqlDatabase": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'psqldb'), 63), variables('d')), take(replace(variables('nt'), variables('ph'), 'psqldb'), sub(63, 1)), take(replace(variables('nt'), variables('ph'), 'psqldb'), 63))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'psqldb'), 63), variables('d')), take(replace(variables('nut'), variables('ph'), 'psqldb'), sub(63, 1)), take(replace(variables('nut'), variables('ph'), 'psqldb'), 63))]",
                "slug": "psqldb"
              },
              "postgresqlFirewallRule": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'psqlfw'), 128), variables('d')), take(replace(variables('nt'), variables('ph'), 'psqlfw'), sub(128, 1)), take(replace(variables('nt'), variables('ph'), 'psqlfw'), 128))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'psqlfw'), 128), variables('d')), take(replace(variables('nut'), variables('ph'), 'psqlfw'), sub(128, 1)), take(replace(variables('nut'), variables('ph'), 'psqlfw'), 128))]",
                "slug": "psqlfw"
              },
              "postgresqlServer": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'psql'), 63), variables('d')), take(replace(variables('nt'), variables('ph'), 'psql'), sub(63, 1)), take(replace(variables('nt'), variables('ph'), 'psql'), 63))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'psql'), 63), variables('d')), take(replace(variables('nut'), variables('ph'), 'psql'), sub(63, 1)), take(replace(variables('nut'), variables('ph'), 'psql'), 63))]",
                "slug": "psql"
              },
              "postgresqlVirtualNetworkRule": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'psqlvn'), 128), variables('d')), take(replace(variables('nt'), variables('ph'), 'psqlvn'), sub(128, 1)), take(replace(variables('nt'), variables('ph'), 'psqlvn'), 128))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'psqlvn'), 128), variables('d')), take(replace(variables('nut'), variables('ph'), 'psqlvn'), sub(128, 1)), take(replace(variables('nut'), variables('ph'), 'psqlvn'), 128))]",
                "slug": "psqlvn"
              },
              "powerbiEmbedded": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'pbi'), 63), variables('d')), take(replace(variables('nt'), variables('ph'), 'pbi'), sub(63, 1)), take(replace(variables('nt'), variables('ph'), 'pbi'), 63))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'pbi'), 63), variables('d')), take(replace(variables('nut'), variables('ph'), 'pbi'), sub(63, 1)), take(replace(variables('nut'), variables('ph'), 'pbi'), 63))]",
                "slug": "pbi"
              },
              "privateDnsZone": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'pdns'), 63), variables('d')), take(replace(variables('nt'), variables('ph'), 'pdns'), sub(63, 1)), take(replace(variables('nt'), variables('ph'), 'pdns'), 63))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'pdns'), 63), variables('d')), take(replace(variables('nut'), variables('ph'), 'pdns'), sub(63, 1)), take(replace(variables('nut'), variables('ph'), 'pdns'), 63))]",
                "slug": "pdns"
              },
              "publicIp": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'pip'), 80), variables('d')), take(replace(variables('nt'), variables('ph'), 'pip'), sub(80, 1)), take(replace(variables('nt'), variables('ph'), 'pip'), 80))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'pip'), 80), variables('d')), take(replace(variables('nut'), variables('ph'), 'pip'), sub(80, 1)), take(replace(variables('nut'), variables('ph'), 'pip'), 80))]",
                "slug": "pip"
              },
              "publicIpPrefix": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'pippf'), 80), variables('d')), take(replace(variables('nt'), variables('ph'), 'pippf'), sub(80, 1)), take(replace(variables('nt'), variables('ph'), 'pippf'), 80))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'pippf'), 80), variables('d')), take(replace(variables('nut'), variables('ph'), 'pippf'), sub(80, 1)), take(replace(variables('nut'), variables('ph'), 'pippf'), 80))]",
                "slug": "pippf"
              },
              "redisCache": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'redis'), 63), variables('d')), take(replace(variables('nt'), variables('ph'), 'redis'), sub(63, 1)), take(replace(variables('nt'), variables('ph'), 'redis'), 63))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'redis'), 63), variables('d')), take(replace(variables('nut'), variables('ph'), 'redis'), sub(63, 1)), take(replace(variables('nut'), variables('ph'), 'redis'), 63))]",
                "slug": "redis"
              },
              "redisFirewallRule": {
                "name": "[take(replace(variables('nst'), variables('ph'), 'redisfw'), 256)]",
                "nameUnique": "[take(replace(variables('nust'), variables('ph'), 'redisfw'), 256)]",
                "slug": "redisfw"
              },
              "relayHybridConnection": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'rlhc'), 260), variables('d')), take(replace(variables('nt'), variables('ph'), 'rlhc'), sub(260, 1)), take(replace(variables('nt'), variables('ph'), 'rlhc'), 260))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'rlhc'), 260), variables('d')), take(replace(variables('nut'), variables('ph'), 'rlhc'), sub(260, 1)), take(replace(variables('nut'), variables('ph'), 'rlhc'), 260))]",
                "slug": "rlhc"
              },
              "relayNamespace": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'rln'), 50), variables('d')), take(replace(variables('nt'), variables('ph'), 'rln'), sub(50, 1)), take(replace(variables('nt'), variables('ph'), 'rln'), 50))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'rln'), 50), variables('d')), take(replace(variables('nut'), variables('ph'), 'rln'), sub(50, 1)), take(replace(variables('nut'), variables('ph'), 'rln'), 50))]",
                "slug": "rln"
              },
              "resourceGroup": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'rg'), 90), variables('d')), take(replace(variables('nt'), variables('ph'), 'rg'), sub(90, 1)), take(replace(variables('nt'), variables('ph'), 'rg'), 90))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'rg'), 90), variables('d')), take(replace(variables('nut'), variables('ph'), 'rg'), sub(90, 1)), take(replace(variables('nut'), variables('ph'), 'rg'), 90))]",
                "slug": "rg"
              },
              "roleAssignment": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'ra'), 64), variables('d')), take(replace(variables('nt'), variables('ph'), 'ra'), sub(64, 1)), take(replace(variables('nt'), variables('ph'), 'ra'), 64))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'ra'), 64), variables('d')), take(replace(variables('nut'), variables('ph'), 'ra'), sub(64, 1)), take(replace(variables('nut'), variables('ph'), 'ra'), 64))]",
                "slug": "ra"
              },
              "roleDefinition": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'rd'), 64), variables('d')), take(replace(variables('nt'), variables('ph'), 'rd'), sub(64, 1)), take(replace(variables('nt'), variables('ph'), 'rd'), 64))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'rd'), 64), variables('d')), take(replace(variables('nut'), variables('ph'), 'rd'), sub(64, 1)), take(replace(variables('nut'), variables('ph'), 'rd'), 64))]",
                "slug": "rd"
              },
              "route": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'rt'), 80), variables('d')), take(replace(variables('nt'), variables('ph'), 'rt'), sub(80, 1)), take(replace(variables('nt'), variables('ph'), 'rt'), 80))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'rt'), 80), variables('d')), take(replace(variables('nut'), variables('ph'), 'rt'), sub(80, 1)), take(replace(variables('nut'), variables('ph'), 'rt'), 80))]",
                "slug": "rt"
              },
              "routeTable": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'route'), 80), variables('d')), take(replace(variables('nt'), variables('ph'), 'route'), sub(80, 1)), take(replace(variables('nt'), variables('ph'), 'route'), 80))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'route'), 80), variables('d')), take(replace(variables('nut'), variables('ph'), 'route'), sub(80, 1)), take(replace(variables('nut'), variables('ph'), 'route'), 80))]",
                "slug": "route"
              },
              "serviceFabricCluster": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'sf'), 23), variables('d')), take(replace(variables('nt'), variables('ph'), 'sf'), sub(23, 1)), take(replace(variables('nt'), variables('ph'), 'sf'), 23))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'sf'), 23), variables('d')), take(replace(variables('nut'), variables('ph'), 'sf'), sub(23, 1)), take(replace(variables('nut'), variables('ph'), 'sf'), 23))]",
                "slug": "sf"
              },
              "serviceFabricManagedCluster": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'sfmc'), 23), variables('d')), take(replace(variables('nt'), variables('ph'), 'sfmc'), sub(23, 1)), take(replace(variables('nt'), variables('ph'), 'sfmc'), 23))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'sfmc'), 23), variables('d')), take(replace(variables('nut'), variables('ph'), 'sfmc'), sub(23, 1)), take(replace(variables('nut'), variables('ph'), 'sfmc'), 23))]",
                "slug": "sfmc"
              },
              "serviceBusNamespace": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'sb'), 50), variables('d')), take(replace(variables('nt'), variables('ph'), 'sb'), sub(50, 1)), take(replace(variables('nt'), variables('ph'), 'sb'), 50))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'sb'), 50), variables('d')), take(replace(variables('nut'), variables('ph'), 'sb'), sub(50, 1)), take(replace(variables('nut'), variables('ph'), 'sb'), 50))]",
                "slug": "sb"
              },
              "serviceBusNamespaceAuthorizationRule": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'sbar'), 50), variables('d')), take(replace(variables('nt'), variables('ph'), 'sbar'), sub(50, 1)), take(replace(variables('nt'), variables('ph'), 'sbar'), 50))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'sbar'), 50), variables('d')), take(replace(variables('nut'), variables('ph'), 'sbar'), sub(50, 1)), take(replace(variables('nut'), variables('ph'), 'sbar'), 50))]",
                "slug": "sbar"
              },
              "serviceBusQueue": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'sbq'), 260), variables('d')), take(replace(variables('nt'), variables('ph'), 'sbq'), sub(260, 1)), take(replace(variables('nt'), variables('ph'), 'sbq'), 260))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'sbq'), 260), variables('d')), take(replace(variables('nut'), variables('ph'), 'sbq'), sub(260, 1)), take(replace(variables('nut'), variables('ph'), 'sbq'), 260))]",
                "slug": "sbq"
              },
              "serviceBusQueueAuthorizationRule": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'sbqar'), 50), variables('d')), take(replace(variables('nt'), variables('ph'), 'sbqar'), sub(50, 1)), take(replace(variables('nt'), variables('ph'), 'sbqar'), 50))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'sbqar'), 50), variables('d')), take(replace(variables('nut'), variables('ph'), 'sbqar'), sub(50, 1)), take(replace(variables('nut'), variables('ph'), 'sbqar'), 50))]",
                "slug": "sbqar"
              },
              "serviceBusSubscription": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'sbs'), 50), variables('d')), take(replace(variables('nt'), variables('ph'), 'sbs'), sub(50, 1)), take(replace(variables('nt'), variables('ph'), 'sbs'), 50))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'sbs'), 50), variables('d')), take(replace(variables('nut'), variables('ph'), 'sbs'), sub(50, 1)), take(replace(variables('nut'), variables('ph'), 'sbs'), 50))]",
                "slug": "sbs"
              },
              "serviceBusSubscriptionRule": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'sbsr'), 50), variables('d')), take(replace(variables('nt'), variables('ph'), 'sbsr'), sub(50, 1)), take(replace(variables('nt'), variables('ph'), 'sbsr'), 50))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'sbsr'), 50), variables('d')), take(replace(variables('nut'), variables('ph'), 'sbsr'), sub(50, 1)), take(replace(variables('nut'), variables('ph'), 'sbsr'), 50))]",
                "slug": "sbsr"
              },
              "serviceBusTopic": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'sbt'), 260), variables('d')), take(replace(variables('nt'), variables('ph'), 'sbt'), sub(260, 1)), take(replace(variables('nt'), variables('ph'), 'sbt'), 260))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'sbt'), 260), variables('d')), take(replace(variables('nut'), variables('ph'), 'sbt'), sub(260, 1)), take(replace(variables('nut'), variables('ph'), 'sbt'), 260))]",
                "slug": "sbt"
              },
              "serviceBusTopicAuthorizationRule": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'dnsrec'), 50), variables('d')), take(replace(variables('nt'), variables('ph'), 'dnsrec'), sub(50, 1)), take(replace(variables('nt'), variables('ph'), 'dnsrec'), 50))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'dnsrec'), 50), variables('d')), take(replace(variables('nut'), variables('ph'), 'dnsrec'), sub(50, 1)), take(replace(variables('nut'), variables('ph'), 'dnsrec'), 50))]",
                "slug": "dnsrec"
              },
              "sharedImage": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'si'), 80), variables('d')), take(replace(variables('nt'), variables('ph'), 'si'), sub(80, 1)), take(replace(variables('nt'), variables('ph'), 'si'), 80))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'si'), 80), variables('d')), take(replace(variables('nut'), variables('ph'), 'si'), sub(80, 1)), take(replace(variables('nut'), variables('ph'), 'si'), 80))]",
                "slug": "si"
              },
              "sharedImageGallery": {
                "name": "[take(replace(variables('nst'), variables('ph'), 'sig'), 80)]",
                "nameUnique": "[take(replace(variables('nust'), variables('ph'), 'sig'), 80)]",
                "slug": "sig"
              },
              "signalrService": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'sgnlr'), 63), variables('d')), take(replace(variables('nt'), variables('ph'), 'sgnlr'), sub(63, 1)), take(replace(variables('nt'), variables('ph'), 'sgnlr'), 63))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'sgnlr'), 63), variables('d')), take(replace(variables('nut'), variables('ph'), 'sgnlr'), sub(63, 1)), take(replace(variables('nut'), variables('ph'), 'sgnlr'), 63))]",
                "slug": "sgnlr"
              },
              "snapshots": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'snap'), 80), variables('d')), take(replace(variables('nt'), variables('ph'), 'snap'), sub(80, 1)), take(replace(variables('nt'), variables('ph'), 'snap'), 80))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'snap'), 80), variables('d')), take(replace(variables('nut'), variables('ph'), 'snap'), sub(80, 1)), take(replace(variables('nut'), variables('ph'), 'snap'), 80))]",
                "slug": "snap"
              },
              "sqlElasticpool": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'sqlep'), 128), variables('d')), take(replace(variables('nt'), variables('ph'), 'sqlep'), sub(128, 1)), take(replace(variables('nt'), variables('ph'), 'sqlep'), 128))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'sqlep'), 128), variables('d')), take(replace(variables('nut'), variables('ph'), 'sqlep'), sub(128, 1)), take(replace(variables('nut'), variables('ph'), 'sqlep'), 128))]",
                "slug": "sqlep"
              },
              "sqlFailoverGroup": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'sqlfg'), 63), variables('d')), take(replace(variables('nt'), variables('ph'), 'sqlfg'), sub(63, 1)), take(replace(variables('nt'), variables('ph'), 'sqlfg'), 63))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'sqlfg'), 63), variables('d')), take(replace(variables('nut'), variables('ph'), 'sqlfg'), sub(63, 1)), take(replace(variables('nut'), variables('ph'), 'sqlfg'), 63))]",
                "slug": "sqlfg"
              },
              "sqlFirewallRule": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'sqlfw'), 128), variables('d')), take(replace(variables('nt'), variables('ph'), 'sqlfw'), sub(128, 1)), take(replace(variables('nt'), variables('ph'), 'sqlfw'), 128))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'sqlfw'), 128), variables('d')), take(replace(variables('nut'), variables('ph'), 'sqlfw'), sub(128, 1)), take(replace(variables('nut'), variables('ph'), 'sqlfw'), 128))]",
                "slug": "sqlfw"
              },
              "sqlServer": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'sql'), 63), variables('d')), take(replace(variables('nt'), variables('ph'), 'sql'), sub(63, 1)), take(replace(variables('nt'), variables('ph'), 'sql'), 63))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'sql'), 63), variables('d')), take(replace(variables('nut'), variables('ph'), 'sql'), sub(63, 1)), take(replace(variables('nut'), variables('ph'), 'sql'), 63))]",
                "slug": "sql"
              },
              "storageAccount": {
                "name": "[take(replace(variables('nst'), variables('ph'), 'st'), 24)]",
                "nameUnique": "[take(replace(variables('nust'), variables('ph'), 'st'), 24)]",
                "slug": "st"
              },
              "storageBlob": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'blob'), 1024), variables('d')), take(replace(variables('nt'), variables('ph'), 'blob'), sub(1024, 1)), take(replace(variables('nt'), variables('ph'), 'blob'), 1024))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'blob'), 1024), variables('d')), take(replace(variables('nut'), variables('ph'), 'blob'), sub(1024, 1)), take(replace(variables('nut'), variables('ph'), 'blob'), 1024))]",
                "slug": "blob"
              },
              "storageContainer": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'stct'), 63), variables('d')), take(replace(variables('nt'), variables('ph'), 'stct'), sub(63, 1)), take(replace(variables('nt'), variables('ph'), 'stct'), 63))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'stct'), 63), variables('d')), take(replace(variables('nut'), variables('ph'), 'stct'), sub(63, 1)), take(replace(variables('nut'), variables('ph'), 'stct'), 63))]",
                "slug": "stct"
              },
              "storageDataLakeGen2Filesystem": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'stdl'), 63), variables('d')), take(replace(variables('nt'), variables('ph'), 'stdl'), sub(63, 1)), take(replace(variables('nt'), variables('ph'), 'stdl'), 63))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'stdl'), 63), variables('d')), take(replace(variables('nut'), variables('ph'), 'stdl'), sub(63, 1)), take(replace(variables('nut'), variables('ph'), 'stdl'), 63))]",
                "slug": "stdl"
              },
              "storageQueue": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'stq'), 63), variables('d')), take(replace(variables('nt'), variables('ph'), 'stq'), sub(63, 1)), take(replace(variables('nt'), variables('ph'), 'stq'), 63))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'stq'), 63), variables('d')), take(replace(variables('nut'), variables('ph'), 'stq'), sub(63, 1)), take(replace(variables('nut'), variables('ph'), 'stq'), 63))]",
                "slug": "stq"
              },
              "storageShare": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'sts'), 63), variables('d')), take(replace(variables('nt'), variables('ph'), 'sts'), sub(63, 1)), take(replace(variables('nt'), variables('ph'), 'sts'), 63))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'sts'), 63), variables('d')), take(replace(variables('nut'), variables('ph'), 'sts'), sub(63, 1)), take(replace(variables('nut'), variables('ph'), 'sts'), 63))]",
                "slug": "sts"
              },
              "storageShareDirectory": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'sts'), 63), variables('d')), take(replace(variables('nt'), variables('ph'), 'sts'), sub(63, 1)), take(replace(variables('nt'), variables('ph'), 'sts'), 63))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'sts'), 63), variables('d')), take(replace(variables('nut'), variables('ph'), 'sts'), sub(63, 1)), take(replace(variables('nut'), variables('ph'), 'sts'), 63))]",
                "slug": "sts"
              },
              "storageTable": {
                "name": "[take(replace(variables('nst'), variables('ph'), 'stt'), 63)]",
                "nameUnique": "[take(replace(variables('nust'), variables('ph'), 'stt'), 63)]",
                "slug": "stt"
              },
              "streamAnalyticsFunctionJavascriptUdf": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'asafunc'), 63), variables('d')), take(replace(variables('nt'), variables('ph'), 'asafunc'), sub(63, 1)), take(replace(variables('nt'), variables('ph'), 'asafunc'), 63))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'asafunc'), 63), variables('d')), take(replace(variables('nut'), variables('ph'), 'asafunc'), sub(63, 1)), take(replace(variables('nut'), variables('ph'), 'asafunc'), 63))]",
                "slug": "asafunc"
              },
              "streamAnalyticsJob": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'asa'), 63), variables('d')), take(replace(variables('nt'), variables('ph'), 'asa'), sub(63, 1)), take(replace(variables('nt'), variables('ph'), 'asa'), 63))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'asa'), 63), variables('d')), take(replace(variables('nut'), variables('ph'), 'asa'), sub(63, 1)), take(replace(variables('nut'), variables('ph'), 'asa'), 63))]",
                "slug": "asa"
              },
              "streamAnalyticsOutputBlob": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'asaoblob'), 63), variables('d')), take(replace(variables('nt'), variables('ph'), 'asaoblob'), sub(63, 1)), take(replace(variables('nt'), variables('ph'), 'asaoblob'), 63))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'asaoblob'), 63), variables('d')), take(replace(variables('nut'), variables('ph'), 'asaoblob'), sub(63, 1)), take(replace(variables('nut'), variables('ph'), 'asaoblob'), 63))]",
                "slug": "asaoblob"
              },
              "streamAnalyticsOutputEventHub": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'asaoeh'), 63), variables('d')), take(replace(variables('nt'), variables('ph'), 'asaoeh'), sub(63, 1)), take(replace(variables('nt'), variables('ph'), 'asaoeh'), 63))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'asaoeh'), 63), variables('d')), take(replace(variables('nut'), variables('ph'), 'asaoeh'), sub(63, 1)), take(replace(variables('nut'), variables('ph'), 'asaoeh'), 63))]",
                "slug": "asaoeh"
              },
              "streamAnalyticsOutputMssql": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'asaomssql'), 63), variables('d')), take(replace(variables('nt'), variables('ph'), 'asaomssql'), sub(63, 1)), take(replace(variables('nt'), variables('ph'), 'asaomssql'), 63))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'asaomssql'), 63), variables('d')), take(replace(variables('nut'), variables('ph'), 'asaomssql'), sub(63, 1)), take(replace(variables('nut'), variables('ph'), 'asaomssql'), 63))]",
                "slug": "asaomssql"
              },
              "streamAnalyticsOutputServiceBusQueue": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'asaosbq'), 63), variables('d')), take(replace(variables('nt'), variables('ph'), 'asaosbq'), sub(63, 1)), take(replace(variables('nt'), variables('ph'), 'asaosbq'), 63))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'asaosbq'), 63), variables('d')), take(replace(variables('nut'), variables('ph'), 'asaosbq'), sub(63, 1)), take(replace(variables('nut'), variables('ph'), 'asaosbq'), 63))]",
                "slug": "asaosbq"
              },
              "streamAnalyticsOutputServiceBusTopic": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'asaosbt'), 63), variables('d')), take(replace(variables('nt'), variables('ph'), 'asaosbt'), sub(63, 1)), take(replace(variables('nt'), variables('ph'), 'asaosbt'), 63))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'asaosbt'), 63), variables('d')), take(replace(variables('nut'), variables('ph'), 'asaosbt'), sub(63, 1)), take(replace(variables('nut'), variables('ph'), 'asaosbt'), 63))]",
                "slug": "asaosbt"
              },
              "streamAnalyticsReferenceInputBlob": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'asarblob'), 63), variables('d')), take(replace(variables('nt'), variables('ph'), 'asarblob'), sub(63, 1)), take(replace(variables('nt'), variables('ph'), 'asarblob'), 63))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'asarblob'), 63), variables('d')), take(replace(variables('nut'), variables('ph'), 'asarblob'), sub(63, 1)), take(replace(variables('nut'), variables('ph'), 'asarblob'), 63))]",
                "slug": "asarblob"
              },
              "streamAnalyticsStreamInputBlob": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'asaiblob'), 63), variables('d')), take(replace(variables('nt'), variables('ph'), 'asaiblob'), sub(63, 1)), take(replace(variables('nt'), variables('ph'), 'asaiblob'), 63))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'asaiblob'), 63), variables('d')), take(replace(variables('nut'), variables('ph'), 'asaiblob'), sub(63, 1)), take(replace(variables('nut'), variables('ph'), 'asaiblob'), 63))]",
                "slug": "asaiblob"
              },
              "streamAnalyticsStreamInputEventHub": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'asaieh'), 63), variables('d')), take(replace(variables('nt'), variables('ph'), 'asaieh'), sub(63, 1)), take(replace(variables('nt'), variables('ph'), 'asaieh'), 63))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'asaieh'), 63), variables('d')), take(replace(variables('nut'), variables('ph'), 'asaieh'), sub(63, 1)), take(replace(variables('nut'), variables('ph'), 'asaieh'), 63))]",
                "slug": "asaieh"
              },
              "streamAnalyticsStreamInputIotHub": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'asaiiot'), 63), variables('d')), take(replace(variables('nt'), variables('ph'), 'asaiiot'), sub(63, 1)), take(replace(variables('nt'), variables('ph'), 'asaiiot'), 63))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'asaiiot'), 63), variables('d')), take(replace(variables('nut'), variables('ph'), 'asaiiot'), sub(63, 1)), take(replace(variables('nut'), variables('ph'), 'asaiiot'), 63))]",
                "slug": "asaiiot"
              },
              "subnet": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'snet'), 80), variables('d')), take(replace(variables('nt'), variables('ph'), 'snet'), sub(80, 1)), take(replace(variables('nt'), variables('ph'), 'snet'), 80))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'snet'), 80), variables('d')), take(replace(variables('nut'), variables('ph'), 'snet'), sub(80, 1)), take(replace(variables('nut'), variables('ph'), 'snet'), 80))]",
                "slug": "snet"
              },
              "templateDeployment": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'deploy'), 64), variables('d')), take(replace(variables('nt'), variables('ph'), 'deploy'), sub(64, 1)), take(replace(variables('nt'), variables('ph'), 'deploy'), 64))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'deploy'), 64), variables('d')), take(replace(variables('nut'), variables('ph'), 'deploy'), sub(64, 1)), take(replace(variables('nut'), variables('ph'), 'deploy'), 64))]",
                "slug": "deploy"
              },
              "trafficManagerProfile": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'traf'), 63), variables('d')), take(replace(variables('nt'), variables('ph'), 'traf'), sub(63, 1)), take(replace(variables('nt'), variables('ph'), 'traf'), 63))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'traf'), 63), variables('d')), take(replace(variables('nut'), variables('ph'), 'traf'), sub(63, 1)), take(replace(variables('nut'), variables('ph'), 'traf'), 63))]",
                "slug": "traf"
              },
              "virtualMachine": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'vm'), 15), variables('d')), take(replace(variables('nt'), variables('ph'), 'vm'), sub(15, 1)), take(replace(variables('nt'), variables('ph'), 'vm'), 15))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'vm'), 15), variables('d')), take(replace(variables('nut'), variables('ph'), 'vm'), sub(15, 1)), take(replace(variables('nut'), variables('ph'), 'vm'), 15))]",
                "slug": "vm"
              },
              "virtualMachineScaleSet": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'vmss'), 15), variables('d')), take(replace(variables('nt'), variables('ph'), 'vmss'), sub(15, 1)), take(replace(variables('nt'), variables('ph'), 'vmss'), 15))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'vmss'), 15), variables('d')), take(replace(variables('nut'), variables('ph'), 'vmss'), sub(15, 1)), take(replace(variables('nut'), variables('ph'), 'vmss'), 15))]",
                "slug": "vmss"
              },
              "virtualNetwork": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'vnet'), 64), variables('d')), take(replace(variables('nt'), variables('ph'), 'vnet'), sub(64, 1)), take(replace(variables('nt'), variables('ph'), 'vnet'), 64))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'vnet'), 64), variables('d')), take(replace(variables('nut'), variables('ph'), 'vnet'), sub(64, 1)), take(replace(variables('nut'), variables('ph'), 'vnet'), 64))]",
                "slug": "vnet"
              },
              "virtualNetworkGateway": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'vgw'), 80), variables('d')), take(replace(variables('nt'), variables('ph'), 'vgw'), sub(80, 1)), take(replace(variables('nt'), variables('ph'), 'vgw'), 80))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'vgw'), 80), variables('d')), take(replace(variables('nut'), variables('ph'), 'vgw'), sub(80, 1)), take(replace(variables('nut'), variables('ph'), 'vgw'), 80))]",
                "slug": "vgw"
              },
              "virtualNetworkPeering": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'vpeer'), 80), variables('d')), take(replace(variables('nt'), variables('ph'), 'vpeer'), sub(80, 1)), take(replace(variables('nt'), variables('ph'), 'vpeer'), 80))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'vpeer'), 80), variables('d')), take(replace(variables('nut'), variables('ph'), 'vpeer'), sub(80, 1)), take(replace(variables('nut'), variables('ph'), 'vpeer'), 80))]",
                "slug": "vpeer"
              },
              "virtualWan": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'vwan'), 80), variables('d')), take(replace(variables('nt'), variables('ph'), 'vwan'), sub(80, 1)), take(replace(variables('nt'), variables('ph'), 'vwan'), 80))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'vwan'), 80), variables('d')), take(replace(variables('nut'), variables('ph'), 'vwan'), sub(80, 1)), take(replace(variables('nut'), variables('ph'), 'vwan'), 80))]",
                "slug": "vwan"
              },
              "windowsVirtualMachine": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'vm'), 15), variables('d')), take(replace(variables('nt'), variables('ph'), 'vm'), sub(15, 1)), take(replace(variables('nt'), variables('ph'), 'vm'), 15))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'vm'), 15), variables('d')), take(replace(variables('nut'), variables('ph'), 'vm'), sub(15, 1)), take(replace(variables('nut'), variables('ph'), 'vm'), 15))]",
                "slug": "vm"
              },
              "windowsVirtualMachineScaleSet": {
                "name": "[if(endsWith(take(replace(variables('nt'), variables('ph'), 'vmss'), 15), variables('d')), take(replace(variables('nt'), variables('ph'), 'vmss'), sub(15, 1)), take(replace(variables('nt'), variables('ph'), 'vmss'), 15))]",
                "nameUnique": "[if(endsWith(take(replace(variables('nut'), variables('ph'), 'vmss'), 15), variables('d')), take(replace(variables('nut'), variables('ph'), 'vmss'), sub(15, 1)), take(replace(variables('nut'), variables('ph'), 'vmss'), 15))]",
                "slug": "vmss"
              }
            }
          },
          "resources": {},
          "outputs": {
            "names": {
              "$ref": "#/definitions/NamingOutput",
              "value": "[variables('names')]"
            },
            "regionAbbreviations": {
              "type": "object",
              "value": "[variables('regionAbbreviations')]"
            }
          }
        }
      },
      "dependsOn": [
        "[subscriptionResourceId('Microsoft.Resources/deployments', format('{0}-deployment', uniqueString(deployment().name, parameters('location'), variables('resourceGroupName'))))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('{0}-spokedeployment', uniqueString(deployment().name, parameters('location')))]",
      "location": "[deployment().location]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "naming": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('resourceGroupName')), 'Microsoft.Resources/deployments', 'NamingDeployment'), '2022-09-01').outputs.names.value]"
          },
          "enableTelemetry": {
            "value": "[parameters('enableTelemetry')]"
          },
          "resourceGroupName": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('{0}-deployment', uniqueString(deployment().name, parameters('location'), variables('resourceGroupName')))), '2022-09-01').outputs.name.value]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "vnetSpokeAddressSpace": {
            "value": "[parameters('vnetSpokeAddressSpace')]"
          },
          "subnetSpokeAppSvcAddressSpace": {
            "value": "[parameters('subnetSpokeAppSvcAddressSpace')]"
          },
          "subnetSpokePrivateEndpointAddressSpace": {
            "value": "[parameters('subnetSpokePrivateEndpointAddressSpace')]"
          },
          "subnetSpokeDevOpsAddressSpace": {
            "value": "[parameters('subnetSpokeDevOpsAddressSpace')]"
          },
          "vnetHubResourceId": {
            "value": "[parameters('vnetHubResourceId')]"
          },
          "firewallInternalIp": {
            "value": "[parameters('firewallInternalIp')]"
          },
          "deployAseV3": {
            "value": "[parameters('deployAseV3')]"
          },
          "webAppPlanSku": {
            "value": "[parameters('webAppPlanSku')]"
          },
          "zoneRedundant": {
            "value": "[parameters('zoneRedundant')]"
          },
          "webAppBaseOs": {
            "value": "[parameters('webAppBaseOs')]"
          },
          "adminUsername": {
            "value": "[parameters('adminUsername')]"
          },
          "adminPassword": {
            "value": "[parameters('adminPassword')]"
          },
          "enableEgressLockdown": {
            "value": "[parameters('enableEgressLockdown')]"
          },
          "autoApproveAfdPrivateEndpoint": {
            "value": "[parameters('autoApproveAfdPrivateEndpoint')]"
          },
          "deployJumpHost": {
            "value": "[parameters('deployJumpHost')]"
          },
          "vmAdminUsername": {
            "value": "[parameters('adminUsername')]"
          },
          "vmAdminPassword": {
            "value": "[parameters('adminPassword')]"
          },
          "vmSize": {
            "value": "[parameters('vmSize')]"
          },
          "bastionResourceId": {
            "value": "[parameters('bastionResourceId')]"
          },
          "vmAuthenticationType": {
            "value": "[parameters('vmAuthenticationType')]"
          },
          "tags": {
            "value": "[parameters('tags')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
          "languageVersion": "2.0",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.32.4.45862",
              "templateHash": "12519647591659630635"
            }
          },
          "definitions": {
            "_1.ServiceNameType": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string"
                },
                "nameUnique": {
                  "type": "string"
                },
                "slug": {
                  "type": "string"
                }
              },
              "metadata": {
                "__bicep_imported_from!": {
                  "sourceTemplate": "../naming/naming.module.bicep"
                }
              }
            },
            "NamingOutput": {
              "type": "object",
              "properties": {
                "aiSearch": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "analysisServicesServer": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "apiManagement": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "appConfiguration": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "appServiceEnvironment": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "appServicePlan": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "appService": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "applicationGateway": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "applicationInsights": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "applicationSecurityGroup": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "automationAccount": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "automationCertificate": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "automationCredential": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "automationRunbook": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "automationSchedule": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "automationVariable": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "availabilitySet": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "bastionHost": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "batchAccount": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "batchApplication": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "batchCertificate": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "batchPool": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "botChannelDirectline": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "botChannelEmail": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "botChannelMsTeams": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "botChannelSlack": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "botChannelsRegistration": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "botConnection": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "botWebApp": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "cdnEndpoint": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "cdnProfile": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "chaosExperiment": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "chaosTarget": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "cognitiveAccount": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "cognitiveServicesOpenAi": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "cognitiveServicesComputerVision": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "cognitiveServicesContentModerator": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "cognitiveServicesContentSafety": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "cognitiveServicesCustomVisionPrediction": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "cognitiveServicesCustomVisionTraining": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "cognitiveServicesDocumentIntelligence": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "cognitiveServicesMultiServiceAccount": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "cognitiveServicesVideoIndexer": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "cognitiveServicesFaceApi": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "cognitiveServicesImmersiveReader": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "cognitiveServicesLanguageService": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "cognitiveServicesSpeechService": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "cognitiveServicesTranslator": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "containerApps": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "containerAppsEnvironment": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "containerGroup": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "containerRegistry": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "containerRegistryWebhook": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "cosmosdbAccount": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "customProvider": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "dashboard": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "dataFactory": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "dataFactoryDatasetMysql": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "dataFactoryDatasetPostgresql": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "dataFactoryDatasetSqlServerTable": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "dataFactoryIntegrationRuntimeManaged": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "dataFactoryLinkedServiceDataLakeStorageGen2": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "dataFactoryLinkedServiceKeyVault": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "dataFactoryLinkedServiceMysql": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "dataFactoryLinkedServicePostgresql": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "dataFactoryLinkedServiceSqlServer": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "dataFactoryPipeline": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "dataFactoryTriggerSchedule": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "dataLakeAnalyticsAccount": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "dataLakeAnalyticsFirewallRule": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "dataLakeStore": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "dataLakeStoreFirewallRule": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "databaseMigrationProject": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "databaseMigrationService": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "databricksWorkspace": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "devTestLab": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "devTestLinuxVirtualMachine": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "devTestWindowsVirtualMachine": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "diskEncryptionSet": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "dnsZone": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "eventGridDomain": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "eventGridDomainTopic": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "eventGridEventSubscription": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "eventGridTopic": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "eventHub": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "eventHubAuthorizationRule": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "eventHubConsumerGroup": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "eventHubNamespace": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "eventHubNamespaceAuthorizationRule": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "eventHubNamespaceDisasterRecoveryConfig": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "expressRouteCircuit": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "expressRouteGateway": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "firewall": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "firewallPolicy": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "frontDoor": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "frontDoorFirewallPolicy": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "functionApp": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "grafana": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "hdInsightHadoopCluster": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "hdInsightHbaseCluster": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "hdInsightInteractiveQueryCluster": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "hdInsightKafkaCluster": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "hdInsightMlServicesCluster": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "hdInsightRserverCluster": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "hdInsightSparkCluster": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "hdInsightStormCluster": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "image": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "iotCentralApplication": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "iotHub": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "iotHubConsumerGroup": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "iotHubDps": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "iotHubDpsCertificate": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "keyVault": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "keyVaultCertificate": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "keyVaultKey": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "keyVaultSecret": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "kubernetesCluster": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "kustoCluster": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "kustoDatabase": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "kustoEventHubDataConnection": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "loadBalancer": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "loadBalancerNatRule": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "loadTesting": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "linuxVirtualMachine": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "linuxVirtualMachineScaleSet": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "localNetworkGateway": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "logicApp": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "logAnalyticsWorkspace": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "machineLearningWorkspace": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "managedDisk": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "managedIdentity": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "mapsAccount": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "mariadbDatabase": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "mariadbFirewallRule": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "mariadbServer": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "mariadbVirtualNetworkRule": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "mssqlDatabase": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "mssqlElasticpool": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "mssqlServer": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "mysqlDatabase": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "mysqlFirewallRule": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "mysqlServer": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "mysqlVirtualNetworkRule": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "networkInterface": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "networkSecurityGroup": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "networkSecurityGroupRule": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "networkSecurityRule": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "networkWatcher": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "notificationHub": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "notificationHubAuthorizationRule": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "notificationHubNamespace": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "pointToSiteVpnGateway": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "postgresqlDatabase": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "postgresqlFirewallRule": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "postgresqlServer": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "postgresqlVirtualNetworkRule": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "powerbiEmbedded": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "privateDnsZone": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "publicIp": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "publicIpPrefix": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "redisCache": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "redisFirewallRule": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "relayHybridConnection": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "relayNamespace": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "resourceGroup": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "roleAssignment": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "roleDefinition": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "route": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "routeTable": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "serviceFabricCluster": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "serviceFabricManagedCluster": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "serviceBusNamespace": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "serviceBusNamespaceAuthorizationRule": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "serviceBusQueue": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "serviceBusQueueAuthorizationRule": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "serviceBusSubscription": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "serviceBusSubscriptionRule": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "serviceBusTopic": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "serviceBusTopicAuthorizationRule": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "sharedImage": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "sharedImageGallery": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "signalrService": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "snapshots": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "sqlElasticpool": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "sqlFailoverGroup": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "sqlFirewallRule": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "sqlServer": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "storageAccount": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "storageBlob": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "storageContainer": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "storageDataLakeGen2Filesystem": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "storageQueue": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "storageShare": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "storageShareDirectory": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "storageTable": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "streamAnalyticsFunctionJavascriptUdf": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "streamAnalyticsJob": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "streamAnalyticsOutputBlob": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "streamAnalyticsOutputEventHub": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "streamAnalyticsOutputMssql": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "streamAnalyticsOutputServiceBusQueue": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "streamAnalyticsOutputServiceBusTopic": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "streamAnalyticsReferenceInputBlob": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "streamAnalyticsStreamInputBlob": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "streamAnalyticsStreamInputEventHub": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "streamAnalyticsStreamInputIotHub": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "subnet": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "templateDeployment": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "trafficManagerProfile": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "virtualMachine": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "virtualMachineScaleSet": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "virtualNetwork": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "virtualNetworkGateway": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "virtualNetworkPeering": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "virtualWan": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "windowsVirtualMachine": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "windowsVirtualMachineScaleSet": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                }
              },
              "metadata": {
                "__bicep_imported_from!": {
                  "sourceTemplate": "../naming/naming.module.bicep"
                }
              }
            }
          },
          "parameters": {
            "naming": {
              "$ref": "#/definitions/NamingOutput"
            },
            "location": {
              "type": "string",
              "metadata": {
                "description": "Required. Azure region where the resources will be deployed in"
              }
            },
            "enableTelemetry": {
              "type": "bool",
              "metadata": {
                "description": "Required. Whether to enable deployment telemetry."
              }
            },
            "deployAseV3": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Optional. default is false. Set to true if you want to deploy ASE v3 instead of Multi-tenant App Service Plan."
              }
            },
            "vnetSpokeAddressSpace": {
              "type": "string",
              "metadata": {
                "description": "Required. CIDR of the SPOKE vnet i.e. 192.168.0.0/24"
              }
            },
            "subnetSpokeAppSvcAddressSpace": {
              "type": "string",
              "metadata": {
                "description": "Required. CIDR of the subnet that will hold the app services plan"
              }
            },
            "subnetSpokeDevOpsAddressSpace": {
              "type": "string",
              "metadata": {
                "description": "Required. CIDR of the subnet that will hold devOps agents etc "
              }
            },
            "subnetSpokePrivateEndpointAddressSpace": {
              "type": "string",
              "metadata": {
                "description": "Required. CIDR of the subnet that will hold the private endpoints of the supporting services"
              }
            },
            "firewallInternalIp": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. Internal IP of the Azure firewall deployed in Hub. Used for creating UDR to route all vnet egress traffic through Firewall. If empty no UDR"
              }
            },
            "vnetHubResourceId": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. if empty, private dns zone will be deployed in the current RG scope"
              }
            },
            "tags": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "Resource tags that we might need to add to all resources (i.e. Environment, Cost center, application name etc)"
              }
            },
            "enableEgressLockdown": {
              "type": "bool",
              "metadata": {
                "description": "Required. Create (or not) a UDR for the App Service Subnet, to route all egress traffic through Hub Azure Firewall"
              }
            },
            "vmSize": {
              "type": "string",
              "metadata": {
                "description": "Conditional. The size of the jump box virtual machine to create. See https://learn.microsoft.com/azure/virtual-machines/sizes for more information."
              }
            },
            "vmZone": {
              "type": "int",
              "defaultValue": 0,
              "metadata": {
                "description": "Optional. The zone to create the jump box in. Defaults to 0."
              }
            },
            "storageAccountType": {
              "type": "string",
              "defaultValue": "Premium_LRS",
              "metadata": {
                "description": "Optional. The storage account type to use for the jump box. Defaults to Premium_LRS."
              }
            },
            "vmAdminUsername": {
              "type": "string",
              "metadata": {
                "description": "Conditional. The username to use for the jump box."
              }
            },
            "vmAdminPassword": {
              "type": "securestring",
              "metadata": {
                "description": "Conditional. The password to use for the jump box."
              }
            },
            "vmJumpboxOSType": {
              "type": "string",
              "defaultValue": "windows",
              "allowedValues": [
                "linux",
                "windows",
                "none"
              ],
              "metadata": {
                "description": "Optional. Default is windows. The OS of the jump box virtual machine to create."
              }
            },
            "vmSubnetName": {
              "type": "string",
              "defaultValue": "snet-jumpbox",
              "metadata": {
                "description": "Optional. The name of the subnet to create for the jump box. If set, it overrides the name generated by the template."
              }
            },
            "vmAuthenticationType": {
              "type": "string",
              "defaultValue": "password",
              "allowedValues": [
                "sshPublicKey",
                "password"
              ],
              "metadata": {
                "description": "Optional. Type of authentication to use on the Virtual Machine. SSH key is recommended."
              }
            },
            "deployJumpHost": {
              "type": "bool",
              "metadata": {
                "description": "Required. Deploy (or not) an Azure virtual machine (to be used as jumphost)"
              }
            },
            "webAppPlanSku": {
              "type": "string",
              "defaultValue": "P1V3",
              "allowedValues": [
                "S1",
                "S2",
                "S3",
                "P1V3",
                "P2V3",
                "P3V3",
                "EP1",
                "EP2",
                "EP3",
                "ASE_I1V2",
                "ASE_I2V2",
                "ASE_I3V2"
              ],
              "metadata": {
                "description": "Optional. P1V3 is default. Defines the name, tier, size, family and capacity of the App Service Plan. Plans ending to _AZ, are deploying at least three instances in three Availability Zones. EP* is only for functions"
              }
            },
            "zoneRedundant": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Optional. Set to true if you want to deploy the App Service Plan in a zone redundant manner. Defult is true."
              }
            },
            "webAppBaseOs": {
              "type": "string",
              "allowedValues": [
                "windows",
                "linux"
              ],
              "metadata": {
                "description": "Required. Kind of server OS of the App Service Plan"
              }
            },
            "adminUsername": {
              "type": "string",
              "metadata": {
                "description": "Conditional. default value is azureuser"
              }
            },
            "adminPassword": {
              "type": "securestring",
              "metadata": {
                "description": "Conditional. the password of the admin user"
              }
            },
            "autoApproveAfdPrivateEndpoint": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Optional. Set to true if you want to auto approve the Private Endpoint of the AFD"
              }
            },
            "bastionResourceId": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. The resource ID of the bastion host. If set, the spoke virtual network will be peered with the hub virtual network and the bastion host will be allowed to connect to the jump box. Default is empty."
              }
            },
            "resourceGroupName": {
              "type": "string"
            }
          },
          "variables": {
            "resourceNames": {
              "vnetSpoke": "[take(format('{0}-spoke', parameters('naming').virtualNetwork.name), 80)]",
              "pepNsg": "[take(format('{0}-pep', parameters('naming').networkSecurityGroup.name), 80)]",
              "aseNsg": "[take(format('{0}-ase', parameters('naming').networkSecurityGroup.name), 80)]",
              "jumpboxNsg": "[take(format('{0}-jumpbox', parameters('naming').networkSecurityGroup.name), 80)]",
              "appSvcUserAssignedManagedIdentity": "[take(format('{0}-appSvc', parameters('naming').managedIdentity.name), 128)]",
              "vmJumpHostUserAssignedManagedIdentity": "[take(format('{0}-vmJumpHost', parameters('naming').managedIdentity.name), 128)]",
              "keyvault": "[parameters('naming').keyVault.nameUnique]",
              "logAnalyticsWs": "[parameters('naming').logAnalyticsWorkspace.name]",
              "appInsights": "[parameters('naming').applicationInsights.name]",
              "aseName": "[parameters('naming').appServiceEnvironment.nameUnique]",
              "aspName": "[parameters('naming').appServicePlan.name]",
              "webApp": "[parameters('naming').appService.nameUnique]",
              "vmWindowsJumpbox": "[take(format('{0}-win-jumpbox', parameters('naming').windowsVirtualMachine.name), 64)]",
              "frontDoorEndPoint": "[format('webAppLza-{0}', take(uniqueString(parameters('resourceGroupName')), 6))]",
              "frontDoorWaf": "[parameters('naming').frontDoorFirewallPolicy.name]",
              "frontDoor": "[parameters('naming').frontDoor.name]",
              "frontDoorOriginGroup": "[format('{0}-originGroup', parameters('naming').frontDoor.name)]",
              "routeTable": "[parameters('naming').routeTable.name]",
              "routeEgressLockdown": "[format('{0}-egress-lockdown', parameters('naming').route.name)]",
              "snetDevOps": "[format('snet-devOps-{0}-spoke', parameters('naming').virtualNetwork.name)]",
              "idAfdApprovePeAutoApprover": "[take(format('{0}-AfdApprovePe', parameters('naming').managedIdentity.name), 128)]"
            }
          },
          "resources": {
            "networking": {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "networkingModule-Deployment",
              "resourceGroup": "[parameters('resourceGroupName')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "naming": {
                    "value": "[parameters('naming')]"
                  },
                  "enableEgressLockdown": {
                    "value": "[parameters('enableEgressLockdown')]"
                  },
                  "vnetSpokeAddressSpace": {
                    "value": "[parameters('vnetSpokeAddressSpace')]"
                  },
                  "subnetSpokeAppSvcAddressSpace": {
                    "value": "[parameters('subnetSpokeAppSvcAddressSpace')]"
                  },
                  "subnetSpokePrivateEndpointAddressSpace": {
                    "value": "[parameters('subnetSpokePrivateEndpointAddressSpace')]"
                  },
                  "firewallInternalIp": {
                    "value": "[parameters('firewallInternalIp')]"
                  },
                  "hubVnetId": {
                    "value": "[parameters('vnetHubResourceId')]"
                  },
                  "logAnalyticsWorkspaceId": {
                    "value": "[reference('logAnalyticsWs').outputs.resourceId.value]"
                  },
                  "tags": {
                    "value": "[parameters('tags')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.32.4.45862",
                      "templateHash": "404183834852642271"
                    }
                  },
                  "parameters": {
                    "naming": {
                      "type": "object"
                    },
                    "location": {
                      "type": "string",
                      "defaultValue": "[resourceGroup().location]",
                      "metadata": {
                        "description": "Azure region where the resources will be deployed in"
                      }
                    },
                    "deployAseV3": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "Optional, default is false. Set to true if you want to deploy ASE v3 instead of Multitenant App Service Plan."
                      }
                    },
                    "vnetSpokeAddressSpace": {
                      "type": "string",
                      "metadata": {
                        "description": "CIDR of the SPOKE vnet i.e. 192.168.0.0/24"
                      }
                    },
                    "subnetSpokeAppSvcAddressSpace": {
                      "type": "string",
                      "metadata": {
                        "description": "CIDR of the subnet that will hold the app services plan"
                      }
                    },
                    "subnetSpokePrivateEndpointAddressSpace": {
                      "type": "string",
                      "metadata": {
                        "description": "CIDR of the subnet that will hold the private endpoints of the supporting services"
                      }
                    },
                    "firewallInternalIp": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Internal IP of the Azure firewall deployed in Hub. Used for creating UDR to route all vnet egress traffic through Firewall. If empty no UDR"
                      }
                    },
                    "tags": {
                      "type": "object",
                      "metadata": {
                        "description": "Resource tags that we might need to add to all resources (i.e. Environment, Cost center, application name etc)"
                      }
                    },
                    "enableEgressLockdown": {
                      "type": "bool",
                      "metadata": {
                        "description": "Create (or not) a UDR for the App Service Subnet, to route all egress traffic through Hub Azure Firewall"
                      }
                    },
                    "logAnalyticsWorkspaceId": {
                      "type": "string"
                    },
                    "hubVnetId": {
                      "type": "string",
                      "defaultValue": ""
                    }
                  },
                  "variables": {
                    "resourceNames": {
                      "vnetSpoke": "[take(format('{0}-spoke', parameters('naming').virtualNetwork.name), 80)]",
                      "snetAppSvc": "[format('snet-appSvc-{0}-spoke', parameters('naming').virtualNetwork.name)]",
                      "snetDevOps": "[format('snet-devOps-{0}-spoke', parameters('naming').virtualNetwork.name)]",
                      "snetPe": "[format('snet-pe-{0}-spoke', parameters('naming').virtualNetwork.name)]",
                      "pepNsg": "[take(format('{0}-pep', parameters('naming').networkSecurityGroup.name), 80)]",
                      "aseNsg": "[take(format('{0}-ase', parameters('naming').networkSecurityGroup.name), 80)]",
                      "routeTable": "[parameters('naming').routeTable.name]",
                      "routeEgressLockdown": "[format('{0}-egress-lockdown', parameters('naming').route.name)]"
                    },
                    "udrRoutes": [
                      {
                        "name": "defaultEgressLockdown",
                        "properties": {
                          "addressPrefix": "0.0.0.0/0",
                          "nextHopIpAddress": "[parameters('firewallInternalIp')]",
                          "nextHopType": "VirtualAppliance"
                        }
                      }
                    ]
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "vnetSpoke-Deployment",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "name": {
                            "value": "[variables('resourceNames').vnetSpoke]"
                          },
                          "location": {
                            "value": "[parameters('location')]"
                          },
                          "tags": {
                            "value": "[parameters('tags')]"
                          },
                          "addressPrefixes": {
                            "value": [
                              "[parameters('vnetSpokeAddressSpace')]"
                            ]
                          },
                          "subnets": {
                            "value": [
                              {
                                "name": "[variables('resourceNames').snetAppSvc]",
                                "addressPrefix": "[parameters('subnetSpokeAppSvcAddressSpace')]",
                                "privateEndpointNetworkPolicies": "[if(not(parameters('deployAseV3')), 'Enabled', 'Disabled')]",
                                "delegation": "[if(not(parameters('deployAseV3')), 'Microsoft.Web/serverfarms', 'Microsoft.Web/hostingEnvironments')]",
                                "networkSecurityGroupResourceId": "[if(not(parameters('deployAseV3')), reference(resourceId('Microsoft.Resources/deployments', take(format('nsgPep-{0}', deployment().name), 64)), '2022-09-01').outputs.resourceId.value, reference(resourceId('Microsoft.Resources/deployments', take(format('nsgAse-{0}', deployment().name), 64)), '2022-09-01').outputs.resourceId.value)]",
                                "routeTableResourceId": "[if(and(not(empty(parameters('firewallInternalIp'))), parameters('enableEgressLockdown')), reference(resourceId('Microsoft.Resources/deployments', 'routeTableToFirewall-Deployment'), '2022-09-01').outputs.resourceId.value, null())]"
                              },
                              {
                                "name": "[variables('resourceNames').snetPe]",
                                "addressPrefix": "[parameters('subnetSpokePrivateEndpointAddressSpace')]",
                                "privateEndpointNetworkPolicies": "Disabled",
                                "networkSecurityGroupResourceId": "[reference(resourceId('Microsoft.Resources/deployments', take(format('nsgPep-{0}', deployment().name), 64)), '2022-09-01').outputs.resourceId.value]"
                              }
                            ]
                          },
                          "peerings": "[if(not(empty(parameters('hubVnetId'))), createObject('value', createArray(createObject('remoteVirtualNetworkResourceId', parameters('hubVnetId'), 'allowVirtualNetworkAccess', true(), 'allowForwardedTraffic', false(), 'allowGatewayTransit', false(), 'useRemoteGateways', false()))), createObject('value', createArray()))]"
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "languageVersion": "2.0",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.30.23.60470",
                              "templateHash": "2623909352379872186"
                            },
                            "name": "Virtual Networks",
                            "description": "This module deploys a Virtual Network (vNet).",
                            "owner": "Azure/module-maintainers"
                          },
                          "definitions": {
                            "peeringType": {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The Name of VNET Peering resource. If not provided, default value will be peer-localVnetName-remoteVnetName."
                                  }
                                },
                                "remoteVirtualNetworkResourceId": {
                                  "type": "string",
                                  "metadata": {
                                    "description": "Required. The Resource ID of the VNet that is this Local VNet is being peered to. Should be in the format of a Resource ID."
                                  }
                                },
                                "allowForwardedTraffic": {
                                  "type": "bool",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Whether the forwarded traffic from the VMs in the local virtual network will be allowed/disallowed in remote virtual network. Default is true."
                                  }
                                },
                                "allowGatewayTransit": {
                                  "type": "bool",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. If gateway links can be used in remote virtual networking to link to this virtual network. Default is false."
                                  }
                                },
                                "allowVirtualNetworkAccess": {
                                  "type": "bool",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Whether the VMs in the local virtual network space would be able to access the VMs in remote virtual network space. Default is true."
                                  }
                                },
                                "doNotVerifyRemoteGateways": {
                                  "type": "bool",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Do not verify the provisioning state of the remote gateway. Default is true."
                                  }
                                },
                                "useRemoteGateways": {
                                  "type": "bool",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. If remote gateways can be used on this virtual network. If the flag is set to true, and allowGatewayTransit on remote peering is also true, virtual network will use gateways of remote virtual network for transit. Only one peering can have this flag set to true. This flag cannot be set if virtual network already has a gateway. Default is false."
                                  }
                                },
                                "remotePeeringEnabled": {
                                  "type": "bool",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Deploy the outbound and the inbound peering."
                                  }
                                },
                                "remotePeeringName": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The name of the VNET Peering resource in the remove Virtual Network. If not provided, default value will be peer-remoteVnetName-localVnetName."
                                  }
                                },
                                "remotePeeringAllowForwardedTraffic": {
                                  "type": "bool",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Whether the forwarded traffic from the VMs in the local virtual network will be allowed/disallowed in remote virtual network. Default is true."
                                  }
                                },
                                "remotePeeringAllowGatewayTransit": {
                                  "type": "bool",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. If gateway links can be used in remote virtual networking to link to this virtual network. Default is false."
                                  }
                                },
                                "remotePeeringAllowVirtualNetworkAccess": {
                                  "type": "bool",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Whether the VMs in the local virtual network space would be able to access the VMs in remote virtual network space. Default is true."
                                  }
                                },
                                "remotePeeringDoNotVerifyRemoteGateways": {
                                  "type": "bool",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Do not verify the provisioning state of the remote gateway. Default is true."
                                  }
                                },
                                "remotePeeringUseRemoteGateways": {
                                  "type": "bool",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. If remote gateways can be used on this virtual network. If the flag is set to true, and allowGatewayTransit on remote peering is also true, virtual network will use gateways of remote virtual network for transit. Only one peering can have this flag set to true. This flag cannot be set if virtual network already has a gateway. Default is false."
                                  }
                                }
                              }
                            },
                            "subnetType": {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "metadata": {
                                    "description": "Required. The Name of the subnet resource."
                                  }
                                },
                                "addressPrefix": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Conditional. The address prefix for the subnet. Required if `addressPrefixes` is empty."
                                  }
                                },
                                "addressPrefixes": {
                                  "type": "array",
                                  "items": {
                                    "type": "string"
                                  },
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Conditional. List of address prefixes for the subnet. Required if `addressPrefix` is empty."
                                  }
                                },
                                "applicationGatewayIPConfigurations": {
                                  "type": "array",
                                  "items": {
                                    "type": "object"
                                  },
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Application gateway IP configurations of virtual network resource."
                                  }
                                },
                                "delegation": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The delegation to enable on the subnet."
                                  }
                                },
                                "natGatewayResourceId": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The resource ID of the NAT Gateway to use for the subnet."
                                  }
                                },
                                "networkSecurityGroupResourceId": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The resource ID of the network security group to assign to the subnet."
                                  }
                                },
                                "privateEndpointNetworkPolicies": {
                                  "type": "string",
                                  "allowedValues": [
                                    "Disabled",
                                    "Enabled",
                                    "NetworkSecurityGroupEnabled",
                                    "RouteTableEnabled"
                                  ],
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. enable or disable apply network policies on private endpoint in the subnet."
                                  }
                                },
                                "privateLinkServiceNetworkPolicies": {
                                  "type": "string",
                                  "allowedValues": [
                                    "Disabled",
                                    "Enabled"
                                  ],
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. enable or disable apply network policies on private link service in the subnet."
                                  }
                                },
                                "roleAssignments": {
                                  "type": "array",
                                  "items": {
                                    "$ref": "#/definitions/roleAssignmentType"
                                  },
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Array of role assignments to create."
                                  }
                                },
                                "routeTableResourceId": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The resource ID of the route table to assign to the subnet."
                                  }
                                },
                                "serviceEndpointPolicies": {
                                  "type": "array",
                                  "items": {
                                    "type": "object"
                                  },
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. An array of service endpoint policies."
                                  }
                                },
                                "serviceEndpoints": {
                                  "type": "array",
                                  "items": {
                                    "type": "string"
                                  },
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The service endpoints to enable on the subnet."
                                  }
                                },
                                "defaultOutboundAccess": {
                                  "type": "bool",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Set this property to false to disable default outbound connectivity for all VMs in the subnet. This property can only be set at the time of subnet creation and cannot be updated for an existing subnet."
                                  }
                                },
                                "sharingScope": {
                                  "type": "string",
                                  "allowedValues": [
                                    "DelegatedServices",
                                    "Tenant"
                                  ],
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Set this property to Tenant to allow sharing subnet with other subscriptions in your AAD tenant. This property can only be set if defaultOutboundAccess is set to false, both properties can only be set if subnet is empty."
                                  }
                                }
                              }
                            },
                            "diagnosticSettingFullType": {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The name of the diagnostic setting."
                                  }
                                },
                                "logCategoriesAndGroups": {
                                  "type": "array",
                                  "items": {
                                    "type": "object",
                                    "properties": {
                                      "category": {
                                        "type": "string",
                                        "nullable": true,
                                        "metadata": {
                                          "description": "Optional. Name of a Diagnostic Log category for a resource type this setting is applied to. Set the specific logs to collect here."
                                        }
                                      },
                                      "categoryGroup": {
                                        "type": "string",
                                        "nullable": true,
                                        "metadata": {
                                          "description": "Optional. Name of a Diagnostic Log category group for a resource type this setting is applied to. Set to `allLogs` to collect all logs."
                                        }
                                      },
                                      "enabled": {
                                        "type": "bool",
                                        "nullable": true,
                                        "metadata": {
                                          "description": "Optional. Enable or disable the category explicitly. Default is `true`."
                                        }
                                      }
                                    }
                                  },
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The name of logs that will be streamed. \"allLogs\" includes all possible logs for the resource. Set to `[]` to disable log collection."
                                  }
                                },
                                "metricCategories": {
                                  "type": "array",
                                  "items": {
                                    "type": "object",
                                    "properties": {
                                      "category": {
                                        "type": "string",
                                        "metadata": {
                                          "description": "Required. Name of a Diagnostic Metric category for a resource type this setting is applied to. Set to `AllMetrics` to collect all metrics."
                                        }
                                      },
                                      "enabled": {
                                        "type": "bool",
                                        "nullable": true,
                                        "metadata": {
                                          "description": "Optional. Enable or disable the category explicitly. Default is `true`."
                                        }
                                      }
                                    }
                                  },
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The name of metrics that will be streamed. \"allMetrics\" includes all possible metrics for the resource. Set to `[]` to disable metric collection."
                                  }
                                },
                                "logAnalyticsDestinationType": {
                                  "type": "string",
                                  "allowedValues": [
                                    "AzureDiagnostics",
                                    "Dedicated"
                                  ],
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. A string indicating whether the export to Log Analytics should use the default destination type, i.e. AzureDiagnostics, or use a destination type."
                                  }
                                },
                                "workspaceResourceId": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Resource ID of the diagnostic log analytics workspace. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                                  }
                                },
                                "storageAccountResourceId": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Resource ID of the diagnostic storage account. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                                  }
                                },
                                "eventHubAuthorizationRuleResourceId": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Resource ID of the diagnostic event hub authorization rule for the Event Hubs namespace in which the event hub should be created or streamed to."
                                  }
                                },
                                "eventHubName": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Name of the diagnostic event hub within the namespace to which logs are streamed. Without this, an event hub is created for each log category. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                                  }
                                },
                                "marketplacePartnerResourceId": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The full ARM resource ID of the Marketplace resource to which you would like to send Diagnostic Logs."
                                  }
                                }
                              },
                              "metadata": {
                                "description": "An AVM-aligned type for a diagnostic setting. To be used if both logs & metrics are supported by the resource provider.",
                                "__bicep_imported_from!": {
                                  "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.2.1"
                                }
                              }
                            },
                            "lockType": {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Specify the name of lock."
                                  }
                                },
                                "kind": {
                                  "type": "string",
                                  "allowedValues": [
                                    "CanNotDelete",
                                    "None",
                                    "ReadOnly"
                                  ],
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Specify the type of lock."
                                  }
                                }
                              },
                              "metadata": {
                                "description": "An AVM-aligned type for a lock.",
                                "__bicep_imported_from!": {
                                  "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.2.1"
                                }
                              }
                            },
                            "roleAssignmentType": {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The name (as GUID) of the role assignment. If not provided, a GUID will be generated."
                                  }
                                },
                                "roleDefinitionIdOrName": {
                                  "type": "string",
                                  "metadata": {
                                    "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                                  }
                                },
                                "principalId": {
                                  "type": "string",
                                  "metadata": {
                                    "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                                  }
                                },
                                "principalType": {
                                  "type": "string",
                                  "allowedValues": [
                                    "Device",
                                    "ForeignGroup",
                                    "Group",
                                    "ServicePrincipal",
                                    "User"
                                  ],
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The principal type of the assigned principal ID."
                                  }
                                },
                                "description": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The description of the role assignment."
                                  }
                                },
                                "condition": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                                  }
                                },
                                "conditionVersion": {
                                  "type": "string",
                                  "allowedValues": [
                                    "2.0"
                                  ],
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Version of the condition."
                                  }
                                },
                                "delegatedManagedIdentityResourceId": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The Resource Id of the delegated managed identity resource."
                                  }
                                }
                              },
                              "metadata": {
                                "description": "An AVM-aligned type for a role assignment.",
                                "__bicep_imported_from!": {
                                  "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.2.1"
                                }
                              }
                            }
                          },
                          "parameters": {
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The name of the Virtual Network (vNet)."
                              }
                            },
                            "location": {
                              "type": "string",
                              "defaultValue": "[resourceGroup().location]",
                              "metadata": {
                                "description": "Optional. Location for all resources."
                              }
                            },
                            "addressPrefixes": {
                              "type": "array",
                              "metadata": {
                                "description": "Required. An Array of 1 or more IP Address Prefixes for the Virtual Network."
                              }
                            },
                            "virtualNetworkBgpCommunity": {
                              "type": "string",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. The BGP community associated with the virtual network."
                              }
                            },
                            "subnets": {
                              "type": "array",
                              "items": {
                                "$ref": "#/definitions/subnetType"
                              },
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. An Array of subnets to deploy to the Virtual Network."
                              }
                            },
                            "dnsServers": {
                              "type": "array",
                              "items": {
                                "type": "string"
                              },
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. DNS Servers associated to the Virtual Network."
                              }
                            },
                            "ddosProtectionPlanResourceId": {
                              "type": "string",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Resource ID of the DDoS protection plan to assign the VNET to. If it's left blank, DDoS protection will not be configured. If it's provided, the VNET created by this template will be attached to the referenced DDoS protection plan. The DDoS protection plan can exist in the same or in a different subscription."
                              }
                            },
                            "peerings": {
                              "type": "array",
                              "items": {
                                "$ref": "#/definitions/peeringType"
                              },
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Virtual Network Peering configurations."
                              }
                            },
                            "vnetEncryption": {
                              "type": "bool",
                              "defaultValue": false,
                              "metadata": {
                                "description": "Optional. Indicates if encryption is enabled on virtual network and if VM without encryption is allowed in encrypted VNet. Requires the EnableVNetEncryption feature to be registered for the subscription and a supported region to use this property."
                              }
                            },
                            "vnetEncryptionEnforcement": {
                              "type": "string",
                              "defaultValue": "AllowUnencrypted",
                              "allowedValues": [
                                "AllowUnencrypted",
                                "DropUnencrypted"
                              ],
                              "metadata": {
                                "description": "Optional. If the encrypted VNet allows VM that does not support encryption. Can only be used when vnetEncryption is enabled."
                              }
                            },
                            "flowTimeoutInMinutes": {
                              "type": "int",
                              "defaultValue": 0,
                              "maxValue": 30,
                              "metadata": {
                                "description": "Optional. The flow timeout in minutes for the Virtual Network, which is used to enable connection tracking for intra-VM flows. Possible values are between 4 and 30 minutes. Default value 0 will set the property to null."
                              }
                            },
                            "diagnosticSettings": {
                              "type": "array",
                              "items": {
                                "$ref": "#/definitions/diagnosticSettingFullType"
                              },
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. The diagnostic settings of the service."
                              }
                            },
                            "lock": {
                              "$ref": "#/definitions/lockType",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. The lock settings of the service."
                              }
                            },
                            "roleAssignments": {
                              "type": "array",
                              "items": {
                                "$ref": "#/definitions/roleAssignmentType"
                              },
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Array of role assignments to create."
                              }
                            },
                            "tags": {
                              "type": "object",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Tags of the resource."
                              }
                            },
                            "enableTelemetry": {
                              "type": "bool",
                              "defaultValue": true,
                              "metadata": {
                                "description": "Optional. Enable/Disable usage telemetry for module."
                              }
                            },
                            "enableVmProtection": {
                              "type": "bool",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Indicates if VM protection is enabled for all the subnets in the virtual network."
                              }
                            }
                          },
                          "variables": {
                            "copy": [
                              {
                                "name": "formattedRoleAssignments",
                                "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]",
                                "input": "[union(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')], createObject('roleDefinitionId', coalesce(tryGet(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName), if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName)))))]"
                              }
                            ],
                            "builtInRoleNames": {
                              "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                              "Network Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4d97b98b-1d4f-4787-a291-c67834d212e7')]",
                              "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                              "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                              "Role Based Access Control Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]",
                              "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]"
                            }
                          },
                          "resources": {
                            "avmTelemetry": {
                              "condition": "[parameters('enableTelemetry')]",
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2024-03-01",
                              "name": "[format('46d3xbcp.res.network-virtualnetwork.{0}.{1}', replace('0.5.1', '.', '-'), substring(uniqueString(deployment().name, parameters('location')), 0, 4))]",
                              "properties": {
                                "mode": "Incremental",
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "resources": [],
                                  "outputs": {
                                    "telemetry": {
                                      "type": "String",
                                      "value": "For more information, see https://aka.ms/avm/TelemetryInfo"
                                    }
                                  }
                                }
                              }
                            },
                            "virtualNetwork": {
                              "type": "Microsoft.Network/virtualNetworks",
                              "apiVersion": "2024-01-01",
                              "name": "[parameters('name')]",
                              "location": "[parameters('location')]",
                              "tags": "[parameters('tags')]",
                              "properties": {
                                "addressSpace": {
                                  "addressPrefixes": "[parameters('addressPrefixes')]"
                                },
                                "bgpCommunities": "[if(not(empty(parameters('virtualNetworkBgpCommunity'))), createObject('virtualNetworkCommunity', parameters('virtualNetworkBgpCommunity')), null())]",
                                "ddosProtectionPlan": "[if(not(empty(parameters('ddosProtectionPlanResourceId'))), createObject('id', parameters('ddosProtectionPlanResourceId')), null())]",
                                "dhcpOptions": "[if(not(empty(parameters('dnsServers'))), createObject('dnsServers', array(parameters('dnsServers'))), null())]",
                                "enableDdosProtection": "[not(empty(parameters('ddosProtectionPlanResourceId')))]",
                                "encryption": "[if(equals(parameters('vnetEncryption'), true()), createObject('enabled', parameters('vnetEncryption'), 'enforcement', parameters('vnetEncryptionEnforcement')), null())]",
                                "flowTimeoutInMinutes": "[if(not(equals(parameters('flowTimeoutInMinutes'), 0)), parameters('flowTimeoutInMinutes'), null())]",
                                "enableVmProtection": "[parameters('enableVmProtection')]"
                              }
                            },
                            "virtualNetwork_lock": {
                              "condition": "[and(not(empty(coalesce(parameters('lock'), createObject()))), not(equals(tryGet(parameters('lock'), 'kind'), 'None')))]",
                              "type": "Microsoft.Authorization/locks",
                              "apiVersion": "2020-05-01",
                              "scope": "[format('Microsoft.Network/virtualNetworks/{0}', parameters('name'))]",
                              "name": "[coalesce(tryGet(parameters('lock'), 'name'), format('lock-{0}', parameters('name')))]",
                              "properties": {
                                "level": "[coalesce(tryGet(parameters('lock'), 'kind'), '')]",
                                "notes": "[if(equals(tryGet(parameters('lock'), 'kind'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot delete or modify the resource or child resources.')]"
                              },
                              "dependsOn": [
                                "virtualNetwork"
                              ]
                            },
                            "virtualNetwork_diagnosticSettings": {
                              "copy": {
                                "name": "virtualNetwork_diagnosticSettings",
                                "count": "[length(coalesce(parameters('diagnosticSettings'), createArray()))]"
                              },
                              "type": "Microsoft.Insights/diagnosticSettings",
                              "apiVersion": "2021-05-01-preview",
                              "scope": "[format('Microsoft.Network/virtualNetworks/{0}', parameters('name'))]",
                              "name": "[coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'name'), format('{0}-diagnosticSettings', parameters('name')))]",
                              "properties": {
                                "copy": [
                                  {
                                    "name": "metrics",
                                    "count": "[length(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics'))))]",
                                    "input": {
                                      "category": "[coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics')))[copyIndex('metrics')].category]",
                                      "enabled": "[coalesce(tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics')))[copyIndex('metrics')], 'enabled'), true())]",
                                      "timeGrain": null
                                    }
                                  },
                                  {
                                    "name": "logs",
                                    "count": "[length(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs'))))]",
                                    "input": {
                                      "categoryGroup": "[tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'categoryGroup')]",
                                      "category": "[tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'category')]",
                                      "enabled": "[coalesce(tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'enabled'), true())]"
                                    }
                                  }
                                ],
                                "storageAccountId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'storageAccountResourceId')]",
                                "workspaceId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'workspaceResourceId')]",
                                "eventHubAuthorizationRuleId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'eventHubAuthorizationRuleResourceId')]",
                                "eventHubName": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'eventHubName')]",
                                "marketplacePartnerId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'marketplacePartnerResourceId')]",
                                "logAnalyticsDestinationType": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logAnalyticsDestinationType')]"
                              },
                              "dependsOn": [
                                "virtualNetwork"
                              ]
                            },
                            "virtualNetwork_roleAssignments": {
                              "copy": {
                                "name": "virtualNetwork_roleAssignments",
                                "count": "[length(coalesce(variables('formattedRoleAssignments'), createArray()))]"
                              },
                              "type": "Microsoft.Authorization/roleAssignments",
                              "apiVersion": "2022-04-01",
                              "scope": "[format('Microsoft.Network/virtualNetworks/{0}', parameters('name'))]",
                              "name": "[coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'name'), guid(resourceId('Microsoft.Network/virtualNetworks', parameters('name')), coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId, coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId))]",
                              "properties": {
                                "roleDefinitionId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId]",
                                "principalId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId]",
                                "description": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'description')]",
                                "principalType": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'principalType')]",
                                "condition": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition')]",
                                "conditionVersion": "[if(not(empty(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                                "delegatedManagedIdentityResourceId": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
                              },
                              "dependsOn": [
                                "virtualNetwork"
                              ]
                            },
                            "virtualNetwork_subnets": {
                              "copy": {
                                "name": "virtualNetwork_subnets",
                                "count": "[length(coalesce(parameters('subnets'), createArray()))]",
                                "mode": "serial",
                                "batchSize": 1
                              },
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "[format('{0}-subnet-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "virtualNetworkName": {
                                    "value": "[parameters('name')]"
                                  },
                                  "name": {
                                    "value": "[coalesce(parameters('subnets'), createArray())[copyIndex()].name]"
                                  },
                                  "addressPrefix": {
                                    "value": "[tryGet(coalesce(parameters('subnets'), createArray())[copyIndex()], 'addressPrefix')]"
                                  },
                                  "addressPrefixes": {
                                    "value": "[tryGet(coalesce(parameters('subnets'), createArray())[copyIndex()], 'addressPrefixes')]"
                                  },
                                  "applicationGatewayIPConfigurations": {
                                    "value": "[tryGet(coalesce(parameters('subnets'), createArray())[copyIndex()], 'applicationGatewayIPConfigurations')]"
                                  },
                                  "delegation": {
                                    "value": "[tryGet(coalesce(parameters('subnets'), createArray())[copyIndex()], 'delegation')]"
                                  },
                                  "natGatewayResourceId": {
                                    "value": "[tryGet(coalesce(parameters('subnets'), createArray())[copyIndex()], 'natGatewayResourceId')]"
                                  },
                                  "networkSecurityGroupResourceId": {
                                    "value": "[tryGet(coalesce(parameters('subnets'), createArray())[copyIndex()], 'networkSecurityGroupResourceId')]"
                                  },
                                  "privateEndpointNetworkPolicies": {
                                    "value": "[tryGet(coalesce(parameters('subnets'), createArray())[copyIndex()], 'privateEndpointNetworkPolicies')]"
                                  },
                                  "privateLinkServiceNetworkPolicies": {
                                    "value": "[tryGet(coalesce(parameters('subnets'), createArray())[copyIndex()], 'privateLinkServiceNetworkPolicies')]"
                                  },
                                  "roleAssignments": {
                                    "value": "[tryGet(coalesce(parameters('subnets'), createArray())[copyIndex()], 'roleAssignments')]"
                                  },
                                  "routeTableResourceId": {
                                    "value": "[tryGet(coalesce(parameters('subnets'), createArray())[copyIndex()], 'routeTableResourceId')]"
                                  },
                                  "serviceEndpointPolicies": {
                                    "value": "[tryGet(coalesce(parameters('subnets'), createArray())[copyIndex()], 'serviceEndpointPolicies')]"
                                  },
                                  "serviceEndpoints": {
                                    "value": "[tryGet(coalesce(parameters('subnets'), createArray())[copyIndex()], 'serviceEndpoints')]"
                                  },
                                  "defaultOutboundAccess": {
                                    "value": "[tryGet(coalesce(parameters('subnets'), createArray())[copyIndex()], 'defaultOutboundAccess')]"
                                  },
                                  "sharingScope": {
                                    "value": "[tryGet(coalesce(parameters('subnets'), createArray())[copyIndex()], 'sharingScope')]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "languageVersion": "2.0",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.30.23.60470",
                                      "templateHash": "6385219422012602265"
                                    },
                                    "name": "Virtual Network Subnets",
                                    "description": "This module deploys a Virtual Network Subnet.",
                                    "owner": "Azure/module-maintainers"
                                  },
                                  "definitions": {
                                    "roleAssignmentType": {
                                      "type": "object",
                                      "properties": {
                                        "name": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The name (as GUID) of the role assignment. If not provided, a GUID will be generated."
                                          }
                                        },
                                        "roleDefinitionIdOrName": {
                                          "type": "string",
                                          "metadata": {
                                            "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                                          }
                                        },
                                        "principalId": {
                                          "type": "string",
                                          "metadata": {
                                            "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                                          }
                                        },
                                        "principalType": {
                                          "type": "string",
                                          "allowedValues": [
                                            "Device",
                                            "ForeignGroup",
                                            "Group",
                                            "ServicePrincipal",
                                            "User"
                                          ],
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The principal type of the assigned principal ID."
                                          }
                                        },
                                        "description": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The description of the role assignment."
                                          }
                                        },
                                        "condition": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                                          }
                                        },
                                        "conditionVersion": {
                                          "type": "string",
                                          "allowedValues": [
                                            "2.0"
                                          ],
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. Version of the condition."
                                          }
                                        },
                                        "delegatedManagedIdentityResourceId": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The Resource Id of the delegated managed identity resource."
                                          }
                                        }
                                      },
                                      "metadata": {
                                        "description": "An AVM-aligned type for a role assignment.",
                                        "__bicep_imported_from!": {
                                          "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.2.1"
                                        }
                                      }
                                    }
                                  },
                                  "parameters": {
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The Name of the subnet resource."
                                      }
                                    },
                                    "virtualNetworkName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Conditional. The name of the parent virtual network. Required if the template is used in a standalone deployment."
                                      }
                                    },
                                    "addressPrefix": {
                                      "type": "string",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Conditional. The address prefix for the subnet. Required if `addressPrefixes` is empty."
                                      }
                                    },
                                    "networkSecurityGroupResourceId": {
                                      "type": "string",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. The resource ID of the network security group to assign to the subnet."
                                      }
                                    },
                                    "routeTableResourceId": {
                                      "type": "string",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. The resource ID of the route table to assign to the subnet."
                                      }
                                    },
                                    "serviceEndpoints": {
                                      "type": "array",
                                      "items": {
                                        "type": "string"
                                      },
                                      "defaultValue": [],
                                      "metadata": {
                                        "description": "Optional. The service endpoints to enable on the subnet."
                                      }
                                    },
                                    "delegation": {
                                      "type": "string",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. The delegation to enable on the subnet."
                                      }
                                    },
                                    "natGatewayResourceId": {
                                      "type": "string",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. The resource ID of the NAT Gateway to use for the subnet."
                                      }
                                    },
                                    "privateEndpointNetworkPolicies": {
                                      "type": "string",
                                      "nullable": true,
                                      "allowedValues": [
                                        "Disabled",
                                        "Enabled",
                                        "NetworkSecurityGroupEnabled",
                                        "RouteTableEnabled"
                                      ],
                                      "metadata": {
                                        "description": "Optional. Enable or disable apply network policies on private endpoint in the subnet."
                                      }
                                    },
                                    "privateLinkServiceNetworkPolicies": {
                                      "type": "string",
                                      "nullable": true,
                                      "allowedValues": [
                                        "Disabled",
                                        "Enabled"
                                      ],
                                      "metadata": {
                                        "description": "Optional. Enable or disable apply network policies on private link service in the subnet."
                                      }
                                    },
                                    "addressPrefixes": {
                                      "type": "array",
                                      "items": {
                                        "type": "string"
                                      },
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Conditional. List of address prefixes for the subnet. Required if `addressPrefix` is empty."
                                      }
                                    },
                                    "defaultOutboundAccess": {
                                      "type": "bool",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. Set this property to false to disable default outbound connectivity for all VMs in the subnet. This property can only be set at the time of subnet creation and cannot be updated for an existing subnet."
                                      }
                                    },
                                    "sharingScope": {
                                      "type": "string",
                                      "allowedValues": [
                                        "DelegatedServices",
                                        "Tenant"
                                      ],
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. Set this property to Tenant to allow sharing subnet with other subscriptions in your AAD tenant. This property can only be set if defaultOutboundAccess is set to false, both properties can only be set if subnet is empty."
                                      }
                                    },
                                    "applicationGatewayIPConfigurations": {
                                      "type": "array",
                                      "defaultValue": [],
                                      "metadata": {
                                        "description": "Optional. Application gateway IP configurations of virtual network resource."
                                      }
                                    },
                                    "serviceEndpointPolicies": {
                                      "type": "array",
                                      "defaultValue": [],
                                      "metadata": {
                                        "description": "Optional. An array of service endpoint policies."
                                      }
                                    },
                                    "roleAssignments": {
                                      "type": "array",
                                      "items": {
                                        "$ref": "#/definitions/roleAssignmentType"
                                      },
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. Array of role assignments to create."
                                      }
                                    }
                                  },
                                  "variables": {
                                    "copy": [
                                      {
                                        "name": "formattedRoleAssignments",
                                        "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]",
                                        "input": "[union(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')], createObject('roleDefinitionId', coalesce(tryGet(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName), if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName)))))]"
                                      }
                                    ],
                                    "builtInRoleNames": {
                                      "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                                      "Network Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4d97b98b-1d4f-4787-a291-c67834d212e7')]",
                                      "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                                      "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                                      "Role Based Access Control Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]",
                                      "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]"
                                    }
                                  },
                                  "resources": {
                                    "virtualNetwork": {
                                      "existing": true,
                                      "type": "Microsoft.Network/virtualNetworks",
                                      "apiVersion": "2024-01-01",
                                      "name": "[parameters('virtualNetworkName')]"
                                    },
                                    "subnet": {
                                      "type": "Microsoft.Network/virtualNetworks/subnets",
                                      "apiVersion": "2024-01-01",
                                      "name": "[format('{0}/{1}', parameters('virtualNetworkName'), parameters('name'))]",
                                      "properties": {
                                        "copy": [
                                          {
                                            "name": "serviceEndpoints",
                                            "count": "[length(parameters('serviceEndpoints'))]",
                                            "input": {
                                              "service": "[parameters('serviceEndpoints')[copyIndex('serviceEndpoints')]]"
                                            }
                                          }
                                        ],
                                        "addressPrefix": "[parameters('addressPrefix')]",
                                        "addressPrefixes": "[parameters('addressPrefixes')]",
                                        "networkSecurityGroup": "[if(not(empty(parameters('networkSecurityGroupResourceId'))), createObject('id', parameters('networkSecurityGroupResourceId')), null())]",
                                        "routeTable": "[if(not(empty(parameters('routeTableResourceId'))), createObject('id', parameters('routeTableResourceId')), null())]",
                                        "natGateway": "[if(not(empty(parameters('natGatewayResourceId'))), createObject('id', parameters('natGatewayResourceId')), null())]",
                                        "delegations": "[if(not(empty(parameters('delegation'))), createArray(createObject('name', parameters('delegation'), 'properties', createObject('serviceName', parameters('delegation')))), createArray())]",
                                        "privateEndpointNetworkPolicies": "[parameters('privateEndpointNetworkPolicies')]",
                                        "privateLinkServiceNetworkPolicies": "[parameters('privateLinkServiceNetworkPolicies')]",
                                        "applicationGatewayIPConfigurations": "[parameters('applicationGatewayIPConfigurations')]",
                                        "serviceEndpointPolicies": "[parameters('serviceEndpointPolicies')]",
                                        "defaultOutboundAccess": "[parameters('defaultOutboundAccess')]",
                                        "sharingScope": "[parameters('sharingScope')]"
                                      },
                                      "dependsOn": [
                                        "virtualNetwork"
                                      ]
                                    },
                                    "subnet_roleAssignments": {
                                      "copy": {
                                        "name": "subnet_roleAssignments",
                                        "count": "[length(coalesce(variables('formattedRoleAssignments'), createArray()))]"
                                      },
                                      "type": "Microsoft.Authorization/roleAssignments",
                                      "apiVersion": "2022-04-01",
                                      "scope": "[format('Microsoft.Network/virtualNetworks/{0}/subnets/{1}', parameters('virtualNetworkName'), parameters('name'))]",
                                      "name": "[coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'name'), guid(resourceId('Microsoft.Network/virtualNetworks/subnets', parameters('virtualNetworkName'), parameters('name')), coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId, coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId))]",
                                      "properties": {
                                        "roleDefinitionId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId]",
                                        "principalId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId]",
                                        "description": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'description')]",
                                        "principalType": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'principalType')]",
                                        "condition": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition')]",
                                        "conditionVersion": "[if(not(empty(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                                        "delegatedManagedIdentityResourceId": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
                                      },
                                      "dependsOn": [
                                        "subnet"
                                      ]
                                    }
                                  },
                                  "outputs": {
                                    "resourceGroupName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource group the virtual network peering was deployed into."
                                      },
                                      "value": "[resourceGroup().name]"
                                    },
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the virtual network peering."
                                      },
                                      "value": "[parameters('name')]"
                                    },
                                    "resourceId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource ID of the virtual network peering."
                                      },
                                      "value": "[resourceId('Microsoft.Network/virtualNetworks/subnets', parameters('virtualNetworkName'), parameters('name'))]"
                                    },
                                    "addressPrefix": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The address prefix for the subnet."
                                      },
                                      "value": "[coalesce(tryGet(reference('subnet'), 'addressPrefix'), '')]"
                                    },
                                    "addressPrefixes": {
                                      "type": "array",
                                      "metadata": {
                                        "description": "List of address prefixes for the subnet."
                                      },
                                      "value": "[coalesce(tryGet(reference('subnet'), 'addressPrefixes'), createArray())]"
                                    }
                                  }
                                }
                              },
                              "dependsOn": [
                                "virtualNetwork"
                              ]
                            },
                            "virtualNetwork_peering_local": {
                              "copy": {
                                "name": "virtualNetwork_peering_local",
                                "count": "[length(coalesce(parameters('peerings'), createArray()))]"
                              },
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "[format('{0}-virtualNetworkPeering-local-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "localVnetName": {
                                    "value": "[parameters('name')]"
                                  },
                                  "remoteVirtualNetworkResourceId": {
                                    "value": "[coalesce(parameters('peerings'), createArray())[copyIndex()].remoteVirtualNetworkResourceId]"
                                  },
                                  "name": {
                                    "value": "[tryGet(coalesce(parameters('peerings'), createArray())[copyIndex()], 'name')]"
                                  },
                                  "allowForwardedTraffic": {
                                    "value": "[tryGet(coalesce(parameters('peerings'), createArray())[copyIndex()], 'allowForwardedTraffic')]"
                                  },
                                  "allowGatewayTransit": {
                                    "value": "[tryGet(coalesce(parameters('peerings'), createArray())[copyIndex()], 'allowGatewayTransit')]"
                                  },
                                  "allowVirtualNetworkAccess": {
                                    "value": "[tryGet(coalesce(parameters('peerings'), createArray())[copyIndex()], 'allowVirtualNetworkAccess')]"
                                  },
                                  "doNotVerifyRemoteGateways": {
                                    "value": "[tryGet(coalesce(parameters('peerings'), createArray())[copyIndex()], 'doNotVerifyRemoteGateways')]"
                                  },
                                  "useRemoteGateways": {
                                    "value": "[tryGet(coalesce(parameters('peerings'), createArray())[copyIndex()], 'useRemoteGateways')]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.30.23.60470",
                                      "templateHash": "345394220621166229"
                                    },
                                    "name": "Virtual Network Peerings",
                                    "description": "This module deploys a Virtual Network Peering.",
                                    "owner": "Azure/module-maintainers"
                                  },
                                  "parameters": {
                                    "name": {
                                      "type": "string",
                                      "defaultValue": "[format('peer-{0}-{1}', parameters('localVnetName'), last(split(parameters('remoteVirtualNetworkResourceId'), '/')))]",
                                      "metadata": {
                                        "description": "Optional. The Name of VNET Peering resource. If not provided, default value will be localVnetName-remoteVnetName."
                                      }
                                    },
                                    "localVnetName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Conditional. The name of the parent Virtual Network to add the peering to. Required if the template is used in a standalone deployment."
                                      }
                                    },
                                    "remoteVirtualNetworkResourceId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The Resource ID of the VNet that is this Local VNet is being peered to. Should be in the format of a Resource ID."
                                      }
                                    },
                                    "allowForwardedTraffic": {
                                      "type": "bool",
                                      "defaultValue": true,
                                      "metadata": {
                                        "description": "Optional. Whether the forwarded traffic from the VMs in the local virtual network will be allowed/disallowed in remote virtual network. Default is true."
                                      }
                                    },
                                    "allowGatewayTransit": {
                                      "type": "bool",
                                      "defaultValue": false,
                                      "metadata": {
                                        "description": "Optional. If gateway links can be used in remote virtual networking to link to this virtual network. Default is false."
                                      }
                                    },
                                    "allowVirtualNetworkAccess": {
                                      "type": "bool",
                                      "defaultValue": true,
                                      "metadata": {
                                        "description": "Optional. Whether the VMs in the local virtual network space would be able to access the VMs in remote virtual network space. Default is true."
                                      }
                                    },
                                    "doNotVerifyRemoteGateways": {
                                      "type": "bool",
                                      "defaultValue": true,
                                      "metadata": {
                                        "description": "Optional. If we need to verify the provisioning state of the remote gateway. Default is true."
                                      }
                                    },
                                    "useRemoteGateways": {
                                      "type": "bool",
                                      "defaultValue": false,
                                      "metadata": {
                                        "description": "Optional. If remote gateways can be used on this virtual network. If the flag is set to true, and allowGatewayTransit on remote peering is also true, virtual network will use gateways of remote virtual network for transit. Only one peering can have this flag set to true. This flag cannot be set if virtual network already has a gateway. Default is false."
                                      }
                                    }
                                  },
                                  "resources": [
                                    {
                                      "type": "Microsoft.Network/virtualNetworks/virtualNetworkPeerings",
                                      "apiVersion": "2024-01-01",
                                      "name": "[format('{0}/{1}', parameters('localVnetName'), parameters('name'))]",
                                      "properties": {
                                        "allowForwardedTraffic": "[parameters('allowForwardedTraffic')]",
                                        "allowGatewayTransit": "[parameters('allowGatewayTransit')]",
                                        "allowVirtualNetworkAccess": "[parameters('allowVirtualNetworkAccess')]",
                                        "doNotVerifyRemoteGateways": "[parameters('doNotVerifyRemoteGateways')]",
                                        "useRemoteGateways": "[parameters('useRemoteGateways')]",
                                        "remoteVirtualNetwork": {
                                          "id": "[parameters('remoteVirtualNetworkResourceId')]"
                                        }
                                      }
                                    }
                                  ],
                                  "outputs": {
                                    "resourceGroupName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource group the virtual network peering was deployed into."
                                      },
                                      "value": "[resourceGroup().name]"
                                    },
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the virtual network peering."
                                      },
                                      "value": "[parameters('name')]"
                                    },
                                    "resourceId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource ID of the virtual network peering."
                                      },
                                      "value": "[resourceId('Microsoft.Network/virtualNetworks/virtualNetworkPeerings', parameters('localVnetName'), parameters('name'))]"
                                    }
                                  }
                                }
                              },
                              "dependsOn": [
                                "virtualNetwork",
                                "virtualNetwork_subnets"
                              ]
                            },
                            "virtualNetwork_peering_remote": {
                              "copy": {
                                "name": "virtualNetwork_peering_remote",
                                "count": "[length(coalesce(parameters('peerings'), createArray()))]"
                              },
                              "condition": "[coalesce(tryGet(coalesce(parameters('peerings'), createArray())[copyIndex()], 'remotePeeringEnabled'), false())]",
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "[format('{0}-virtualNetworkPeering-remote-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
                              "subscriptionId": "[split(coalesce(parameters('peerings'), createArray())[copyIndex()].remoteVirtualNetworkResourceId, '/')[2]]",
                              "resourceGroup": "[split(coalesce(parameters('peerings'), createArray())[copyIndex()].remoteVirtualNetworkResourceId, '/')[4]]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "localVnetName": {
                                    "value": "[last(split(coalesce(parameters('peerings'), createArray())[copyIndex()].remoteVirtualNetworkResourceId, '/'))]"
                                  },
                                  "remoteVirtualNetworkResourceId": {
                                    "value": "[resourceId('Microsoft.Network/virtualNetworks', parameters('name'))]"
                                  },
                                  "name": {
                                    "value": "[tryGet(coalesce(parameters('peerings'), createArray())[copyIndex()], 'remotePeeringName')]"
                                  },
                                  "allowForwardedTraffic": {
                                    "value": "[tryGet(coalesce(parameters('peerings'), createArray())[copyIndex()], 'remotePeeringAllowForwardedTraffic')]"
                                  },
                                  "allowGatewayTransit": {
                                    "value": "[tryGet(coalesce(parameters('peerings'), createArray())[copyIndex()], 'remotePeeringAllowGatewayTransit')]"
                                  },
                                  "allowVirtualNetworkAccess": {
                                    "value": "[tryGet(coalesce(parameters('peerings'), createArray())[copyIndex()], 'remotePeeringAllowVirtualNetworkAccess')]"
                                  },
                                  "doNotVerifyRemoteGateways": {
                                    "value": "[tryGet(coalesce(parameters('peerings'), createArray())[copyIndex()], 'remotePeeringDoNotVerifyRemoteGateways')]"
                                  },
                                  "useRemoteGateways": {
                                    "value": "[tryGet(coalesce(parameters('peerings'), createArray())[copyIndex()], 'remotePeeringUseRemoteGateways')]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.30.23.60470",
                                      "templateHash": "345394220621166229"
                                    },
                                    "name": "Virtual Network Peerings",
                                    "description": "This module deploys a Virtual Network Peering.",
                                    "owner": "Azure/module-maintainers"
                                  },
                                  "parameters": {
                                    "name": {
                                      "type": "string",
                                      "defaultValue": "[format('peer-{0}-{1}', parameters('localVnetName'), last(split(parameters('remoteVirtualNetworkResourceId'), '/')))]",
                                      "metadata": {
                                        "description": "Optional. The Name of VNET Peering resource. If not provided, default value will be localVnetName-remoteVnetName."
                                      }
                                    },
                                    "localVnetName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Conditional. The name of the parent Virtual Network to add the peering to. Required if the template is used in a standalone deployment."
                                      }
                                    },
                                    "remoteVirtualNetworkResourceId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The Resource ID of the VNet that is this Local VNet is being peered to. Should be in the format of a Resource ID."
                                      }
                                    },
                                    "allowForwardedTraffic": {
                                      "type": "bool",
                                      "defaultValue": true,
                                      "metadata": {
                                        "description": "Optional. Whether the forwarded traffic from the VMs in the local virtual network will be allowed/disallowed in remote virtual network. Default is true."
                                      }
                                    },
                                    "allowGatewayTransit": {
                                      "type": "bool",
                                      "defaultValue": false,
                                      "metadata": {
                                        "description": "Optional. If gateway links can be used in remote virtual networking to link to this virtual network. Default is false."
                                      }
                                    },
                                    "allowVirtualNetworkAccess": {
                                      "type": "bool",
                                      "defaultValue": true,
                                      "metadata": {
                                        "description": "Optional. Whether the VMs in the local virtual network space would be able to access the VMs in remote virtual network space. Default is true."
                                      }
                                    },
                                    "doNotVerifyRemoteGateways": {
                                      "type": "bool",
                                      "defaultValue": true,
                                      "metadata": {
                                        "description": "Optional. If we need to verify the provisioning state of the remote gateway. Default is true."
                                      }
                                    },
                                    "useRemoteGateways": {
                                      "type": "bool",
                                      "defaultValue": false,
                                      "metadata": {
                                        "description": "Optional. If remote gateways can be used on this virtual network. If the flag is set to true, and allowGatewayTransit on remote peering is also true, virtual network will use gateways of remote virtual network for transit. Only one peering can have this flag set to true. This flag cannot be set if virtual network already has a gateway. Default is false."
                                      }
                                    }
                                  },
                                  "resources": [
                                    {
                                      "type": "Microsoft.Network/virtualNetworks/virtualNetworkPeerings",
                                      "apiVersion": "2024-01-01",
                                      "name": "[format('{0}/{1}', parameters('localVnetName'), parameters('name'))]",
                                      "properties": {
                                        "allowForwardedTraffic": "[parameters('allowForwardedTraffic')]",
                                        "allowGatewayTransit": "[parameters('allowGatewayTransit')]",
                                        "allowVirtualNetworkAccess": "[parameters('allowVirtualNetworkAccess')]",
                                        "doNotVerifyRemoteGateways": "[parameters('doNotVerifyRemoteGateways')]",
                                        "useRemoteGateways": "[parameters('useRemoteGateways')]",
                                        "remoteVirtualNetwork": {
                                          "id": "[parameters('remoteVirtualNetworkResourceId')]"
                                        }
                                      }
                                    }
                                  ],
                                  "outputs": {
                                    "resourceGroupName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource group the virtual network peering was deployed into."
                                      },
                                      "value": "[resourceGroup().name]"
                                    },
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the virtual network peering."
                                      },
                                      "value": "[parameters('name')]"
                                    },
                                    "resourceId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource ID of the virtual network peering."
                                      },
                                      "value": "[resourceId('Microsoft.Network/virtualNetworks/virtualNetworkPeerings', parameters('localVnetName'), parameters('name'))]"
                                    }
                                  }
                                }
                              },
                              "dependsOn": [
                                "virtualNetwork",
                                "virtualNetwork_subnets"
                              ]
                            }
                          },
                          "outputs": {
                            "resourceGroupName": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource group the virtual network was deployed into."
                              },
                              "value": "[resourceGroup().name]"
                            },
                            "resourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource ID of the virtual network."
                              },
                              "value": "[resourceId('Microsoft.Network/virtualNetworks', parameters('name'))]"
                            },
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "The name of the virtual network."
                              },
                              "value": "[parameters('name')]"
                            },
                            "subnetNames": {
                              "type": "array",
                              "metadata": {
                                "description": "The names of the deployed subnets."
                              },
                              "copy": {
                                "count": "[length(coalesce(parameters('subnets'), createArray()))]",
                                "input": "[reference(format('virtualNetwork_subnets[{0}]', copyIndex())).outputs.name.value]"
                              }
                            },
                            "subnetResourceIds": {
                              "type": "array",
                              "metadata": {
                                "description": "The resource IDs of the deployed subnets."
                              },
                              "copy": {
                                "count": "[length(coalesce(parameters('subnets'), createArray()))]",
                                "input": "[reference(format('virtualNetwork_subnets[{0}]', copyIndex())).outputs.resourceId.value]"
                              }
                            },
                            "location": {
                              "type": "string",
                              "metadata": {
                                "description": "The location the resource was deployed into."
                              },
                              "value": "[reference('virtualNetwork', '2024-01-01', 'full').location]"
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Resources/deployments', take(format('nsgAse-{0}', deployment().name), 64))]",
                        "[resourceId('Microsoft.Resources/deployments', take(format('nsgPep-{0}', deployment().name), 64))]",
                        "[resourceId('Microsoft.Resources/deployments', 'routeTableToFirewall-Deployment')]"
                      ]
                    },
                    {
                      "condition": "[and(not(empty(parameters('firewallInternalIp'))), parameters('enableEgressLockdown'))]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "routeTableToFirewall-Deployment",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "name": {
                            "value": "[variables('resourceNames').routeTable]"
                          },
                          "location": {
                            "value": "[parameters('location')]"
                          },
                          "tags": {
                            "value": "[parameters('tags')]"
                          },
                          "routes": {
                            "value": "[variables('udrRoutes')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "languageVersion": "2.0",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.29.47.4906",
                              "templateHash": "5827817137345359685"
                            },
                            "name": "Route Tables",
                            "description": "This module deploys a User Defined Route Table (UDR).",
                            "owner": "Azure/module-maintainers"
                          },
                          "definitions": {
                            "lockType": {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Specify the name of lock."
                                  }
                                },
                                "kind": {
                                  "type": "string",
                                  "allowedValues": [
                                    "CanNotDelete",
                                    "None",
                                    "ReadOnly"
                                  ],
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Specify the type of lock."
                                  }
                                }
                              },
                              "nullable": true
                            },
                            "roleAssignmentType": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "name": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The name (as GUID) of the role assignment. If not provided, a GUID will be generated."
                                    }
                                  },
                                  "roleDefinitionIdOrName": {
                                    "type": "string",
                                    "metadata": {
                                      "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                                    }
                                  },
                                  "principalId": {
                                    "type": "string",
                                    "metadata": {
                                      "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                                    }
                                  },
                                  "principalType": {
                                    "type": "string",
                                    "allowedValues": [
                                      "Device",
                                      "ForeignGroup",
                                      "Group",
                                      "ServicePrincipal",
                                      "User"
                                    ],
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The principal type of the assigned principal ID."
                                    }
                                  },
                                  "description": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The description of the role assignment."
                                    }
                                  },
                                  "condition": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                                    }
                                  },
                                  "conditionVersion": {
                                    "type": "string",
                                    "allowedValues": [
                                      "2.0"
                                    ],
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. Version of the condition."
                                    }
                                  },
                                  "delegatedManagedIdentityResourceId": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The Resource Id of the delegated managed identity resource."
                                    }
                                  }
                                }
                              },
                              "nullable": true
                            },
                            "routeType": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "name": {
                                    "type": "string",
                                    "metadata": {
                                      "description": "Required. Name of the route."
                                    }
                                  },
                                  "properties": {
                                    "type": "object",
                                    "properties": {
                                      "nextHopType": {
                                        "type": "string",
                                        "allowedValues": [
                                          "Internet",
                                          "None",
                                          "VirtualAppliance",
                                          "VirtualNetworkGateway",
                                          "VnetLocal"
                                        ],
                                        "metadata": {
                                          "description": "Required. The type of Azure hop the packet should be sent to."
                                        }
                                      },
                                      "addressPrefix": {
                                        "type": "string",
                                        "nullable": true,
                                        "metadata": {
                                          "description": "Optional. The destination CIDR to which the route applies."
                                        }
                                      },
                                      "hasBgpOverride": {
                                        "type": "bool",
                                        "nullable": true,
                                        "metadata": {
                                          "description": "Optional. A value indicating whether this route overrides overlapping BGP routes regardless of LPM."
                                        }
                                      },
                                      "nextHopIpAddress": {
                                        "type": "string",
                                        "nullable": true,
                                        "metadata": {
                                          "description": "Optional. The IP address packets should be forwarded to. Next hop values are only allowed in routes where the next hop type is VirtualAppliance."
                                        }
                                      }
                                    },
                                    "metadata": {
                                      "description": "Required. Properties of the route."
                                    }
                                  }
                                }
                              },
                              "nullable": true
                            }
                          },
                          "parameters": {
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. Name given for the hub route table."
                              }
                            },
                            "location": {
                              "type": "string",
                              "defaultValue": "[resourceGroup().location]",
                              "metadata": {
                                "description": "Optional. Location for all resources."
                              }
                            },
                            "routes": {
                              "$ref": "#/definitions/routeType",
                              "metadata": {
                                "description": "Optional. An array of routes to be established within the hub route table."
                              }
                            },
                            "disableBgpRoutePropagation": {
                              "type": "bool",
                              "defaultValue": false,
                              "metadata": {
                                "description": "Optional. Switch to disable BGP route propagation."
                              }
                            },
                            "lock": {
                              "$ref": "#/definitions/lockType",
                              "metadata": {
                                "description": "Optional. The lock settings of the service."
                              }
                            },
                            "roleAssignments": {
                              "$ref": "#/definitions/roleAssignmentType",
                              "metadata": {
                                "description": "Optional. Array of role assignments to create."
                              }
                            },
                            "tags": {
                              "type": "object",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Tags of the resource."
                              }
                            },
                            "enableTelemetry": {
                              "type": "bool",
                              "defaultValue": true,
                              "metadata": {
                                "description": "Optional. Enable/Disable usage telemetry for module."
                              }
                            }
                          },
                          "variables": {
                            "copy": [
                              {
                                "name": "formattedRoleAssignments",
                                "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]",
                                "input": "[union(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')], createObject('roleDefinitionId', coalesce(tryGet(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName), if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName)))))]"
                              }
                            ],
                            "builtInRoleNames": {
                              "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                              "Network Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4d97b98b-1d4f-4787-a291-c67834d212e7')]",
                              "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                              "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                              "Role Based Access Control Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]",
                              "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]"
                            }
                          },
                          "resources": {
                            "avmTelemetry": {
                              "condition": "[parameters('enableTelemetry')]",
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2024-03-01",
                              "name": "[take(format('46d3xbcp.res.network-routetable.{0}.{1}', replace('0.4.0', '.', '-'), substring(uniqueString(deployment().name, parameters('location')), 0, 4)), 64)]",
                              "properties": {
                                "mode": "Incremental",
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "resources": [],
                                  "outputs": {
                                    "telemetry": {
                                      "type": "String",
                                      "value": "For more information, see https://aka.ms/avm/TelemetryInfo"
                                    }
                                  }
                                }
                              }
                            },
                            "routeTable": {
                              "type": "Microsoft.Network/routeTables",
                              "apiVersion": "2023-04-01",
                              "name": "[parameters('name')]",
                              "location": "[parameters('location')]",
                              "tags": "[parameters('tags')]",
                              "properties": {
                                "routes": "[parameters('routes')]",
                                "disableBgpRoutePropagation": "[parameters('disableBgpRoutePropagation')]"
                              }
                            },
                            "routeTable_lock": {
                              "condition": "[and(not(empty(coalesce(parameters('lock'), createObject()))), not(equals(tryGet(parameters('lock'), 'kind'), 'None')))]",
                              "type": "Microsoft.Authorization/locks",
                              "apiVersion": "2020-05-01",
                              "scope": "[format('Microsoft.Network/routeTables/{0}', parameters('name'))]",
                              "name": "[coalesce(tryGet(parameters('lock'), 'name'), format('lock-{0}', parameters('name')))]",
                              "properties": {
                                "level": "[coalesce(tryGet(parameters('lock'), 'kind'), '')]",
                                "notes": "[if(equals(tryGet(parameters('lock'), 'kind'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot delete or modify the resource or child resources.')]"
                              },
                              "dependsOn": [
                                "routeTable"
                              ]
                            },
                            "routeTable_roleAssignments": {
                              "copy": {
                                "name": "routeTable_roleAssignments",
                                "count": "[length(coalesce(variables('formattedRoleAssignments'), createArray()))]"
                              },
                              "type": "Microsoft.Authorization/roleAssignments",
                              "apiVersion": "2022-04-01",
                              "scope": "[format('Microsoft.Network/routeTables/{0}', parameters('name'))]",
                              "name": "[coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'name'), guid(resourceId('Microsoft.Network/routeTables', parameters('name')), coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId, coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId))]",
                              "properties": {
                                "roleDefinitionId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId]",
                                "principalId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId]",
                                "description": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'description')]",
                                "principalType": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'principalType')]",
                                "condition": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition')]",
                                "conditionVersion": "[if(not(empty(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                                "delegatedManagedIdentityResourceId": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
                              },
                              "dependsOn": [
                                "routeTable"
                              ]
                            }
                          },
                          "outputs": {
                            "resourceGroupName": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource group the route table was deployed into."
                              },
                              "value": "[resourceGroup().name]"
                            },
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "The name of the route table."
                              },
                              "value": "[parameters('name')]"
                            },
                            "resourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource ID of the route table."
                              },
                              "value": "[resourceId('Microsoft.Network/routeTables', parameters('name'))]"
                            },
                            "location": {
                              "type": "string",
                              "metadata": {
                                "description": "The location the resource was deployed into."
                              },
                              "value": "[reference('routeTable', '2023-04-01', 'full').location]"
                            }
                          }
                        }
                      }
                    },
                    {
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[take(format('nsgPep-{0}', deployment().name), 64)]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "name": {
                            "value": "[variables('resourceNames').pepNsg]"
                          },
                          "location": {
                            "value": "[parameters('location')]"
                          },
                          "tags": {
                            "value": "[parameters('tags')]"
                          },
                          "securityRules": {
                            "value": [
                              {
                                "name": "deny-hop-outbound",
                                "properties": {
                                  "priority": 200,
                                  "access": "Deny",
                                  "protocol": "Tcp",
                                  "direction": "Outbound",
                                  "sourceAddressPrefix": "VirtualNetwork",
                                  "destinationAddressPrefix": "*",
                                  "destinationPortRanges": [
                                    "3389",
                                    "22"
                                  ]
                                }
                              }
                            ]
                          },
                          "diagnosticSettings": {
                            "value": [
                              {
                                "workspaceResourceId": "[parameters('logAnalyticsWorkspaceId')]"
                              }
                            ]
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "languageVersion": "2.0",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.29.47.4906",
                              "templateHash": "32550557190395602"
                            },
                            "name": "Network Security Groups",
                            "description": "This module deploys a Network security Group (NSG).",
                            "owner": "Azure/module-maintainers"
                          },
                          "definitions": {
                            "lockType": {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Specify the name of lock."
                                  }
                                },
                                "kind": {
                                  "type": "string",
                                  "allowedValues": [
                                    "CanNotDelete",
                                    "None",
                                    "ReadOnly"
                                  ],
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Specify the type of lock."
                                  }
                                }
                              },
                              "nullable": true
                            },
                            "roleAssignmentType": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "name": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The name (as GUID) of the role assignment. If not provided, a GUID will be generated."
                                    }
                                  },
                                  "roleDefinitionIdOrName": {
                                    "type": "string",
                                    "metadata": {
                                      "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                                    }
                                  },
                                  "principalId": {
                                    "type": "string",
                                    "metadata": {
                                      "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                                    }
                                  },
                                  "principalType": {
                                    "type": "string",
                                    "allowedValues": [
                                      "Device",
                                      "ForeignGroup",
                                      "Group",
                                      "ServicePrincipal",
                                      "User"
                                    ],
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The principal type of the assigned principal ID."
                                    }
                                  },
                                  "description": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The description of the role assignment."
                                    }
                                  },
                                  "condition": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                                    }
                                  },
                                  "conditionVersion": {
                                    "type": "string",
                                    "allowedValues": [
                                      "2.0"
                                    ],
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. Version of the condition."
                                    }
                                  },
                                  "delegatedManagedIdentityResourceId": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The Resource Id of the delegated managed identity resource."
                                    }
                                  }
                                }
                              },
                              "nullable": true
                            },
                            "diagnosticSettingType": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "name": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The name of diagnostic setting."
                                    }
                                  },
                                  "logCategoriesAndGroups": {
                                    "type": "array",
                                    "items": {
                                      "type": "object",
                                      "properties": {
                                        "category": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. Name of a Diagnostic Log category for a resource type this setting is applied to. Set the specific logs to collect here."
                                          }
                                        },
                                        "categoryGroup": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. Name of a Diagnostic Log category group for a resource type this setting is applied to. Set to `allLogs` to collect all logs."
                                          }
                                        },
                                        "enabled": {
                                          "type": "bool",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. Enable or disable the category explicitly. Default is `true`."
                                          }
                                        }
                                      }
                                    },
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The name of logs that will be streamed. \"allLogs\" includes all possible logs for the resource. Set to `[]` to disable log collection."
                                    }
                                  },
                                  "logAnalyticsDestinationType": {
                                    "type": "string",
                                    "allowedValues": [
                                      "AzureDiagnostics",
                                      "Dedicated"
                                    ],
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. A string indicating whether the export to Log Analytics should use the default destination type, i.e. AzureDiagnostics, or use a destination type."
                                    }
                                  },
                                  "workspaceResourceId": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. Resource ID of the diagnostic log analytics workspace. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                                    }
                                  },
                                  "storageAccountResourceId": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. Resource ID of the diagnostic storage account. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                                    }
                                  },
                                  "eventHubAuthorizationRuleResourceId": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. Resource ID of the diagnostic event hub authorization rule for the Event Hubs namespace in which the event hub should be created or streamed to."
                                    }
                                  },
                                  "eventHubName": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. Name of the diagnostic event hub within the namespace to which logs are streamed. Without this, an event hub is created for each log category. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                                    }
                                  },
                                  "marketplacePartnerResourceId": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The full ARM resource ID of the Marketplace resource to which you would like to send Diagnostic Logs."
                                    }
                                  }
                                }
                              },
                              "nullable": true
                            },
                            "securityRulesType": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "name": {
                                    "type": "string",
                                    "metadata": {
                                      "description": "Required. The name of the security rule."
                                    }
                                  },
                                  "properties": {
                                    "type": "object",
                                    "properties": {
                                      "access": {
                                        "type": "string",
                                        "allowedValues": [
                                          "Allow",
                                          "Deny"
                                        ],
                                        "metadata": {
                                          "description": "Required. Whether network traffic is allowed or denied."
                                        }
                                      },
                                      "description": {
                                        "type": "string",
                                        "nullable": true,
                                        "metadata": {
                                          "description": "Optional. The description of the security rule."
                                        }
                                      },
                                      "destinationAddressPrefix": {
                                        "type": "string",
                                        "nullable": true,
                                        "metadata": {
                                          "description": "Optional. Optional. The destination address prefix. CIDR or destination IP range. Asterisk \"*\" can also be used to match all source IPs. Default tags such as \"VirtualNetwork\", \"AzureLoadBalancer\" and \"Internet\" can also be used."
                                        }
                                      },
                                      "destinationAddressPrefixes": {
                                        "type": "array",
                                        "items": {
                                          "type": "string"
                                        },
                                        "nullable": true,
                                        "metadata": {
                                          "description": "Optional. The destination address prefixes. CIDR or destination IP ranges."
                                        }
                                      },
                                      "destinationApplicationSecurityGroupResourceIds": {
                                        "type": "array",
                                        "items": {
                                          "type": "string"
                                        },
                                        "nullable": true,
                                        "metadata": {
                                          "description": "Optional. The resource IDs of the application security groups specified as destination."
                                        }
                                      },
                                      "destinationPortRange": {
                                        "type": "string",
                                        "nullable": true,
                                        "metadata": {
                                          "description": "Optional. The destination port or range. Integer or range between 0 and 65535. Asterisk \"*\" can also be used to match all ports."
                                        }
                                      },
                                      "destinationPortRanges": {
                                        "type": "array",
                                        "items": {
                                          "type": "string"
                                        },
                                        "nullable": true,
                                        "metadata": {
                                          "description": "Optional. The destination port ranges."
                                        }
                                      },
                                      "direction": {
                                        "type": "string",
                                        "allowedValues": [
                                          "Inbound",
                                          "Outbound"
                                        ],
                                        "metadata": {
                                          "description": "Required. The direction of the rule. The direction specifies if rule will be evaluated on incoming or outgoing traffic."
                                        }
                                      },
                                      "priority": {
                                        "type": "int",
                                        "minValue": 100,
                                        "maxValue": 4096,
                                        "metadata": {
                                          "description": "Required. Required. The priority of the rule. The value can be between 100 and 4096. The priority number must be unique for each rule in the collection. The lower the priority number, the higher the priority of the rule."
                                        }
                                      },
                                      "protocol": {
                                        "type": "string",
                                        "allowedValues": [
                                          "*",
                                          "Ah",
                                          "Esp",
                                          "Icmp",
                                          "Tcp",
                                          "Udp"
                                        ],
                                        "metadata": {
                                          "description": "Required. Network protocol this rule applies to."
                                        }
                                      },
                                      "sourceAddressPrefix": {
                                        "type": "string",
                                        "nullable": true,
                                        "metadata": {
                                          "description": "Optional. The CIDR or source IP range. Asterisk \"*\" can also be used to match all source IPs. Default tags such as \"VirtualNetwork\", \"AzureLoadBalancer\" and \"Internet\" can also be used. If this is an ingress rule, specifies where network traffic originates from."
                                        }
                                      },
                                      "sourceAddressPrefixes": {
                                        "type": "array",
                                        "items": {
                                          "type": "string"
                                        },
                                        "nullable": true,
                                        "metadata": {
                                          "description": "Optional. The CIDR or source IP ranges."
                                        }
                                      },
                                      "sourceApplicationSecurityGroupResourceIds": {
                                        "type": "array",
                                        "items": {
                                          "type": "string"
                                        },
                                        "nullable": true,
                                        "metadata": {
                                          "description": "Optional. The resource IDs of the application security groups specified as source."
                                        }
                                      },
                                      "sourcePortRange": {
                                        "type": "string",
                                        "nullable": true,
                                        "metadata": {
                                          "description": "Optional. The source port or range. Integer or range between 0 and 65535. Asterisk \"*\" can also be used to match all ports."
                                        }
                                      },
                                      "sourcePortRanges": {
                                        "type": "array",
                                        "items": {
                                          "type": "string"
                                        },
                                        "nullable": true,
                                        "metadata": {
                                          "description": "Optional. The source port ranges."
                                        }
                                      }
                                    },
                                    "metadata": {
                                      "description": "Required. The properties of the security rule."
                                    }
                                  }
                                }
                              },
                              "nullable": true
                            }
                          },
                          "parameters": {
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. Name of the Network Security Group."
                              }
                            },
                            "location": {
                              "type": "string",
                              "defaultValue": "[resourceGroup().location]",
                              "metadata": {
                                "description": "Optional. Location for all resources."
                              }
                            },
                            "securityRules": {
                              "$ref": "#/definitions/securityRulesType",
                              "metadata": {
                                "description": "Optional. Array of Security Rules to deploy to the Network Security Group. When not provided, an NSG including only the built-in roles will be deployed."
                              }
                            },
                            "flushConnection": {
                              "type": "bool",
                              "defaultValue": false,
                              "metadata": {
                                "description": "Optional. When enabled, flows created from Network Security Group connections will be re-evaluated when rules are updates. Initial enablement will trigger re-evaluation. Network Security Group connection flushing is not available in all regions."
                              }
                            },
                            "diagnosticSettings": {
                              "$ref": "#/definitions/diagnosticSettingType",
                              "metadata": {
                                "description": "Optional. The diagnostic settings of the service."
                              }
                            },
                            "lock": {
                              "$ref": "#/definitions/lockType",
                              "metadata": {
                                "description": "Optional. The lock settings of the service."
                              }
                            },
                            "roleAssignments": {
                              "$ref": "#/definitions/roleAssignmentType",
                              "metadata": {
                                "description": "Optional. Array of role assignments to create."
                              }
                            },
                            "tags": {
                              "type": "object",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Tags of the NSG resource."
                              }
                            },
                            "enableTelemetry": {
                              "type": "bool",
                              "defaultValue": true,
                              "metadata": {
                                "description": "Optional. Enable/Disable usage telemetry for module."
                              }
                            }
                          },
                          "variables": {
                            "copy": [
                              {
                                "name": "formattedRoleAssignments",
                                "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]",
                                "input": "[union(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')], createObject('roleDefinitionId', coalesce(tryGet(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName), if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName)))))]"
                              }
                            ],
                            "builtInRoleNames": {
                              "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                              "Network Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4d97b98b-1d4f-4787-a291-c67834d212e7')]",
                              "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                              "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                              "Role Based Access Control Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]",
                              "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]"
                            }
                          },
                          "resources": {
                            "avmTelemetry": {
                              "condition": "[parameters('enableTelemetry')]",
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2024-03-01",
                              "name": "[format('46d3xbcp.res.network-networksecuritygroup.{0}.{1}', replace('0.5.0', '.', '-'), substring(uniqueString(deployment().name, parameters('location')), 0, 4))]",
                              "properties": {
                                "mode": "Incremental",
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "resources": [],
                                  "outputs": {
                                    "telemetry": {
                                      "type": "String",
                                      "value": "For more information, see https://aka.ms/avm/TelemetryInfo"
                                    }
                                  }
                                }
                              }
                            },
                            "networkSecurityGroup": {
                              "type": "Microsoft.Network/networkSecurityGroups",
                              "apiVersion": "2023-11-01",
                              "name": "[parameters('name')]",
                              "location": "[parameters('location')]",
                              "tags": "[parameters('tags')]",
                              "properties": {
                                "copy": [
                                  {
                                    "name": "securityRules",
                                    "count": "[length(coalesce(parameters('securityRules'), createArray()))]",
                                    "input": {
                                      "name": "[coalesce(parameters('securityRules'), createArray())[copyIndex('securityRules')].name]",
                                      "properties": {
                                        "access": "[coalesce(parameters('securityRules'), createArray())[copyIndex('securityRules')].properties.access]",
                                        "description": "[coalesce(tryGet(coalesce(parameters('securityRules'), createArray())[copyIndex('securityRules')].properties, 'description'), '')]",
                                        "destinationAddressPrefix": "[coalesce(tryGet(coalesce(parameters('securityRules'), createArray())[copyIndex('securityRules')].properties, 'destinationAddressPrefix'), '')]",
                                        "destinationAddressPrefixes": "[coalesce(tryGet(coalesce(parameters('securityRules'), createArray())[copyIndex('securityRules')].properties, 'destinationAddressPrefixes'), createArray())]",
                                        "destinationApplicationSecurityGroups": "[map(coalesce(tryGet(coalesce(parameters('securityRules'), createArray())[copyIndex('securityRules')].properties, 'destinationApplicationSecurityGroupResourceIds'), createArray()), lambda('destinationApplicationSecurityGroupResourceId', createObject('id', lambdaVariables('destinationApplicationSecurityGroupResourceId'))))]",
                                        "destinationPortRange": "[coalesce(tryGet(coalesce(parameters('securityRules'), createArray())[copyIndex('securityRules')].properties, 'destinationPortRange'), '')]",
                                        "destinationPortRanges": "[coalesce(tryGet(coalesce(parameters('securityRules'), createArray())[copyIndex('securityRules')].properties, 'destinationPortRanges'), createArray())]",
                                        "direction": "[coalesce(parameters('securityRules'), createArray())[copyIndex('securityRules')].properties.direction]",
                                        "priority": "[coalesce(parameters('securityRules'), createArray())[copyIndex('securityRules')].properties.priority]",
                                        "protocol": "[coalesce(parameters('securityRules'), createArray())[copyIndex('securityRules')].properties.protocol]",
                                        "sourceAddressPrefix": "[coalesce(tryGet(coalesce(parameters('securityRules'), createArray())[copyIndex('securityRules')].properties, 'sourceAddressPrefix'), '')]",
                                        "sourceAddressPrefixes": "[coalesce(tryGet(coalesce(parameters('securityRules'), createArray())[copyIndex('securityRules')].properties, 'sourceAddressPrefixes'), createArray())]",
                                        "sourceApplicationSecurityGroups": "[map(coalesce(tryGet(coalesce(parameters('securityRules'), createArray())[copyIndex('securityRules')].properties, 'sourceApplicationSecurityGroupResourceIds'), createArray()), lambda('sourceApplicationSecurityGroupResourceId', createObject('id', lambdaVariables('sourceApplicationSecurityGroupResourceId'))))]",
                                        "sourcePortRange": "[coalesce(tryGet(coalesce(parameters('securityRules'), createArray())[copyIndex('securityRules')].properties, 'sourcePortRange'), '')]",
                                        "sourcePortRanges": "[coalesce(tryGet(coalesce(parameters('securityRules'), createArray())[copyIndex('securityRules')].properties, 'sourcePortRanges'), createArray())]"
                                      }
                                    }
                                  }
                                ],
                                "flushConnection": "[parameters('flushConnection')]"
                              }
                            },
                            "networkSecurityGroup_lock": {
                              "condition": "[and(not(empty(coalesce(parameters('lock'), createObject()))), not(equals(tryGet(parameters('lock'), 'kind'), 'None')))]",
                              "type": "Microsoft.Authorization/locks",
                              "apiVersion": "2020-05-01",
                              "scope": "[format('Microsoft.Network/networkSecurityGroups/{0}', parameters('name'))]",
                              "name": "[coalesce(tryGet(parameters('lock'), 'name'), format('lock-{0}', parameters('name')))]",
                              "properties": {
                                "level": "[coalesce(tryGet(parameters('lock'), 'kind'), '')]",
                                "notes": "[if(equals(tryGet(parameters('lock'), 'kind'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot delete or modify the resource or child resources.')]"
                              },
                              "dependsOn": [
                                "networkSecurityGroup"
                              ]
                            },
                            "networkSecurityGroup_diagnosticSettings": {
                              "copy": {
                                "name": "networkSecurityGroup_diagnosticSettings",
                                "count": "[length(coalesce(parameters('diagnosticSettings'), createArray()))]"
                              },
                              "type": "Microsoft.Insights/diagnosticSettings",
                              "apiVersion": "2021-05-01-preview",
                              "scope": "[format('Microsoft.Network/networkSecurityGroups/{0}', parameters('name'))]",
                              "name": "[coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'name'), format('{0}-diagnosticSettings', parameters('name')))]",
                              "properties": {
                                "copy": [
                                  {
                                    "name": "logs",
                                    "count": "[length(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs'))))]",
                                    "input": {
                                      "categoryGroup": "[tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'categoryGroup')]",
                                      "category": "[tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'category')]",
                                      "enabled": "[coalesce(tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'enabled'), true())]"
                                    }
                                  }
                                ],
                                "storageAccountId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'storageAccountResourceId')]",
                                "workspaceId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'workspaceResourceId')]",
                                "eventHubAuthorizationRuleId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'eventHubAuthorizationRuleResourceId')]",
                                "eventHubName": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'eventHubName')]",
                                "marketplacePartnerId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'marketplacePartnerResourceId')]",
                                "logAnalyticsDestinationType": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logAnalyticsDestinationType')]"
                              },
                              "dependsOn": [
                                "networkSecurityGroup"
                              ]
                            },
                            "networkSecurityGroup_roleAssignments": {
                              "copy": {
                                "name": "networkSecurityGroup_roleAssignments",
                                "count": "[length(coalesce(variables('formattedRoleAssignments'), createArray()))]"
                              },
                              "type": "Microsoft.Authorization/roleAssignments",
                              "apiVersion": "2022-04-01",
                              "scope": "[format('Microsoft.Network/networkSecurityGroups/{0}', parameters('name'))]",
                              "name": "[coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'name'), guid(resourceId('Microsoft.Network/networkSecurityGroups', parameters('name')), coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId, coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId))]",
                              "properties": {
                                "roleDefinitionId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId]",
                                "principalId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId]",
                                "description": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'description')]",
                                "principalType": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'principalType')]",
                                "condition": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition')]",
                                "conditionVersion": "[if(not(empty(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                                "delegatedManagedIdentityResourceId": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
                              },
                              "dependsOn": [
                                "networkSecurityGroup"
                              ]
                            }
                          },
                          "outputs": {
                            "resourceGroupName": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource group the network security group was deployed into."
                              },
                              "value": "[resourceGroup().name]"
                            },
                            "resourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource ID of the network security group."
                              },
                              "value": "[resourceId('Microsoft.Network/networkSecurityGroups', parameters('name'))]"
                            },
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "The name of the network security group."
                              },
                              "value": "[parameters('name')]"
                            },
                            "location": {
                              "type": "string",
                              "metadata": {
                                "description": "The location the resource was deployed into."
                              },
                              "value": "[reference('networkSecurityGroup', '2023-11-01', 'full').location]"
                            }
                          }
                        }
                      },
                      "metadata": {
                        "description": "NSG for the private endpoint subnet."
                      }
                    },
                    {
                      "condition": "[parameters('deployAseV3')]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[take(format('nsgAse-{0}', deployment().name), 64)]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "name": {
                            "value": "[variables('resourceNames').aseNsg]"
                          },
                          "location": {
                            "value": "[parameters('location')]"
                          },
                          "tags": {
                            "value": "[parameters('tags')]"
                          },
                          "securityRules": {
                            "value": [
                              {
                                "name": "SSL_WEB_443",
                                "properties": {
                                  "direction": "Inbound",
                                  "access": "Allow",
                                  "protocol": "Tcp",
                                  "sourceAddressPrefix": "*",
                                  "sourcePortRange": "*",
                                  "destinationAddressPrefix": "*",
                                  "destinationPortRange": "443",
                                  "priority": 100
                                }
                              }
                            ]
                          },
                          "diagnosticSettings": {
                            "value": [
                              {
                                "workspaceResourceId": "[parameters('logAnalyticsWorkspaceId')]"
                              }
                            ]
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "languageVersion": "2.0",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.29.47.4906",
                              "templateHash": "32550557190395602"
                            },
                            "name": "Network Security Groups",
                            "description": "This module deploys a Network security Group (NSG).",
                            "owner": "Azure/module-maintainers"
                          },
                          "definitions": {
                            "lockType": {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Specify the name of lock."
                                  }
                                },
                                "kind": {
                                  "type": "string",
                                  "allowedValues": [
                                    "CanNotDelete",
                                    "None",
                                    "ReadOnly"
                                  ],
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Specify the type of lock."
                                  }
                                }
                              },
                              "nullable": true
                            },
                            "roleAssignmentType": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "name": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The name (as GUID) of the role assignment. If not provided, a GUID will be generated."
                                    }
                                  },
                                  "roleDefinitionIdOrName": {
                                    "type": "string",
                                    "metadata": {
                                      "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                                    }
                                  },
                                  "principalId": {
                                    "type": "string",
                                    "metadata": {
                                      "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                                    }
                                  },
                                  "principalType": {
                                    "type": "string",
                                    "allowedValues": [
                                      "Device",
                                      "ForeignGroup",
                                      "Group",
                                      "ServicePrincipal",
                                      "User"
                                    ],
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The principal type of the assigned principal ID."
                                    }
                                  },
                                  "description": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The description of the role assignment."
                                    }
                                  },
                                  "condition": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                                    }
                                  },
                                  "conditionVersion": {
                                    "type": "string",
                                    "allowedValues": [
                                      "2.0"
                                    ],
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. Version of the condition."
                                    }
                                  },
                                  "delegatedManagedIdentityResourceId": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The Resource Id of the delegated managed identity resource."
                                    }
                                  }
                                }
                              },
                              "nullable": true
                            },
                            "diagnosticSettingType": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "name": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The name of diagnostic setting."
                                    }
                                  },
                                  "logCategoriesAndGroups": {
                                    "type": "array",
                                    "items": {
                                      "type": "object",
                                      "properties": {
                                        "category": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. Name of a Diagnostic Log category for a resource type this setting is applied to. Set the specific logs to collect here."
                                          }
                                        },
                                        "categoryGroup": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. Name of a Diagnostic Log category group for a resource type this setting is applied to. Set to `allLogs` to collect all logs."
                                          }
                                        },
                                        "enabled": {
                                          "type": "bool",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. Enable or disable the category explicitly. Default is `true`."
                                          }
                                        }
                                      }
                                    },
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The name of logs that will be streamed. \"allLogs\" includes all possible logs for the resource. Set to `[]` to disable log collection."
                                    }
                                  },
                                  "logAnalyticsDestinationType": {
                                    "type": "string",
                                    "allowedValues": [
                                      "AzureDiagnostics",
                                      "Dedicated"
                                    ],
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. A string indicating whether the export to Log Analytics should use the default destination type, i.e. AzureDiagnostics, or use a destination type."
                                    }
                                  },
                                  "workspaceResourceId": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. Resource ID of the diagnostic log analytics workspace. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                                    }
                                  },
                                  "storageAccountResourceId": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. Resource ID of the diagnostic storage account. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                                    }
                                  },
                                  "eventHubAuthorizationRuleResourceId": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. Resource ID of the diagnostic event hub authorization rule for the Event Hubs namespace in which the event hub should be created or streamed to."
                                    }
                                  },
                                  "eventHubName": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. Name of the diagnostic event hub within the namespace to which logs are streamed. Without this, an event hub is created for each log category. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                                    }
                                  },
                                  "marketplacePartnerResourceId": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The full ARM resource ID of the Marketplace resource to which you would like to send Diagnostic Logs."
                                    }
                                  }
                                }
                              },
                              "nullable": true
                            },
                            "securityRulesType": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "name": {
                                    "type": "string",
                                    "metadata": {
                                      "description": "Required. The name of the security rule."
                                    }
                                  },
                                  "properties": {
                                    "type": "object",
                                    "properties": {
                                      "access": {
                                        "type": "string",
                                        "allowedValues": [
                                          "Allow",
                                          "Deny"
                                        ],
                                        "metadata": {
                                          "description": "Required. Whether network traffic is allowed or denied."
                                        }
                                      },
                                      "description": {
                                        "type": "string",
                                        "nullable": true,
                                        "metadata": {
                                          "description": "Optional. The description of the security rule."
                                        }
                                      },
                                      "destinationAddressPrefix": {
                                        "type": "string",
                                        "nullable": true,
                                        "metadata": {
                                          "description": "Optional. Optional. The destination address prefix. CIDR or destination IP range. Asterisk \"*\" can also be used to match all source IPs. Default tags such as \"VirtualNetwork\", \"AzureLoadBalancer\" and \"Internet\" can also be used."
                                        }
                                      },
                                      "destinationAddressPrefixes": {
                                        "type": "array",
                                        "items": {
                                          "type": "string"
                                        },
                                        "nullable": true,
                                        "metadata": {
                                          "description": "Optional. The destination address prefixes. CIDR or destination IP ranges."
                                        }
                                      },
                                      "destinationApplicationSecurityGroupResourceIds": {
                                        "type": "array",
                                        "items": {
                                          "type": "string"
                                        },
                                        "nullable": true,
                                        "metadata": {
                                          "description": "Optional. The resource IDs of the application security groups specified as destination."
                                        }
                                      },
                                      "destinationPortRange": {
                                        "type": "string",
                                        "nullable": true,
                                        "metadata": {
                                          "description": "Optional. The destination port or range. Integer or range between 0 and 65535. Asterisk \"*\" can also be used to match all ports."
                                        }
                                      },
                                      "destinationPortRanges": {
                                        "type": "array",
                                        "items": {
                                          "type": "string"
                                        },
                                        "nullable": true,
                                        "metadata": {
                                          "description": "Optional. The destination port ranges."
                                        }
                                      },
                                      "direction": {
                                        "type": "string",
                                        "allowedValues": [
                                          "Inbound",
                                          "Outbound"
                                        ],
                                        "metadata": {
                                          "description": "Required. The direction of the rule. The direction specifies if rule will be evaluated on incoming or outgoing traffic."
                                        }
                                      },
                                      "priority": {
                                        "type": "int",
                                        "minValue": 100,
                                        "maxValue": 4096,
                                        "metadata": {
                                          "description": "Required. Required. The priority of the rule. The value can be between 100 and 4096. The priority number must be unique for each rule in the collection. The lower the priority number, the higher the priority of the rule."
                                        }
                                      },
                                      "protocol": {
                                        "type": "string",
                                        "allowedValues": [
                                          "*",
                                          "Ah",
                                          "Esp",
                                          "Icmp",
                                          "Tcp",
                                          "Udp"
                                        ],
                                        "metadata": {
                                          "description": "Required. Network protocol this rule applies to."
                                        }
                                      },
                                      "sourceAddressPrefix": {
                                        "type": "string",
                                        "nullable": true,
                                        "metadata": {
                                          "description": "Optional. The CIDR or source IP range. Asterisk \"*\" can also be used to match all source IPs. Default tags such as \"VirtualNetwork\", \"AzureLoadBalancer\" and \"Internet\" can also be used. If this is an ingress rule, specifies where network traffic originates from."
                                        }
                                      },
                                      "sourceAddressPrefixes": {
                                        "type": "array",
                                        "items": {
                                          "type": "string"
                                        },
                                        "nullable": true,
                                        "metadata": {
                                          "description": "Optional. The CIDR or source IP ranges."
                                        }
                                      },
                                      "sourceApplicationSecurityGroupResourceIds": {
                                        "type": "array",
                                        "items": {
                                          "type": "string"
                                        },
                                        "nullable": true,
                                        "metadata": {
                                          "description": "Optional. The resource IDs of the application security groups specified as source."
                                        }
                                      },
                                      "sourcePortRange": {
                                        "type": "string",
                                        "nullable": true,
                                        "metadata": {
                                          "description": "Optional. The source port or range. Integer or range between 0 and 65535. Asterisk \"*\" can also be used to match all ports."
                                        }
                                      },
                                      "sourcePortRanges": {
                                        "type": "array",
                                        "items": {
                                          "type": "string"
                                        },
                                        "nullable": true,
                                        "metadata": {
                                          "description": "Optional. The source port ranges."
                                        }
                                      }
                                    },
                                    "metadata": {
                                      "description": "Required. The properties of the security rule."
                                    }
                                  }
                                }
                              },
                              "nullable": true
                            }
                          },
                          "parameters": {
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. Name of the Network Security Group."
                              }
                            },
                            "location": {
                              "type": "string",
                              "defaultValue": "[resourceGroup().location]",
                              "metadata": {
                                "description": "Optional. Location for all resources."
                              }
                            },
                            "securityRules": {
                              "$ref": "#/definitions/securityRulesType",
                              "metadata": {
                                "description": "Optional. Array of Security Rules to deploy to the Network Security Group. When not provided, an NSG including only the built-in roles will be deployed."
                              }
                            },
                            "flushConnection": {
                              "type": "bool",
                              "defaultValue": false,
                              "metadata": {
                                "description": "Optional. When enabled, flows created from Network Security Group connections will be re-evaluated when rules are updates. Initial enablement will trigger re-evaluation. Network Security Group connection flushing is not available in all regions."
                              }
                            },
                            "diagnosticSettings": {
                              "$ref": "#/definitions/diagnosticSettingType",
                              "metadata": {
                                "description": "Optional. The diagnostic settings of the service."
                              }
                            },
                            "lock": {
                              "$ref": "#/definitions/lockType",
                              "metadata": {
                                "description": "Optional. The lock settings of the service."
                              }
                            },
                            "roleAssignments": {
                              "$ref": "#/definitions/roleAssignmentType",
                              "metadata": {
                                "description": "Optional. Array of role assignments to create."
                              }
                            },
                            "tags": {
                              "type": "object",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Tags of the NSG resource."
                              }
                            },
                            "enableTelemetry": {
                              "type": "bool",
                              "defaultValue": true,
                              "metadata": {
                                "description": "Optional. Enable/Disable usage telemetry for module."
                              }
                            }
                          },
                          "variables": {
                            "copy": [
                              {
                                "name": "formattedRoleAssignments",
                                "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]",
                                "input": "[union(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')], createObject('roleDefinitionId', coalesce(tryGet(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName), if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName)))))]"
                              }
                            ],
                            "builtInRoleNames": {
                              "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                              "Network Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4d97b98b-1d4f-4787-a291-c67834d212e7')]",
                              "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                              "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                              "Role Based Access Control Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]",
                              "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]"
                            }
                          },
                          "resources": {
                            "avmTelemetry": {
                              "condition": "[parameters('enableTelemetry')]",
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2024-03-01",
                              "name": "[format('46d3xbcp.res.network-networksecuritygroup.{0}.{1}', replace('0.5.0', '.', '-'), substring(uniqueString(deployment().name, parameters('location')), 0, 4))]",
                              "properties": {
                                "mode": "Incremental",
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "resources": [],
                                  "outputs": {
                                    "telemetry": {
                                      "type": "String",
                                      "value": "For more information, see https://aka.ms/avm/TelemetryInfo"
                                    }
                                  }
                                }
                              }
                            },
                            "networkSecurityGroup": {
                              "type": "Microsoft.Network/networkSecurityGroups",
                              "apiVersion": "2023-11-01",
                              "name": "[parameters('name')]",
                              "location": "[parameters('location')]",
                              "tags": "[parameters('tags')]",
                              "properties": {
                                "copy": [
                                  {
                                    "name": "securityRules",
                                    "count": "[length(coalesce(parameters('securityRules'), createArray()))]",
                                    "input": {
                                      "name": "[coalesce(parameters('securityRules'), createArray())[copyIndex('securityRules')].name]",
                                      "properties": {
                                        "access": "[coalesce(parameters('securityRules'), createArray())[copyIndex('securityRules')].properties.access]",
                                        "description": "[coalesce(tryGet(coalesce(parameters('securityRules'), createArray())[copyIndex('securityRules')].properties, 'description'), '')]",
                                        "destinationAddressPrefix": "[coalesce(tryGet(coalesce(parameters('securityRules'), createArray())[copyIndex('securityRules')].properties, 'destinationAddressPrefix'), '')]",
                                        "destinationAddressPrefixes": "[coalesce(tryGet(coalesce(parameters('securityRules'), createArray())[copyIndex('securityRules')].properties, 'destinationAddressPrefixes'), createArray())]",
                                        "destinationApplicationSecurityGroups": "[map(coalesce(tryGet(coalesce(parameters('securityRules'), createArray())[copyIndex('securityRules')].properties, 'destinationApplicationSecurityGroupResourceIds'), createArray()), lambda('destinationApplicationSecurityGroupResourceId', createObject('id', lambdaVariables('destinationApplicationSecurityGroupResourceId'))))]",
                                        "destinationPortRange": "[coalesce(tryGet(coalesce(parameters('securityRules'), createArray())[copyIndex('securityRules')].properties, 'destinationPortRange'), '')]",
                                        "destinationPortRanges": "[coalesce(tryGet(coalesce(parameters('securityRules'), createArray())[copyIndex('securityRules')].properties, 'destinationPortRanges'), createArray())]",
                                        "direction": "[coalesce(parameters('securityRules'), createArray())[copyIndex('securityRules')].properties.direction]",
                                        "priority": "[coalesce(parameters('securityRules'), createArray())[copyIndex('securityRules')].properties.priority]",
                                        "protocol": "[coalesce(parameters('securityRules'), createArray())[copyIndex('securityRules')].properties.protocol]",
                                        "sourceAddressPrefix": "[coalesce(tryGet(coalesce(parameters('securityRules'), createArray())[copyIndex('securityRules')].properties, 'sourceAddressPrefix'), '')]",
                                        "sourceAddressPrefixes": "[coalesce(tryGet(coalesce(parameters('securityRules'), createArray())[copyIndex('securityRules')].properties, 'sourceAddressPrefixes'), createArray())]",
                                        "sourceApplicationSecurityGroups": "[map(coalesce(tryGet(coalesce(parameters('securityRules'), createArray())[copyIndex('securityRules')].properties, 'sourceApplicationSecurityGroupResourceIds'), createArray()), lambda('sourceApplicationSecurityGroupResourceId', createObject('id', lambdaVariables('sourceApplicationSecurityGroupResourceId'))))]",
                                        "sourcePortRange": "[coalesce(tryGet(coalesce(parameters('securityRules'), createArray())[copyIndex('securityRules')].properties, 'sourcePortRange'), '')]",
                                        "sourcePortRanges": "[coalesce(tryGet(coalesce(parameters('securityRules'), createArray())[copyIndex('securityRules')].properties, 'sourcePortRanges'), createArray())]"
                                      }
                                    }
                                  }
                                ],
                                "flushConnection": "[parameters('flushConnection')]"
                              }
                            },
                            "networkSecurityGroup_lock": {
                              "condition": "[and(not(empty(coalesce(parameters('lock'), createObject()))), not(equals(tryGet(parameters('lock'), 'kind'), 'None')))]",
                              "type": "Microsoft.Authorization/locks",
                              "apiVersion": "2020-05-01",
                              "scope": "[format('Microsoft.Network/networkSecurityGroups/{0}', parameters('name'))]",
                              "name": "[coalesce(tryGet(parameters('lock'), 'name'), format('lock-{0}', parameters('name')))]",
                              "properties": {
                                "level": "[coalesce(tryGet(parameters('lock'), 'kind'), '')]",
                                "notes": "[if(equals(tryGet(parameters('lock'), 'kind'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot delete or modify the resource or child resources.')]"
                              },
                              "dependsOn": [
                                "networkSecurityGroup"
                              ]
                            },
                            "networkSecurityGroup_diagnosticSettings": {
                              "copy": {
                                "name": "networkSecurityGroup_diagnosticSettings",
                                "count": "[length(coalesce(parameters('diagnosticSettings'), createArray()))]"
                              },
                              "type": "Microsoft.Insights/diagnosticSettings",
                              "apiVersion": "2021-05-01-preview",
                              "scope": "[format('Microsoft.Network/networkSecurityGroups/{0}', parameters('name'))]",
                              "name": "[coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'name'), format('{0}-diagnosticSettings', parameters('name')))]",
                              "properties": {
                                "copy": [
                                  {
                                    "name": "logs",
                                    "count": "[length(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs'))))]",
                                    "input": {
                                      "categoryGroup": "[tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'categoryGroup')]",
                                      "category": "[tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'category')]",
                                      "enabled": "[coalesce(tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'enabled'), true())]"
                                    }
                                  }
                                ],
                                "storageAccountId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'storageAccountResourceId')]",
                                "workspaceId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'workspaceResourceId')]",
                                "eventHubAuthorizationRuleId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'eventHubAuthorizationRuleResourceId')]",
                                "eventHubName": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'eventHubName')]",
                                "marketplacePartnerId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'marketplacePartnerResourceId')]",
                                "logAnalyticsDestinationType": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logAnalyticsDestinationType')]"
                              },
                              "dependsOn": [
                                "networkSecurityGroup"
                              ]
                            },
                            "networkSecurityGroup_roleAssignments": {
                              "copy": {
                                "name": "networkSecurityGroup_roleAssignments",
                                "count": "[length(coalesce(variables('formattedRoleAssignments'), createArray()))]"
                              },
                              "type": "Microsoft.Authorization/roleAssignments",
                              "apiVersion": "2022-04-01",
                              "scope": "[format('Microsoft.Network/networkSecurityGroups/{0}', parameters('name'))]",
                              "name": "[coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'name'), guid(resourceId('Microsoft.Network/networkSecurityGroups', parameters('name')), coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId, coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId))]",
                              "properties": {
                                "roleDefinitionId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId]",
                                "principalId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId]",
                                "description": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'description')]",
                                "principalType": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'principalType')]",
                                "condition": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition')]",
                                "conditionVersion": "[if(not(empty(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                                "delegatedManagedIdentityResourceId": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
                              },
                              "dependsOn": [
                                "networkSecurityGroup"
                              ]
                            }
                          },
                          "outputs": {
                            "resourceGroupName": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource group the network security group was deployed into."
                              },
                              "value": "[resourceGroup().name]"
                            },
                            "resourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource ID of the network security group."
                              },
                              "value": "[resourceId('Microsoft.Network/networkSecurityGroups', parameters('name'))]"
                            },
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "The name of the network security group."
                              },
                              "value": "[parameters('name')]"
                            },
                            "location": {
                              "type": "string",
                              "metadata": {
                                "description": "The location the resource was deployed into."
                              },
                              "value": "[reference('networkSecurityGroup', '2023-11-01', 'full').location]"
                            }
                          }
                        }
                      },
                      "metadata": {
                        "description": "NSG for ASE subnet"
                      }
                    }
                  ],
                  "outputs": {
                    "vnetSpokeId": {
                      "type": "string",
                      "value": "[reference(resourceId('Microsoft.Resources/deployments', 'vnetSpoke-Deployment'), '2022-09-01').outputs.resourceId.value]"
                    },
                    "vnetSpokeName": {
                      "type": "string",
                      "value": "[reference(resourceId('Microsoft.Resources/deployments', 'vnetSpoke-Deployment'), '2022-09-01').outputs.name.value]"
                    },
                    "snetAppSvcId": {
                      "type": "string",
                      "value": "[reference(resourceId('Microsoft.Resources/deployments', 'vnetSpoke-Deployment'), '2022-09-01').outputs.subnetResourceIds.value[0]]"
                    },
                    "snetPeId": {
                      "type": "string",
                      "value": "[reference(resourceId('Microsoft.Resources/deployments', 'vnetSpoke-Deployment'), '2022-09-01').outputs.subnetResourceIds.value[1]]"
                    },
                    "snetPeName": {
                      "type": "string",
                      "value": "[reference(resourceId('Microsoft.Resources/deployments', 'vnetSpoke-Deployment'), '2022-09-01').outputs.subnetNames.value[1]]"
                    }
                  }
                }
              },
              "dependsOn": [
                "logAnalyticsWs"
              ]
            },
            "logAnalyticsWs": {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "logAnalyticsWs-Deployment",
              "resourceGroup": "[parameters('resourceGroupName')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "name": {
                    "value": "[variables('resourceNames').logAnalyticsWs]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "tags": {
                    "value": "[parameters('tags')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "languageVersion": "2.0",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.30.23.60470",
                      "templateHash": "17849222501048122703"
                    },
                    "name": "Log Analytics Workspaces",
                    "description": "This module deploys a Log Analytics Workspace.",
                    "owner": "Azure/module-maintainers"
                  },
                  "definitions": {
                    "managedIdentitiesType": {
                      "type": "object",
                      "properties": {
                        "systemAssigned": {
                          "type": "bool",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Enables system assigned managed identity on the resource."
                          }
                        },
                        "userAssignedResourceIds": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The resource ID(s) to assign to the resource."
                          }
                        }
                      },
                      "nullable": true
                    },
                    "lockType": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Specify the name of lock."
                          }
                        },
                        "kind": {
                          "type": "string",
                          "allowedValues": [
                            "CanNotDelete",
                            "None",
                            "ReadOnly"
                          ],
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Specify the type of lock."
                          }
                        }
                      },
                      "nullable": true
                    },
                    "roleAssignmentType": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "name": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The name (as GUID) of the role assignment. If not provided, a GUID will be generated."
                            }
                          },
                          "roleDefinitionIdOrName": {
                            "type": "string",
                            "metadata": {
                              "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                            }
                          },
                          "principalId": {
                            "type": "string",
                            "metadata": {
                              "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                            }
                          },
                          "principalType": {
                            "type": "string",
                            "allowedValues": [
                              "Device",
                              "ForeignGroup",
                              "Group",
                              "ServicePrincipal",
                              "User"
                            ],
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The principal type of the assigned principal ID."
                            }
                          },
                          "description": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The description of the role assignment."
                            }
                          },
                          "condition": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                            }
                          },
                          "conditionVersion": {
                            "type": "string",
                            "allowedValues": [
                              "2.0"
                            ],
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. Version of the condition."
                            }
                          },
                          "delegatedManagedIdentityResourceId": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The Resource Id of the delegated managed identity resource."
                            }
                          }
                        }
                      },
                      "nullable": true
                    },
                    "diagnosticSettingType": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "name": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The name of diagnostic setting."
                            }
                          },
                          "logCategoriesAndGroups": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "category": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Name of a Diagnostic Log category for a resource type this setting is applied to. Set the specific logs to collect here."
                                  }
                                },
                                "categoryGroup": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Name of a Diagnostic Log category group for a resource type this setting is applied to. Set to `allLogs` to collect all logs."
                                  }
                                },
                                "enabled": {
                                  "type": "bool",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Enable or disable the category explicitly. Default is `true`."
                                  }
                                }
                              }
                            },
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The name of logs that will be streamed. \"allLogs\" includes all possible logs for the resource. Set to `[]` to disable log collection."
                            }
                          },
                          "metricCategories": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "category": {
                                  "type": "string",
                                  "metadata": {
                                    "description": "Required. Name of a Diagnostic Metric category for a resource type this setting is applied to. Set to `AllMetrics` to collect all metrics."
                                  }
                                },
                                "enabled": {
                                  "type": "bool",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Enable or disable the category explicitly. Default is `true`."
                                  }
                                }
                              }
                            },
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The name of metrics that will be streamed. \"allMetrics\" includes all possible metrics for the resource. Set to `[]` to disable metric collection."
                            }
                          },
                          "logAnalyticsDestinationType": {
                            "type": "string",
                            "allowedValues": [
                              "AzureDiagnostics",
                              "Dedicated"
                            ],
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. A string indicating whether the export to Log Analytics should use the default destination type, i.e. AzureDiagnostics, or use a destination type."
                            }
                          },
                          "useThisWorkspace": {
                            "type": "bool",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. Instead of using an external reference, use the deployed instance as the target for its diagnostic settings. If set to `true`, the `workspaceResourceId` property is ignored."
                            }
                          },
                          "workspaceResourceId": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. Resource ID of the diagnostic log analytics workspace. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                            }
                          },
                          "storageAccountResourceId": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. Resource ID of the diagnostic storage account. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                            }
                          },
                          "eventHubAuthorizationRuleResourceId": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. Resource ID of the diagnostic event hub authorization rule for the Event Hubs namespace in which the event hub should be created or streamed to."
                            }
                          },
                          "eventHubName": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. Name of the diagnostic event hub within the namespace to which logs are streamed. Without this, an event hub is created for each log category. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                            }
                          },
                          "marketplacePartnerResourceId": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The full ARM resource ID of the Marketplace resource to which you would like to send Diagnostic Logs."
                            }
                          }
                        }
                      },
                      "nullable": true
                    }
                  },
                  "parameters": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Name of the Log Analytics workspace."
                      }
                    },
                    "location": {
                      "type": "string",
                      "defaultValue": "[resourceGroup().location]",
                      "metadata": {
                        "description": "Optional. Location for all resources."
                      }
                    },
                    "skuName": {
                      "type": "string",
                      "defaultValue": "PerGB2018",
                      "allowedValues": [
                        "CapacityReservation",
                        "Free",
                        "LACluster",
                        "PerGB2018",
                        "PerNode",
                        "Premium",
                        "Standalone",
                        "Standard"
                      ],
                      "metadata": {
                        "description": "Optional. The name of the SKU."
                      }
                    },
                    "skuCapacityReservationLevel": {
                      "type": "int",
                      "defaultValue": 100,
                      "minValue": 100,
                      "maxValue": 5000,
                      "metadata": {
                        "description": "Optional. The capacity reservation level in GB for this workspace, when CapacityReservation sku is selected. Must be in increments of 100 between 100 and 5000."
                      }
                    },
                    "storageInsightsConfigs": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. List of storage accounts to be read by the workspace."
                      }
                    },
                    "linkedServices": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. List of services to be linked."
                      }
                    },
                    "linkedStorageAccounts": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Conditional. List of Storage Accounts to be linked. Required if 'forceCmkForQuery' is set to 'true' and 'savedSearches' is not empty."
                      }
                    },
                    "savedSearches": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. Kusto Query Language searches to save."
                      }
                    },
                    "dataExports": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. LAW data export instances to be deployed."
                      }
                    },
                    "dataSources": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. LAW data sources to configure."
                      }
                    },
                    "tables": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. LAW custom tables to be deployed."
                      }
                    },
                    "gallerySolutions": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. List of gallerySolutions to be created in the log analytics workspace."
                      }
                    },
                    "dataRetention": {
                      "type": "int",
                      "defaultValue": 365,
                      "minValue": 0,
                      "maxValue": 730,
                      "metadata": {
                        "description": "Optional. Number of days data will be retained for."
                      }
                    },
                    "dailyQuotaGb": {
                      "type": "int",
                      "defaultValue": -1,
                      "minValue": -1,
                      "metadata": {
                        "description": "Optional. The workspace daily quota for ingestion."
                      }
                    },
                    "publicNetworkAccessForIngestion": {
                      "type": "string",
                      "defaultValue": "Enabled",
                      "allowedValues": [
                        "Enabled",
                        "Disabled"
                      ],
                      "metadata": {
                        "description": "Optional. The network access type for accessing Log Analytics ingestion."
                      }
                    },
                    "publicNetworkAccessForQuery": {
                      "type": "string",
                      "defaultValue": "Enabled",
                      "allowedValues": [
                        "Enabled",
                        "Disabled"
                      ],
                      "metadata": {
                        "description": "Optional. The network access type for accessing Log Analytics query."
                      }
                    },
                    "managedIdentities": {
                      "$ref": "#/definitions/managedIdentitiesType",
                      "metadata": {
                        "description": "Optional. The managed identity definition for this resource. Only one type of identity is supported: system-assigned or user-assigned, but not both."
                      }
                    },
                    "useResourcePermissions": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "Optional. Set to 'true' to use resource or workspace permissions and 'false' (or leave empty) to require workspace permissions."
                      }
                    },
                    "diagnosticSettings": {
                      "$ref": "#/definitions/diagnosticSettingType",
                      "metadata": {
                        "description": "Optional. The diagnostic settings of the service."
                      }
                    },
                    "forceCmkForQuery": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "Optional. Indicates whether customer managed storage is mandatory for query management."
                      }
                    },
                    "lock": {
                      "$ref": "#/definitions/lockType",
                      "metadata": {
                        "description": "Optional. The lock settings of the service."
                      }
                    },
                    "roleAssignments": {
                      "$ref": "#/definitions/roleAssignmentType",
                      "metadata": {
                        "description": "Optional. Array of role assignments to create."
                      }
                    },
                    "tags": {
                      "type": "object",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Tags of the resource."
                      }
                    },
                    "enableTelemetry": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "Optional. Enable/Disable usage telemetry for module."
                      }
                    }
                  },
                  "variables": {
                    "copy": [
                      {
                        "name": "formattedRoleAssignments",
                        "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]",
                        "input": "[union(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')], createObject('roleDefinitionId', coalesce(tryGet(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName), if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName)))))]"
                      }
                    ],
                    "formattedUserAssignedIdentities": "[reduce(map(coalesce(tryGet(parameters('managedIdentities'), 'userAssignedResourceIds'), createArray()), lambda('id', createObject(format('{0}', lambdaVariables('id')), createObject()))), createObject(), lambda('cur', 'next', union(lambdaVariables('cur'), lambdaVariables('next'))))]",
                    "identity": "[if(not(empty(parameters('managedIdentities'))), createObject('type', if(coalesce(tryGet(parameters('managedIdentities'), 'systemAssigned'), false()), 'SystemAssigned', if(not(empty(coalesce(tryGet(parameters('managedIdentities'), 'userAssignedResourceIds'), createObject()))), 'UserAssigned', 'None')), 'userAssignedIdentities', if(not(empty(variables('formattedUserAssignedIdentities'))), variables('formattedUserAssignedIdentities'), null())), null())]",
                    "builtInRoleNames": {
                      "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                      "Log Analytics Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '92aaf0da-9dab-42b6-94a3-d43ce8d16293')]",
                      "Log Analytics Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '73c42c96-874c-492b-b04d-ab87d138a893')]",
                      "Monitoring Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '749f88d5-cbae-40b8-bcfc-e573ddc772fa')]",
                      "Monitoring Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '43d0d8ad-25c7-4714-9337-8ba259a9fe05')]",
                      "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                      "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                      "Role Based Access Control Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]",
                      "Security Admin": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'fb1c8493-542b-48eb-b624-b4c8fea62acd')]",
                      "Security Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '39bc4728-0917-49c7-9d2c-d95423bc2eb4')]",
                      "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]"
                    }
                  },
                  "resources": {
                    "avmTelemetry": {
                      "condition": "[parameters('enableTelemetry')]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2024-03-01",
                      "name": "[format('46d3xbcp.res.operationalinsights-workspace.{0}.{1}', replace('0.7.1', '.', '-'), substring(uniqueString(deployment().name, parameters('location')), 0, 4))]",
                      "properties": {
                        "mode": "Incremental",
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "resources": [],
                          "outputs": {
                            "telemetry": {
                              "type": "String",
                              "value": "For more information, see https://aka.ms/avm/TelemetryInfo"
                            }
                          }
                        }
                      }
                    },
                    "logAnalyticsWorkspace": {
                      "type": "Microsoft.OperationalInsights/workspaces",
                      "apiVersion": "2022-10-01",
                      "name": "[parameters('name')]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]",
                      "properties": {
                        "features": {
                          "searchVersion": 1,
                          "enableLogAccessUsingOnlyResourcePermissions": "[parameters('useResourcePermissions')]"
                        },
                        "sku": {
                          "name": "[parameters('skuName')]",
                          "capacityReservationLevel": "[if(equals(parameters('skuName'), 'CapacityReservation'), parameters('skuCapacityReservationLevel'), null())]"
                        },
                        "retentionInDays": "[parameters('dataRetention')]",
                        "workspaceCapping": {
                          "dailyQuotaGb": "[parameters('dailyQuotaGb')]"
                        },
                        "publicNetworkAccessForIngestion": "[parameters('publicNetworkAccessForIngestion')]",
                        "publicNetworkAccessForQuery": "[parameters('publicNetworkAccessForQuery')]",
                        "forceCmkForQuery": "[parameters('forceCmkForQuery')]"
                      },
                      "identity": "[variables('identity')]"
                    },
                    "logAnalyticsWorkspace_diagnosticSettings": {
                      "copy": {
                        "name": "logAnalyticsWorkspace_diagnosticSettings",
                        "count": "[length(coalesce(parameters('diagnosticSettings'), createArray()))]"
                      },
                      "type": "Microsoft.Insights/diagnosticSettings",
                      "apiVersion": "2021-05-01-preview",
                      "scope": "[format('Microsoft.OperationalInsights/workspaces/{0}', parameters('name'))]",
                      "name": "[coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'name'), format('{0}-diagnosticSettings', parameters('name')))]",
                      "properties": {
                        "copy": [
                          {
                            "name": "metrics",
                            "count": "[length(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics'))))]",
                            "input": {
                              "category": "[coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics')))[copyIndex('metrics')].category]",
                              "enabled": "[coalesce(tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics')))[copyIndex('metrics')], 'enabled'), true())]",
                              "timeGrain": null
                            }
                          },
                          {
                            "name": "logs",
                            "count": "[length(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs'))))]",
                            "input": {
                              "categoryGroup": "[tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'categoryGroup')]",
                              "category": "[tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'category')]",
                              "enabled": "[coalesce(tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'enabled'), true())]"
                            }
                          }
                        ],
                        "storageAccountId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'storageAccountResourceId')]",
                        "workspaceId": "[if(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'useThisWorkspace'), false()), resourceId('Microsoft.OperationalInsights/workspaces', parameters('name')), tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'workspaceResourceId'))]",
                        "eventHubAuthorizationRuleId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'eventHubAuthorizationRuleResourceId')]",
                        "eventHubName": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'eventHubName')]",
                        "marketplacePartnerId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'marketplacePartnerResourceId')]",
                        "logAnalyticsDestinationType": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logAnalyticsDestinationType')]"
                      },
                      "dependsOn": [
                        "logAnalyticsWorkspace"
                      ]
                    },
                    "logAnalyticsWorkspace_lock": {
                      "condition": "[and(not(empty(coalesce(parameters('lock'), createObject()))), not(equals(tryGet(parameters('lock'), 'kind'), 'None')))]",
                      "type": "Microsoft.Authorization/locks",
                      "apiVersion": "2020-05-01",
                      "scope": "[format('Microsoft.OperationalInsights/workspaces/{0}', parameters('name'))]",
                      "name": "[coalesce(tryGet(parameters('lock'), 'name'), format('lock-{0}', parameters('name')))]",
                      "properties": {
                        "level": "[coalesce(tryGet(parameters('lock'), 'kind'), '')]",
                        "notes": "[if(equals(tryGet(parameters('lock'), 'kind'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot delete or modify the resource or child resources.')]"
                      },
                      "dependsOn": [
                        "logAnalyticsWorkspace"
                      ]
                    },
                    "logAnalyticsWorkspace_roleAssignments": {
                      "copy": {
                        "name": "logAnalyticsWorkspace_roleAssignments",
                        "count": "[length(coalesce(variables('formattedRoleAssignments'), createArray()))]"
                      },
                      "type": "Microsoft.Authorization/roleAssignments",
                      "apiVersion": "2022-04-01",
                      "scope": "[format('Microsoft.OperationalInsights/workspaces/{0}', parameters('name'))]",
                      "name": "[coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'name'), guid(resourceId('Microsoft.OperationalInsights/workspaces', parameters('name')), coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId, coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId))]",
                      "properties": {
                        "roleDefinitionId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId]",
                        "principalId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId]",
                        "description": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'description')]",
                        "principalType": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'principalType')]",
                        "condition": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition')]",
                        "conditionVersion": "[if(not(empty(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                        "delegatedManagedIdentityResourceId": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
                      },
                      "dependsOn": [
                        "logAnalyticsWorkspace"
                      ]
                    },
                    "logAnalyticsWorkspace_storageInsightConfigs": {
                      "copy": {
                        "name": "logAnalyticsWorkspace_storageInsightConfigs",
                        "count": "[length(parameters('storageInsightsConfigs'))]"
                      },
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('{0}-LAW-StorageInsightsConfig-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "logAnalyticsWorkspaceName": {
                            "value": "[parameters('name')]"
                          },
                          "containers": {
                            "value": "[tryGet(parameters('storageInsightsConfigs')[copyIndex()], 'containers')]"
                          },
                          "tables": {
                            "value": "[tryGet(parameters('storageInsightsConfigs')[copyIndex()], 'tables')]"
                          },
                          "storageAccountResourceId": {
                            "value": "[parameters('storageInsightsConfigs')[copyIndex()].storageAccountResourceId]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "languageVersion": "2.0",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.30.23.60470",
                              "templateHash": "8028201980853199520"
                            },
                            "name": "Log Analytics Workspace Storage Insight Configs",
                            "description": "This module deploys a Log Analytics Workspace Storage Insight Config.",
                            "owner": "Azure/module-maintainers"
                          },
                          "parameters": {
                            "logAnalyticsWorkspaceName": {
                              "type": "string",
                              "metadata": {
                                "description": "Conditional. The name of the parent Log Analytics workspace. Required if the template is used in a standalone deployment."
                              }
                            },
                            "name": {
                              "type": "string",
                              "defaultValue": "[format('{0}-stinsconfig', last(split(parameters('storageAccountResourceId'), '/')))]",
                              "metadata": {
                                "description": "Optional. The name of the storage insights config."
                              }
                            },
                            "storageAccountResourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The Azure Resource Manager ID of the storage account resource."
                              }
                            },
                            "containers": {
                              "type": "array",
                              "defaultValue": [],
                              "metadata": {
                                "description": "Optional. The names of the blob containers that the workspace should read."
                              }
                            },
                            "tables": {
                              "type": "array",
                              "defaultValue": [],
                              "metadata": {
                                "description": "Optional. The names of the Azure tables that the workspace should read."
                              }
                            },
                            "tags": {
                              "type": "object",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Tags to configure in the resource."
                              }
                            }
                          },
                          "resources": {
                            "storageAccount": {
                              "existing": true,
                              "type": "Microsoft.Storage/storageAccounts",
                              "apiVersion": "2022-09-01",
                              "name": "[last(split(parameters('storageAccountResourceId'), '/'))]"
                            },
                            "workspace": {
                              "existing": true,
                              "type": "Microsoft.OperationalInsights/workspaces",
                              "apiVersion": "2022-10-01",
                              "name": "[parameters('logAnalyticsWorkspaceName')]"
                            },
                            "storageinsightconfig": {
                              "type": "Microsoft.OperationalInsights/workspaces/storageInsightConfigs",
                              "apiVersion": "2020-08-01",
                              "name": "[format('{0}/{1}', parameters('logAnalyticsWorkspaceName'), parameters('name'))]",
                              "tags": "[parameters('tags')]",
                              "properties": {
                                "containers": "[parameters('containers')]",
                                "tables": "[parameters('tables')]",
                                "storageAccount": {
                                  "id": "[parameters('storageAccountResourceId')]",
                                  "key": "[listKeys(resourceId('Microsoft.Storage/storageAccounts', last(split(parameters('storageAccountResourceId'), '/'))), '2022-09-01').keys[0].value]"
                                }
                              },
                              "dependsOn": [
                                "storageAccount",
                                "workspace"
                              ]
                            }
                          },
                          "outputs": {
                            "resourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource ID of the deployed storage insights configuration."
                              },
                              "value": "[resourceId('Microsoft.OperationalInsights/workspaces/storageInsightConfigs', parameters('logAnalyticsWorkspaceName'), parameters('name'))]"
                            },
                            "resourceGroupName": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource group where the storage insight configuration is deployed."
                              },
                              "value": "[resourceGroup().name]"
                            },
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "The name of the storage insights configuration."
                              },
                              "value": "[parameters('name')]"
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "logAnalyticsWorkspace"
                      ]
                    },
                    "logAnalyticsWorkspace_linkedServices": {
                      "copy": {
                        "name": "logAnalyticsWorkspace_linkedServices",
                        "count": "[length(parameters('linkedServices'))]"
                      },
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('{0}-LAW-LinkedService-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "logAnalyticsWorkspaceName": {
                            "value": "[parameters('name')]"
                          },
                          "name": {
                            "value": "[parameters('linkedServices')[copyIndex()].name]"
                          },
                          "resourceId": {
                            "value": "[tryGet(parameters('linkedServices')[copyIndex()], 'resourceId')]"
                          },
                          "writeAccessResourceId": {
                            "value": "[tryGet(parameters('linkedServices')[copyIndex()], 'writeAccessResourceId')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "languageVersion": "2.0",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.30.23.60470",
                              "templateHash": "1524032160953098939"
                            },
                            "name": "Log Analytics Workspace Linked Services",
                            "description": "This module deploys a Log Analytics Workspace Linked Service.",
                            "owner": "Azure/module-maintainers"
                          },
                          "parameters": {
                            "logAnalyticsWorkspaceName": {
                              "type": "string",
                              "metadata": {
                                "description": "Conditional. The name of the parent Log Analytics workspace. Required if the template is used in a standalone deployment."
                              }
                            },
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. Name of the link."
                              }
                            },
                            "resourceId": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. The resource ID of the resource that will be linked to the workspace. This should be used for linking resources which require read access."
                              }
                            },
                            "writeAccessResourceId": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. The resource ID of the resource that will be linked to the workspace. This should be used for linking resources which require write access."
                              }
                            },
                            "tags": {
                              "type": "object",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Tags to configure in the resource."
                              }
                            }
                          },
                          "resources": {
                            "workspace": {
                              "existing": true,
                              "type": "Microsoft.OperationalInsights/workspaces",
                              "apiVersion": "2022-10-01",
                              "name": "[parameters('logAnalyticsWorkspaceName')]"
                            },
                            "linkedService": {
                              "type": "Microsoft.OperationalInsights/workspaces/linkedServices",
                              "apiVersion": "2020-08-01",
                              "name": "[format('{0}/{1}', parameters('logAnalyticsWorkspaceName'), parameters('name'))]",
                              "tags": "[parameters('tags')]",
                              "properties": {
                                "resourceId": "[parameters('resourceId')]",
                                "writeAccessResourceId": "[if(empty(parameters('writeAccessResourceId')), null(), parameters('writeAccessResourceId'))]"
                              },
                              "dependsOn": [
                                "workspace"
                              ]
                            }
                          },
                          "outputs": {
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "The name of the deployed linked service."
                              },
                              "value": "[parameters('name')]"
                            },
                            "resourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource ID of the deployed linked service."
                              },
                              "value": "[resourceId('Microsoft.OperationalInsights/workspaces/linkedServices', parameters('logAnalyticsWorkspaceName'), parameters('name'))]"
                            },
                            "resourceGroupName": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource group where the linked service is deployed."
                              },
                              "value": "[resourceGroup().name]"
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "logAnalyticsWorkspace"
                      ]
                    },
                    "logAnalyticsWorkspace_linkedStorageAccounts": {
                      "copy": {
                        "name": "logAnalyticsWorkspace_linkedStorageAccounts",
                        "count": "[length(parameters('linkedStorageAccounts'))]"
                      },
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('{0}-LAW-LinkedStorageAccount-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "logAnalyticsWorkspaceName": {
                            "value": "[parameters('name')]"
                          },
                          "name": {
                            "value": "[parameters('linkedStorageAccounts')[copyIndex()].name]"
                          },
                          "resourceId": {
                            "value": "[parameters('linkedStorageAccounts')[copyIndex()].resourceId]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.30.23.60470",
                              "templateHash": "16040380910189891293"
                            },
                            "name": "Log Analytics Workspace Linked Storage Accounts",
                            "description": "This module deploys a Log Analytics Workspace Linked Storage Account.",
                            "owner": "Azure/module-maintainers"
                          },
                          "parameters": {
                            "logAnalyticsWorkspaceName": {
                              "type": "string",
                              "metadata": {
                                "description": "Conditional. The name of the parent Log Analytics workspace. Required if the template is used in a standalone deployment."
                              }
                            },
                            "name": {
                              "type": "string",
                              "allowedValues": [
                                "Query",
                                "Alerts",
                                "CustomLogs",
                                "AzureWatson"
                              ],
                              "metadata": {
                                "description": "Required. Name of the link."
                              }
                            },
                            "resourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The resource ID of the resource that will be linked to the workspace. This should be used for linking resources which require read access."
                              }
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.OperationalInsights/workspaces/linkedStorageAccounts",
                              "apiVersion": "2020-08-01",
                              "name": "[format('{0}/{1}', parameters('logAnalyticsWorkspaceName'), parameters('name'))]",
                              "properties": {
                                "storageAccountIds": [
                                  "[parameters('resourceId')]"
                                ]
                              }
                            }
                          ],
                          "outputs": {
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "The name of the deployed linked storage account."
                              },
                              "value": "[parameters('name')]"
                            },
                            "resourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource ID of the deployed linked storage account."
                              },
                              "value": "[resourceId('Microsoft.OperationalInsights/workspaces/linkedStorageAccounts', parameters('logAnalyticsWorkspaceName'), parameters('name'))]"
                            },
                            "resourceGroupName": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource group where the linked storage account is deployed."
                              },
                              "value": "[resourceGroup().name]"
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "logAnalyticsWorkspace"
                      ]
                    },
                    "logAnalyticsWorkspace_savedSearches": {
                      "copy": {
                        "name": "logAnalyticsWorkspace_savedSearches",
                        "count": "[length(parameters('savedSearches'))]"
                      },
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('{0}-LAW-SavedSearch-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "logAnalyticsWorkspaceName": {
                            "value": "[parameters('name')]"
                          },
                          "name": {
                            "value": "[format('{0}{1}', parameters('savedSearches')[copyIndex()].name, uniqueString(deployment().name))]"
                          },
                          "etag": {
                            "value": "[tryGet(parameters('savedSearches')[copyIndex()], 'etag')]"
                          },
                          "displayName": {
                            "value": "[parameters('savedSearches')[copyIndex()].displayName]"
                          },
                          "category": {
                            "value": "[parameters('savedSearches')[copyIndex()].category]"
                          },
                          "query": {
                            "value": "[parameters('savedSearches')[copyIndex()].query]"
                          },
                          "functionAlias": {
                            "value": "[tryGet(parameters('savedSearches')[copyIndex()], 'functionAlias')]"
                          },
                          "functionParameters": {
                            "value": "[tryGet(parameters('savedSearches')[copyIndex()], 'functionParameters')]"
                          },
                          "version": {
                            "value": "[tryGet(parameters('savedSearches')[copyIndex()], 'version')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "languageVersion": "2.0",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.30.23.60470",
                              "templateHash": "7572266675487147820"
                            },
                            "name": "Log Analytics Workspace Saved Searches",
                            "description": "This module deploys a Log Analytics Workspace Saved Search.",
                            "owner": "Azure/module-maintainers"
                          },
                          "parameters": {
                            "logAnalyticsWorkspaceName": {
                              "type": "string",
                              "metadata": {
                                "description": "Conditional. The name of the parent Log Analytics workspace. Required if the template is used in a standalone deployment."
                              }
                            },
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. Name of the saved search."
                              }
                            },
                            "displayName": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. Display name for the search."
                              }
                            },
                            "category": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. Query category."
                              }
                            },
                            "query": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. Kusto Query to be stored."
                              }
                            },
                            "tags": {
                              "type": "array",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Tags to configure in the resource."
                              }
                            },
                            "functionAlias": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. The function alias if query serves as a function."
                              }
                            },
                            "functionParameters": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. The optional function parameters if query serves as a function. Value should be in the following format: \"param-name1:type1 = default_value1, param-name2:type2 = default_value2\". For more examples and proper syntax please refer to /azure/kusto/query/functions/user-defined-functions."
                              }
                            },
                            "version": {
                              "type": "int",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. The version number of the query language."
                              }
                            },
                            "etag": {
                              "type": "string",
                              "defaultValue": "*",
                              "metadata": {
                                "description": "Optional. The ETag of the saved search. To override an existing saved search, use \"*\" or specify the current Etag."
                              }
                            }
                          },
                          "resources": {
                            "workspace": {
                              "existing": true,
                              "type": "Microsoft.OperationalInsights/workspaces",
                              "apiVersion": "2022-10-01",
                              "name": "[parameters('logAnalyticsWorkspaceName')]"
                            },
                            "savedSearch": {
                              "type": "Microsoft.OperationalInsights/workspaces/savedSearches",
                              "apiVersion": "2020-08-01",
                              "name": "[format('{0}/{1}', parameters('logAnalyticsWorkspaceName'), parameters('name'))]",
                              "properties": {
                                "etag": "[parameters('etag')]",
                                "tags": "[coalesce(parameters('tags'), createArray())]",
                                "displayName": "[parameters('displayName')]",
                                "category": "[parameters('category')]",
                                "query": "[parameters('query')]",
                                "functionAlias": "[parameters('functionAlias')]",
                                "functionParameters": "[parameters('functionParameters')]",
                                "version": "[parameters('version')]"
                              },
                              "dependsOn": [
                                "workspace"
                              ]
                            }
                          },
                          "outputs": {
                            "resourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource ID of the deployed saved search."
                              },
                              "value": "[resourceId('Microsoft.OperationalInsights/workspaces/savedSearches', parameters('logAnalyticsWorkspaceName'), parameters('name'))]"
                            },
                            "resourceGroupName": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource group where the saved search is deployed."
                              },
                              "value": "[resourceGroup().name]"
                            },
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "The name of the deployed saved search."
                              },
                              "value": "[parameters('name')]"
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "logAnalyticsWorkspace",
                        "logAnalyticsWorkspace_linkedStorageAccounts"
                      ]
                    },
                    "logAnalyticsWorkspace_dataExports": {
                      "copy": {
                        "name": "logAnalyticsWorkspace_dataExports",
                        "count": "[length(parameters('dataExports'))]"
                      },
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('{0}-LAW-DataExport-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "workspaceName": {
                            "value": "[parameters('name')]"
                          },
                          "name": {
                            "value": "[parameters('dataExports')[copyIndex()].name]"
                          },
                          "destination": {
                            "value": "[tryGet(parameters('dataExports')[copyIndex()], 'destination')]"
                          },
                          "enable": {
                            "value": "[tryGet(parameters('dataExports')[copyIndex()], 'enable')]"
                          },
                          "tableNames": {
                            "value": "[tryGet(parameters('dataExports')[copyIndex()], 'tableNames')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.30.23.60470",
                              "templateHash": "8816832199581598050"
                            },
                            "name": "Log Analytics Workspace Data Exports",
                            "description": "This module deploys a Log Analytics Workspace Data Export.",
                            "owner": "Azure/module-maintainers"
                          },
                          "parameters": {
                            "name": {
                              "type": "string",
                              "minLength": 4,
                              "maxLength": 63,
                              "metadata": {
                                "description": "Required. The data export rule name."
                              }
                            },
                            "workspaceName": {
                              "type": "string",
                              "metadata": {
                                "description": "Conditional. The name of the parent workspaces. Required if the template is used in a standalone deployment."
                              }
                            },
                            "destination": {
                              "type": "object",
                              "defaultValue": {},
                              "metadata": {
                                "description": "Optional. Destination properties."
                              }
                            },
                            "enable": {
                              "type": "bool",
                              "defaultValue": false,
                              "metadata": {
                                "description": "Optional. Active when enabled."
                              }
                            },
                            "tableNames": {
                              "type": "array",
                              "defaultValue": [],
                              "metadata": {
                                "description": "Optional. An array of tables to export, for example: ['Heartbeat', 'SecurityEvent']."
                              }
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.OperationalInsights/workspaces/dataExports",
                              "apiVersion": "2020-08-01",
                              "name": "[format('{0}/{1}', parameters('workspaceName'), parameters('name'))]",
                              "properties": {
                                "destination": "[parameters('destination')]",
                                "enable": "[parameters('enable')]",
                                "tableNames": "[parameters('tableNames')]"
                              }
                            }
                          ],
                          "outputs": {
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "The name of the data export."
                              },
                              "value": "[parameters('name')]"
                            },
                            "resourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource ID of the data export."
                              },
                              "value": "[resourceId('Microsoft.OperationalInsights/workspaces/dataExports', parameters('workspaceName'), parameters('name'))]"
                            },
                            "resourceGroupName": {
                              "type": "string",
                              "metadata": {
                                "description": "The name of the resource group the data export was created in."
                              },
                              "value": "[resourceGroup().name]"
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "logAnalyticsWorkspace"
                      ]
                    },
                    "logAnalyticsWorkspace_dataSources": {
                      "copy": {
                        "name": "logAnalyticsWorkspace_dataSources",
                        "count": "[length(parameters('dataSources'))]"
                      },
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('{0}-LAW-DataSource-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "logAnalyticsWorkspaceName": {
                            "value": "[parameters('name')]"
                          },
                          "name": {
                            "value": "[parameters('dataSources')[copyIndex()].name]"
                          },
                          "kind": {
                            "value": "[parameters('dataSources')[copyIndex()].kind]"
                          },
                          "linkedResourceId": {
                            "value": "[tryGet(parameters('dataSources')[copyIndex()], 'linkedResourceId')]"
                          },
                          "eventLogName": {
                            "value": "[tryGet(parameters('dataSources')[copyIndex()], 'eventLogName')]"
                          },
                          "eventTypes": {
                            "value": "[tryGet(parameters('dataSources')[copyIndex()], 'eventTypes')]"
                          },
                          "objectName": {
                            "value": "[tryGet(parameters('dataSources')[copyIndex()], 'objectName')]"
                          },
                          "instanceName": {
                            "value": "[tryGet(parameters('dataSources')[copyIndex()], 'instanceName')]"
                          },
                          "intervalSeconds": {
                            "value": "[tryGet(parameters('dataSources')[copyIndex()], 'intervalSeconds')]"
                          },
                          "counterName": {
                            "value": "[tryGet(parameters('dataSources')[copyIndex()], 'counterName')]"
                          },
                          "state": {
                            "value": "[tryGet(parameters('dataSources')[copyIndex()], 'state')]"
                          },
                          "syslogName": {
                            "value": "[tryGet(parameters('dataSources')[copyIndex()], 'syslogName')]"
                          },
                          "syslogSeverities": {
                            "value": "[tryGet(parameters('dataSources')[copyIndex()], 'syslogSeverities')]"
                          },
                          "performanceCounters": {
                            "value": "[tryGet(parameters('dataSources')[copyIndex()], 'performanceCounters')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "languageVersion": "2.0",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.30.23.60470",
                              "templateHash": "10275938611959517944"
                            },
                            "name": "Log Analytics Workspace Datasources",
                            "description": "This module deploys a Log Analytics Workspace Data Source.",
                            "owner": "Azure/module-maintainers"
                          },
                          "parameters": {
                            "logAnalyticsWorkspaceName": {
                              "type": "string",
                              "metadata": {
                                "description": "Conditional. The name of the parent Log Analytics workspace. Required if the template is used in a standalone deployment."
                              }
                            },
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. Name of the solution."
                              }
                            },
                            "kind": {
                              "type": "string",
                              "defaultValue": "AzureActivityLog",
                              "allowedValues": [
                                "AzureActivityLog",
                                "WindowsEvent",
                                "WindowsPerformanceCounter",
                                "IISLogs",
                                "LinuxSyslog",
                                "LinuxSyslogCollection",
                                "LinuxPerformanceObject",
                                "LinuxPerformanceCollection"
                              ],
                              "metadata": {
                                "description": "Optional. The kind of the DataSource."
                              }
                            },
                            "tags": {
                              "type": "object",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Tags to configure in the resource."
                              }
                            },
                            "linkedResourceId": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. Resource ID of the resource to be linked."
                              }
                            },
                            "eventLogName": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. Windows event log name to configure when kind is WindowsEvent."
                              }
                            },
                            "eventTypes": {
                              "type": "array",
                              "defaultValue": [],
                              "metadata": {
                                "description": "Optional. Windows event types to configure when kind is WindowsEvent."
                              }
                            },
                            "objectName": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. Name of the object to configure when kind is WindowsPerformanceCounter or LinuxPerformanceObject."
                              }
                            },
                            "instanceName": {
                              "type": "string",
                              "defaultValue": "*",
                              "metadata": {
                                "description": "Optional. Name of the instance to configure when kind is WindowsPerformanceCounter or LinuxPerformanceObject."
                              }
                            },
                            "intervalSeconds": {
                              "type": "int",
                              "defaultValue": 60,
                              "metadata": {
                                "description": "Optional. Interval in seconds to configure when kind is WindowsPerformanceCounter or LinuxPerformanceObject."
                              }
                            },
                            "performanceCounters": {
                              "type": "array",
                              "defaultValue": [],
                              "metadata": {
                                "description": "Optional. List of counters to configure when the kind is LinuxPerformanceObject."
                              }
                            },
                            "counterName": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. Counter name to configure when kind is WindowsPerformanceCounter."
                              }
                            },
                            "state": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. State to configure when kind is IISLogs or LinuxSyslogCollection or LinuxPerformanceCollection."
                              }
                            },
                            "syslogName": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. System log to configure when kind is LinuxSyslog."
                              }
                            },
                            "syslogSeverities": {
                              "type": "array",
                              "defaultValue": [],
                              "metadata": {
                                "description": "Optional. Severities to configure when kind is LinuxSyslog."
                              }
                            }
                          },
                          "resources": {
                            "workspace": {
                              "existing": true,
                              "type": "Microsoft.OperationalInsights/workspaces",
                              "apiVersion": "2022-10-01",
                              "name": "[parameters('logAnalyticsWorkspaceName')]"
                            },
                            "dataSource": {
                              "type": "Microsoft.OperationalInsights/workspaces/dataSources",
                              "apiVersion": "2020-08-01",
                              "name": "[format('{0}/{1}', parameters('logAnalyticsWorkspaceName'), parameters('name'))]",
                              "kind": "[parameters('kind')]",
                              "tags": "[parameters('tags')]",
                              "properties": {
                                "linkedResourceId": "[if(and(not(empty(parameters('kind'))), equals(parameters('kind'), 'AzureActivityLog')), parameters('linkedResourceId'), null())]",
                                "eventLogName": "[if(and(not(empty(parameters('kind'))), equals(parameters('kind'), 'WindowsEvent')), parameters('eventLogName'), null())]",
                                "eventTypes": "[if(and(not(empty(parameters('kind'))), equals(parameters('kind'), 'WindowsEvent')), parameters('eventTypes'), null())]",
                                "objectName": "[if(and(not(empty(parameters('kind'))), or(equals(parameters('kind'), 'WindowsPerformanceCounter'), equals(parameters('kind'), 'LinuxPerformanceObject'))), parameters('objectName'), null())]",
                                "instanceName": "[if(and(not(empty(parameters('kind'))), or(equals(parameters('kind'), 'WindowsPerformanceCounter'), equals(parameters('kind'), 'LinuxPerformanceObject'))), parameters('instanceName'), null())]",
                                "intervalSeconds": "[if(and(not(empty(parameters('kind'))), or(equals(parameters('kind'), 'WindowsPerformanceCounter'), equals(parameters('kind'), 'LinuxPerformanceObject'))), parameters('intervalSeconds'), null())]",
                                "counterName": "[if(and(not(empty(parameters('kind'))), equals(parameters('kind'), 'WindowsPerformanceCounter')), parameters('counterName'), null())]",
                                "state": "[if(and(not(empty(parameters('kind'))), or(or(equals(parameters('kind'), 'IISLogs'), equals(parameters('kind'), 'LinuxSyslogCollection')), equals(parameters('kind'), 'LinuxPerformanceCollection'))), parameters('state'), null())]",
                                "syslogName": "[if(and(not(empty(parameters('kind'))), equals(parameters('kind'), 'LinuxSyslog')), parameters('syslogName'), null())]",
                                "syslogSeverities": "[if(and(not(empty(parameters('kind'))), or(equals(parameters('kind'), 'LinuxSyslog'), equals(parameters('kind'), 'LinuxPerformanceObject'))), parameters('syslogSeverities'), null())]",
                                "performanceCounters": "[if(and(not(empty(parameters('kind'))), equals(parameters('kind'), 'LinuxPerformanceObject')), parameters('performanceCounters'), null())]"
                              },
                              "dependsOn": [
                                "workspace"
                              ]
                            }
                          },
                          "outputs": {
                            "resourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource ID of the deployed data source."
                              },
                              "value": "[resourceId('Microsoft.OperationalInsights/workspaces/dataSources', parameters('logAnalyticsWorkspaceName'), parameters('name'))]"
                            },
                            "resourceGroupName": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource group where the data source is deployed."
                              },
                              "value": "[resourceGroup().name]"
                            },
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "The name of the deployed data source."
                              },
                              "value": "[parameters('name')]"
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "logAnalyticsWorkspace"
                      ]
                    },
                    "logAnalyticsWorkspace_tables": {
                      "copy": {
                        "name": "logAnalyticsWorkspace_tables",
                        "count": "[length(parameters('tables'))]"
                      },
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('{0}-LAW-Table-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "workspaceName": {
                            "value": "[parameters('name')]"
                          },
                          "name": {
                            "value": "[parameters('tables')[copyIndex()].name]"
                          },
                          "plan": {
                            "value": "[tryGet(parameters('tables')[copyIndex()], 'plan')]"
                          },
                          "schema": {
                            "value": "[tryGet(parameters('tables')[copyIndex()], 'schema')]"
                          },
                          "retentionInDays": {
                            "value": "[tryGet(parameters('tables')[copyIndex()], 'retentionInDays')]"
                          },
                          "totalRetentionInDays": {
                            "value": "[tryGet(parameters('tables')[copyIndex()], 'totalRetentionInDays')]"
                          },
                          "restoredLogs": {
                            "value": "[tryGet(parameters('tables')[copyIndex()], 'restoredLogs')]"
                          },
                          "searchResults": {
                            "value": "[tryGet(parameters('tables')[copyIndex()], 'searchResults')]"
                          },
                          "roleAssignments": {
                            "value": "[tryGet(parameters('tables')[copyIndex()], 'roleAssignments')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "languageVersion": "2.0",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.30.23.60470",
                              "templateHash": "2417830359794202602"
                            },
                            "name": "Log Analytics Workspace Tables",
                            "description": "This module deploys a Log Analytics Workspace Table.",
                            "owner": "Azure/module-maintainers"
                          },
                          "definitions": {
                            "roleAssignmentType": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "name": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The name (as GUID) of the role assignment. If not provided, a GUID will be generated."
                                    }
                                  },
                                  "roleDefinitionIdOrName": {
                                    "type": "string",
                                    "metadata": {
                                      "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                                    }
                                  },
                                  "principalId": {
                                    "type": "string",
                                    "metadata": {
                                      "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                                    }
                                  },
                                  "principalType": {
                                    "type": "string",
                                    "allowedValues": [
                                      "Device",
                                      "ForeignGroup",
                                      "Group",
                                      "ServicePrincipal",
                                      "User"
                                    ],
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The principal type of the assigned principal ID."
                                    }
                                  },
                                  "description": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The description of the role assignment."
                                    }
                                  },
                                  "condition": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                                    }
                                  },
                                  "conditionVersion": {
                                    "type": "string",
                                    "allowedValues": [
                                      "2.0"
                                    ],
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. Version of the condition."
                                    }
                                  },
                                  "delegatedManagedIdentityResourceId": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The Resource Id of the delegated managed identity resource."
                                    }
                                  }
                                }
                              },
                              "nullable": true
                            }
                          },
                          "parameters": {
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The name of the table."
                              }
                            },
                            "workspaceName": {
                              "type": "string",
                              "metadata": {
                                "description": "Conditional. The name of the parent workspaces. Required if the template is used in a standalone deployment."
                              }
                            },
                            "plan": {
                              "type": "string",
                              "defaultValue": "Analytics",
                              "allowedValues": [
                                "Basic",
                                "Analytics"
                              ],
                              "metadata": {
                                "description": "Optional. Instruct the system how to handle and charge the logs ingested to this table."
                              }
                            },
                            "restoredLogs": {
                              "type": "object",
                              "defaultValue": {},
                              "metadata": {
                                "description": "Optional. Restore parameters."
                              }
                            },
                            "retentionInDays": {
                              "type": "int",
                              "defaultValue": -1,
                              "minValue": -1,
                              "maxValue": 730,
                              "metadata": {
                                "description": "Optional. The table retention in days, between 4 and 730. Setting this property to -1 will default to the workspace retention."
                              }
                            },
                            "schema": {
                              "type": "object",
                              "defaultValue": {},
                              "metadata": {
                                "description": "Optional. Table's schema."
                              }
                            },
                            "searchResults": {
                              "type": "object",
                              "defaultValue": {},
                              "metadata": {
                                "description": "Optional. Parameters of the search job that initiated this table."
                              }
                            },
                            "totalRetentionInDays": {
                              "type": "int",
                              "defaultValue": -1,
                              "minValue": -1,
                              "maxValue": 2555,
                              "metadata": {
                                "description": "Optional. The table total retention in days, between 4 and 2555. Setting this property to -1 will default to table retention."
                              }
                            },
                            "roleAssignments": {
                              "$ref": "#/definitions/roleAssignmentType",
                              "metadata": {
                                "description": "Optional. Array of role assignments to create."
                              }
                            }
                          },
                          "variables": {
                            "copy": [
                              {
                                "name": "formattedRoleAssignments",
                                "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]",
                                "input": "[union(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')], createObject('roleDefinitionId', coalesce(tryGet(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName), if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName)))))]"
                              }
                            ],
                            "builtInRoleNames": {
                              "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                              "Log Analytics Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '92aaf0da-9dab-42b6-94a3-d43ce8d16293')]",
                              "Log Analytics Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '73c42c96-874c-492b-b04d-ab87d138a893')]",
                              "Monitoring Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '749f88d5-cbae-40b8-bcfc-e573ddc772fa')]",
                              "Monitoring Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '43d0d8ad-25c7-4714-9337-8ba259a9fe05')]",
                              "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                              "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                              "Role Based Access Control Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]",
                              "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]"
                            }
                          },
                          "resources": {
                            "workspace": {
                              "existing": true,
                              "type": "Microsoft.OperationalInsights/workspaces",
                              "apiVersion": "2022-10-01",
                              "name": "[parameters('workspaceName')]"
                            },
                            "table": {
                              "type": "Microsoft.OperationalInsights/workspaces/tables",
                              "apiVersion": "2022-10-01",
                              "name": "[format('{0}/{1}', parameters('workspaceName'), parameters('name'))]",
                              "properties": {
                                "plan": "[parameters('plan')]",
                                "restoredLogs": "[parameters('restoredLogs')]",
                                "retentionInDays": "[parameters('retentionInDays')]",
                                "schema": "[parameters('schema')]",
                                "searchResults": "[parameters('searchResults')]",
                                "totalRetentionInDays": "[parameters('totalRetentionInDays')]"
                              },
                              "dependsOn": [
                                "workspace"
                              ]
                            },
                            "table_roleAssignments": {
                              "copy": {
                                "name": "table_roleAssignments",
                                "count": "[length(coalesce(variables('formattedRoleAssignments'), createArray()))]"
                              },
                              "type": "Microsoft.Authorization/roleAssignments",
                              "apiVersion": "2022-04-01",
                              "scope": "[format('Microsoft.OperationalInsights/workspaces/{0}/tables/{1}', parameters('workspaceName'), parameters('name'))]",
                              "name": "[coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'name'), guid(resourceId('Microsoft.OperationalInsights/workspaces/tables', parameters('workspaceName'), parameters('name')), coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId, coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId))]",
                              "properties": {
                                "roleDefinitionId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId]",
                                "principalId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId]",
                                "description": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'description')]",
                                "principalType": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'principalType')]",
                                "condition": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition')]",
                                "conditionVersion": "[if(not(empty(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                                "delegatedManagedIdentityResourceId": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
                              },
                              "dependsOn": [
                                "table"
                              ]
                            }
                          },
                          "outputs": {
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "The name of the table."
                              },
                              "value": "[parameters('name')]"
                            },
                            "resourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource ID of the table."
                              },
                              "value": "[resourceId('Microsoft.OperationalInsights/workspaces/tables', parameters('workspaceName'), parameters('name'))]"
                            },
                            "resourceGroupName": {
                              "type": "string",
                              "metadata": {
                                "description": "The name of the resource group the table was created in."
                              },
                              "value": "[resourceGroup().name]"
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "logAnalyticsWorkspace"
                      ]
                    },
                    "logAnalyticsWorkspace_solutions": {
                      "copy": {
                        "name": "logAnalyticsWorkspace_solutions",
                        "count": "[length(parameters('gallerySolutions'))]"
                      },
                      "condition": "[not(empty(parameters('gallerySolutions')))]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('{0}-LAW-Solution-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "name": {
                            "value": "[parameters('gallerySolutions')[copyIndex()].name]"
                          },
                          "location": {
                            "value": "[parameters('location')]"
                          },
                          "logAnalyticsWorkspaceName": {
                            "value": "[parameters('name')]"
                          },
                          "product": {
                            "value": "[tryGet(parameters('gallerySolutions')[copyIndex()], 'product')]"
                          },
                          "publisher": {
                            "value": "[tryGet(parameters('gallerySolutions')[copyIndex()], 'publisher')]"
                          },
                          "enableTelemetry": {
                            "value": "[coalesce(tryGet(parameters('gallerySolutions')[copyIndex()], 'enableTelemetry'), parameters('enableTelemetry'))]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.23.1.45101",
                              "templateHash": "18444780972506374592"
                            },
                            "name": "Operations Management Solutions",
                            "description": "This module deploys an Operations Management Solution.",
                            "owner": "Azure/module-maintainers"
                          },
                          "parameters": {
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. Name of the solution. For Microsoft published gallery solution the target solution resource name will be composed as `{name}({logAnalyticsWorkspaceName})`."
                              }
                            },
                            "logAnalyticsWorkspaceName": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. Name of the Log Analytics workspace where the solution will be deployed/enabled."
                              }
                            },
                            "location": {
                              "type": "string",
                              "defaultValue": "[resourceGroup().location]",
                              "metadata": {
                                "description": "Optional. Location for all resources."
                              }
                            },
                            "product": {
                              "type": "string",
                              "defaultValue": "OMSGallery",
                              "metadata": {
                                "description": "Optional. The product of the deployed solution. For Microsoft published gallery solution it should be `OMSGallery` and the target solution resource product will be composed as `OMSGallery/{name}`. For third party solution, it can be anything. This is case sensitive."
                              }
                            },
                            "publisher": {
                              "type": "string",
                              "defaultValue": "Microsoft",
                              "metadata": {
                                "description": "Optional. The publisher name of the deployed solution. For Microsoft published gallery solution, it is `Microsoft`."
                              }
                            },
                            "enableTelemetry": {
                              "type": "bool",
                              "defaultValue": true,
                              "metadata": {
                                "description": "Optional. Enable/Disable usage telemetry for module."
                              }
                            }
                          },
                          "variables": {
                            "solutionName": "[if(equals(parameters('publisher'), 'Microsoft'), format('{0}({1})', parameters('name'), parameters('logAnalyticsWorkspaceName')), parameters('name'))]",
                            "solutionProduct": "[if(equals(parameters('publisher'), 'Microsoft'), format('OMSGallery/{0}', parameters('name')), parameters('product'))]"
                          },
                          "resources": [
                            {
                              "condition": "[parameters('enableTelemetry')]",
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2023-07-01",
                              "name": "[format('46d3xbcp.res.operationsmanagement-solution.{0}.{1}', replace('0.1.0', '.', '-'), substring(uniqueString(deployment().name, parameters('location')), 0, 4))]",
                              "properties": {
                                "mode": "Incremental",
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "resources": [],
                                  "outputs": {
                                    "telemetry": {
                                      "type": "String",
                                      "value": "For more information, see https://aka.ms/avm/TelemetryInfo"
                                    }
                                  }
                                }
                              }
                            },
                            {
                              "type": "Microsoft.OperationsManagement/solutions",
                              "apiVersion": "2015-11-01-preview",
                              "name": "[variables('solutionName')]",
                              "location": "[parameters('location')]",
                              "properties": {
                                "workspaceResourceId": "[resourceId('Microsoft.OperationalInsights/workspaces', parameters('logAnalyticsWorkspaceName'))]"
                              },
                              "plan": {
                                "name": "[variables('solutionName')]",
                                "promotionCode": "",
                                "product": "[variables('solutionProduct')]",
                                "publisher": "[parameters('publisher')]"
                              }
                            }
                          ],
                          "outputs": {
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "The name of the deployed solution."
                              },
                              "value": "[variables('solutionName')]"
                            },
                            "resourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource ID of the deployed solution."
                              },
                              "value": "[resourceId('Microsoft.OperationsManagement/solutions', variables('solutionName'))]"
                            },
                            "resourceGroupName": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource group where the solution is deployed."
                              },
                              "value": "[resourceGroup().name]"
                            },
                            "location": {
                              "type": "string",
                              "metadata": {
                                "description": "The location the resource was deployed into."
                              },
                              "value": "[reference(resourceId('Microsoft.OperationsManagement/solutions', variables('solutionName')), '2015-11-01-preview', 'full').location]"
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "logAnalyticsWorkspace"
                      ]
                    }
                  },
                  "outputs": {
                    "resourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the deployed log analytics workspace."
                      },
                      "value": "[resourceId('Microsoft.OperationalInsights/workspaces', parameters('name'))]"
                    },
                    "resourceGroupName": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource group of the deployed log analytics workspace."
                      },
                      "value": "[resourceGroup().name]"
                    },
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the deployed log analytics workspace."
                      },
                      "value": "[parameters('name')]"
                    },
                    "logAnalyticsWorkspaceId": {
                      "type": "string",
                      "metadata": {
                        "description": "The ID associated with the workspace."
                      },
                      "value": "[reference('logAnalyticsWorkspace').customerId]"
                    },
                    "location": {
                      "type": "string",
                      "metadata": {
                        "description": "The location the resource was deployed into."
                      },
                      "value": "[reference('logAnalyticsWorkspace', '2022-10-01', 'full').location]"
                    },
                    "systemAssignedMIPrincipalId": {
                      "type": "string",
                      "metadata": {
                        "description": "The principal ID of the system assigned identity."
                      },
                      "value": "[coalesce(tryGet(tryGet(reference('logAnalyticsWorkspace', '2022-10-01', 'full'), 'identity'), 'principalId'), '')]"
                    }
                  }
                }
              }
            },
            "webApp": {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "webAppModule-Deployment",
              "resourceGroup": "[parameters('resourceGroupName')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "deployAseV3": {
                    "value": "[parameters('deployAseV3')]"
                  },
                  "aseName": {
                    "value": "[variables('resourceNames').aseName]"
                  },
                  "appServicePlanName": {
                    "value": "[variables('resourceNames').aspName]"
                  },
                  "webAppName": {
                    "value": "[variables('resourceNames').webApp]"
                  },
                  "managedIdentityName": {
                    "value": "[variables('resourceNames').appSvcUserAssignedManagedIdentity]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "logAnalyticsWsId": {
                    "value": "[reference('logAnalyticsWs').outputs.resourceId.value]"
                  },
                  "subnetIdForVnetInjection": {
                    "value": "[reference('networking').outputs.snetAppSvcId.value]"
                  },
                  "tags": {
                    "value": "[parameters('tags')]"
                  },
                  "webAppBaseOs": {
                    "value": "[parameters('webAppBaseOs')]"
                  },
                  "zoneRedundant": {
                    "value": "[parameters('zoneRedundant')]"
                  },
                  "subnetPrivateEndpointId": {
                    "value": "[reference('networking').outputs.snetPeId.value]"
                  },
                  "virtualNetworkLinks": {
                    "value": [
                      {
                        "name": "[reference('networking').outputs.vnetSpokeName.value]",
                        "virtualNetworkResourceId": "[reference('networking').outputs.vnetSpokeId.value]",
                        "registrationEnabled": false
                      }
                    ]
                  },
                  "sku": {
                    "value": "[parameters('webAppPlanSku')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.32.4.45862",
                      "templateHash": "13705175535655799125"
                    }
                  },
                  "parameters": {
                    "deployAseV3": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "Optional, default is false. Set to true if you want to deploy ASE v3 instead of Multitenant App Service Plan."
                      }
                    },
                    "aseName": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 36,
                      "metadata": {
                        "description": "Optional if deployAseV3 = false. The identifier for the App Service Environment v3 resource."
                      }
                    },
                    "appServicePlanName": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 40,
                      "metadata": {
                        "description": "Required. Name of the App Service Plan."
                      }
                    },
                    "webAppName": {
                      "type": "string",
                      "maxLength": 60,
                      "metadata": {
                        "description": "Required. Name of the web app."
                      }
                    },
                    "managedIdentityName": {
                      "type": "string",
                      "minLength": 3,
                      "maxLength": 128,
                      "metadata": {
                        "description": "Required. Name of the managed Identity that will be assigned to the web app."
                      }
                    },
                    "sku": {
                      "type": "string",
                      "allowedValues": [
                        "S1",
                        "S2",
                        "S3",
                        "P1V3",
                        "P2V3",
                        "P3V3",
                        "EP1",
                        "EP2",
                        "EP3",
                        "ASE_I1V2",
                        "ASE_I2V2",
                        "ASE_I3V2"
                      ],
                      "metadata": {
                        "description": "Optional S1 is default. Defines the name, tier, size, family and capacity of the App Service Plan. Plans ending to _AZ, are deploying at least three instances in three Availability Zones. EP* is only for functions"
                      }
                    },
                    "zoneRedundant": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "Optional. Set to true if you want to deploy the App Service Plan in a zone redundant manner. Default is true."
                      }
                    },
                    "location": {
                      "type": "string",
                      "metadata": {
                        "description": "Optional. Location for all resources."
                      }
                    },
                    "tags": {
                      "type": "object",
                      "metadata": {
                        "description": "Resource tags that we might need to add to all resources (i.e. Environment, Cost center, application name etc)"
                      }
                    },
                    "subnetPrivateEndpointId": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Default is empty. If empty no Private Endpoint will be created for the resoure. Otherwise, the subnet where the private endpoint will be attached to"
                      }
                    },
                    "virtualNetworkLinks": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. Array of custom objects describing vNet links of the DNS zone. Each object should contain vnetName, vnetId, registrationEnabled"
                      }
                    },
                    "webAppBaseOs": {
                      "type": "string",
                      "allowedValues": [
                        "windows",
                        "linux"
                      ],
                      "metadata": {
                        "description": "Kind of server OS of the App Service Plan"
                      }
                    },
                    "logAnalyticsWsId": {
                      "type": "string",
                      "metadata": {
                        "description": "An existing Log Analytics WS Id for creating app Insights, diagnostics etc."
                      }
                    },
                    "subnetIdForVnetInjection": {
                      "type": "string",
                      "metadata": {
                        "description": "The subnet ID that is dedicated to Web Server, for Vnet Injection of the web app. If deployAseV3=true then this is the subnet dedicated to the ASE v3"
                      }
                    },
                    "perSiteScaling": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "Optional. If true, apps assigned to this App Service plan can be scaled independently. If false, apps assigned to this App Service plan will scale to all instances of the plan."
                      }
                    },
                    "maximumElasticWorkerCount": {
                      "type": "int",
                      "defaultValue": 20,
                      "metadata": {
                        "description": "Optional, default is 20. Maximum number of total workers allowed for this ElasticScaleEnabled App Service Plan."
                      }
                    },
                    "targetWorkerCount": {
                      "type": "int",
                      "defaultValue": 0,
                      "metadata": {
                        "description": "Optional. Scaling worker count."
                      }
                    },
                    "serverOS": {
                      "type": "string",
                      "defaultValue": "Windows",
                      "allowedValues": [
                        "Windows",
                        "Linux"
                      ],
                      "metadata": {
                        "description": "Optional, default is Windows. Kind of server OS."
                      }
                    },
                    "targetWorkerSize": {
                      "type": "int",
                      "defaultValue": 0,
                      "allowedValues": [
                        0,
                        1,
                        2
                      ],
                      "metadata": {
                        "description": "Optional. The instance size of the hosting plan (small, medium, or large)."
                      }
                    },
                    "diagnosticMetricsToEnable": {
                      "type": "array",
                      "defaultValue": [
                        {
                          "metricCategories": [
                            {
                              "category": "AllMetrics"
                            }
                          ],
                          "workspaceResourceId": "[parameters('logAnalyticsWsId')]"
                        }
                      ],
                      "metadata": {
                        "description": "Optional. The name of metrics that will be streamed."
                      }
                    },
                    "siteConfig": {
                      "type": "object",
                      "defaultValue": {
                        "alwaysOn": true,
                        "ftpsState": "FtpsOnly",
                        "minTlsVersion": "1.2",
                        "healthCheckPath": "/healthz",
                        "http20Enabled": true
                      },
                      "metadata": {
                        "description": "Optional. The site configuration for the web app."
                      }
                    },
                    "kind": {
                      "type": "string",
                      "defaultValue": "app",
                      "allowedValues": [
                        "api",
                        "app",
                        "app,container,windows",
                        "app,linux",
                        "app,linux,container",
                        "functionapp",
                        "functionapp,linux",
                        "functionapp,linux,container",
                        "functionapp,linux,container,azurecontainerapps",
                        "functionapp,workflowapp",
                        "functionapp,workflowapp,linux",
                        "linux,api"
                      ],
                      "metadata": {
                        "description": "Optional. Kind of web app. Defaults to app."
                      }
                    }
                  },
                  "variables": {
                    "webAppDnsZoneName": "privatelink.azurewebsites.net",
                    "slotName": "staging"
                  },
                  "resources": [
                    {
                      "condition": "[parameters('deployAseV3')]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[take(format('{0}-ASEv3-Deployment', parameters('aseName')), 64)]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "name": {
                            "value": "[parameters('aseName')]"
                          },
                          "location": {
                            "value": "[parameters('location')]"
                          },
                          "tags": {
                            "value": "[parameters('tags')]"
                          },
                          "subnetResourceId": {
                            "value": "[parameters('subnetIdForVnetInjection')]"
                          },
                          "zoneRedundant": {
                            "value": "[parameters('zoneRedundant')]"
                          },
                          "allowNewPrivateEndpointConnections": {
                            "value": true
                          },
                          "virtualNetworkLinks": {
                            "value": "[parameters('virtualNetworkLinks')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.32.4.45862",
                              "templateHash": "9046799108204851655"
                            }
                          },
                          "parameters": {
                            "name": {
                              "type": "string",
                              "minLength": 1,
                              "metadata": {
                                "description": "Required. Name of the App Service Environment."
                              }
                            },
                            "location": {
                              "type": "string",
                              "defaultValue": "[resourceGroup().location]",
                              "metadata": {
                                "description": "Optional. Location for all resources."
                              }
                            },
                            "lock": {
                              "type": "string",
                              "defaultValue": "CanNotDelete",
                              "allowedValues": [
                                "None",
                                "CanNotDelete",
                                "ReadOnly"
                              ],
                              "metadata": {
                                "description": "Optional. Specify the type of lock."
                              }
                            },
                            "tags": {
                              "type": "object",
                              "defaultValue": {},
                              "metadata": {
                                "description": "Optional. Resource tags."
                              }
                            },
                            "clusterSettings": {
                              "type": "array",
                              "defaultValue": [
                                {
                                  "name": "DisableTls1.0",
                                  "value": "1"
                                }
                              ],
                              "metadata": {
                                "description": "Optional. Custom settings for changing the behavior of the App Service Environment."
                              }
                            },
                            "customDnsSuffixCertificateUrl": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Conditional. The URL referencing the Azure Key Vault certificate secret that should be used as the default SSL/TLS certificate for sites with the custom domain suffix. Required if customDnsSuffix is not empty. Cannot be used when kind is set to ASEv2."
                              }
                            },
                            "customDnsSuffixKeyVaultReferenceIdentity": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Conditional. The user-assigned identity to use for resolving the key vault certificate reference. If not specified, the system-assigned ASE identity will be used if available. Required if customDnsSuffix is not empty. Cannot be used when kind is set to ASEv2."
                              }
                            },
                            "dedicatedHostCount": {
                              "type": "int",
                              "defaultValue": 0,
                              "metadata": {
                                "description": "Optional. The Dedicated Host Count. If `zoneRedundant` is false, and you want physical hardware isolation enabled, set to 2. Otherwise 0. Cannot be used when kind is set to ASEv2."
                              }
                            },
                            "dnsSuffix": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. DNS suffix of the App Service Environment."
                              }
                            },
                            "frontEndScaleFactor": {
                              "type": "int",
                              "defaultValue": 15,
                              "metadata": {
                                "description": "Optional. Scale factor for frontends."
                              }
                            },
                            "internalLoadBalancingMode": {
                              "type": "string",
                              "defaultValue": "Web, Publishing",
                              "allowedValues": [
                                "None",
                                "Web",
                                "Publishing",
                                "Web, Publishing"
                              ],
                              "metadata": {
                                "description": "Optional. Specifies which endpoints to serve internally in the Virtual Network for the App Service Environment. - None, Web, Publishing, Web,Publishing. \"None\" Exposes the ASE-hosted apps on an internet-accessible IP address."
                              }
                            },
                            "allowNewPrivateEndpointConnections": {
                              "type": "bool",
                              "defaultValue": false,
                              "metadata": {
                                "description": "Optional. Property to enable and disable new private endpoint connection creation on ASE. Ignored when kind is set to ASEv2. If you wish to add a Premium AFD in front of the ASEv3, set this to true."
                              }
                            },
                            "ftpEnabled": {
                              "type": "bool",
                              "defaultValue": false,
                              "metadata": {
                                "description": "Optional. Property to enable and disable FTP on ASEV3. Ignored when kind is set to ASEv2."
                              }
                            },
                            "inboundIpAddressOverride": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. Customer provided Inbound IP Address. Only able to be set on Ase create. Ignored when kind is set to ASEv2."
                              }
                            },
                            "remoteDebugEnabled": {
                              "type": "bool",
                              "defaultValue": false,
                              "metadata": {
                                "description": "Optional. Property to enable and disable Remote Debug on ASEv3. Ignored when kind is set to ASEv2."
                              }
                            },
                            "upgradePreference": {
                              "type": "string",
                              "defaultValue": "None",
                              "allowedValues": [
                                "Early",
                                "Late",
                                "Manual",
                                "None"
                              ],
                              "metadata": {
                                "description": "Optional. Specify preference for when and how the planned maintenance is applied."
                              }
                            },
                            "subnetResourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. ResourceId for the subnet."
                              }
                            },
                            "zoneRedundant": {
                              "type": "bool",
                              "defaultValue": false,
                              "metadata": {
                                "description": "Optional. Switch to make the App Service Environment zone redundant. If enabled, the minimum App Service plan instance count will be three, otherwise 1. If enabled, the `dedicatedHostCount` must be set to `-1`."
                              }
                            },
                            "diagnosticLogCategoriesToEnable": {
                              "type": "array",
                              "defaultValue": [
                                "allLogs"
                              ],
                              "allowedValues": [
                                "",
                                "allLogs",
                                "AppServiceEnvironmentPlatformLogs"
                              ],
                              "metadata": {
                                "description": "Optional. The name of logs that will be streamed. \"allLogs\" includes all possible logs for the resource. Set to '' to disable log collection."
                              }
                            },
                            "diagnosticSettingsName": {
                              "type": "string",
                              "defaultValue": "[format('{0}-diagnosticSettings', parameters('name'))]",
                              "metadata": {
                                "description": "Optional. The name of the diagnostic setting, if deployed. If left empty, it defaults to \"<resourceName>-diagnosticSettings\"."
                              }
                            },
                            "virtualNetworkLinks": {
                              "type": "array"
                            }
                          },
                          "variables": {
                            "copy": [
                              {
                                "name": "diagnosticsLogsSpecified",
                                "count": "[length(filter(parameters('diagnosticLogCategoriesToEnable'), lambda('item', and(not(equals(lambdaVariables('item'), 'allLogs')), not(equals(lambdaVariables('item'), ''))))))]",
                                "input": {
                                  "category": "[filter(parameters('diagnosticLogCategoriesToEnable'), lambda('item', and(not(equals(lambdaVariables('item'), 'allLogs')), not(equals(lambdaVariables('item'), '')))))[copyIndex('diagnosticsLogsSpecified')]]",
                                  "enabled": true
                                }
                              }
                            ],
                            "diagnosticsLogs": "[if(contains(parameters('diagnosticLogCategoriesToEnable'), 'allLogs'), createArray(createObject('categoryGroup', 'allLogs', 'enabled', true())), if(contains(parameters('diagnosticLogCategoriesToEnable'), ''), createArray(), variables('diagnosticsLogsSpecified')))]"
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "[take(format('{0}-ASEv3-Deployment', parameters('name')), 64)]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "name": {
                                    "value": "[parameters('name')]"
                                  },
                                  "location": {
                                    "value": "[parameters('location')]"
                                  },
                                  "tags": {
                                    "value": "[parameters('tags')]"
                                  },
                                  "subnetResourceId": {
                                    "value": "[parameters('subnetResourceId')]"
                                  },
                                  "clusterSettings": {
                                    "value": "[parameters('clusterSettings')]"
                                  },
                                  "dedicatedHostCount": "[if(not(equals(parameters('dedicatedHostCount'), 0)), createObject('value', parameters('dedicatedHostCount')), createObject('value', null()))]",
                                  "frontEndScaleFactor": {
                                    "value": "[parameters('frontEndScaleFactor')]"
                                  },
                                  "internalLoadBalancingMode": {
                                    "value": "[parameters('internalLoadBalancingMode')]"
                                  },
                                  "zoneRedundant": {
                                    "value": "[parameters('zoneRedundant')]"
                                  },
                                  "allowNewPrivateEndpointConnections": {
                                    "value": "[parameters('allowNewPrivateEndpointConnections')]"
                                  },
                                  "ftpEnabled": {
                                    "value": "[parameters('ftpEnabled')]"
                                  },
                                  "inboundIpAddressOverride": {
                                    "value": "[parameters('inboundIpAddressOverride')]"
                                  },
                                  "remoteDebugEnabled": {
                                    "value": "[parameters('remoteDebugEnabled')]"
                                  },
                                  "customDnsSuffixCertificateUrl": {
                                    "value": "[parameters('customDnsSuffixCertificateUrl')]"
                                  },
                                  "customDnsSuffixKeyVaultReferenceIdentity": {
                                    "value": "[parameters('customDnsSuffixKeyVaultReferenceIdentity')]"
                                  },
                                  "dnsSuffix": "[if(not(empty(parameters('dnsSuffix'))), createObject('value', parameters('dnsSuffix')), createObject('value', null()))]",
                                  "upgradePreference": {
                                    "value": "[parameters('upgradePreference')]"
                                  },
                                  "diagnosticSettings": {
                                    "value": [
                                      {
                                        "name": "[parameters('diagnosticSettingsName')]",
                                        "logCategoriesAndGroups": "[variables('diagnosticsLogs')]"
                                      }
                                    ]
                                  },
                                  "lock": {
                                    "value": {
                                      "kind": "[parameters('lock')]",
                                      "name": "[format('{0}-{1}-lock', parameters('name'), parameters('lock'))]"
                                    }
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "languageVersion": "2.0",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.28.1.47646",
                                      "templateHash": "17460283383227487705"
                                    },
                                    "name": "App Service Environments",
                                    "description": "This module deploys an App Service Environment.",
                                    "owner": "Azure/module-maintainers"
                                  },
                                  "definitions": {
                                    "managedIdentitiesType": {
                                      "type": "object",
                                      "properties": {
                                        "systemAssigned": {
                                          "type": "bool",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. Enables system assigned managed identity on the resource."
                                          }
                                        },
                                        "userAssignedResourceIds": {
                                          "type": "array",
                                          "items": {
                                            "type": "string"
                                          },
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The resource ID(s) to assign to the resource."
                                          }
                                        }
                                      },
                                      "nullable": true
                                    },
                                    "lockType": {
                                      "type": "object",
                                      "properties": {
                                        "name": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. Specify the name of lock."
                                          }
                                        },
                                        "kind": {
                                          "type": "string",
                                          "allowedValues": [
                                            "CanNotDelete",
                                            "None",
                                            "ReadOnly"
                                          ],
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. Specify the type of lock."
                                          }
                                        }
                                      },
                                      "nullable": true
                                    },
                                    "roleAssignmentType": {
                                      "type": "array",
                                      "items": {
                                        "type": "object",
                                        "properties": {
                                          "roleDefinitionIdOrName": {
                                            "type": "string",
                                            "metadata": {
                                              "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                                            }
                                          },
                                          "principalId": {
                                            "type": "string",
                                            "metadata": {
                                              "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                                            }
                                          },
                                          "principalType": {
                                            "type": "string",
                                            "allowedValues": [
                                              "Device",
                                              "ForeignGroup",
                                              "Group",
                                              "ServicePrincipal",
                                              "User"
                                            ],
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. The principal type of the assigned principal ID."
                                            }
                                          },
                                          "description": {
                                            "type": "string",
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. The description of the role assignment."
                                            }
                                          },
                                          "condition": {
                                            "type": "string",
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                                            }
                                          },
                                          "conditionVersion": {
                                            "type": "string",
                                            "allowedValues": [
                                              "2.0"
                                            ],
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. Version of the condition."
                                            }
                                          },
                                          "delegatedManagedIdentityResourceId": {
                                            "type": "string",
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. The Resource Id of the delegated managed identity resource."
                                            }
                                          }
                                        }
                                      },
                                      "nullable": true
                                    },
                                    "diagnosticSettingType": {
                                      "type": "array",
                                      "items": {
                                        "type": "object",
                                        "properties": {
                                          "name": {
                                            "type": "string",
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. The name of diagnostic setting."
                                            }
                                          },
                                          "logCategoriesAndGroups": {
                                            "type": "array",
                                            "items": {
                                              "type": "object",
                                              "properties": {
                                                "category": {
                                                  "type": "string",
                                                  "nullable": true,
                                                  "metadata": {
                                                    "description": "Optional. Name of a Diagnostic Log category for a resource type this setting is applied to. Set the specific logs to collect here."
                                                  }
                                                },
                                                "categoryGroup": {
                                                  "type": "string",
                                                  "nullable": true,
                                                  "metadata": {
                                                    "description": "Optional. Name of a Diagnostic Log category group for a resource type this setting is applied to. Set to 'AllLogs' to collect all logs."
                                                  }
                                                }
                                              }
                                            },
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. The name of logs that will be streamed. \"allLogs\" includes all possible logs for the resource. Set to '' to disable log collection."
                                            }
                                          },
                                          "logAnalyticsDestinationType": {
                                            "type": "string",
                                            "allowedValues": [
                                              "AzureDiagnostics",
                                              "Dedicated"
                                            ],
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. A string indicating whether the export to Log Analytics should use the default destination type, i.e. AzureDiagnostics, or use a destination type."
                                            }
                                          },
                                          "workspaceResourceId": {
                                            "type": "string",
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. Resource ID of the diagnostic log analytics workspace. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                                            }
                                          },
                                          "storageAccountResourceId": {
                                            "type": "string",
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. Resource ID of the diagnostic storage account. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                                            }
                                          },
                                          "eventHubAuthorizationRuleResourceId": {
                                            "type": "string",
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. Resource ID of the diagnostic event hub authorization rule for the Event Hubs namespace in which the event hub should be created or streamed to."
                                            }
                                          },
                                          "eventHubName": {
                                            "type": "string",
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. Name of the diagnostic event hub within the namespace to which logs are streamed. Without this, an event hub is created for each log category. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                                            }
                                          },
                                          "marketplacePartnerResourceId": {
                                            "type": "string",
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. The full ARM resource ID of the Marketplace resource to which you would like to send Diagnostic Logs."
                                            }
                                          }
                                        }
                                      },
                                      "nullable": true
                                    }
                                  },
                                  "parameters": {
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. Name of the resource to create."
                                      }
                                    },
                                    "location": {
                                      "type": "string",
                                      "defaultValue": "[resourceGroup().location]",
                                      "metadata": {
                                        "description": "Optional. Location for all Resources."
                                      }
                                    },
                                    "enableTelemetry": {
                                      "type": "bool",
                                      "defaultValue": true,
                                      "metadata": {
                                        "description": "Optional. Enable/Disable usage telemetry for module."
                                      }
                                    },
                                    "tags": {
                                      "type": "object",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. Tags of the resource."
                                      }
                                    },
                                    "lock": {
                                      "$ref": "#/definitions/lockType",
                                      "metadata": {
                                        "description": "Optional. The lock settings of the service."
                                      }
                                    },
                                    "roleAssignments": {
                                      "$ref": "#/definitions/roleAssignmentType",
                                      "metadata": {
                                        "description": "Optional. Array of role assignments to create."
                                      }
                                    },
                                    "kind": {
                                      "type": "string",
                                      "defaultValue": "ASEv3",
                                      "allowedValues": [
                                        "ASEv3"
                                      ],
                                      "metadata": {
                                        "description": "Optional. Kind of resource."
                                      }
                                    },
                                    "clusterSettings": {
                                      "type": "array",
                                      "defaultValue": [
                                        {
                                          "name": "DisableTls1.0",
                                          "value": "1"
                                        }
                                      ],
                                      "metadata": {
                                        "description": "Optional. Custom settings for changing the behavior of the App Service Environment."
                                      }
                                    },
                                    "customDnsSuffix": {
                                      "type": "string",
                                      "defaultValue": "",
                                      "metadata": {
                                        "description": "Optional. Enable the default custom domain suffix to use for all sites deployed on the ASE. If provided, then customDnsSuffixCertificateUrl and customDnsSuffixKeyVaultReferenceIdentity are required."
                                      }
                                    },
                                    "customDnsSuffixCertificateUrl": {
                                      "type": "string",
                                      "defaultValue": "",
                                      "metadata": {
                                        "description": "Optional. The URL referencing the Azure Key Vault certificate secret that should be used as the default SSL/TLS certificate for sites with the custom domain suffix. Required if customDnsSuffix is not empty."
                                      }
                                    },
                                    "customDnsSuffixKeyVaultReferenceIdentity": {
                                      "type": "string",
                                      "defaultValue": "",
                                      "metadata": {
                                        "description": "Optional. The user-assigned identity to use for resolving the key vault certificate reference. If not specified, the system-assigned ASE identity will be used if available. Required if customDnsSuffix is not empty."
                                      }
                                    },
                                    "dedicatedHostCount": {
                                      "type": "int",
                                      "defaultValue": 0,
                                      "metadata": {
                                        "description": "Optional. The Dedicated Host Count. If `zoneRedundant` is false, and you want physical hardware isolation enabled, set to 2. Otherwise 0."
                                      }
                                    },
                                    "dnsSuffix": {
                                      "type": "string",
                                      "defaultValue": "",
                                      "metadata": {
                                        "description": "Optional. DNS suffix of the App Service Environment."
                                      }
                                    },
                                    "frontEndScaleFactor": {
                                      "type": "int",
                                      "defaultValue": 15,
                                      "metadata": {
                                        "description": "Optional. Scale factor for frontends."
                                      }
                                    },
                                    "internalLoadBalancingMode": {
                                      "type": "string",
                                      "defaultValue": "None",
                                      "allowedValues": [
                                        "None",
                                        "Web",
                                        "Publishing",
                                        "Web, Publishing"
                                      ],
                                      "metadata": {
                                        "description": "Optional. Specifies which endpoints to serve internally in the Virtual Network for the App Service Environment. - None, Web, Publishing, Web,Publishing. \"None\" Exposes the ASE-hosted apps on an internet-accessible IP address."
                                      }
                                    },
                                    "allowNewPrivateEndpointConnections": {
                                      "type": "bool",
                                      "defaultValue": false,
                                      "metadata": {
                                        "description": "Optional. Property to enable and disable new private endpoint connection creation on ASE."
                                      }
                                    },
                                    "ftpEnabled": {
                                      "type": "bool",
                                      "defaultValue": false,
                                      "metadata": {
                                        "description": "Optional. Property to enable and disable FTP on ASEV3."
                                      }
                                    },
                                    "inboundIpAddressOverride": {
                                      "type": "string",
                                      "defaultValue": "",
                                      "metadata": {
                                        "description": "Optional. Customer provided Inbound IP Address. Only able to be set on Ase create."
                                      }
                                    },
                                    "remoteDebugEnabled": {
                                      "type": "bool",
                                      "defaultValue": false,
                                      "metadata": {
                                        "description": "Optional. Property to enable and disable Remote Debug on ASEv3."
                                      }
                                    },
                                    "upgradePreference": {
                                      "type": "string",
                                      "defaultValue": "None",
                                      "allowedValues": [
                                        "Early",
                                        "Late",
                                        "Manual",
                                        "None"
                                      ],
                                      "metadata": {
                                        "description": "Optional. Specify preference for when and how the planned maintenance is applied."
                                      }
                                    },
                                    "subnetResourceId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. ResourceId for the subnet."
                                      }
                                    },
                                    "zoneRedundant": {
                                      "type": "bool",
                                      "defaultValue": false,
                                      "metadata": {
                                        "description": "Optional. Switch to make the App Service Environment zone redundant. If enabled, the minimum App Service plan instance count will be three, otherwise 1. If enabled, the `dedicatedHostCount` must be set to `-1`."
                                      }
                                    },
                                    "managedIdentities": {
                                      "$ref": "#/definitions/managedIdentitiesType",
                                      "metadata": {
                                        "description": "Optional. The managed identity definition for this resource."
                                      }
                                    },
                                    "diagnosticSettings": {
                                      "$ref": "#/definitions/diagnosticSettingType",
                                      "metadata": {
                                        "description": "Optional. The diagnostic settings of the service."
                                      }
                                    }
                                  },
                                  "variables": {
                                    "formattedUserAssignedIdentities": "[reduce(map(coalesce(tryGet(parameters('managedIdentities'), 'userAssignedResourceIds'), createArray()), lambda('id', createObject(format('{0}', lambdaVariables('id')), createObject()))), createObject(), lambda('cur', 'next', union(lambdaVariables('cur'), lambdaVariables('next'))))]",
                                    "identity": "[if(not(empty(parameters('managedIdentities'))), createObject('type', if(coalesce(tryGet(parameters('managedIdentities'), 'systemAssigned'), false()), if(not(empty(coalesce(tryGet(parameters('managedIdentities'), 'userAssignedResourceIds'), createObject()))), 'SystemAssigned,UserAssigned', 'SystemAssigned'), if(not(empty(coalesce(tryGet(parameters('managedIdentities'), 'userAssignedResourceIds'), createObject()))), 'UserAssigned', null())), 'userAssignedIdentities', if(not(empty(variables('formattedUserAssignedIdentities'))), variables('formattedUserAssignedIdentities'), null())), null())]",
                                    "builtInRoleNames": {
                                      "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                                      "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                                      "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                                      "Role Based Access Control Administrator (Preview)": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]",
                                      "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]"
                                    }
                                  },
                                  "resources": {
                                    "avmTelemetry": {
                                      "condition": "[parameters('enableTelemetry')]",
                                      "type": "Microsoft.Resources/deployments",
                                      "apiVersion": "2024-03-01",
                                      "name": "[format('46d3xbcp.res.web-hostingenvironment.{0}.{1}', replace('0.1.1', '.', '-'), substring(uniqueString(deployment().name, parameters('location')), 0, 4))]",
                                      "properties": {
                                        "mode": "Incremental",
                                        "template": {
                                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                          "contentVersion": "1.0.0.0",
                                          "resources": [],
                                          "outputs": {
                                            "telemetry": {
                                              "type": "String",
                                              "value": "For more information, see https://aka.ms/avm/TelemetryInfo"
                                            }
                                          }
                                        }
                                      }
                                    },
                                    "appServiceEnvironment": {
                                      "type": "Microsoft.Web/hostingEnvironments",
                                      "apiVersion": "2022-03-01",
                                      "name": "[parameters('name')]",
                                      "kind": "[parameters('kind')]",
                                      "location": "[parameters('location')]",
                                      "tags": "[parameters('tags')]",
                                      "identity": "[variables('identity')]",
                                      "properties": {
                                        "clusterSettings": "[parameters('clusterSettings')]",
                                        "dedicatedHostCount": "[if(not(equals(parameters('dedicatedHostCount'), 0)), parameters('dedicatedHostCount'), null())]",
                                        "dnsSuffix": "[if(not(empty(parameters('dnsSuffix'))), parameters('dnsSuffix'), null())]",
                                        "frontEndScaleFactor": "[parameters('frontEndScaleFactor')]",
                                        "internalLoadBalancingMode": "[parameters('internalLoadBalancingMode')]",
                                        "upgradePreference": "[parameters('upgradePreference')]",
                                        "virtualNetwork": {
                                          "id": "[parameters('subnetResourceId')]",
                                          "subnet": "[last(split(parameters('subnetResourceId'), '/'))]"
                                        },
                                        "zoneRedundant": "[parameters('zoneRedundant')]"
                                      }
                                    },
                                    "appServiceEnvironment_lock": {
                                      "condition": "[and(not(empty(coalesce(parameters('lock'), createObject()))), not(equals(tryGet(parameters('lock'), 'kind'), 'None')))]",
                                      "type": "Microsoft.Authorization/locks",
                                      "apiVersion": "2020-05-01",
                                      "scope": "[format('Microsoft.Web/hostingEnvironments/{0}', parameters('name'))]",
                                      "name": "[coalesce(tryGet(parameters('lock'), 'name'), format('lock-{0}', parameters('name')))]",
                                      "properties": {
                                        "level": "[coalesce(tryGet(parameters('lock'), 'kind'), '')]",
                                        "notes": "[if(equals(tryGet(parameters('lock'), 'kind'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot delete or modify the resource or child resources.')]"
                                      },
                                      "dependsOn": [
                                        "appServiceEnvironment"
                                      ]
                                    },
                                    "appServiceEnvironment_diagnosticSettings": {
                                      "copy": {
                                        "name": "appServiceEnvironment_diagnosticSettings",
                                        "count": "[length(coalesce(parameters('diagnosticSettings'), createArray()))]"
                                      },
                                      "type": "Microsoft.Insights/diagnosticSettings",
                                      "apiVersion": "2021-05-01-preview",
                                      "scope": "[format('Microsoft.Web/hostingEnvironments/{0}', parameters('name'))]",
                                      "name": "[coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'name'), format('{0}-diagnosticSettings', parameters('name')))]",
                                      "properties": {
                                        "copy": [
                                          {
                                            "name": "logs",
                                            "count": "[length(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs'))))]",
                                            "input": {
                                              "categoryGroup": "[tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'categoryGroup')]",
                                              "category": "[tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'category')]",
                                              "enabled": "[coalesce(tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'enabled'), true())]"
                                            }
                                          }
                                        ],
                                        "storageAccountId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'storageAccountResourceId')]",
                                        "workspaceId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'workspaceResourceId')]",
                                        "eventHubAuthorizationRuleId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'eventHubAuthorizationRuleResourceId')]",
                                        "eventHubName": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'eventHubName')]",
                                        "marketplacePartnerId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'marketplacePartnerResourceId')]",
                                        "logAnalyticsDestinationType": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logAnalyticsDestinationType')]"
                                      },
                                      "dependsOn": [
                                        "appServiceEnvironment"
                                      ]
                                    },
                                    "appServiceEnvironment_roleAssignments": {
                                      "copy": {
                                        "name": "appServiceEnvironment_roleAssignments",
                                        "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]"
                                      },
                                      "type": "Microsoft.Authorization/roleAssignments",
                                      "apiVersion": "2022-04-01",
                                      "scope": "[format('Microsoft.Web/hostingEnvironments/{0}', parameters('name'))]",
                                      "name": "[guid(resourceId('Microsoft.Web/hostingEnvironments', parameters('name')), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].principalId, coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName)]",
                                      "properties": {
                                        "roleDefinitionId": "[if(contains(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName), variables('builtInRoleNames')[coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName], if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName)))]",
                                        "principalId": "[coalesce(parameters('roleAssignments'), createArray())[copyIndex()].principalId]",
                                        "description": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'description')]",
                                        "principalType": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'principalType')]",
                                        "condition": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'condition')]",
                                        "conditionVersion": "[if(not(empty(tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                                        "delegatedManagedIdentityResourceId": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
                                      },
                                      "dependsOn": [
                                        "appServiceEnvironment"
                                      ]
                                    },
                                    "appServiceEnvironment_configurations_networking": {
                                      "type": "Microsoft.Resources/deployments",
                                      "apiVersion": "2022-09-01",
                                      "name": "[format('{0}-AppServiceEnv-Configurations-Networking', uniqueString(deployment().name, parameters('location')))]",
                                      "properties": {
                                        "expressionEvaluationOptions": {
                                          "scope": "inner"
                                        },
                                        "mode": "Incremental",
                                        "parameters": {
                                          "hostingEnvironmentName": {
                                            "value": "[parameters('name')]"
                                          },
                                          "allowNewPrivateEndpointConnections": {
                                            "value": "[parameters('allowNewPrivateEndpointConnections')]"
                                          },
                                          "ftpEnabled": {
                                            "value": "[parameters('ftpEnabled')]"
                                          },
                                          "inboundIpAddressOverride": {
                                            "value": "[parameters('inboundIpAddressOverride')]"
                                          },
                                          "remoteDebugEnabled": {
                                            "value": "[parameters('remoteDebugEnabled')]"
                                          }
                                        },
                                        "template": {
                                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                          "contentVersion": "1.0.0.0",
                                          "metadata": {
                                            "_generator": {
                                              "name": "bicep",
                                              "version": "0.28.1.47646",
                                              "templateHash": "17598276744130339630"
                                            },
                                            "name": "Hosting Environment Network Configuration",
                                            "description": "This module deploys a Hosting Environment Network Configuration.",
                                            "owner": "Azure/module-maintainers"
                                          },
                                          "parameters": {
                                            "hostingEnvironmentName": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "Conditional. The name of the parent Hosting Environment. Required if the template is used in a standalone deployment."
                                              }
                                            },
                                            "allowNewPrivateEndpointConnections": {
                                              "type": "bool",
                                              "defaultValue": false,
                                              "metadata": {
                                                "description": "Optional. Property to enable and disable new private endpoint connection creation on ASE."
                                              }
                                            },
                                            "ftpEnabled": {
                                              "type": "bool",
                                              "defaultValue": false,
                                              "metadata": {
                                                "description": "Optional. Property to enable and disable FTP on ASEV3."
                                              }
                                            },
                                            "inboundIpAddressOverride": {
                                              "type": "string",
                                              "defaultValue": "",
                                              "metadata": {
                                                "description": "Optional. Customer provided Inbound IP Address. Only able to be set on Ase create."
                                              }
                                            },
                                            "remoteDebugEnabled": {
                                              "type": "bool",
                                              "defaultValue": false,
                                              "metadata": {
                                                "description": "Optional. Property to enable and disable Remote Debug on ASEv3."
                                              }
                                            }
                                          },
                                          "resources": [
                                            {
                                              "type": "Microsoft.Web/hostingEnvironments/configurations",
                                              "apiVersion": "2022-03-01",
                                              "name": "[format('{0}/{1}', parameters('hostingEnvironmentName'), 'networking')]",
                                              "properties": {
                                                "allowNewPrivateEndpointConnections": "[parameters('allowNewPrivateEndpointConnections')]",
                                                "ftpEnabled": "[parameters('ftpEnabled')]",
                                                "inboundIpAddressOverride": "[parameters('inboundIpAddressOverride')]",
                                                "remoteDebugEnabled": "[parameters('remoteDebugEnabled')]"
                                              }
                                            }
                                          ],
                                          "outputs": {
                                            "name": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "The name of the configuration."
                                              },
                                              "value": "networking"
                                            },
                                            "resourceId": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "The resource ID of the deployed configuration."
                                              },
                                              "value": "[resourceId('Microsoft.Web/hostingEnvironments/configurations', parameters('hostingEnvironmentName'), 'networking')]"
                                            },
                                            "resourceGroupName": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "The resource group of the deployed configuration."
                                              },
                                              "value": "[resourceGroup().name]"
                                            }
                                          }
                                        }
                                      },
                                      "dependsOn": [
                                        "appServiceEnvironment"
                                      ]
                                    },
                                    "appServiceEnvironment_configurations_customDnsSuffix": {
                                      "condition": "[not(empty(parameters('customDnsSuffix')))]",
                                      "type": "Microsoft.Resources/deployments",
                                      "apiVersion": "2022-09-01",
                                      "name": "[format('{0}-AppServiceEnv-Configurations-CustomDnsSuffix', uniqueString(deployment().name, parameters('location')))]",
                                      "properties": {
                                        "expressionEvaluationOptions": {
                                          "scope": "inner"
                                        },
                                        "mode": "Incremental",
                                        "parameters": {
                                          "hostingEnvironmentName": {
                                            "value": "[parameters('name')]"
                                          },
                                          "certificateUrl": {
                                            "value": "[parameters('customDnsSuffixCertificateUrl')]"
                                          },
                                          "keyVaultReferenceIdentity": {
                                            "value": "[parameters('customDnsSuffixKeyVaultReferenceIdentity')]"
                                          },
                                          "dnsSuffix": {
                                            "value": "[parameters('customDnsSuffix')]"
                                          }
                                        },
                                        "template": {
                                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                          "contentVersion": "1.0.0.0",
                                          "metadata": {
                                            "_generator": {
                                              "name": "bicep",
                                              "version": "0.28.1.47646",
                                              "templateHash": "12791869385776671140"
                                            },
                                            "name": "Hosting Environment Custom DNS Suffix Configuration",
                                            "description": "This module deploys a Hosting Environment Custom DNS Suffix Configuration.",
                                            "owner": "Azure/module-maintainers"
                                          },
                                          "parameters": {
                                            "hostingEnvironmentName": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "Conditional. The name of the parent Hosting Environment. Required if the template is used in a standalone deployment."
                                              }
                                            },
                                            "dnsSuffix": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "Required. Enable the default custom domain suffix to use for all sites deployed on the ASE."
                                              }
                                            },
                                            "certificateUrl": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "Required. The URL referencing the Azure Key Vault certificate secret that should be used as the default SSL/TLS certificate for sites with the custom domain suffix."
                                              }
                                            },
                                            "keyVaultReferenceIdentity": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "Required. The user-assigned identity to use for resolving the key vault certificate reference. If not specified, the system-assigned ASE identity will be used if available."
                                              }
                                            }
                                          },
                                          "resources": [
                                            {
                                              "type": "Microsoft.Web/hostingEnvironments/configurations",
                                              "apiVersion": "2022-03-01",
                                              "name": "[format('{0}/{1}', parameters('hostingEnvironmentName'), 'customdnssuffix')]",
                                              "properties": {
                                                "certificateUrl": "[parameters('certificateUrl')]",
                                                "keyVaultReferenceIdentity": "[parameters('keyVaultReferenceIdentity')]",
                                                "dnsSuffix": "[parameters('dnsSuffix')]"
                                              }
                                            }
                                          ],
                                          "outputs": {
                                            "name": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "The name of the configuration."
                                              },
                                              "value": "customdnssuffix"
                                            },
                                            "resourceId": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "The resource ID of the deployed configuration."
                                              },
                                              "value": "[resourceId('Microsoft.Web/hostingEnvironments/configurations', parameters('hostingEnvironmentName'), 'customdnssuffix')]"
                                            },
                                            "resourceGroupName": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "The resource group of the deployed configuration."
                                              },
                                              "value": "[resourceGroup().name]"
                                            }
                                          }
                                        }
                                      },
                                      "dependsOn": [
                                        "appServiceEnvironment"
                                      ]
                                    }
                                  },
                                  "outputs": {
                                    "resourceId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource ID of the App Service Environment."
                                      },
                                      "value": "[resourceId('Microsoft.Web/hostingEnvironments', parameters('name'))]"
                                    },
                                    "resourceGroupName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource group the App Service Environment was deployed into."
                                      },
                                      "value": "[resourceGroup().name]"
                                    },
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the App Service Environment."
                                      },
                                      "value": "[parameters('name')]"
                                    },
                                    "location": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The location the resource was deployed into."
                                      },
                                      "value": "[reference('appServiceEnvironment', '2022-03-01', 'full').location]"
                                    },
                                    "systemAssignedMIPrincipalId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The principal ID of the system assigned identity."
                                      },
                                      "value": "[coalesce(tryGet(tryGet(reference('appServiceEnvironment', '2022-03-01', 'full'), 'identity'), 'principalId'), '')]"
                                    }
                                  }
                                }
                              }
                            },
                            {
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "asev3-hub-PrivateDnsZone-Deployment",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "name": {
                                    "value": "[format('{0}.appserviceenvironment.net', reference(resourceId('Microsoft.Resources/deployments', take(format('{0}-ASEv3-Deployment', parameters('name')), 64)), '2022-09-01').outputs.name.value)]"
                                  },
                                  "virtualNetworkLinks": {
                                    "value": "[parameters('virtualNetworkLinks')]"
                                  },
                                  "tags": {
                                    "value": "[parameters('tags')]"
                                  },
                                  "a": {
                                    "value": [
                                      {
                                        "name": "*",
                                        "aRecords": [
                                          {
                                            "ipv4Address": "[reference(resourceId('Microsoft.Web/hostingEnvironments', parameters('name')), '2023-12-01').networkingConfiguration.properties.internalInboundIpAddresses[0]]"
                                          }
                                        ],
                                        "ttl": 3600
                                      },
                                      {
                                        "name": "*.scm",
                                        "aRecords": [
                                          {
                                            "ipv4Address": "[reference(resourceId('Microsoft.Web/hostingEnvironments', parameters('name')), '2023-12-01').networkingConfiguration.properties.internalInboundIpAddresses[0]]"
                                          }
                                        ],
                                        "ttl": 3600
                                      },
                                      {
                                        "name": "@",
                                        "aRecords": [
                                          {
                                            "ipv4Address": "[reference(resourceId('Microsoft.Web/hostingEnvironments', parameters('name')), '2023-12-01').networkingConfiguration.properties.internalInboundIpAddresses[0]]"
                                          }
                                        ],
                                        "ttl": 3600
                                      }
                                    ]
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "languageVersion": "2.0",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.29.47.4906",
                                      "templateHash": "5518185016108244461"
                                    },
                                    "name": "Private DNS Zones",
                                    "description": "This module deploys a Private DNS zone.",
                                    "owner": "Azure/module-maintainers"
                                  },
                                  "definitions": {
                                    "roleAssignmentType": {
                                      "type": "array",
                                      "items": {
                                        "type": "object",
                                        "properties": {
                                          "name": {
                                            "type": "string",
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. The name (as GUID) of the role assignment. If not provided, a GUID will be generated."
                                            }
                                          },
                                          "roleDefinitionIdOrName": {
                                            "type": "string",
                                            "metadata": {
                                              "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                                            }
                                          },
                                          "principalId": {
                                            "type": "string",
                                            "metadata": {
                                              "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                                            }
                                          },
                                          "principalType": {
                                            "type": "string",
                                            "allowedValues": [
                                              "Device",
                                              "ForeignGroup",
                                              "Group",
                                              "ServicePrincipal",
                                              "User"
                                            ],
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. The principal type of the assigned principal ID."
                                            }
                                          },
                                          "description": {
                                            "type": "string",
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. The description of the role assignment."
                                            }
                                          },
                                          "condition": {
                                            "type": "string",
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                                            }
                                          },
                                          "conditionVersion": {
                                            "type": "string",
                                            "allowedValues": [
                                              "2.0"
                                            ],
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. Version of the condition."
                                            }
                                          },
                                          "delegatedManagedIdentityResourceId": {
                                            "type": "string",
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. The Resource Id of the delegated managed identity resource."
                                            }
                                          }
                                        }
                                      },
                                      "nullable": true
                                    },
                                    "lockType": {
                                      "type": "object",
                                      "properties": {
                                        "name": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. Specify the name of lock."
                                          }
                                        },
                                        "kind": {
                                          "type": "string",
                                          "allowedValues": [
                                            "CanNotDelete",
                                            "None",
                                            "ReadOnly"
                                          ],
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. Specify the type of lock."
                                          }
                                        }
                                      },
                                      "nullable": true
                                    },
                                    "aType": {
                                      "type": "array",
                                      "items": {
                                        "type": "object",
                                        "properties": {
                                          "name": {
                                            "type": "string",
                                            "metadata": {
                                              "description": "Required. The name of the record."
                                            }
                                          },
                                          "metadata": {
                                            "type": "object",
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. The metadata of the record."
                                            }
                                          },
                                          "ttl": {
                                            "type": "int",
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. The TTL of the record."
                                            }
                                          },
                                          "roleAssignments": {
                                            "$ref": "#/definitions/roleAssignmentType",
                                            "metadata": {
                                              "description": "Optional. Array of role assignments to create."
                                            }
                                          },
                                          "aRecords": {
                                            "type": "array",
                                            "items": {
                                              "type": "object",
                                              "properties": {
                                                "ipv4Address": {
                                                  "type": "string",
                                                  "metadata": {
                                                    "description": "Required. The IPv4 address of this A record."
                                                  }
                                                }
                                              }
                                            },
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. The list of A records in the record set."
                                            }
                                          }
                                        }
                                      },
                                      "nullable": true
                                    },
                                    "aaaaType": {
                                      "type": "array",
                                      "items": {
                                        "type": "object",
                                        "properties": {
                                          "name": {
                                            "type": "string",
                                            "metadata": {
                                              "description": "Required. The name of the record."
                                            }
                                          },
                                          "metadata": {
                                            "type": "object",
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. The metadata of the record."
                                            }
                                          },
                                          "ttl": {
                                            "type": "int",
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. The TTL of the record."
                                            }
                                          },
                                          "roleAssignments": {
                                            "$ref": "#/definitions/roleAssignmentType",
                                            "metadata": {
                                              "description": "Optional. Array of role assignments to create."
                                            }
                                          },
                                          "aaaaRecords": {
                                            "type": "array",
                                            "items": {
                                              "type": "object",
                                              "properties": {
                                                "ipv6Address": {
                                                  "type": "string",
                                                  "metadata": {
                                                    "description": "Required. The IPv6 address of this AAAA record."
                                                  }
                                                }
                                              }
                                            },
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. The list of AAAA records in the record set."
                                            }
                                          }
                                        }
                                      },
                                      "nullable": true
                                    },
                                    "cnameType": {
                                      "type": "array",
                                      "items": {
                                        "type": "object",
                                        "properties": {
                                          "name": {
                                            "type": "string",
                                            "metadata": {
                                              "description": "Required. The name of the record."
                                            }
                                          },
                                          "metadata": {
                                            "type": "object",
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. The metadata of the record."
                                            }
                                          },
                                          "ttl": {
                                            "type": "int",
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. The TTL of the record."
                                            }
                                          },
                                          "roleAssignments": {
                                            "$ref": "#/definitions/roleAssignmentType",
                                            "metadata": {
                                              "description": "Optional. Array of role assignments to create."
                                            }
                                          },
                                          "cnameRecord": {
                                            "type": "object",
                                            "properties": {
                                              "cname": {
                                                "type": "string",
                                                "metadata": {
                                                  "description": "Required. The canonical name of the CNAME record."
                                                }
                                              }
                                            },
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. The CNAME record in the record set."
                                            }
                                          }
                                        }
                                      },
                                      "nullable": true
                                    },
                                    "mxType": {
                                      "type": "array",
                                      "items": {
                                        "type": "object",
                                        "properties": {
                                          "name": {
                                            "type": "string",
                                            "metadata": {
                                              "description": "Required. The name of the record."
                                            }
                                          },
                                          "metadata": {
                                            "type": "object",
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. The metadata of the record."
                                            }
                                          },
                                          "ttl": {
                                            "type": "int",
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. The TTL of the record."
                                            }
                                          },
                                          "roleAssignments": {
                                            "$ref": "#/definitions/roleAssignmentType",
                                            "metadata": {
                                              "description": "Optional. Array of role assignments to create."
                                            }
                                          },
                                          "mxRecords": {
                                            "type": "array",
                                            "items": {
                                              "type": "object",
                                              "properties": {
                                                "exchange": {
                                                  "type": "string",
                                                  "metadata": {
                                                    "description": "Required. The domain name of the mail host for this MX record."
                                                  }
                                                },
                                                "preference": {
                                                  "type": "int",
                                                  "metadata": {
                                                    "description": "Required. The preference value for this MX record."
                                                  }
                                                }
                                              }
                                            },
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. The list of MX records in the record set."
                                            }
                                          }
                                        }
                                      },
                                      "nullable": true
                                    },
                                    "ptrType": {
                                      "type": "array",
                                      "items": {
                                        "type": "object",
                                        "properties": {
                                          "name": {
                                            "type": "string",
                                            "metadata": {
                                              "description": "Required. The name of the record."
                                            }
                                          },
                                          "metadata": {
                                            "type": "object",
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. The metadata of the record."
                                            }
                                          },
                                          "ttl": {
                                            "type": "int",
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. The TTL of the record."
                                            }
                                          },
                                          "roleAssignments": {
                                            "$ref": "#/definitions/roleAssignmentType",
                                            "metadata": {
                                              "description": "Optional. Array of role assignments to create."
                                            }
                                          },
                                          "ptrRecords": {
                                            "type": "array",
                                            "items": {
                                              "type": "object",
                                              "properties": {
                                                "ptrdname": {
                                                  "type": "string",
                                                  "metadata": {
                                                    "description": "Required. The PTR target domain name for this PTR record."
                                                  }
                                                }
                                              }
                                            },
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. The list of PTR records in the record set."
                                            }
                                          }
                                        }
                                      },
                                      "nullable": true
                                    },
                                    "soaType": {
                                      "type": "array",
                                      "items": {
                                        "type": "object",
                                        "properties": {
                                          "name": {
                                            "type": "string",
                                            "metadata": {
                                              "description": "Required. The name of the record."
                                            }
                                          },
                                          "metadata": {
                                            "type": "object",
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. The metadata of the record."
                                            }
                                          },
                                          "ttl": {
                                            "type": "int",
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. The TTL of the record."
                                            }
                                          },
                                          "roleAssignments": {
                                            "$ref": "#/definitions/roleAssignmentType",
                                            "metadata": {
                                              "description": "Optional. Array of role assignments to create."
                                            }
                                          },
                                          "soaRecord": {
                                            "type": "object",
                                            "properties": {
                                              "email": {
                                                "type": "string",
                                                "metadata": {
                                                  "description": "Required. The email contact for this SOA record."
                                                }
                                              },
                                              "expireTime": {
                                                "type": "int",
                                                "metadata": {
                                                  "description": "Required. The expire time for this SOA record."
                                                }
                                              },
                                              "host": {
                                                "type": "string",
                                                "metadata": {
                                                  "description": "Required. The domain name of the authoritative name server for this SOA record."
                                                }
                                              },
                                              "minimumTtl": {
                                                "type": "int",
                                                "metadata": {
                                                  "description": "Required. The minimum value for this SOA record. By convention this is used to determine the negative caching duration."
                                                }
                                              },
                                              "refreshTime": {
                                                "type": "int",
                                                "metadata": {
                                                  "description": "Required. The refresh value for this SOA record."
                                                }
                                              },
                                              "retryTime": {
                                                "type": "int",
                                                "metadata": {
                                                  "description": "Required. The retry time for this SOA record."
                                                }
                                              },
                                              "serialNumber": {
                                                "type": "int",
                                                "metadata": {
                                                  "description": "Required. The serial number for this SOA record."
                                                }
                                              }
                                            },
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. The SOA record in the record set."
                                            }
                                          }
                                        }
                                      },
                                      "nullable": true
                                    },
                                    "srvType": {
                                      "type": "array",
                                      "items": {
                                        "type": "object",
                                        "properties": {
                                          "name": {
                                            "type": "string",
                                            "metadata": {
                                              "description": "Required. The name of the record."
                                            }
                                          },
                                          "metadata": {
                                            "type": "object",
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. The metadata of the record."
                                            }
                                          },
                                          "ttl": {
                                            "type": "int",
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. The TTL of the record."
                                            }
                                          },
                                          "roleAssignments": {
                                            "$ref": "#/definitions/roleAssignmentType",
                                            "metadata": {
                                              "description": "Optional. Array of role assignments to create."
                                            }
                                          },
                                          "srvRecords": {
                                            "type": "array",
                                            "items": {
                                              "type": "object",
                                              "properties": {
                                                "priority": {
                                                  "type": "int",
                                                  "metadata": {
                                                    "description": "Required. The priority value for this SRV record."
                                                  }
                                                },
                                                "weight": {
                                                  "type": "int",
                                                  "metadata": {
                                                    "description": "Required. The weight value for this SRV record."
                                                  }
                                                },
                                                "port": {
                                                  "type": "int",
                                                  "metadata": {
                                                    "description": "Required. The port value for this SRV record."
                                                  }
                                                },
                                                "target": {
                                                  "type": "string",
                                                  "metadata": {
                                                    "description": "Required. The target domain name for this SRV record."
                                                  }
                                                }
                                              }
                                            },
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. The list of SRV records in the record set."
                                            }
                                          }
                                        }
                                      },
                                      "nullable": true
                                    },
                                    "txtType": {
                                      "type": "array",
                                      "items": {
                                        "type": "object",
                                        "properties": {
                                          "name": {
                                            "type": "string",
                                            "metadata": {
                                              "description": "Required. The name of the record."
                                            }
                                          },
                                          "metadata": {
                                            "type": "object",
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. The metadata of the record."
                                            }
                                          },
                                          "ttl": {
                                            "type": "int",
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. The TTL of the record."
                                            }
                                          },
                                          "roleAssignments": {
                                            "$ref": "#/definitions/roleAssignmentType",
                                            "metadata": {
                                              "description": "Optional. Array of role assignments to create."
                                            }
                                          },
                                          "txtRecords": {
                                            "type": "array",
                                            "items": {
                                              "type": "object",
                                              "properties": {
                                                "value": {
                                                  "type": "array",
                                                  "items": {
                                                    "type": "string"
                                                  },
                                                  "metadata": {
                                                    "description": "Required. The text value of this TXT record."
                                                  }
                                                }
                                              }
                                            },
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. The list of TXT records in the record set."
                                            }
                                          }
                                        }
                                      },
                                      "nullable": true
                                    },
                                    "virtualNetworkLinkType": {
                                      "type": "array",
                                      "items": {
                                        "type": "object",
                                        "properties": {
                                          "name": {
                                            "type": "string",
                                            "nullable": true,
                                            "minLength": 1,
                                            "maxLength": 80,
                                            "metadata": {
                                              "description": "Optional. The resource name."
                                            }
                                          },
                                          "virtualNetworkResourceId": {
                                            "type": "string",
                                            "metadata": {
                                              "description": "Required. The resource ID of the virtual network to link."
                                            }
                                          },
                                          "location": {
                                            "type": "string",
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. The Azure Region where the resource lives."
                                            }
                                          },
                                          "registrationEnabled": {
                                            "type": "bool",
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. Is auto-registration of virtual machine records in the virtual network in the Private DNS zone enabled?."
                                            }
                                          },
                                          "tags": {
                                            "type": "object",
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. Resource tags."
                                            }
                                          }
                                        }
                                      },
                                      "nullable": true
                                    }
                                  },
                                  "parameters": {
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. Private DNS zone name."
                                      }
                                    },
                                    "a": {
                                      "$ref": "#/definitions/aType",
                                      "metadata": {
                                        "description": "Optional. Array of A records."
                                      }
                                    },
                                    "aaaa": {
                                      "$ref": "#/definitions/aaaaType",
                                      "metadata": {
                                        "description": "Optional. Array of AAAA records."
                                      }
                                    },
                                    "cname": {
                                      "$ref": "#/definitions/cnameType",
                                      "metadata": {
                                        "description": "Optional. Array of CNAME records."
                                      }
                                    },
                                    "mx": {
                                      "$ref": "#/definitions/mxType",
                                      "metadata": {
                                        "description": "Optional. Array of MX records."
                                      }
                                    },
                                    "ptr": {
                                      "$ref": "#/definitions/ptrType",
                                      "metadata": {
                                        "description": "Optional. Array of PTR records."
                                      }
                                    },
                                    "soa": {
                                      "$ref": "#/definitions/soaType",
                                      "metadata": {
                                        "description": "Optional. Array of SOA records."
                                      }
                                    },
                                    "srv": {
                                      "$ref": "#/definitions/srvType",
                                      "metadata": {
                                        "description": "Optional. Array of SRV records."
                                      }
                                    },
                                    "txt": {
                                      "$ref": "#/definitions/txtType",
                                      "metadata": {
                                        "description": "Optional. Array of TXT records."
                                      }
                                    },
                                    "virtualNetworkLinks": {
                                      "$ref": "#/definitions/virtualNetworkLinkType",
                                      "metadata": {
                                        "description": "Optional. Array of custom objects describing vNet links of the DNS zone. Each object should contain properties 'virtualNetworkResourceId' and 'registrationEnabled'. The 'vnetResourceId' is a resource ID of a vNet to link, 'registrationEnabled' (bool) enables automatic DNS registration in the zone for the linked vNet."
                                      }
                                    },
                                    "location": {
                                      "type": "string",
                                      "defaultValue": "global",
                                      "metadata": {
                                        "description": "Optional. The location of the PrivateDNSZone. Should be global."
                                      }
                                    },
                                    "roleAssignments": {
                                      "$ref": "#/definitions/roleAssignmentType",
                                      "metadata": {
                                        "description": "Optional. Array of role assignments to create."
                                      }
                                    },
                                    "tags": {
                                      "type": "object",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. Tags of the resource."
                                      }
                                    },
                                    "lock": {
                                      "$ref": "#/definitions/lockType",
                                      "metadata": {
                                        "description": "Optional. The lock settings of the service."
                                      }
                                    },
                                    "enableTelemetry": {
                                      "type": "bool",
                                      "defaultValue": true,
                                      "metadata": {
                                        "description": "Optional. Enable/Disable usage telemetry for module."
                                      }
                                    }
                                  },
                                  "variables": {
                                    "copy": [
                                      {
                                        "name": "formattedRoleAssignments",
                                        "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]",
                                        "input": "[union(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')], createObject('roleDefinitionId', coalesce(tryGet(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName), if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName)))))]"
                                      }
                                    ],
                                    "builtInRoleNames": {
                                      "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                                      "Network Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4d97b98b-1d4f-4787-a291-c67834d212e7')]",
                                      "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                                      "Private DNS Zone Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b12aa53e-6015-4669-85d0-8515ebb3ae7f')]",
                                      "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                                      "Role Based Access Control Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]"
                                    }
                                  },
                                  "resources": {
                                    "avmTelemetry": {
                                      "condition": "[parameters('enableTelemetry')]",
                                      "type": "Microsoft.Resources/deployments",
                                      "apiVersion": "2024-03-01",
                                      "name": "[format('46d3xbcp.res.network-privatednszone.{0}.{1}', replace('0.6.0', '.', '-'), substring(uniqueString(deployment().name, parameters('location')), 0, 4))]",
                                      "properties": {
                                        "mode": "Incremental",
                                        "template": {
                                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                          "contentVersion": "1.0.0.0",
                                          "resources": [],
                                          "outputs": {
                                            "telemetry": {
                                              "type": "String",
                                              "value": "For more information, see https://aka.ms/avm/TelemetryInfo"
                                            }
                                          }
                                        }
                                      }
                                    },
                                    "privateDnsZone": {
                                      "type": "Microsoft.Network/privateDnsZones",
                                      "apiVersion": "2020-06-01",
                                      "name": "[parameters('name')]",
                                      "location": "[parameters('location')]",
                                      "tags": "[parameters('tags')]"
                                    },
                                    "privateDnsZone_lock": {
                                      "condition": "[and(not(empty(coalesce(parameters('lock'), createObject()))), not(equals(tryGet(parameters('lock'), 'kind'), 'None')))]",
                                      "type": "Microsoft.Authorization/locks",
                                      "apiVersion": "2020-05-01",
                                      "scope": "[format('Microsoft.Network/privateDnsZones/{0}', parameters('name'))]",
                                      "name": "[coalesce(tryGet(parameters('lock'), 'name'), format('lock-{0}', parameters('name')))]",
                                      "properties": {
                                        "level": "[coalesce(tryGet(parameters('lock'), 'kind'), '')]",
                                        "notes": "[if(equals(tryGet(parameters('lock'), 'kind'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot delete or modify the resource or child resources.')]"
                                      },
                                      "dependsOn": [
                                        "privateDnsZone"
                                      ]
                                    },
                                    "privateDnsZone_roleAssignments": {
                                      "copy": {
                                        "name": "privateDnsZone_roleAssignments",
                                        "count": "[length(coalesce(variables('formattedRoleAssignments'), createArray()))]"
                                      },
                                      "type": "Microsoft.Authorization/roleAssignments",
                                      "apiVersion": "2022-04-01",
                                      "scope": "[format('Microsoft.Network/privateDnsZones/{0}', parameters('name'))]",
                                      "name": "[coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'name'), guid(resourceId('Microsoft.Network/privateDnsZones', parameters('name')), coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId, coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId))]",
                                      "properties": {
                                        "roleDefinitionId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId]",
                                        "principalId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId]",
                                        "description": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'description')]",
                                        "principalType": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'principalType')]",
                                        "condition": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition')]",
                                        "conditionVersion": "[if(not(empty(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                                        "delegatedManagedIdentityResourceId": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
                                      },
                                      "dependsOn": [
                                        "privateDnsZone"
                                      ]
                                    },
                                    "privateDnsZone_A": {
                                      "copy": {
                                        "name": "privateDnsZone_A",
                                        "count": "[length(coalesce(parameters('a'), createArray()))]"
                                      },
                                      "type": "Microsoft.Resources/deployments",
                                      "apiVersion": "2022-09-01",
                                      "name": "[format('{0}-PrivateDnsZone-ARecord-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
                                      "properties": {
                                        "expressionEvaluationOptions": {
                                          "scope": "inner"
                                        },
                                        "mode": "Incremental",
                                        "parameters": {
                                          "privateDnsZoneName": {
                                            "value": "[parameters('name')]"
                                          },
                                          "name": {
                                            "value": "[coalesce(parameters('a'), createArray())[copyIndex()].name]"
                                          },
                                          "aRecords": {
                                            "value": "[tryGet(coalesce(parameters('a'), createArray())[copyIndex()], 'aRecords')]"
                                          },
                                          "metadata": {
                                            "value": "[tryGet(coalesce(parameters('a'), createArray())[copyIndex()], 'metadata')]"
                                          },
                                          "ttl": {
                                            "value": "[coalesce(tryGet(coalesce(parameters('a'), createArray())[copyIndex()], 'ttl'), 3600)]"
                                          },
                                          "roleAssignments": {
                                            "value": "[tryGet(coalesce(parameters('a'), createArray())[copyIndex()], 'roleAssignments')]"
                                          }
                                        },
                                        "template": {
                                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                          "languageVersion": "2.0",
                                          "contentVersion": "1.0.0.0",
                                          "metadata": {
                                            "_generator": {
                                              "name": "bicep",
                                              "version": "0.29.47.4906",
                                              "templateHash": "1641889417618452692"
                                            },
                                            "name": "Private DNS Zone A record",
                                            "description": "This module deploys a Private DNS Zone A record.",
                                            "owner": "Azure/module-maintainers"
                                          },
                                          "definitions": {
                                            "roleAssignmentType": {
                                              "type": "array",
                                              "items": {
                                                "type": "object",
                                                "properties": {
                                                  "name": {
                                                    "type": "string",
                                                    "nullable": true,
                                                    "metadata": {
                                                      "description": "Optional. The name (as GUID) of the role assignment. If not provided, a GUID will be generated."
                                                    }
                                                  },
                                                  "roleDefinitionIdOrName": {
                                                    "type": "string",
                                                    "metadata": {
                                                      "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                                                    }
                                                  },
                                                  "principalId": {
                                                    "type": "string",
                                                    "metadata": {
                                                      "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                                                    }
                                                  },
                                                  "principalType": {
                                                    "type": "string",
                                                    "allowedValues": [
                                                      "Device",
                                                      "ForeignGroup",
                                                      "Group",
                                                      "ServicePrincipal",
                                                      "User"
                                                    ],
                                                    "nullable": true,
                                                    "metadata": {
                                                      "description": "Optional. The principal type of the assigned principal ID."
                                                    }
                                                  },
                                                  "description": {
                                                    "type": "string",
                                                    "nullable": true,
                                                    "metadata": {
                                                      "description": "Optional. The description of the role assignment."
                                                    }
                                                  },
                                                  "condition": {
                                                    "type": "string",
                                                    "nullable": true,
                                                    "metadata": {
                                                      "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                                                    }
                                                  },
                                                  "conditionVersion": {
                                                    "type": "string",
                                                    "allowedValues": [
                                                      "2.0"
                                                    ],
                                                    "nullable": true,
                                                    "metadata": {
                                                      "description": "Optional. Version of the condition."
                                                    }
                                                  },
                                                  "delegatedManagedIdentityResourceId": {
                                                    "type": "string",
                                                    "nullable": true,
                                                    "metadata": {
                                                      "description": "Optional. The Resource Id of the delegated managed identity resource."
                                                    }
                                                  }
                                                }
                                              },
                                              "nullable": true
                                            }
                                          },
                                          "parameters": {
                                            "privateDnsZoneName": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "Conditional. The name of the parent Private DNS zone. Required if the template is used in a standalone deployment."
                                              }
                                            },
                                            "name": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "Required. The name of the A record."
                                              }
                                            },
                                            "aRecords": {
                                              "type": "array",
                                              "nullable": true,
                                              "metadata": {
                                                "description": "Optional. The list of A records in the record set."
                                              }
                                            },
                                            "metadata": {
                                              "type": "object",
                                              "nullable": true,
                                              "metadata": {
                                                "description": "Optional. The metadata attached to the record set."
                                              }
                                            },
                                            "ttl": {
                                              "type": "int",
                                              "defaultValue": 3600,
                                              "metadata": {
                                                "description": "Optional. The TTL (time-to-live) of the records in the record set."
                                              }
                                            },
                                            "roleAssignments": {
                                              "$ref": "#/definitions/roleAssignmentType",
                                              "metadata": {
                                                "description": "Optional. Array of role assignments to create."
                                              }
                                            }
                                          },
                                          "variables": {
                                            "copy": [
                                              {
                                                "name": "formattedRoleAssignments",
                                                "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]",
                                                "input": "[union(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')], createObject('roleDefinitionId', coalesce(tryGet(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName), if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName)))))]"
                                              }
                                            ],
                                            "builtInRoleNames": {
                                              "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                                              "Private DNS Zone Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b12aa53e-6015-4669-85d0-8515ebb3ae7f')]",
                                              "Network Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4d97b98b-1d4f-4787-a291-c67834d212e7')]",
                                              "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                                              "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                                              "Role Based Access Control Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]",
                                              "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]"
                                            }
                                          },
                                          "resources": {
                                            "privateDnsZone": {
                                              "existing": true,
                                              "type": "Microsoft.Network/privateDnsZones",
                                              "apiVersion": "2020-06-01",
                                              "name": "[parameters('privateDnsZoneName')]"
                                            },
                                            "A": {
                                              "type": "Microsoft.Network/privateDnsZones/A",
                                              "apiVersion": "2020-06-01",
                                              "name": "[format('{0}/{1}', parameters('privateDnsZoneName'), parameters('name'))]",
                                              "properties": {
                                                "aRecords": "[parameters('aRecords')]",
                                                "metadata": "[parameters('metadata')]",
                                                "ttl": "[parameters('ttl')]"
                                              },
                                              "dependsOn": [
                                                "privateDnsZone"
                                              ]
                                            },
                                            "A_roleAssignments": {
                                              "copy": {
                                                "name": "A_roleAssignments",
                                                "count": "[length(coalesce(variables('formattedRoleAssignments'), createArray()))]"
                                              },
                                              "type": "Microsoft.Authorization/roleAssignments",
                                              "apiVersion": "2022-04-01",
                                              "scope": "[format('Microsoft.Network/privateDnsZones/{0}/A/{1}', parameters('privateDnsZoneName'), parameters('name'))]",
                                              "name": "[coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'name'), guid(resourceId('Microsoft.Network/privateDnsZones/A', parameters('privateDnsZoneName'), parameters('name')), coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId, coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId))]",
                                              "properties": {
                                                "roleDefinitionId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId]",
                                                "principalId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId]",
                                                "description": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'description')]",
                                                "principalType": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'principalType')]",
                                                "condition": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition')]",
                                                "conditionVersion": "[if(not(empty(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                                                "delegatedManagedIdentityResourceId": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
                                              },
                                              "dependsOn": [
                                                "A"
                                              ]
                                            }
                                          },
                                          "outputs": {
                                            "name": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "The name of the deployed A record."
                                              },
                                              "value": "[parameters('name')]"
                                            },
                                            "resourceId": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "The resource ID of the deployed A record."
                                              },
                                              "value": "[resourceId('Microsoft.Network/privateDnsZones/A', parameters('privateDnsZoneName'), parameters('name'))]"
                                            },
                                            "resourceGroupName": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "The resource group of the deployed A record."
                                              },
                                              "value": "[resourceGroup().name]"
                                            }
                                          }
                                        }
                                      },
                                      "dependsOn": [
                                        "privateDnsZone"
                                      ]
                                    },
                                    "privateDnsZone_AAAA": {
                                      "copy": {
                                        "name": "privateDnsZone_AAAA",
                                        "count": "[length(coalesce(parameters('aaaa'), createArray()))]"
                                      },
                                      "type": "Microsoft.Resources/deployments",
                                      "apiVersion": "2022-09-01",
                                      "name": "[format('{0}-PrivateDnsZone-AAAARecord-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
                                      "properties": {
                                        "expressionEvaluationOptions": {
                                          "scope": "inner"
                                        },
                                        "mode": "Incremental",
                                        "parameters": {
                                          "privateDnsZoneName": {
                                            "value": "[parameters('name')]"
                                          },
                                          "name": {
                                            "value": "[coalesce(parameters('aaaa'), createArray())[copyIndex()].name]"
                                          },
                                          "aaaaRecords": {
                                            "value": "[tryGet(coalesce(parameters('aaaa'), createArray())[copyIndex()], 'aaaaRecords')]"
                                          },
                                          "metadata": {
                                            "value": "[tryGet(coalesce(parameters('aaaa'), createArray())[copyIndex()], 'metadata')]"
                                          },
                                          "ttl": {
                                            "value": "[coalesce(tryGet(coalesce(parameters('aaaa'), createArray())[copyIndex()], 'ttl'), 3600)]"
                                          },
                                          "roleAssignments": {
                                            "value": "[tryGet(coalesce(parameters('aaaa'), createArray())[copyIndex()], 'roleAssignments')]"
                                          }
                                        },
                                        "template": {
                                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                          "languageVersion": "2.0",
                                          "contentVersion": "1.0.0.0",
                                          "metadata": {
                                            "_generator": {
                                              "name": "bicep",
                                              "version": "0.29.47.4906",
                                              "templateHash": "17163414995652446126"
                                            },
                                            "name": "Private DNS Zone AAAA record",
                                            "description": "This module deploys a Private DNS Zone AAAA record.",
                                            "owner": "Azure/module-maintainers"
                                          },
                                          "definitions": {
                                            "roleAssignmentType": {
                                              "type": "array",
                                              "items": {
                                                "type": "object",
                                                "properties": {
                                                  "name": {
                                                    "type": "string",
                                                    "nullable": true,
                                                    "metadata": {
                                                      "description": "Optional. The name (as GUID) of the role assignment. If not provided, a GUID will be generated."
                                                    }
                                                  },
                                                  "roleDefinitionIdOrName": {
                                                    "type": "string",
                                                    "metadata": {
                                                      "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                                                    }
                                                  },
                                                  "principalId": {
                                                    "type": "string",
                                                    "metadata": {
                                                      "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                                                    }
                                                  },
                                                  "principalType": {
                                                    "type": "string",
                                                    "allowedValues": [
                                                      "Device",
                                                      "ForeignGroup",
                                                      "Group",
                                                      "ServicePrincipal",
                                                      "User"
                                                    ],
                                                    "nullable": true,
                                                    "metadata": {
                                                      "description": "Optional. The principal type of the assigned principal ID."
                                                    }
                                                  },
                                                  "description": {
                                                    "type": "string",
                                                    "nullable": true,
                                                    "metadata": {
                                                      "description": "Optional. The description of the role assignment."
                                                    }
                                                  },
                                                  "condition": {
                                                    "type": "string",
                                                    "nullable": true,
                                                    "metadata": {
                                                      "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                                                    }
                                                  },
                                                  "conditionVersion": {
                                                    "type": "string",
                                                    "allowedValues": [
                                                      "2.0"
                                                    ],
                                                    "nullable": true,
                                                    "metadata": {
                                                      "description": "Optional. Version of the condition."
                                                    }
                                                  },
                                                  "delegatedManagedIdentityResourceId": {
                                                    "type": "string",
                                                    "nullable": true,
                                                    "metadata": {
                                                      "description": "Optional. The Resource Id of the delegated managed identity resource."
                                                    }
                                                  }
                                                }
                                              },
                                              "nullable": true
                                            }
                                          },
                                          "parameters": {
                                            "privateDnsZoneName": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "Conditional. The name of the parent Private DNS zone. Required if the template is used in a standalone deployment."
                                              }
                                            },
                                            "name": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "Required. The name of the AAAA record."
                                              }
                                            },
                                            "aaaaRecords": {
                                              "type": "array",
                                              "nullable": true,
                                              "metadata": {
                                                "description": "Optional. The list of AAAA records in the record set."
                                              }
                                            },
                                            "metadata": {
                                              "type": "object",
                                              "nullable": true,
                                              "metadata": {
                                                "description": "Optional. The metadata attached to the record set."
                                              }
                                            },
                                            "ttl": {
                                              "type": "int",
                                              "defaultValue": 3600,
                                              "metadata": {
                                                "description": "Optional. The TTL (time-to-live) of the records in the record set."
                                              }
                                            },
                                            "roleAssignments": {
                                              "$ref": "#/definitions/roleAssignmentType",
                                              "metadata": {
                                                "description": "Optional. Array of role assignments to create."
                                              }
                                            }
                                          },
                                          "variables": {
                                            "copy": [
                                              {
                                                "name": "formattedRoleAssignments",
                                                "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]",
                                                "input": "[union(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')], createObject('roleDefinitionId', coalesce(tryGet(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName), if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName)))))]"
                                              }
                                            ],
                                            "builtInRoleNames": {
                                              "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                                              "Private DNS Zone Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b12aa53e-6015-4669-85d0-8515ebb3ae7f')]",
                                              "Network Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4d97b98b-1d4f-4787-a291-c67834d212e7')]",
                                              "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                                              "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                                              "Role Based Access Control Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]",
                                              "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]"
                                            }
                                          },
                                          "resources": {
                                            "privateDnsZone": {
                                              "existing": true,
                                              "type": "Microsoft.Network/privateDnsZones",
                                              "apiVersion": "2020-06-01",
                                              "name": "[parameters('privateDnsZoneName')]"
                                            },
                                            "AAAA": {
                                              "type": "Microsoft.Network/privateDnsZones/AAAA",
                                              "apiVersion": "2020-06-01",
                                              "name": "[format('{0}/{1}', parameters('privateDnsZoneName'), parameters('name'))]",
                                              "properties": {
                                                "aaaaRecords": "[parameters('aaaaRecords')]",
                                                "metadata": "[parameters('metadata')]",
                                                "ttl": "[parameters('ttl')]"
                                              },
                                              "dependsOn": [
                                                "privateDnsZone"
                                              ]
                                            },
                                            "AAAA_roleAssignments": {
                                              "copy": {
                                                "name": "AAAA_roleAssignments",
                                                "count": "[length(coalesce(variables('formattedRoleAssignments'), createArray()))]"
                                              },
                                              "type": "Microsoft.Authorization/roleAssignments",
                                              "apiVersion": "2022-04-01",
                                              "scope": "[format('Microsoft.Network/privateDnsZones/{0}/AAAA/{1}', parameters('privateDnsZoneName'), parameters('name'))]",
                                              "name": "[coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'name'), guid(resourceId('Microsoft.Network/privateDnsZones/AAAA', parameters('privateDnsZoneName'), parameters('name')), coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId, coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId))]",
                                              "properties": {
                                                "roleDefinitionId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId]",
                                                "principalId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId]",
                                                "description": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'description')]",
                                                "principalType": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'principalType')]",
                                                "condition": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition')]",
                                                "conditionVersion": "[if(not(empty(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                                                "delegatedManagedIdentityResourceId": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
                                              },
                                              "dependsOn": [
                                                "AAAA"
                                              ]
                                            }
                                          },
                                          "outputs": {
                                            "name": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "The name of the deployed AAAA record."
                                              },
                                              "value": "[parameters('name')]"
                                            },
                                            "resourceId": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "The resource ID of the deployed AAAA record."
                                              },
                                              "value": "[resourceId('Microsoft.Network/privateDnsZones/AAAA', parameters('privateDnsZoneName'), parameters('name'))]"
                                            },
                                            "resourceGroupName": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "The resource group of the deployed AAAA record."
                                              },
                                              "value": "[resourceGroup().name]"
                                            }
                                          }
                                        }
                                      },
                                      "dependsOn": [
                                        "privateDnsZone"
                                      ]
                                    },
                                    "privateDnsZone_CNAME": {
                                      "copy": {
                                        "name": "privateDnsZone_CNAME",
                                        "count": "[length(coalesce(parameters('cname'), createArray()))]"
                                      },
                                      "type": "Microsoft.Resources/deployments",
                                      "apiVersion": "2022-09-01",
                                      "name": "[format('{0}-PrivateDnsZone-CNAMERecord-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
                                      "properties": {
                                        "expressionEvaluationOptions": {
                                          "scope": "inner"
                                        },
                                        "mode": "Incremental",
                                        "parameters": {
                                          "privateDnsZoneName": {
                                            "value": "[parameters('name')]"
                                          },
                                          "name": {
                                            "value": "[coalesce(parameters('cname'), createArray())[copyIndex()].name]"
                                          },
                                          "cnameRecord": {
                                            "value": "[tryGet(coalesce(parameters('cname'), createArray())[copyIndex()], 'cnameRecord')]"
                                          },
                                          "metadata": {
                                            "value": "[tryGet(coalesce(parameters('cname'), createArray())[copyIndex()], 'metadata')]"
                                          },
                                          "ttl": {
                                            "value": "[coalesce(tryGet(coalesce(parameters('cname'), createArray())[copyIndex()], 'ttl'), 3600)]"
                                          },
                                          "roleAssignments": {
                                            "value": "[tryGet(coalesce(parameters('cname'), createArray())[copyIndex()], 'roleAssignments')]"
                                          }
                                        },
                                        "template": {
                                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                          "languageVersion": "2.0",
                                          "contentVersion": "1.0.0.0",
                                          "metadata": {
                                            "_generator": {
                                              "name": "bicep",
                                              "version": "0.29.47.4906",
                                              "templateHash": "2493714129104385633"
                                            },
                                            "name": "Private DNS Zone CNAME record",
                                            "description": "This module deploys a Private DNS Zone CNAME record.",
                                            "owner": "Azure/module-maintainers"
                                          },
                                          "definitions": {
                                            "roleAssignmentType": {
                                              "type": "array",
                                              "items": {
                                                "type": "object",
                                                "properties": {
                                                  "name": {
                                                    "type": "string",
                                                    "nullable": true,
                                                    "metadata": {
                                                      "description": "Optional. The name (as GUID) of the role assignment. If not provided, a GUID will be generated."
                                                    }
                                                  },
                                                  "roleDefinitionIdOrName": {
                                                    "type": "string",
                                                    "metadata": {
                                                      "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                                                    }
                                                  },
                                                  "principalId": {
                                                    "type": "string",
                                                    "metadata": {
                                                      "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                                                    }
                                                  },
                                                  "principalType": {
                                                    "type": "string",
                                                    "allowedValues": [
                                                      "Device",
                                                      "ForeignGroup",
                                                      "Group",
                                                      "ServicePrincipal",
                                                      "User"
                                                    ],
                                                    "nullable": true,
                                                    "metadata": {
                                                      "description": "Optional. The principal type of the assigned principal ID."
                                                    }
                                                  },
                                                  "description": {
                                                    "type": "string",
                                                    "nullable": true,
                                                    "metadata": {
                                                      "description": "Optional. The description of the role assignment."
                                                    }
                                                  },
                                                  "condition": {
                                                    "type": "string",
                                                    "nullable": true,
                                                    "metadata": {
                                                      "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                                                    }
                                                  },
                                                  "conditionVersion": {
                                                    "type": "string",
                                                    "allowedValues": [
                                                      "2.0"
                                                    ],
                                                    "nullable": true,
                                                    "metadata": {
                                                      "description": "Optional. Version of the condition."
                                                    }
                                                  },
                                                  "delegatedManagedIdentityResourceId": {
                                                    "type": "string",
                                                    "nullable": true,
                                                    "metadata": {
                                                      "description": "Optional. The Resource Id of the delegated managed identity resource."
                                                    }
                                                  }
                                                }
                                              },
                                              "nullable": true
                                            }
                                          },
                                          "parameters": {
                                            "privateDnsZoneName": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "Conditional. The name of the parent Private DNS zone. Required if the template is used in a standalone deployment."
                                              }
                                            },
                                            "name": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "Required. The name of the CNAME record."
                                              }
                                            },
                                            "cnameRecord": {
                                              "type": "object",
                                              "nullable": true,
                                              "metadata": {
                                                "description": "Optional. A CNAME record."
                                              }
                                            },
                                            "metadata": {
                                              "type": "object",
                                              "nullable": true,
                                              "metadata": {
                                                "description": "Optional. The metadata attached to the record set."
                                              }
                                            },
                                            "ttl": {
                                              "type": "int",
                                              "defaultValue": 3600,
                                              "metadata": {
                                                "description": "Optional. The TTL (time-to-live) of the records in the record set."
                                              }
                                            },
                                            "roleAssignments": {
                                              "$ref": "#/definitions/roleAssignmentType",
                                              "metadata": {
                                                "description": "Optional. Array of role assignments to create."
                                              }
                                            }
                                          },
                                          "variables": {
                                            "copy": [
                                              {
                                                "name": "formattedRoleAssignments",
                                                "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]",
                                                "input": "[union(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')], createObject('roleDefinitionId', coalesce(tryGet(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName), if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName)))))]"
                                              }
                                            ],
                                            "builtInRoleNames": {
                                              "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                                              "Private DNS Zone Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b12aa53e-6015-4669-85d0-8515ebb3ae7f')]",
                                              "Network Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4d97b98b-1d4f-4787-a291-c67834d212e7')]",
                                              "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                                              "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                                              "Role Based Access Control Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]",
                                              "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]"
                                            }
                                          },
                                          "resources": {
                                            "privateDnsZone": {
                                              "existing": true,
                                              "type": "Microsoft.Network/privateDnsZones",
                                              "apiVersion": "2020-06-01",
                                              "name": "[parameters('privateDnsZoneName')]"
                                            },
                                            "CNAME": {
                                              "type": "Microsoft.Network/privateDnsZones/CNAME",
                                              "apiVersion": "2020-06-01",
                                              "name": "[format('{0}/{1}', parameters('privateDnsZoneName'), parameters('name'))]",
                                              "properties": {
                                                "cnameRecord": "[parameters('cnameRecord')]",
                                                "metadata": "[parameters('metadata')]",
                                                "ttl": "[parameters('ttl')]"
                                              },
                                              "dependsOn": [
                                                "privateDnsZone"
                                              ]
                                            },
                                            "CNAME_roleAssignments": {
                                              "copy": {
                                                "name": "CNAME_roleAssignments",
                                                "count": "[length(coalesce(variables('formattedRoleAssignments'), createArray()))]"
                                              },
                                              "type": "Microsoft.Authorization/roleAssignments",
                                              "apiVersion": "2022-04-01",
                                              "scope": "[format('Microsoft.Network/privateDnsZones/{0}/CNAME/{1}', parameters('privateDnsZoneName'), parameters('name'))]",
                                              "name": "[coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'name'), guid(resourceId('Microsoft.Network/privateDnsZones/CNAME', parameters('privateDnsZoneName'), parameters('name')), coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId, coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId))]",
                                              "properties": {
                                                "roleDefinitionId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId]",
                                                "principalId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId]",
                                                "description": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'description')]",
                                                "principalType": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'principalType')]",
                                                "condition": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition')]",
                                                "conditionVersion": "[if(not(empty(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                                                "delegatedManagedIdentityResourceId": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
                                              },
                                              "dependsOn": [
                                                "CNAME"
                                              ]
                                            }
                                          },
                                          "outputs": {
                                            "name": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "The name of the deployed CNAME record."
                                              },
                                              "value": "[parameters('name')]"
                                            },
                                            "resourceId": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "The resource ID of the deployed CNAME record."
                                              },
                                              "value": "[resourceId('Microsoft.Network/privateDnsZones/CNAME', parameters('privateDnsZoneName'), parameters('name'))]"
                                            },
                                            "resourceGroupName": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "The resource group of the deployed CNAME record."
                                              },
                                              "value": "[resourceGroup().name]"
                                            }
                                          }
                                        }
                                      },
                                      "dependsOn": [
                                        "privateDnsZone"
                                      ]
                                    },
                                    "privateDnsZone_MX": {
                                      "copy": {
                                        "name": "privateDnsZone_MX",
                                        "count": "[length(coalesce(parameters('mx'), createArray()))]"
                                      },
                                      "type": "Microsoft.Resources/deployments",
                                      "apiVersion": "2022-09-01",
                                      "name": "[format('{0}-PrivateDnsZone-MXRecord-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
                                      "properties": {
                                        "expressionEvaluationOptions": {
                                          "scope": "inner"
                                        },
                                        "mode": "Incremental",
                                        "parameters": {
                                          "privateDnsZoneName": {
                                            "value": "[parameters('name')]"
                                          },
                                          "name": {
                                            "value": "[coalesce(parameters('mx'), createArray())[copyIndex()].name]"
                                          },
                                          "metadata": {
                                            "value": "[tryGet(coalesce(parameters('mx'), createArray())[copyIndex()], 'metadata')]"
                                          },
                                          "mxRecords": {
                                            "value": "[tryGet(coalesce(parameters('mx'), createArray())[copyIndex()], 'mxRecords')]"
                                          },
                                          "ttl": {
                                            "value": "[coalesce(tryGet(coalesce(parameters('mx'), createArray())[copyIndex()], 'ttl'), 3600)]"
                                          },
                                          "roleAssignments": {
                                            "value": "[tryGet(coalesce(parameters('mx'), createArray())[copyIndex()], 'roleAssignments')]"
                                          }
                                        },
                                        "template": {
                                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                          "languageVersion": "2.0",
                                          "contentVersion": "1.0.0.0",
                                          "metadata": {
                                            "_generator": {
                                              "name": "bicep",
                                              "version": "0.29.47.4906",
                                              "templateHash": "10928449924272756679"
                                            },
                                            "name": "Private DNS Zone MX record",
                                            "description": "This module deploys a Private DNS Zone MX record.",
                                            "owner": "Azure/module-maintainers"
                                          },
                                          "definitions": {
                                            "roleAssignmentType": {
                                              "type": "array",
                                              "items": {
                                                "type": "object",
                                                "properties": {
                                                  "name": {
                                                    "type": "string",
                                                    "nullable": true,
                                                    "metadata": {
                                                      "description": "Optional. The name (as GUID) of the role assignment. If not provided, a GUID will be generated."
                                                    }
                                                  },
                                                  "roleDefinitionIdOrName": {
                                                    "type": "string",
                                                    "metadata": {
                                                      "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                                                    }
                                                  },
                                                  "principalId": {
                                                    "type": "string",
                                                    "metadata": {
                                                      "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                                                    }
                                                  },
                                                  "principalType": {
                                                    "type": "string",
                                                    "allowedValues": [
                                                      "Device",
                                                      "ForeignGroup",
                                                      "Group",
                                                      "ServicePrincipal",
                                                      "User"
                                                    ],
                                                    "nullable": true,
                                                    "metadata": {
                                                      "description": "Optional. The principal type of the assigned principal ID."
                                                    }
                                                  },
                                                  "description": {
                                                    "type": "string",
                                                    "nullable": true,
                                                    "metadata": {
                                                      "description": "Optional. The description of the role assignment."
                                                    }
                                                  },
                                                  "condition": {
                                                    "type": "string",
                                                    "nullable": true,
                                                    "metadata": {
                                                      "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                                                    }
                                                  },
                                                  "conditionVersion": {
                                                    "type": "string",
                                                    "allowedValues": [
                                                      "2.0"
                                                    ],
                                                    "nullable": true,
                                                    "metadata": {
                                                      "description": "Optional. Version of the condition."
                                                    }
                                                  },
                                                  "delegatedManagedIdentityResourceId": {
                                                    "type": "string",
                                                    "nullable": true,
                                                    "metadata": {
                                                      "description": "Optional. The Resource Id of the delegated managed identity resource."
                                                    }
                                                  }
                                                }
                                              },
                                              "nullable": true
                                            }
                                          },
                                          "parameters": {
                                            "privateDnsZoneName": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "Conditional. The name of the parent Private DNS zone. Required if the template is used in a standalone deployment."
                                              }
                                            },
                                            "name": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "Required. The name of the MX record."
                                              }
                                            },
                                            "metadata": {
                                              "type": "object",
                                              "nullable": true,
                                              "metadata": {
                                                "description": "Optional. The metadata attached to the record set."
                                              }
                                            },
                                            "mxRecords": {
                                              "type": "array",
                                              "nullable": true,
                                              "metadata": {
                                                "description": "Optional. The list of MX records in the record set."
                                              }
                                            },
                                            "ttl": {
                                              "type": "int",
                                              "defaultValue": 3600,
                                              "metadata": {
                                                "description": "Optional. The TTL (time-to-live) of the records in the record set."
                                              }
                                            },
                                            "roleAssignments": {
                                              "$ref": "#/definitions/roleAssignmentType",
                                              "metadata": {
                                                "description": "Optional. Array of role assignments to create."
                                              }
                                            }
                                          },
                                          "variables": {
                                            "copy": [
                                              {
                                                "name": "formattedRoleAssignments",
                                                "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]",
                                                "input": "[union(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')], createObject('roleDefinitionId', coalesce(tryGet(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName), if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName)))))]"
                                              }
                                            ],
                                            "builtInRoleNames": {
                                              "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                                              "Private DNS Zone Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b12aa53e-6015-4669-85d0-8515ebb3ae7f')]",
                                              "Network Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4d97b98b-1d4f-4787-a291-c67834d212e7')]",
                                              "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                                              "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                                              "Role Based Access Control Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]",
                                              "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]"
                                            }
                                          },
                                          "resources": {
                                            "privateDnsZone": {
                                              "existing": true,
                                              "type": "Microsoft.Network/privateDnsZones",
                                              "apiVersion": "2020-06-01",
                                              "name": "[parameters('privateDnsZoneName')]"
                                            },
                                            "MX": {
                                              "type": "Microsoft.Network/privateDnsZones/MX",
                                              "apiVersion": "2020-06-01",
                                              "name": "[format('{0}/{1}', parameters('privateDnsZoneName'), parameters('name'))]",
                                              "properties": {
                                                "metadata": "[parameters('metadata')]",
                                                "mxRecords": "[parameters('mxRecords')]",
                                                "ttl": "[parameters('ttl')]"
                                              },
                                              "dependsOn": [
                                                "privateDnsZone"
                                              ]
                                            },
                                            "MX_roleAssignments": {
                                              "copy": {
                                                "name": "MX_roleAssignments",
                                                "count": "[length(coalesce(variables('formattedRoleAssignments'), createArray()))]"
                                              },
                                              "type": "Microsoft.Authorization/roleAssignments",
                                              "apiVersion": "2022-04-01",
                                              "scope": "[format('Microsoft.Network/privateDnsZones/{0}/MX/{1}', parameters('privateDnsZoneName'), parameters('name'))]",
                                              "name": "[coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'name'), guid(resourceId('Microsoft.Network/privateDnsZones/MX', parameters('privateDnsZoneName'), parameters('name')), coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId, coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId))]",
                                              "properties": {
                                                "roleDefinitionId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId]",
                                                "principalId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId]",
                                                "description": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'description')]",
                                                "principalType": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'principalType')]",
                                                "condition": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition')]",
                                                "conditionVersion": "[if(not(empty(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                                                "delegatedManagedIdentityResourceId": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
                                              },
                                              "dependsOn": [
                                                "MX"
                                              ]
                                            }
                                          },
                                          "outputs": {
                                            "name": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "The name of the deployed MX record."
                                              },
                                              "value": "[parameters('name')]"
                                            },
                                            "resourceId": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "The resource ID of the deployed MX record."
                                              },
                                              "value": "[resourceId('Microsoft.Network/privateDnsZones/MX', parameters('privateDnsZoneName'), parameters('name'))]"
                                            },
                                            "resourceGroupName": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "The resource group of the deployed MX record."
                                              },
                                              "value": "[resourceGroup().name]"
                                            }
                                          }
                                        }
                                      },
                                      "dependsOn": [
                                        "privateDnsZone"
                                      ]
                                    },
                                    "privateDnsZone_PTR": {
                                      "copy": {
                                        "name": "privateDnsZone_PTR",
                                        "count": "[length(coalesce(parameters('ptr'), createArray()))]"
                                      },
                                      "type": "Microsoft.Resources/deployments",
                                      "apiVersion": "2022-09-01",
                                      "name": "[format('{0}-PrivateDnsZone-PTRRecord-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
                                      "properties": {
                                        "expressionEvaluationOptions": {
                                          "scope": "inner"
                                        },
                                        "mode": "Incremental",
                                        "parameters": {
                                          "privateDnsZoneName": {
                                            "value": "[parameters('name')]"
                                          },
                                          "name": {
                                            "value": "[coalesce(parameters('ptr'), createArray())[copyIndex()].name]"
                                          },
                                          "metadata": {
                                            "value": "[tryGet(coalesce(parameters('ptr'), createArray())[copyIndex()], 'metadata')]"
                                          },
                                          "ptrRecords": {
                                            "value": "[tryGet(coalesce(parameters('ptr'), createArray())[copyIndex()], 'ptrRecords')]"
                                          },
                                          "ttl": {
                                            "value": "[coalesce(tryGet(coalesce(parameters('ptr'), createArray())[copyIndex()], 'ttl'), 3600)]"
                                          },
                                          "roleAssignments": {
                                            "value": "[tryGet(coalesce(parameters('ptr'), createArray())[copyIndex()], 'roleAssignments')]"
                                          }
                                        },
                                        "template": {
                                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                          "languageVersion": "2.0",
                                          "contentVersion": "1.0.0.0",
                                          "metadata": {
                                            "_generator": {
                                              "name": "bicep",
                                              "version": "0.29.47.4906",
                                              "templateHash": "13191587152357386110"
                                            },
                                            "name": "Private DNS Zone PTR record",
                                            "description": "This module deploys a Private DNS Zone PTR record.",
                                            "owner": "Azure/module-maintainers"
                                          },
                                          "definitions": {
                                            "roleAssignmentType": {
                                              "type": "array",
                                              "items": {
                                                "type": "object",
                                                "properties": {
                                                  "name": {
                                                    "type": "string",
                                                    "nullable": true,
                                                    "metadata": {
                                                      "description": "Optional. The name (as GUID) of the role assignment. If not provided, a GUID will be generated."
                                                    }
                                                  },
                                                  "roleDefinitionIdOrName": {
                                                    "type": "string",
                                                    "metadata": {
                                                      "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                                                    }
                                                  },
                                                  "principalId": {
                                                    "type": "string",
                                                    "metadata": {
                                                      "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                                                    }
                                                  },
                                                  "principalType": {
                                                    "type": "string",
                                                    "allowedValues": [
                                                      "Device",
                                                      "ForeignGroup",
                                                      "Group",
                                                      "ServicePrincipal",
                                                      "User"
                                                    ],
                                                    "nullable": true,
                                                    "metadata": {
                                                      "description": "Optional. The principal type of the assigned principal ID."
                                                    }
                                                  },
                                                  "description": {
                                                    "type": "string",
                                                    "nullable": true,
                                                    "metadata": {
                                                      "description": "Optional. The description of the role assignment."
                                                    }
                                                  },
                                                  "condition": {
                                                    "type": "string",
                                                    "nullable": true,
                                                    "metadata": {
                                                      "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                                                    }
                                                  },
                                                  "conditionVersion": {
                                                    "type": "string",
                                                    "allowedValues": [
                                                      "2.0"
                                                    ],
                                                    "nullable": true,
                                                    "metadata": {
                                                      "description": "Optional. Version of the condition."
                                                    }
                                                  },
                                                  "delegatedManagedIdentityResourceId": {
                                                    "type": "string",
                                                    "nullable": true,
                                                    "metadata": {
                                                      "description": "Optional. The Resource Id of the delegated managed identity resource."
                                                    }
                                                  }
                                                }
                                              },
                                              "nullable": true
                                            }
                                          },
                                          "parameters": {
                                            "privateDnsZoneName": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "Conditional. The name of the parent Private DNS zone. Required if the template is used in a standalone deployment."
                                              }
                                            },
                                            "name": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "Required. The name of the PTR record."
                                              }
                                            },
                                            "metadata": {
                                              "type": "object",
                                              "nullable": true,
                                              "metadata": {
                                                "description": "Optional. The metadata attached to the record set."
                                              }
                                            },
                                            "ptrRecords": {
                                              "type": "array",
                                              "nullable": true,
                                              "metadata": {
                                                "description": "Optional. The list of PTR records in the record set."
                                              }
                                            },
                                            "ttl": {
                                              "type": "int",
                                              "defaultValue": 3600,
                                              "metadata": {
                                                "description": "Optional. The TTL (time-to-live) of the records in the record set."
                                              }
                                            },
                                            "roleAssignments": {
                                              "$ref": "#/definitions/roleAssignmentType",
                                              "metadata": {
                                                "description": "Optional. Array of role assignments to create."
                                              }
                                            }
                                          },
                                          "variables": {
                                            "copy": [
                                              {
                                                "name": "formattedRoleAssignments",
                                                "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]",
                                                "input": "[union(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')], createObject('roleDefinitionId', coalesce(tryGet(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName), if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName)))))]"
                                              }
                                            ],
                                            "builtInRoleNames": {
                                              "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                                              "Private DNS Zone Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b12aa53e-6015-4669-85d0-8515ebb3ae7f')]",
                                              "Network Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4d97b98b-1d4f-4787-a291-c67834d212e7')]",
                                              "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                                              "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                                              "Role Based Access Control Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]",
                                              "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]"
                                            }
                                          },
                                          "resources": {
                                            "privateDnsZone": {
                                              "existing": true,
                                              "type": "Microsoft.Network/privateDnsZones",
                                              "apiVersion": "2020-06-01",
                                              "name": "[parameters('privateDnsZoneName')]"
                                            },
                                            "PTR": {
                                              "type": "Microsoft.Network/privateDnsZones/PTR",
                                              "apiVersion": "2020-06-01",
                                              "name": "[format('{0}/{1}', parameters('privateDnsZoneName'), parameters('name'))]",
                                              "properties": {
                                                "metadata": "[parameters('metadata')]",
                                                "ptrRecords": "[parameters('ptrRecords')]",
                                                "ttl": "[parameters('ttl')]"
                                              },
                                              "dependsOn": [
                                                "privateDnsZone"
                                              ]
                                            },
                                            "PTR_roleAssignments": {
                                              "copy": {
                                                "name": "PTR_roleAssignments",
                                                "count": "[length(coalesce(variables('formattedRoleAssignments'), createArray()))]"
                                              },
                                              "type": "Microsoft.Authorization/roleAssignments",
                                              "apiVersion": "2022-04-01",
                                              "scope": "[format('Microsoft.Network/privateDnsZones/{0}/PTR/{1}', parameters('privateDnsZoneName'), parameters('name'))]",
                                              "name": "[coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'name'), guid(resourceId('Microsoft.Network/privateDnsZones/PTR', parameters('privateDnsZoneName'), parameters('name')), coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId, coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId))]",
                                              "properties": {
                                                "roleDefinitionId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId]",
                                                "principalId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId]",
                                                "description": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'description')]",
                                                "principalType": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'principalType')]",
                                                "condition": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition')]",
                                                "conditionVersion": "[if(not(empty(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                                                "delegatedManagedIdentityResourceId": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
                                              },
                                              "dependsOn": [
                                                "PTR"
                                              ]
                                            }
                                          },
                                          "outputs": {
                                            "name": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "The name of the deployed PTR record."
                                              },
                                              "value": "[parameters('name')]"
                                            },
                                            "resourceId": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "The resource ID of the deployed PTR record."
                                              },
                                              "value": "[resourceId('Microsoft.Network/privateDnsZones/PTR', parameters('privateDnsZoneName'), parameters('name'))]"
                                            },
                                            "resourceGroupName": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "The resource group of the deployed PTR record."
                                              },
                                              "value": "[resourceGroup().name]"
                                            }
                                          }
                                        }
                                      },
                                      "dependsOn": [
                                        "privateDnsZone"
                                      ]
                                    },
                                    "privateDnsZone_SOA": {
                                      "copy": {
                                        "name": "privateDnsZone_SOA",
                                        "count": "[length(coalesce(parameters('soa'), createArray()))]"
                                      },
                                      "type": "Microsoft.Resources/deployments",
                                      "apiVersion": "2022-09-01",
                                      "name": "[format('{0}-PrivateDnsZone-SOARecord-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
                                      "properties": {
                                        "expressionEvaluationOptions": {
                                          "scope": "inner"
                                        },
                                        "mode": "Incremental",
                                        "parameters": {
                                          "privateDnsZoneName": {
                                            "value": "[parameters('name')]"
                                          },
                                          "name": {
                                            "value": "[coalesce(parameters('soa'), createArray())[copyIndex()].name]"
                                          },
                                          "metadata": {
                                            "value": "[tryGet(coalesce(parameters('soa'), createArray())[copyIndex()], 'metadata')]"
                                          },
                                          "soaRecord": {
                                            "value": "[tryGet(coalesce(parameters('soa'), createArray())[copyIndex()], 'soaRecord')]"
                                          },
                                          "ttl": {
                                            "value": "[coalesce(tryGet(coalesce(parameters('soa'), createArray())[copyIndex()], 'ttl'), 3600)]"
                                          },
                                          "roleAssignments": {
                                            "value": "[tryGet(coalesce(parameters('soa'), createArray())[copyIndex()], 'roleAssignments')]"
                                          }
                                        },
                                        "template": {
                                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                          "languageVersion": "2.0",
                                          "contentVersion": "1.0.0.0",
                                          "metadata": {
                                            "_generator": {
                                              "name": "bicep",
                                              "version": "0.29.47.4906",
                                              "templateHash": "12872700379964561295"
                                            },
                                            "name": "Private DNS Zone SOA record",
                                            "description": "This module deploys a Private DNS Zone SOA record.",
                                            "owner": "Azure/module-maintainers"
                                          },
                                          "definitions": {
                                            "roleAssignmentType": {
                                              "type": "array",
                                              "items": {
                                                "type": "object",
                                                "properties": {
                                                  "name": {
                                                    "type": "string",
                                                    "nullable": true,
                                                    "metadata": {
                                                      "description": "Optional. The name (as GUID) of the role assignment. If not provided, a GUID will be generated."
                                                    }
                                                  },
                                                  "roleDefinitionIdOrName": {
                                                    "type": "string",
                                                    "metadata": {
                                                      "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                                                    }
                                                  },
                                                  "principalId": {
                                                    "type": "string",
                                                    "metadata": {
                                                      "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                                                    }
                                                  },
                                                  "principalType": {
                                                    "type": "string",
                                                    "allowedValues": [
                                                      "Device",
                                                      "ForeignGroup",
                                                      "Group",
                                                      "ServicePrincipal",
                                                      "User"
                                                    ],
                                                    "nullable": true,
                                                    "metadata": {
                                                      "description": "Optional. The principal type of the assigned principal ID."
                                                    }
                                                  },
                                                  "description": {
                                                    "type": "string",
                                                    "nullable": true,
                                                    "metadata": {
                                                      "description": "Optional. The description of the role assignment."
                                                    }
                                                  },
                                                  "condition": {
                                                    "type": "string",
                                                    "nullable": true,
                                                    "metadata": {
                                                      "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                                                    }
                                                  },
                                                  "conditionVersion": {
                                                    "type": "string",
                                                    "allowedValues": [
                                                      "2.0"
                                                    ],
                                                    "nullable": true,
                                                    "metadata": {
                                                      "description": "Optional. Version of the condition."
                                                    }
                                                  },
                                                  "delegatedManagedIdentityResourceId": {
                                                    "type": "string",
                                                    "nullable": true,
                                                    "metadata": {
                                                      "description": "Optional. The Resource Id of the delegated managed identity resource."
                                                    }
                                                  }
                                                }
                                              },
                                              "nullable": true
                                            }
                                          },
                                          "parameters": {
                                            "privateDnsZoneName": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "Conditional. The name of the parent Private DNS zone. Required if the template is used in a standalone deployment."
                                              }
                                            },
                                            "name": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "Required. The name of the SOA record."
                                              }
                                            },
                                            "metadata": {
                                              "type": "object",
                                              "nullable": true,
                                              "metadata": {
                                                "description": "Optional. The metadata attached to the record set."
                                              }
                                            },
                                            "soaRecord": {
                                              "type": "object",
                                              "nullable": true,
                                              "metadata": {
                                                "description": "Optional. A SOA record."
                                              }
                                            },
                                            "ttl": {
                                              "type": "int",
                                              "defaultValue": 3600,
                                              "metadata": {
                                                "description": "Optional. The TTL (time-to-live) of the records in the record set."
                                              }
                                            },
                                            "roleAssignments": {
                                              "$ref": "#/definitions/roleAssignmentType",
                                              "metadata": {
                                                "description": "Optional. Array of role assignments to create."
                                              }
                                            }
                                          },
                                          "variables": {
                                            "copy": [
                                              {
                                                "name": "formattedRoleAssignments",
                                                "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]",
                                                "input": "[union(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')], createObject('roleDefinitionId', coalesce(tryGet(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName), if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName)))))]"
                                              }
                                            ],
                                            "builtInRoleNames": {
                                              "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                                              "Private DNS Zone Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b12aa53e-6015-4669-85d0-8515ebb3ae7f')]",
                                              "Network Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4d97b98b-1d4f-4787-a291-c67834d212e7')]",
                                              "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                                              "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                                              "Role Based Access Control Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]",
                                              "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]"
                                            }
                                          },
                                          "resources": {
                                            "privateDnsZone": {
                                              "existing": true,
                                              "type": "Microsoft.Network/privateDnsZones",
                                              "apiVersion": "2020-06-01",
                                              "name": "[parameters('privateDnsZoneName')]"
                                            },
                                            "SOA": {
                                              "type": "Microsoft.Network/privateDnsZones/SOA",
                                              "apiVersion": "2020-06-01",
                                              "name": "[format('{0}/{1}', parameters('privateDnsZoneName'), parameters('name'))]",
                                              "properties": {
                                                "metadata": "[parameters('metadata')]",
                                                "soaRecord": "[parameters('soaRecord')]",
                                                "ttl": "[parameters('ttl')]"
                                              },
                                              "dependsOn": [
                                                "privateDnsZone"
                                              ]
                                            },
                                            "SOA_roleAssignments": {
                                              "copy": {
                                                "name": "SOA_roleAssignments",
                                                "count": "[length(coalesce(variables('formattedRoleAssignments'), createArray()))]"
                                              },
                                              "type": "Microsoft.Authorization/roleAssignments",
                                              "apiVersion": "2022-04-01",
                                              "scope": "[format('Microsoft.Network/privateDnsZones/{0}/SOA/{1}', parameters('privateDnsZoneName'), parameters('name'))]",
                                              "name": "[coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'name'), guid(resourceId('Microsoft.Network/privateDnsZones/SOA', parameters('privateDnsZoneName'), parameters('name')), coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId, coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId))]",
                                              "properties": {
                                                "roleDefinitionId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId]",
                                                "principalId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId]",
                                                "description": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'description')]",
                                                "principalType": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'principalType')]",
                                                "condition": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition')]",
                                                "conditionVersion": "[if(not(empty(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                                                "delegatedManagedIdentityResourceId": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
                                              },
                                              "dependsOn": [
                                                "SOA"
                                              ]
                                            }
                                          },
                                          "outputs": {
                                            "name": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "The name of the deployed SOA record."
                                              },
                                              "value": "[parameters('name')]"
                                            },
                                            "resourceId": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "The resource ID of the deployed SOA record."
                                              },
                                              "value": "[resourceId('Microsoft.Network/privateDnsZones/SOA', parameters('privateDnsZoneName'), parameters('name'))]"
                                            },
                                            "resourceGroupName": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "The resource group of the deployed SOA record."
                                              },
                                              "value": "[resourceGroup().name]"
                                            }
                                          }
                                        }
                                      },
                                      "dependsOn": [
                                        "privateDnsZone"
                                      ]
                                    },
                                    "privateDnsZone_SRV": {
                                      "copy": {
                                        "name": "privateDnsZone_SRV",
                                        "count": "[length(coalesce(parameters('srv'), createArray()))]"
                                      },
                                      "type": "Microsoft.Resources/deployments",
                                      "apiVersion": "2022-09-01",
                                      "name": "[format('{0}-PrivateDnsZone-SRVRecord-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
                                      "properties": {
                                        "expressionEvaluationOptions": {
                                          "scope": "inner"
                                        },
                                        "mode": "Incremental",
                                        "parameters": {
                                          "privateDnsZoneName": {
                                            "value": "[parameters('name')]"
                                          },
                                          "name": {
                                            "value": "[coalesce(parameters('srv'), createArray())[copyIndex()].name]"
                                          },
                                          "metadata": {
                                            "value": "[tryGet(coalesce(parameters('srv'), createArray())[copyIndex()], 'metadata')]"
                                          },
                                          "srvRecords": {
                                            "value": "[tryGet(coalesce(parameters('srv'), createArray())[copyIndex()], 'srvRecords')]"
                                          },
                                          "ttl": {
                                            "value": "[coalesce(tryGet(coalesce(parameters('srv'), createArray())[copyIndex()], 'ttl'), 3600)]"
                                          },
                                          "roleAssignments": {
                                            "value": "[tryGet(coalesce(parameters('srv'), createArray())[copyIndex()], 'roleAssignments')]"
                                          }
                                        },
                                        "template": {
                                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                          "languageVersion": "2.0",
                                          "contentVersion": "1.0.0.0",
                                          "metadata": {
                                            "_generator": {
                                              "name": "bicep",
                                              "version": "0.29.47.4906",
                                              "templateHash": "12918383495773487180"
                                            },
                                            "name": "Private DNS Zone SRV record",
                                            "description": "This module deploys a Private DNS Zone SRV record.",
                                            "owner": "Azure/module-maintainers"
                                          },
                                          "definitions": {
                                            "roleAssignmentType": {
                                              "type": "array",
                                              "items": {
                                                "type": "object",
                                                "properties": {
                                                  "name": {
                                                    "type": "string",
                                                    "nullable": true,
                                                    "metadata": {
                                                      "description": "Optional. The name (as GUID) of the role assignment. If not provided, a GUID will be generated."
                                                    }
                                                  },
                                                  "roleDefinitionIdOrName": {
                                                    "type": "string",
                                                    "metadata": {
                                                      "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                                                    }
                                                  },
                                                  "principalId": {
                                                    "type": "string",
                                                    "metadata": {
                                                      "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                                                    }
                                                  },
                                                  "principalType": {
                                                    "type": "string",
                                                    "allowedValues": [
                                                      "Device",
                                                      "ForeignGroup",
                                                      "Group",
                                                      "ServicePrincipal",
                                                      "User"
                                                    ],
                                                    "nullable": true,
                                                    "metadata": {
                                                      "description": "Optional. The principal type of the assigned principal ID."
                                                    }
                                                  },
                                                  "description": {
                                                    "type": "string",
                                                    "nullable": true,
                                                    "metadata": {
                                                      "description": "Optional. The description of the role assignment."
                                                    }
                                                  },
                                                  "condition": {
                                                    "type": "string",
                                                    "nullable": true,
                                                    "metadata": {
                                                      "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                                                    }
                                                  },
                                                  "conditionVersion": {
                                                    "type": "string",
                                                    "allowedValues": [
                                                      "2.0"
                                                    ],
                                                    "nullable": true,
                                                    "metadata": {
                                                      "description": "Optional. Version of the condition."
                                                    }
                                                  },
                                                  "delegatedManagedIdentityResourceId": {
                                                    "type": "string",
                                                    "nullable": true,
                                                    "metadata": {
                                                      "description": "Optional. The Resource Id of the delegated managed identity resource."
                                                    }
                                                  }
                                                }
                                              },
                                              "nullable": true
                                            }
                                          },
                                          "parameters": {
                                            "privateDnsZoneName": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "Conditional. The name of the parent Private DNS zone. Required if the template is used in a standalone deployment."
                                              }
                                            },
                                            "name": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "Required. The name of the SRV record."
                                              }
                                            },
                                            "metadata": {
                                              "type": "object",
                                              "nullable": true,
                                              "metadata": {
                                                "description": "Optional. The metadata attached to the record set."
                                              }
                                            },
                                            "srvRecords": {
                                              "type": "array",
                                              "nullable": true,
                                              "metadata": {
                                                "description": "Optional. The list of SRV records in the record set."
                                              }
                                            },
                                            "ttl": {
                                              "type": "int",
                                              "defaultValue": 3600,
                                              "metadata": {
                                                "description": "Optional. The TTL (time-to-live) of the records in the record set."
                                              }
                                            },
                                            "roleAssignments": {
                                              "$ref": "#/definitions/roleAssignmentType",
                                              "metadata": {
                                                "description": "Optional. Array of role assignments to create."
                                              }
                                            }
                                          },
                                          "variables": {
                                            "copy": [
                                              {
                                                "name": "formattedRoleAssignments",
                                                "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]",
                                                "input": "[union(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')], createObject('roleDefinitionId', coalesce(tryGet(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName), if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName)))))]"
                                              }
                                            ],
                                            "builtInRoleNames": {
                                              "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                                              "Private DNS Zone Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b12aa53e-6015-4669-85d0-8515ebb3ae7f')]",
                                              "Network Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4d97b98b-1d4f-4787-a291-c67834d212e7')]",
                                              "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                                              "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                                              "Role Based Access Control Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]",
                                              "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]"
                                            }
                                          },
                                          "resources": {
                                            "privateDnsZone": {
                                              "existing": true,
                                              "type": "Microsoft.Network/privateDnsZones",
                                              "apiVersion": "2020-06-01",
                                              "name": "[parameters('privateDnsZoneName')]"
                                            },
                                            "SRV": {
                                              "type": "Microsoft.Network/privateDnsZones/SRV",
                                              "apiVersion": "2020-06-01",
                                              "name": "[format('{0}/{1}', parameters('privateDnsZoneName'), parameters('name'))]",
                                              "properties": {
                                                "metadata": "[parameters('metadata')]",
                                                "srvRecords": "[parameters('srvRecords')]",
                                                "ttl": "[parameters('ttl')]"
                                              },
                                              "dependsOn": [
                                                "privateDnsZone"
                                              ]
                                            },
                                            "SRV_roleAssignments": {
                                              "copy": {
                                                "name": "SRV_roleAssignments",
                                                "count": "[length(coalesce(variables('formattedRoleAssignments'), createArray()))]"
                                              },
                                              "type": "Microsoft.Authorization/roleAssignments",
                                              "apiVersion": "2022-04-01",
                                              "scope": "[format('Microsoft.Network/privateDnsZones/{0}/SRV/{1}', parameters('privateDnsZoneName'), parameters('name'))]",
                                              "name": "[coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'name'), guid(resourceId('Microsoft.Network/privateDnsZones/SRV', parameters('privateDnsZoneName'), parameters('name')), coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId, coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId))]",
                                              "properties": {
                                                "roleDefinitionId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId]",
                                                "principalId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId]",
                                                "description": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'description')]",
                                                "principalType": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'principalType')]",
                                                "condition": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition')]",
                                                "conditionVersion": "[if(not(empty(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                                                "delegatedManagedIdentityResourceId": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
                                              },
                                              "dependsOn": [
                                                "SRV"
                                              ]
                                            }
                                          },
                                          "outputs": {
                                            "name": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "The name of the deployed SRV record."
                                              },
                                              "value": "[parameters('name')]"
                                            },
                                            "resourceId": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "The resource ID of the deployed SRV record."
                                              },
                                              "value": "[resourceId('Microsoft.Network/privateDnsZones/SRV', parameters('privateDnsZoneName'), parameters('name'))]"
                                            },
                                            "resourceGroupName": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "The resource group of the deployed SRV record."
                                              },
                                              "value": "[resourceGroup().name]"
                                            }
                                          }
                                        }
                                      },
                                      "dependsOn": [
                                        "privateDnsZone"
                                      ]
                                    },
                                    "privateDnsZone_TXT": {
                                      "copy": {
                                        "name": "privateDnsZone_TXT",
                                        "count": "[length(coalesce(parameters('txt'), createArray()))]"
                                      },
                                      "type": "Microsoft.Resources/deployments",
                                      "apiVersion": "2022-09-01",
                                      "name": "[format('{0}-PrivateDnsZone-TXTRecord-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
                                      "properties": {
                                        "expressionEvaluationOptions": {
                                          "scope": "inner"
                                        },
                                        "mode": "Incremental",
                                        "parameters": {
                                          "privateDnsZoneName": {
                                            "value": "[parameters('name')]"
                                          },
                                          "name": {
                                            "value": "[coalesce(parameters('txt'), createArray())[copyIndex()].name]"
                                          },
                                          "metadata": {
                                            "value": "[tryGet(coalesce(parameters('txt'), createArray())[copyIndex()], 'metadata')]"
                                          },
                                          "txtRecords": {
                                            "value": "[tryGet(coalesce(parameters('txt'), createArray())[copyIndex()], 'txtRecords')]"
                                          },
                                          "ttl": {
                                            "value": "[coalesce(tryGet(coalesce(parameters('txt'), createArray())[copyIndex()], 'ttl'), 3600)]"
                                          },
                                          "roleAssignments": {
                                            "value": "[tryGet(coalesce(parameters('txt'), createArray())[copyIndex()], 'roleAssignments')]"
                                          }
                                        },
                                        "template": {
                                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                          "languageVersion": "2.0",
                                          "contentVersion": "1.0.0.0",
                                          "metadata": {
                                            "_generator": {
                                              "name": "bicep",
                                              "version": "0.29.47.4906",
                                              "templateHash": "128006490354221158"
                                            },
                                            "name": "Private DNS Zone TXT record",
                                            "description": "This module deploys a Private DNS Zone TXT record.",
                                            "owner": "Azure/module-maintainers"
                                          },
                                          "definitions": {
                                            "roleAssignmentType": {
                                              "type": "array",
                                              "items": {
                                                "type": "object",
                                                "properties": {
                                                  "name": {
                                                    "type": "string",
                                                    "nullable": true,
                                                    "metadata": {
                                                      "description": "Optional. The name (as GUID) of the role assignment. If not provided, a GUID will be generated."
                                                    }
                                                  },
                                                  "roleDefinitionIdOrName": {
                                                    "type": "string",
                                                    "metadata": {
                                                      "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                                                    }
                                                  },
                                                  "principalId": {
                                                    "type": "string",
                                                    "metadata": {
                                                      "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                                                    }
                                                  },
                                                  "principalType": {
                                                    "type": "string",
                                                    "allowedValues": [
                                                      "Device",
                                                      "ForeignGroup",
                                                      "Group",
                                                      "ServicePrincipal",
                                                      "User"
                                                    ],
                                                    "nullable": true,
                                                    "metadata": {
                                                      "description": "Optional. The principal type of the assigned principal ID."
                                                    }
                                                  },
                                                  "description": {
                                                    "type": "string",
                                                    "nullable": true,
                                                    "metadata": {
                                                      "description": "Optional. The description of the role assignment."
                                                    }
                                                  },
                                                  "condition": {
                                                    "type": "string",
                                                    "nullable": true,
                                                    "metadata": {
                                                      "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                                                    }
                                                  },
                                                  "conditionVersion": {
                                                    "type": "string",
                                                    "allowedValues": [
                                                      "2.0"
                                                    ],
                                                    "nullable": true,
                                                    "metadata": {
                                                      "description": "Optional. Version of the condition."
                                                    }
                                                  },
                                                  "delegatedManagedIdentityResourceId": {
                                                    "type": "string",
                                                    "nullable": true,
                                                    "metadata": {
                                                      "description": "Optional. The Resource Id of the delegated managed identity resource."
                                                    }
                                                  }
                                                }
                                              },
                                              "nullable": true
                                            }
                                          },
                                          "parameters": {
                                            "privateDnsZoneName": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "Conditional. The name of the parent Private DNS zone. Required if the template is used in a standalone deployment."
                                              }
                                            },
                                            "name": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "Required. The name of the TXT record."
                                              }
                                            },
                                            "metadata": {
                                              "type": "object",
                                              "nullable": true,
                                              "metadata": {
                                                "description": "Optional. The metadata attached to the record set."
                                              }
                                            },
                                            "ttl": {
                                              "type": "int",
                                              "defaultValue": 3600,
                                              "metadata": {
                                                "description": "Optional. The TTL (time-to-live) of the records in the record set."
                                              }
                                            },
                                            "txtRecords": {
                                              "type": "array",
                                              "nullable": true,
                                              "metadata": {
                                                "description": "Optional. The list of TXT records in the record set."
                                              }
                                            },
                                            "roleAssignments": {
                                              "$ref": "#/definitions/roleAssignmentType",
                                              "metadata": {
                                                "description": "Optional. Array of role assignments to create."
                                              }
                                            }
                                          },
                                          "variables": {
                                            "copy": [
                                              {
                                                "name": "formattedRoleAssignments",
                                                "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]",
                                                "input": "[union(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')], createObject('roleDefinitionId', coalesce(tryGet(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName), if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName)))))]"
                                              }
                                            ],
                                            "builtInRoleNames": {
                                              "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                                              "Private DNS Zone Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b12aa53e-6015-4669-85d0-8515ebb3ae7f')]",
                                              "Network Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4d97b98b-1d4f-4787-a291-c67834d212e7')]",
                                              "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                                              "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                                              "Role Based Access Control Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]",
                                              "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]"
                                            }
                                          },
                                          "resources": {
                                            "privateDnsZone": {
                                              "existing": true,
                                              "type": "Microsoft.Network/privateDnsZones",
                                              "apiVersion": "2020-06-01",
                                              "name": "[parameters('privateDnsZoneName')]"
                                            },
                                            "TXT": {
                                              "type": "Microsoft.Network/privateDnsZones/TXT",
                                              "apiVersion": "2020-06-01",
                                              "name": "[format('{0}/{1}', parameters('privateDnsZoneName'), parameters('name'))]",
                                              "properties": {
                                                "metadata": "[parameters('metadata')]",
                                                "ttl": "[parameters('ttl')]",
                                                "txtRecords": "[parameters('txtRecords')]"
                                              },
                                              "dependsOn": [
                                                "privateDnsZone"
                                              ]
                                            },
                                            "TXT_roleAssignments": {
                                              "copy": {
                                                "name": "TXT_roleAssignments",
                                                "count": "[length(coalesce(variables('formattedRoleAssignments'), createArray()))]"
                                              },
                                              "type": "Microsoft.Authorization/roleAssignments",
                                              "apiVersion": "2022-04-01",
                                              "scope": "[format('Microsoft.Network/privateDnsZones/{0}/TXT/{1}', parameters('privateDnsZoneName'), parameters('name'))]",
                                              "name": "[coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'name'), guid(resourceId('Microsoft.Network/privateDnsZones/TXT', parameters('privateDnsZoneName'), parameters('name')), coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId, coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId))]",
                                              "properties": {
                                                "roleDefinitionId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId]",
                                                "principalId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId]",
                                                "description": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'description')]",
                                                "principalType": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'principalType')]",
                                                "condition": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition')]",
                                                "conditionVersion": "[if(not(empty(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                                                "delegatedManagedIdentityResourceId": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
                                              },
                                              "dependsOn": [
                                                "TXT"
                                              ]
                                            }
                                          },
                                          "outputs": {
                                            "name": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "The name of the deployed TXT record."
                                              },
                                              "value": "[parameters('name')]"
                                            },
                                            "resourceId": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "The resource ID of the deployed TXT record."
                                              },
                                              "value": "[resourceId('Microsoft.Network/privateDnsZones/TXT', parameters('privateDnsZoneName'), parameters('name'))]"
                                            },
                                            "resourceGroupName": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "The resource group of the deployed TXT record."
                                              },
                                              "value": "[resourceGroup().name]"
                                            }
                                          }
                                        }
                                      },
                                      "dependsOn": [
                                        "privateDnsZone"
                                      ]
                                    },
                                    "privateDnsZone_virtualNetworkLinks": {
                                      "copy": {
                                        "name": "privateDnsZone_virtualNetworkLinks",
                                        "count": "[length(coalesce(parameters('virtualNetworkLinks'), createArray()))]"
                                      },
                                      "type": "Microsoft.Resources/deployments",
                                      "apiVersion": "2022-09-01",
                                      "name": "[format('{0}-PrivateDnsZone-VirtualNetworkLink-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
                                      "properties": {
                                        "expressionEvaluationOptions": {
                                          "scope": "inner"
                                        },
                                        "mode": "Incremental",
                                        "parameters": {
                                          "privateDnsZoneName": {
                                            "value": "[parameters('name')]"
                                          },
                                          "name": {
                                            "value": "[coalesce(tryGet(coalesce(parameters('virtualNetworkLinks'), createArray())[copyIndex()], 'name'), format('{0}-vnetlink', last(split(coalesce(parameters('virtualNetworkLinks'), createArray())[copyIndex()].virtualNetworkResourceId, '/'))))]"
                                          },
                                          "virtualNetworkResourceId": {
                                            "value": "[coalesce(parameters('virtualNetworkLinks'), createArray())[copyIndex()].virtualNetworkResourceId]"
                                          },
                                          "location": {
                                            "value": "[coalesce(tryGet(coalesce(parameters('virtualNetworkLinks'), createArray())[copyIndex()], 'location'), 'global')]"
                                          },
                                          "registrationEnabled": {
                                            "value": "[coalesce(tryGet(coalesce(parameters('virtualNetworkLinks'), createArray())[copyIndex()], 'registrationEnabled'), false())]"
                                          },
                                          "tags": {
                                            "value": "[coalesce(tryGet(coalesce(parameters('virtualNetworkLinks'), createArray())[copyIndex()], 'tags'), parameters('tags'))]"
                                          }
                                        },
                                        "template": {
                                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                          "languageVersion": "2.0",
                                          "contentVersion": "1.0.0.0",
                                          "metadata": {
                                            "_generator": {
                                              "name": "bicep",
                                              "version": "0.29.47.4906",
                                              "templateHash": "1713449351614683457"
                                            },
                                            "name": "Private DNS Zone Virtual Network Link",
                                            "description": "This module deploys a Private DNS Zone Virtual Network Link.",
                                            "owner": "Azure/module-maintainers"
                                          },
                                          "parameters": {
                                            "privateDnsZoneName": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "Conditional. The name of the parent Private DNS zone. Required if the template is used in a standalone deployment."
                                              }
                                            },
                                            "name": {
                                              "type": "string",
                                              "defaultValue": "[format('{0}-vnetlink', last(split(parameters('virtualNetworkResourceId'), '/')))]",
                                              "metadata": {
                                                "description": "Optional. The name of the virtual network link."
                                              }
                                            },
                                            "location": {
                                              "type": "string",
                                              "defaultValue": "global",
                                              "metadata": {
                                                "description": "Optional. The location of the PrivateDNSZone. Should be global."
                                              }
                                            },
                                            "tags": {
                                              "type": "object",
                                              "nullable": true,
                                              "metadata": {
                                                "description": "Optional. Tags of the resource."
                                              }
                                            },
                                            "registrationEnabled": {
                                              "type": "bool",
                                              "defaultValue": false,
                                              "metadata": {
                                                "description": "Optional. Is auto-registration of virtual machine records in the virtual network in the Private DNS zone enabled?."
                                              }
                                            },
                                            "virtualNetworkResourceId": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "Required. Link to another virtual network resource ID."
                                              }
                                            }
                                          },
                                          "resources": {
                                            "privateDnsZone": {
                                              "existing": true,
                                              "type": "Microsoft.Network/privateDnsZones",
                                              "apiVersion": "2020-06-01",
                                              "name": "[parameters('privateDnsZoneName')]"
                                            },
                                            "virtualNetworkLink": {
                                              "type": "Microsoft.Network/privateDnsZones/virtualNetworkLinks",
                                              "apiVersion": "2020-06-01",
                                              "name": "[format('{0}/{1}', parameters('privateDnsZoneName'), parameters('name'))]",
                                              "location": "[parameters('location')]",
                                              "tags": "[parameters('tags')]",
                                              "properties": {
                                                "registrationEnabled": "[parameters('registrationEnabled')]",
                                                "virtualNetwork": {
                                                  "id": "[parameters('virtualNetworkResourceId')]"
                                                }
                                              },
                                              "dependsOn": [
                                                "privateDnsZone"
                                              ]
                                            }
                                          },
                                          "outputs": {
                                            "name": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "The name of the deployed virtual network link."
                                              },
                                              "value": "[parameters('name')]"
                                            },
                                            "resourceId": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "The resource ID of the deployed virtual network link."
                                              },
                                              "value": "[resourceId('Microsoft.Network/privateDnsZones/virtualNetworkLinks', parameters('privateDnsZoneName'), parameters('name'))]"
                                            },
                                            "resourceGroupName": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "The resource group of the deployed virtual network link."
                                              },
                                              "value": "[resourceGroup().name]"
                                            },
                                            "location": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "The location the resource was deployed into."
                                              },
                                              "value": "[reference('virtualNetworkLink', '2020-06-01', 'full').location]"
                                            }
                                          }
                                        }
                                      },
                                      "dependsOn": [
                                        "privateDnsZone"
                                      ]
                                    }
                                  },
                                  "outputs": {
                                    "resourceGroupName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource group the private DNS zone was deployed into."
                                      },
                                      "value": "[resourceGroup().name]"
                                    },
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the private DNS zone."
                                      },
                                      "value": "[parameters('name')]"
                                    },
                                    "resourceId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource ID of the private DNS zone."
                                      },
                                      "value": "[resourceId('Microsoft.Network/privateDnsZones', parameters('name'))]"
                                    },
                                    "location": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The location the resource was deployed into."
                                      },
                                      "value": "[reference('privateDnsZone', '2020-06-01', 'full').location]"
                                    }
                                  }
                                }
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.Resources/deployments', take(format('{0}-ASEv3-Deployment', parameters('name')), 64))]"
                              ]
                            }
                          ],
                          "outputs": {
                            "resourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource ID of the App Service Environment."
                              },
                              "value": "[reference(resourceId('Microsoft.Resources/deployments', take(format('{0}-ASEv3-Deployment', parameters('name')), 64)), '2022-09-01').outputs.resourceId.value]"
                            },
                            "resourceGroupName": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource group the App Service Environment was deployed into."
                              },
                              "value": "[resourceGroup().name]"
                            },
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "The name of the App Service Environment."
                              },
                              "value": "[reference(resourceId('Microsoft.Resources/deployments', take(format('{0}-ASEv3-Deployment', parameters('name')), 64)), '2022-09-01').outputs.name.value]"
                            },
                            "location": {
                              "type": "string",
                              "metadata": {
                                "description": "The location the resource was deployed into."
                              },
                              "value": "[reference(resourceId('Microsoft.Resources/deployments', take(format('{0}-ASEv3-Deployment', parameters('name')), 64)), '2022-09-01').outputs.location.value]"
                            },
                            "internalInboundIpAddress": {
                              "type": "string",
                              "metadata": {
                                "description": "The Internal ingress IP of the ASE."
                              },
                              "value": "[reference(resourceId('Microsoft.Web/hostingEnvironments', parameters('name')), '2023-12-01').networkingConfiguration.properties.internalInboundIpAddresses[0]]"
                            }
                          }
                        }
                      }
                    },
                    {
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('{0}-appInsights-Deployment', uniqueString(deployment().name, parameters('location')))]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "name": {
                            "value": "[format('appi-{0}', parameters('webAppName'))]"
                          },
                          "location": {
                            "value": "[parameters('location')]"
                          },
                          "tags": {
                            "value": "[parameters('tags')]"
                          },
                          "workspaceResourceId": {
                            "value": "[parameters('logAnalyticsWsId')]"
                          },
                          "applicationType": {
                            "value": "web"
                          },
                          "publicNetworkAccessForIngestion": {
                            "value": "Enabled"
                          },
                          "publicNetworkAccessForQuery": {
                            "value": "Enabled"
                          },
                          "retentionInDays": {
                            "value": 90
                          },
                          "samplingPercentage": {
                            "value": 100
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "languageVersion": "2.0",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.29.47.4906",
                              "templateHash": "10653241142071426932"
                            },
                            "name": "Application Insights",
                            "description": "This component deploys an Application Insights instance.",
                            "owner": "Azure/module-maintainers"
                          },
                          "definitions": {
                            "roleAssignmentType": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "name": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The name (as GUID) of the role assignment. If not provided, a GUID will be generated."
                                    }
                                  },
                                  "roleDefinitionIdOrName": {
                                    "type": "string",
                                    "metadata": {
                                      "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                                    }
                                  },
                                  "principalId": {
                                    "type": "string",
                                    "metadata": {
                                      "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                                    }
                                  },
                                  "principalType": {
                                    "type": "string",
                                    "allowedValues": [
                                      "Device",
                                      "ForeignGroup",
                                      "Group",
                                      "ServicePrincipal",
                                      "User"
                                    ],
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The principal type of the assigned principal ID."
                                    }
                                  },
                                  "description": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The description of the role assignment."
                                    }
                                  },
                                  "condition": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                                    }
                                  },
                                  "conditionVersion": {
                                    "type": "string",
                                    "allowedValues": [
                                      "2.0"
                                    ],
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. Version of the condition."
                                    }
                                  },
                                  "delegatedManagedIdentityResourceId": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The Resource Id of the delegated managed identity resource."
                                    }
                                  }
                                }
                              },
                              "nullable": true
                            },
                            "diagnosticSettingType": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "name": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The name of diagnostic setting."
                                    }
                                  },
                                  "logCategoriesAndGroups": {
                                    "type": "array",
                                    "items": {
                                      "type": "object",
                                      "properties": {
                                        "category": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. Name of a Diagnostic Log category for a resource type this setting is applied to. Set the specific logs to collect here."
                                          }
                                        },
                                        "categoryGroup": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. Name of a Diagnostic Log category group for a resource type this setting is applied to. Set to `allLogs` to collect all logs."
                                          }
                                        },
                                        "enabled": {
                                          "type": "bool",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. Enable or disable the category explicitly. Default is `true`."
                                          }
                                        }
                                      }
                                    },
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The name of logs that will be streamed. \"allLogs\" includes all possible logs for the resource. Set to `[]` to disable log collection."
                                    }
                                  },
                                  "metricCategories": {
                                    "type": "array",
                                    "items": {
                                      "type": "object",
                                      "properties": {
                                        "category": {
                                          "type": "string",
                                          "metadata": {
                                            "description": "Required. Name of a Diagnostic Metric category for a resource type this setting is applied to. Set to `AllMetrics` to collect all metrics."
                                          }
                                        },
                                        "enabled": {
                                          "type": "bool",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. Enable or disable the category explicitly. Default is `true`."
                                          }
                                        }
                                      }
                                    },
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The name of metrics that will be streamed. \"allMetrics\" includes all possible metrics for the resource. Set to `[]` to disable metric collection."
                                    }
                                  },
                                  "logAnalyticsDestinationType": {
                                    "type": "string",
                                    "allowedValues": [
                                      "AzureDiagnostics",
                                      "Dedicated"
                                    ],
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. A string indicating whether the export to Log Analytics should use the default destination type, i.e. AzureDiagnostics, or use a destination type."
                                    }
                                  },
                                  "workspaceResourceId": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. Resource ID of the diagnostic log analytics workspace. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                                    }
                                  },
                                  "storageAccountResourceId": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. Resource ID of the diagnostic storage account. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                                    }
                                  },
                                  "eventHubAuthorizationRuleResourceId": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. Resource ID of the diagnostic event hub authorization rule for the Event Hubs namespace in which the event hub should be created or streamed to."
                                    }
                                  },
                                  "eventHubName": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. Name of the diagnostic event hub within the namespace to which logs are streamed. Without this, an event hub is created for each log category. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                                    }
                                  },
                                  "marketplacePartnerResourceId": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The full ARM resource ID of the Marketplace resource to which you would like to send Diagnostic Logs."
                                    }
                                  }
                                }
                              },
                              "nullable": true
                            }
                          },
                          "parameters": {
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. Name of the Application Insights."
                              }
                            },
                            "applicationType": {
                              "type": "string",
                              "defaultValue": "web",
                              "allowedValues": [
                                "web",
                                "other"
                              ],
                              "metadata": {
                                "description": "Optional. Application type."
                              }
                            },
                            "workspaceResourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. Resource ID of the log analytics workspace which the data will be ingested to. This property is required to create an application with this API version. Applications from older versions will not have this property."
                              }
                            },
                            "disableIpMasking": {
                              "type": "bool",
                              "defaultValue": true,
                              "metadata": {
                                "description": "Optional. Disable IP masking. Default value is set to true."
                              }
                            },
                            "disableLocalAuth": {
                              "type": "bool",
                              "defaultValue": false,
                              "metadata": {
                                "description": "Optional. Disable Non-AAD based Auth. Default value is set to false."
                              }
                            },
                            "forceCustomerStorageForProfiler": {
                              "type": "bool",
                              "defaultValue": false,
                              "metadata": {
                                "description": "Optional. Force users to create their own storage account for profiler and debugger."
                              }
                            },
                            "linkedStorageAccountResourceId": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. Linked storage account resource ID."
                              }
                            },
                            "publicNetworkAccessForIngestion": {
                              "type": "string",
                              "defaultValue": "Enabled",
                              "allowedValues": [
                                "Enabled",
                                "Disabled"
                              ],
                              "metadata": {
                                "description": "Optional. The network access type for accessing Application Insights ingestion. - Enabled or Disabled."
                              }
                            },
                            "publicNetworkAccessForQuery": {
                              "type": "string",
                              "defaultValue": "Enabled",
                              "allowedValues": [
                                "Enabled",
                                "Disabled"
                              ],
                              "metadata": {
                                "description": "Optional. The network access type for accessing Application Insights query. - Enabled or Disabled."
                              }
                            },
                            "retentionInDays": {
                              "type": "int",
                              "defaultValue": 365,
                              "allowedValues": [
                                30,
                                60,
                                90,
                                120,
                                180,
                                270,
                                365,
                                550,
                                730
                              ],
                              "metadata": {
                                "description": "Optional. Retention period in days."
                              }
                            },
                            "samplingPercentage": {
                              "type": "int",
                              "defaultValue": 100,
                              "minValue": 0,
                              "maxValue": 100,
                              "metadata": {
                                "description": "Optional. Percentage of the data produced by the application being monitored that is being sampled for Application Insights telemetry."
                              }
                            },
                            "kind": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. The kind of application that this component refers to, used to customize UI. This value is a freeform string, values should typically be one of the following: web, ios, other, store, java, phone."
                              }
                            },
                            "location": {
                              "type": "string",
                              "defaultValue": "[resourceGroup().location]",
                              "metadata": {
                                "description": "Optional. Location for all Resources."
                              }
                            },
                            "roleAssignments": {
                              "$ref": "#/definitions/roleAssignmentType",
                              "metadata": {
                                "description": "Optional. Array of role assignments to create."
                              }
                            },
                            "tags": {
                              "type": "object",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Tags of the resource."
                              }
                            },
                            "enableTelemetry": {
                              "type": "bool",
                              "defaultValue": true,
                              "metadata": {
                                "description": "Optional. Enable/Disable usage telemetry for module."
                              }
                            },
                            "diagnosticSettings": {
                              "$ref": "#/definitions/diagnosticSettingType",
                              "metadata": {
                                "description": "Optional. The diagnostic settings of the service."
                              }
                            }
                          },
                          "variables": {
                            "copy": [
                              {
                                "name": "formattedRoleAssignments",
                                "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]",
                                "input": "[union(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')], createObject('roleDefinitionId', coalesce(tryGet(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName), if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName)))))]"
                              }
                            ],
                            "builtInRoleNames": {
                              "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                              "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                              "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                              "Role Based Access Control Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]",
                              "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]",
                              "Monitoring Metrics Publisher": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '3913510d-42f4-4e42-8a64-420c390055eb')]",
                              "Application Insights Component Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'ae349356-3a1b-4a5e-921d-050484c6347e')]",
                              "Application Insights Snapshot Debugger": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '08954f03-6346-4c2e-81c0-ec3a5cfae23b')]",
                              "Monitoring Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '749f88d5-cbae-40b8-bcfc-e573ddc772fa')]"
                            }
                          },
                          "resources": {
                            "avmTelemetry": {
                              "condition": "[parameters('enableTelemetry')]",
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2024-03-01",
                              "name": "[format('46d3xbcp.res.insights-component.{0}.{1}', replace('0.4.1', '.', '-'), substring(uniqueString(deployment().name, parameters('location')), 0, 4))]",
                              "properties": {
                                "mode": "Incremental",
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "resources": [],
                                  "outputs": {
                                    "telemetry": {
                                      "type": "String",
                                      "value": "For more information, see https://aka.ms/avm/TelemetryInfo"
                                    }
                                  }
                                }
                              }
                            },
                            "appInsights": {
                              "type": "Microsoft.Insights/components",
                              "apiVersion": "2020-02-02",
                              "name": "[parameters('name')]",
                              "location": "[parameters('location')]",
                              "tags": "[parameters('tags')]",
                              "kind": "[parameters('kind')]",
                              "properties": {
                                "Application_Type": "[parameters('applicationType')]",
                                "DisableIpMasking": "[parameters('disableIpMasking')]",
                                "DisableLocalAuth": "[parameters('disableLocalAuth')]",
                                "ForceCustomerStorageForProfiler": "[parameters('forceCustomerStorageForProfiler')]",
                                "WorkspaceResourceId": "[parameters('workspaceResourceId')]",
                                "publicNetworkAccessForIngestion": "[parameters('publicNetworkAccessForIngestion')]",
                                "publicNetworkAccessForQuery": "[parameters('publicNetworkAccessForQuery')]",
                                "RetentionInDays": "[parameters('retentionInDays')]",
                                "SamplingPercentage": "[parameters('samplingPercentage')]"
                              }
                            },
                            "appInsights_roleAssignments": {
                              "copy": {
                                "name": "appInsights_roleAssignments",
                                "count": "[length(coalesce(variables('formattedRoleAssignments'), createArray()))]"
                              },
                              "type": "Microsoft.Authorization/roleAssignments",
                              "apiVersion": "2022-04-01",
                              "scope": "[format('Microsoft.Insights/components/{0}', parameters('name'))]",
                              "name": "[coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'name'), guid(resourceId('Microsoft.Insights/components', parameters('name')), coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId, coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId))]",
                              "properties": {
                                "roleDefinitionId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId]",
                                "principalId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId]",
                                "description": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'description')]",
                                "principalType": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'principalType')]",
                                "condition": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition')]",
                                "conditionVersion": "[if(not(empty(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                                "delegatedManagedIdentityResourceId": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
                              },
                              "dependsOn": [
                                "appInsights"
                              ]
                            },
                            "appInsights_diagnosticSettings": {
                              "copy": {
                                "name": "appInsights_diagnosticSettings",
                                "count": "[length(coalesce(parameters('diagnosticSettings'), createArray()))]"
                              },
                              "type": "Microsoft.Insights/diagnosticSettings",
                              "apiVersion": "2021-05-01-preview",
                              "scope": "[format('Microsoft.Insights/components/{0}', parameters('name'))]",
                              "name": "[coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'name'), format('{0}-diagnosticSettings', parameters('name')))]",
                              "properties": {
                                "copy": [
                                  {
                                    "name": "metrics",
                                    "count": "[length(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics'))))]",
                                    "input": {
                                      "category": "[coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics')))[copyIndex('metrics')].category]",
                                      "enabled": "[coalesce(tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics')))[copyIndex('metrics')], 'enabled'), true())]",
                                      "timeGrain": null
                                    }
                                  },
                                  {
                                    "name": "logs",
                                    "count": "[length(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs'))))]",
                                    "input": {
                                      "categoryGroup": "[tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'categoryGroup')]",
                                      "category": "[tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'category')]",
                                      "enabled": "[coalesce(tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'enabled'), true())]"
                                    }
                                  }
                                ],
                                "storageAccountId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'storageAccountResourceId')]",
                                "workspaceId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'workspaceResourceId')]",
                                "eventHubAuthorizationRuleId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'eventHubAuthorizationRuleResourceId')]",
                                "eventHubName": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'eventHubName')]",
                                "marketplacePartnerId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'marketplacePartnerResourceId')]",
                                "logAnalyticsDestinationType": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logAnalyticsDestinationType')]"
                              },
                              "dependsOn": [
                                "appInsights"
                              ]
                            },
                            "linkedStorageAccount": {
                              "condition": "[not(empty(parameters('linkedStorageAccountResourceId')))]",
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "[format('{0}-appInsights-linkedStorageAccount', uniqueString(deployment().name, parameters('location')))]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "appInsightsName": {
                                    "value": "[parameters('name')]"
                                  },
                                  "storageAccountResourceId": {
                                    "value": "[parameters('linkedStorageAccountResourceId')]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.29.47.4906",
                                      "templateHash": "216781367921725873"
                                    },
                                    "name": "Application Insights Linked Storage Account",
                                    "description": "This component deploys an Application Insights Linked Storage Account.",
                                    "owner": "Azure/module-maintainers"
                                  },
                                  "parameters": {
                                    "appInsightsName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Conditional. The name of the parent Application Insights instance. Required if the template is used in a standalone deployment."
                                      }
                                    },
                                    "storageAccountResourceId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. Linked storage account resource ID."
                                      }
                                    }
                                  },
                                  "resources": [
                                    {
                                      "type": "microsoft.insights/components/linkedStorageAccounts",
                                      "apiVersion": "2020-03-01-preview",
                                      "name": "[format('{0}/{1}', parameters('appInsightsName'), 'ServiceProfiler')]",
                                      "properties": {
                                        "linkedStorageAccount": "[parameters('storageAccountResourceId')]"
                                      }
                                    }
                                  ],
                                  "outputs": {
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the Linked Storage Account."
                                      },
                                      "value": "ServiceProfiler"
                                    },
                                    "resourceId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource ID of the Linked Storage Account."
                                      },
                                      "value": "[resourceId('microsoft.insights/components/linkedStorageAccounts', parameters('appInsightsName'), 'ServiceProfiler')]"
                                    },
                                    "resourceGroupName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource group the agent pool was deployed into."
                                      },
                                      "value": "[resourceGroup().name]"
                                    }
                                  }
                                }
                              },
                              "dependsOn": [
                                "appInsights"
                              ]
                            }
                          },
                          "outputs": {
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "The name of the application insights component."
                              },
                              "value": "[parameters('name')]"
                            },
                            "resourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource ID of the application insights component."
                              },
                              "value": "[resourceId('Microsoft.Insights/components', parameters('name'))]"
                            },
                            "resourceGroupName": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource group the application insights component was deployed into."
                              },
                              "value": "[resourceGroup().name]"
                            },
                            "applicationId": {
                              "type": "string",
                              "metadata": {
                                "description": "The application ID of the application insights component."
                              },
                              "value": "[reference('appInsights').AppId]"
                            },
                            "location": {
                              "type": "string",
                              "metadata": {
                                "description": "The location the resource was deployed into."
                              },
                              "value": "[reference('appInsights', '2020-02-02', 'full').location]"
                            },
                            "instrumentationKey": {
                              "type": "string",
                              "metadata": {
                                "description": "Application Insights Instrumentation key. A read-only value that applications can use to identify the destination for all telemetry sent to Azure Application Insights. This value will be supplied upon construction of each new Application Insights component."
                              },
                              "value": "[reference('appInsights').InstrumentationKey]"
                            },
                            "connectionString": {
                              "type": "string",
                              "metadata": {
                                "description": "Application Insights Connection String."
                              },
                              "value": "[reference('appInsights').ConnectionString]"
                            }
                          }
                        }
                      }
                    },
                    {
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[take(format('{0}-app-Deployment', parameters('webAppName')), 64)]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "name": {
                            "value": "[parameters('appServicePlanName')]"
                          },
                          "location": {
                            "value": "[parameters('location')]"
                          },
                          "tags": {
                            "value": "[parameters('tags')]"
                          },
                          "skuName": {
                            "value": "[parameters('sku')]"
                          },
                          "zoneRedundant": {
                            "value": "[parameters('zoneRedundant')]"
                          },
                          "kind": "[if(equals(toLower(parameters('webAppBaseOs')), toLower('linux')), createObject('value', 'Linux'), createObject('value', 'Windows'))]",
                          "perSiteScaling": {
                            "value": "[parameters('perSiteScaling')]"
                          },
                          "maximumElasticWorkerCount": "[if(and(less(parameters('maximumElasticWorkerCount'), 3), parameters('zoneRedundant')), createObject('value', 3), createObject('value', parameters('maximumElasticWorkerCount')))]",
                          "reserved": {
                            "value": "[equals(parameters('serverOS'), 'Linux')]"
                          },
                          "targetWorkerCount": "[if(and(less(parameters('targetWorkerCount'), 3), parameters('zoneRedundant')), createObject('value', 3), createObject('value', parameters('targetWorkerCount')))]",
                          "targetWorkerSize": {
                            "value": "[parameters('targetWorkerSize')]"
                          },
                          "appServiceEnvironmentId": "[if(parameters('deployAseV3'), createObject('value', reference(resourceId('Microsoft.Resources/deployments', take(format('{0}-ASEv3-Deployment', parameters('aseName')), 64)), '2022-09-01').outputs.resourceId.value), createObject('value', ''))]",
                          "diagnosticSettings": {
                            "value": "[parameters('diagnosticMetricsToEnable')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "languageVersion": "2.0",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.30.23.60470",
                              "templateHash": "8046461322090894941"
                            },
                            "name": "App Service Plan",
                            "description": "This module deploys an App Service Plan.",
                            "owner": "Azure/module-maintainers"
                          },
                          "definitions": {
                            "lockType": {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Specify the name of lock."
                                  }
                                },
                                "kind": {
                                  "type": "string",
                                  "allowedValues": [
                                    "CanNotDelete",
                                    "None",
                                    "ReadOnly"
                                  ],
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Specify the type of lock."
                                  }
                                }
                              },
                              "nullable": true
                            },
                            "roleAssignmentType": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "roleDefinitionIdOrName": {
                                    "type": "string",
                                    "metadata": {
                                      "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                                    }
                                  },
                                  "principalId": {
                                    "type": "string",
                                    "metadata": {
                                      "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                                    }
                                  },
                                  "principalType": {
                                    "type": "string",
                                    "allowedValues": [
                                      "Device",
                                      "ForeignGroup",
                                      "Group",
                                      "ServicePrincipal",
                                      "User"
                                    ],
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The principal type of the assigned principal ID."
                                    }
                                  },
                                  "description": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The description of the role assignment."
                                    }
                                  },
                                  "condition": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                                    }
                                  },
                                  "conditionVersion": {
                                    "type": "string",
                                    "allowedValues": [
                                      "2.0"
                                    ],
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. Version of the condition."
                                    }
                                  },
                                  "delegatedManagedIdentityResourceId": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The Resource Id of the delegated managed identity resource."
                                    }
                                  }
                                }
                              },
                              "nullable": true
                            },
                            "diagnosticSettingType": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "name": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The name of diagnostic setting."
                                    }
                                  },
                                  "metricCategories": {
                                    "type": "array",
                                    "items": {
                                      "type": "object",
                                      "properties": {
                                        "category": {
                                          "type": "string",
                                          "metadata": {
                                            "description": "Required. Name of a Diagnostic Metric category for a resource type this setting is applied to. Set to `AllMetrics` to collect all metrics."
                                          }
                                        },
                                        "enabled": {
                                          "type": "bool",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. Enable or disable the category explicitly. Default is `true`."
                                          }
                                        }
                                      }
                                    },
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The name of metrics that will be streamed. \"allMetrics\" includes all possible metrics for the resource. Set to `[]` to disable metric collection."
                                    }
                                  },
                                  "logAnalyticsDestinationType": {
                                    "type": "string",
                                    "allowedValues": [
                                      "AzureDiagnostics",
                                      "Dedicated"
                                    ],
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. A string indicating whether the export to Log Analytics should use the default destination type, i.e. AzureDiagnostics, or use a destination type."
                                    }
                                  },
                                  "workspaceResourceId": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. Resource ID of the diagnostic log analytics workspace. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                                    }
                                  },
                                  "storageAccountResourceId": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. Resource ID of the diagnostic storage account. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                                    }
                                  },
                                  "eventHubAuthorizationRuleResourceId": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. Resource ID of the diagnostic event hub authorization rule for the Event Hubs namespace in which the event hub should be created or streamed to."
                                    }
                                  },
                                  "eventHubName": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. Name of the diagnostic event hub within the namespace to which logs are streamed. Without this, an event hub is created for each log category. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                                    }
                                  },
                                  "marketplacePartnerResourceId": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The full ARM resource ID of the Marketplace resource to which you would like to send Diagnostic Logs."
                                    }
                                  }
                                }
                              },
                              "nullable": true
                            }
                          },
                          "parameters": {
                            "name": {
                              "type": "string",
                              "minLength": 1,
                              "maxLength": 60,
                              "metadata": {
                                "description": "Required. Name of the app service plan."
                              }
                            },
                            "skuName": {
                              "type": "string",
                              "defaultValue": "P1v3",
                              "metadata": {
                                "example": "  'F1'\n  'B1'\n  'P1v3'\n  'I1v2'\n  'FC1'\n  ",
                                "description": "Optional. The name of the SKU will Determine the tier, size, family of the App Service Plan. This defaults to P1v3 to leverage availability zones."
                              }
                            },
                            "skuCapacity": {
                              "type": "int",
                              "defaultValue": 3,
                              "metadata": {
                                "description": "Optional. Number of workers associated with the App Service Plan. This defaults to 3, to leverage availability zones."
                              }
                            },
                            "location": {
                              "type": "string",
                              "defaultValue": "[resourceGroup().location]",
                              "metadata": {
                                "description": "Optional. Location for all resources."
                              }
                            },
                            "kind": {
                              "type": "string",
                              "defaultValue": "App",
                              "allowedValues": [
                                "App",
                                "Elastic",
                                "FunctionApp",
                                "Windows",
                                "Linux"
                              ],
                              "metadata": {
                                "description": "Optional. Kind of server OS."
                              }
                            },
                            "reserved": {
                              "type": "bool",
                              "defaultValue": "[equals(parameters('kind'), 'Linux')]",
                              "metadata": {
                                "description": "Conditional. Defaults to false when creating Windows/app App Service Plan. Required if creating a Linux App Service Plan and must be set to true."
                              }
                            },
                            "appServiceEnvironmentId": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. The Resource ID of the App Service Environment to use for the App Service Plan."
                              }
                            },
                            "workerTierName": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. Target worker tier assigned to the App Service plan."
                              }
                            },
                            "perSiteScaling": {
                              "type": "bool",
                              "defaultValue": false,
                              "metadata": {
                                "description": "Optional. If true, apps assigned to this App Service plan can be scaled independently. If false, apps assigned to this App Service plan will scale to all instances of the plan."
                              }
                            },
                            "elasticScaleEnabled": {
                              "type": "bool",
                              "defaultValue": "[greater(parameters('maximumElasticWorkerCount'), 1)]",
                              "metadata": {
                                "description": "Optional. Enable/Disable ElasticScaleEnabled App Service Plan."
                              }
                            },
                            "maximumElasticWorkerCount": {
                              "type": "int",
                              "defaultValue": 1,
                              "metadata": {
                                "description": "Optional. Maximum number of total workers allowed for this ElasticScaleEnabled App Service Plan."
                              }
                            },
                            "targetWorkerCount": {
                              "type": "int",
                              "defaultValue": 0,
                              "metadata": {
                                "description": "Optional. Scaling worker count."
                              }
                            },
                            "targetWorkerSize": {
                              "type": "int",
                              "defaultValue": 0,
                              "allowedValues": [
                                0,
                                1,
                                2
                              ],
                              "metadata": {
                                "description": "Optional. The instance size of the hosting plan (small, medium, or large)."
                              }
                            },
                            "zoneRedundant": {
                              "type": "bool",
                              "defaultValue": "[if(or(startsWith(parameters('skuName'), 'P'), startsWith(parameters('skuName'), 'EP')), true(), false())]",
                              "metadata": {
                                "description": "Optional. Zone Redundant server farms can only be used on Premium or ElasticPremium SKU tiers within ZRS Supported regions (https://learn.microsoft.com/en-us/azure/storage/common/redundancy-regions-zrs)."
                              }
                            },
                            "lock": {
                              "$ref": "#/definitions/lockType",
                              "metadata": {
                                "description": "Optional. The lock settings of the service."
                              }
                            },
                            "roleAssignments": {
                              "$ref": "#/definitions/roleAssignmentType",
                              "metadata": {
                                "description": "Optional. Array of role assignments to create."
                              }
                            },
                            "tags": {
                              "type": "object",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Tags of the resource."
                              }
                            },
                            "enableTelemetry": {
                              "type": "bool",
                              "defaultValue": true,
                              "metadata": {
                                "description": "Optional. Enable/Disable usage telemetry for module."
                              }
                            },
                            "diagnosticSettings": {
                              "$ref": "#/definitions/diagnosticSettingType",
                              "metadata": {
                                "description": "Optional. The diagnostic settings of the service."
                              }
                            }
                          },
                          "variables": {
                            "builtInRoleNames": {
                              "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                              "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                              "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                              "Role Based Access Control Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]",
                              "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]",
                              "Web Plan Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '2cc479cb-7b4d-49a8-b449-8c00fd0f0a4b')]",
                              "Website Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'de139f84-1756-47ae-9be6-808fbbe84772')]"
                            }
                          },
                          "resources": {
                            "avmTelemetry": {
                              "condition": "[parameters('enableTelemetry')]",
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2024-03-01",
                              "name": "[format('46d3xbcp.res.web-serverfarm.{0}.{1}', replace('0.2.4', '.', '-'), substring(uniqueString(deployment().name, parameters('location')), 0, 4))]",
                              "properties": {
                                "mode": "Incremental",
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "resources": [],
                                  "outputs": {
                                    "telemetry": {
                                      "type": "String",
                                      "value": "For more information, see https://aka.ms/avm/TelemetryInfo"
                                    }
                                  }
                                }
                              }
                            },
                            "appServicePlan": {
                              "type": "Microsoft.Web/serverfarms",
                              "apiVersion": "2022-09-01",
                              "name": "[parameters('name')]",
                              "kind": "[parameters('kind')]",
                              "location": "[parameters('location')]",
                              "tags": "[parameters('tags')]",
                              "sku": {
                                "name": "[parameters('skuName')]",
                                "capacity": "[if(equals(parameters('skuName'), 'FC1'), null(), parameters('skuCapacity'))]",
                                "tier": "[if(equals(parameters('skuName'), 'FC1'), 'FlexConsumption', null())]"
                              },
                              "properties": {
                                "workerTierName": "[parameters('workerTierName')]",
                                "hostingEnvironmentProfile": "[if(not(empty(parameters('appServiceEnvironmentId'))), createObject('id', parameters('appServiceEnvironmentId')), null())]",
                                "perSiteScaling": "[parameters('perSiteScaling')]",
                                "maximumElasticWorkerCount": "[parameters('maximumElasticWorkerCount')]",
                                "elasticScaleEnabled": "[parameters('elasticScaleEnabled')]",
                                "reserved": "[parameters('reserved')]",
                                "targetWorkerCount": "[parameters('targetWorkerCount')]",
                                "targetWorkerSizeId": "[parameters('targetWorkerSize')]",
                                "zoneRedundant": "[parameters('zoneRedundant')]"
                              }
                            },
                            "appServicePlan_diagnosticSettings": {
                              "copy": {
                                "name": "appServicePlan_diagnosticSettings",
                                "count": "[length(coalesce(parameters('diagnosticSettings'), createArray()))]"
                              },
                              "type": "Microsoft.Insights/diagnosticSettings",
                              "apiVersion": "2021-05-01-preview",
                              "scope": "[format('Microsoft.Web/serverfarms/{0}', parameters('name'))]",
                              "name": "[coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'name'), format('{0}-diagnosticSettings', parameters('name')))]",
                              "properties": {
                                "copy": [
                                  {
                                    "name": "metrics",
                                    "count": "[length(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics'))))]",
                                    "input": {
                                      "category": "[coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics')))[copyIndex('metrics')].category]",
                                      "enabled": "[coalesce(tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics')))[copyIndex('metrics')], 'enabled'), true())]",
                                      "timeGrain": null
                                    }
                                  }
                                ],
                                "storageAccountId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'storageAccountResourceId')]",
                                "workspaceId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'workspaceResourceId')]",
                                "eventHubAuthorizationRuleId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'eventHubAuthorizationRuleResourceId')]",
                                "eventHubName": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'eventHubName')]",
                                "marketplacePartnerId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'marketplacePartnerResourceId')]",
                                "logAnalyticsDestinationType": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logAnalyticsDestinationType')]"
                              },
                              "dependsOn": [
                                "appServicePlan"
                              ]
                            },
                            "appServicePlan_lock": {
                              "condition": "[and(not(empty(coalesce(parameters('lock'), createObject()))), not(equals(tryGet(parameters('lock'), 'kind'), 'None')))]",
                              "type": "Microsoft.Authorization/locks",
                              "apiVersion": "2020-05-01",
                              "scope": "[format('Microsoft.Web/serverfarms/{0}', parameters('name'))]",
                              "name": "[coalesce(tryGet(parameters('lock'), 'name'), format('lock-{0}', parameters('name')))]",
                              "properties": {
                                "level": "[coalesce(tryGet(parameters('lock'), 'kind'), '')]",
                                "notes": "[if(equals(tryGet(parameters('lock'), 'kind'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot delete or modify the resource or child resources.')]"
                              },
                              "dependsOn": [
                                "appServicePlan"
                              ]
                            },
                            "appServicePlan_roleAssignments": {
                              "copy": {
                                "name": "appServicePlan_roleAssignments",
                                "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]"
                              },
                              "type": "Microsoft.Authorization/roleAssignments",
                              "apiVersion": "2022-04-01",
                              "scope": "[format('Microsoft.Web/serverfarms/{0}', parameters('name'))]",
                              "name": "[guid(resourceId('Microsoft.Web/serverfarms', parameters('name')), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].principalId, coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName)]",
                              "properties": {
                                "roleDefinitionId": "[coalesce(tryGet(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName), if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName)))]",
                                "principalId": "[coalesce(parameters('roleAssignments'), createArray())[copyIndex()].principalId]",
                                "description": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'description')]",
                                "principalType": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'principalType')]",
                                "condition": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'condition')]",
                                "conditionVersion": "[if(not(empty(tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                                "delegatedManagedIdentityResourceId": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
                              },
                              "dependsOn": [
                                "appServicePlan"
                              ]
                            }
                          },
                          "outputs": {
                            "resourceGroupName": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource group the app service plan was deployed into."
                              },
                              "value": "[resourceGroup().name]"
                            },
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "The name of the app service plan."
                              },
                              "value": "[parameters('name')]"
                            },
                            "resourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource ID of the app service plan."
                              },
                              "value": "[resourceId('Microsoft.Web/serverfarms', parameters('name'))]"
                            },
                            "location": {
                              "type": "string",
                              "metadata": {
                                "description": "The location the resource was deployed into."
                              },
                              "value": "[reference('appServicePlan', '2022-09-01', 'full').location]"
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Resources/deployments', take(format('{0}-ASEv3-Deployment', parameters('aseName')), 64))]"
                      ]
                    },
                    {
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[take(format('{0}-webApp-Deployment', parameters('webAppName')), 64)]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "kind": "[if(not(empty(parameters('kind'))), createObject('value', 'app,linux'), createObject('value', 'app'))]",
                          "name": {
                            "value": "[parameters('webAppName')]"
                          },
                          "location": {
                            "value": "[parameters('location')]"
                          },
                          "serverFarmResourceId": {
                            "value": "[reference(resourceId('Microsoft.Resources/deployments', take(format('{0}-app-Deployment', parameters('webAppName')), 64)), '2022-09-01').outputs.resourceId.value]"
                          },
                          "appInsightResourceId": {
                            "value": "[reference(resourceId('Microsoft.Resources/deployments', format('{0}-appInsights-Deployment', uniqueString(deployment().name, parameters('location')))), '2022-09-01').outputs.resourceId.value]"
                          },
                          "siteConfig": {
                            "value": "[parameters('siteConfig')]"
                          },
                          "clientAffinityEnabled": {
                            "value": false
                          },
                          "diagnosticSettings": {
                            "value": [
                              {
                                "workspaceResourceId": "[parameters('logAnalyticsWsId')]"
                              }
                            ]
                          },
                          "virtualNetworkSubnetId": "[if(not(parameters('deployAseV3')), createObject('value', parameters('subnetIdForVnetInjection')), createObject('value', ''))]",
                          "managedIdentities": {
                            "value": {
                              "userAssignedResourceIds": [
                                "[format('{0}', reference(resourceId('Microsoft.Resources/deployments', format('{0}-deployment', uniqueString(deployment().name, parameters('location'), 'webapp'))), '2022-09-01').outputs.resourceId.value)]"
                              ]
                            }
                          },
                          "slots": {
                            "value": [
                              {
                                "name": "[variables('slotName')]"
                              }
                            ]
                          },
                          "privateEndpoints": "[if(and(not(empty(parameters('subnetPrivateEndpointId'))), not(parameters('deployAseV3'))), createObject('value', createArray(createObject('name', 'webApp', 'subnetResourceId', parameters('subnetPrivateEndpointId'), 'privateDnsZoneGroup', createObject('name', 'webApp', 'privateDnsZoneGroupConfigs', createArray(createObject('name', variables('webAppDnsZoneName'), 'privateDnsZoneResourceId', reference(resourceId('Microsoft.Resources/deployments', take(format('{0}-PrivateDnsZoneDeployment', replace(variables('webAppDnsZoneName'), '.', '-')), 64)), '2022-09-01').outputs.resourceId.value)))))), createObject('value', createArray()))]",
                          "tags": {
                            "value": "[parameters('tags')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "languageVersion": "2.0",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.30.3.12046",
                              "templateHash": "12818774655408075317"
                            },
                            "name": "Web/Function Apps",
                            "description": "This module deploys a Web or Function App.",
                            "owner": "Azure/module-maintainers"
                          },
                          "definitions": {
                            "managedIdentitiesType": {
                              "type": "object",
                              "properties": {
                                "systemAssigned": {
                                  "type": "bool",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Enables system assigned managed identity on the resource."
                                  }
                                },
                                "userAssignedResourceIds": {
                                  "type": "array",
                                  "items": {
                                    "type": "string"
                                  },
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The resource ID(s) to assign to the resource."
                                  }
                                }
                              },
                              "nullable": true
                            },
                            "lockType": {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Specify the name of lock."
                                  }
                                },
                                "kind": {
                                  "type": "string",
                                  "allowedValues": [
                                    "CanNotDelete",
                                    "None",
                                    "ReadOnly"
                                  ],
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Specify the type of lock."
                                  }
                                }
                              },
                              "nullable": true
                            },
                            "roleAssignmentType": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "name": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The name (as GUID) of the role assignment. If not provided, a GUID will be generated."
                                    }
                                  },
                                  "roleDefinitionIdOrName": {
                                    "type": "string",
                                    "metadata": {
                                      "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                                    }
                                  },
                                  "principalId": {
                                    "type": "string",
                                    "metadata": {
                                      "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                                    }
                                  },
                                  "principalType": {
                                    "type": "string",
                                    "allowedValues": [
                                      "Device",
                                      "ForeignGroup",
                                      "Group",
                                      "ServicePrincipal",
                                      "User"
                                    ],
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The principal type of the assigned principal ID."
                                    }
                                  },
                                  "description": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The description of the role assignment."
                                    }
                                  },
                                  "condition": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                                    }
                                  },
                                  "conditionVersion": {
                                    "type": "string",
                                    "allowedValues": [
                                      "2.0"
                                    ],
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. Version of the condition."
                                    }
                                  },
                                  "delegatedManagedIdentityResourceId": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The Resource Id of the delegated managed identity resource."
                                    }
                                  }
                                }
                              },
                              "nullable": true
                            },
                            "privateEndpointType": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "name": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The name of the private endpoint."
                                    }
                                  },
                                  "location": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The location to deploy the private endpoint to."
                                    }
                                  },
                                  "privateLinkServiceConnectionName": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The name of the private link connection to create."
                                    }
                                  },
                                  "service": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The subresource to deploy the private endpoint for. For example \"vault\", \"mysqlServer\" or \"dataFactory\"."
                                    }
                                  },
                                  "subnetResourceId": {
                                    "type": "string",
                                    "metadata": {
                                      "description": "Required. Resource ID of the subnet where the endpoint needs to be created."
                                    }
                                  },
                                  "privateDnsZoneGroup": {
                                    "type": "object",
                                    "properties": {
                                      "name": {
                                        "type": "string",
                                        "nullable": true,
                                        "metadata": {
                                          "description": "Optional. The name of the Private DNS Zone Group."
                                        }
                                      },
                                      "privateDnsZoneGroupConfigs": {
                                        "type": "array",
                                        "items": {
                                          "type": "object",
                                          "properties": {
                                            "name": {
                                              "type": "string",
                                              "nullable": true,
                                              "metadata": {
                                                "description": "Optional. The name of the private DNS zone group config."
                                              }
                                            },
                                            "privateDnsZoneResourceId": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "Required. The resource id of the private DNS zone."
                                              }
                                            }
                                          }
                                        },
                                        "metadata": {
                                          "description": "Required. The private DNS zone groups to associate the private endpoint. A DNS zone group can support up to 5 DNS zones."
                                        }
                                      }
                                    },
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The private DNS zone group to configure for the private endpoint."
                                    }
                                  },
                                  "isManualConnection": {
                                    "type": "bool",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. If Manual Private Link Connection is required."
                                    }
                                  },
                                  "manualConnectionRequestMessage": {
                                    "type": "string",
                                    "nullable": true,
                                    "maxLength": 140,
                                    "metadata": {
                                      "description": "Optional. A message passed to the owner of the remote resource with the manual connection request."
                                    }
                                  },
                                  "customDnsConfigs": {
                                    "type": "array",
                                    "items": {
                                      "type": "object",
                                      "properties": {
                                        "fqdn": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Required. Fqdn that resolves to private endpoint IP address."
                                          }
                                        },
                                        "ipAddresses": {
                                          "type": "array",
                                          "items": {
                                            "type": "string"
                                          },
                                          "metadata": {
                                            "description": "Required. A list of private IP addresses of the private endpoint."
                                          }
                                        }
                                      }
                                    },
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. Custom DNS configurations."
                                    }
                                  },
                                  "ipConfigurations": {
                                    "type": "array",
                                    "items": {
                                      "type": "object",
                                      "properties": {
                                        "name": {
                                          "type": "string",
                                          "metadata": {
                                            "description": "Required. The name of the resource that is unique within a resource group."
                                          }
                                        },
                                        "properties": {
                                          "type": "object",
                                          "properties": {
                                            "groupId": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "Required. The ID of a group obtained from the remote resource that this private endpoint should connect to."
                                              }
                                            },
                                            "memberName": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "Required. The member name of a group obtained from the remote resource that this private endpoint should connect to."
                                              }
                                            },
                                            "privateIPAddress": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "Required. A private IP address obtained from the private endpoint's subnet."
                                              }
                                            }
                                          },
                                          "metadata": {
                                            "description": "Required. Properties of private endpoint IP configurations."
                                          }
                                        }
                                      }
                                    },
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. A list of IP configurations of the private endpoint. This will be used to map to the First Party Service endpoints."
                                    }
                                  },
                                  "applicationSecurityGroupResourceIds": {
                                    "type": "array",
                                    "items": {
                                      "type": "string"
                                    },
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. Application security groups in which the private endpoint IP configuration is included."
                                    }
                                  },
                                  "customNetworkInterfaceName": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The custom name of the network interface attached to the private endpoint."
                                    }
                                  },
                                  "lock": {
                                    "$ref": "#/definitions/lockType",
                                    "metadata": {
                                      "description": "Optional. Specify the type of lock."
                                    }
                                  },
                                  "roleAssignments": {
                                    "$ref": "#/definitions/roleAssignmentType",
                                    "metadata": {
                                      "description": "Optional. Array of role assignments to create."
                                    }
                                  },
                                  "tags": {
                                    "type": "object",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. Tags to be applied on all resources/resource groups in this deployment."
                                    }
                                  },
                                  "enableTelemetry": {
                                    "type": "bool",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. Enable/Disable usage telemetry for module."
                                    }
                                  },
                                  "resourceGroupName": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. Specify if you want to deploy the Private Endpoint into a different resource group than the main resource."
                                    }
                                  }
                                }
                              },
                              "nullable": true
                            },
                            "diagnosticSettingType": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "name": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The name of diagnostic setting."
                                    }
                                  },
                                  "logCategoriesAndGroups": {
                                    "type": "array",
                                    "items": {
                                      "type": "object",
                                      "properties": {
                                        "category": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. Name of a Diagnostic Log category for a resource type this setting is applied to. Set the specific logs to collect here."
                                          }
                                        },
                                        "categoryGroup": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. Name of a Diagnostic Log category group for a resource type this setting is applied to. Set to `allLogs` to collect all logs."
                                          }
                                        },
                                        "enabled": {
                                          "type": "bool",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. Enable or disable the category explicitly. Default is `true`."
                                          }
                                        }
                                      }
                                    },
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The name of logs that will be streamed. \"allLogs\" includes all possible logs for the resource. Set to `[]` to disable log collection."
                                    }
                                  },
                                  "metricCategories": {
                                    "type": "array",
                                    "items": {
                                      "type": "object",
                                      "properties": {
                                        "category": {
                                          "type": "string",
                                          "metadata": {
                                            "description": "Required. Name of a Diagnostic Metric category for a resource type this setting is applied to. Set to `AllMetrics` to collect all metrics."
                                          }
                                        },
                                        "enabled": {
                                          "type": "bool",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. Enable or disable the category explicitly. Default is `true`."
                                          }
                                        }
                                      }
                                    },
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The name of metrics that will be streamed. \"allMetrics\" includes all possible metrics for the resource. Set to `[]` to disable metric collection."
                                    }
                                  },
                                  "logAnalyticsDestinationType": {
                                    "type": "string",
                                    "allowedValues": [
                                      "AzureDiagnostics",
                                      "Dedicated"
                                    ],
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. A string indicating whether the export to Log Analytics should use the default destination type, i.e. AzureDiagnostics, or use a destination type."
                                    }
                                  },
                                  "workspaceResourceId": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. Resource ID of the diagnostic log analytics workspace. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                                    }
                                  },
                                  "storageAccountResourceId": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. Resource ID of the diagnostic storage account. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                                    }
                                  },
                                  "eventHubAuthorizationRuleResourceId": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. Resource ID of the diagnostic event hub authorization rule for the Event Hubs namespace in which the event hub should be created or streamed to."
                                    }
                                  },
                                  "eventHubName": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. Name of the diagnostic event hub within the namespace to which logs are streamed. Without this, an event hub is created for each log category. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                                    }
                                  },
                                  "marketplacePartnerResourceId": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The full ARM resource ID of the Marketplace resource to which you would like to send Diagnostic Logs."
                                    }
                                  }
                                }
                              },
                              "nullable": true
                            }
                          },
                          "parameters": {
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. Name of the site."
                              }
                            },
                            "location": {
                              "type": "string",
                              "defaultValue": "[resourceGroup().location]",
                              "metadata": {
                                "description": "Optional. Location for all Resources."
                              }
                            },
                            "kind": {
                              "type": "string",
                              "allowedValues": [
                                "functionapp",
                                "functionapp,linux",
                                "functionapp,workflowapp",
                                "functionapp,workflowapp,linux",
                                "functionapp,linux,container",
                                "functionapp,linux,container,azurecontainerapps",
                                "app,linux",
                                "app",
                                "linux,api",
                                "api",
                                "app,linux,container",
                                "app,container,windows"
                              ],
                              "metadata": {
                                "description": "Required. Type of site to deploy."
                              }
                            },
                            "serverFarmResourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The resource ID of the app service plan to use for the site."
                              }
                            },
                            "managedEnvironmentId": {
                              "type": "string",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Azure Resource Manager ID of the customers selected Managed Environment on which to host this app."
                              }
                            },
                            "httpsOnly": {
                              "type": "bool",
                              "defaultValue": true,
                              "metadata": {
                                "description": "Optional. Configures a site to accept only HTTPS requests. Issues redirect for HTTP requests."
                              }
                            },
                            "clientAffinityEnabled": {
                              "type": "bool",
                              "defaultValue": true,
                              "metadata": {
                                "description": "Optional. If client affinity is enabled."
                              }
                            },
                            "appServiceEnvironmentResourceId": {
                              "type": "string",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. The resource ID of the app service environment to use for this resource."
                              }
                            },
                            "managedIdentities": {
                              "$ref": "#/definitions/managedIdentitiesType",
                              "metadata": {
                                "description": "Optional. The managed identity definition for this resource."
                              }
                            },
                            "keyVaultAccessIdentityResourceId": {
                              "type": "string",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. The resource ID of the assigned identity to be used to access a key vault with."
                              }
                            },
                            "storageAccountRequired": {
                              "type": "bool",
                              "defaultValue": false,
                              "metadata": {
                                "description": "Optional. Checks if Customer provided storage account is required."
                              }
                            },
                            "virtualNetworkSubnetId": {
                              "type": "string",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Azure Resource Manager ID of the Virtual network and subnet to be joined by Regional VNET Integration. This must be of the form /subscriptions/{subscriptionName}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualNetworks/{vnetName}/subnets/{subnetName}."
                              }
                            },
                            "vnetContentShareEnabled": {
                              "type": "bool",
                              "defaultValue": false,
                              "metadata": {
                                "description": "Optional. To enable accessing content over virtual network."
                              }
                            },
                            "vnetImagePullEnabled": {
                              "type": "bool",
                              "defaultValue": false,
                              "metadata": {
                                "description": "Optional. To enable pulling image over Virtual Network."
                              }
                            },
                            "vnetRouteAllEnabled": {
                              "type": "bool",
                              "defaultValue": false,
                              "metadata": {
                                "description": "Optional. Virtual Network Route All enabled. This causes all outbound traffic to have Virtual Network Security Groups and User Defined Routes applied."
                              }
                            },
                            "scmSiteAlsoStopped": {
                              "type": "bool",
                              "defaultValue": false,
                              "metadata": {
                                "description": "Optional. Stop SCM (KUDU) site when the app is stopped."
                              }
                            },
                            "siteConfig": {
                              "type": "object",
                              "defaultValue": {
                                "alwaysOn": true
                              },
                              "metadata": {
                                "description": "Optional. The site config object."
                              }
                            },
                            "storageAccountResourceId": {
                              "type": "string",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Required if app of kind functionapp. Resource ID of the storage account to manage triggers and logging function executions."
                              }
                            },
                            "storageAccountUseIdentityAuthentication": {
                              "type": "bool",
                              "defaultValue": false,
                              "metadata": {
                                "description": "Optional. If the provided storage account requires Identity based authentication ('allowSharedKeyAccess' is set to false). When set to true, the minimum role assignment required for the App Service Managed Identity to the storage account is 'Storage Blob Data Owner'."
                              }
                            },
                            "apiManagementConfiguration": {
                              "type": "object",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. The web settings api management configuration."
                              }
                            },
                            "msDeployConfiguration": {
                              "type": "object",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. The extension MSDeployment configuration."
                              }
                            },
                            "appInsightResourceId": {
                              "type": "string",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Resource ID of the app insight to leverage for this resource."
                              }
                            },
                            "appSettingsKeyValuePairs": {
                              "type": "object",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. The app settings-value pairs except for AzureWebJobsStorage, AzureWebJobsDashboard, APPINSIGHTS_INSTRUMENTATIONKEY and APPLICATIONINSIGHTS_CONNECTION_STRING."
                              }
                            },
                            "authSettingV2Configuration": {
                              "type": "object",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. The auth settings V2 configuration."
                              }
                            },
                            "lock": {
                              "$ref": "#/definitions/lockType",
                              "metadata": {
                                "description": "Optional. The lock settings of the service."
                              }
                            },
                            "logsConfiguration": {
                              "type": "object",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. The logs settings configuration."
                              }
                            },
                            "privateEndpoints": {
                              "$ref": "#/definitions/privateEndpointType",
                              "metadata": {
                                "description": "Optional. Configuration details for private endpoints. For security reasons, it is recommended to use private endpoints whenever possible."
                              }
                            },
                            "slots": {
                              "type": "array",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Configuration for deployment slots for an app."
                              }
                            },
                            "tags": {
                              "type": "object",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Tags of the resource."
                              }
                            },
                            "enableTelemetry": {
                              "type": "bool",
                              "defaultValue": true,
                              "metadata": {
                                "description": "Optional. Enable/Disable usage telemetry for module."
                              }
                            },
                            "roleAssignments": {
                              "$ref": "#/definitions/roleAssignmentType",
                              "metadata": {
                                "description": "Optional. Array of role assignments to create."
                              }
                            },
                            "diagnosticSettings": {
                              "$ref": "#/definitions/diagnosticSettingType",
                              "metadata": {
                                "description": "Optional. The diagnostic settings of the service."
                              }
                            },
                            "clientCertEnabled": {
                              "type": "bool",
                              "defaultValue": false,
                              "metadata": {
                                "description": "Optional. To enable client certificate authentication (TLS mutual authentication)."
                              }
                            },
                            "clientCertExclusionPaths": {
                              "type": "string",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Client certificate authentication comma-separated exclusion paths."
                              }
                            },
                            "clientCertMode": {
                              "type": "string",
                              "defaultValue": "Optional",
                              "allowedValues": [
                                "Optional",
                                "OptionalInteractiveUser",
                                "Required"
                              ],
                              "metadata": {
                                "description": "Optional. This composes with ClientCertEnabled setting.\n- ClientCertEnabled=false means ClientCert is ignored.\n- ClientCertEnabled=true and ClientCertMode=Required means ClientCert is required.\n- ClientCertEnabled=true and ClientCertMode=Optional means ClientCert is optional or accepted.\n"
                              }
                            },
                            "cloningInfo": {
                              "type": "object",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. If specified during app creation, the app is cloned from a source app."
                              }
                            },
                            "containerSize": {
                              "type": "int",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Size of the function container."
                              }
                            },
                            "dailyMemoryTimeQuota": {
                              "type": "int",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Maximum allowed daily memory-time quota (applicable on dynamic apps only)."
                              }
                            },
                            "enabled": {
                              "type": "bool",
                              "defaultValue": true,
                              "metadata": {
                                "description": "Optional. Setting this value to false disables the app (takes the app offline)."
                              }
                            },
                            "hostNameSslStates": {
                              "type": "array",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Hostname SSL states are used to manage the SSL bindings for app's hostnames."
                              }
                            },
                            "hyperV": {
                              "type": "bool",
                              "defaultValue": false,
                              "metadata": {
                                "description": "Optional. Hyper-V sandbox."
                              }
                            },
                            "redundancyMode": {
                              "type": "string",
                              "defaultValue": "None",
                              "allowedValues": [
                                "ActiveActive",
                                "Failover",
                                "GeoRedundant",
                                "Manual",
                                "None"
                              ],
                              "metadata": {
                                "description": "Optional. Site redundancy mode."
                              }
                            },
                            "basicPublishingCredentialsPolicies": {
                              "type": "array",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. The site publishing credential policy names which are associated with the sites."
                              }
                            },
                            "hybridConnectionRelays": {
                              "type": "array",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Names of hybrid connection relays to connect app with."
                              }
                            },
                            "publicNetworkAccess": {
                              "type": "string",
                              "nullable": true,
                              "allowedValues": [
                                "Enabled",
                                "Disabled"
                              ],
                              "metadata": {
                                "description": "Optional. Whether or not public network access is allowed for this resource. For security reasons it should be disabled. If not specified, it will be disabled by default if private endpoints are set."
                              }
                            }
                          },
                          "variables": {
                            "copy": [
                              {
                                "name": "formattedRoleAssignments",
                                "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]",
                                "input": "[union(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')], createObject('roleDefinitionId', coalesce(tryGet(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName), if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName)))))]"
                              }
                            ],
                            "formattedUserAssignedIdentities": "[reduce(map(coalesce(tryGet(parameters('managedIdentities'), 'userAssignedResourceIds'), createArray()), lambda('id', createObject(format('{0}', lambdaVariables('id')), createObject()))), createObject(), lambda('cur', 'next', union(lambdaVariables('cur'), lambdaVariables('next'))))]",
                            "identity": "[if(not(empty(parameters('managedIdentities'))), createObject('type', if(coalesce(tryGet(parameters('managedIdentities'), 'systemAssigned'), false()), if(not(empty(coalesce(tryGet(parameters('managedIdentities'), 'userAssignedResourceIds'), createObject()))), 'SystemAssigned, UserAssigned', 'SystemAssigned'), if(not(empty(coalesce(tryGet(parameters('managedIdentities'), 'userAssignedResourceIds'), createObject()))), 'UserAssigned', 'None')), 'userAssignedIdentities', if(not(empty(variables('formattedUserAssignedIdentities'))), variables('formattedUserAssignedIdentities'), null())), null())]",
                            "builtInRoleNames": {
                              "App Compliance Automation Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '0f37683f-2463-46b6-9ce7-9b788b988ba2')]",
                              "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                              "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                              "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                              "Role Based Access Control Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]",
                              "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]",
                              "Web Plan Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '2cc479cb-7b4d-49a8-b449-8c00fd0f0a4b')]",
                              "Website Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'de139f84-1756-47ae-9be6-808fbbe84772')]"
                            }
                          },
                          "resources": {
                            "avmTelemetry": {
                              "condition": "[parameters('enableTelemetry')]",
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2024-03-01",
                              "name": "[format('46d3xbcp.res.web-site.{0}.{1}', replace('0.9.0', '.', '-'), substring(uniqueString(deployment().name, parameters('location')), 0, 4))]",
                              "properties": {
                                "mode": "Incremental",
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "resources": [],
                                  "outputs": {
                                    "telemetry": {
                                      "type": "String",
                                      "value": "For more information, see https://aka.ms/avm/TelemetryInfo"
                                    }
                                  }
                                }
                              }
                            },
                            "app": {
                              "type": "Microsoft.Web/sites",
                              "apiVersion": "2023-12-01",
                              "name": "[parameters('name')]",
                              "location": "[parameters('location')]",
                              "kind": "[parameters('kind')]",
                              "tags": "[parameters('tags')]",
                              "identity": "[variables('identity')]",
                              "properties": {
                                "managedEnvironmentId": "[if(not(empty(parameters('managedEnvironmentId'))), parameters('managedEnvironmentId'), null())]",
                                "serverFarmId": "[parameters('serverFarmResourceId')]",
                                "clientAffinityEnabled": "[parameters('clientAffinityEnabled')]",
                                "httpsOnly": "[parameters('httpsOnly')]",
                                "hostingEnvironmentProfile": "[if(not(empty(parameters('appServiceEnvironmentResourceId'))), createObject('id', parameters('appServiceEnvironmentResourceId')), null())]",
                                "storageAccountRequired": "[parameters('storageAccountRequired')]",
                                "keyVaultReferenceIdentity": "[parameters('keyVaultAccessIdentityResourceId')]",
                                "virtualNetworkSubnetId": "[parameters('virtualNetworkSubnetId')]",
                                "siteConfig": "[parameters('siteConfig')]",
                                "clientCertEnabled": "[parameters('clientCertEnabled')]",
                                "clientCertExclusionPaths": "[parameters('clientCertExclusionPaths')]",
                                "clientCertMode": "[parameters('clientCertMode')]",
                                "cloningInfo": "[parameters('cloningInfo')]",
                                "containerSize": "[parameters('containerSize')]",
                                "dailyMemoryTimeQuota": "[parameters('dailyMemoryTimeQuota')]",
                                "enabled": "[parameters('enabled')]",
                                "hostNameSslStates": "[parameters('hostNameSslStates')]",
                                "hyperV": "[parameters('hyperV')]",
                                "redundancyMode": "[parameters('redundancyMode')]",
                                "publicNetworkAccess": "[if(not(empty(parameters('publicNetworkAccess'))), parameters('publicNetworkAccess'), if(not(empty(parameters('privateEndpoints'))), 'Disabled', 'Enabled'))]",
                                "vnetContentShareEnabled": "[parameters('vnetContentShareEnabled')]",
                                "vnetImagePullEnabled": "[parameters('vnetImagePullEnabled')]",
                                "vnetRouteAllEnabled": "[parameters('vnetRouteAllEnabled')]",
                                "scmSiteAlsoStopped": "[parameters('scmSiteAlsoStopped')]"
                              }
                            },
                            "app_lock": {
                              "condition": "[and(not(empty(coalesce(parameters('lock'), createObject()))), not(equals(tryGet(parameters('lock'), 'kind'), 'None')))]",
                              "type": "Microsoft.Authorization/locks",
                              "apiVersion": "2020-05-01",
                              "scope": "[format('Microsoft.Web/sites/{0}', parameters('name'))]",
                              "name": "[coalesce(tryGet(parameters('lock'), 'name'), format('lock-{0}', parameters('name')))]",
                              "properties": {
                                "level": "[coalesce(tryGet(parameters('lock'), 'kind'), '')]",
                                "notes": "[if(equals(tryGet(parameters('lock'), 'kind'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot delete or modify the resource or child resources.')]"
                              },
                              "dependsOn": [
                                "app"
                              ]
                            },
                            "app_diagnosticSettings": {
                              "copy": {
                                "name": "app_diagnosticSettings",
                                "count": "[length(coalesce(parameters('diagnosticSettings'), createArray()))]"
                              },
                              "type": "Microsoft.Insights/diagnosticSettings",
                              "apiVersion": "2021-05-01-preview",
                              "scope": "[format('Microsoft.Web/sites/{0}', parameters('name'))]",
                              "name": "[coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'name'), format('{0}-diagnosticSettings', parameters('name')))]",
                              "properties": {
                                "copy": [
                                  {
                                    "name": "metrics",
                                    "count": "[length(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics'))))]",
                                    "input": {
                                      "category": "[coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics')))[copyIndex('metrics')].category]",
                                      "enabled": "[coalesce(tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics')))[copyIndex('metrics')], 'enabled'), true())]",
                                      "timeGrain": null
                                    }
                                  },
                                  {
                                    "name": "logs",
                                    "count": "[length(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs'))))]",
                                    "input": {
                                      "categoryGroup": "[tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'categoryGroup')]",
                                      "category": "[tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'category')]",
                                      "enabled": "[coalesce(tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'enabled'), true())]"
                                    }
                                  }
                                ],
                                "storageAccountId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'storageAccountResourceId')]",
                                "workspaceId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'workspaceResourceId')]",
                                "eventHubAuthorizationRuleId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'eventHubAuthorizationRuleResourceId')]",
                                "eventHubName": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'eventHubName')]",
                                "marketplacePartnerId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'marketplacePartnerResourceId')]",
                                "logAnalyticsDestinationType": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logAnalyticsDestinationType')]"
                              },
                              "dependsOn": [
                                "app"
                              ]
                            },
                            "app_roleAssignments": {
                              "copy": {
                                "name": "app_roleAssignments",
                                "count": "[length(coalesce(variables('formattedRoleAssignments'), createArray()))]"
                              },
                              "type": "Microsoft.Authorization/roleAssignments",
                              "apiVersion": "2022-04-01",
                              "scope": "[format('Microsoft.Web/sites/{0}', parameters('name'))]",
                              "name": "[coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'name'), guid(resourceId('Microsoft.Web/sites', parameters('name')), coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId, coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId))]",
                              "properties": {
                                "roleDefinitionId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId]",
                                "principalId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId]",
                                "description": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'description')]",
                                "principalType": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'principalType')]",
                                "condition": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition')]",
                                "conditionVersion": "[if(not(empty(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                                "delegatedManagedIdentityResourceId": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
                              },
                              "dependsOn": [
                                "app"
                              ]
                            },
                            "app_appsettings": {
                              "condition": "[or(or(not(empty(parameters('appSettingsKeyValuePairs'))), not(empty(parameters('appInsightResourceId')))), not(empty(parameters('storageAccountResourceId'))))]",
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "[format('{0}-Site-Config-AppSettings', uniqueString(deployment().name, parameters('location')))]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "appName": {
                                    "value": "[parameters('name')]"
                                  },
                                  "kind": {
                                    "value": "[parameters('kind')]"
                                  },
                                  "storageAccountResourceId": {
                                    "value": "[parameters('storageAccountResourceId')]"
                                  },
                                  "storageAccountUseIdentityAuthentication": {
                                    "value": "[parameters('storageAccountUseIdentityAuthentication')]"
                                  },
                                  "appInsightResourceId": {
                                    "value": "[parameters('appInsightResourceId')]"
                                  },
                                  "appSettingsKeyValuePairs": {
                                    "value": "[parameters('appSettingsKeyValuePairs')]"
                                  },
                                  "currentAppSettings": "[if(not(empty(resourceId('Microsoft.Web/sites', parameters('name')))), createObject('value', list(format('{0}/config/appsettings', resourceId('Microsoft.Web/sites', parameters('name'))), '2023-12-01').properties), createObject('value', createObject()))]"
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "languageVersion": "2.0",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.30.3.12046",
                                      "templateHash": "13784573514230124302"
                                    },
                                    "name": "Site App Settings",
                                    "description": "This module deploys a Site App Setting.",
                                    "owner": "Azure/module-maintainers"
                                  },
                                  "parameters": {
                                    "appName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Conditional. The name of the parent site resource. Required if the template is used in a standalone deployment."
                                      }
                                    },
                                    "kind": {
                                      "type": "string",
                                      "allowedValues": [
                                        "functionapp",
                                        "functionapp,linux",
                                        "functionapp,workflowapp",
                                        "functionapp,workflowapp,linux",
                                        "functionapp,linux,container",
                                        "functionapp,linux,container,azurecontainerapps",
                                        "app,linux",
                                        "app",
                                        "linux,api",
                                        "api",
                                        "app,linux,container",
                                        "app,container,windows"
                                      ],
                                      "metadata": {
                                        "description": "Required. Type of site to deploy."
                                      }
                                    },
                                    "storageAccountResourceId": {
                                      "type": "string",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. Required if app of kind functionapp. Resource ID of the storage account to manage triggers and logging function executions."
                                      }
                                    },
                                    "storageAccountUseIdentityAuthentication": {
                                      "type": "bool",
                                      "defaultValue": false,
                                      "metadata": {
                                        "description": "Optional. If the provided storage account requires Identity based authentication ('allowSharedKeyAccess' is set to false). When set to true, the minimum role assignment required for the App Service Managed Identity to the storage account is 'Storage Blob Data Owner'."
                                      }
                                    },
                                    "appInsightResourceId": {
                                      "type": "string",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. Resource ID of the app insight to leverage for this resource."
                                      }
                                    },
                                    "appSettingsKeyValuePairs": {
                                      "type": "object",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. The app settings key-value pairs except for AzureWebJobsStorage, AzureWebJobsDashboard, APPINSIGHTS_INSTRUMENTATIONKEY and APPLICATIONINSIGHTS_CONNECTION_STRING."
                                      }
                                    },
                                    "currentAppSettings": {
                                      "type": "object",
                                      "defaultValue": {},
                                      "metadata": {
                                        "description": "Optional. The current app settings."
                                      }
                                    }
                                  },
                                  "resources": {
                                    "app": {
                                      "existing": true,
                                      "type": "Microsoft.Web/sites",
                                      "apiVersion": "2023-12-01",
                                      "name": "[parameters('appName')]"
                                    },
                                    "appInsight": {
                                      "condition": "[not(empty(parameters('appInsightResourceId')))]",
                                      "existing": true,
                                      "type": "Microsoft.Insights/components",
                                      "apiVersion": "2020-02-02",
                                      "subscriptionId": "[split(coalesce(parameters('appInsightResourceId'), '//'), '/')[2]]",
                                      "resourceGroup": "[split(coalesce(parameters('appInsightResourceId'), '////'), '/')[4]]",
                                      "name": "[last(split(coalesce(parameters('appInsightResourceId'), 'dummyName'), '/'))]"
                                    },
                                    "storageAccount": {
                                      "condition": "[not(empty(parameters('storageAccountResourceId')))]",
                                      "existing": true,
                                      "type": "Microsoft.Storage/storageAccounts",
                                      "apiVersion": "2023-05-01",
                                      "subscriptionId": "[split(coalesce(parameters('storageAccountResourceId'), '//'), '/')[2]]",
                                      "resourceGroup": "[split(coalesce(parameters('storageAccountResourceId'), '////'), '/')[4]]",
                                      "name": "[last(split(coalesce(parameters('storageAccountResourceId'), 'dummyName'), '/'))]"
                                    },
                                    "appSettings": {
                                      "type": "Microsoft.Web/sites/config",
                                      "apiVersion": "2023-12-01",
                                      "name": "[format('{0}/{1}', parameters('appName'), 'appsettings')]",
                                      "kind": "[parameters('kind')]",
                                      "properties": "[union(coalesce(parameters('currentAppSettings'), createObject()), coalesce(parameters('appSettingsKeyValuePairs'), createObject()), if(and(not(empty(parameters('storageAccountResourceId'))), not(parameters('storageAccountUseIdentityAuthentication'))), createObject('AzureWebJobsStorage', format('DefaultEndpointsProtocol=https;AccountName={0};AccountKey={1};EndpointSuffix={2}', last(split(coalesce(parameters('storageAccountResourceId'), 'dummyName'), '/')), listKeys(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(coalesce(parameters('storageAccountResourceId'), '//'), '/')[2], split(coalesce(parameters('storageAccountResourceId'), '////'), '/')[4]), 'Microsoft.Storage/storageAccounts', last(split(coalesce(parameters('storageAccountResourceId'), 'dummyName'), '/'))), '2023-05-01').keys[0].value, environment().suffixes.storage)), if(and(not(empty(parameters('storageAccountResourceId'))), parameters('storageAccountUseIdentityAuthentication')), union(createObject('AzureWebJobsStorage__accountName', last(split(coalesce(parameters('storageAccountResourceId'), 'dummyName'), '/'))), createObject('AzureWebJobsStorage__blobServiceUri', reference('storageAccount').primaryEndpoints.blob)), createObject())), if(not(empty(parameters('appInsightResourceId'))), createObject('APPLICATIONINSIGHTS_CONNECTION_STRING', reference('appInsight').ConnectionString), createObject()))]",
                                      "dependsOn": [
                                        "app",
                                        "appInsight",
                                        "storageAccount"
                                      ]
                                    }
                                  },
                                  "outputs": {
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the site config."
                                      },
                                      "value": "appsettings"
                                    },
                                    "resourceId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource ID of the site config."
                                      },
                                      "value": "[resourceId('Microsoft.Web/sites/config', parameters('appName'), 'appsettings')]"
                                    },
                                    "resourceGroupName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource group the site config was deployed into."
                                      },
                                      "value": "[resourceGroup().name]"
                                    }
                                  }
                                }
                              },
                              "dependsOn": [
                                "app"
                              ]
                            },
                            "app_authsettingsv2": {
                              "condition": "[not(empty(parameters('authSettingV2Configuration')))]",
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "[format('{0}-Site-Config-AuthSettingsV2', uniqueString(deployment().name, parameters('location')))]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "appName": {
                                    "value": "[parameters('name')]"
                                  },
                                  "kind": {
                                    "value": "[parameters('kind')]"
                                  },
                                  "authSettingV2Configuration": {
                                    "value": "[coalesce(parameters('authSettingV2Configuration'), createObject())]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.30.3.12046",
                                      "templateHash": "17340438127269643504"
                                    },
                                    "name": "Site Auth Settings V2 Config",
                                    "description": "This module deploys a Site Auth Settings V2 Configuration.",
                                    "owner": "Azure/module-maintainers"
                                  },
                                  "parameters": {
                                    "appName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Conditional. The name of the parent site resource. Required if the template is used in a standalone deployment."
                                      }
                                    },
                                    "kind": {
                                      "type": "string",
                                      "allowedValues": [
                                        "functionapp",
                                        "functionapp,linux",
                                        "functionapp,workflowapp",
                                        "functionapp,workflowapp,linux",
                                        "functionapp,linux,container",
                                        "functionapp,linux,container,azurecontainerapps",
                                        "app,linux",
                                        "app",
                                        "linux,api",
                                        "api",
                                        "app,linux,container",
                                        "app,container,windows"
                                      ],
                                      "metadata": {
                                        "description": "Required. Type of site to deploy."
                                      }
                                    },
                                    "authSettingV2Configuration": {
                                      "type": "object",
                                      "metadata": {
                                        "description": "Required. The auth settings V2 configuration."
                                      }
                                    }
                                  },
                                  "resources": [
                                    {
                                      "type": "Microsoft.Web/sites/config",
                                      "apiVersion": "2022-09-01",
                                      "name": "[format('{0}/{1}', parameters('appName'), 'authsettingsV2')]",
                                      "kind": "[parameters('kind')]",
                                      "properties": "[parameters('authSettingV2Configuration')]"
                                    }
                                  ],
                                  "outputs": {
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the site config."
                                      },
                                      "value": "authsettingsV2"
                                    },
                                    "resourceId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource ID of the site config."
                                      },
                                      "value": "[resourceId('Microsoft.Web/sites/config', parameters('appName'), 'authsettingsV2')]"
                                    },
                                    "resourceGroupName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource group the site config was deployed into."
                                      },
                                      "value": "[resourceGroup().name]"
                                    }
                                  }
                                }
                              },
                              "dependsOn": [
                                "app"
                              ]
                            },
                            "app_logssettings": {
                              "condition": "[not(empty(coalesce(parameters('logsConfiguration'), createObject())))]",
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "[format('{0}-Site-Config-Logs', uniqueString(deployment().name, parameters('location')))]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "appName": {
                                    "value": "[parameters('name')]"
                                  },
                                  "logsConfiguration": {
                                    "value": "[parameters('logsConfiguration')]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "languageVersion": "2.0",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.30.3.12046",
                                      "templateHash": "172040314234419916"
                                    },
                                    "name": "Site logs Config",
                                    "description": "This module deploys a Site logs Configuration.",
                                    "owner": "Azure/module-maintainers"
                                  },
                                  "parameters": {
                                    "appName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The name of the parent site resource."
                                      }
                                    },
                                    "logsConfiguration": {
                                      "type": "object",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Required. The logs settings configuration."
                                      }
                                    }
                                  },
                                  "resources": {
                                    "app": {
                                      "existing": true,
                                      "type": "Microsoft.Web/sites",
                                      "apiVersion": "2022-09-01",
                                      "name": "[parameters('appName')]"
                                    },
                                    "webSettings": {
                                      "type": "Microsoft.Web/sites/config",
                                      "apiVersion": "2022-09-01",
                                      "name": "[format('{0}/{1}', parameters('appName'), 'logs')]",
                                      "kind": "string",
                                      "properties": "[parameters('logsConfiguration')]",
                                      "dependsOn": [
                                        "app"
                                      ]
                                    }
                                  },
                                  "outputs": {
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the site config."
                                      },
                                      "value": "logs"
                                    },
                                    "resourceId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource ID of the site config."
                                      },
                                      "value": "[resourceId('Microsoft.Web/sites/config', parameters('appName'), 'logs')]"
                                    },
                                    "resourceGroupName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource group the site config was deployed into."
                                      },
                                      "value": "[resourceGroup().name]"
                                    }
                                  }
                                }
                              },
                              "dependsOn": [
                                "app",
                                "app_appsettings"
                              ]
                            },
                            "app_websettings": {
                              "condition": "[not(empty(coalesce(parameters('apiManagementConfiguration'), createObject())))]",
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "[format('{0}-Site-Config-Web', uniqueString(deployment().name, parameters('location')))]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "appName": {
                                    "value": "[parameters('name')]"
                                  },
                                  "apiManagementConfiguration": {
                                    "value": "[parameters('apiManagementConfiguration')]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "languageVersion": "2.0",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.30.3.12046",
                                      "templateHash": "8429265300496921446"
                                    },
                                    "name": "Site Api Management Config",
                                    "description": "This module deploys a Site Api Management Configuration.",
                                    "owner": "Azure/module-maintainers"
                                  },
                                  "parameters": {
                                    "appName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The name of the parent site resource."
                                      }
                                    },
                                    "apiManagementConfiguration": {
                                      "type": "object",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Required. The web settings api management configuration."
                                      }
                                    }
                                  },
                                  "resources": {
                                    "app": {
                                      "existing": true,
                                      "type": "Microsoft.Web/sites",
                                      "apiVersion": "2022-09-01",
                                      "name": "[parameters('appName')]"
                                    },
                                    "webSettings": {
                                      "type": "Microsoft.Web/sites/config",
                                      "apiVersion": "2022-09-01",
                                      "name": "[format('{0}/{1}', parameters('appName'), 'web')]",
                                      "kind": "string",
                                      "properties": "[parameters('apiManagementConfiguration')]",
                                      "dependsOn": [
                                        "app"
                                      ]
                                    }
                                  },
                                  "outputs": {
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the site config."
                                      },
                                      "value": "web"
                                    },
                                    "resourceId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource ID of the site config."
                                      },
                                      "value": "[resourceId('Microsoft.Web/sites/config', parameters('appName'), 'web')]"
                                    },
                                    "resourceGroupName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource group the site config was deployed into."
                                      },
                                      "value": "[resourceGroup().name]"
                                    }
                                  }
                                }
                              },
                              "dependsOn": [
                                "app"
                              ]
                            },
                            "extension_msdeploy": {
                              "condition": "[not(empty(parameters('msDeployConfiguration')))]",
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "[format('{0}-Site-Extension-MSDeploy', uniqueString(deployment().name, parameters('location')))]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "appName": {
                                    "value": "[parameters('name')]"
                                  },
                                  "msDeployConfiguration": {
                                    "value": "[coalesce(parameters('msDeployConfiguration'), createObject())]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "languageVersion": "2.0",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.30.3.12046",
                                      "templateHash": "10528759818894443718"
                                    },
                                    "name": "Site Deployment Extension ",
                                    "description": "This module deploys a Site extension for MSDeploy.",
                                    "owner": "Azure/module-maintainers"
                                  },
                                  "parameters": {
                                    "appName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The name of the parent site resource."
                                      }
                                    },
                                    "msDeployConfiguration": {
                                      "type": "object",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Required. Sets the MSDeployment Properties."
                                      }
                                    }
                                  },
                                  "resources": {
                                    "app": {
                                      "existing": true,
                                      "type": "Microsoft.Web/sites",
                                      "apiVersion": "2022-09-01",
                                      "name": "[parameters('appName')]"
                                    },
                                    "msdeploy": {
                                      "type": "Microsoft.Web/sites/extensions",
                                      "apiVersion": "2023-12-01",
                                      "name": "[format('{0}/{1}', parameters('appName'), 'MSDeploy')]",
                                      "kind": "MSDeploy",
                                      "properties": "[parameters('msDeployConfiguration')]",
                                      "dependsOn": [
                                        "app"
                                      ]
                                    }
                                  },
                                  "outputs": {
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the MSDeploy Package."
                                      },
                                      "value": "MSDeploy"
                                    },
                                    "resourceId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource ID of the Site Extension."
                                      },
                                      "value": "[resourceId('Microsoft.Web/sites/extensions', parameters('appName'), 'MSDeploy')]"
                                    },
                                    "resourceGroupName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource group the site config was deployed into."
                                      },
                                      "value": "[resourceGroup().name]"
                                    }
                                  }
                                }
                              },
                              "dependsOn": [
                                "app"
                              ]
                            },
                            "app_slots": {
                              "copy": {
                                "name": "app_slots",
                                "count": "[length(coalesce(parameters('slots'), createArray()))]",
                                "mode": "serial",
                                "batchSize": 1
                              },
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "[format('{0}-Slot-{1}', uniqueString(deployment().name, parameters('location')), coalesce(parameters('slots'), createArray())[copyIndex()].name)]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "name": {
                                    "value": "[coalesce(parameters('slots'), createArray())[copyIndex()].name]"
                                  },
                                  "appName": {
                                    "value": "[parameters('name')]"
                                  },
                                  "location": {
                                    "value": "[parameters('location')]"
                                  },
                                  "kind": {
                                    "value": "[parameters('kind')]"
                                  },
                                  "serverFarmResourceId": {
                                    "value": "[parameters('serverFarmResourceId')]"
                                  },
                                  "httpsOnly": {
                                    "value": "[coalesce(tryGet(coalesce(parameters('slots'), createArray())[copyIndex()], 'httpsOnly'), parameters('httpsOnly'))]"
                                  },
                                  "appServiceEnvironmentResourceId": {
                                    "value": "[parameters('appServiceEnvironmentResourceId')]"
                                  },
                                  "clientAffinityEnabled": {
                                    "value": "[coalesce(tryGet(coalesce(parameters('slots'), createArray())[copyIndex()], 'clientAffinityEnabled'), parameters('clientAffinityEnabled'))]"
                                  },
                                  "managedIdentities": {
                                    "value": "[coalesce(tryGet(coalesce(parameters('slots'), createArray())[copyIndex()], 'managedIdentities'), parameters('managedIdentities'))]"
                                  },
                                  "keyVaultAccessIdentityResourceId": {
                                    "value": "[coalesce(tryGet(coalesce(parameters('slots'), createArray())[copyIndex()], 'keyVaultAccessIdentityResourceId'), parameters('keyVaultAccessIdentityResourceId'))]"
                                  },
                                  "storageAccountRequired": {
                                    "value": "[coalesce(tryGet(coalesce(parameters('slots'), createArray())[copyIndex()], 'storageAccountRequired'), parameters('storageAccountRequired'))]"
                                  },
                                  "virtualNetworkSubnetId": {
                                    "value": "[coalesce(tryGet(coalesce(parameters('slots'), createArray())[copyIndex()], 'virtualNetworkSubnetId'), parameters('virtualNetworkSubnetId'))]"
                                  },
                                  "siteConfig": {
                                    "value": "[coalesce(tryGet(coalesce(parameters('slots'), createArray())[copyIndex()], 'siteConfig'), parameters('siteConfig'))]"
                                  },
                                  "storageAccountResourceId": {
                                    "value": "[coalesce(tryGet(coalesce(parameters('slots'), createArray())[copyIndex()], 'storageAccountResourceId'), parameters('storageAccountResourceId'))]"
                                  },
                                  "storageAccountUseIdentityAuthentication": {
                                    "value": "[coalesce(tryGet(coalesce(parameters('slots'), createArray())[copyIndex()], 'storageAccountUseIdentityAuthentication'), parameters('storageAccountUseIdentityAuthentication'))]"
                                  },
                                  "appInsightResourceId": {
                                    "value": "[coalesce(tryGet(coalesce(parameters('slots'), createArray())[copyIndex()], 'appInsightResourceId'), parameters('appInsightResourceId'))]"
                                  },
                                  "authSettingV2Configuration": {
                                    "value": "[coalesce(tryGet(coalesce(parameters('slots'), createArray())[copyIndex()], 'authSettingV2Configuration'), parameters('authSettingV2Configuration'))]"
                                  },
                                  "msDeployConfiguration": {
                                    "value": "[coalesce(tryGet(coalesce(parameters('slots'), createArray())[copyIndex()], 'msDeployConfiguration'), parameters('msDeployConfiguration'))]"
                                  },
                                  "diagnosticSettings": {
                                    "value": "[tryGet(coalesce(parameters('slots'), createArray())[copyIndex()], 'diagnosticSettings')]"
                                  },
                                  "roleAssignments": {
                                    "value": "[tryGet(coalesce(parameters('slots'), createArray())[copyIndex()], 'roleAssignments')]"
                                  },
                                  "appSettingsKeyValuePairs": {
                                    "value": "[coalesce(tryGet(coalesce(parameters('slots'), createArray())[copyIndex()], 'appSettingsKeyValuePairs'), parameters('appSettingsKeyValuePairs'))]"
                                  },
                                  "basicPublishingCredentialsPolicies": {
                                    "value": "[coalesce(tryGet(coalesce(parameters('slots'), createArray())[copyIndex()], 'basicPublishingCredentialsPolicies'), parameters('basicPublishingCredentialsPolicies'))]"
                                  },
                                  "lock": {
                                    "value": "[coalesce(tryGet(coalesce(parameters('slots'), createArray())[copyIndex()], 'lock'), parameters('lock'))]"
                                  },
                                  "privateEndpoints": {
                                    "value": "[coalesce(tryGet(coalesce(parameters('slots'), createArray())[copyIndex()], 'privateEndpoints'), createArray())]"
                                  },
                                  "tags": {
                                    "value": "[coalesce(tryGet(coalesce(parameters('slots'), createArray())[copyIndex()], 'tags'), parameters('tags'))]"
                                  },
                                  "clientCertEnabled": {
                                    "value": "[tryGet(coalesce(parameters('slots'), createArray())[copyIndex()], 'clientCertEnabled')]"
                                  },
                                  "clientCertExclusionPaths": {
                                    "value": "[tryGet(coalesce(parameters('slots'), createArray())[copyIndex()], 'clientCertExclusionPaths')]"
                                  },
                                  "clientCertMode": {
                                    "value": "[tryGet(coalesce(parameters('slots'), createArray())[copyIndex()], 'clientCertMode')]"
                                  },
                                  "cloningInfo": {
                                    "value": "[tryGet(coalesce(parameters('slots'), createArray())[copyIndex()], 'cloningInfo')]"
                                  },
                                  "containerSize": {
                                    "value": "[tryGet(coalesce(parameters('slots'), createArray())[copyIndex()], 'containerSize')]"
                                  },
                                  "customDomainVerificationId": {
                                    "value": "[tryGet(coalesce(parameters('slots'), createArray())[copyIndex()], 'customDomainVerificationId')]"
                                  },
                                  "dailyMemoryTimeQuota": {
                                    "value": "[tryGet(coalesce(parameters('slots'), createArray())[copyIndex()], 'dailyMemoryTimeQuota')]"
                                  },
                                  "enabled": {
                                    "value": "[tryGet(coalesce(parameters('slots'), createArray())[copyIndex()], 'enabled')]"
                                  },
                                  "enableTelemetry": {
                                    "value": "[coalesce(tryGet(coalesce(parameters('slots'), createArray())[copyIndex()], 'enableTelemetry'), parameters('enableTelemetry'))]"
                                  },
                                  "hostNameSslStates": {
                                    "value": "[tryGet(coalesce(parameters('slots'), createArray())[copyIndex()], 'hostNameSslStates')]"
                                  },
                                  "hyperV": {
                                    "value": "[tryGet(coalesce(parameters('slots'), createArray())[copyIndex()], 'hyperV')]"
                                  },
                                  "publicNetworkAccess": {
                                    "value": "[coalesce(tryGet(coalesce(parameters('slots'), createArray())[copyIndex()], 'publicNetworkAccess'), if(or(not(empty(tryGet(coalesce(parameters('slots'), createArray())[copyIndex()], 'privateEndpoints'))), not(empty(parameters('privateEndpoints')))), 'Disabled', 'Enabled'))]"
                                  },
                                  "redundancyMode": {
                                    "value": "[tryGet(coalesce(parameters('slots'), createArray())[copyIndex()], 'redundancyMode')]"
                                  },
                                  "vnetContentShareEnabled": {
                                    "value": "[tryGet(coalesce(parameters('slots'), createArray())[copyIndex()], 'vnetContentShareEnabled')]"
                                  },
                                  "vnetImagePullEnabled": {
                                    "value": "[tryGet(coalesce(parameters('slots'), createArray())[copyIndex()], 'vnetImagePullEnabled')]"
                                  },
                                  "vnetRouteAllEnabled": {
                                    "value": "[tryGet(coalesce(parameters('slots'), createArray())[copyIndex()], 'vnetRouteAllEnabled')]"
                                  },
                                  "hybridConnectionRelays": {
                                    "value": "[tryGet(coalesce(parameters('slots'), createArray())[copyIndex()], 'hybridConnectionRelays')]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "languageVersion": "2.0",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.30.3.12046",
                                      "templateHash": "9197363043296748727"
                                    },
                                    "name": "Web/Function App Deployment Slots",
                                    "description": "This module deploys a Web or Function App Deployment Slot.",
                                    "owner": "Azure/module-maintainers"
                                  },
                                  "definitions": {
                                    "managedIdentitiesType": {
                                      "type": "object",
                                      "properties": {
                                        "systemAssigned": {
                                          "type": "bool",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. Enables system assigned managed identity on the resource."
                                          }
                                        },
                                        "userAssignedResourceIds": {
                                          "type": "array",
                                          "items": {
                                            "type": "string"
                                          },
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The resource ID(s) to assign to the resource."
                                          }
                                        }
                                      },
                                      "nullable": true
                                    },
                                    "lockType": {
                                      "type": "object",
                                      "properties": {
                                        "name": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. Specify the name of lock."
                                          }
                                        },
                                        "kind": {
                                          "type": "string",
                                          "allowedValues": [
                                            "CanNotDelete",
                                            "None",
                                            "ReadOnly"
                                          ],
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. Specify the type of lock."
                                          }
                                        }
                                      },
                                      "nullable": true
                                    },
                                    "roleAssignmentType": {
                                      "type": "array",
                                      "items": {
                                        "type": "object",
                                        "properties": {
                                          "name": {
                                            "type": "string",
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. The name (as GUID) of the role assignment. If not provided, a GUID will be generated."
                                            }
                                          },
                                          "roleDefinitionIdOrName": {
                                            "type": "string",
                                            "metadata": {
                                              "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                                            }
                                          },
                                          "principalId": {
                                            "type": "string",
                                            "metadata": {
                                              "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                                            }
                                          },
                                          "principalType": {
                                            "type": "string",
                                            "allowedValues": [
                                              "Device",
                                              "ForeignGroup",
                                              "Group",
                                              "ServicePrincipal",
                                              "User"
                                            ],
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. The principal type of the assigned principal ID."
                                            }
                                          },
                                          "description": {
                                            "type": "string",
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. The description of the role assignment."
                                            }
                                          },
                                          "condition": {
                                            "type": "string",
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                                            }
                                          },
                                          "conditionVersion": {
                                            "type": "string",
                                            "allowedValues": [
                                              "2.0"
                                            ],
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. Version of the condition."
                                            }
                                          },
                                          "delegatedManagedIdentityResourceId": {
                                            "type": "string",
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. The Resource Id of the delegated managed identity resource."
                                            }
                                          }
                                        }
                                      },
                                      "nullable": true
                                    },
                                    "privateEndpointType": {
                                      "type": "array",
                                      "items": {
                                        "type": "object",
                                        "properties": {
                                          "name": {
                                            "type": "string",
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. The name of the private endpoint."
                                            }
                                          },
                                          "location": {
                                            "type": "string",
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. The location to deploy the private endpoint to."
                                            }
                                          },
                                          "privateLinkServiceConnectionName": {
                                            "type": "string",
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. The name of the private link connection to create."
                                            }
                                          },
                                          "service": {
                                            "type": "string",
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. The subresource to deploy the private endpoint for. For example \"vault\", \"mysqlServer\" or \"dataFactory\"."
                                            }
                                          },
                                          "subnetResourceId": {
                                            "type": "string",
                                            "metadata": {
                                              "description": "Required. Resource ID of the subnet where the endpoint needs to be created."
                                            }
                                          },
                                          "privateDnsZoneGroup": {
                                            "type": "object",
                                            "properties": {
                                              "name": {
                                                "type": "string",
                                                "nullable": true,
                                                "metadata": {
                                                  "description": "Optional. The name of the Private DNS Zone Group."
                                                }
                                              },
                                              "privateDnsZoneGroupConfigs": {
                                                "type": "array",
                                                "items": {
                                                  "type": "object",
                                                  "properties": {
                                                    "name": {
                                                      "type": "string",
                                                      "nullable": true,
                                                      "metadata": {
                                                        "description": "Optional. The name of the private DNS zone group config."
                                                      }
                                                    },
                                                    "privateDnsZoneResourceId": {
                                                      "type": "string",
                                                      "metadata": {
                                                        "description": "Required. The resource id of the private DNS zone."
                                                      }
                                                    }
                                                  }
                                                },
                                                "metadata": {
                                                  "description": "Required. The private DNS zone groups to associate the private endpoint. A DNS zone group can support up to 5 DNS zones."
                                                }
                                              }
                                            },
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. The private DNS zone group to configure for the private endpoint."
                                            }
                                          },
                                          "isManualConnection": {
                                            "type": "bool",
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. If Manual Private Link Connection is required."
                                            }
                                          },
                                          "manualConnectionRequestMessage": {
                                            "type": "string",
                                            "nullable": true,
                                            "maxLength": 140,
                                            "metadata": {
                                              "description": "Optional. A message passed to the owner of the remote resource with the manual connection request."
                                            }
                                          },
                                          "customDnsConfigs": {
                                            "type": "array",
                                            "items": {
                                              "type": "object",
                                              "properties": {
                                                "fqdn": {
                                                  "type": "string",
                                                  "nullable": true,
                                                  "metadata": {
                                                    "description": "Required. Fqdn that resolves to private endpoint IP address."
                                                  }
                                                },
                                                "ipAddresses": {
                                                  "type": "array",
                                                  "items": {
                                                    "type": "string"
                                                  },
                                                  "metadata": {
                                                    "description": "Required. A list of private IP addresses of the private endpoint."
                                                  }
                                                }
                                              }
                                            },
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. Custom DNS configurations."
                                            }
                                          },
                                          "ipConfigurations": {
                                            "type": "array",
                                            "items": {
                                              "type": "object",
                                              "properties": {
                                                "name": {
                                                  "type": "string",
                                                  "metadata": {
                                                    "description": "Required. The name of the resource that is unique within a resource group."
                                                  }
                                                },
                                                "properties": {
                                                  "type": "object",
                                                  "properties": {
                                                    "groupId": {
                                                      "type": "string",
                                                      "metadata": {
                                                        "description": "Required. The ID of a group obtained from the remote resource that this private endpoint should connect to."
                                                      }
                                                    },
                                                    "memberName": {
                                                      "type": "string",
                                                      "metadata": {
                                                        "description": "Required. The member name of a group obtained from the remote resource that this private endpoint should connect to."
                                                      }
                                                    },
                                                    "privateIPAddress": {
                                                      "type": "string",
                                                      "metadata": {
                                                        "description": "Required. A private IP address obtained from the private endpoint's subnet."
                                                      }
                                                    }
                                                  },
                                                  "metadata": {
                                                    "description": "Required. Properties of private endpoint IP configurations."
                                                  }
                                                }
                                              }
                                            },
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. A list of IP configurations of the private endpoint. This will be used to map to the First Party Service endpoints."
                                            }
                                          },
                                          "applicationSecurityGroupResourceIds": {
                                            "type": "array",
                                            "items": {
                                              "type": "string"
                                            },
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. Application security groups in which the private endpoint IP configuration is included."
                                            }
                                          },
                                          "customNetworkInterfaceName": {
                                            "type": "string",
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. The custom name of the network interface attached to the private endpoint."
                                            }
                                          },
                                          "lock": {
                                            "$ref": "#/definitions/lockType",
                                            "metadata": {
                                              "description": "Optional. Specify the type of lock."
                                            }
                                          },
                                          "roleAssignments": {
                                            "$ref": "#/definitions/roleAssignmentType",
                                            "metadata": {
                                              "description": "Optional. Array of role assignments to create."
                                            }
                                          },
                                          "tags": {
                                            "type": "object",
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. Tags to be applied on all resources/resource groups in this deployment."
                                            }
                                          },
                                          "enableTelemetry": {
                                            "type": "bool",
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. Enable/Disable usage telemetry for module."
                                            }
                                          },
                                          "resourceGroupName": {
                                            "type": "string",
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. Specify if you want to deploy the Private Endpoint into a different resource group than the main resource."
                                            }
                                          }
                                        }
                                      },
                                      "nullable": true
                                    },
                                    "diagnosticSettingType": {
                                      "type": "array",
                                      "items": {
                                        "type": "object",
                                        "properties": {
                                          "name": {
                                            "type": "string",
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. The name of diagnostic setting."
                                            }
                                          },
                                          "logCategoriesAndGroups": {
                                            "type": "array",
                                            "items": {
                                              "type": "object",
                                              "properties": {
                                                "category": {
                                                  "type": "string",
                                                  "nullable": true,
                                                  "metadata": {
                                                    "description": "Optional. Name of a Diagnostic Log category for a resource type this setting is applied to. Set the specific logs to collect here."
                                                  }
                                                },
                                                "categoryGroup": {
                                                  "type": "string",
                                                  "nullable": true,
                                                  "metadata": {
                                                    "description": "Optional. Name of a Diagnostic Log category group for a resource type this setting is applied to. Set to `allLogs` to collect all logs."
                                                  }
                                                },
                                                "enabled": {
                                                  "type": "bool",
                                                  "nullable": true,
                                                  "metadata": {
                                                    "description": "Optional. Enable or disable the category explicitly. Default is `true`."
                                                  }
                                                }
                                              }
                                            },
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. The name of logs that will be streamed. \"allLogs\" includes all possible logs for the resource. Set to `[]` to disable log collection."
                                            }
                                          },
                                          "metricCategories": {
                                            "type": "array",
                                            "items": {
                                              "type": "object",
                                              "properties": {
                                                "category": {
                                                  "type": "string",
                                                  "metadata": {
                                                    "description": "Required. Name of a Diagnostic Metric category for a resource type this setting is applied to. Set to `AllMetrics` to collect all metrics."
                                                  }
                                                },
                                                "enabled": {
                                                  "type": "bool",
                                                  "nullable": true,
                                                  "metadata": {
                                                    "description": "Optional. Enable or disable the category explicitly. Default is `true`."
                                                  }
                                                }
                                              }
                                            },
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. The name of logs that will be streamed. \"allLogs\" includes all possible logs for the resource. Set to `[]` to disable log collection."
                                            }
                                          },
                                          "logAnalyticsDestinationType": {
                                            "type": "string",
                                            "allowedValues": [
                                              "AzureDiagnostics",
                                              "Dedicated"
                                            ],
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. A string indicating whether the export to Log Analytics should use the default destination type, i.e. AzureDiagnostics, or use a destination type."
                                            }
                                          },
                                          "workspaceResourceId": {
                                            "type": "string",
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. Resource ID of the diagnostic log analytics workspace. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                                            }
                                          },
                                          "storageAccountResourceId": {
                                            "type": "string",
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. Resource ID of the diagnostic storage account. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                                            }
                                          },
                                          "eventHubAuthorizationRuleResourceId": {
                                            "type": "string",
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. Resource ID of the diagnostic event hub authorization rule for the Event Hubs namespace in which the event hub should be created or streamed to."
                                            }
                                          },
                                          "eventHubName": {
                                            "type": "string",
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. Name of the diagnostic event hub within the namespace to which logs are streamed. Without this, an event hub is created for each log category. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                                            }
                                          },
                                          "marketplacePartnerResourceId": {
                                            "type": "string",
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. The full ARM resource ID of the Marketplace resource to which you would like to send Diagnostic Logs."
                                            }
                                          }
                                        }
                                      },
                                      "nullable": true
                                    }
                                  },
                                  "parameters": {
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. Name of the slot."
                                      }
                                    },
                                    "appName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Conditional. The name of the parent site resource. Required if the template is used in a standalone deployment."
                                      }
                                    },
                                    "location": {
                                      "type": "string",
                                      "defaultValue": "[resourceGroup().location]",
                                      "metadata": {
                                        "description": "Optional. Location for all Resources."
                                      }
                                    },
                                    "kind": {
                                      "type": "string",
                                      "allowedValues": [
                                        "functionapp",
                                        "functionapp,linux",
                                        "functionapp,workflowapp",
                                        "functionapp,workflowapp,linux",
                                        "functionapp,linux,container",
                                        "functionapp,linux,container,azurecontainerapps",
                                        "app,linux",
                                        "app",
                                        "linux,api",
                                        "api",
                                        "app,linux,container",
                                        "app,container,windows"
                                      ],
                                      "metadata": {
                                        "description": "Required. Type of site to deploy."
                                      }
                                    },
                                    "serverFarmResourceId": {
                                      "type": "string",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. The resource ID of the app service plan to use for the slot."
                                      }
                                    },
                                    "httpsOnly": {
                                      "type": "bool",
                                      "defaultValue": true,
                                      "metadata": {
                                        "description": "Optional. Configures a slot to accept only HTTPS requests. Issues redirect for HTTP requests."
                                      }
                                    },
                                    "clientAffinityEnabled": {
                                      "type": "bool",
                                      "defaultValue": true,
                                      "metadata": {
                                        "description": "Optional. If client affinity is enabled."
                                      }
                                    },
                                    "appServiceEnvironmentResourceId": {
                                      "type": "string",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. The resource ID of the app service environment to use for this resource."
                                      }
                                    },
                                    "managedIdentities": {
                                      "$ref": "#/definitions/managedIdentitiesType",
                                      "metadata": {
                                        "description": "Optional. The managed identity definition for this resource."
                                      }
                                    },
                                    "keyVaultAccessIdentityResourceId": {
                                      "type": "string",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. The resource ID of the assigned identity to be used to access a key vault with."
                                      }
                                    },
                                    "storageAccountRequired": {
                                      "type": "bool",
                                      "defaultValue": false,
                                      "metadata": {
                                        "description": "Optional. Checks if Customer provided storage account is required."
                                      }
                                    },
                                    "virtualNetworkSubnetId": {
                                      "type": "string",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. Azure Resource Manager ID of the Virtual network and subnet to be joined by Regional VNET Integration. This must be of the form /subscriptions/{subscriptionName}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualNetworks/{vnetName}/subnets/{subnetName}."
                                      }
                                    },
                                    "siteConfig": {
                                      "type": "object",
                                      "defaultValue": {
                                        "alwaysOn": true
                                      },
                                      "metadata": {
                                        "description": "Optional. The site config object."
                                      }
                                    },
                                    "storageAccountResourceId": {
                                      "type": "string",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. Required if app of kind functionapp. Resource ID of the storage account to manage triggers and logging function executions."
                                      }
                                    },
                                    "storageAccountUseIdentityAuthentication": {
                                      "type": "bool",
                                      "defaultValue": false,
                                      "metadata": {
                                        "description": "Optional. If the provided storage account requires Identity based authentication ('allowSharedKeyAccess' is set to false). When set to true, the minimum role assignment required for the App Service Managed Identity to the storage account is 'Storage Blob Data Owner'."
                                      }
                                    },
                                    "appInsightResourceId": {
                                      "type": "string",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. Resource ID of the app insight to leverage for this resource."
                                      }
                                    },
                                    "appSettingsKeyValuePairs": {
                                      "type": "object",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. The app settings-value pairs except for AzureWebJobsStorage, AzureWebJobsDashboard, APPINSIGHTS_INSTRUMENTATIONKEY and APPLICATIONINSIGHTS_CONNECTION_STRING."
                                      }
                                    },
                                    "authSettingV2Configuration": {
                                      "type": "object",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. The auth settings V2 configuration."
                                      }
                                    },
                                    "msDeployConfiguration": {
                                      "type": "object",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. The extension MSDeployment configuration."
                                      }
                                    },
                                    "lock": {
                                      "$ref": "#/definitions/lockType",
                                      "metadata": {
                                        "description": "Optional. The lock settings of the service."
                                      }
                                    },
                                    "privateEndpoints": {
                                      "$ref": "#/definitions/privateEndpointType",
                                      "metadata": {
                                        "description": "Optional. Configuration details for private endpoints."
                                      }
                                    },
                                    "tags": {
                                      "type": "object",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. Tags of the resource."
                                      }
                                    },
                                    "roleAssignments": {
                                      "$ref": "#/definitions/roleAssignmentType",
                                      "metadata": {
                                        "description": "Optional. Array of role assignments to create."
                                      }
                                    },
                                    "diagnosticSettings": {
                                      "$ref": "#/definitions/diagnosticSettingType",
                                      "metadata": {
                                        "description": "Optional. The diagnostic settings of the service."
                                      }
                                    },
                                    "clientCertEnabled": {
                                      "type": "bool",
                                      "defaultValue": false,
                                      "metadata": {
                                        "description": "Optional. To enable client certificate authentication (TLS mutual authentication)."
                                      }
                                    },
                                    "clientCertExclusionPaths": {
                                      "type": "string",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. Client certificate authentication comma-separated exclusion paths."
                                      }
                                    },
                                    "clientCertMode": {
                                      "type": "string",
                                      "defaultValue": "Optional",
                                      "allowedValues": [
                                        "Optional",
                                        "OptionalInteractiveUser",
                                        "Required"
                                      ],
                                      "metadata": {
                                        "description": "Optional. This composes with ClientCertEnabled setting.</p>- ClientCertEnabled: false means ClientCert is ignored.</p>- ClientCertEnabled: true and ClientCertMode: Required means ClientCert is required.</p>- ClientCertEnabled: true and ClientCertMode: Optional means ClientCert is optional or accepted."
                                      }
                                    },
                                    "cloningInfo": {
                                      "type": "object",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. If specified during app creation, the app is cloned from a source app."
                                      }
                                    },
                                    "containerSize": {
                                      "type": "int",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. Size of the function container."
                                      }
                                    },
                                    "customDomainVerificationId": {
                                      "type": "string",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. Unique identifier that verifies the custom domains assigned to the app. Customer will add this ID to a txt record for verification."
                                      }
                                    },
                                    "dailyMemoryTimeQuota": {
                                      "type": "int",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. Maximum allowed daily memory-time quota (applicable on dynamic apps only)."
                                      }
                                    },
                                    "enabled": {
                                      "type": "bool",
                                      "defaultValue": true,
                                      "metadata": {
                                        "description": "Optional. Setting this value to false disables the app (takes the app offline)."
                                      }
                                    },
                                    "enableTelemetry": {
                                      "type": "bool",
                                      "defaultValue": true,
                                      "metadata": {
                                        "description": "Optional. Enable/Disable usage telemetry for module."
                                      }
                                    },
                                    "hostNameSslStates": {
                                      "type": "array",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. Hostname SSL states are used to manage the SSL bindings for app's hostnames."
                                      }
                                    },
                                    "hyperV": {
                                      "type": "bool",
                                      "defaultValue": false,
                                      "metadata": {
                                        "description": "Optional. Hyper-V sandbox."
                                      }
                                    },
                                    "publicNetworkAccess": {
                                      "type": "string",
                                      "nullable": true,
                                      "allowedValues": [
                                        "Enabled",
                                        "Disabled"
                                      ],
                                      "metadata": {
                                        "description": "Optional. Allow or block all public traffic."
                                      }
                                    },
                                    "redundancyMode": {
                                      "type": "string",
                                      "defaultValue": "None",
                                      "allowedValues": [
                                        "ActiveActive",
                                        "Failover",
                                        "GeoRedundant",
                                        "Manual",
                                        "None"
                                      ],
                                      "metadata": {
                                        "description": "Optional. Site redundancy mode."
                                      }
                                    },
                                    "basicPublishingCredentialsPolicies": {
                                      "type": "array",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. The site publishing credential policy names which are associated with the site slot."
                                      }
                                    },
                                    "vnetContentShareEnabled": {
                                      "type": "bool",
                                      "defaultValue": false,
                                      "metadata": {
                                        "description": "Optional. To enable accessing content over virtual network."
                                      }
                                    },
                                    "vnetImagePullEnabled": {
                                      "type": "bool",
                                      "defaultValue": false,
                                      "metadata": {
                                        "description": "Optional. To enable pulling image over Virtual Network."
                                      }
                                    },
                                    "vnetRouteAllEnabled": {
                                      "type": "bool",
                                      "defaultValue": false,
                                      "metadata": {
                                        "description": "Optional. Virtual Network Route All enabled. This causes all outbound traffic to have Virtual Network Security Groups and User Defined Routes applied."
                                      }
                                    },
                                    "hybridConnectionRelays": {
                                      "type": "array",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. Names of hybrid connection relays to connect app with."
                                      }
                                    }
                                  },
                                  "variables": {
                                    "copy": [
                                      {
                                        "name": "formattedRoleAssignments",
                                        "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]",
                                        "input": "[union(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')], createObject('roleDefinitionId', coalesce(tryGet(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName), if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName)))))]"
                                      }
                                    ],
                                    "formattedUserAssignedIdentities": "[reduce(map(coalesce(tryGet(parameters('managedIdentities'), 'userAssignedResourceIds'), createArray()), lambda('id', createObject(format('{0}', lambdaVariables('id')), createObject()))), createObject(), lambda('cur', 'next', union(lambdaVariables('cur'), lambdaVariables('next'))))]",
                                    "identity": "[if(not(empty(parameters('managedIdentities'))), createObject('type', if(coalesce(tryGet(parameters('managedIdentities'), 'systemAssigned'), false()), if(not(empty(coalesce(tryGet(parameters('managedIdentities'), 'userAssignedResourceIds'), createObject()))), 'SystemAssigned, UserAssigned', 'SystemAssigned'), if(not(empty(coalesce(tryGet(parameters('managedIdentities'), 'userAssignedResourceIds'), createObject()))), 'UserAssigned', null())), 'userAssignedIdentities', if(not(empty(variables('formattedUserAssignedIdentities'))), variables('formattedUserAssignedIdentities'), null())), null())]",
                                    "builtInRoleNames": {
                                      "App Compliance Automation Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '0f37683f-2463-46b6-9ce7-9b788b988ba2')]",
                                      "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                                      "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                                      "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                                      "Role Based Access Control Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]",
                                      "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]",
                                      "Web Plan Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '2cc479cb-7b4d-49a8-b449-8c00fd0f0a4b')]",
                                      "Website Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'de139f84-1756-47ae-9be6-808fbbe84772')]"
                                    }
                                  },
                                  "resources": {
                                    "app": {
                                      "existing": true,
                                      "type": "Microsoft.Web/sites",
                                      "apiVersion": "2021-03-01",
                                      "name": "[parameters('appName')]"
                                    },
                                    "slot": {
                                      "type": "Microsoft.Web/sites/slots",
                                      "apiVersion": "2022-09-01",
                                      "name": "[format('{0}/{1}', parameters('appName'), parameters('name'))]",
                                      "location": "[parameters('location')]",
                                      "kind": "[parameters('kind')]",
                                      "tags": "[parameters('tags')]",
                                      "identity": "[variables('identity')]",
                                      "properties": {
                                        "serverFarmId": "[parameters('serverFarmResourceId')]",
                                        "clientAffinityEnabled": "[parameters('clientAffinityEnabled')]",
                                        "httpsOnly": "[parameters('httpsOnly')]",
                                        "hostingEnvironmentProfile": "[if(not(empty(parameters('appServiceEnvironmentResourceId'))), createObject('id', parameters('appServiceEnvironmentResourceId')), null())]",
                                        "storageAccountRequired": "[parameters('storageAccountRequired')]",
                                        "keyVaultReferenceIdentity": "[parameters('keyVaultAccessIdentityResourceId')]",
                                        "virtualNetworkSubnetId": "[parameters('virtualNetworkSubnetId')]",
                                        "siteConfig": "[parameters('siteConfig')]",
                                        "clientCertEnabled": "[parameters('clientCertEnabled')]",
                                        "clientCertExclusionPaths": "[parameters('clientCertExclusionPaths')]",
                                        "clientCertMode": "[parameters('clientCertMode')]",
                                        "cloningInfo": "[parameters('cloningInfo')]",
                                        "containerSize": "[parameters('containerSize')]",
                                        "customDomainVerificationId": "[parameters('customDomainVerificationId')]",
                                        "dailyMemoryTimeQuota": "[parameters('dailyMemoryTimeQuota')]",
                                        "enabled": "[parameters('enabled')]",
                                        "hostNameSslStates": "[parameters('hostNameSslStates')]",
                                        "hyperV": "[parameters('hyperV')]",
                                        "publicNetworkAccess": "[parameters('publicNetworkAccess')]",
                                        "redundancyMode": "[parameters('redundancyMode')]",
                                        "vnetContentShareEnabled": "[parameters('vnetContentShareEnabled')]",
                                        "vnetImagePullEnabled": "[parameters('vnetImagePullEnabled')]",
                                        "vnetRouteAllEnabled": "[parameters('vnetRouteAllEnabled')]"
                                      },
                                      "dependsOn": [
                                        "app"
                                      ]
                                    },
                                    "slot_lock": {
                                      "condition": "[and(not(empty(coalesce(parameters('lock'), createObject()))), not(equals(tryGet(parameters('lock'), 'kind'), 'None')))]",
                                      "type": "Microsoft.Authorization/locks",
                                      "apiVersion": "2020-05-01",
                                      "scope": "[format('Microsoft.Web/sites/{0}/slots/{1}', parameters('appName'), parameters('name'))]",
                                      "name": "[coalesce(tryGet(parameters('lock'), 'name'), format('lock-{0}', parameters('name')))]",
                                      "properties": {
                                        "level": "[coalesce(tryGet(parameters('lock'), 'kind'), '')]",
                                        "notes": "[if(equals(tryGet(parameters('lock'), 'kind'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot delete or modify the resource or child resources.')]"
                                      },
                                      "dependsOn": [
                                        "slot"
                                      ]
                                    },
                                    "slot_diagnosticSettings": {
                                      "copy": {
                                        "name": "slot_diagnosticSettings",
                                        "count": "[length(coalesce(parameters('diagnosticSettings'), createArray()))]"
                                      },
                                      "type": "Microsoft.Insights/diagnosticSettings",
                                      "apiVersion": "2021-05-01-preview",
                                      "scope": "[format('Microsoft.Web/sites/{0}/slots/{1}', parameters('appName'), parameters('name'))]",
                                      "name": "[coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'name'), format('{0}-diagnosticSettings', parameters('name')))]",
                                      "properties": {
                                        "copy": [
                                          {
                                            "name": "metrics",
                                            "count": "[length(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics'))))]",
                                            "input": {
                                              "category": "[coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics')))[copyIndex('metrics')].category]",
                                              "enabled": "[coalesce(tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics')))[copyIndex('metrics')], 'enabled'), true())]",
                                              "timeGrain": null
                                            }
                                          },
                                          {
                                            "name": "logs",
                                            "count": "[length(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs'))))]",
                                            "input": {
                                              "categoryGroup": "[tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'categoryGroup')]",
                                              "category": "[tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'category')]",
                                              "enabled": "[coalesce(tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'enabled'), true())]"
                                            }
                                          }
                                        ],
                                        "storageAccountId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'storageAccountResourceId')]",
                                        "workspaceId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'workspaceResourceId')]",
                                        "eventHubAuthorizationRuleId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'eventHubAuthorizationRuleResourceId')]",
                                        "eventHubName": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'eventHubName')]",
                                        "marketplacePartnerId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'marketplacePartnerResourceId')]",
                                        "logAnalyticsDestinationType": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logAnalyticsDestinationType')]"
                                      },
                                      "dependsOn": [
                                        "slot"
                                      ]
                                    },
                                    "slot_roleAssignments": {
                                      "copy": {
                                        "name": "slot_roleAssignments",
                                        "count": "[length(coalesce(variables('formattedRoleAssignments'), createArray()))]"
                                      },
                                      "type": "Microsoft.Authorization/roleAssignments",
                                      "apiVersion": "2022-04-01",
                                      "scope": "[format('Microsoft.Web/sites/{0}/slots/{1}', parameters('appName'), parameters('name'))]",
                                      "name": "[coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'name'), guid(resourceId('Microsoft.Web/sites/slots', parameters('appName'), parameters('name')), coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId, coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId))]",
                                      "properties": {
                                        "roleDefinitionId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId]",
                                        "principalId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId]",
                                        "description": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'description')]",
                                        "principalType": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'principalType')]",
                                        "condition": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition')]",
                                        "conditionVersion": "[if(not(empty(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                                        "delegatedManagedIdentityResourceId": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
                                      },
                                      "dependsOn": [
                                        "slot"
                                      ]
                                    },
                                    "slot_appsettings": {
                                      "condition": "[not(empty(parameters('appSettingsKeyValuePairs')))]",
                                      "type": "Microsoft.Resources/deployments",
                                      "apiVersion": "2022-09-01",
                                      "name": "[format('{0}-Slot-{1}-Config-AppSettings', uniqueString(deployment().name, parameters('location')), parameters('name'))]",
                                      "properties": {
                                        "expressionEvaluationOptions": {
                                          "scope": "inner"
                                        },
                                        "mode": "Incremental",
                                        "parameters": {
                                          "slotName": {
                                            "value": "[parameters('name')]"
                                          },
                                          "appName": {
                                            "value": "[parameters('appName')]"
                                          },
                                          "kind": {
                                            "value": "[parameters('kind')]"
                                          },
                                          "storageAccountResourceId": {
                                            "value": "[parameters('storageAccountResourceId')]"
                                          },
                                          "storageAccountUseIdentityAuthentication": {
                                            "value": "[parameters('storageAccountUseIdentityAuthentication')]"
                                          },
                                          "appInsightResourceId": {
                                            "value": "[parameters('appInsightResourceId')]"
                                          },
                                          "appSettingsKeyValuePairs": {
                                            "value": "[parameters('appSettingsKeyValuePairs')]"
                                          },
                                          "currentAppSettings": "[if(not(empty(resourceId('Microsoft.Web/sites/slots', parameters('appName'), parameters('name')))), createObject('value', list(format('{0}/config/appsettings', resourceId('Microsoft.Web/sites/slots', parameters('appName'), parameters('name'))), '2023-12-01').properties), createObject('value', createObject()))]"
                                        },
                                        "template": {
                                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                          "languageVersion": "2.0",
                                          "contentVersion": "1.0.0.0",
                                          "metadata": {
                                            "_generator": {
                                              "name": "bicep",
                                              "version": "0.30.3.12046",
                                              "templateHash": "7103325181682520108"
                                            },
                                            "name": "Site Slot App Settings",
                                            "description": "This module deploys a Site Slot App Setting.",
                                            "owner": "Azure/module-maintainers"
                                          },
                                          "parameters": {
                                            "slotName": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "Required. Slot name to be configured."
                                              }
                                            },
                                            "appName": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "Conditional. The name of the parent site resource. Required if the template is used in a standalone deployment."
                                              }
                                            },
                                            "kind": {
                                              "type": "string",
                                              "allowedValues": [
                                                "functionapp",
                                                "functionapp,linux",
                                                "functionapp,workflowapp",
                                                "functionapp,workflowapp,linux",
                                                "functionapp,linux,container",
                                                "functionapp,linux,container,azurecontainerapps",
                                                "app,linux",
                                                "app",
                                                "linux,api",
                                                "api",
                                                "app,linux,container",
                                                "app,container,windows"
                                              ],
                                              "metadata": {
                                                "description": "Required. Type of site to deploy."
                                              }
                                            },
                                            "storageAccountResourceId": {
                                              "type": "string",
                                              "nullable": true,
                                              "metadata": {
                                                "description": "Optional. Required if app of kind functionapp. Resource ID of the storage account to manage triggers and logging function executions."
                                              }
                                            },
                                            "storageAccountUseIdentityAuthentication": {
                                              "type": "bool",
                                              "defaultValue": false,
                                              "metadata": {
                                                "description": "Optional. If the provided storage account requires Identity based authentication ('allowSharedKeyAccess' is set to false). When set to true, the minimum role assignment required for the App Service Managed Identity to the storage account is 'Storage Blob Data Owner'."
                                              }
                                            },
                                            "appInsightResourceId": {
                                              "type": "string",
                                              "nullable": true,
                                              "metadata": {
                                                "description": "Optional. Resource ID of the app insight to leverage for this resource."
                                              }
                                            },
                                            "appSettingsKeyValuePairs": {
                                              "type": "object",
                                              "nullable": true,
                                              "metadata": {
                                                "description": "Optional. The app settings key-value pairs except for AzureWebJobsStorage, AzureWebJobsDashboard, APPINSIGHTS_INSTRUMENTATIONKEY and APPLICATIONINSIGHTS_CONNECTION_STRING."
                                              }
                                            },
                                            "currentAppSettings": {
                                              "type": "object",
                                              "defaultValue": {},
                                              "metadata": {
                                                "description": "Optional. The current app settings."
                                              }
                                            }
                                          },
                                          "resources": {
                                            "app::slot": {
                                              "existing": true,
                                              "type": "Microsoft.Web/sites/slots",
                                              "apiVersion": "2022-09-01",
                                              "name": "[format('{0}/{1}', parameters('appName'), parameters('slotName'))]",
                                              "dependsOn": [
                                                "app"
                                              ]
                                            },
                                            "app": {
                                              "existing": true,
                                              "type": "Microsoft.Web/sites",
                                              "apiVersion": "2022-09-01",
                                              "name": "[parameters('appName')]"
                                            },
                                            "appInsight": {
                                              "condition": "[not(empty(parameters('appInsightResourceId')))]",
                                              "existing": true,
                                              "type": "Microsoft.Insights/components",
                                              "apiVersion": "2020-02-02",
                                              "subscriptionId": "[split(coalesce(parameters('appInsightResourceId'), '//'), '/')[2]]",
                                              "resourceGroup": "[split(coalesce(parameters('appInsightResourceId'), '////'), '/')[4]]",
                                              "name": "[last(split(coalesce(parameters('appInsightResourceId'), 'dummyName'), '/'))]"
                                            },
                                            "storageAccount": {
                                              "condition": "[not(empty(parameters('storageAccountResourceId')))]",
                                              "existing": true,
                                              "type": "Microsoft.Storage/storageAccounts",
                                              "apiVersion": "2023-01-01",
                                              "subscriptionId": "[split(coalesce(parameters('storageAccountResourceId'), '//'), '/')[2]]",
                                              "resourceGroup": "[split(coalesce(parameters('storageAccountResourceId'), '////'), '/')[4]]",
                                              "name": "[last(split(coalesce(parameters('storageAccountResourceId'), 'dummyName'), '/'))]"
                                            },
                                            "slotSettings": {
                                              "type": "Microsoft.Web/sites/slots/config",
                                              "apiVersion": "2022-09-01",
                                              "name": "[format('{0}/{1}/{2}', parameters('appName'), parameters('slotName'), 'appsettings')]",
                                              "kind": "[parameters('kind')]",
                                              "properties": "[union(coalesce(parameters('currentAppSettings'), createObject()), coalesce(parameters('appSettingsKeyValuePairs'), createObject()), if(and(not(empty(parameters('storageAccountResourceId'))), not(parameters('storageAccountUseIdentityAuthentication'))), createObject('AzureWebJobsStorage', format('DefaultEndpointsProtocol=https;AccountName={0};AccountKey={1};EndpointSuffix={2}', last(split(coalesce(parameters('storageAccountResourceId'), 'dummyName'), '/')), listKeys(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(coalesce(parameters('storageAccountResourceId'), '//'), '/')[2], split(coalesce(parameters('storageAccountResourceId'), '////'), '/')[4]), 'Microsoft.Storage/storageAccounts', last(split(coalesce(parameters('storageAccountResourceId'), 'dummyName'), '/'))), '2023-01-01').keys[0].value, environment().suffixes.storage)), if(and(not(empty(parameters('storageAccountResourceId'))), parameters('storageAccountUseIdentityAuthentication')), union(createObject('AzureWebJobsStorage__accountName', last(split(coalesce(parameters('storageAccountResourceId'), 'dummyName'), '/'))), createObject('AzureWebJobsStorage__blobServiceUri', reference('storageAccount').primaryEndpoints.blob)), createObject())), if(not(empty(parameters('appInsightResourceId'))), createObject('APPLICATIONINSIGHTS_CONNECTION_STRING', reference('appInsight').ConnectionString), createObject()))]",
                                              "dependsOn": [
                                                "appInsight",
                                                "app::slot",
                                                "storageAccount"
                                              ]
                                            }
                                          },
                                          "outputs": {
                                            "name": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "The name of the slot config."
                                              },
                                              "value": "appsettings"
                                            },
                                            "resourceId": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "The resource ID of the slot config."
                                              },
                                              "value": "[resourceId('Microsoft.Web/sites/slots/config', parameters('appName'), parameters('slotName'), 'appsettings')]"
                                            },
                                            "resourceGroupName": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "The resource group the slot config was deployed into."
                                              },
                                              "value": "[resourceGroup().name]"
                                            }
                                          }
                                        }
                                      },
                                      "dependsOn": [
                                        "app",
                                        "slot"
                                      ]
                                    },
                                    "slot_authsettingsv2": {
                                      "condition": "[not(empty(parameters('authSettingV2Configuration')))]",
                                      "type": "Microsoft.Resources/deployments",
                                      "apiVersion": "2022-09-01",
                                      "name": "[format('{0}-Slot-{1}-Config-AuthSettingsV2', uniqueString(deployment().name, parameters('location')), parameters('name'))]",
                                      "properties": {
                                        "expressionEvaluationOptions": {
                                          "scope": "inner"
                                        },
                                        "mode": "Incremental",
                                        "parameters": {
                                          "slotName": {
                                            "value": "[parameters('name')]"
                                          },
                                          "appName": {
                                            "value": "[parameters('appName')]"
                                          },
                                          "kind": {
                                            "value": "[parameters('kind')]"
                                          },
                                          "authSettingV2Configuration": {
                                            "value": "[coalesce(parameters('authSettingV2Configuration'), createObject())]"
                                          }
                                        },
                                        "template": {
                                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                          "contentVersion": "1.0.0.0",
                                          "metadata": {
                                            "_generator": {
                                              "name": "bicep",
                                              "version": "0.30.3.12046",
                                              "templateHash": "10524305002188250774"
                                            },
                                            "name": "Site Slot Auth Settings V2 Config",
                                            "description": "This module deploys a Site Auth Settings V2 Configuration.",
                                            "owner": "Azure/module-maintainers"
                                          },
                                          "parameters": {
                                            "appName": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "Conditional. The name of the parent site resource. Required if the template is used in a standalone deployment."
                                              }
                                            },
                                            "slotName": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "Required. Slot name to be configured."
                                              }
                                            },
                                            "kind": {
                                              "type": "string",
                                              "allowedValues": [
                                                "functionapp",
                                                "functionapp,linux",
                                                "functionapp,workflowapp",
                                                "functionapp,workflowapp,linux",
                                                "functionapp,linux,container",
                                                "functionapp,linux,container,azurecontainerapps",
                                                "app,linux",
                                                "app",
                                                "linux,api",
                                                "api",
                                                "app,linux,container",
                                                "app,container,windows"
                                              ],
                                              "metadata": {
                                                "description": "Required. Type of site to deploy."
                                              }
                                            },
                                            "authSettingV2Configuration": {
                                              "type": "object",
                                              "metadata": {
                                                "description": "Required. The auth settings V2 configuration."
                                              }
                                            }
                                          },
                                          "resources": [
                                            {
                                              "type": "Microsoft.Web/sites/slots/config",
                                              "apiVersion": "2022-09-01",
                                              "name": "[format('{0}/{1}/{2}', parameters('appName'), parameters('slotName'), 'authsettingsV2')]",
                                              "kind": "[parameters('kind')]",
                                              "properties": "[parameters('authSettingV2Configuration')]"
                                            }
                                          ],
                                          "outputs": {
                                            "name": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "The name of the slot config."
                                              },
                                              "value": "authsettingsV2"
                                            },
                                            "resourceId": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "The resource ID of the slot config."
                                              },
                                              "value": "[resourceId('Microsoft.Web/sites/slots/config', parameters('appName'), parameters('slotName'), 'authsettingsV2')]"
                                            },
                                            "resourceGroupName": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "The resource group the slot config was deployed into."
                                              },
                                              "value": "[resourceGroup().name]"
                                            }
                                          }
                                        }
                                      },
                                      "dependsOn": [
                                        "app",
                                        "slot"
                                      ]
                                    },
                                    "slot_basicPublishingCredentialsPolicies": {
                                      "copy": {
                                        "name": "slot_basicPublishingCredentialsPolicies",
                                        "count": "[length(coalesce(parameters('basicPublishingCredentialsPolicies'), createArray()))]"
                                      },
                                      "type": "Microsoft.Resources/deployments",
                                      "apiVersion": "2022-09-01",
                                      "name": "[format('{0}-Slot-Publish-Cred-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
                                      "properties": {
                                        "expressionEvaluationOptions": {
                                          "scope": "inner"
                                        },
                                        "mode": "Incremental",
                                        "parameters": {
                                          "appName": {
                                            "value": "[parameters('appName')]"
                                          },
                                          "slotName": {
                                            "value": "[parameters('name')]"
                                          },
                                          "name": {
                                            "value": "[coalesce(parameters('basicPublishingCredentialsPolicies'), createArray())[copyIndex()].name]"
                                          },
                                          "allow": {
                                            "value": "[tryGet(coalesce(parameters('basicPublishingCredentialsPolicies'), createArray())[copyIndex()], 'allow')]"
                                          },
                                          "location": {
                                            "value": "[parameters('location')]"
                                          }
                                        },
                                        "template": {
                                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                          "contentVersion": "1.0.0.0",
                                          "metadata": {
                                            "_generator": {
                                              "name": "bicep",
                                              "version": "0.30.3.12046",
                                              "templateHash": "15073770430531086378"
                                            },
                                            "name": "Web Site Slot Basic Publishing Credentials Policies",
                                            "description": "This module deploys a Web Site Slot Basic Publishing Credentials Policy.",
                                            "owner": "Azure/module-maintainers"
                                          },
                                          "parameters": {
                                            "name": {
                                              "type": "string",
                                              "allowedValues": [
                                                "scm",
                                                "ftp"
                                              ],
                                              "metadata": {
                                                "description": "Required. The name of the resource."
                                              }
                                            },
                                            "allow": {
                                              "type": "bool",
                                              "defaultValue": true,
                                              "metadata": {
                                                "description": "Optional. Set to true to enable or false to disable a publishing method."
                                              }
                                            },
                                            "appName": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "Conditional. The name of the parent web site. Required if the template is used in a standalone deployment."
                                              }
                                            },
                                            "slotName": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "Conditional. The name of the parent web site slot. Required if the template is used in a standalone deployment."
                                              }
                                            },
                                            "location": {
                                              "type": "string",
                                              "defaultValue": "[resourceGroup().location]",
                                              "metadata": {
                                                "description": "Optional. Location for all Resources."
                                              }
                                            }
                                          },
                                          "resources": [
                                            {
                                              "type": "Microsoft.Web/sites/slots/basicPublishingCredentialsPolicies",
                                              "apiVersion": "2022-09-01",
                                              "name": "[format('{0}/{1}/{2}', parameters('appName'), parameters('slotName'), parameters('name'))]",
                                              "location": "[parameters('location')]",
                                              "properties": {
                                                "allow": "[parameters('allow')]"
                                              }
                                            }
                                          ],
                                          "outputs": {
                                            "name": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "The name of the basic publishing credential policy."
                                              },
                                              "value": "[parameters('name')]"
                                            },
                                            "resourceId": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "The resource ID of the basic publishing credential policy."
                                              },
                                              "value": "[resourceId('Microsoft.Web/sites/slots/basicPublishingCredentialsPolicies', parameters('appName'), parameters('slotName'), parameters('name'))]"
                                            },
                                            "resourceGroupName": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "The name of the resource group the basic publishing credential policy was deployed into."
                                              },
                                              "value": "[resourceGroup().name]"
                                            },
                                            "location": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "The location the resource was deployed into."
                                              },
                                              "value": "[reference(resourceId('Microsoft.Web/sites/slots/basicPublishingCredentialsPolicies', parameters('appName'), parameters('slotName'), parameters('name')), '2022-09-01', 'full').location]"
                                            }
                                          }
                                        }
                                      },
                                      "dependsOn": [
                                        "app",
                                        "slot"
                                      ]
                                    },
                                    "slot_hybridConnectionRelays": {
                                      "copy": {
                                        "name": "slot_hybridConnectionRelays",
                                        "count": "[length(coalesce(parameters('hybridConnectionRelays'), createArray()))]"
                                      },
                                      "type": "Microsoft.Resources/deployments",
                                      "apiVersion": "2022-09-01",
                                      "name": "[format('{0}-Slot-HybridConnectionRelay-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
                                      "properties": {
                                        "expressionEvaluationOptions": {
                                          "scope": "inner"
                                        },
                                        "mode": "Incremental",
                                        "parameters": {
                                          "hybridConnectionResourceId": {
                                            "value": "[coalesce(parameters('hybridConnectionRelays'), createArray())[copyIndex()].resourceId]"
                                          },
                                          "appName": {
                                            "value": "[parameters('appName')]"
                                          },
                                          "slotName": {
                                            "value": "[parameters('name')]"
                                          },
                                          "sendKeyName": {
                                            "value": "[tryGet(coalesce(parameters('hybridConnectionRelays'), createArray())[copyIndex()], 'sendKeyName')]"
                                          }
                                        },
                                        "template": {
                                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                          "contentVersion": "1.0.0.0",
                                          "metadata": {
                                            "_generator": {
                                              "name": "bicep",
                                              "version": "0.30.3.12046",
                                              "templateHash": "12490502819405284146"
                                            },
                                            "name": "Web/Function Apps Slot Hybrid Connection Relay",
                                            "description": "This module deploys a Site Slot Hybrid Connection Namespace Relay.",
                                            "owner": "Azure/module-maintainers"
                                          },
                                          "parameters": {
                                            "hybridConnectionResourceId": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "Required. The resource ID of the relay namespace hybrid connection."
                                              }
                                            },
                                            "slotName": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "Conditional. The name of the site slot. Required if the template is used in a standalone deployment."
                                              }
                                            },
                                            "appName": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "Conditional. The name of the parent web site. Required if the template is used in a standalone deployment."
                                              }
                                            },
                                            "sendKeyName": {
                                              "type": "string",
                                              "defaultValue": "defaultSender",
                                              "metadata": {
                                                "description": "Optional. Name of the authorization rule send key to use."
                                              }
                                            }
                                          },
                                          "resources": [
                                            {
                                              "type": "Microsoft.Web/sites/slots/hybridConnectionNamespaces/relays",
                                              "apiVersion": "2022-09-01",
                                              "name": "[format('{0}/{1}/{2}/{3}', parameters('appName'), parameters('slotName'), split(parameters('hybridConnectionResourceId'), '/')[8], split(parameters('hybridConnectionResourceId'), '/')[10])]",
                                              "properties": {
                                                "serviceBusNamespace": "[split(parameters('hybridConnectionResourceId'), '/')[8]]",
                                                "serviceBusSuffix": "[split(substring(reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('hybridConnectionResourceId'), '/')[2], split(parameters('hybridConnectionResourceId'), '/')[4]), 'Microsoft.Relay/namespaces', split(parameters('hybridConnectionResourceId'), '/')[8]), '2021-11-01').serviceBusEndpoint, indexOf(reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('hybridConnectionResourceId'), '/')[2], split(parameters('hybridConnectionResourceId'), '/')[4]), 'Microsoft.Relay/namespaces', split(parameters('hybridConnectionResourceId'), '/')[8]), '2021-11-01').serviceBusEndpoint, '.servicebus')), ':')[0]]",
                                                "relayName": "[split(parameters('hybridConnectionResourceId'), '/')[10]]",
                                                "relayArmUri": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('hybridConnectionResourceId'), '/')[2], split(parameters('hybridConnectionResourceId'), '/')[4]), 'Microsoft.Relay/namespaces/hybridConnections', split(parameters('hybridConnectionResourceId'), '/')[8], split(parameters('hybridConnectionResourceId'), '/')[10])]",
                                                "hostname": "[split(json(reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('hybridConnectionResourceId'), '/')[2], split(parameters('hybridConnectionResourceId'), '/')[4]), 'Microsoft.Relay/namespaces/hybridConnections', split(parameters('hybridConnectionResourceId'), '/')[8], split(parameters('hybridConnectionResourceId'), '/')[10]), '2021-11-01').userMetadata)[0].value, ':')[0]]",
                                                "port": "[int(split(json(reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('hybridConnectionResourceId'), '/')[2], split(parameters('hybridConnectionResourceId'), '/')[4]), 'Microsoft.Relay/namespaces/hybridConnections', split(parameters('hybridConnectionResourceId'), '/')[8], split(parameters('hybridConnectionResourceId'), '/')[10]), '2021-11-01').userMetadata)[0].value, ':')[1])]",
                                                "sendKeyName": "[parameters('sendKeyName')]",
                                                "sendKeyValue": "[listKeys(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('hybridConnectionResourceId'), '/')[2], split(parameters('hybridConnectionResourceId'), '/')[4]), 'Microsoft.Relay/namespaces/hybridConnections/authorizationRules', split(parameters('hybridConnectionResourceId'), '/')[8], split(parameters('hybridConnectionResourceId'), '/')[10], parameters('sendKeyName')), '2021-11-01').primaryKey]"
                                              }
                                            }
                                          ],
                                          "outputs": {
                                            "name": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "The name of the hybrid connection relay.."
                                              },
                                              "value": "[format('{0}/{1}/{2}/{3}', parameters('appName'), parameters('slotName'), split(parameters('hybridConnectionResourceId'), '/')[8], split(parameters('hybridConnectionResourceId'), '/')[10])]"
                                            },
                                            "resourceId": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "The resource ID of the hybrid connection relay."
                                              },
                                              "value": "[resourceId('Microsoft.Web/sites/slots/hybridConnectionNamespaces/relays', split(format('{0}/{1}/{2}/{3}', parameters('appName'), parameters('slotName'), split(parameters('hybridConnectionResourceId'), '/')[8], split(parameters('hybridConnectionResourceId'), '/')[10]), '/')[0], split(format('{0}/{1}/{2}/{3}', parameters('appName'), parameters('slotName'), split(parameters('hybridConnectionResourceId'), '/')[8], split(parameters('hybridConnectionResourceId'), '/')[10]), '/')[1], split(format('{0}/{1}/{2}/{3}', parameters('appName'), parameters('slotName'), split(parameters('hybridConnectionResourceId'), '/')[8], split(parameters('hybridConnectionResourceId'), '/')[10]), '/')[2], split(format('{0}/{1}/{2}/{3}', parameters('appName'), parameters('slotName'), split(parameters('hybridConnectionResourceId'), '/')[8], split(parameters('hybridConnectionResourceId'), '/')[10]), '/')[3])]"
                                            },
                                            "resourceGroupName": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "The name of the resource group the resource was deployed into."
                                              },
                                              "value": "[resourceGroup().name]"
                                            }
                                          }
                                        }
                                      },
                                      "dependsOn": [
                                        "app",
                                        "slot"
                                      ]
                                    },
                                    "slot_extensionMSdeploy": {
                                      "condition": "[not(empty(parameters('msDeployConfiguration')))]",
                                      "type": "Microsoft.Resources/deployments",
                                      "apiVersion": "2022-09-01",
                                      "name": "[format('{0}-Site-Extension-MSDeploy', uniqueString(deployment().name, parameters('location')))]",
                                      "properties": {
                                        "expressionEvaluationOptions": {
                                          "scope": "inner"
                                        },
                                        "mode": "Incremental",
                                        "parameters": {
                                          "appName": {
                                            "value": "[parameters('appName')]"
                                          },
                                          "msDeployConfiguration": {
                                            "value": "[coalesce(parameters('msDeployConfiguration'), createObject())]"
                                          }
                                        },
                                        "template": {
                                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                          "languageVersion": "2.0",
                                          "contentVersion": "1.0.0.0",
                                          "metadata": {
                                            "_generator": {
                                              "name": "bicep",
                                              "version": "0.30.3.12046",
                                              "templateHash": "10528759818894443718"
                                            },
                                            "name": "Site Deployment Extension ",
                                            "description": "This module deploys a Site extension for MSDeploy.",
                                            "owner": "Azure/module-maintainers"
                                          },
                                          "parameters": {
                                            "appName": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "Required. The name of the parent site resource."
                                              }
                                            },
                                            "msDeployConfiguration": {
                                              "type": "object",
                                              "nullable": true,
                                              "metadata": {
                                                "description": "Required. Sets the MSDeployment Properties."
                                              }
                                            }
                                          },
                                          "resources": {
                                            "app": {
                                              "existing": true,
                                              "type": "Microsoft.Web/sites",
                                              "apiVersion": "2022-09-01",
                                              "name": "[parameters('appName')]"
                                            },
                                            "msdeploy": {
                                              "type": "Microsoft.Web/sites/extensions",
                                              "apiVersion": "2023-12-01",
                                              "name": "[format('{0}/{1}', parameters('appName'), 'MSDeploy')]",
                                              "kind": "MSDeploy",
                                              "properties": "[parameters('msDeployConfiguration')]",
                                              "dependsOn": [
                                                "app"
                                              ]
                                            }
                                          },
                                          "outputs": {
                                            "name": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "The name of the MSDeploy Package."
                                              },
                                              "value": "MSDeploy"
                                            },
                                            "resourceId": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "The resource ID of the Site Extension."
                                              },
                                              "value": "[resourceId('Microsoft.Web/sites/extensions', parameters('appName'), 'MSDeploy')]"
                                            },
                                            "resourceGroupName": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "The resource group the site config was deployed into."
                                              },
                                              "value": "[resourceGroup().name]"
                                            }
                                          }
                                        }
                                      },
                                      "dependsOn": [
                                        "app"
                                      ]
                                    },
                                    "slot_privateEndpoints": {
                                      "copy": {
                                        "name": "slot_privateEndpoints",
                                        "count": "[length(coalesce(parameters('privateEndpoints'), createArray()))]"
                                      },
                                      "type": "Microsoft.Resources/deployments",
                                      "apiVersion": "2022-09-01",
                                      "name": "[format('{0}-slot-PrivateEndpoint-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
                                      "resourceGroup": "[coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'resourceGroupName'), '')]",
                                      "properties": {
                                        "expressionEvaluationOptions": {
                                          "scope": "inner"
                                        },
                                        "mode": "Incremental",
                                        "parameters": {
                                          "name": {
                                            "value": "[coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'name'), format('pep-{0}-{1}-{2}', last(split(resourceId('Microsoft.Web/sites', parameters('appName')), '/')), coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'service'), format('sites-{0}', parameters('name'))), copyIndex()))]"
                                          },
                                          "privateLinkServiceConnections": "[if(not(equals(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'isManualConnection'), true())), createObject('value', createArray(createObject('name', coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'privateLinkServiceConnectionName'), format('{0}-{1}-{2}', last(split(resourceId('Microsoft.Web/sites', parameters('appName')), '/')), coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'service'), format('sites-{0}', parameters('name'))), copyIndex())), 'properties', createObject('privateLinkServiceId', resourceId('Microsoft.Web/sites', parameters('appName')), 'groupIds', createArray(coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'service'), format('sites-{0}', parameters('name')))))))), createObject('value', null()))]",
                                          "manualPrivateLinkServiceConnections": "[if(equals(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'isManualConnection'), true()), createObject('value', createArray(createObject('name', coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'privateLinkServiceConnectionName'), format('{0}-{1}-{2}', last(split(resourceId('Microsoft.Web/sites', parameters('appName')), '/')), coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'service'), format('sites-{0}', parameters('name'))), copyIndex())), 'properties', createObject('privateLinkServiceId', resourceId('Microsoft.Web/sites', parameters('appName')), 'groupIds', createArray(coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'service'), format('sites-{0}', parameters('name')))), 'requestMessage', coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'manualConnectionRequestMessage'), 'Manual approval required.'))))), createObject('value', null()))]",
                                          "subnetResourceId": {
                                            "value": "[coalesce(parameters('privateEndpoints'), createArray())[copyIndex()].subnetResourceId]"
                                          },
                                          "enableTelemetry": {
                                            "value": "[coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'enableTelemetry'), parameters('enableTelemetry'))]"
                                          },
                                          "location": {
                                            "value": "[coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'location'), reference(split(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()].subnetResourceId, '/subnets/')[0], '2020-06-01', 'Full').location)]"
                                          },
                                          "lock": {
                                            "value": "[coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'lock'), parameters('lock'))]"
                                          },
                                          "privateDnsZoneGroup": {
                                            "value": "[tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'privateDnsZoneGroup')]"
                                          },
                                          "roleAssignments": {
                                            "value": "[tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'roleAssignments')]"
                                          },
                                          "tags": {
                                            "value": "[coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'tags'), parameters('tags'))]"
                                          },
                                          "customDnsConfigs": {
                                            "value": "[tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'customDnsConfigs')]"
                                          },
                                          "ipConfigurations": {
                                            "value": "[tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'ipConfigurations')]"
                                          },
                                          "applicationSecurityGroupResourceIds": {
                                            "value": "[tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'applicationSecurityGroupResourceIds')]"
                                          },
                                          "customNetworkInterfaceName": {
                                            "value": "[tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'customNetworkInterfaceName')]"
                                          }
                                        },
                                        "template": {
                                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                          "languageVersion": "2.0",
                                          "contentVersion": "1.0.0.0",
                                          "metadata": {
                                            "_generator": {
                                              "name": "bicep",
                                              "version": "0.29.47.4906",
                                              "templateHash": "1277254088602407590"
                                            },
                                            "name": "Private Endpoints",
                                            "description": "This module deploys a Private Endpoint.",
                                            "owner": "Azure/module-maintainers"
                                          },
                                          "definitions": {
                                            "privateDnsZoneGroupType": {
                                              "type": "object",
                                              "properties": {
                                                "name": {
                                                  "type": "string",
                                                  "nullable": true,
                                                  "metadata": {
                                                    "description": "Optional. The name of the Private DNS Zone Group."
                                                  }
                                                },
                                                "privateDnsZoneGroupConfigs": {
                                                  "type": "array",
                                                  "items": {
                                                    "$ref": "#/definitions/privateDnsZoneGroupConfigType"
                                                  },
                                                  "metadata": {
                                                    "description": "Required. The private DNS zone groups to associate the private endpoint. A DNS zone group can support up to 5 DNS zones."
                                                  }
                                                }
                                              }
                                            },
                                            "roleAssignmentType": {
                                              "type": "array",
                                              "items": {
                                                "type": "object",
                                                "properties": {
                                                  "name": {
                                                    "type": "string",
                                                    "nullable": true,
                                                    "metadata": {
                                                      "description": "Optional. The name (as GUID) of the role assignment. If not provided, a GUID will be generated."
                                                    }
                                                  },
                                                  "roleDefinitionIdOrName": {
                                                    "type": "string",
                                                    "metadata": {
                                                      "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                                                    }
                                                  },
                                                  "principalId": {
                                                    "type": "string",
                                                    "metadata": {
                                                      "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                                                    }
                                                  },
                                                  "principalType": {
                                                    "type": "string",
                                                    "allowedValues": [
                                                      "Device",
                                                      "ForeignGroup",
                                                      "Group",
                                                      "ServicePrincipal",
                                                      "User"
                                                    ],
                                                    "nullable": true,
                                                    "metadata": {
                                                      "description": "Optional. The principal type of the assigned principal ID."
                                                    }
                                                  },
                                                  "description": {
                                                    "type": "string",
                                                    "nullable": true,
                                                    "metadata": {
                                                      "description": "Optional. The description of the role assignment."
                                                    }
                                                  },
                                                  "condition": {
                                                    "type": "string",
                                                    "nullable": true,
                                                    "metadata": {
                                                      "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                                                    }
                                                  },
                                                  "conditionVersion": {
                                                    "type": "string",
                                                    "allowedValues": [
                                                      "2.0"
                                                    ],
                                                    "nullable": true,
                                                    "metadata": {
                                                      "description": "Optional. Version of the condition."
                                                    }
                                                  },
                                                  "delegatedManagedIdentityResourceId": {
                                                    "type": "string",
                                                    "nullable": true,
                                                    "metadata": {
                                                      "description": "Optional. The Resource Id of the delegated managed identity resource."
                                                    }
                                                  }
                                                }
                                              },
                                              "nullable": true
                                            },
                                            "lockType": {
                                              "type": "object",
                                              "properties": {
                                                "name": {
                                                  "type": "string",
                                                  "nullable": true,
                                                  "metadata": {
                                                    "description": "Optional. Specify the name of lock."
                                                  }
                                                },
                                                "kind": {
                                                  "type": "string",
                                                  "allowedValues": [
                                                    "CanNotDelete",
                                                    "None",
                                                    "ReadOnly"
                                                  ],
                                                  "nullable": true,
                                                  "metadata": {
                                                    "description": "Optional. Specify the type of lock."
                                                  }
                                                }
                                              },
                                              "nullable": true
                                            },
                                            "ipConfigurationsType": {
                                              "type": "array",
                                              "items": {
                                                "type": "object",
                                                "properties": {
                                                  "name": {
                                                    "type": "string",
                                                    "metadata": {
                                                      "description": "Required. The name of the resource that is unique within a resource group."
                                                    }
                                                  },
                                                  "properties": {
                                                    "type": "object",
                                                    "properties": {
                                                      "groupId": {
                                                        "type": "string",
                                                        "metadata": {
                                                          "description": "Required. The ID of a group obtained from the remote resource that this private endpoint should connect to. If used with private link service connection, this property must be defined as empty string."
                                                        }
                                                      },
                                                      "memberName": {
                                                        "type": "string",
                                                        "metadata": {
                                                          "description": "Required. The member name of a group obtained from the remote resource that this private endpoint should connect to. If used with private link service connection, this property must be defined as empty string."
                                                        }
                                                      },
                                                      "privateIPAddress": {
                                                        "type": "string",
                                                        "metadata": {
                                                          "description": "Required. A private IP address obtained from the private endpoint's subnet."
                                                        }
                                                      }
                                                    },
                                                    "metadata": {
                                                      "description": "Required. Properties of private endpoint IP configurations."
                                                    }
                                                  }
                                                }
                                              },
                                              "nullable": true
                                            },
                                            "manualPrivateLinkServiceConnectionsType": {
                                              "type": "array",
                                              "items": {
                                                "type": "object",
                                                "properties": {
                                                  "name": {
                                                    "type": "string",
                                                    "metadata": {
                                                      "description": "Required. The name of the private link service connection."
                                                    }
                                                  },
                                                  "properties": {
                                                    "type": "object",
                                                    "properties": {
                                                      "groupIds": {
                                                        "type": "array",
                                                        "items": {
                                                          "type": "string"
                                                        },
                                                        "metadata": {
                                                          "description": "Required. The ID of a group obtained from the remote resource that this private endpoint should connect to. If used with private link service connection, this property must be defined as empty string array `[]`."
                                                        }
                                                      },
                                                      "privateLinkServiceId": {
                                                        "type": "string",
                                                        "metadata": {
                                                          "description": "Required. The resource id of private link service."
                                                        }
                                                      },
                                                      "requestMessage": {
                                                        "type": "string",
                                                        "metadata": {
                                                          "description": "Optional. A message passed to the owner of the remote resource with this connection request. Restricted to 140 chars."
                                                        }
                                                      }
                                                    },
                                                    "metadata": {
                                                      "description": "Required. Properties of private link service connection."
                                                    }
                                                  }
                                                }
                                              },
                                              "nullable": true
                                            },
                                            "privateLinkServiceConnectionsType": {
                                              "type": "array",
                                              "items": {
                                                "type": "object",
                                                "properties": {
                                                  "name": {
                                                    "type": "string",
                                                    "metadata": {
                                                      "description": "Required. The name of the private link service connection."
                                                    }
                                                  },
                                                  "properties": {
                                                    "type": "object",
                                                    "properties": {
                                                      "groupIds": {
                                                        "type": "array",
                                                        "items": {
                                                          "type": "string"
                                                        },
                                                        "metadata": {
                                                          "description": "Required. The ID of a group obtained from the remote resource that this private endpoint should connect to. If used with private link service connection, this property must be defined as empty string array `[]`."
                                                        }
                                                      },
                                                      "privateLinkServiceId": {
                                                        "type": "string",
                                                        "metadata": {
                                                          "description": "Required. The resource id of private link service."
                                                        }
                                                      },
                                                      "requestMessage": {
                                                        "type": "string",
                                                        "nullable": true,
                                                        "metadata": {
                                                          "description": "Optional. A message passed to the owner of the remote resource with this connection request. Restricted to 140 chars."
                                                        }
                                                      }
                                                    },
                                                    "metadata": {
                                                      "description": "Required. Properties of private link service connection."
                                                    }
                                                  }
                                                }
                                              },
                                              "nullable": true
                                            },
                                            "customDnsConfigType": {
                                              "type": "array",
                                              "items": {
                                                "type": "object",
                                                "properties": {
                                                  "fqdn": {
                                                    "type": "string",
                                                    "metadata": {
                                                      "description": "Required. Fqdn that resolves to private endpoint IP address."
                                                    }
                                                  },
                                                  "ipAddresses": {
                                                    "type": "array",
                                                    "items": {
                                                      "type": "string"
                                                    },
                                                    "metadata": {
                                                      "description": "Required. A list of private IP addresses of the private endpoint."
                                                    }
                                                  }
                                                }
                                              },
                                              "nullable": true
                                            },
                                            "privateDnsZoneGroupConfigType": {
                                              "type": "object",
                                              "properties": {
                                                "name": {
                                                  "type": "string",
                                                  "nullable": true,
                                                  "metadata": {
                                                    "description": "Optional. The name of the private DNS zone group config."
                                                  }
                                                },
                                                "privateDnsZoneResourceId": {
                                                  "type": "string",
                                                  "metadata": {
                                                    "description": "Required. The resource id of the private DNS zone."
                                                  }
                                                }
                                              },
                                              "metadata": {
                                                "__bicep_imported_from!": {
                                                  "sourceTemplate": "private-dns-zone-group/main.bicep"
                                                }
                                              }
                                            }
                                          },
                                          "parameters": {
                                            "name": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "Required. Name of the private endpoint resource to create."
                                              }
                                            },
                                            "subnetResourceId": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "Required. Resource ID of the subnet where the endpoint needs to be created."
                                              }
                                            },
                                            "applicationSecurityGroupResourceIds": {
                                              "type": "array",
                                              "nullable": true,
                                              "metadata": {
                                                "description": "Optional. Application security groups in which the private endpoint IP configuration is included."
                                              }
                                            },
                                            "customNetworkInterfaceName": {
                                              "type": "string",
                                              "nullable": true,
                                              "metadata": {
                                                "description": "Optional. The custom name of the network interface attached to the private endpoint."
                                              }
                                            },
                                            "ipConfigurations": {
                                              "$ref": "#/definitions/ipConfigurationsType",
                                              "metadata": {
                                                "description": "Optional. A list of IP configurations of the private endpoint. This will be used to map to the First Party Service endpoints."
                                              }
                                            },
                                            "privateDnsZoneGroup": {
                                              "$ref": "#/definitions/privateDnsZoneGroupType",
                                              "nullable": true,
                                              "metadata": {
                                                "description": "Optional. The private DNS zone group to configure for the private endpoint."
                                              }
                                            },
                                            "location": {
                                              "type": "string",
                                              "defaultValue": "[resourceGroup().location]",
                                              "metadata": {
                                                "description": "Optional. Location for all Resources."
                                              }
                                            },
                                            "lock": {
                                              "$ref": "#/definitions/lockType",
                                              "metadata": {
                                                "description": "Optional. The lock settings of the service."
                                              }
                                            },
                                            "roleAssignments": {
                                              "$ref": "#/definitions/roleAssignmentType",
                                              "metadata": {
                                                "description": "Optional. Array of role assignments to create."
                                              }
                                            },
                                            "tags": {
                                              "type": "object",
                                              "nullable": true,
                                              "metadata": {
                                                "description": "Optional. Tags to be applied on all resources/resource groups in this deployment."
                                              }
                                            },
                                            "customDnsConfigs": {
                                              "$ref": "#/definitions/customDnsConfigType",
                                              "metadata": {
                                                "description": "Optional. Custom DNS configurations."
                                              }
                                            },
                                            "manualPrivateLinkServiceConnections": {
                                              "$ref": "#/definitions/manualPrivateLinkServiceConnectionsType",
                                              "metadata": {
                                                "description": "Optional. A grouping of information about the connection to the remote resource. Used when the network admin does not have access to approve connections to the remote resource."
                                              }
                                            },
                                            "privateLinkServiceConnections": {
                                              "$ref": "#/definitions/privateLinkServiceConnectionsType",
                                              "metadata": {
                                                "description": "Optional. A grouping of information about the connection to the remote resource."
                                              }
                                            },
                                            "enableTelemetry": {
                                              "type": "bool",
                                              "defaultValue": true,
                                              "metadata": {
                                                "description": "Optional. Enable/Disable usage telemetry for module."
                                              }
                                            }
                                          },
                                          "variables": {
                                            "copy": [
                                              {
                                                "name": "formattedRoleAssignments",
                                                "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]",
                                                "input": "[union(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')], createObject('roleDefinitionId', coalesce(tryGet(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName), if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName)))))]"
                                              }
                                            ],
                                            "builtInRoleNames": {
                                              "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                                              "DNS Resolver Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '0f2ebee7-ffd4-4fc0-b3b7-664099fdad5d')]",
                                              "DNS Zone Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'befefa01-2a29-4197-83a8-272ff33ce314')]",
                                              "Domain Services Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'eeaeda52-9324-47f6-8069-5d5bade478b2')]",
                                              "Domain Services Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '361898ef-9ed1-48c2-849c-a832951106bb')]",
                                              "Network Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4d97b98b-1d4f-4787-a291-c67834d212e7')]",
                                              "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                                              "Private DNS Zone Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b12aa53e-6015-4669-85d0-8515ebb3ae7f')]",
                                              "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                                              "Role Based Access Control Administrator (Preview)": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]"
                                            }
                                          },
                                          "resources": {
                                            "avmTelemetry": {
                                              "condition": "[parameters('enableTelemetry')]",
                                              "type": "Microsoft.Resources/deployments",
                                              "apiVersion": "2024-03-01",
                                              "name": "[format('46d3xbcp.res.network-privateendpoint.{0}.{1}', replace('0.7.1', '.', '-'), substring(uniqueString(deployment().name, parameters('location')), 0, 4))]",
                                              "properties": {
                                                "mode": "Incremental",
                                                "template": {
                                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                                  "contentVersion": "1.0.0.0",
                                                  "resources": [],
                                                  "outputs": {
                                                    "telemetry": {
                                                      "type": "String",
                                                      "value": "For more information, see https://aka.ms/avm/TelemetryInfo"
                                                    }
                                                  }
                                                }
                                              }
                                            },
                                            "privateEndpoint": {
                                              "type": "Microsoft.Network/privateEndpoints",
                                              "apiVersion": "2023-11-01",
                                              "name": "[parameters('name')]",
                                              "location": "[parameters('location')]",
                                              "tags": "[parameters('tags')]",
                                              "properties": {
                                                "copy": [
                                                  {
                                                    "name": "applicationSecurityGroups",
                                                    "count": "[length(coalesce(parameters('applicationSecurityGroupResourceIds'), createArray()))]",
                                                    "input": {
                                                      "id": "[coalesce(parameters('applicationSecurityGroupResourceIds'), createArray())[copyIndex('applicationSecurityGroups')]]"
                                                    }
                                                  }
                                                ],
                                                "customDnsConfigs": "[coalesce(parameters('customDnsConfigs'), createArray())]",
                                                "customNetworkInterfaceName": "[coalesce(parameters('customNetworkInterfaceName'), '')]",
                                                "ipConfigurations": "[coalesce(parameters('ipConfigurations'), createArray())]",
                                                "manualPrivateLinkServiceConnections": "[coalesce(parameters('manualPrivateLinkServiceConnections'), createArray())]",
                                                "privateLinkServiceConnections": "[coalesce(parameters('privateLinkServiceConnections'), createArray())]",
                                                "subnet": {
                                                  "id": "[parameters('subnetResourceId')]"
                                                }
                                              }
                                            },
                                            "privateEndpoint_lock": {
                                              "condition": "[and(not(empty(coalesce(parameters('lock'), createObject()))), not(equals(tryGet(parameters('lock'), 'kind'), 'None')))]",
                                              "type": "Microsoft.Authorization/locks",
                                              "apiVersion": "2020-05-01",
                                              "scope": "[format('Microsoft.Network/privateEndpoints/{0}', parameters('name'))]",
                                              "name": "[coalesce(tryGet(parameters('lock'), 'name'), format('lock-{0}', parameters('name')))]",
                                              "properties": {
                                                "level": "[coalesce(tryGet(parameters('lock'), 'kind'), '')]",
                                                "notes": "[if(equals(tryGet(parameters('lock'), 'kind'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot delete or modify the resource or child resources.')]"
                                              },
                                              "dependsOn": [
                                                "privateEndpoint"
                                              ]
                                            },
                                            "privateEndpoint_roleAssignments": {
                                              "copy": {
                                                "name": "privateEndpoint_roleAssignments",
                                                "count": "[length(coalesce(variables('formattedRoleAssignments'), createArray()))]"
                                              },
                                              "type": "Microsoft.Authorization/roleAssignments",
                                              "apiVersion": "2022-04-01",
                                              "scope": "[format('Microsoft.Network/privateEndpoints/{0}', parameters('name'))]",
                                              "name": "[coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'name'), guid(resourceId('Microsoft.Network/privateEndpoints', parameters('name')), coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId, coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId))]",
                                              "properties": {
                                                "roleDefinitionId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId]",
                                                "principalId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId]",
                                                "description": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'description')]",
                                                "principalType": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'principalType')]",
                                                "condition": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition')]",
                                                "conditionVersion": "[if(not(empty(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                                                "delegatedManagedIdentityResourceId": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
                                              },
                                              "dependsOn": [
                                                "privateEndpoint"
                                              ]
                                            },
                                            "privateEndpoint_privateDnsZoneGroup": {
                                              "condition": "[not(empty(parameters('privateDnsZoneGroup')))]",
                                              "type": "Microsoft.Resources/deployments",
                                              "apiVersion": "2022-09-01",
                                              "name": "[format('{0}-PrivateEndpoint-PrivateDnsZoneGroup', uniqueString(deployment().name))]",
                                              "properties": {
                                                "expressionEvaluationOptions": {
                                                  "scope": "inner"
                                                },
                                                "mode": "Incremental",
                                                "parameters": {
                                                  "name": {
                                                    "value": "[tryGet(parameters('privateDnsZoneGroup'), 'name')]"
                                                  },
                                                  "privateEndpointName": {
                                                    "value": "[parameters('name')]"
                                                  },
                                                  "privateDnsZoneConfigs": {
                                                    "value": "[parameters('privateDnsZoneGroup').privateDnsZoneGroupConfigs]"
                                                  }
                                                },
                                                "template": {
                                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                                  "languageVersion": "2.0",
                                                  "contentVersion": "1.0.0.0",
                                                  "metadata": {
                                                    "_generator": {
                                                      "name": "bicep",
                                                      "version": "0.29.47.4906",
                                                      "templateHash": "5805178546717255803"
                                                    },
                                                    "name": "Private Endpoint Private DNS Zone Groups",
                                                    "description": "This module deploys a Private Endpoint Private DNS Zone Group.",
                                                    "owner": "Azure/module-maintainers"
                                                  },
                                                  "definitions": {
                                                    "privateDnsZoneGroupConfigType": {
                                                      "type": "object",
                                                      "properties": {
                                                        "name": {
                                                          "type": "string",
                                                          "nullable": true,
                                                          "metadata": {
                                                            "description": "Optional. The name of the private DNS zone group config."
                                                          }
                                                        },
                                                        "privateDnsZoneResourceId": {
                                                          "type": "string",
                                                          "metadata": {
                                                            "description": "Required. The resource id of the private DNS zone."
                                                          }
                                                        }
                                                      },
                                                      "metadata": {
                                                        "__bicep_export!": true
                                                      }
                                                    }
                                                  },
                                                  "parameters": {
                                                    "privateEndpointName": {
                                                      "type": "string",
                                                      "metadata": {
                                                        "description": "Conditional. The name of the parent private endpoint. Required if the template is used in a standalone deployment."
                                                      }
                                                    },
                                                    "privateDnsZoneConfigs": {
                                                      "type": "array",
                                                      "items": {
                                                        "$ref": "#/definitions/privateDnsZoneGroupConfigType"
                                                      },
                                                      "minLength": 1,
                                                      "maxLength": 5,
                                                      "metadata": {
                                                        "description": "Required. Array of private DNS zone configurations of the private DNS zone group. A DNS zone group can support up to 5 DNS zones."
                                                      }
                                                    },
                                                    "name": {
                                                      "type": "string",
                                                      "defaultValue": "default",
                                                      "metadata": {
                                                        "description": "Optional. The name of the private DNS zone group."
                                                      }
                                                    }
                                                  },
                                                  "variables": {
                                                    "copy": [
                                                      {
                                                        "name": "privateDnsZoneConfigsVar",
                                                        "count": "[length(parameters('privateDnsZoneConfigs'))]",
                                                        "input": {
                                                          "name": "[coalesce(tryGet(parameters('privateDnsZoneConfigs')[copyIndex('privateDnsZoneConfigsVar')], 'name'), last(split(parameters('privateDnsZoneConfigs')[copyIndex('privateDnsZoneConfigsVar')].privateDnsZoneResourceId, '/')))]",
                                                          "properties": {
                                                            "privateDnsZoneId": "[parameters('privateDnsZoneConfigs')[copyIndex('privateDnsZoneConfigsVar')].privateDnsZoneResourceId]"
                                                          }
                                                        }
                                                      }
                                                    ]
                                                  },
                                                  "resources": {
                                                    "privateEndpoint": {
                                                      "existing": true,
                                                      "type": "Microsoft.Network/privateEndpoints",
                                                      "apiVersion": "2023-11-01",
                                                      "name": "[parameters('privateEndpointName')]"
                                                    },
                                                    "privateDnsZoneGroup": {
                                                      "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
                                                      "apiVersion": "2023-11-01",
                                                      "name": "[format('{0}/{1}', parameters('privateEndpointName'), parameters('name'))]",
                                                      "properties": {
                                                        "privateDnsZoneConfigs": "[variables('privateDnsZoneConfigsVar')]"
                                                      },
                                                      "dependsOn": [
                                                        "privateEndpoint"
                                                      ]
                                                    }
                                                  },
                                                  "outputs": {
                                                    "name": {
                                                      "type": "string",
                                                      "metadata": {
                                                        "description": "The name of the private endpoint DNS zone group."
                                                      },
                                                      "value": "[parameters('name')]"
                                                    },
                                                    "resourceId": {
                                                      "type": "string",
                                                      "metadata": {
                                                        "description": "The resource ID of the private endpoint DNS zone group."
                                                      },
                                                      "value": "[resourceId('Microsoft.Network/privateEndpoints/privateDnsZoneGroups', parameters('privateEndpointName'), parameters('name'))]"
                                                    },
                                                    "resourceGroupName": {
                                                      "type": "string",
                                                      "metadata": {
                                                        "description": "The resource group the private endpoint DNS zone group was deployed into."
                                                      },
                                                      "value": "[resourceGroup().name]"
                                                    }
                                                  }
                                                }
                                              },
                                              "dependsOn": [
                                                "privateEndpoint"
                                              ]
                                            }
                                          },
                                          "outputs": {
                                            "resourceGroupName": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "The resource group the private endpoint was deployed into."
                                              },
                                              "value": "[resourceGroup().name]"
                                            },
                                            "resourceId": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "The resource ID of the private endpoint."
                                              },
                                              "value": "[resourceId('Microsoft.Network/privateEndpoints', parameters('name'))]"
                                            },
                                            "name": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "The name of the private endpoint."
                                              },
                                              "value": "[parameters('name')]"
                                            },
                                            "location": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "The location the resource was deployed into."
                                              },
                                              "value": "[reference('privateEndpoint', '2023-11-01', 'full').location]"
                                            },
                                            "customDnsConfig": {
                                              "$ref": "#/definitions/customDnsConfigType",
                                              "metadata": {
                                                "description": "The custom DNS configurations of the private endpoint."
                                              },
                                              "value": "[reference('privateEndpoint').customDnsConfigs]"
                                            },
                                            "networkInterfaceIds": {
                                              "type": "array",
                                              "metadata": {
                                                "description": "The IDs of the network interfaces associated with the private endpoint."
                                              },
                                              "value": "[reference('privateEndpoint').networkInterfaces]"
                                            },
                                            "groupId": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "The group Id for the private endpoint Group."
                                              },
                                              "value": "[if(and(not(empty(reference('privateEndpoint').manualPrivateLinkServiceConnections)), greater(length(tryGet(reference('privateEndpoint').manualPrivateLinkServiceConnections[0].properties, 'groupIds')), 0)), coalesce(tryGet(reference('privateEndpoint').manualPrivateLinkServiceConnections[0].properties, 'groupIds', 0), ''), if(and(not(empty(reference('privateEndpoint').privateLinkServiceConnections)), greater(length(tryGet(reference('privateEndpoint').privateLinkServiceConnections[0].properties, 'groupIds')), 0)), coalesce(tryGet(reference('privateEndpoint').privateLinkServiceConnections[0].properties, 'groupIds', 0), ''), ''))]"
                                            }
                                          }
                                        }
                                      },
                                      "dependsOn": [
                                        "app",
                                        "slot"
                                      ]
                                    }
                                  },
                                  "outputs": {
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the slot."
                                      },
                                      "value": "[parameters('name')]"
                                    },
                                    "resourceId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource ID of the slot."
                                      },
                                      "value": "[resourceId('Microsoft.Web/sites/slots', parameters('appName'), parameters('name'))]"
                                    },
                                    "resourceGroupName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource group the slot was deployed into."
                                      },
                                      "value": "[resourceGroup().name]"
                                    },
                                    "systemAssignedMIPrincipalId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The principal ID of the system assigned identity."
                                      },
                                      "value": "[coalesce(tryGet(tryGet(reference('slot', '2022-09-01', 'full'), 'identity'), 'principalId'), '')]"
                                    },
                                    "location": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The location the resource was deployed into."
                                      },
                                      "value": "[reference('slot', '2022-09-01', 'full').location]"
                                    },
                                    "privateEndpoints": {
                                      "type": "array",
                                      "metadata": {
                                        "description": "The private endpoints of the slot."
                                      },
                                      "copy": {
                                        "count": "[length(if(not(empty(parameters('privateEndpoints'))), array(parameters('privateEndpoints')), createArray()))]",
                                        "input": {
                                          "name": "[reference(format('slot_privateEndpoints[{0}]', copyIndex())).outputs.name.value]",
                                          "resourceId": "[reference(format('slot_privateEndpoints[{0}]', copyIndex())).outputs.resourceId.value]",
                                          "groupId": "[reference(format('slot_privateEndpoints[{0}]', copyIndex())).outputs.groupId.value]",
                                          "customDnsConfig": "[reference(format('slot_privateEndpoints[{0}]', copyIndex())).outputs.customDnsConfig.value]",
                                          "networkInterfaceIds": "[reference(format('slot_privateEndpoints[{0}]', copyIndex())).outputs.networkInterfaceIds.value]"
                                        }
                                      }
                                    }
                                  }
                                }
                              },
                              "dependsOn": [
                                "app"
                              ]
                            },
                            "app_basicPublishingCredentialsPolicies": {
                              "copy": {
                                "name": "app_basicPublishingCredentialsPolicies",
                                "count": "[length(coalesce(parameters('basicPublishingCredentialsPolicies'), createArray()))]"
                              },
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "[format('{0}-Site-Publish-Cred-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "webAppName": {
                                    "value": "[parameters('name')]"
                                  },
                                  "name": {
                                    "value": "[coalesce(parameters('basicPublishingCredentialsPolicies'), createArray())[copyIndex()].name]"
                                  },
                                  "allow": {
                                    "value": "[tryGet(coalesce(parameters('basicPublishingCredentialsPolicies'), createArray())[copyIndex()], 'allow')]"
                                  },
                                  "location": {
                                    "value": "[parameters('location')]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.30.3.12046",
                                      "templateHash": "17738396642923166646"
                                    },
                                    "name": "Web Site Basic Publishing Credentials Policies",
                                    "description": "This module deploys a Web Site Basic Publishing Credentials Policy.",
                                    "owner": "Azure/module-maintainers"
                                  },
                                  "parameters": {
                                    "name": {
                                      "type": "string",
                                      "allowedValues": [
                                        "scm",
                                        "ftp"
                                      ],
                                      "metadata": {
                                        "description": "Required. The name of the resource."
                                      }
                                    },
                                    "allow": {
                                      "type": "bool",
                                      "defaultValue": true,
                                      "metadata": {
                                        "description": "Optional. Set to true to enable or false to disable a publishing method."
                                      }
                                    },
                                    "webAppName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Conditional. The name of the parent web site. Required if the template is used in a standalone deployment."
                                      }
                                    },
                                    "location": {
                                      "type": "string",
                                      "defaultValue": "[resourceGroup().location]",
                                      "metadata": {
                                        "description": "Optional. Location for all Resources."
                                      }
                                    }
                                  },
                                  "resources": [
                                    {
                                      "type": "Microsoft.Web/sites/basicPublishingCredentialsPolicies",
                                      "apiVersion": "2022-09-01",
                                      "name": "[format('{0}/{1}', parameters('webAppName'), parameters('name'))]",
                                      "location": "[parameters('location')]",
                                      "properties": {
                                        "allow": "[parameters('allow')]"
                                      }
                                    }
                                  ],
                                  "outputs": {
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the basic publishing credential policy."
                                      },
                                      "value": "[parameters('name')]"
                                    },
                                    "resourceId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource ID of the basic publishing credential policy."
                                      },
                                      "value": "[resourceId('Microsoft.Web/sites/basicPublishingCredentialsPolicies', parameters('webAppName'), parameters('name'))]"
                                    },
                                    "resourceGroupName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the resource group the basic publishing credential policy was deployed into."
                                      },
                                      "value": "[resourceGroup().name]"
                                    },
                                    "location": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The location the resource was deployed into."
                                      },
                                      "value": "[reference(resourceId('Microsoft.Web/sites/basicPublishingCredentialsPolicies', parameters('webAppName'), parameters('name')), '2022-09-01', 'full').location]"
                                    }
                                  }
                                }
                              },
                              "dependsOn": [
                                "app"
                              ]
                            },
                            "app_hybridConnectionRelays": {
                              "copy": {
                                "name": "app_hybridConnectionRelays",
                                "count": "[length(coalesce(parameters('hybridConnectionRelays'), createArray()))]"
                              },
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "[format('{0}-HybridConnectionRelay-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "hybridConnectionResourceId": {
                                    "value": "[coalesce(parameters('hybridConnectionRelays'), createArray())[copyIndex()].resourceId]"
                                  },
                                  "appName": {
                                    "value": "[parameters('name')]"
                                  },
                                  "sendKeyName": {
                                    "value": "[tryGet(coalesce(parameters('hybridConnectionRelays'), createArray())[copyIndex()], 'sendKeyName')]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.30.3.12046",
                                      "templateHash": "7835301880643296882"
                                    },
                                    "name": "Web/Function Apps Hybrid Connection Relay",
                                    "description": "This module deploys a Site Hybrid Connection Namespace Relay.",
                                    "owner": "Azure/module-maintainers"
                                  },
                                  "parameters": {
                                    "hybridConnectionResourceId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The resource ID of the relay namespace hybrid connection."
                                      }
                                    },
                                    "appName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Conditional. The name of the parent web site. Required if the template is used in a standalone deployment."
                                      }
                                    },
                                    "sendKeyName": {
                                      "type": "string",
                                      "defaultValue": "defaultSender",
                                      "metadata": {
                                        "description": "Optional. Name of the authorization rule send key to use."
                                      }
                                    }
                                  },
                                  "resources": [
                                    {
                                      "type": "Microsoft.Web/sites/hybridConnectionNamespaces/relays",
                                      "apiVersion": "2022-09-01",
                                      "name": "[format('{0}/{1}/{2}', parameters('appName'), split(parameters('hybridConnectionResourceId'), '/')[8], split(parameters('hybridConnectionResourceId'), '/')[10])]",
                                      "properties": {
                                        "serviceBusNamespace": "[split(parameters('hybridConnectionResourceId'), '/')[8]]",
                                        "serviceBusSuffix": "[split(substring(reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('hybridConnectionResourceId'), '/')[2], split(parameters('hybridConnectionResourceId'), '/')[4]), 'Microsoft.Relay/namespaces', split(parameters('hybridConnectionResourceId'), '/')[8]), '2021-11-01').serviceBusEndpoint, indexOf(reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('hybridConnectionResourceId'), '/')[2], split(parameters('hybridConnectionResourceId'), '/')[4]), 'Microsoft.Relay/namespaces', split(parameters('hybridConnectionResourceId'), '/')[8]), '2021-11-01').serviceBusEndpoint, '.servicebus')), ':')[0]]",
                                        "relayName": "[split(parameters('hybridConnectionResourceId'), '/')[10]]",
                                        "relayArmUri": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('hybridConnectionResourceId'), '/')[2], split(parameters('hybridConnectionResourceId'), '/')[4]), 'Microsoft.Relay/namespaces/hybridConnections', split(parameters('hybridConnectionResourceId'), '/')[8], split(parameters('hybridConnectionResourceId'), '/')[10])]",
                                        "hostname": "[split(json(reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('hybridConnectionResourceId'), '/')[2], split(parameters('hybridConnectionResourceId'), '/')[4]), 'Microsoft.Relay/namespaces/hybridConnections', split(parameters('hybridConnectionResourceId'), '/')[8], split(parameters('hybridConnectionResourceId'), '/')[10]), '2021-11-01').userMetadata)[0].value, ':')[0]]",
                                        "port": "[int(split(json(reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('hybridConnectionResourceId'), '/')[2], split(parameters('hybridConnectionResourceId'), '/')[4]), 'Microsoft.Relay/namespaces/hybridConnections', split(parameters('hybridConnectionResourceId'), '/')[8], split(parameters('hybridConnectionResourceId'), '/')[10]), '2021-11-01').userMetadata)[0].value, ':')[1])]",
                                        "sendKeyName": "[parameters('sendKeyName')]",
                                        "sendKeyValue": "[listKeys(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('hybridConnectionResourceId'), '/')[2], split(parameters('hybridConnectionResourceId'), '/')[4]), 'Microsoft.Relay/namespaces/hybridConnections/authorizationRules', split(parameters('hybridConnectionResourceId'), '/')[8], split(parameters('hybridConnectionResourceId'), '/')[10], parameters('sendKeyName')), '2021-11-01').primaryKey]"
                                      }
                                    }
                                  ],
                                  "outputs": {
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the hybrid connection relay.."
                                      },
                                      "value": "[format('{0}/{1}/{2}', parameters('appName'), split(parameters('hybridConnectionResourceId'), '/')[8], split(parameters('hybridConnectionResourceId'), '/')[10])]"
                                    },
                                    "resourceId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource ID of the hybrid connection relay."
                                      },
                                      "value": "[resourceId('Microsoft.Web/sites/hybridConnectionNamespaces/relays', split(format('{0}/{1}/{2}', parameters('appName'), split(parameters('hybridConnectionResourceId'), '/')[8], split(parameters('hybridConnectionResourceId'), '/')[10]), '/')[0], split(format('{0}/{1}/{2}', parameters('appName'), split(parameters('hybridConnectionResourceId'), '/')[8], split(parameters('hybridConnectionResourceId'), '/')[10]), '/')[1], split(format('{0}/{1}/{2}', parameters('appName'), split(parameters('hybridConnectionResourceId'), '/')[8], split(parameters('hybridConnectionResourceId'), '/')[10]), '/')[2])]"
                                    },
                                    "resourceGroupName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the resource group the resource was deployed into."
                                      },
                                      "value": "[resourceGroup().name]"
                                    }
                                  }
                                }
                              },
                              "dependsOn": [
                                "app"
                              ]
                            },
                            "app_privateEndpoints": {
                              "copy": {
                                "name": "app_privateEndpoints",
                                "count": "[length(coalesce(parameters('privateEndpoints'), createArray()))]"
                              },
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "[format('{0}-app-PrivateEndpoint-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
                              "resourceGroup": "[coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'resourceGroupName'), '')]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "name": {
                                    "value": "[coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'name'), format('pep-{0}-{1}-{2}', last(split(resourceId('Microsoft.Web/sites', parameters('name')), '/')), coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'service'), 'sites'), copyIndex()))]"
                                  },
                                  "privateLinkServiceConnections": "[if(not(equals(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'isManualConnection'), true())), createObject('value', createArray(createObject('name', coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'privateLinkServiceConnectionName'), format('{0}-{1}-{2}', last(split(resourceId('Microsoft.Web/sites', parameters('name')), '/')), coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'service'), 'sites'), copyIndex())), 'properties', createObject('privateLinkServiceId', resourceId('Microsoft.Web/sites', parameters('name')), 'groupIds', createArray(coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'service'), 'sites')))))), createObject('value', null()))]",
                                  "manualPrivateLinkServiceConnections": "[if(equals(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'isManualConnection'), true()), createObject('value', createArray(createObject('name', coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'privateLinkServiceConnectionName'), format('{0}-{1}-{2}', last(split(resourceId('Microsoft.Web/sites', parameters('name')), '/')), coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'service'), 'sites'), copyIndex())), 'properties', createObject('privateLinkServiceId', resourceId('Microsoft.Web/sites', parameters('name')), 'groupIds', createArray(coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'service'), 'sites')), 'requestMessage', coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'manualConnectionRequestMessage'), 'Manual approval required.'))))), createObject('value', null()))]",
                                  "subnetResourceId": {
                                    "value": "[coalesce(parameters('privateEndpoints'), createArray())[copyIndex()].subnetResourceId]"
                                  },
                                  "enableTelemetry": {
                                    "value": "[coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'enableTelemetry'), parameters('enableTelemetry'))]"
                                  },
                                  "location": {
                                    "value": "[coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'location'), reference(split(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()].subnetResourceId, '/subnets/')[0], '2020-06-01', 'Full').location)]"
                                  },
                                  "lock": {
                                    "value": "[coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'lock'), parameters('lock'))]"
                                  },
                                  "privateDnsZoneGroup": {
                                    "value": "[tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'privateDnsZoneGroup')]"
                                  },
                                  "roleAssignments": {
                                    "value": "[tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'roleAssignments')]"
                                  },
                                  "tags": {
                                    "value": "[coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'tags'), parameters('tags'))]"
                                  },
                                  "customDnsConfigs": {
                                    "value": "[tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'customDnsConfigs')]"
                                  },
                                  "ipConfigurations": {
                                    "value": "[tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'ipConfigurations')]"
                                  },
                                  "applicationSecurityGroupResourceIds": {
                                    "value": "[tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'applicationSecurityGroupResourceIds')]"
                                  },
                                  "customNetworkInterfaceName": {
                                    "value": "[tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'customNetworkInterfaceName')]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "languageVersion": "2.0",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.29.47.4906",
                                      "templateHash": "1277254088602407590"
                                    },
                                    "name": "Private Endpoints",
                                    "description": "This module deploys a Private Endpoint.",
                                    "owner": "Azure/module-maintainers"
                                  },
                                  "definitions": {
                                    "privateDnsZoneGroupType": {
                                      "type": "object",
                                      "properties": {
                                        "name": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The name of the Private DNS Zone Group."
                                          }
                                        },
                                        "privateDnsZoneGroupConfigs": {
                                          "type": "array",
                                          "items": {
                                            "$ref": "#/definitions/privateDnsZoneGroupConfigType"
                                          },
                                          "metadata": {
                                            "description": "Required. The private DNS zone groups to associate the private endpoint. A DNS zone group can support up to 5 DNS zones."
                                          }
                                        }
                                      }
                                    },
                                    "roleAssignmentType": {
                                      "type": "array",
                                      "items": {
                                        "type": "object",
                                        "properties": {
                                          "name": {
                                            "type": "string",
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. The name (as GUID) of the role assignment. If not provided, a GUID will be generated."
                                            }
                                          },
                                          "roleDefinitionIdOrName": {
                                            "type": "string",
                                            "metadata": {
                                              "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                                            }
                                          },
                                          "principalId": {
                                            "type": "string",
                                            "metadata": {
                                              "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                                            }
                                          },
                                          "principalType": {
                                            "type": "string",
                                            "allowedValues": [
                                              "Device",
                                              "ForeignGroup",
                                              "Group",
                                              "ServicePrincipal",
                                              "User"
                                            ],
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. The principal type of the assigned principal ID."
                                            }
                                          },
                                          "description": {
                                            "type": "string",
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. The description of the role assignment."
                                            }
                                          },
                                          "condition": {
                                            "type": "string",
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                                            }
                                          },
                                          "conditionVersion": {
                                            "type": "string",
                                            "allowedValues": [
                                              "2.0"
                                            ],
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. Version of the condition."
                                            }
                                          },
                                          "delegatedManagedIdentityResourceId": {
                                            "type": "string",
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. The Resource Id of the delegated managed identity resource."
                                            }
                                          }
                                        }
                                      },
                                      "nullable": true
                                    },
                                    "lockType": {
                                      "type": "object",
                                      "properties": {
                                        "name": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. Specify the name of lock."
                                          }
                                        },
                                        "kind": {
                                          "type": "string",
                                          "allowedValues": [
                                            "CanNotDelete",
                                            "None",
                                            "ReadOnly"
                                          ],
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. Specify the type of lock."
                                          }
                                        }
                                      },
                                      "nullable": true
                                    },
                                    "ipConfigurationsType": {
                                      "type": "array",
                                      "items": {
                                        "type": "object",
                                        "properties": {
                                          "name": {
                                            "type": "string",
                                            "metadata": {
                                              "description": "Required. The name of the resource that is unique within a resource group."
                                            }
                                          },
                                          "properties": {
                                            "type": "object",
                                            "properties": {
                                              "groupId": {
                                                "type": "string",
                                                "metadata": {
                                                  "description": "Required. The ID of a group obtained from the remote resource that this private endpoint should connect to. If used with private link service connection, this property must be defined as empty string."
                                                }
                                              },
                                              "memberName": {
                                                "type": "string",
                                                "metadata": {
                                                  "description": "Required. The member name of a group obtained from the remote resource that this private endpoint should connect to. If used with private link service connection, this property must be defined as empty string."
                                                }
                                              },
                                              "privateIPAddress": {
                                                "type": "string",
                                                "metadata": {
                                                  "description": "Required. A private IP address obtained from the private endpoint's subnet."
                                                }
                                              }
                                            },
                                            "metadata": {
                                              "description": "Required. Properties of private endpoint IP configurations."
                                            }
                                          }
                                        }
                                      },
                                      "nullable": true
                                    },
                                    "manualPrivateLinkServiceConnectionsType": {
                                      "type": "array",
                                      "items": {
                                        "type": "object",
                                        "properties": {
                                          "name": {
                                            "type": "string",
                                            "metadata": {
                                              "description": "Required. The name of the private link service connection."
                                            }
                                          },
                                          "properties": {
                                            "type": "object",
                                            "properties": {
                                              "groupIds": {
                                                "type": "array",
                                                "items": {
                                                  "type": "string"
                                                },
                                                "metadata": {
                                                  "description": "Required. The ID of a group obtained from the remote resource that this private endpoint should connect to. If used with private link service connection, this property must be defined as empty string array `[]`."
                                                }
                                              },
                                              "privateLinkServiceId": {
                                                "type": "string",
                                                "metadata": {
                                                  "description": "Required. The resource id of private link service."
                                                }
                                              },
                                              "requestMessage": {
                                                "type": "string",
                                                "metadata": {
                                                  "description": "Optional. A message passed to the owner of the remote resource with this connection request. Restricted to 140 chars."
                                                }
                                              }
                                            },
                                            "metadata": {
                                              "description": "Required. Properties of private link service connection."
                                            }
                                          }
                                        }
                                      },
                                      "nullable": true
                                    },
                                    "privateLinkServiceConnectionsType": {
                                      "type": "array",
                                      "items": {
                                        "type": "object",
                                        "properties": {
                                          "name": {
                                            "type": "string",
                                            "metadata": {
                                              "description": "Required. The name of the private link service connection."
                                            }
                                          },
                                          "properties": {
                                            "type": "object",
                                            "properties": {
                                              "groupIds": {
                                                "type": "array",
                                                "items": {
                                                  "type": "string"
                                                },
                                                "metadata": {
                                                  "description": "Required. The ID of a group obtained from the remote resource that this private endpoint should connect to. If used with private link service connection, this property must be defined as empty string array `[]`."
                                                }
                                              },
                                              "privateLinkServiceId": {
                                                "type": "string",
                                                "metadata": {
                                                  "description": "Required. The resource id of private link service."
                                                }
                                              },
                                              "requestMessage": {
                                                "type": "string",
                                                "nullable": true,
                                                "metadata": {
                                                  "description": "Optional. A message passed to the owner of the remote resource with this connection request. Restricted to 140 chars."
                                                }
                                              }
                                            },
                                            "metadata": {
                                              "description": "Required. Properties of private link service connection."
                                            }
                                          }
                                        }
                                      },
                                      "nullable": true
                                    },
                                    "customDnsConfigType": {
                                      "type": "array",
                                      "items": {
                                        "type": "object",
                                        "properties": {
                                          "fqdn": {
                                            "type": "string",
                                            "metadata": {
                                              "description": "Required. Fqdn that resolves to private endpoint IP address."
                                            }
                                          },
                                          "ipAddresses": {
                                            "type": "array",
                                            "items": {
                                              "type": "string"
                                            },
                                            "metadata": {
                                              "description": "Required. A list of private IP addresses of the private endpoint."
                                            }
                                          }
                                        }
                                      },
                                      "nullable": true
                                    },
                                    "privateDnsZoneGroupConfigType": {
                                      "type": "object",
                                      "properties": {
                                        "name": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The name of the private DNS zone group config."
                                          }
                                        },
                                        "privateDnsZoneResourceId": {
                                          "type": "string",
                                          "metadata": {
                                            "description": "Required. The resource id of the private DNS zone."
                                          }
                                        }
                                      },
                                      "metadata": {
                                        "__bicep_imported_from!": {
                                          "sourceTemplate": "private-dns-zone-group/main.bicep"
                                        }
                                      }
                                    }
                                  },
                                  "parameters": {
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. Name of the private endpoint resource to create."
                                      }
                                    },
                                    "subnetResourceId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. Resource ID of the subnet where the endpoint needs to be created."
                                      }
                                    },
                                    "applicationSecurityGroupResourceIds": {
                                      "type": "array",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. Application security groups in which the private endpoint IP configuration is included."
                                      }
                                    },
                                    "customNetworkInterfaceName": {
                                      "type": "string",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. The custom name of the network interface attached to the private endpoint."
                                      }
                                    },
                                    "ipConfigurations": {
                                      "$ref": "#/definitions/ipConfigurationsType",
                                      "metadata": {
                                        "description": "Optional. A list of IP configurations of the private endpoint. This will be used to map to the First Party Service endpoints."
                                      }
                                    },
                                    "privateDnsZoneGroup": {
                                      "$ref": "#/definitions/privateDnsZoneGroupType",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. The private DNS zone group to configure for the private endpoint."
                                      }
                                    },
                                    "location": {
                                      "type": "string",
                                      "defaultValue": "[resourceGroup().location]",
                                      "metadata": {
                                        "description": "Optional. Location for all Resources."
                                      }
                                    },
                                    "lock": {
                                      "$ref": "#/definitions/lockType",
                                      "metadata": {
                                        "description": "Optional. The lock settings of the service."
                                      }
                                    },
                                    "roleAssignments": {
                                      "$ref": "#/definitions/roleAssignmentType",
                                      "metadata": {
                                        "description": "Optional. Array of role assignments to create."
                                      }
                                    },
                                    "tags": {
                                      "type": "object",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. Tags to be applied on all resources/resource groups in this deployment."
                                      }
                                    },
                                    "customDnsConfigs": {
                                      "$ref": "#/definitions/customDnsConfigType",
                                      "metadata": {
                                        "description": "Optional. Custom DNS configurations."
                                      }
                                    },
                                    "manualPrivateLinkServiceConnections": {
                                      "$ref": "#/definitions/manualPrivateLinkServiceConnectionsType",
                                      "metadata": {
                                        "description": "Optional. A grouping of information about the connection to the remote resource. Used when the network admin does not have access to approve connections to the remote resource."
                                      }
                                    },
                                    "privateLinkServiceConnections": {
                                      "$ref": "#/definitions/privateLinkServiceConnectionsType",
                                      "metadata": {
                                        "description": "Optional. A grouping of information about the connection to the remote resource."
                                      }
                                    },
                                    "enableTelemetry": {
                                      "type": "bool",
                                      "defaultValue": true,
                                      "metadata": {
                                        "description": "Optional. Enable/Disable usage telemetry for module."
                                      }
                                    }
                                  },
                                  "variables": {
                                    "copy": [
                                      {
                                        "name": "formattedRoleAssignments",
                                        "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]",
                                        "input": "[union(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')], createObject('roleDefinitionId', coalesce(tryGet(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName), if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName)))))]"
                                      }
                                    ],
                                    "builtInRoleNames": {
                                      "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                                      "DNS Resolver Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '0f2ebee7-ffd4-4fc0-b3b7-664099fdad5d')]",
                                      "DNS Zone Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'befefa01-2a29-4197-83a8-272ff33ce314')]",
                                      "Domain Services Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'eeaeda52-9324-47f6-8069-5d5bade478b2')]",
                                      "Domain Services Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '361898ef-9ed1-48c2-849c-a832951106bb')]",
                                      "Network Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4d97b98b-1d4f-4787-a291-c67834d212e7')]",
                                      "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                                      "Private DNS Zone Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b12aa53e-6015-4669-85d0-8515ebb3ae7f')]",
                                      "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                                      "Role Based Access Control Administrator (Preview)": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]"
                                    }
                                  },
                                  "resources": {
                                    "avmTelemetry": {
                                      "condition": "[parameters('enableTelemetry')]",
                                      "type": "Microsoft.Resources/deployments",
                                      "apiVersion": "2024-03-01",
                                      "name": "[format('46d3xbcp.res.network-privateendpoint.{0}.{1}', replace('0.7.1', '.', '-'), substring(uniqueString(deployment().name, parameters('location')), 0, 4))]",
                                      "properties": {
                                        "mode": "Incremental",
                                        "template": {
                                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                          "contentVersion": "1.0.0.0",
                                          "resources": [],
                                          "outputs": {
                                            "telemetry": {
                                              "type": "String",
                                              "value": "For more information, see https://aka.ms/avm/TelemetryInfo"
                                            }
                                          }
                                        }
                                      }
                                    },
                                    "privateEndpoint": {
                                      "type": "Microsoft.Network/privateEndpoints",
                                      "apiVersion": "2023-11-01",
                                      "name": "[parameters('name')]",
                                      "location": "[parameters('location')]",
                                      "tags": "[parameters('tags')]",
                                      "properties": {
                                        "copy": [
                                          {
                                            "name": "applicationSecurityGroups",
                                            "count": "[length(coalesce(parameters('applicationSecurityGroupResourceIds'), createArray()))]",
                                            "input": {
                                              "id": "[coalesce(parameters('applicationSecurityGroupResourceIds'), createArray())[copyIndex('applicationSecurityGroups')]]"
                                            }
                                          }
                                        ],
                                        "customDnsConfigs": "[coalesce(parameters('customDnsConfigs'), createArray())]",
                                        "customNetworkInterfaceName": "[coalesce(parameters('customNetworkInterfaceName'), '')]",
                                        "ipConfigurations": "[coalesce(parameters('ipConfigurations'), createArray())]",
                                        "manualPrivateLinkServiceConnections": "[coalesce(parameters('manualPrivateLinkServiceConnections'), createArray())]",
                                        "privateLinkServiceConnections": "[coalesce(parameters('privateLinkServiceConnections'), createArray())]",
                                        "subnet": {
                                          "id": "[parameters('subnetResourceId')]"
                                        }
                                      }
                                    },
                                    "privateEndpoint_lock": {
                                      "condition": "[and(not(empty(coalesce(parameters('lock'), createObject()))), not(equals(tryGet(parameters('lock'), 'kind'), 'None')))]",
                                      "type": "Microsoft.Authorization/locks",
                                      "apiVersion": "2020-05-01",
                                      "scope": "[format('Microsoft.Network/privateEndpoints/{0}', parameters('name'))]",
                                      "name": "[coalesce(tryGet(parameters('lock'), 'name'), format('lock-{0}', parameters('name')))]",
                                      "properties": {
                                        "level": "[coalesce(tryGet(parameters('lock'), 'kind'), '')]",
                                        "notes": "[if(equals(tryGet(parameters('lock'), 'kind'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot delete or modify the resource or child resources.')]"
                                      },
                                      "dependsOn": [
                                        "privateEndpoint"
                                      ]
                                    },
                                    "privateEndpoint_roleAssignments": {
                                      "copy": {
                                        "name": "privateEndpoint_roleAssignments",
                                        "count": "[length(coalesce(variables('formattedRoleAssignments'), createArray()))]"
                                      },
                                      "type": "Microsoft.Authorization/roleAssignments",
                                      "apiVersion": "2022-04-01",
                                      "scope": "[format('Microsoft.Network/privateEndpoints/{0}', parameters('name'))]",
                                      "name": "[coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'name'), guid(resourceId('Microsoft.Network/privateEndpoints', parameters('name')), coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId, coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId))]",
                                      "properties": {
                                        "roleDefinitionId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId]",
                                        "principalId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId]",
                                        "description": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'description')]",
                                        "principalType": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'principalType')]",
                                        "condition": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition')]",
                                        "conditionVersion": "[if(not(empty(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                                        "delegatedManagedIdentityResourceId": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
                                      },
                                      "dependsOn": [
                                        "privateEndpoint"
                                      ]
                                    },
                                    "privateEndpoint_privateDnsZoneGroup": {
                                      "condition": "[not(empty(parameters('privateDnsZoneGroup')))]",
                                      "type": "Microsoft.Resources/deployments",
                                      "apiVersion": "2022-09-01",
                                      "name": "[format('{0}-PrivateEndpoint-PrivateDnsZoneGroup', uniqueString(deployment().name))]",
                                      "properties": {
                                        "expressionEvaluationOptions": {
                                          "scope": "inner"
                                        },
                                        "mode": "Incremental",
                                        "parameters": {
                                          "name": {
                                            "value": "[tryGet(parameters('privateDnsZoneGroup'), 'name')]"
                                          },
                                          "privateEndpointName": {
                                            "value": "[parameters('name')]"
                                          },
                                          "privateDnsZoneConfigs": {
                                            "value": "[parameters('privateDnsZoneGroup').privateDnsZoneGroupConfigs]"
                                          }
                                        },
                                        "template": {
                                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                          "languageVersion": "2.0",
                                          "contentVersion": "1.0.0.0",
                                          "metadata": {
                                            "_generator": {
                                              "name": "bicep",
                                              "version": "0.29.47.4906",
                                              "templateHash": "5805178546717255803"
                                            },
                                            "name": "Private Endpoint Private DNS Zone Groups",
                                            "description": "This module deploys a Private Endpoint Private DNS Zone Group.",
                                            "owner": "Azure/module-maintainers"
                                          },
                                          "definitions": {
                                            "privateDnsZoneGroupConfigType": {
                                              "type": "object",
                                              "properties": {
                                                "name": {
                                                  "type": "string",
                                                  "nullable": true,
                                                  "metadata": {
                                                    "description": "Optional. The name of the private DNS zone group config."
                                                  }
                                                },
                                                "privateDnsZoneResourceId": {
                                                  "type": "string",
                                                  "metadata": {
                                                    "description": "Required. The resource id of the private DNS zone."
                                                  }
                                                }
                                              },
                                              "metadata": {
                                                "__bicep_export!": true
                                              }
                                            }
                                          },
                                          "parameters": {
                                            "privateEndpointName": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "Conditional. The name of the parent private endpoint. Required if the template is used in a standalone deployment."
                                              }
                                            },
                                            "privateDnsZoneConfigs": {
                                              "type": "array",
                                              "items": {
                                                "$ref": "#/definitions/privateDnsZoneGroupConfigType"
                                              },
                                              "minLength": 1,
                                              "maxLength": 5,
                                              "metadata": {
                                                "description": "Required. Array of private DNS zone configurations of the private DNS zone group. A DNS zone group can support up to 5 DNS zones."
                                              }
                                            },
                                            "name": {
                                              "type": "string",
                                              "defaultValue": "default",
                                              "metadata": {
                                                "description": "Optional. The name of the private DNS zone group."
                                              }
                                            }
                                          },
                                          "variables": {
                                            "copy": [
                                              {
                                                "name": "privateDnsZoneConfigsVar",
                                                "count": "[length(parameters('privateDnsZoneConfigs'))]",
                                                "input": {
                                                  "name": "[coalesce(tryGet(parameters('privateDnsZoneConfigs')[copyIndex('privateDnsZoneConfigsVar')], 'name'), last(split(parameters('privateDnsZoneConfigs')[copyIndex('privateDnsZoneConfigsVar')].privateDnsZoneResourceId, '/')))]",
                                                  "properties": {
                                                    "privateDnsZoneId": "[parameters('privateDnsZoneConfigs')[copyIndex('privateDnsZoneConfigsVar')].privateDnsZoneResourceId]"
                                                  }
                                                }
                                              }
                                            ]
                                          },
                                          "resources": {
                                            "privateEndpoint": {
                                              "existing": true,
                                              "type": "Microsoft.Network/privateEndpoints",
                                              "apiVersion": "2023-11-01",
                                              "name": "[parameters('privateEndpointName')]"
                                            },
                                            "privateDnsZoneGroup": {
                                              "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
                                              "apiVersion": "2023-11-01",
                                              "name": "[format('{0}/{1}', parameters('privateEndpointName'), parameters('name'))]",
                                              "properties": {
                                                "privateDnsZoneConfigs": "[variables('privateDnsZoneConfigsVar')]"
                                              },
                                              "dependsOn": [
                                                "privateEndpoint"
                                              ]
                                            }
                                          },
                                          "outputs": {
                                            "name": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "The name of the private endpoint DNS zone group."
                                              },
                                              "value": "[parameters('name')]"
                                            },
                                            "resourceId": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "The resource ID of the private endpoint DNS zone group."
                                              },
                                              "value": "[resourceId('Microsoft.Network/privateEndpoints/privateDnsZoneGroups', parameters('privateEndpointName'), parameters('name'))]"
                                            },
                                            "resourceGroupName": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "The resource group the private endpoint DNS zone group was deployed into."
                                              },
                                              "value": "[resourceGroup().name]"
                                            }
                                          }
                                        }
                                      },
                                      "dependsOn": [
                                        "privateEndpoint"
                                      ]
                                    }
                                  },
                                  "outputs": {
                                    "resourceGroupName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource group the private endpoint was deployed into."
                                      },
                                      "value": "[resourceGroup().name]"
                                    },
                                    "resourceId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource ID of the private endpoint."
                                      },
                                      "value": "[resourceId('Microsoft.Network/privateEndpoints', parameters('name'))]"
                                    },
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the private endpoint."
                                      },
                                      "value": "[parameters('name')]"
                                    },
                                    "location": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The location the resource was deployed into."
                                      },
                                      "value": "[reference('privateEndpoint', '2023-11-01', 'full').location]"
                                    },
                                    "customDnsConfig": {
                                      "$ref": "#/definitions/customDnsConfigType",
                                      "metadata": {
                                        "description": "The custom DNS configurations of the private endpoint."
                                      },
                                      "value": "[reference('privateEndpoint').customDnsConfigs]"
                                    },
                                    "networkInterfaceIds": {
                                      "type": "array",
                                      "metadata": {
                                        "description": "The IDs of the network interfaces associated with the private endpoint."
                                      },
                                      "value": "[reference('privateEndpoint').networkInterfaces]"
                                    },
                                    "groupId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The group Id for the private endpoint Group."
                                      },
                                      "value": "[if(and(not(empty(reference('privateEndpoint').manualPrivateLinkServiceConnections)), greater(length(tryGet(reference('privateEndpoint').manualPrivateLinkServiceConnections[0].properties, 'groupIds')), 0)), coalesce(tryGet(reference('privateEndpoint').manualPrivateLinkServiceConnections[0].properties, 'groupIds', 0), ''), if(and(not(empty(reference('privateEndpoint').privateLinkServiceConnections)), greater(length(tryGet(reference('privateEndpoint').privateLinkServiceConnections[0].properties, 'groupIds')), 0)), coalesce(tryGet(reference('privateEndpoint').privateLinkServiceConnections[0].properties, 'groupIds', 0), ''), ''))]"
                                    }
                                  }
                                }
                              },
                              "dependsOn": [
                                "app"
                              ]
                            }
                          },
                          "outputs": {
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "The name of the site."
                              },
                              "value": "[parameters('name')]"
                            },
                            "resourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource ID of the site."
                              },
                              "value": "[resourceId('Microsoft.Web/sites', parameters('name'))]"
                            },
                            "slots": {
                              "type": "array",
                              "metadata": {
                                "description": "The list of the slots."
                              },
                              "copy": {
                                "count": "[length(coalesce(parameters('slots'), createArray()))]",
                                "input": "[format('{0}-Slot-{1}', uniqueString(deployment().name, parameters('location')), coalesce(parameters('slots'), createArray())[copyIndex()].name)]"
                              }
                            },
                            "slotResourceIds": {
                              "type": "array",
                              "metadata": {
                                "description": "The list of the slot resource ids."
                              },
                              "copy": {
                                "count": "[length(coalesce(parameters('slots'), createArray()))]",
                                "input": "[reference(format('app_slots[{0}]', copyIndex())).outputs.resourceId.value]"
                              }
                            },
                            "resourceGroupName": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource group the site was deployed into."
                              },
                              "value": "[resourceGroup().name]"
                            },
                            "systemAssignedMIPrincipalId": {
                              "type": "string",
                              "metadata": {
                                "description": "The principal ID of the system assigned identity."
                              },
                              "value": "[coalesce(tryGet(tryGet(reference('app', '2023-12-01', 'full'), 'identity'), 'principalId'), '')]"
                            },
                            "slotSystemAssignedMIPrincipalIds": {
                              "type": "array",
                              "metadata": {
                                "description": "The principal ID of the system assigned identity of slots."
                              },
                              "copy": {
                                "count": "[length(coalesce(parameters('slots'), createArray()))]",
                                "input": "[reference(format('app_slots[{0}]', copyIndex())).outputs.systemAssignedMIPrincipalId.value]"
                              }
                            },
                            "location": {
                              "type": "string",
                              "metadata": {
                                "description": "The location the resource was deployed into."
                              },
                              "value": "[reference('app', '2023-12-01', 'full').location]"
                            },
                            "defaultHostname": {
                              "type": "string",
                              "metadata": {
                                "description": "Default hostname of the app."
                              },
                              "value": "[reference('app').defaultHostName]"
                            },
                            "customDomainVerificationId": {
                              "type": "string",
                              "metadata": {
                                "description": "Unique identifier that verifies the custom domains assigned to the app. Customer will add this ID to a txt record for verification."
                              },
                              "value": "[reference('app').customDomainVerificationId]"
                            },
                            "privateEndpoints": {
                              "type": "array",
                              "metadata": {
                                "description": "The private endpoints of the site."
                              },
                              "copy": {
                                "count": "[length(if(not(empty(parameters('privateEndpoints'))), array(parameters('privateEndpoints')), createArray()))]",
                                "input": {
                                  "name": "[reference(format('app_privateEndpoints[{0}]', copyIndex())).outputs.name.value]",
                                  "resourceId": "[reference(format('app_privateEndpoints[{0}]', copyIndex())).outputs.resourceId.value]",
                                  "groupId": "[reference(format('app_privateEndpoints[{0}]', copyIndex())).outputs.groupId.value]",
                                  "customDnsConfig": "[reference(format('app_privateEndpoints[{0}]', copyIndex())).outputs.customDnsConfig.value]",
                                  "networkInterfaceIds": "[reference(format('app_privateEndpoints[{0}]', copyIndex())).outputs.networkInterfaceIds.value]"
                                }
                              }
                            },
                            "slotPrivateEndpoints": {
                              "type": "array",
                              "metadata": {
                                "description": "The private endpoints of the slots."
                              },
                              "copy": {
                                "count": "[length(coalesce(parameters('slots'), createArray()))]",
                                "input": "[reference(format('app_slots[{0}]', copyIndex())).outputs.privateEndpoints.value]"
                              }
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Resources/deployments', format('{0}-appInsights-Deployment', uniqueString(deployment().name, parameters('location'))))]",
                        "[resourceId('Microsoft.Resources/deployments', take(format('{0}-app-Deployment', parameters('webAppName')), 64))]",
                        "[resourceId('Microsoft.Resources/deployments', take(format('{0}-PrivateDnsZoneDeployment', replace(variables('webAppDnsZoneName'), '.', '-')), 64))]",
                        "[resourceId('Microsoft.Resources/deployments', format('{0}-deployment', uniqueString(deployment().name, parameters('location'), 'webapp')))]"
                      ]
                    },
                    {
                      "condition": "[and(not(empty(parameters('subnetPrivateEndpointId'))), not(parameters('deployAseV3')))]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[take(format('{0}-PrivateDnsZoneDeployment', replace(variables('webAppDnsZoneName'), '.', '-')), 64)]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "name": {
                            "value": "[variables('webAppDnsZoneName')]"
                          },
                          "location": {
                            "value": "global"
                          },
                          "virtualNetworkLinks": {
                            "value": "[parameters('virtualNetworkLinks')]"
                          },
                          "tags": {
                            "value": "[parameters('tags')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "languageVersion": "2.0",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.29.47.4906",
                              "templateHash": "5518185016108244461"
                            },
                            "name": "Private DNS Zones",
                            "description": "This module deploys a Private DNS zone.",
                            "owner": "Azure/module-maintainers"
                          },
                          "definitions": {
                            "roleAssignmentType": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "name": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The name (as GUID) of the role assignment. If not provided, a GUID will be generated."
                                    }
                                  },
                                  "roleDefinitionIdOrName": {
                                    "type": "string",
                                    "metadata": {
                                      "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                                    }
                                  },
                                  "principalId": {
                                    "type": "string",
                                    "metadata": {
                                      "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                                    }
                                  },
                                  "principalType": {
                                    "type": "string",
                                    "allowedValues": [
                                      "Device",
                                      "ForeignGroup",
                                      "Group",
                                      "ServicePrincipal",
                                      "User"
                                    ],
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The principal type of the assigned principal ID."
                                    }
                                  },
                                  "description": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The description of the role assignment."
                                    }
                                  },
                                  "condition": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                                    }
                                  },
                                  "conditionVersion": {
                                    "type": "string",
                                    "allowedValues": [
                                      "2.0"
                                    ],
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. Version of the condition."
                                    }
                                  },
                                  "delegatedManagedIdentityResourceId": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The Resource Id of the delegated managed identity resource."
                                    }
                                  }
                                }
                              },
                              "nullable": true
                            },
                            "lockType": {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Specify the name of lock."
                                  }
                                },
                                "kind": {
                                  "type": "string",
                                  "allowedValues": [
                                    "CanNotDelete",
                                    "None",
                                    "ReadOnly"
                                  ],
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Specify the type of lock."
                                  }
                                }
                              },
                              "nullable": true
                            },
                            "aType": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "name": {
                                    "type": "string",
                                    "metadata": {
                                      "description": "Required. The name of the record."
                                    }
                                  },
                                  "metadata": {
                                    "type": "object",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The metadata of the record."
                                    }
                                  },
                                  "ttl": {
                                    "type": "int",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The TTL of the record."
                                    }
                                  },
                                  "roleAssignments": {
                                    "$ref": "#/definitions/roleAssignmentType",
                                    "metadata": {
                                      "description": "Optional. Array of role assignments to create."
                                    }
                                  },
                                  "aRecords": {
                                    "type": "array",
                                    "items": {
                                      "type": "object",
                                      "properties": {
                                        "ipv4Address": {
                                          "type": "string",
                                          "metadata": {
                                            "description": "Required. The IPv4 address of this A record."
                                          }
                                        }
                                      }
                                    },
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The list of A records in the record set."
                                    }
                                  }
                                }
                              },
                              "nullable": true
                            },
                            "aaaaType": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "name": {
                                    "type": "string",
                                    "metadata": {
                                      "description": "Required. The name of the record."
                                    }
                                  },
                                  "metadata": {
                                    "type": "object",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The metadata of the record."
                                    }
                                  },
                                  "ttl": {
                                    "type": "int",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The TTL of the record."
                                    }
                                  },
                                  "roleAssignments": {
                                    "$ref": "#/definitions/roleAssignmentType",
                                    "metadata": {
                                      "description": "Optional. Array of role assignments to create."
                                    }
                                  },
                                  "aaaaRecords": {
                                    "type": "array",
                                    "items": {
                                      "type": "object",
                                      "properties": {
                                        "ipv6Address": {
                                          "type": "string",
                                          "metadata": {
                                            "description": "Required. The IPv6 address of this AAAA record."
                                          }
                                        }
                                      }
                                    },
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The list of AAAA records in the record set."
                                    }
                                  }
                                }
                              },
                              "nullable": true
                            },
                            "cnameType": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "name": {
                                    "type": "string",
                                    "metadata": {
                                      "description": "Required. The name of the record."
                                    }
                                  },
                                  "metadata": {
                                    "type": "object",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The metadata of the record."
                                    }
                                  },
                                  "ttl": {
                                    "type": "int",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The TTL of the record."
                                    }
                                  },
                                  "roleAssignments": {
                                    "$ref": "#/definitions/roleAssignmentType",
                                    "metadata": {
                                      "description": "Optional. Array of role assignments to create."
                                    }
                                  },
                                  "cnameRecord": {
                                    "type": "object",
                                    "properties": {
                                      "cname": {
                                        "type": "string",
                                        "metadata": {
                                          "description": "Required. The canonical name of the CNAME record."
                                        }
                                      }
                                    },
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The CNAME record in the record set."
                                    }
                                  }
                                }
                              },
                              "nullable": true
                            },
                            "mxType": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "name": {
                                    "type": "string",
                                    "metadata": {
                                      "description": "Required. The name of the record."
                                    }
                                  },
                                  "metadata": {
                                    "type": "object",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The metadata of the record."
                                    }
                                  },
                                  "ttl": {
                                    "type": "int",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The TTL of the record."
                                    }
                                  },
                                  "roleAssignments": {
                                    "$ref": "#/definitions/roleAssignmentType",
                                    "metadata": {
                                      "description": "Optional. Array of role assignments to create."
                                    }
                                  },
                                  "mxRecords": {
                                    "type": "array",
                                    "items": {
                                      "type": "object",
                                      "properties": {
                                        "exchange": {
                                          "type": "string",
                                          "metadata": {
                                            "description": "Required. The domain name of the mail host for this MX record."
                                          }
                                        },
                                        "preference": {
                                          "type": "int",
                                          "metadata": {
                                            "description": "Required. The preference value for this MX record."
                                          }
                                        }
                                      }
                                    },
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The list of MX records in the record set."
                                    }
                                  }
                                }
                              },
                              "nullable": true
                            },
                            "ptrType": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "name": {
                                    "type": "string",
                                    "metadata": {
                                      "description": "Required. The name of the record."
                                    }
                                  },
                                  "metadata": {
                                    "type": "object",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The metadata of the record."
                                    }
                                  },
                                  "ttl": {
                                    "type": "int",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The TTL of the record."
                                    }
                                  },
                                  "roleAssignments": {
                                    "$ref": "#/definitions/roleAssignmentType",
                                    "metadata": {
                                      "description": "Optional. Array of role assignments to create."
                                    }
                                  },
                                  "ptrRecords": {
                                    "type": "array",
                                    "items": {
                                      "type": "object",
                                      "properties": {
                                        "ptrdname": {
                                          "type": "string",
                                          "metadata": {
                                            "description": "Required. The PTR target domain name for this PTR record."
                                          }
                                        }
                                      }
                                    },
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The list of PTR records in the record set."
                                    }
                                  }
                                }
                              },
                              "nullable": true
                            },
                            "soaType": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "name": {
                                    "type": "string",
                                    "metadata": {
                                      "description": "Required. The name of the record."
                                    }
                                  },
                                  "metadata": {
                                    "type": "object",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The metadata of the record."
                                    }
                                  },
                                  "ttl": {
                                    "type": "int",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The TTL of the record."
                                    }
                                  },
                                  "roleAssignments": {
                                    "$ref": "#/definitions/roleAssignmentType",
                                    "metadata": {
                                      "description": "Optional. Array of role assignments to create."
                                    }
                                  },
                                  "soaRecord": {
                                    "type": "object",
                                    "properties": {
                                      "email": {
                                        "type": "string",
                                        "metadata": {
                                          "description": "Required. The email contact for this SOA record."
                                        }
                                      },
                                      "expireTime": {
                                        "type": "int",
                                        "metadata": {
                                          "description": "Required. The expire time for this SOA record."
                                        }
                                      },
                                      "host": {
                                        "type": "string",
                                        "metadata": {
                                          "description": "Required. The domain name of the authoritative name server for this SOA record."
                                        }
                                      },
                                      "minimumTtl": {
                                        "type": "int",
                                        "metadata": {
                                          "description": "Required. The minimum value for this SOA record. By convention this is used to determine the negative caching duration."
                                        }
                                      },
                                      "refreshTime": {
                                        "type": "int",
                                        "metadata": {
                                          "description": "Required. The refresh value for this SOA record."
                                        }
                                      },
                                      "retryTime": {
                                        "type": "int",
                                        "metadata": {
                                          "description": "Required. The retry time for this SOA record."
                                        }
                                      },
                                      "serialNumber": {
                                        "type": "int",
                                        "metadata": {
                                          "description": "Required. The serial number for this SOA record."
                                        }
                                      }
                                    },
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The SOA record in the record set."
                                    }
                                  }
                                }
                              },
                              "nullable": true
                            },
                            "srvType": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "name": {
                                    "type": "string",
                                    "metadata": {
                                      "description": "Required. The name of the record."
                                    }
                                  },
                                  "metadata": {
                                    "type": "object",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The metadata of the record."
                                    }
                                  },
                                  "ttl": {
                                    "type": "int",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The TTL of the record."
                                    }
                                  },
                                  "roleAssignments": {
                                    "$ref": "#/definitions/roleAssignmentType",
                                    "metadata": {
                                      "description": "Optional. Array of role assignments to create."
                                    }
                                  },
                                  "srvRecords": {
                                    "type": "array",
                                    "items": {
                                      "type": "object",
                                      "properties": {
                                        "priority": {
                                          "type": "int",
                                          "metadata": {
                                            "description": "Required. The priority value for this SRV record."
                                          }
                                        },
                                        "weight": {
                                          "type": "int",
                                          "metadata": {
                                            "description": "Required. The weight value for this SRV record."
                                          }
                                        },
                                        "port": {
                                          "type": "int",
                                          "metadata": {
                                            "description": "Required. The port value for this SRV record."
                                          }
                                        },
                                        "target": {
                                          "type": "string",
                                          "metadata": {
                                            "description": "Required. The target domain name for this SRV record."
                                          }
                                        }
                                      }
                                    },
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The list of SRV records in the record set."
                                    }
                                  }
                                }
                              },
                              "nullable": true
                            },
                            "txtType": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "name": {
                                    "type": "string",
                                    "metadata": {
                                      "description": "Required. The name of the record."
                                    }
                                  },
                                  "metadata": {
                                    "type": "object",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The metadata of the record."
                                    }
                                  },
                                  "ttl": {
                                    "type": "int",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The TTL of the record."
                                    }
                                  },
                                  "roleAssignments": {
                                    "$ref": "#/definitions/roleAssignmentType",
                                    "metadata": {
                                      "description": "Optional. Array of role assignments to create."
                                    }
                                  },
                                  "txtRecords": {
                                    "type": "array",
                                    "items": {
                                      "type": "object",
                                      "properties": {
                                        "value": {
                                          "type": "array",
                                          "items": {
                                            "type": "string"
                                          },
                                          "metadata": {
                                            "description": "Required. The text value of this TXT record."
                                          }
                                        }
                                      }
                                    },
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The list of TXT records in the record set."
                                    }
                                  }
                                }
                              },
                              "nullable": true
                            },
                            "virtualNetworkLinkType": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "name": {
                                    "type": "string",
                                    "nullable": true,
                                    "minLength": 1,
                                    "maxLength": 80,
                                    "metadata": {
                                      "description": "Optional. The resource name."
                                    }
                                  },
                                  "virtualNetworkResourceId": {
                                    "type": "string",
                                    "metadata": {
                                      "description": "Required. The resource ID of the virtual network to link."
                                    }
                                  },
                                  "location": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The Azure Region where the resource lives."
                                    }
                                  },
                                  "registrationEnabled": {
                                    "type": "bool",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. Is auto-registration of virtual machine records in the virtual network in the Private DNS zone enabled?."
                                    }
                                  },
                                  "tags": {
                                    "type": "object",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. Resource tags."
                                    }
                                  }
                                }
                              },
                              "nullable": true
                            }
                          },
                          "parameters": {
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. Private DNS zone name."
                              }
                            },
                            "a": {
                              "$ref": "#/definitions/aType",
                              "metadata": {
                                "description": "Optional. Array of A records."
                              }
                            },
                            "aaaa": {
                              "$ref": "#/definitions/aaaaType",
                              "metadata": {
                                "description": "Optional. Array of AAAA records."
                              }
                            },
                            "cname": {
                              "$ref": "#/definitions/cnameType",
                              "metadata": {
                                "description": "Optional. Array of CNAME records."
                              }
                            },
                            "mx": {
                              "$ref": "#/definitions/mxType",
                              "metadata": {
                                "description": "Optional. Array of MX records."
                              }
                            },
                            "ptr": {
                              "$ref": "#/definitions/ptrType",
                              "metadata": {
                                "description": "Optional. Array of PTR records."
                              }
                            },
                            "soa": {
                              "$ref": "#/definitions/soaType",
                              "metadata": {
                                "description": "Optional. Array of SOA records."
                              }
                            },
                            "srv": {
                              "$ref": "#/definitions/srvType",
                              "metadata": {
                                "description": "Optional. Array of SRV records."
                              }
                            },
                            "txt": {
                              "$ref": "#/definitions/txtType",
                              "metadata": {
                                "description": "Optional. Array of TXT records."
                              }
                            },
                            "virtualNetworkLinks": {
                              "$ref": "#/definitions/virtualNetworkLinkType",
                              "metadata": {
                                "description": "Optional. Array of custom objects describing vNet links of the DNS zone. Each object should contain properties 'virtualNetworkResourceId' and 'registrationEnabled'. The 'vnetResourceId' is a resource ID of a vNet to link, 'registrationEnabled' (bool) enables automatic DNS registration in the zone for the linked vNet."
                              }
                            },
                            "location": {
                              "type": "string",
                              "defaultValue": "global",
                              "metadata": {
                                "description": "Optional. The location of the PrivateDNSZone. Should be global."
                              }
                            },
                            "roleAssignments": {
                              "$ref": "#/definitions/roleAssignmentType",
                              "metadata": {
                                "description": "Optional. Array of role assignments to create."
                              }
                            },
                            "tags": {
                              "type": "object",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Tags of the resource."
                              }
                            },
                            "lock": {
                              "$ref": "#/definitions/lockType",
                              "metadata": {
                                "description": "Optional. The lock settings of the service."
                              }
                            },
                            "enableTelemetry": {
                              "type": "bool",
                              "defaultValue": true,
                              "metadata": {
                                "description": "Optional. Enable/Disable usage telemetry for module."
                              }
                            }
                          },
                          "variables": {
                            "copy": [
                              {
                                "name": "formattedRoleAssignments",
                                "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]",
                                "input": "[union(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')], createObject('roleDefinitionId', coalesce(tryGet(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName), if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName)))))]"
                              }
                            ],
                            "builtInRoleNames": {
                              "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                              "Network Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4d97b98b-1d4f-4787-a291-c67834d212e7')]",
                              "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                              "Private DNS Zone Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b12aa53e-6015-4669-85d0-8515ebb3ae7f')]",
                              "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                              "Role Based Access Control Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]"
                            }
                          },
                          "resources": {
                            "avmTelemetry": {
                              "condition": "[parameters('enableTelemetry')]",
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2024-03-01",
                              "name": "[format('46d3xbcp.res.network-privatednszone.{0}.{1}', replace('0.6.0', '.', '-'), substring(uniqueString(deployment().name, parameters('location')), 0, 4))]",
                              "properties": {
                                "mode": "Incremental",
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "resources": [],
                                  "outputs": {
                                    "telemetry": {
                                      "type": "String",
                                      "value": "For more information, see https://aka.ms/avm/TelemetryInfo"
                                    }
                                  }
                                }
                              }
                            },
                            "privateDnsZone": {
                              "type": "Microsoft.Network/privateDnsZones",
                              "apiVersion": "2020-06-01",
                              "name": "[parameters('name')]",
                              "location": "[parameters('location')]",
                              "tags": "[parameters('tags')]"
                            },
                            "privateDnsZone_lock": {
                              "condition": "[and(not(empty(coalesce(parameters('lock'), createObject()))), not(equals(tryGet(parameters('lock'), 'kind'), 'None')))]",
                              "type": "Microsoft.Authorization/locks",
                              "apiVersion": "2020-05-01",
                              "scope": "[format('Microsoft.Network/privateDnsZones/{0}', parameters('name'))]",
                              "name": "[coalesce(tryGet(parameters('lock'), 'name'), format('lock-{0}', parameters('name')))]",
                              "properties": {
                                "level": "[coalesce(tryGet(parameters('lock'), 'kind'), '')]",
                                "notes": "[if(equals(tryGet(parameters('lock'), 'kind'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot delete or modify the resource or child resources.')]"
                              },
                              "dependsOn": [
                                "privateDnsZone"
                              ]
                            },
                            "privateDnsZone_roleAssignments": {
                              "copy": {
                                "name": "privateDnsZone_roleAssignments",
                                "count": "[length(coalesce(variables('formattedRoleAssignments'), createArray()))]"
                              },
                              "type": "Microsoft.Authorization/roleAssignments",
                              "apiVersion": "2022-04-01",
                              "scope": "[format('Microsoft.Network/privateDnsZones/{0}', parameters('name'))]",
                              "name": "[coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'name'), guid(resourceId('Microsoft.Network/privateDnsZones', parameters('name')), coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId, coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId))]",
                              "properties": {
                                "roleDefinitionId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId]",
                                "principalId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId]",
                                "description": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'description')]",
                                "principalType": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'principalType')]",
                                "condition": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition')]",
                                "conditionVersion": "[if(not(empty(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                                "delegatedManagedIdentityResourceId": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
                              },
                              "dependsOn": [
                                "privateDnsZone"
                              ]
                            },
                            "privateDnsZone_A": {
                              "copy": {
                                "name": "privateDnsZone_A",
                                "count": "[length(coalesce(parameters('a'), createArray()))]"
                              },
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "[format('{0}-PrivateDnsZone-ARecord-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "privateDnsZoneName": {
                                    "value": "[parameters('name')]"
                                  },
                                  "name": {
                                    "value": "[coalesce(parameters('a'), createArray())[copyIndex()].name]"
                                  },
                                  "aRecords": {
                                    "value": "[tryGet(coalesce(parameters('a'), createArray())[copyIndex()], 'aRecords')]"
                                  },
                                  "metadata": {
                                    "value": "[tryGet(coalesce(parameters('a'), createArray())[copyIndex()], 'metadata')]"
                                  },
                                  "ttl": {
                                    "value": "[coalesce(tryGet(coalesce(parameters('a'), createArray())[copyIndex()], 'ttl'), 3600)]"
                                  },
                                  "roleAssignments": {
                                    "value": "[tryGet(coalesce(parameters('a'), createArray())[copyIndex()], 'roleAssignments')]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "languageVersion": "2.0",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.29.47.4906",
                                      "templateHash": "1641889417618452692"
                                    },
                                    "name": "Private DNS Zone A record",
                                    "description": "This module deploys a Private DNS Zone A record.",
                                    "owner": "Azure/module-maintainers"
                                  },
                                  "definitions": {
                                    "roleAssignmentType": {
                                      "type": "array",
                                      "items": {
                                        "type": "object",
                                        "properties": {
                                          "name": {
                                            "type": "string",
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. The name (as GUID) of the role assignment. If not provided, a GUID will be generated."
                                            }
                                          },
                                          "roleDefinitionIdOrName": {
                                            "type": "string",
                                            "metadata": {
                                              "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                                            }
                                          },
                                          "principalId": {
                                            "type": "string",
                                            "metadata": {
                                              "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                                            }
                                          },
                                          "principalType": {
                                            "type": "string",
                                            "allowedValues": [
                                              "Device",
                                              "ForeignGroup",
                                              "Group",
                                              "ServicePrincipal",
                                              "User"
                                            ],
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. The principal type of the assigned principal ID."
                                            }
                                          },
                                          "description": {
                                            "type": "string",
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. The description of the role assignment."
                                            }
                                          },
                                          "condition": {
                                            "type": "string",
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                                            }
                                          },
                                          "conditionVersion": {
                                            "type": "string",
                                            "allowedValues": [
                                              "2.0"
                                            ],
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. Version of the condition."
                                            }
                                          },
                                          "delegatedManagedIdentityResourceId": {
                                            "type": "string",
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. The Resource Id of the delegated managed identity resource."
                                            }
                                          }
                                        }
                                      },
                                      "nullable": true
                                    }
                                  },
                                  "parameters": {
                                    "privateDnsZoneName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Conditional. The name of the parent Private DNS zone. Required if the template is used in a standalone deployment."
                                      }
                                    },
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The name of the A record."
                                      }
                                    },
                                    "aRecords": {
                                      "type": "array",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. The list of A records in the record set."
                                      }
                                    },
                                    "metadata": {
                                      "type": "object",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. The metadata attached to the record set."
                                      }
                                    },
                                    "ttl": {
                                      "type": "int",
                                      "defaultValue": 3600,
                                      "metadata": {
                                        "description": "Optional. The TTL (time-to-live) of the records in the record set."
                                      }
                                    },
                                    "roleAssignments": {
                                      "$ref": "#/definitions/roleAssignmentType",
                                      "metadata": {
                                        "description": "Optional. Array of role assignments to create."
                                      }
                                    }
                                  },
                                  "variables": {
                                    "copy": [
                                      {
                                        "name": "formattedRoleAssignments",
                                        "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]",
                                        "input": "[union(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')], createObject('roleDefinitionId', coalesce(tryGet(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName), if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName)))))]"
                                      }
                                    ],
                                    "builtInRoleNames": {
                                      "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                                      "Private DNS Zone Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b12aa53e-6015-4669-85d0-8515ebb3ae7f')]",
                                      "Network Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4d97b98b-1d4f-4787-a291-c67834d212e7')]",
                                      "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                                      "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                                      "Role Based Access Control Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]",
                                      "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]"
                                    }
                                  },
                                  "resources": {
                                    "privateDnsZone": {
                                      "existing": true,
                                      "type": "Microsoft.Network/privateDnsZones",
                                      "apiVersion": "2020-06-01",
                                      "name": "[parameters('privateDnsZoneName')]"
                                    },
                                    "A": {
                                      "type": "Microsoft.Network/privateDnsZones/A",
                                      "apiVersion": "2020-06-01",
                                      "name": "[format('{0}/{1}', parameters('privateDnsZoneName'), parameters('name'))]",
                                      "properties": {
                                        "aRecords": "[parameters('aRecords')]",
                                        "metadata": "[parameters('metadata')]",
                                        "ttl": "[parameters('ttl')]"
                                      },
                                      "dependsOn": [
                                        "privateDnsZone"
                                      ]
                                    },
                                    "A_roleAssignments": {
                                      "copy": {
                                        "name": "A_roleAssignments",
                                        "count": "[length(coalesce(variables('formattedRoleAssignments'), createArray()))]"
                                      },
                                      "type": "Microsoft.Authorization/roleAssignments",
                                      "apiVersion": "2022-04-01",
                                      "scope": "[format('Microsoft.Network/privateDnsZones/{0}/A/{1}', parameters('privateDnsZoneName'), parameters('name'))]",
                                      "name": "[coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'name'), guid(resourceId('Microsoft.Network/privateDnsZones/A', parameters('privateDnsZoneName'), parameters('name')), coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId, coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId))]",
                                      "properties": {
                                        "roleDefinitionId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId]",
                                        "principalId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId]",
                                        "description": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'description')]",
                                        "principalType": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'principalType')]",
                                        "condition": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition')]",
                                        "conditionVersion": "[if(not(empty(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                                        "delegatedManagedIdentityResourceId": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
                                      },
                                      "dependsOn": [
                                        "A"
                                      ]
                                    }
                                  },
                                  "outputs": {
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the deployed A record."
                                      },
                                      "value": "[parameters('name')]"
                                    },
                                    "resourceId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource ID of the deployed A record."
                                      },
                                      "value": "[resourceId('Microsoft.Network/privateDnsZones/A', parameters('privateDnsZoneName'), parameters('name'))]"
                                    },
                                    "resourceGroupName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource group of the deployed A record."
                                      },
                                      "value": "[resourceGroup().name]"
                                    }
                                  }
                                }
                              },
                              "dependsOn": [
                                "privateDnsZone"
                              ]
                            },
                            "privateDnsZone_AAAA": {
                              "copy": {
                                "name": "privateDnsZone_AAAA",
                                "count": "[length(coalesce(parameters('aaaa'), createArray()))]"
                              },
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "[format('{0}-PrivateDnsZone-AAAARecord-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "privateDnsZoneName": {
                                    "value": "[parameters('name')]"
                                  },
                                  "name": {
                                    "value": "[coalesce(parameters('aaaa'), createArray())[copyIndex()].name]"
                                  },
                                  "aaaaRecords": {
                                    "value": "[tryGet(coalesce(parameters('aaaa'), createArray())[copyIndex()], 'aaaaRecords')]"
                                  },
                                  "metadata": {
                                    "value": "[tryGet(coalesce(parameters('aaaa'), createArray())[copyIndex()], 'metadata')]"
                                  },
                                  "ttl": {
                                    "value": "[coalesce(tryGet(coalesce(parameters('aaaa'), createArray())[copyIndex()], 'ttl'), 3600)]"
                                  },
                                  "roleAssignments": {
                                    "value": "[tryGet(coalesce(parameters('aaaa'), createArray())[copyIndex()], 'roleAssignments')]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "languageVersion": "2.0",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.29.47.4906",
                                      "templateHash": "17163414995652446126"
                                    },
                                    "name": "Private DNS Zone AAAA record",
                                    "description": "This module deploys a Private DNS Zone AAAA record.",
                                    "owner": "Azure/module-maintainers"
                                  },
                                  "definitions": {
                                    "roleAssignmentType": {
                                      "type": "array",
                                      "items": {
                                        "type": "object",
                                        "properties": {
                                          "name": {
                                            "type": "string",
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. The name (as GUID) of the role assignment. If not provided, a GUID will be generated."
                                            }
                                          },
                                          "roleDefinitionIdOrName": {
                                            "type": "string",
                                            "metadata": {
                                              "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                                            }
                                          },
                                          "principalId": {
                                            "type": "string",
                                            "metadata": {
                                              "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                                            }
                                          },
                                          "principalType": {
                                            "type": "string",
                                            "allowedValues": [
                                              "Device",
                                              "ForeignGroup",
                                              "Group",
                                              "ServicePrincipal",
                                              "User"
                                            ],
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. The principal type of the assigned principal ID."
                                            }
                                          },
                                          "description": {
                                            "type": "string",
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. The description of the role assignment."
                                            }
                                          },
                                          "condition": {
                                            "type": "string",
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                                            }
                                          },
                                          "conditionVersion": {
                                            "type": "string",
                                            "allowedValues": [
                                              "2.0"
                                            ],
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. Version of the condition."
                                            }
                                          },
                                          "delegatedManagedIdentityResourceId": {
                                            "type": "string",
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. The Resource Id of the delegated managed identity resource."
                                            }
                                          }
                                        }
                                      },
                                      "nullable": true
                                    }
                                  },
                                  "parameters": {
                                    "privateDnsZoneName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Conditional. The name of the parent Private DNS zone. Required if the template is used in a standalone deployment."
                                      }
                                    },
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The name of the AAAA record."
                                      }
                                    },
                                    "aaaaRecords": {
                                      "type": "array",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. The list of AAAA records in the record set."
                                      }
                                    },
                                    "metadata": {
                                      "type": "object",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. The metadata attached to the record set."
                                      }
                                    },
                                    "ttl": {
                                      "type": "int",
                                      "defaultValue": 3600,
                                      "metadata": {
                                        "description": "Optional. The TTL (time-to-live) of the records in the record set."
                                      }
                                    },
                                    "roleAssignments": {
                                      "$ref": "#/definitions/roleAssignmentType",
                                      "metadata": {
                                        "description": "Optional. Array of role assignments to create."
                                      }
                                    }
                                  },
                                  "variables": {
                                    "copy": [
                                      {
                                        "name": "formattedRoleAssignments",
                                        "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]",
                                        "input": "[union(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')], createObject('roleDefinitionId', coalesce(tryGet(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName), if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName)))))]"
                                      }
                                    ],
                                    "builtInRoleNames": {
                                      "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                                      "Private DNS Zone Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b12aa53e-6015-4669-85d0-8515ebb3ae7f')]",
                                      "Network Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4d97b98b-1d4f-4787-a291-c67834d212e7')]",
                                      "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                                      "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                                      "Role Based Access Control Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]",
                                      "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]"
                                    }
                                  },
                                  "resources": {
                                    "privateDnsZone": {
                                      "existing": true,
                                      "type": "Microsoft.Network/privateDnsZones",
                                      "apiVersion": "2020-06-01",
                                      "name": "[parameters('privateDnsZoneName')]"
                                    },
                                    "AAAA": {
                                      "type": "Microsoft.Network/privateDnsZones/AAAA",
                                      "apiVersion": "2020-06-01",
                                      "name": "[format('{0}/{1}', parameters('privateDnsZoneName'), parameters('name'))]",
                                      "properties": {
                                        "aaaaRecords": "[parameters('aaaaRecords')]",
                                        "metadata": "[parameters('metadata')]",
                                        "ttl": "[parameters('ttl')]"
                                      },
                                      "dependsOn": [
                                        "privateDnsZone"
                                      ]
                                    },
                                    "AAAA_roleAssignments": {
                                      "copy": {
                                        "name": "AAAA_roleAssignments",
                                        "count": "[length(coalesce(variables('formattedRoleAssignments'), createArray()))]"
                                      },
                                      "type": "Microsoft.Authorization/roleAssignments",
                                      "apiVersion": "2022-04-01",
                                      "scope": "[format('Microsoft.Network/privateDnsZones/{0}/AAAA/{1}', parameters('privateDnsZoneName'), parameters('name'))]",
                                      "name": "[coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'name'), guid(resourceId('Microsoft.Network/privateDnsZones/AAAA', parameters('privateDnsZoneName'), parameters('name')), coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId, coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId))]",
                                      "properties": {
                                        "roleDefinitionId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId]",
                                        "principalId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId]",
                                        "description": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'description')]",
                                        "principalType": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'principalType')]",
                                        "condition": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition')]",
                                        "conditionVersion": "[if(not(empty(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                                        "delegatedManagedIdentityResourceId": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
                                      },
                                      "dependsOn": [
                                        "AAAA"
                                      ]
                                    }
                                  },
                                  "outputs": {
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the deployed AAAA record."
                                      },
                                      "value": "[parameters('name')]"
                                    },
                                    "resourceId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource ID of the deployed AAAA record."
                                      },
                                      "value": "[resourceId('Microsoft.Network/privateDnsZones/AAAA', parameters('privateDnsZoneName'), parameters('name'))]"
                                    },
                                    "resourceGroupName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource group of the deployed AAAA record."
                                      },
                                      "value": "[resourceGroup().name]"
                                    }
                                  }
                                }
                              },
                              "dependsOn": [
                                "privateDnsZone"
                              ]
                            },
                            "privateDnsZone_CNAME": {
                              "copy": {
                                "name": "privateDnsZone_CNAME",
                                "count": "[length(coalesce(parameters('cname'), createArray()))]"
                              },
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "[format('{0}-PrivateDnsZone-CNAMERecord-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "privateDnsZoneName": {
                                    "value": "[parameters('name')]"
                                  },
                                  "name": {
                                    "value": "[coalesce(parameters('cname'), createArray())[copyIndex()].name]"
                                  },
                                  "cnameRecord": {
                                    "value": "[tryGet(coalesce(parameters('cname'), createArray())[copyIndex()], 'cnameRecord')]"
                                  },
                                  "metadata": {
                                    "value": "[tryGet(coalesce(parameters('cname'), createArray())[copyIndex()], 'metadata')]"
                                  },
                                  "ttl": {
                                    "value": "[coalesce(tryGet(coalesce(parameters('cname'), createArray())[copyIndex()], 'ttl'), 3600)]"
                                  },
                                  "roleAssignments": {
                                    "value": "[tryGet(coalesce(parameters('cname'), createArray())[copyIndex()], 'roleAssignments')]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "languageVersion": "2.0",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.29.47.4906",
                                      "templateHash": "2493714129104385633"
                                    },
                                    "name": "Private DNS Zone CNAME record",
                                    "description": "This module deploys a Private DNS Zone CNAME record.",
                                    "owner": "Azure/module-maintainers"
                                  },
                                  "definitions": {
                                    "roleAssignmentType": {
                                      "type": "array",
                                      "items": {
                                        "type": "object",
                                        "properties": {
                                          "name": {
                                            "type": "string",
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. The name (as GUID) of the role assignment. If not provided, a GUID will be generated."
                                            }
                                          },
                                          "roleDefinitionIdOrName": {
                                            "type": "string",
                                            "metadata": {
                                              "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                                            }
                                          },
                                          "principalId": {
                                            "type": "string",
                                            "metadata": {
                                              "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                                            }
                                          },
                                          "principalType": {
                                            "type": "string",
                                            "allowedValues": [
                                              "Device",
                                              "ForeignGroup",
                                              "Group",
                                              "ServicePrincipal",
                                              "User"
                                            ],
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. The principal type of the assigned principal ID."
                                            }
                                          },
                                          "description": {
                                            "type": "string",
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. The description of the role assignment."
                                            }
                                          },
                                          "condition": {
                                            "type": "string",
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                                            }
                                          },
                                          "conditionVersion": {
                                            "type": "string",
                                            "allowedValues": [
                                              "2.0"
                                            ],
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. Version of the condition."
                                            }
                                          },
                                          "delegatedManagedIdentityResourceId": {
                                            "type": "string",
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. The Resource Id of the delegated managed identity resource."
                                            }
                                          }
                                        }
                                      },
                                      "nullable": true
                                    }
                                  },
                                  "parameters": {
                                    "privateDnsZoneName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Conditional. The name of the parent Private DNS zone. Required if the template is used in a standalone deployment."
                                      }
                                    },
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The name of the CNAME record."
                                      }
                                    },
                                    "cnameRecord": {
                                      "type": "object",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. A CNAME record."
                                      }
                                    },
                                    "metadata": {
                                      "type": "object",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. The metadata attached to the record set."
                                      }
                                    },
                                    "ttl": {
                                      "type": "int",
                                      "defaultValue": 3600,
                                      "metadata": {
                                        "description": "Optional. The TTL (time-to-live) of the records in the record set."
                                      }
                                    },
                                    "roleAssignments": {
                                      "$ref": "#/definitions/roleAssignmentType",
                                      "metadata": {
                                        "description": "Optional. Array of role assignments to create."
                                      }
                                    }
                                  },
                                  "variables": {
                                    "copy": [
                                      {
                                        "name": "formattedRoleAssignments",
                                        "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]",
                                        "input": "[union(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')], createObject('roleDefinitionId', coalesce(tryGet(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName), if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName)))))]"
                                      }
                                    ],
                                    "builtInRoleNames": {
                                      "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                                      "Private DNS Zone Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b12aa53e-6015-4669-85d0-8515ebb3ae7f')]",
                                      "Network Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4d97b98b-1d4f-4787-a291-c67834d212e7')]",
                                      "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                                      "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                                      "Role Based Access Control Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]",
                                      "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]"
                                    }
                                  },
                                  "resources": {
                                    "privateDnsZone": {
                                      "existing": true,
                                      "type": "Microsoft.Network/privateDnsZones",
                                      "apiVersion": "2020-06-01",
                                      "name": "[parameters('privateDnsZoneName')]"
                                    },
                                    "CNAME": {
                                      "type": "Microsoft.Network/privateDnsZones/CNAME",
                                      "apiVersion": "2020-06-01",
                                      "name": "[format('{0}/{1}', parameters('privateDnsZoneName'), parameters('name'))]",
                                      "properties": {
                                        "cnameRecord": "[parameters('cnameRecord')]",
                                        "metadata": "[parameters('metadata')]",
                                        "ttl": "[parameters('ttl')]"
                                      },
                                      "dependsOn": [
                                        "privateDnsZone"
                                      ]
                                    },
                                    "CNAME_roleAssignments": {
                                      "copy": {
                                        "name": "CNAME_roleAssignments",
                                        "count": "[length(coalesce(variables('formattedRoleAssignments'), createArray()))]"
                                      },
                                      "type": "Microsoft.Authorization/roleAssignments",
                                      "apiVersion": "2022-04-01",
                                      "scope": "[format('Microsoft.Network/privateDnsZones/{0}/CNAME/{1}', parameters('privateDnsZoneName'), parameters('name'))]",
                                      "name": "[coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'name'), guid(resourceId('Microsoft.Network/privateDnsZones/CNAME', parameters('privateDnsZoneName'), parameters('name')), coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId, coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId))]",
                                      "properties": {
                                        "roleDefinitionId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId]",
                                        "principalId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId]",
                                        "description": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'description')]",
                                        "principalType": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'principalType')]",
                                        "condition": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition')]",
                                        "conditionVersion": "[if(not(empty(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                                        "delegatedManagedIdentityResourceId": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
                                      },
                                      "dependsOn": [
                                        "CNAME"
                                      ]
                                    }
                                  },
                                  "outputs": {
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the deployed CNAME record."
                                      },
                                      "value": "[parameters('name')]"
                                    },
                                    "resourceId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource ID of the deployed CNAME record."
                                      },
                                      "value": "[resourceId('Microsoft.Network/privateDnsZones/CNAME', parameters('privateDnsZoneName'), parameters('name'))]"
                                    },
                                    "resourceGroupName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource group of the deployed CNAME record."
                                      },
                                      "value": "[resourceGroup().name]"
                                    }
                                  }
                                }
                              },
                              "dependsOn": [
                                "privateDnsZone"
                              ]
                            },
                            "privateDnsZone_MX": {
                              "copy": {
                                "name": "privateDnsZone_MX",
                                "count": "[length(coalesce(parameters('mx'), createArray()))]"
                              },
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "[format('{0}-PrivateDnsZone-MXRecord-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "privateDnsZoneName": {
                                    "value": "[parameters('name')]"
                                  },
                                  "name": {
                                    "value": "[coalesce(parameters('mx'), createArray())[copyIndex()].name]"
                                  },
                                  "metadata": {
                                    "value": "[tryGet(coalesce(parameters('mx'), createArray())[copyIndex()], 'metadata')]"
                                  },
                                  "mxRecords": {
                                    "value": "[tryGet(coalesce(parameters('mx'), createArray())[copyIndex()], 'mxRecords')]"
                                  },
                                  "ttl": {
                                    "value": "[coalesce(tryGet(coalesce(parameters('mx'), createArray())[copyIndex()], 'ttl'), 3600)]"
                                  },
                                  "roleAssignments": {
                                    "value": "[tryGet(coalesce(parameters('mx'), createArray())[copyIndex()], 'roleAssignments')]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "languageVersion": "2.0",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.29.47.4906",
                                      "templateHash": "10928449924272756679"
                                    },
                                    "name": "Private DNS Zone MX record",
                                    "description": "This module deploys a Private DNS Zone MX record.",
                                    "owner": "Azure/module-maintainers"
                                  },
                                  "definitions": {
                                    "roleAssignmentType": {
                                      "type": "array",
                                      "items": {
                                        "type": "object",
                                        "properties": {
                                          "name": {
                                            "type": "string",
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. The name (as GUID) of the role assignment. If not provided, a GUID will be generated."
                                            }
                                          },
                                          "roleDefinitionIdOrName": {
                                            "type": "string",
                                            "metadata": {
                                              "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                                            }
                                          },
                                          "principalId": {
                                            "type": "string",
                                            "metadata": {
                                              "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                                            }
                                          },
                                          "principalType": {
                                            "type": "string",
                                            "allowedValues": [
                                              "Device",
                                              "ForeignGroup",
                                              "Group",
                                              "ServicePrincipal",
                                              "User"
                                            ],
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. The principal type of the assigned principal ID."
                                            }
                                          },
                                          "description": {
                                            "type": "string",
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. The description of the role assignment."
                                            }
                                          },
                                          "condition": {
                                            "type": "string",
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                                            }
                                          },
                                          "conditionVersion": {
                                            "type": "string",
                                            "allowedValues": [
                                              "2.0"
                                            ],
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. Version of the condition."
                                            }
                                          },
                                          "delegatedManagedIdentityResourceId": {
                                            "type": "string",
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. The Resource Id of the delegated managed identity resource."
                                            }
                                          }
                                        }
                                      },
                                      "nullable": true
                                    }
                                  },
                                  "parameters": {
                                    "privateDnsZoneName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Conditional. The name of the parent Private DNS zone. Required if the template is used in a standalone deployment."
                                      }
                                    },
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The name of the MX record."
                                      }
                                    },
                                    "metadata": {
                                      "type": "object",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. The metadata attached to the record set."
                                      }
                                    },
                                    "mxRecords": {
                                      "type": "array",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. The list of MX records in the record set."
                                      }
                                    },
                                    "ttl": {
                                      "type": "int",
                                      "defaultValue": 3600,
                                      "metadata": {
                                        "description": "Optional. The TTL (time-to-live) of the records in the record set."
                                      }
                                    },
                                    "roleAssignments": {
                                      "$ref": "#/definitions/roleAssignmentType",
                                      "metadata": {
                                        "description": "Optional. Array of role assignments to create."
                                      }
                                    }
                                  },
                                  "variables": {
                                    "copy": [
                                      {
                                        "name": "formattedRoleAssignments",
                                        "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]",
                                        "input": "[union(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')], createObject('roleDefinitionId', coalesce(tryGet(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName), if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName)))))]"
                                      }
                                    ],
                                    "builtInRoleNames": {
                                      "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                                      "Private DNS Zone Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b12aa53e-6015-4669-85d0-8515ebb3ae7f')]",
                                      "Network Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4d97b98b-1d4f-4787-a291-c67834d212e7')]",
                                      "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                                      "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                                      "Role Based Access Control Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]",
                                      "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]"
                                    }
                                  },
                                  "resources": {
                                    "privateDnsZone": {
                                      "existing": true,
                                      "type": "Microsoft.Network/privateDnsZones",
                                      "apiVersion": "2020-06-01",
                                      "name": "[parameters('privateDnsZoneName')]"
                                    },
                                    "MX": {
                                      "type": "Microsoft.Network/privateDnsZones/MX",
                                      "apiVersion": "2020-06-01",
                                      "name": "[format('{0}/{1}', parameters('privateDnsZoneName'), parameters('name'))]",
                                      "properties": {
                                        "metadata": "[parameters('metadata')]",
                                        "mxRecords": "[parameters('mxRecords')]",
                                        "ttl": "[parameters('ttl')]"
                                      },
                                      "dependsOn": [
                                        "privateDnsZone"
                                      ]
                                    },
                                    "MX_roleAssignments": {
                                      "copy": {
                                        "name": "MX_roleAssignments",
                                        "count": "[length(coalesce(variables('formattedRoleAssignments'), createArray()))]"
                                      },
                                      "type": "Microsoft.Authorization/roleAssignments",
                                      "apiVersion": "2022-04-01",
                                      "scope": "[format('Microsoft.Network/privateDnsZones/{0}/MX/{1}', parameters('privateDnsZoneName'), parameters('name'))]",
                                      "name": "[coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'name'), guid(resourceId('Microsoft.Network/privateDnsZones/MX', parameters('privateDnsZoneName'), parameters('name')), coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId, coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId))]",
                                      "properties": {
                                        "roleDefinitionId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId]",
                                        "principalId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId]",
                                        "description": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'description')]",
                                        "principalType": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'principalType')]",
                                        "condition": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition')]",
                                        "conditionVersion": "[if(not(empty(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                                        "delegatedManagedIdentityResourceId": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
                                      },
                                      "dependsOn": [
                                        "MX"
                                      ]
                                    }
                                  },
                                  "outputs": {
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the deployed MX record."
                                      },
                                      "value": "[parameters('name')]"
                                    },
                                    "resourceId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource ID of the deployed MX record."
                                      },
                                      "value": "[resourceId('Microsoft.Network/privateDnsZones/MX', parameters('privateDnsZoneName'), parameters('name'))]"
                                    },
                                    "resourceGroupName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource group of the deployed MX record."
                                      },
                                      "value": "[resourceGroup().name]"
                                    }
                                  }
                                }
                              },
                              "dependsOn": [
                                "privateDnsZone"
                              ]
                            },
                            "privateDnsZone_PTR": {
                              "copy": {
                                "name": "privateDnsZone_PTR",
                                "count": "[length(coalesce(parameters('ptr'), createArray()))]"
                              },
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "[format('{0}-PrivateDnsZone-PTRRecord-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "privateDnsZoneName": {
                                    "value": "[parameters('name')]"
                                  },
                                  "name": {
                                    "value": "[coalesce(parameters('ptr'), createArray())[copyIndex()].name]"
                                  },
                                  "metadata": {
                                    "value": "[tryGet(coalesce(parameters('ptr'), createArray())[copyIndex()], 'metadata')]"
                                  },
                                  "ptrRecords": {
                                    "value": "[tryGet(coalesce(parameters('ptr'), createArray())[copyIndex()], 'ptrRecords')]"
                                  },
                                  "ttl": {
                                    "value": "[coalesce(tryGet(coalesce(parameters('ptr'), createArray())[copyIndex()], 'ttl'), 3600)]"
                                  },
                                  "roleAssignments": {
                                    "value": "[tryGet(coalesce(parameters('ptr'), createArray())[copyIndex()], 'roleAssignments')]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "languageVersion": "2.0",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.29.47.4906",
                                      "templateHash": "13191587152357386110"
                                    },
                                    "name": "Private DNS Zone PTR record",
                                    "description": "This module deploys a Private DNS Zone PTR record.",
                                    "owner": "Azure/module-maintainers"
                                  },
                                  "definitions": {
                                    "roleAssignmentType": {
                                      "type": "array",
                                      "items": {
                                        "type": "object",
                                        "properties": {
                                          "name": {
                                            "type": "string",
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. The name (as GUID) of the role assignment. If not provided, a GUID will be generated."
                                            }
                                          },
                                          "roleDefinitionIdOrName": {
                                            "type": "string",
                                            "metadata": {
                                              "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                                            }
                                          },
                                          "principalId": {
                                            "type": "string",
                                            "metadata": {
                                              "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                                            }
                                          },
                                          "principalType": {
                                            "type": "string",
                                            "allowedValues": [
                                              "Device",
                                              "ForeignGroup",
                                              "Group",
                                              "ServicePrincipal",
                                              "User"
                                            ],
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. The principal type of the assigned principal ID."
                                            }
                                          },
                                          "description": {
                                            "type": "string",
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. The description of the role assignment."
                                            }
                                          },
                                          "condition": {
                                            "type": "string",
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                                            }
                                          },
                                          "conditionVersion": {
                                            "type": "string",
                                            "allowedValues": [
                                              "2.0"
                                            ],
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. Version of the condition."
                                            }
                                          },
                                          "delegatedManagedIdentityResourceId": {
                                            "type": "string",
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. The Resource Id of the delegated managed identity resource."
                                            }
                                          }
                                        }
                                      },
                                      "nullable": true
                                    }
                                  },
                                  "parameters": {
                                    "privateDnsZoneName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Conditional. The name of the parent Private DNS zone. Required if the template is used in a standalone deployment."
                                      }
                                    },
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The name of the PTR record."
                                      }
                                    },
                                    "metadata": {
                                      "type": "object",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. The metadata attached to the record set."
                                      }
                                    },
                                    "ptrRecords": {
                                      "type": "array",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. The list of PTR records in the record set."
                                      }
                                    },
                                    "ttl": {
                                      "type": "int",
                                      "defaultValue": 3600,
                                      "metadata": {
                                        "description": "Optional. The TTL (time-to-live) of the records in the record set."
                                      }
                                    },
                                    "roleAssignments": {
                                      "$ref": "#/definitions/roleAssignmentType",
                                      "metadata": {
                                        "description": "Optional. Array of role assignments to create."
                                      }
                                    }
                                  },
                                  "variables": {
                                    "copy": [
                                      {
                                        "name": "formattedRoleAssignments",
                                        "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]",
                                        "input": "[union(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')], createObject('roleDefinitionId', coalesce(tryGet(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName), if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName)))))]"
                                      }
                                    ],
                                    "builtInRoleNames": {
                                      "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                                      "Private DNS Zone Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b12aa53e-6015-4669-85d0-8515ebb3ae7f')]",
                                      "Network Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4d97b98b-1d4f-4787-a291-c67834d212e7')]",
                                      "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                                      "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                                      "Role Based Access Control Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]",
                                      "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]"
                                    }
                                  },
                                  "resources": {
                                    "privateDnsZone": {
                                      "existing": true,
                                      "type": "Microsoft.Network/privateDnsZones",
                                      "apiVersion": "2020-06-01",
                                      "name": "[parameters('privateDnsZoneName')]"
                                    },
                                    "PTR": {
                                      "type": "Microsoft.Network/privateDnsZones/PTR",
                                      "apiVersion": "2020-06-01",
                                      "name": "[format('{0}/{1}', parameters('privateDnsZoneName'), parameters('name'))]",
                                      "properties": {
                                        "metadata": "[parameters('metadata')]",
                                        "ptrRecords": "[parameters('ptrRecords')]",
                                        "ttl": "[parameters('ttl')]"
                                      },
                                      "dependsOn": [
                                        "privateDnsZone"
                                      ]
                                    },
                                    "PTR_roleAssignments": {
                                      "copy": {
                                        "name": "PTR_roleAssignments",
                                        "count": "[length(coalesce(variables('formattedRoleAssignments'), createArray()))]"
                                      },
                                      "type": "Microsoft.Authorization/roleAssignments",
                                      "apiVersion": "2022-04-01",
                                      "scope": "[format('Microsoft.Network/privateDnsZones/{0}/PTR/{1}', parameters('privateDnsZoneName'), parameters('name'))]",
                                      "name": "[coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'name'), guid(resourceId('Microsoft.Network/privateDnsZones/PTR', parameters('privateDnsZoneName'), parameters('name')), coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId, coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId))]",
                                      "properties": {
                                        "roleDefinitionId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId]",
                                        "principalId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId]",
                                        "description": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'description')]",
                                        "principalType": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'principalType')]",
                                        "condition": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition')]",
                                        "conditionVersion": "[if(not(empty(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                                        "delegatedManagedIdentityResourceId": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
                                      },
                                      "dependsOn": [
                                        "PTR"
                                      ]
                                    }
                                  },
                                  "outputs": {
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the deployed PTR record."
                                      },
                                      "value": "[parameters('name')]"
                                    },
                                    "resourceId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource ID of the deployed PTR record."
                                      },
                                      "value": "[resourceId('Microsoft.Network/privateDnsZones/PTR', parameters('privateDnsZoneName'), parameters('name'))]"
                                    },
                                    "resourceGroupName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource group of the deployed PTR record."
                                      },
                                      "value": "[resourceGroup().name]"
                                    }
                                  }
                                }
                              },
                              "dependsOn": [
                                "privateDnsZone"
                              ]
                            },
                            "privateDnsZone_SOA": {
                              "copy": {
                                "name": "privateDnsZone_SOA",
                                "count": "[length(coalesce(parameters('soa'), createArray()))]"
                              },
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "[format('{0}-PrivateDnsZone-SOARecord-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "privateDnsZoneName": {
                                    "value": "[parameters('name')]"
                                  },
                                  "name": {
                                    "value": "[coalesce(parameters('soa'), createArray())[copyIndex()].name]"
                                  },
                                  "metadata": {
                                    "value": "[tryGet(coalesce(parameters('soa'), createArray())[copyIndex()], 'metadata')]"
                                  },
                                  "soaRecord": {
                                    "value": "[tryGet(coalesce(parameters('soa'), createArray())[copyIndex()], 'soaRecord')]"
                                  },
                                  "ttl": {
                                    "value": "[coalesce(tryGet(coalesce(parameters('soa'), createArray())[copyIndex()], 'ttl'), 3600)]"
                                  },
                                  "roleAssignments": {
                                    "value": "[tryGet(coalesce(parameters('soa'), createArray())[copyIndex()], 'roleAssignments')]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "languageVersion": "2.0",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.29.47.4906",
                                      "templateHash": "12872700379964561295"
                                    },
                                    "name": "Private DNS Zone SOA record",
                                    "description": "This module deploys a Private DNS Zone SOA record.",
                                    "owner": "Azure/module-maintainers"
                                  },
                                  "definitions": {
                                    "roleAssignmentType": {
                                      "type": "array",
                                      "items": {
                                        "type": "object",
                                        "properties": {
                                          "name": {
                                            "type": "string",
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. The name (as GUID) of the role assignment. If not provided, a GUID will be generated."
                                            }
                                          },
                                          "roleDefinitionIdOrName": {
                                            "type": "string",
                                            "metadata": {
                                              "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                                            }
                                          },
                                          "principalId": {
                                            "type": "string",
                                            "metadata": {
                                              "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                                            }
                                          },
                                          "principalType": {
                                            "type": "string",
                                            "allowedValues": [
                                              "Device",
                                              "ForeignGroup",
                                              "Group",
                                              "ServicePrincipal",
                                              "User"
                                            ],
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. The principal type of the assigned principal ID."
                                            }
                                          },
                                          "description": {
                                            "type": "string",
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. The description of the role assignment."
                                            }
                                          },
                                          "condition": {
                                            "type": "string",
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                                            }
                                          },
                                          "conditionVersion": {
                                            "type": "string",
                                            "allowedValues": [
                                              "2.0"
                                            ],
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. Version of the condition."
                                            }
                                          },
                                          "delegatedManagedIdentityResourceId": {
                                            "type": "string",
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. The Resource Id of the delegated managed identity resource."
                                            }
                                          }
                                        }
                                      },
                                      "nullable": true
                                    }
                                  },
                                  "parameters": {
                                    "privateDnsZoneName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Conditional. The name of the parent Private DNS zone. Required if the template is used in a standalone deployment."
                                      }
                                    },
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The name of the SOA record."
                                      }
                                    },
                                    "metadata": {
                                      "type": "object",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. The metadata attached to the record set."
                                      }
                                    },
                                    "soaRecord": {
                                      "type": "object",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. A SOA record."
                                      }
                                    },
                                    "ttl": {
                                      "type": "int",
                                      "defaultValue": 3600,
                                      "metadata": {
                                        "description": "Optional. The TTL (time-to-live) of the records in the record set."
                                      }
                                    },
                                    "roleAssignments": {
                                      "$ref": "#/definitions/roleAssignmentType",
                                      "metadata": {
                                        "description": "Optional. Array of role assignments to create."
                                      }
                                    }
                                  },
                                  "variables": {
                                    "copy": [
                                      {
                                        "name": "formattedRoleAssignments",
                                        "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]",
                                        "input": "[union(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')], createObject('roleDefinitionId', coalesce(tryGet(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName), if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName)))))]"
                                      }
                                    ],
                                    "builtInRoleNames": {
                                      "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                                      "Private DNS Zone Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b12aa53e-6015-4669-85d0-8515ebb3ae7f')]",
                                      "Network Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4d97b98b-1d4f-4787-a291-c67834d212e7')]",
                                      "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                                      "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                                      "Role Based Access Control Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]",
                                      "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]"
                                    }
                                  },
                                  "resources": {
                                    "privateDnsZone": {
                                      "existing": true,
                                      "type": "Microsoft.Network/privateDnsZones",
                                      "apiVersion": "2020-06-01",
                                      "name": "[parameters('privateDnsZoneName')]"
                                    },
                                    "SOA": {
                                      "type": "Microsoft.Network/privateDnsZones/SOA",
                                      "apiVersion": "2020-06-01",
                                      "name": "[format('{0}/{1}', parameters('privateDnsZoneName'), parameters('name'))]",
                                      "properties": {
                                        "metadata": "[parameters('metadata')]",
                                        "soaRecord": "[parameters('soaRecord')]",
                                        "ttl": "[parameters('ttl')]"
                                      },
                                      "dependsOn": [
                                        "privateDnsZone"
                                      ]
                                    },
                                    "SOA_roleAssignments": {
                                      "copy": {
                                        "name": "SOA_roleAssignments",
                                        "count": "[length(coalesce(variables('formattedRoleAssignments'), createArray()))]"
                                      },
                                      "type": "Microsoft.Authorization/roleAssignments",
                                      "apiVersion": "2022-04-01",
                                      "scope": "[format('Microsoft.Network/privateDnsZones/{0}/SOA/{1}', parameters('privateDnsZoneName'), parameters('name'))]",
                                      "name": "[coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'name'), guid(resourceId('Microsoft.Network/privateDnsZones/SOA', parameters('privateDnsZoneName'), parameters('name')), coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId, coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId))]",
                                      "properties": {
                                        "roleDefinitionId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId]",
                                        "principalId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId]",
                                        "description": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'description')]",
                                        "principalType": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'principalType')]",
                                        "condition": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition')]",
                                        "conditionVersion": "[if(not(empty(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                                        "delegatedManagedIdentityResourceId": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
                                      },
                                      "dependsOn": [
                                        "SOA"
                                      ]
                                    }
                                  },
                                  "outputs": {
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the deployed SOA record."
                                      },
                                      "value": "[parameters('name')]"
                                    },
                                    "resourceId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource ID of the deployed SOA record."
                                      },
                                      "value": "[resourceId('Microsoft.Network/privateDnsZones/SOA', parameters('privateDnsZoneName'), parameters('name'))]"
                                    },
                                    "resourceGroupName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource group of the deployed SOA record."
                                      },
                                      "value": "[resourceGroup().name]"
                                    }
                                  }
                                }
                              },
                              "dependsOn": [
                                "privateDnsZone"
                              ]
                            },
                            "privateDnsZone_SRV": {
                              "copy": {
                                "name": "privateDnsZone_SRV",
                                "count": "[length(coalesce(parameters('srv'), createArray()))]"
                              },
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "[format('{0}-PrivateDnsZone-SRVRecord-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "privateDnsZoneName": {
                                    "value": "[parameters('name')]"
                                  },
                                  "name": {
                                    "value": "[coalesce(parameters('srv'), createArray())[copyIndex()].name]"
                                  },
                                  "metadata": {
                                    "value": "[tryGet(coalesce(parameters('srv'), createArray())[copyIndex()], 'metadata')]"
                                  },
                                  "srvRecords": {
                                    "value": "[tryGet(coalesce(parameters('srv'), createArray())[copyIndex()], 'srvRecords')]"
                                  },
                                  "ttl": {
                                    "value": "[coalesce(tryGet(coalesce(parameters('srv'), createArray())[copyIndex()], 'ttl'), 3600)]"
                                  },
                                  "roleAssignments": {
                                    "value": "[tryGet(coalesce(parameters('srv'), createArray())[copyIndex()], 'roleAssignments')]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "languageVersion": "2.0",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.29.47.4906",
                                      "templateHash": "12918383495773487180"
                                    },
                                    "name": "Private DNS Zone SRV record",
                                    "description": "This module deploys a Private DNS Zone SRV record.",
                                    "owner": "Azure/module-maintainers"
                                  },
                                  "definitions": {
                                    "roleAssignmentType": {
                                      "type": "array",
                                      "items": {
                                        "type": "object",
                                        "properties": {
                                          "name": {
                                            "type": "string",
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. The name (as GUID) of the role assignment. If not provided, a GUID will be generated."
                                            }
                                          },
                                          "roleDefinitionIdOrName": {
                                            "type": "string",
                                            "metadata": {
                                              "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                                            }
                                          },
                                          "principalId": {
                                            "type": "string",
                                            "metadata": {
                                              "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                                            }
                                          },
                                          "principalType": {
                                            "type": "string",
                                            "allowedValues": [
                                              "Device",
                                              "ForeignGroup",
                                              "Group",
                                              "ServicePrincipal",
                                              "User"
                                            ],
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. The principal type of the assigned principal ID."
                                            }
                                          },
                                          "description": {
                                            "type": "string",
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. The description of the role assignment."
                                            }
                                          },
                                          "condition": {
                                            "type": "string",
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                                            }
                                          },
                                          "conditionVersion": {
                                            "type": "string",
                                            "allowedValues": [
                                              "2.0"
                                            ],
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. Version of the condition."
                                            }
                                          },
                                          "delegatedManagedIdentityResourceId": {
                                            "type": "string",
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. The Resource Id of the delegated managed identity resource."
                                            }
                                          }
                                        }
                                      },
                                      "nullable": true
                                    }
                                  },
                                  "parameters": {
                                    "privateDnsZoneName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Conditional. The name of the parent Private DNS zone. Required if the template is used in a standalone deployment."
                                      }
                                    },
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The name of the SRV record."
                                      }
                                    },
                                    "metadata": {
                                      "type": "object",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. The metadata attached to the record set."
                                      }
                                    },
                                    "srvRecords": {
                                      "type": "array",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. The list of SRV records in the record set."
                                      }
                                    },
                                    "ttl": {
                                      "type": "int",
                                      "defaultValue": 3600,
                                      "metadata": {
                                        "description": "Optional. The TTL (time-to-live) of the records in the record set."
                                      }
                                    },
                                    "roleAssignments": {
                                      "$ref": "#/definitions/roleAssignmentType",
                                      "metadata": {
                                        "description": "Optional. Array of role assignments to create."
                                      }
                                    }
                                  },
                                  "variables": {
                                    "copy": [
                                      {
                                        "name": "formattedRoleAssignments",
                                        "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]",
                                        "input": "[union(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')], createObject('roleDefinitionId', coalesce(tryGet(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName), if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName)))))]"
                                      }
                                    ],
                                    "builtInRoleNames": {
                                      "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                                      "Private DNS Zone Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b12aa53e-6015-4669-85d0-8515ebb3ae7f')]",
                                      "Network Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4d97b98b-1d4f-4787-a291-c67834d212e7')]",
                                      "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                                      "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                                      "Role Based Access Control Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]",
                                      "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]"
                                    }
                                  },
                                  "resources": {
                                    "privateDnsZone": {
                                      "existing": true,
                                      "type": "Microsoft.Network/privateDnsZones",
                                      "apiVersion": "2020-06-01",
                                      "name": "[parameters('privateDnsZoneName')]"
                                    },
                                    "SRV": {
                                      "type": "Microsoft.Network/privateDnsZones/SRV",
                                      "apiVersion": "2020-06-01",
                                      "name": "[format('{0}/{1}', parameters('privateDnsZoneName'), parameters('name'))]",
                                      "properties": {
                                        "metadata": "[parameters('metadata')]",
                                        "srvRecords": "[parameters('srvRecords')]",
                                        "ttl": "[parameters('ttl')]"
                                      },
                                      "dependsOn": [
                                        "privateDnsZone"
                                      ]
                                    },
                                    "SRV_roleAssignments": {
                                      "copy": {
                                        "name": "SRV_roleAssignments",
                                        "count": "[length(coalesce(variables('formattedRoleAssignments'), createArray()))]"
                                      },
                                      "type": "Microsoft.Authorization/roleAssignments",
                                      "apiVersion": "2022-04-01",
                                      "scope": "[format('Microsoft.Network/privateDnsZones/{0}/SRV/{1}', parameters('privateDnsZoneName'), parameters('name'))]",
                                      "name": "[coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'name'), guid(resourceId('Microsoft.Network/privateDnsZones/SRV', parameters('privateDnsZoneName'), parameters('name')), coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId, coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId))]",
                                      "properties": {
                                        "roleDefinitionId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId]",
                                        "principalId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId]",
                                        "description": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'description')]",
                                        "principalType": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'principalType')]",
                                        "condition": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition')]",
                                        "conditionVersion": "[if(not(empty(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                                        "delegatedManagedIdentityResourceId": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
                                      },
                                      "dependsOn": [
                                        "SRV"
                                      ]
                                    }
                                  },
                                  "outputs": {
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the deployed SRV record."
                                      },
                                      "value": "[parameters('name')]"
                                    },
                                    "resourceId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource ID of the deployed SRV record."
                                      },
                                      "value": "[resourceId('Microsoft.Network/privateDnsZones/SRV', parameters('privateDnsZoneName'), parameters('name'))]"
                                    },
                                    "resourceGroupName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource group of the deployed SRV record."
                                      },
                                      "value": "[resourceGroup().name]"
                                    }
                                  }
                                }
                              },
                              "dependsOn": [
                                "privateDnsZone"
                              ]
                            },
                            "privateDnsZone_TXT": {
                              "copy": {
                                "name": "privateDnsZone_TXT",
                                "count": "[length(coalesce(parameters('txt'), createArray()))]"
                              },
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "[format('{0}-PrivateDnsZone-TXTRecord-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "privateDnsZoneName": {
                                    "value": "[parameters('name')]"
                                  },
                                  "name": {
                                    "value": "[coalesce(parameters('txt'), createArray())[copyIndex()].name]"
                                  },
                                  "metadata": {
                                    "value": "[tryGet(coalesce(parameters('txt'), createArray())[copyIndex()], 'metadata')]"
                                  },
                                  "txtRecords": {
                                    "value": "[tryGet(coalesce(parameters('txt'), createArray())[copyIndex()], 'txtRecords')]"
                                  },
                                  "ttl": {
                                    "value": "[coalesce(tryGet(coalesce(parameters('txt'), createArray())[copyIndex()], 'ttl'), 3600)]"
                                  },
                                  "roleAssignments": {
                                    "value": "[tryGet(coalesce(parameters('txt'), createArray())[copyIndex()], 'roleAssignments')]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "languageVersion": "2.0",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.29.47.4906",
                                      "templateHash": "128006490354221158"
                                    },
                                    "name": "Private DNS Zone TXT record",
                                    "description": "This module deploys a Private DNS Zone TXT record.",
                                    "owner": "Azure/module-maintainers"
                                  },
                                  "definitions": {
                                    "roleAssignmentType": {
                                      "type": "array",
                                      "items": {
                                        "type": "object",
                                        "properties": {
                                          "name": {
                                            "type": "string",
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. The name (as GUID) of the role assignment. If not provided, a GUID will be generated."
                                            }
                                          },
                                          "roleDefinitionIdOrName": {
                                            "type": "string",
                                            "metadata": {
                                              "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                                            }
                                          },
                                          "principalId": {
                                            "type": "string",
                                            "metadata": {
                                              "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                                            }
                                          },
                                          "principalType": {
                                            "type": "string",
                                            "allowedValues": [
                                              "Device",
                                              "ForeignGroup",
                                              "Group",
                                              "ServicePrincipal",
                                              "User"
                                            ],
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. The principal type of the assigned principal ID."
                                            }
                                          },
                                          "description": {
                                            "type": "string",
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. The description of the role assignment."
                                            }
                                          },
                                          "condition": {
                                            "type": "string",
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                                            }
                                          },
                                          "conditionVersion": {
                                            "type": "string",
                                            "allowedValues": [
                                              "2.0"
                                            ],
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. Version of the condition."
                                            }
                                          },
                                          "delegatedManagedIdentityResourceId": {
                                            "type": "string",
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. The Resource Id of the delegated managed identity resource."
                                            }
                                          }
                                        }
                                      },
                                      "nullable": true
                                    }
                                  },
                                  "parameters": {
                                    "privateDnsZoneName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Conditional. The name of the parent Private DNS zone. Required if the template is used in a standalone deployment."
                                      }
                                    },
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The name of the TXT record."
                                      }
                                    },
                                    "metadata": {
                                      "type": "object",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. The metadata attached to the record set."
                                      }
                                    },
                                    "ttl": {
                                      "type": "int",
                                      "defaultValue": 3600,
                                      "metadata": {
                                        "description": "Optional. The TTL (time-to-live) of the records in the record set."
                                      }
                                    },
                                    "txtRecords": {
                                      "type": "array",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. The list of TXT records in the record set."
                                      }
                                    },
                                    "roleAssignments": {
                                      "$ref": "#/definitions/roleAssignmentType",
                                      "metadata": {
                                        "description": "Optional. Array of role assignments to create."
                                      }
                                    }
                                  },
                                  "variables": {
                                    "copy": [
                                      {
                                        "name": "formattedRoleAssignments",
                                        "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]",
                                        "input": "[union(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')], createObject('roleDefinitionId', coalesce(tryGet(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName), if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName)))))]"
                                      }
                                    ],
                                    "builtInRoleNames": {
                                      "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                                      "Private DNS Zone Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b12aa53e-6015-4669-85d0-8515ebb3ae7f')]",
                                      "Network Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4d97b98b-1d4f-4787-a291-c67834d212e7')]",
                                      "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                                      "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                                      "Role Based Access Control Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]",
                                      "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]"
                                    }
                                  },
                                  "resources": {
                                    "privateDnsZone": {
                                      "existing": true,
                                      "type": "Microsoft.Network/privateDnsZones",
                                      "apiVersion": "2020-06-01",
                                      "name": "[parameters('privateDnsZoneName')]"
                                    },
                                    "TXT": {
                                      "type": "Microsoft.Network/privateDnsZones/TXT",
                                      "apiVersion": "2020-06-01",
                                      "name": "[format('{0}/{1}', parameters('privateDnsZoneName'), parameters('name'))]",
                                      "properties": {
                                        "metadata": "[parameters('metadata')]",
                                        "ttl": "[parameters('ttl')]",
                                        "txtRecords": "[parameters('txtRecords')]"
                                      },
                                      "dependsOn": [
                                        "privateDnsZone"
                                      ]
                                    },
                                    "TXT_roleAssignments": {
                                      "copy": {
                                        "name": "TXT_roleAssignments",
                                        "count": "[length(coalesce(variables('formattedRoleAssignments'), createArray()))]"
                                      },
                                      "type": "Microsoft.Authorization/roleAssignments",
                                      "apiVersion": "2022-04-01",
                                      "scope": "[format('Microsoft.Network/privateDnsZones/{0}/TXT/{1}', parameters('privateDnsZoneName'), parameters('name'))]",
                                      "name": "[coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'name'), guid(resourceId('Microsoft.Network/privateDnsZones/TXT', parameters('privateDnsZoneName'), parameters('name')), coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId, coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId))]",
                                      "properties": {
                                        "roleDefinitionId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId]",
                                        "principalId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId]",
                                        "description": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'description')]",
                                        "principalType": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'principalType')]",
                                        "condition": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition')]",
                                        "conditionVersion": "[if(not(empty(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                                        "delegatedManagedIdentityResourceId": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
                                      },
                                      "dependsOn": [
                                        "TXT"
                                      ]
                                    }
                                  },
                                  "outputs": {
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the deployed TXT record."
                                      },
                                      "value": "[parameters('name')]"
                                    },
                                    "resourceId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource ID of the deployed TXT record."
                                      },
                                      "value": "[resourceId('Microsoft.Network/privateDnsZones/TXT', parameters('privateDnsZoneName'), parameters('name'))]"
                                    },
                                    "resourceGroupName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource group of the deployed TXT record."
                                      },
                                      "value": "[resourceGroup().name]"
                                    }
                                  }
                                }
                              },
                              "dependsOn": [
                                "privateDnsZone"
                              ]
                            },
                            "privateDnsZone_virtualNetworkLinks": {
                              "copy": {
                                "name": "privateDnsZone_virtualNetworkLinks",
                                "count": "[length(coalesce(parameters('virtualNetworkLinks'), createArray()))]"
                              },
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "[format('{0}-PrivateDnsZone-VirtualNetworkLink-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "privateDnsZoneName": {
                                    "value": "[parameters('name')]"
                                  },
                                  "name": {
                                    "value": "[coalesce(tryGet(coalesce(parameters('virtualNetworkLinks'), createArray())[copyIndex()], 'name'), format('{0}-vnetlink', last(split(coalesce(parameters('virtualNetworkLinks'), createArray())[copyIndex()].virtualNetworkResourceId, '/'))))]"
                                  },
                                  "virtualNetworkResourceId": {
                                    "value": "[coalesce(parameters('virtualNetworkLinks'), createArray())[copyIndex()].virtualNetworkResourceId]"
                                  },
                                  "location": {
                                    "value": "[coalesce(tryGet(coalesce(parameters('virtualNetworkLinks'), createArray())[copyIndex()], 'location'), 'global')]"
                                  },
                                  "registrationEnabled": {
                                    "value": "[coalesce(tryGet(coalesce(parameters('virtualNetworkLinks'), createArray())[copyIndex()], 'registrationEnabled'), false())]"
                                  },
                                  "tags": {
                                    "value": "[coalesce(tryGet(coalesce(parameters('virtualNetworkLinks'), createArray())[copyIndex()], 'tags'), parameters('tags'))]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "languageVersion": "2.0",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.29.47.4906",
                                      "templateHash": "1713449351614683457"
                                    },
                                    "name": "Private DNS Zone Virtual Network Link",
                                    "description": "This module deploys a Private DNS Zone Virtual Network Link.",
                                    "owner": "Azure/module-maintainers"
                                  },
                                  "parameters": {
                                    "privateDnsZoneName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Conditional. The name of the parent Private DNS zone. Required if the template is used in a standalone deployment."
                                      }
                                    },
                                    "name": {
                                      "type": "string",
                                      "defaultValue": "[format('{0}-vnetlink', last(split(parameters('virtualNetworkResourceId'), '/')))]",
                                      "metadata": {
                                        "description": "Optional. The name of the virtual network link."
                                      }
                                    },
                                    "location": {
                                      "type": "string",
                                      "defaultValue": "global",
                                      "metadata": {
                                        "description": "Optional. The location of the PrivateDNSZone. Should be global."
                                      }
                                    },
                                    "tags": {
                                      "type": "object",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. Tags of the resource."
                                      }
                                    },
                                    "registrationEnabled": {
                                      "type": "bool",
                                      "defaultValue": false,
                                      "metadata": {
                                        "description": "Optional. Is auto-registration of virtual machine records in the virtual network in the Private DNS zone enabled?."
                                      }
                                    },
                                    "virtualNetworkResourceId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. Link to another virtual network resource ID."
                                      }
                                    }
                                  },
                                  "resources": {
                                    "privateDnsZone": {
                                      "existing": true,
                                      "type": "Microsoft.Network/privateDnsZones",
                                      "apiVersion": "2020-06-01",
                                      "name": "[parameters('privateDnsZoneName')]"
                                    },
                                    "virtualNetworkLink": {
                                      "type": "Microsoft.Network/privateDnsZones/virtualNetworkLinks",
                                      "apiVersion": "2020-06-01",
                                      "name": "[format('{0}/{1}', parameters('privateDnsZoneName'), parameters('name'))]",
                                      "location": "[parameters('location')]",
                                      "tags": "[parameters('tags')]",
                                      "properties": {
                                        "registrationEnabled": "[parameters('registrationEnabled')]",
                                        "virtualNetwork": {
                                          "id": "[parameters('virtualNetworkResourceId')]"
                                        }
                                      },
                                      "dependsOn": [
                                        "privateDnsZone"
                                      ]
                                    }
                                  },
                                  "outputs": {
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the deployed virtual network link."
                                      },
                                      "value": "[parameters('name')]"
                                    },
                                    "resourceId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource ID of the deployed virtual network link."
                                      },
                                      "value": "[resourceId('Microsoft.Network/privateDnsZones/virtualNetworkLinks', parameters('privateDnsZoneName'), parameters('name'))]"
                                    },
                                    "resourceGroupName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource group of the deployed virtual network link."
                                      },
                                      "value": "[resourceGroup().name]"
                                    },
                                    "location": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The location the resource was deployed into."
                                      },
                                      "value": "[reference('virtualNetworkLink', '2020-06-01', 'full').location]"
                                    }
                                  }
                                }
                              },
                              "dependsOn": [
                                "privateDnsZone"
                              ]
                            }
                          },
                          "outputs": {
                            "resourceGroupName": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource group the private DNS zone was deployed into."
                              },
                              "value": "[resourceGroup().name]"
                            },
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "The name of the private DNS zone."
                              },
                              "value": "[parameters('name')]"
                            },
                            "resourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource ID of the private DNS zone."
                              },
                              "value": "[resourceId('Microsoft.Network/privateDnsZones', parameters('name'))]"
                            },
                            "location": {
                              "type": "string",
                              "metadata": {
                                "description": "The location the resource was deployed into."
                              },
                              "value": "[reference('privateDnsZone', '2020-06-01', 'full').location]"
                            }
                          }
                        }
                      }
                    },
                    {
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('{0}-deployment', uniqueString(deployment().name, parameters('location'), 'webapp'))]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "name": {
                            "value": "[parameters('managedIdentityName')]"
                          },
                          "location": {
                            "value": "[parameters('location')]"
                          },
                          "tags": {
                            "value": "[parameters('tags')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "languageVersion": "2.0",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.29.47.4906",
                              "templateHash": "10609859695208799167"
                            },
                            "name": "User Assigned Identities",
                            "description": "This module deploys a User Assigned Identity.",
                            "owner": "Azure/module-maintainers"
                          },
                          "definitions": {
                            "lockType": {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Specify the name of lock."
                                  }
                                },
                                "kind": {
                                  "type": "string",
                                  "allowedValues": [
                                    "CanNotDelete",
                                    "None",
                                    "ReadOnly"
                                  ],
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Specify the type of lock."
                                  }
                                }
                              },
                              "nullable": true
                            },
                            "roleAssignmentType": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "name": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The name (as GUID) of the role assignment. If not provided, a GUID will be generated."
                                    }
                                  },
                                  "roleDefinitionIdOrName": {
                                    "type": "string",
                                    "metadata": {
                                      "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                                    }
                                  },
                                  "principalId": {
                                    "type": "string",
                                    "metadata": {
                                      "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                                    }
                                  },
                                  "principalType": {
                                    "type": "string",
                                    "allowedValues": [
                                      "Device",
                                      "ForeignGroup",
                                      "Group",
                                      "ServicePrincipal",
                                      "User"
                                    ],
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The principal type of the assigned principal ID."
                                    }
                                  },
                                  "description": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The description of the role assignment."
                                    }
                                  },
                                  "condition": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                                    }
                                  },
                                  "conditionVersion": {
                                    "type": "string",
                                    "allowedValues": [
                                      "2.0"
                                    ],
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. Version of the condition."
                                    }
                                  },
                                  "delegatedManagedIdentityResourceId": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The Resource Id of the delegated managed identity resource."
                                    }
                                  }
                                }
                              },
                              "nullable": true
                            },
                            "federatedIdentityCredentialsType": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "name": {
                                    "type": "string",
                                    "metadata": {
                                      "description": "Required. The name of the federated identity credential."
                                    }
                                  },
                                  "audiences": {
                                    "type": "array",
                                    "items": {
                                      "type": "string"
                                    },
                                    "metadata": {
                                      "description": "Required. The list of audiences that can appear in the issued token."
                                    }
                                  },
                                  "issuer": {
                                    "type": "string",
                                    "metadata": {
                                      "description": "Required. The URL of the issuer to be trusted."
                                    }
                                  },
                                  "subject": {
                                    "type": "string",
                                    "metadata": {
                                      "description": "Required. The identifier of the external identity."
                                    }
                                  }
                                }
                              },
                              "nullable": true
                            }
                          },
                          "parameters": {
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. Name of the User Assigned Identity."
                              }
                            },
                            "location": {
                              "type": "string",
                              "defaultValue": "[resourceGroup().location]",
                              "metadata": {
                                "description": "Optional. Location for all resources."
                              }
                            },
                            "federatedIdentityCredentials": {
                              "$ref": "#/definitions/federatedIdentityCredentialsType",
                              "metadata": {
                                "description": "Optional. The federated identity credentials list to indicate which token from the external IdP should be trusted by your application. Federated identity credentials are supported on applications only. A maximum of 20 federated identity credentials can be added per application object."
                              }
                            },
                            "lock": {
                              "$ref": "#/definitions/lockType",
                              "metadata": {
                                "description": "Optional. The lock settings of the service."
                              }
                            },
                            "roleAssignments": {
                              "$ref": "#/definitions/roleAssignmentType",
                              "metadata": {
                                "description": "Optional. Array of role assignments to create."
                              }
                            },
                            "tags": {
                              "type": "object",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Tags of the resource."
                              }
                            },
                            "enableTelemetry": {
                              "type": "bool",
                              "defaultValue": true,
                              "metadata": {
                                "description": "Optional. Enable/Disable usage telemetry for module."
                              }
                            }
                          },
                          "variables": {
                            "copy": [
                              {
                                "name": "formattedRoleAssignments",
                                "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]",
                                "input": "[union(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')], createObject('roleDefinitionId', coalesce(tryGet(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName), if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName)))))]"
                              }
                            ],
                            "builtInRoleNames": {
                              "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                              "Managed Identity Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'e40ec5ca-96e0-45a2-b4ff-59039f2c2b59')]",
                              "Managed Identity Operator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f1a07417-d97a-45cb-824c-7a7467783830')]",
                              "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                              "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                              "Role Based Access Control Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]",
                              "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]"
                            }
                          },
                          "resources": {
                            "avmTelemetry": {
                              "condition": "[parameters('enableTelemetry')]",
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2024-03-01",
                              "name": "[format('46d3xbcp.res.managedidentity-userassignedidentity.{0}.{1}', replace('0.4.0', '.', '-'), substring(uniqueString(deployment().name, parameters('location')), 0, 4))]",
                              "properties": {
                                "mode": "Incremental",
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "resources": [],
                                  "outputs": {
                                    "telemetry": {
                                      "type": "String",
                                      "value": "For more information, see https://aka.ms/avm/TelemetryInfo"
                                    }
                                  }
                                }
                              }
                            },
                            "userAssignedIdentity": {
                              "type": "Microsoft.ManagedIdentity/userAssignedIdentities",
                              "apiVersion": "2023-01-31",
                              "name": "[parameters('name')]",
                              "location": "[parameters('location')]",
                              "tags": "[parameters('tags')]"
                            },
                            "userAssignedIdentity_lock": {
                              "condition": "[and(not(empty(coalesce(parameters('lock'), createObject()))), not(equals(tryGet(parameters('lock'), 'kind'), 'None')))]",
                              "type": "Microsoft.Authorization/locks",
                              "apiVersion": "2020-05-01",
                              "scope": "[format('Microsoft.ManagedIdentity/userAssignedIdentities/{0}', parameters('name'))]",
                              "name": "[coalesce(tryGet(parameters('lock'), 'name'), format('lock-{0}', parameters('name')))]",
                              "properties": {
                                "level": "[coalesce(tryGet(parameters('lock'), 'kind'), '')]",
                                "notes": "[if(equals(tryGet(parameters('lock'), 'kind'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot delete or modify the resource or child resources.')]"
                              },
                              "dependsOn": [
                                "userAssignedIdentity"
                              ]
                            },
                            "userAssignedIdentity_roleAssignments": {
                              "copy": {
                                "name": "userAssignedIdentity_roleAssignments",
                                "count": "[length(coalesce(variables('formattedRoleAssignments'), createArray()))]"
                              },
                              "type": "Microsoft.Authorization/roleAssignments",
                              "apiVersion": "2022-04-01",
                              "scope": "[format('Microsoft.ManagedIdentity/userAssignedIdentities/{0}', parameters('name'))]",
                              "name": "[coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'name'), guid(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('name')), coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId, coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId))]",
                              "properties": {
                                "roleDefinitionId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId]",
                                "principalId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId]",
                                "description": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'description')]",
                                "principalType": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'principalType')]",
                                "condition": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition')]",
                                "conditionVersion": "[if(not(empty(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                                "delegatedManagedIdentityResourceId": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
                              },
                              "dependsOn": [
                                "userAssignedIdentity"
                              ]
                            },
                            "userAssignedIdentity_federatedIdentityCredentials": {
                              "copy": {
                                "name": "userAssignedIdentity_federatedIdentityCredentials",
                                "count": "[length(coalesce(parameters('federatedIdentityCredentials'), createArray()))]",
                                "mode": "serial",
                                "batchSize": 1
                              },
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "[format('{0}-UserMSI-FederatedIdentityCredential-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "name": {
                                    "value": "[coalesce(parameters('federatedIdentityCredentials'), createArray())[copyIndex()].name]"
                                  },
                                  "userAssignedIdentityName": {
                                    "value": "[parameters('name')]"
                                  },
                                  "audiences": {
                                    "value": "[coalesce(parameters('federatedIdentityCredentials'), createArray())[copyIndex()].audiences]"
                                  },
                                  "issuer": {
                                    "value": "[coalesce(parameters('federatedIdentityCredentials'), createArray())[copyIndex()].issuer]"
                                  },
                                  "subject": {
                                    "value": "[coalesce(parameters('federatedIdentityCredentials'), createArray())[copyIndex()].subject]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.29.47.4906",
                                      "templateHash": "3716898257490923786"
                                    },
                                    "name": "User Assigned Identity Federated Identity Credential",
                                    "description": "This module deploys a User Assigned Identity Federated Identity Credential.",
                                    "owner": "Azure/module-maintainers"
                                  },
                                  "parameters": {
                                    "userAssignedIdentityName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Conditional. The name of the parent user assigned identity. Required if the template is used in a standalone deployment."
                                      }
                                    },
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The name of the secret."
                                      }
                                    },
                                    "audiences": {
                                      "type": "array",
                                      "metadata": {
                                        "description": "Required. The list of audiences that can appear in the issued token. Should be set to api://AzureADTokenExchange for Azure AD. It says what Microsoft identity platform should accept in the aud claim in the incoming token. This value represents Azure AD in your external identity provider and has no fixed value across identity providers - you might need to create a new application registration in your IdP to serve as the audience of this token."
                                      }
                                    },
                                    "issuer": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The URL of the issuer to be trusted. Must match the issuer claim of the external token being exchanged."
                                      }
                                    },
                                    "subject": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The identifier of the external software workload within the external identity provider. Like the audience value, it has no fixed format, as each IdP uses their own - sometimes a GUID, sometimes a colon delimited identifier, sometimes arbitrary strings. The value here must match the sub claim within the token presented to Azure AD."
                                      }
                                    }
                                  },
                                  "resources": [
                                    {
                                      "type": "Microsoft.ManagedIdentity/userAssignedIdentities/federatedIdentityCredentials",
                                      "apiVersion": "2023-01-31",
                                      "name": "[format('{0}/{1}', parameters('userAssignedIdentityName'), parameters('name'))]",
                                      "properties": {
                                        "audiences": "[parameters('audiences')]",
                                        "issuer": "[parameters('issuer')]",
                                        "subject": "[parameters('subject')]"
                                      }
                                    }
                                  ],
                                  "outputs": {
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the federated identity credential."
                                      },
                                      "value": "[parameters('name')]"
                                    },
                                    "resourceId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource ID of the federated identity credential."
                                      },
                                      "value": "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities/federatedIdentityCredentials', parameters('userAssignedIdentityName'), parameters('name'))]"
                                    },
                                    "resourceGroupName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the resource group the federated identity credential was created in."
                                      },
                                      "value": "[resourceGroup().name]"
                                    }
                                  }
                                }
                              },
                              "dependsOn": [
                                "userAssignedIdentity"
                              ]
                            }
                          },
                          "outputs": {
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "The name of the user assigned identity."
                              },
                              "value": "[parameters('name')]"
                            },
                            "resourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource ID of the user assigned identity."
                              },
                              "value": "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('name'))]"
                            },
                            "principalId": {
                              "type": "string",
                              "metadata": {
                                "description": "The principal ID (object ID) of the user assigned identity."
                              },
                              "value": "[reference('userAssignedIdentity').principalId]"
                            },
                            "clientId": {
                              "type": "string",
                              "metadata": {
                                "description": "The client ID (application ID) of the user assigned identity."
                              },
                              "value": "[reference('userAssignedIdentity').clientId]"
                            },
                            "resourceGroupName": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource group the user assigned identity was deployed into."
                              },
                              "value": "[resourceGroup().name]"
                            },
                            "location": {
                              "type": "string",
                              "metadata": {
                                "description": "The location the resource was deployed into."
                              },
                              "value": "[reference('userAssignedIdentity', '2023-01-31', 'full').location]"
                            }
                          }
                        }
                      }
                    },
                    {
                      "condition": "[and(not(empty(parameters('subnetPrivateEndpointId'))), not(parameters('deployAseV3')))]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[take(format('pe-{0}-slot-{1}-Deployment', parameters('webAppName'), variables('slotName')), 64)]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "name": {
                            "value": "[take(format('pe-{0}-slot-{1}', parameters('webAppName'), variables('slotName')), 64)]"
                          },
                          "location": {
                            "value": "[parameters('location')]"
                          },
                          "tags": {
                            "value": "[parameters('tags')]"
                          },
                          "privateDnsZoneGroup": "[if(and(not(empty(parameters('subnetPrivateEndpointId'))), not(parameters('deployAseV3'))), createObject('value', createObject('privateDnsZoneGroupConfigs', createArray(createObject('privateDnsZoneResourceId', reference(resourceId('Microsoft.Resources/deployments', take(format('{0}-PrivateDnsZoneDeployment', replace(variables('webAppDnsZoneName'), '.', '-')), 64)), '2022-09-01').outputs.resourceId.value)))), createObject('value', null()))]",
                          "subnetResourceId": {
                            "value": "[parameters('subnetPrivateEndpointId')]"
                          },
                          "privateLinkServiceConnections": {
                            "value": [
                              {
                                "name": "webApp",
                                "properties": {
                                  "privateLinkServiceId": "[reference(resourceId('Microsoft.Resources/deployments', take(format('{0}-webApp-Deployment', parameters('webAppName')), 64)), '2022-09-01').outputs.resourceId.value]",
                                  "groupIds": [
                                    "[format('sites-{0}', variables('slotName'))]"
                                  ]
                                }
                              }
                            ]
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "languageVersion": "2.0",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.30.23.60470",
                              "templateHash": "6724714132049298262"
                            },
                            "name": "Private Endpoints",
                            "description": "This module deploys a Private Endpoint.",
                            "owner": "Azure/module-maintainers"
                          },
                          "definitions": {
                            "privateDnsZoneGroupType": {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The name of the Private DNS Zone Group."
                                  }
                                },
                                "privateDnsZoneGroupConfigs": {
                                  "type": "array",
                                  "items": {
                                    "$ref": "#/definitions/privateDnsZoneGroupConfigType"
                                  },
                                  "metadata": {
                                    "description": "Required. The private DNS zone groups to associate the private endpoint. A DNS zone group can support up to 5 DNS zones."
                                  }
                                }
                              },
                              "metadata": {
                                "__bicep_export!": true
                              }
                            },
                            "ipConfigurationType": {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "metadata": {
                                    "description": "Required. The name of the resource that is unique within a resource group."
                                  }
                                },
                                "properties": {
                                  "type": "object",
                                  "properties": {
                                    "groupId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The ID of a group obtained from the remote resource that this private endpoint should connect to. If used with private link service connection, this property must be defined as empty string."
                                      }
                                    },
                                    "memberName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The member name of a group obtained from the remote resource that this private endpoint should connect to. If used with private link service connection, this property must be defined as empty string."
                                      }
                                    },
                                    "privateIPAddress": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. A private IP address obtained from the private endpoint's subnet."
                                      }
                                    }
                                  },
                                  "metadata": {
                                    "description": "Required. Properties of private endpoint IP configurations."
                                  }
                                }
                              },
                              "metadata": {
                                "__bicep_export!": true
                              }
                            },
                            "manualPrivateLinkServiceConnectionType": {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "metadata": {
                                    "description": "Required. The name of the private link service connection."
                                  }
                                },
                                "properties": {
                                  "type": "object",
                                  "properties": {
                                    "groupIds": {
                                      "type": "array",
                                      "items": {
                                        "type": "string"
                                      },
                                      "metadata": {
                                        "description": "Required. The ID of a group obtained from the remote resource that this private endpoint should connect to. If used with private link service connection, this property must be defined as empty string array `[]`."
                                      }
                                    },
                                    "privateLinkServiceId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The resource id of private link service."
                                      }
                                    },
                                    "requestMessage": {
                                      "type": "string",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. A message passed to the owner of the remote resource with this connection request. Restricted to 140 chars."
                                      }
                                    }
                                  },
                                  "metadata": {
                                    "description": "Required. Properties of private link service connection."
                                  }
                                }
                              },
                              "metadata": {
                                "__bicep_export!": true
                              }
                            },
                            "privateLinkServiceConnectionType": {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "metadata": {
                                    "description": "Required. The name of the private link service connection."
                                  }
                                },
                                "properties": {
                                  "type": "object",
                                  "properties": {
                                    "groupIds": {
                                      "type": "array",
                                      "items": {
                                        "type": "string"
                                      },
                                      "metadata": {
                                        "description": "Required. The ID of a group obtained from the remote resource that this private endpoint should connect to. If used with private link service connection, this property must be defined as empty string array `[]`."
                                      }
                                    },
                                    "privateLinkServiceId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The resource id of private link service."
                                      }
                                    },
                                    "requestMessage": {
                                      "type": "string",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. A message passed to the owner of the remote resource with this connection request. Restricted to 140 chars."
                                      }
                                    }
                                  },
                                  "metadata": {
                                    "description": "Required. Properties of private link service connection."
                                  }
                                }
                              },
                              "metadata": {
                                "__bicep_export!": true
                              }
                            },
                            "customDnsConfigType": {
                              "type": "object",
                              "properties": {
                                "fqdn": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. FQDN that resolves to private endpoint IP address."
                                  }
                                },
                                "ipAddresses": {
                                  "type": "array",
                                  "items": {
                                    "type": "string"
                                  },
                                  "metadata": {
                                    "description": "Required. A list of private IP addresses of the private endpoint."
                                  }
                                }
                              },
                              "metadata": {
                                "__bicep_export!": true
                              }
                            },
                            "lockType": {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Specify the name of lock."
                                  }
                                },
                                "kind": {
                                  "type": "string",
                                  "allowedValues": [
                                    "CanNotDelete",
                                    "None",
                                    "ReadOnly"
                                  ],
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Specify the type of lock."
                                  }
                                }
                              },
                              "metadata": {
                                "description": "An AVM-aligned type for a lock.",
                                "__bicep_imported_from!": {
                                  "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.2.1"
                                }
                              }
                            },
                            "privateDnsZoneGroupConfigType": {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The name of the private DNS zone group config."
                                  }
                                },
                                "privateDnsZoneResourceId": {
                                  "type": "string",
                                  "metadata": {
                                    "description": "Required. The resource id of the private DNS zone."
                                  }
                                }
                              },
                              "metadata": {
                                "__bicep_imported_from!": {
                                  "sourceTemplate": "private-dns-zone-group/main.bicep"
                                }
                              }
                            },
                            "roleAssignmentType": {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The name (as GUID) of the role assignment. If not provided, a GUID will be generated."
                                  }
                                },
                                "roleDefinitionIdOrName": {
                                  "type": "string",
                                  "metadata": {
                                    "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                                  }
                                },
                                "principalId": {
                                  "type": "string",
                                  "metadata": {
                                    "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                                  }
                                },
                                "principalType": {
                                  "type": "string",
                                  "allowedValues": [
                                    "Device",
                                    "ForeignGroup",
                                    "Group",
                                    "ServicePrincipal",
                                    "User"
                                  ],
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The principal type of the assigned principal ID."
                                  }
                                },
                                "description": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The description of the role assignment."
                                  }
                                },
                                "condition": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                                  }
                                },
                                "conditionVersion": {
                                  "type": "string",
                                  "allowedValues": [
                                    "2.0"
                                  ],
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Version of the condition."
                                  }
                                },
                                "delegatedManagedIdentityResourceId": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The Resource Id of the delegated managed identity resource."
                                  }
                                }
                              },
                              "metadata": {
                                "description": "An AVM-aligned type for a role assignment.",
                                "__bicep_imported_from!": {
                                  "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.2.1"
                                }
                              }
                            }
                          },
                          "parameters": {
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. Name of the private endpoint resource to create."
                              }
                            },
                            "subnetResourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. Resource ID of the subnet where the endpoint needs to be created."
                              }
                            },
                            "applicationSecurityGroupResourceIds": {
                              "type": "array",
                              "items": {
                                "type": "string"
                              },
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Application security groups in which the private endpoint IP configuration is included."
                              }
                            },
                            "customNetworkInterfaceName": {
                              "type": "string",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. The custom name of the network interface attached to the private endpoint."
                              }
                            },
                            "ipConfigurations": {
                              "type": "array",
                              "items": {
                                "$ref": "#/definitions/ipConfigurationType"
                              },
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. A list of IP configurations of the private endpoint. This will be used to map to the First Party Service endpoints."
                              }
                            },
                            "privateDnsZoneGroup": {
                              "$ref": "#/definitions/privateDnsZoneGroupType",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. The private DNS zone group to configure for the private endpoint."
                              }
                            },
                            "location": {
                              "type": "string",
                              "defaultValue": "[resourceGroup().location]",
                              "metadata": {
                                "description": "Optional. Location for all Resources."
                              }
                            },
                            "lock": {
                              "$ref": "#/definitions/lockType",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. The lock settings of the service."
                              }
                            },
                            "roleAssignments": {
                              "type": "array",
                              "items": {
                                "$ref": "#/definitions/roleAssignmentType"
                              },
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Array of role assignments to create."
                              }
                            },
                            "tags": {
                              "type": "object",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Tags to be applied on all resources/resource groups in this deployment."
                              }
                            },
                            "customDnsConfigs": {
                              "type": "array",
                              "items": {
                                "$ref": "#/definitions/customDnsConfigType"
                              },
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Custom DNS configurations."
                              }
                            },
                            "manualPrivateLinkServiceConnections": {
                              "type": "array",
                              "items": {
                                "$ref": "#/definitions/manualPrivateLinkServiceConnectionType"
                              },
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. A grouping of information about the connection to the remote resource. Used when the network admin does not have access to approve connections to the remote resource."
                              }
                            },
                            "privateLinkServiceConnections": {
                              "type": "array",
                              "items": {
                                "$ref": "#/definitions/privateLinkServiceConnectionType"
                              },
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. A grouping of information about the connection to the remote resource."
                              }
                            },
                            "enableTelemetry": {
                              "type": "bool",
                              "defaultValue": true,
                              "metadata": {
                                "description": "Optional. Enable/Disable usage telemetry for module."
                              }
                            }
                          },
                          "variables": {
                            "copy": [
                              {
                                "name": "formattedRoleAssignments",
                                "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]",
                                "input": "[union(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')], createObject('roleDefinitionId', coalesce(tryGet(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName), if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName)))))]"
                              }
                            ],
                            "builtInRoleNames": {
                              "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                              "DNS Resolver Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '0f2ebee7-ffd4-4fc0-b3b7-664099fdad5d')]",
                              "DNS Zone Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'befefa01-2a29-4197-83a8-272ff33ce314')]",
                              "Domain Services Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'eeaeda52-9324-47f6-8069-5d5bade478b2')]",
                              "Domain Services Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '361898ef-9ed1-48c2-849c-a832951106bb')]",
                              "Network Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4d97b98b-1d4f-4787-a291-c67834d212e7')]",
                              "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                              "Private DNS Zone Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b12aa53e-6015-4669-85d0-8515ebb3ae7f')]",
                              "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                              "Role Based Access Control Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]"
                            }
                          },
                          "resources": {
                            "avmTelemetry": {
                              "condition": "[parameters('enableTelemetry')]",
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2024-03-01",
                              "name": "[format('46d3xbcp.res.network-privateendpoint.{0}.{1}', replace('0.9.0', '.', '-'), substring(uniqueString(deployment().name, parameters('location')), 0, 4))]",
                              "properties": {
                                "mode": "Incremental",
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "resources": [],
                                  "outputs": {
                                    "telemetry": {
                                      "type": "String",
                                      "value": "For more information, see https://aka.ms/avm/TelemetryInfo"
                                    }
                                  }
                                }
                              }
                            },
                            "privateEndpoint": {
                              "type": "Microsoft.Network/privateEndpoints",
                              "apiVersion": "2023-11-01",
                              "name": "[parameters('name')]",
                              "location": "[parameters('location')]",
                              "tags": "[parameters('tags')]",
                              "properties": {
                                "copy": [
                                  {
                                    "name": "applicationSecurityGroups",
                                    "count": "[length(coalesce(parameters('applicationSecurityGroupResourceIds'), createArray()))]",
                                    "input": {
                                      "id": "[coalesce(parameters('applicationSecurityGroupResourceIds'), createArray())[copyIndex('applicationSecurityGroups')]]"
                                    }
                                  }
                                ],
                                "customDnsConfigs": "[coalesce(parameters('customDnsConfigs'), createArray())]",
                                "customNetworkInterfaceName": "[coalesce(parameters('customNetworkInterfaceName'), '')]",
                                "ipConfigurations": "[coalesce(parameters('ipConfigurations'), createArray())]",
                                "manualPrivateLinkServiceConnections": "[coalesce(parameters('manualPrivateLinkServiceConnections'), createArray())]",
                                "privateLinkServiceConnections": "[coalesce(parameters('privateLinkServiceConnections'), createArray())]",
                                "subnet": {
                                  "id": "[parameters('subnetResourceId')]"
                                }
                              }
                            },
                            "privateEndpoint_lock": {
                              "condition": "[and(not(empty(coalesce(parameters('lock'), createObject()))), not(equals(tryGet(parameters('lock'), 'kind'), 'None')))]",
                              "type": "Microsoft.Authorization/locks",
                              "apiVersion": "2020-05-01",
                              "scope": "[format('Microsoft.Network/privateEndpoints/{0}', parameters('name'))]",
                              "name": "[coalesce(tryGet(parameters('lock'), 'name'), format('lock-{0}', parameters('name')))]",
                              "properties": {
                                "level": "[coalesce(tryGet(parameters('lock'), 'kind'), '')]",
                                "notes": "[if(equals(tryGet(parameters('lock'), 'kind'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot delete or modify the resource or child resources.')]"
                              },
                              "dependsOn": [
                                "privateEndpoint"
                              ]
                            },
                            "privateEndpoint_roleAssignments": {
                              "copy": {
                                "name": "privateEndpoint_roleAssignments",
                                "count": "[length(coalesce(variables('formattedRoleAssignments'), createArray()))]"
                              },
                              "type": "Microsoft.Authorization/roleAssignments",
                              "apiVersion": "2022-04-01",
                              "scope": "[format('Microsoft.Network/privateEndpoints/{0}', parameters('name'))]",
                              "name": "[coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'name'), guid(resourceId('Microsoft.Network/privateEndpoints', parameters('name')), coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId, coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId))]",
                              "properties": {
                                "roleDefinitionId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId]",
                                "principalId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId]",
                                "description": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'description')]",
                                "principalType": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'principalType')]",
                                "condition": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition')]",
                                "conditionVersion": "[if(not(empty(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                                "delegatedManagedIdentityResourceId": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
                              },
                              "dependsOn": [
                                "privateEndpoint"
                              ]
                            },
                            "privateEndpoint_privateDnsZoneGroup": {
                              "condition": "[not(empty(parameters('privateDnsZoneGroup')))]",
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "[format('{0}-PrivateEndpoint-PrivateDnsZoneGroup', uniqueString(deployment().name))]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "name": {
                                    "value": "[tryGet(parameters('privateDnsZoneGroup'), 'name')]"
                                  },
                                  "privateEndpointName": {
                                    "value": "[parameters('name')]"
                                  },
                                  "privateDnsZoneConfigs": {
                                    "value": "[parameters('privateDnsZoneGroup').privateDnsZoneGroupConfigs]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "languageVersion": "2.0",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.30.23.60470",
                                      "templateHash": "12329174801198479603"
                                    },
                                    "name": "Private Endpoint Private DNS Zone Groups",
                                    "description": "This module deploys a Private Endpoint Private DNS Zone Group.",
                                    "owner": "Azure/module-maintainers"
                                  },
                                  "definitions": {
                                    "privateDnsZoneGroupConfigType": {
                                      "type": "object",
                                      "properties": {
                                        "name": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The name of the private DNS zone group config."
                                          }
                                        },
                                        "privateDnsZoneResourceId": {
                                          "type": "string",
                                          "metadata": {
                                            "description": "Required. The resource id of the private DNS zone."
                                          }
                                        }
                                      },
                                      "metadata": {
                                        "__bicep_export!": true
                                      }
                                    }
                                  },
                                  "parameters": {
                                    "privateEndpointName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Conditional. The name of the parent private endpoint. Required if the template is used in a standalone deployment."
                                      }
                                    },
                                    "privateDnsZoneConfigs": {
                                      "type": "array",
                                      "items": {
                                        "$ref": "#/definitions/privateDnsZoneGroupConfigType"
                                      },
                                      "minLength": 1,
                                      "maxLength": 5,
                                      "metadata": {
                                        "description": "Required. Array of private DNS zone configurations of the private DNS zone group. A DNS zone group can support up to 5 DNS zones."
                                      }
                                    },
                                    "name": {
                                      "type": "string",
                                      "defaultValue": "default",
                                      "metadata": {
                                        "description": "Optional. The name of the private DNS zone group."
                                      }
                                    }
                                  },
                                  "variables": {
                                    "copy": [
                                      {
                                        "name": "privateDnsZoneConfigsVar",
                                        "count": "[length(parameters('privateDnsZoneConfigs'))]",
                                        "input": {
                                          "name": "[coalesce(tryGet(parameters('privateDnsZoneConfigs')[copyIndex('privateDnsZoneConfigsVar')], 'name'), last(split(parameters('privateDnsZoneConfigs')[copyIndex('privateDnsZoneConfigsVar')].privateDnsZoneResourceId, '/')))]",
                                          "properties": {
                                            "privateDnsZoneId": "[parameters('privateDnsZoneConfigs')[copyIndex('privateDnsZoneConfigsVar')].privateDnsZoneResourceId]"
                                          }
                                        }
                                      }
                                    ]
                                  },
                                  "resources": {
                                    "privateEndpoint": {
                                      "existing": true,
                                      "type": "Microsoft.Network/privateEndpoints",
                                      "apiVersion": "2023-11-01",
                                      "name": "[parameters('privateEndpointName')]"
                                    },
                                    "privateDnsZoneGroup": {
                                      "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
                                      "apiVersion": "2023-11-01",
                                      "name": "[format('{0}/{1}', parameters('privateEndpointName'), parameters('name'))]",
                                      "properties": {
                                        "privateDnsZoneConfigs": "[variables('privateDnsZoneConfigsVar')]"
                                      },
                                      "dependsOn": [
                                        "privateEndpoint"
                                      ]
                                    }
                                  },
                                  "outputs": {
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the private endpoint DNS zone group."
                                      },
                                      "value": "[parameters('name')]"
                                    },
                                    "resourceId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource ID of the private endpoint DNS zone group."
                                      },
                                      "value": "[resourceId('Microsoft.Network/privateEndpoints/privateDnsZoneGroups', parameters('privateEndpointName'), parameters('name'))]"
                                    },
                                    "resourceGroupName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource group the private endpoint DNS zone group was deployed into."
                                      },
                                      "value": "[resourceGroup().name]"
                                    }
                                  }
                                }
                              },
                              "dependsOn": [
                                "privateEndpoint"
                              ]
                            }
                          },
                          "outputs": {
                            "resourceGroupName": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource group the private endpoint was deployed into."
                              },
                              "value": "[resourceGroup().name]"
                            },
                            "resourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource ID of the private endpoint."
                              },
                              "value": "[resourceId('Microsoft.Network/privateEndpoints', parameters('name'))]"
                            },
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "The name of the private endpoint."
                              },
                              "value": "[parameters('name')]"
                            },
                            "location": {
                              "type": "string",
                              "metadata": {
                                "description": "The location the resource was deployed into."
                              },
                              "value": "[reference('privateEndpoint', '2023-11-01', 'full').location]"
                            },
                            "customDnsConfig": {
                              "type": "array",
                              "items": {
                                "$ref": "#/definitions/customDnsConfigType"
                              },
                              "metadata": {
                                "description": "The custom DNS configurations of the private endpoint."
                              },
                              "value": "[reference('privateEndpoint').customDnsConfigs]"
                            },
                            "networkInterfaceResourceIds": {
                              "type": "array",
                              "items": {
                                "type": "string"
                              },
                              "metadata": {
                                "description": "The resource IDs of the network interfaces associated with the private endpoint."
                              },
                              "value": "[map(reference('privateEndpoint').networkInterfaces, lambda('nic', lambdaVariables('nic').id))]"
                            },
                            "groupId": {
                              "type": "string",
                              "nullable": true,
                              "metadata": {
                                "description": "The group Id for the private endpoint Group."
                              },
                              "value": "[coalesce(tryGet(tryGet(tryGet(tryGet(reference('privateEndpoint'), 'manualPrivateLinkServiceConnections'), 0, 'properties'), 'groupIds'), 0), tryGet(tryGet(tryGet(tryGet(reference('privateEndpoint'), 'privateLinkServiceConnections'), 0, 'properties'), 'groupIds'), 0))]"
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Resources/deployments', take(format('{0}-webApp-Deployment', parameters('webAppName')), 64))]",
                        "[resourceId('Microsoft.Resources/deployments', take(format('{0}-PrivateDnsZoneDeployment', replace(variables('webAppDnsZoneName'), '.', '-')), 64))]"
                      ]
                    }
                  ],
                  "outputs": {
                    "webAppName": {
                      "type": "string",
                      "value": "[reference(resourceId('Microsoft.Resources/deployments', take(format('{0}-webApp-Deployment', parameters('webAppName')), 64)), '2022-09-01').outputs.name.value]"
                    },
                    "webAppHostName": {
                      "type": "string",
                      "value": "[reference(resourceId('Microsoft.Resources/deployments', take(format('{0}-webApp-Deployment', parameters('webAppName')), 64)), '2022-09-01').outputs.defaultHostname.value]"
                    },
                    "webAppResourceId": {
                      "type": "string",
                      "value": "[reference(resourceId('Microsoft.Resources/deployments', take(format('{0}-webApp-Deployment', parameters('webAppName')), 64)), '2022-09-01').outputs.resourceId.value]"
                    },
                    "webAppLocation": {
                      "type": "string",
                      "value": "[reference(resourceId('Microsoft.Resources/deployments', take(format('{0}-webApp-Deployment', parameters('webAppName')), 64)), '2022-09-01').outputs.location.value]"
                    },
                    "webAppSystemAssignedPrincipalId": {
                      "type": "string",
                      "value": "[reference(resourceId('Microsoft.Resources/deployments', format('{0}-deployment', uniqueString(deployment().name, parameters('location'), 'webapp'))), '2022-09-01').outputs.principalId.value]"
                    },
                    "internalInboundIpAddress": {
                      "type": "string",
                      "metadata": {
                        "description": "The Internal ingress IP of the ASE."
                      },
                      "value": "[if(parameters('deployAseV3'), reference(resourceId('Microsoft.Resources/deployments', take(format('{0}-ASEv3-Deployment', parameters('aseName')), 64)), '2022-09-01').outputs.internalInboundIpAddress.value, '')]"
                    },
                    "aseName": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the ASE."
                      },
                      "value": "[if(parameters('deployAseV3'), reference(resourceId('Microsoft.Resources/deployments', take(format('{0}-ASEv3-Deployment', parameters('aseName')), 64)), '2022-09-01').outputs.name.value, '')]"
                    }
                  }
                }
              },
              "dependsOn": [
                "logAnalyticsWs",
                "networking"
              ]
            },
            "afd": {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[take(format('AzureFrontDoor-{0}-deployment', variables('resourceNames').frontDoor), 64)]",
              "resourceGroup": "[parameters('resourceGroupName')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "afdName": {
                    "value": "[variables('resourceNames').frontDoor]"
                  },
                  "endpointName": {
                    "value": "[variables('resourceNames').frontDoorEndPoint]"
                  },
                  "originGroupName": {
                    "value": "[variables('resourceNames').frontDoorOriginGroup]"
                  },
                  "origins": {
                    "value": [
                      {
                        "name": "[reference('webApp').outputs.webAppName.value]",
                        "hostname": "[reference('webApp').outputs.webAppHostName.value]",
                        "enabledState": true,
                        "privateLinkOrigin": {
                          "privateEndpointResourceId": "[reference('webApp').outputs.webAppResourceId.value]",
                          "privateLinkResourceType": "sites",
                          "privateEndpointLocation": "[reference('webApp').outputs.webAppLocation.value]"
                        }
                      }
                    ]
                  },
                  "skuName": {
                    "value": "Premium_AzureFrontDoor"
                  },
                  "wafPolicyName": {
                    "value": "[variables('resourceNames').frontDoorWaf]"
                  },
                  "logAnalyticsWorkspaceId": {
                    "value": "[reference('logAnalyticsWs').outputs.resourceId.value]"
                  },
                  "tags": {
                    "value": "[parameters('tags')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.32.4.45862",
                      "templateHash": "2065943319602700003"
                    }
                  },
                  "parameters": {
                    "afdName": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Name of the AFD profile."
                      }
                    },
                    "endpointName": {
                      "type": "string",
                      "metadata": {
                        "description": "Name of the endpoint under the profile which is unique globally."
                      }
                    },
                    "endpointEnabled": {
                      "type": "string",
                      "defaultValue": "Enabled",
                      "allowedValues": [
                        "Enabled",
                        "Disabled"
                      ],
                      "metadata": {
                        "description": "AFD Endpoint State"
                      }
                    },
                    "tags": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. Endpoint tags."
                      }
                    },
                    "skuName": {
                      "type": "string",
                      "allowedValues": [
                        "Standard_AzureFrontDoor",
                        "Premium_AzureFrontDoor"
                      ],
                      "metadata": {
                        "description": "Required. The pricing tier (defines a CDN provider, feature list and rate) of the CDN profile."
                      }
                    },
                    "originGroupName": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the Origin Group"
                      }
                    },
                    "origins": {
                      "type": "array",
                      "metadata": {
                        "description": "Origin List"
                      }
                    },
                    "wafPolicyName": {
                      "type": "string",
                      "maxLength": 128,
                      "metadata": {
                        "description": "Name of the WAF policy to create."
                      }
                    },
                    "wafRuleSetAction": {
                      "type": "string",
                      "defaultValue": "Block",
                      "allowedValues": [
                        "Block",
                        "Log",
                        "Redirect"
                      ]
                    },
                    "wafPolicyState": {
                      "type": "string",
                      "defaultValue": "Enabled",
                      "allowedValues": [
                        "Enabled",
                        "Disabled"
                      ],
                      "metadata": {
                        "description": "optional, default value Enabled. "
                      }
                    },
                    "wafPolicyMode": {
                      "type": "string",
                      "defaultValue": "Prevention",
                      "allowedValues": [
                        "Detection",
                        "Prevention"
                      ],
                      "metadata": {
                        "description": "optional, default value Prevention. "
                      }
                    },
                    "logAnalyticsWorkspaceId": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The resource ID of the Log Analytics workspace to send logs to."
                      }
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[parameters('wafPolicyName')]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "name": {
                            "value": "waffrontdoor"
                          },
                          "location": {
                            "value": "Global"
                          },
                          "tags": {
                            "value": "[parameters('tags')]"
                          },
                          "sku": {
                            "value": "[parameters('skuName')]"
                          },
                          "policySettings": {
                            "value": {
                              "enabledState": "[parameters('wafPolicyState')]",
                              "mode": "[parameters('wafPolicyMode')]",
                              "requestBodyCheck": "Enabled"
                            }
                          },
                          "customRules": {
                            "value": {
                              "rules": [
                                {
                                  "name": "BlockMethod",
                                  "enabledState": "Enabled",
                                  "action": "Block",
                                  "ruleType": "MatchRule",
                                  "priority": 10,
                                  "rateLimitDurationInMinutes": 1,
                                  "rateLimitThreshold": 100,
                                  "matchConditions": [
                                    {
                                      "matchVariable": "RequestMethod",
                                      "operator": "Equal",
                                      "negateCondition": true,
                                      "matchValue": [
                                        "GET",
                                        "OPTIONS",
                                        "HEAD"
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          },
                          "managedRules": {
                            "value": {
                              "managedRuleSets": [
                                {
                                  "ruleSetType": "Microsoft_DefaultRuleSet",
                                  "ruleSetVersion": "2.1",
                                  "ruleSetAction": "[parameters('wafRuleSetAction')]",
                                  "ruleGroupOverrides": []
                                },
                                {
                                  "ruleSetType": "Microsoft_BotManagerRuleSet",
                                  "ruleSetVersion": "1.0",
                                  "ruleSetAction": "[parameters('wafRuleSetAction')]",
                                  "ruleGroupOverrides": []
                                }
                              ]
                            }
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "languageVersion": "2.0",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.29.47.4906",
                              "templateHash": "18027247650097415888"
                            },
                            "name": "Front Door Web Application Firewall (WAF) Policies",
                            "description": "This module deploys a Front Door Web Application Firewall (WAF) Policy.",
                            "owner": "Azure/module-maintainers"
                          },
                          "definitions": {
                            "lockType": {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Specify the name of lock."
                                  }
                                },
                                "kind": {
                                  "type": "string",
                                  "allowedValues": [
                                    "CanNotDelete",
                                    "None",
                                    "ReadOnly"
                                  ],
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Specify the type of lock."
                                  }
                                }
                              },
                              "nullable": true
                            },
                            "roleAssignmentType": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "name": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The name (as GUID) of the role assignment. If not provided, a GUID will be generated."
                                    }
                                  },
                                  "roleDefinitionIdOrName": {
                                    "type": "string",
                                    "metadata": {
                                      "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                                    }
                                  },
                                  "principalId": {
                                    "type": "string",
                                    "metadata": {
                                      "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                                    }
                                  },
                                  "principalType": {
                                    "type": "string",
                                    "allowedValues": [
                                      "Device",
                                      "ForeignGroup",
                                      "Group",
                                      "ServicePrincipal",
                                      "User"
                                    ],
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The principal type of the assigned principal ID."
                                    }
                                  },
                                  "description": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The description of the role assignment."
                                    }
                                  },
                                  "condition": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                                    }
                                  },
                                  "conditionVersion": {
                                    "type": "string",
                                    "allowedValues": [
                                      "2.0"
                                    ],
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. Version of the condition."
                                    }
                                  },
                                  "delegatedManagedIdentityResourceId": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The Resource Id of the delegated managed identity resource."
                                    }
                                  }
                                }
                              },
                              "nullable": true
                            }
                          },
                          "parameters": {
                            "name": {
                              "type": "string",
                              "minLength": 1,
                              "maxLength": 128,
                              "metadata": {
                                "description": "Required. Name of the Front Door WAF policy."
                              }
                            },
                            "location": {
                              "type": "string",
                              "defaultValue": "global",
                              "metadata": {
                                "description": "Optional. Location for all resources."
                              }
                            },
                            "sku": {
                              "type": "string",
                              "defaultValue": "Standard_AzureFrontDoor",
                              "allowedValues": [
                                "Standard_AzureFrontDoor",
                                "Premium_AzureFrontDoor"
                              ],
                              "metadata": {
                                "description": "Optional. The pricing tier of the WAF profile."
                              }
                            },
                            "tags": {
                              "type": "object",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Resource tags."
                              }
                            },
                            "enableTelemetry": {
                              "type": "bool",
                              "defaultValue": true,
                              "metadata": {
                                "description": "Optional. Enable/Disable usage telemetry for module."
                              }
                            },
                            "managedRules": {
                              "type": "object",
                              "defaultValue": {
                                "managedRuleSets": [
                                  {
                                    "ruleSetType": "Microsoft_DefaultRuleSet",
                                    "ruleSetVersion": "2.1",
                                    "ruleGroupOverrides": [],
                                    "exclusions": [],
                                    "ruleSetAction": "Block"
                                  },
                                  {
                                    "ruleSetType": "Microsoft_BotManagerRuleSet",
                                    "ruleSetVersion": "1.0",
                                    "ruleGroupOverrides": [],
                                    "exclusions": []
                                  }
                                ]
                              },
                              "metadata": {
                                "description": "Optional. Describes the managedRules structure."
                              }
                            },
                            "customRules": {
                              "type": "object",
                              "defaultValue": {
                                "rules": [
                                  {
                                    "name": "ApplyGeoFilter",
                                    "priority": 100,
                                    "enabledState": "Enabled",
                                    "ruleType": "MatchRule",
                                    "action": "Block",
                                    "matchConditions": [
                                      {
                                        "matchVariable": "RemoteAddr",
                                        "operator": "GeoMatch",
                                        "negateCondition": true,
                                        "matchValue": [
                                          "ZZ"
                                        ]
                                      }
                                    ]
                                  }
                                ]
                              },
                              "metadata": {
                                "description": "Optional. The custom rules inside the policy."
                              }
                            },
                            "policySettings": {
                              "type": "object",
                              "defaultValue": {
                                "enabledState": "Enabled",
                                "mode": "Prevention"
                              },
                              "metadata": {
                                "description": "Optional. The PolicySettings for policy."
                              }
                            },
                            "lock": {
                              "$ref": "#/definitions/lockType",
                              "metadata": {
                                "description": "Optional. The lock settings of the service."
                              }
                            },
                            "roleAssignments": {
                              "$ref": "#/definitions/roleAssignmentType",
                              "metadata": {
                                "description": "Optional. Array of role assignments to create."
                              }
                            }
                          },
                          "variables": {
                            "copy": [
                              {
                                "name": "formattedRoleAssignments",
                                "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]",
                                "input": "[union(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')], createObject('roleDefinitionId', coalesce(tryGet(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName), if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName)))))]"
                              }
                            ],
                            "builtInRoleNames": {
                              "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                              "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                              "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                              "Role Based Access Control Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]",
                              "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]"
                            }
                          },
                          "resources": {
                            "avmTelemetry": {
                              "condition": "[parameters('enableTelemetry')]",
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2024-03-01",
                              "name": "[format('46d3xbcp.res.network-frontdoorwebappfwpolicy.{0}.{1}', replace('0.3.0', '.', '-'), substring(uniqueString(deployment().name, parameters('location')), 0, 4))]",
                              "properties": {
                                "mode": "Incremental",
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "resources": [],
                                  "outputs": {
                                    "telemetry": {
                                      "type": "String",
                                      "value": "For more information, see https://aka.ms/avm/TelemetryInfo"
                                    }
                                  }
                                }
                              }
                            },
                            "frontDoorWAFPolicy": {
                              "type": "Microsoft.Network/FrontDoorWebApplicationFirewallPolicies",
                              "apiVersion": "2022-05-01",
                              "name": "[parameters('name')]",
                              "location": "[parameters('location')]",
                              "sku": {
                                "name": "[parameters('sku')]"
                              },
                              "tags": "[parameters('tags')]",
                              "properties": {
                                "customRules": "[parameters('customRules')]",
                                "managedRules": "[if(equals(parameters('sku'), 'Premium_AzureFrontDoor'), parameters('managedRules'), createObject('managedRuleSets', createArray()))]",
                                "policySettings": "[parameters('policySettings')]"
                              }
                            },
                            "frontDoorWAFPolicy_lock": {
                              "condition": "[and(not(empty(coalesce(parameters('lock'), createObject()))), not(equals(tryGet(parameters('lock'), 'kind'), 'None')))]",
                              "type": "Microsoft.Authorization/locks",
                              "apiVersion": "2020-05-01",
                              "scope": "[format('Microsoft.Network/FrontDoorWebApplicationFirewallPolicies/{0}', parameters('name'))]",
                              "name": "[coalesce(tryGet(parameters('lock'), 'name'), format('lock-{0}', parameters('name')))]",
                              "properties": {
                                "level": "[coalesce(tryGet(parameters('lock'), 'kind'), '')]",
                                "notes": "[if(equals(tryGet(parameters('lock'), 'kind'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot delete or modify the resource or child resources.')]"
                              },
                              "dependsOn": [
                                "frontDoorWAFPolicy"
                              ]
                            },
                            "frontDoorWAFPolicy_roleAssignments": {
                              "copy": {
                                "name": "frontDoorWAFPolicy_roleAssignments",
                                "count": "[length(coalesce(variables('formattedRoleAssignments'), createArray()))]"
                              },
                              "type": "Microsoft.Authorization/roleAssignments",
                              "apiVersion": "2022-04-01",
                              "scope": "[format('Microsoft.Network/FrontDoorWebApplicationFirewallPolicies/{0}', parameters('name'))]",
                              "name": "[coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'name'), guid(resourceId('Microsoft.Network/FrontDoorWebApplicationFirewallPolicies', parameters('name')), coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId, coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId))]",
                              "properties": {
                                "roleDefinitionId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId]",
                                "principalId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId]",
                                "description": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'description')]",
                                "principalType": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'principalType')]",
                                "condition": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition')]",
                                "conditionVersion": "[if(not(empty(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                                "delegatedManagedIdentityResourceId": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
                              },
                              "dependsOn": [
                                "frontDoorWAFPolicy"
                              ]
                            }
                          },
                          "outputs": {
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "The name of the Front Door WAF policy."
                              },
                              "value": "[parameters('name')]"
                            },
                            "resourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource ID of the Front Door WAF policy."
                              },
                              "value": "[resourceId('Microsoft.Network/FrontDoorWebApplicationFirewallPolicies', parameters('name'))]"
                            },
                            "resourceGroupName": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource group the Front Door WAF policy was deployed into."
                              },
                              "value": "[resourceGroup().name]"
                            },
                            "location": {
                              "type": "string",
                              "metadata": {
                                "description": "The location the resource was deployed into."
                              },
                              "value": "[reference('frontDoorWAFPolicy', '2022-05-01', 'full').location]"
                            }
                          }
                        }
                      }
                    },
                    {
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[parameters('afdName')]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "name": {
                            "value": "[parameters('afdName')]"
                          },
                          "sku": {
                            "value": "[parameters('skuName')]"
                          },
                          "location": {
                            "value": "global"
                          },
                          "originResponseTimeoutSeconds": {
                            "value": 120
                          },
                          "managedIdentities": {
                            "value": {
                              "systemAssigned": true
                            }
                          },
                          "diagnosticSettings": {
                            "value": [
                              {
                                "name": "FrontdoorAccessLog",
                                "workspaceResourceId": "[parameters('logAnalyticsWorkspaceId')]",
                                "logCategoriesAndGroups": [
                                  {
                                    "category": "FrontdoorAccessLog"
                                  },
                                  {
                                    "category": "FrontdoorWebApplicationFirewallLog"
                                  }
                                ]
                              }
                            ]
                          },
                          "afdEndpoints": {
                            "value": [
                              {
                                "name": "[parameters('endpointName')]",
                                "enabledState": "[parameters('endpointEnabled')]",
                                "routes": [
                                  {
                                    "name": "[format('{0}-route', parameters('originGroupName'))]",
                                    "originGroupName": "[parameters('originGroupName')]",
                                    "patternsToMatch": [
                                      "/*"
                                    ],
                                    "forwardingProtocol": "HttpsOnly",
                                    "linkToDefaultDomain": "Enabled",
                                    "httpsRedirect": "Enabled",
                                    "enabledState": "Enabled"
                                  }
                                ],
                                "tags": "[parameters('tags')]"
                              }
                            ]
                          },
                          "originGroups": {
                            "value": [
                              {
                                "copy": [
                                  {
                                    "name": "origins",
                                    "count": "[length(parameters('origins'))]",
                                    "input": {
                                      "name": "[replace(parameters('origins')[copyIndex('origins')].hostname, '.', '-')]",
                                      "hostName": "[parameters('origins')[copyIndex('origins')].hostname]",
                                      "httpPort": 80,
                                      "httpsPort": 443,
                                      "priority": 1,
                                      "weight": 1000,
                                      "enabledState": "[if(parameters('origins')[copyIndex('origins')].enabledState, 'Enabled', 'Disabled')]",
                                      "enforceCertificateNameCheck": true,
                                      "sharedPrivateLinkResource": {
                                        "privateLink": {
                                          "id": "[parameters('origins')[copyIndex('origins')].privateLinkOrigin.privateEndpointResourceId]"
                                        },
                                        "privateLinkLocation": "[parameters('origins')[copyIndex('origins')].privateLinkOrigin.privateEndpointLocation]",
                                        "requestMessage": "frontdoor",
                                        "groupId": "[parameters('origins')[copyIndex('origins')].privateLinkOrigin.privateLinkResourceType]"
                                      }
                                    }
                                  }
                                ],
                                "name": "[parameters('originGroupName')]",
                                "loadBalancingSettings": {
                                  "sampleSize": 4,
                                  "successfulSamplesRequired": 3,
                                  "additionalLatencyInMilliseconds": 50
                                },
                                "healthProbeSettings": {
                                  "probePath": "/",
                                  "probeRequestType": "GET",
                                  "probeProtocol": "Https",
                                  "probeIntervalInSeconds": 100
                                },
                                "sessionAffinityState": "Disabled",
                                "trafficRestorationTimeToHealedOrNewEndpointsInMinutes": 10
                              }
                            ]
                          },
                          "securityPolicies": {
                            "value": [
                              {
                                "name": "webApplicationFirewall",
                                "wafPolicyResourceId": "[reference(resourceId('Microsoft.Resources/deployments', parameters('wafPolicyName')), '2022-09-01').outputs.resourceId.value]",
                                "associations": [
                                  {
                                    "domains": [
                                      {
                                        "id": "[resourceId(subscription().subscriptionId, resourceGroup().name, 'Microsoft.Cdn/profiles/afdEndpoints', parameters('afdName'), format('{0}', parameters('endpointName')))]"
                                      }
                                    ],
                                    "patternsToMatch": [
                                      "/*"
                                    ]
                                  }
                                ]
                              }
                            ]
                          },
                          "tags": {
                            "value": "[parameters('tags')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "languageVersion": "2.0",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.32.4.45862",
                              "templateHash": "8615786035095200724"
                            },
                            "name": "CDN Profiles",
                            "description": "This module deploys a CDN Profile.",
                            "owner": "Azure/module-maintainers"
                          },
                          "definitions": {
                            "managedIdentitiesType": {
                              "type": "object",
                              "properties": {
                                "systemAssigned": {
                                  "type": "bool",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Enables system assigned managed identity on the resource."
                                  }
                                },
                                "userAssignedResourceIds": {
                                  "type": "array",
                                  "items": {
                                    "type": "string"
                                  },
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The resource ID(s) to assign to the resource."
                                  }
                                }
                              },
                              "nullable": true
                            },
                            "securityPolicyType": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "name": {
                                    "type": "string",
                                    "metadata": {
                                      "description": "Required. Name of the security policy."
                                    }
                                  },
                                  "associations": {
                                    "$ref": "#/definitions/associationsType",
                                    "metadata": {
                                      "description": "Required. Domain names and URL patterns to match with this association."
                                    }
                                  },
                                  "wafPolicyResourceId": {
                                    "type": "string",
                                    "metadata": {
                                      "description": "Required. Resource ID of WAF policy."
                                    }
                                  }
                                }
                              },
                              "metadata": {
                                "__bicep_export!": true
                              }
                            },
                            "lockType": {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Specify the name of lock."
                                  }
                                },
                                "kind": {
                                  "type": "string",
                                  "allowedValues": [
                                    "CanNotDelete",
                                    "None",
                                    "ReadOnly"
                                  ],
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Specify the type of lock."
                                  }
                                }
                              },
                              "nullable": true
                            },
                            "roleAssignmentType": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "name": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The name (as GUID) of the role assignment. If not provided, a GUID will be generated."
                                    }
                                  },
                                  "roleDefinitionIdOrName": {
                                    "type": "string",
                                    "metadata": {
                                      "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                                    }
                                  },
                                  "principalId": {
                                    "type": "string",
                                    "metadata": {
                                      "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                                    }
                                  },
                                  "principalType": {
                                    "type": "string",
                                    "allowedValues": [
                                      "Device",
                                      "ForeignGroup",
                                      "Group",
                                      "ServicePrincipal",
                                      "User"
                                    ],
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The principal type of the assigned principal ID."
                                    }
                                  },
                                  "description": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The description of the role assignment."
                                    }
                                  },
                                  "condition": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                                    }
                                  },
                                  "conditionVersion": {
                                    "type": "string",
                                    "allowedValues": [
                                      "2.0"
                                    ],
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. Version of the condition."
                                    }
                                  },
                                  "delegatedManagedIdentityResourceId": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The Resource Id of the delegated managed identity resource."
                                    }
                                  }
                                }
                              },
                              "nullable": true
                            },
                            "_1.afdRoutecacheConfigurationType": {
                              "type": "object",
                              "properties": {
                                "compressionSettings": {
                                  "type": "object",
                                  "properties": {
                                    "contentTypesToCompress": {
                                      "type": "array",
                                      "items": {
                                        "type": "string"
                                      },
                                      "metadata": {
                                        "description": "Required. List of content types on which compression applies. The value should be a valid MIME type."
                                      }
                                    },
                                    "iscontentTypeToCompressAll": {
                                      "type": "bool",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. Indicates whether content compression is enabled on AzureFrontDoor. Default value is false. If compression is enabled, content will be served as compressed if user requests for a compressed version. Content won't be compressed on AzureFrontDoor when requested content is smaller than 1 byte or larger than 1 MB."
                                      }
                                    }
                                  },
                                  "metadata": {
                                    "description": "Required. Compression settings."
                                  }
                                },
                                "queryParameters": {
                                  "type": "string",
                                  "metadata": {
                                    "description": "Required. Query parameters to include or exclude (comma separated)."
                                  }
                                },
                                "queryStringCachingBehavior": {
                                  "type": "string",
                                  "allowedValues": [
                                    "IgnoreQueryString",
                                    "IgnoreSpecifiedQueryStrings",
                                    "IncludeSpecifiedQueryStrings",
                                    "UseQueryString"
                                  ],
                                  "metadata": {
                                    "description": "Required. Defines how Frontdoor caches requests that include query strings."
                                  }
                                }
                              },
                              "metadata": {
                                "__bicep_imported_from!": {
                                  "sourceTemplate": "afdEndpoint/route/main.bicep"
                                }
                              }
                            },
                            "_1.routeType": {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "metadata": {
                                    "description": "Required. The name of the route."
                                  }
                                },
                                "cacheConfiguration": {
                                  "$ref": "#/definitions/_1.afdRoutecacheConfigurationType",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The caching configuration for this route. To disable caching, do not provide a cacheConfiguration object."
                                  }
                                },
                                "customDomainNames": {
                                  "type": "array",
                                  "items": {
                                    "type": "string"
                                  },
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The names of the custom domains."
                                  }
                                },
                                "enabledState": {
                                  "type": "string",
                                  "allowedValues": [
                                    "Disabled",
                                    "Enabled"
                                  ],
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Whether to enable use of this rule."
                                  }
                                },
                                "forwardingProtocol": {
                                  "type": "string",
                                  "allowedValues": [
                                    "HttpOnly",
                                    "HttpsOnly",
                                    "MatchRequest"
                                  ],
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The protocol this rule will use when forwarding traffic to backends."
                                  }
                                },
                                "httpsRedirect": {
                                  "type": "string",
                                  "allowedValues": [
                                    "Disabled",
                                    "Enabled"
                                  ],
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Whether to automatically redirect HTTP traffic to HTTPS traffic."
                                  }
                                },
                                "linkToDefaultDomain": {
                                  "type": "string",
                                  "allowedValues": [
                                    "Disabled",
                                    "Enabled"
                                  ],
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Whether this route will be linked to the default endpoint domain."
                                  }
                                },
                                "originGroupName": {
                                  "type": "string",
                                  "metadata": {
                                    "description": "Required. The name of the origin group."
                                  }
                                },
                                "originPath": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. A directory path on the origin that AzureFrontDoor can use to retrieve content from, e.g. contoso.cloudapp.net/originpath."
                                  }
                                },
                                "patternsToMatch": {
                                  "type": "array",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The route patterns of the rule."
                                  }
                                },
                                "ruleSets": {
                                  "type": "array",
                                  "items": {
                                    "type": "object"
                                  },
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The rule sets of the rule."
                                  }
                                },
                                "supportedProtocols": {
                                  "type": "array",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The supported protocols of the rule."
                                  }
                                }
                              },
                              "metadata": {
                                "__bicep_imported_from!": {
                                  "sourceTemplate": "afdEndpoint/route/main.bicep"
                                }
                              }
                            },
                            "_2.healthProbeSettingsType": {
                              "type": "object",
                              "properties": {
                                "probePath": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The path relative to the origin that is used to determine the health of the origin."
                                  }
                                },
                                "probeProtocol": {
                                  "type": "string",
                                  "allowedValues": [
                                    "Http",
                                    "Https",
                                    "NotSet"
                                  ],
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Protocol to use for health probe."
                                  }
                                },
                                "probeRequestType": {
                                  "type": "string",
                                  "allowedValues": [
                                    "GET",
                                    "HEAD",
                                    "NotSet"
                                  ],
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The request type to probe."
                                  }
                                },
                                "probeIntervalInSeconds": {
                                  "type": "int",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The number of seconds between health probes.Default is 240sec."
                                  }
                                }
                              },
                              "metadata": {
                                "__bicep_imported_from!": {
                                  "sourceTemplate": "origingroup/main.bicep"
                                }
                              }
                            },
                            "_2.loadBalancingSettingsType": {
                              "type": "object",
                              "properties": {
                                "additionalLatencyInMilliseconds": {
                                  "type": "int",
                                  "metadata": {
                                    "description": "Required. Additional latency in milliseconds for probes to the backend. Must be between 0 and 1000."
                                  }
                                },
                                "sampleSize": {
                                  "type": "int",
                                  "metadata": {
                                    "description": "Required. Number of samples to consider for load balancing decisions."
                                  }
                                },
                                "successfulSamplesRequired": {
                                  "type": "int",
                                  "metadata": {
                                    "description": "Required. Number of samples within the sample window that must be successful to mark the backend as healthy."
                                  }
                                }
                              },
                              "metadata": {
                                "__bicep_imported_from!": {
                                  "sourceTemplate": "origingroup/main.bicep"
                                }
                              }
                            },
                            "_3.originType": {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "metadata": {
                                    "description": "Required. The name of the origion."
                                  }
                                },
                                "hostName": {
                                  "type": "string",
                                  "metadata": {
                                    "description": "Required. The address of the origin. Domain names, IPv4 addresses, and IPv6 addresses are supported.This should be unique across all origins in an endpoint."
                                  }
                                },
                                "enabledState": {
                                  "type": "string",
                                  "allowedValues": [
                                    "Disabled",
                                    "Enabled"
                                  ],
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Whether to enable health probes to be made against backends defined under backendPools. Health probes can only be disabled if there is a single enabled backend in single enabled backend pool."
                                  }
                                },
                                "enforceCertificateNameCheck": {
                                  "type": "bool",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Whether to enable certificate name check at origin level."
                                  }
                                },
                                "httpPort": {
                                  "type": "int",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The value of the HTTP port. Must be between 1 and 65535."
                                  }
                                },
                                "httpsPort": {
                                  "type": "int",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The value of the HTTPS port. Must be between 1 and 65535."
                                  }
                                },
                                "originHostHeader": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The host header value sent to the origin with each request. If you leave this blank, the request hostname determines this value. Azure Front Door origins, such as Web Apps, Blob Storage, and Cloud Services require this host header value to match the origin hostname by default. This overrides the host header defined at Endpoint."
                                  }
                                },
                                "priority": {
                                  "type": "int",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Priority of origin in given origin group for load balancing. Higher priorities will not be used for load balancing if any lower priority origin is healthy.Must be between 1 and 5."
                                  }
                                },
                                "weight": {
                                  "type": "int",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Weight of the origin in given origin group for load balancing. Must be between 1 and 1000."
                                  }
                                },
                                "sharedPrivateLinkResource": {
                                  "type": "object",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The properties of the private link resource for private origin."
                                  }
                                }
                              },
                              "metadata": {
                                "__bicep_imported_from!": {
                                  "sourceTemplate": "origingroup/origin/main.bicep"
                                }
                              }
                            },
                            "afdEndpointType": {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "metadata": {
                                    "description": "Required. The name of the AFD Endpoint."
                                  }
                                },
                                "routes": {
                                  "type": "array",
                                  "items": {
                                    "$ref": "#/definitions/_1.routeType"
                                  },
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The list of routes for this AFD Endpoint."
                                  }
                                },
                                "tags": {
                                  "type": "object",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The tags for the AFD Endpoint."
                                  }
                                },
                                "autoGeneratedDomainNameLabelScope": {
                                  "type": "string",
                                  "allowedValues": [
                                    "NoReuse",
                                    "ResourceGroupReuse",
                                    "SubscriptionReuse",
                                    "TenantReuse"
                                  ],
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The scope of the auto-generated domain name label."
                                  }
                                },
                                "enabledState": {
                                  "type": "string",
                                  "allowedValues": [
                                    "Disabled",
                                    "Enabled"
                                  ],
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The state of the AFD Endpoint."
                                  }
                                }
                              },
                              "metadata": {
                                "__bicep_imported_from!": {
                                  "sourceTemplate": "afdEndpoint/main.bicep"
                                }
                              }
                            },
                            "associationsType": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "domains": {
                                    "type": "array",
                                    "items": {
                                      "type": "object",
                                      "properties": {
                                        "id": {
                                          "type": "string",
                                          "metadata": {
                                            "description": "Required. ResourceID to domain that will be associated."
                                          }
                                        }
                                      }
                                    },
                                    "metadata": {
                                      "description": "Required. List of domain resource id to associate with this resource."
                                    }
                                  },
                                  "patternsToMatch": {
                                    "type": "array",
                                    "items": {
                                      "type": "string"
                                    },
                                    "metadata": {
                                      "description": "Required. List of patterns to match with this association."
                                    }
                                  }
                                }
                              },
                              "metadata": {
                                "__bicep_imported_from!": {
                                  "sourceTemplate": "securityPolicies/main.bicep"
                                }
                              }
                            },
                            "customDomainType": {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "metadata": {
                                    "description": "Required. The name of the custom domain."
                                  }
                                },
                                "hostName": {
                                  "type": "string",
                                  "metadata": {
                                    "description": "Required. The host name of the custom domain."
                                  }
                                },
                                "certificateType": {
                                  "type": "string",
                                  "allowedValues": [
                                    "AzureFirstPartyManagedCertificate",
                                    "CustomerCertificate",
                                    "ManagedCertificate"
                                  ],
                                  "metadata": {
                                    "description": "Required. The type of the certificate."
                                  }
                                },
                                "azureDnsZoneResourceId": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The resource ID of the Azure DNS zone."
                                  }
                                },
                                "preValidatedCustomDomainResourceId": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The resource ID of the pre-validated custom domain."
                                  }
                                },
                                "secretName": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The name of the secret."
                                  }
                                },
                                "minimumTlsVersion": {
                                  "type": "string",
                                  "allowedValues": [
                                    "TLS10",
                                    "TLS12"
                                  ],
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The minimum TLS version."
                                  }
                                },
                                "extendedProperties": {
                                  "type": "object",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Extended properties."
                                  }
                                }
                              },
                              "metadata": {
                                "__bicep_imported_from!": {
                                  "sourceTemplate": "customdomain/main.bicep"
                                }
                              }
                            },
                            "diagnosticSettingFullType": {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The name of the diagnostic setting."
                                  }
                                },
                                "logCategoriesAndGroups": {
                                  "type": "array",
                                  "items": {
                                    "type": "object",
                                    "properties": {
                                      "category": {
                                        "type": "string",
                                        "nullable": true,
                                        "metadata": {
                                          "description": "Optional. Name of a Diagnostic Log category for a resource type this setting is applied to. Set the specific logs to collect here."
                                        }
                                      },
                                      "categoryGroup": {
                                        "type": "string",
                                        "nullable": true,
                                        "metadata": {
                                          "description": "Optional. Name of a Diagnostic Log category group for a resource type this setting is applied to. Set to `allLogs` to collect all logs."
                                        }
                                      },
                                      "enabled": {
                                        "type": "bool",
                                        "nullable": true,
                                        "metadata": {
                                          "description": "Optional. Enable or disable the category explicitly. Default is `true`."
                                        }
                                      }
                                    }
                                  },
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The name of logs that will be streamed. \"allLogs\" includes all possible logs for the resource. Set to `[]` to disable log collection."
                                  }
                                },
                                "metricCategories": {
                                  "type": "array",
                                  "items": {
                                    "type": "object",
                                    "properties": {
                                      "category": {
                                        "type": "string",
                                        "metadata": {
                                          "description": "Required. Name of a Diagnostic Metric category for a resource type this setting is applied to. Set to `AllMetrics` to collect all metrics."
                                        }
                                      },
                                      "enabled": {
                                        "type": "bool",
                                        "nullable": true,
                                        "metadata": {
                                          "description": "Optional. Enable or disable the category explicitly. Default is `true`."
                                        }
                                      }
                                    }
                                  },
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The name of metrics that will be streamed. \"allMetrics\" includes all possible metrics for the resource. Set to `[]` to disable metric collection."
                                  }
                                },
                                "logAnalyticsDestinationType": {
                                  "type": "string",
                                  "allowedValues": [
                                    "AzureDiagnostics",
                                    "Dedicated"
                                  ],
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. A string indicating whether the export to Log Analytics should use the default destination type, i.e. AzureDiagnostics, or use a destination type."
                                  }
                                },
                                "workspaceResourceId": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Resource ID of the diagnostic log analytics workspace. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                                  }
                                },
                                "storageAccountResourceId": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Resource ID of the diagnostic storage account. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                                  }
                                },
                                "eventHubAuthorizationRuleResourceId": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Resource ID of the diagnostic event hub authorization rule for the Event Hubs namespace in which the event hub should be created or streamed to."
                                  }
                                },
                                "eventHubName": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Name of the diagnostic event hub within the namespace to which logs are streamed. Without this, an event hub is created for each log category. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                                  }
                                },
                                "marketplacePartnerResourceId": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The full ARM resource ID of the Marketplace resource to which you would like to send Diagnostic Logs."
                                  }
                                }
                              },
                              "metadata": {
                                "description": "An AVM-aligned type for a diagnostic setting. To be used if both logs & metrics are supported by the resource provider.",
                                "__bicep_imported_from!": {
                                  "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.4.0"
                                }
                              }
                            },
                            "dnsValidationType": {
                              "type": "object",
                              "properties": {
                                "dnsTxtRecordName": {
                                  "type": "string",
                                  "metadata": {
                                    "description": "Required. The DNS record name."
                                  }
                                },
                                "dnsTxtRecordValue": {
                                  "type": "string",
                                  "metadata": {
                                    "description": "Required. The DNS record value."
                                  }
                                },
                                "dnsTxtRecordExpiry": {
                                  "type": "string",
                                  "metadata": {
                                    "description": "Required. The expiry date of the DNS record."
                                  }
                                }
                              },
                              "metadata": {
                                "__bicep_imported_from!": {
                                  "sourceTemplate": "customdomain/main.bicep"
                                }
                              }
                            },
                            "originGroupType": {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "metadata": {
                                    "description": "Required. The name of the origin group."
                                  }
                                },
                                "loadBalancingSettings": {
                                  "$ref": "#/definitions/_2.loadBalancingSettingsType",
                                  "metadata": {
                                    "description": "Required. Load balancing settings for a backend pool."
                                  }
                                },
                                "healthProbeSettings": {
                                  "$ref": "#/definitions/_2.healthProbeSettingsType",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Health probe settings to the origin that is used to determine the health of the origin."
                                  }
                                },
                                "sessionAffinityState": {
                                  "type": "string",
                                  "allowedValues": [
                                    "Disabled",
                                    "Enabled"
                                  ],
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Whether to allow session affinity on this host."
                                  }
                                },
                                "trafficRestorationTimeToHealedOrNewEndpointsInMinutes": {
                                  "type": "int",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Time in minutes to shift the traffic to the endpoint gradually when an unhealthy endpoint comes healthy or a new endpoint is added. Default is 10 mins."
                                  }
                                },
                                "origins": {
                                  "type": "array",
                                  "items": {
                                    "$ref": "#/definitions/_3.originType"
                                  },
                                  "metadata": {
                                    "description": "Required. The list of origins within the origin group."
                                  }
                                }
                              },
                              "metadata": {
                                "__bicep_imported_from!": {
                                  "sourceTemplate": "origingroup/main.bicep"
                                }
                              }
                            },
                            "originType": {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "metadata": {
                                    "description": "Required. The name of the origion."
                                  }
                                },
                                "hostName": {
                                  "type": "string",
                                  "metadata": {
                                    "description": "Required. The address of the origin. Domain names, IPv4 addresses, and IPv6 addresses are supported.This should be unique across all origins in an endpoint."
                                  }
                                },
                                "enabledState": {
                                  "type": "string",
                                  "allowedValues": [
                                    "Disabled",
                                    "Enabled"
                                  ],
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Whether to enable health probes to be made against backends defined under backendPools. Health probes can only be disabled if there is a single enabled backend in single enabled backend pool."
                                  }
                                },
                                "enforceCertificateNameCheck": {
                                  "type": "bool",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Whether to enable certificate name check at origin level."
                                  }
                                },
                                "httpPort": {
                                  "type": "int",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The value of the HTTP port. Must be between 1 and 65535."
                                  }
                                },
                                "httpsPort": {
                                  "type": "int",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The value of the HTTPS port. Must be between 1 and 65535."
                                  }
                                },
                                "originHostHeader": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The host header value sent to the origin with each request. If you leave this blank, the request hostname determines this value. Azure Front Door origins, such as Web Apps, Blob Storage, and Cloud Services require this host header value to match the origin hostname by default. This overrides the host header defined at Endpoint."
                                  }
                                },
                                "priority": {
                                  "type": "int",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Priority of origin in given origin group for load balancing. Higher priorities will not be used for load balancing if any lower priority origin is healthy.Must be between 1 and 5."
                                  }
                                },
                                "weight": {
                                  "type": "int",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Weight of the origin in given origin group for load balancing. Must be between 1 and 1000."
                                  }
                                },
                                "sharedPrivateLinkResource": {
                                  "type": "object",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The properties of the private link resource for private origin."
                                  }
                                }
                              },
                              "metadata": {
                                "__bicep_imported_from!": {
                                  "sourceTemplate": "origingroup//origin/main.bicep"
                                }
                              }
                            },
                            "ruleSetType": {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "metadata": {
                                    "description": "Required. Name of the rule set."
                                  }
                                },
                                "rules": {
                                  "type": "array",
                                  "items": {
                                    "$ref": "#/definitions/ruleType"
                                  },
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Array of rules."
                                  }
                                }
                              },
                              "metadata": {
                                "__bicep_imported_from!": {
                                  "sourceTemplate": "ruleset/main.bicep"
                                }
                              }
                            },
                            "ruleType": {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "metadata": {
                                    "description": "Required. The name of the rule."
                                  }
                                },
                                "order": {
                                  "type": "int",
                                  "metadata": {
                                    "description": "Required. The order in which the rules are applied for the endpoint."
                                  }
                                },
                                "actions": {
                                  "type": "array",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. A list of actions that are executed when all the conditions of a rule are satisfied.."
                                  }
                                },
                                "conditions": {
                                  "type": "array",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. A list of conditions that must be matched for the actions to be executed."
                                  }
                                },
                                "matchProcessingBehavior": {
                                  "type": "string",
                                  "allowedValues": [
                                    "Continue",
                                    "Stop"
                                  ],
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. If this rule is a match should the rules engine continue running the remaining rules or stop. If not present, defaults to Continue."
                                  }
                                }
                              },
                              "metadata": {
                                "__bicep_imported_from!": {
                                  "sourceTemplate": "ruleset/rule/main.bicep"
                                }
                              }
                            }
                          },
                          "parameters": {
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. Name of the CDN profile."
                              }
                            },
                            "location": {
                              "type": "string",
                              "defaultValue": "[resourceGroup().location]",
                              "metadata": {
                                "description": "Optional. Location for all Resources."
                              }
                            },
                            "sku": {
                              "type": "string",
                              "allowedValues": [
                                "Premium_AzureFrontDoor",
                                "StandardPlus_955BandWidth_ChinaCdn",
                                "StandardPlus_AvgBandWidth_ChinaCdn",
                                "StandardPlus_ChinaCdn",
                                "Standard_955BandWidth_ChinaCdn",
                                "Standard_AvgBandWidth_ChinaCdn",
                                "Standard_AzureFrontDoor",
                                "Standard_ChinaCdn",
                                "Standard_Microsoft"
                              ],
                              "metadata": {
                                "description": "Required. The pricing tier (defines a CDN provider, feature list and rate) of the CDN profile."
                              }
                            },
                            "originResponseTimeoutSeconds": {
                              "type": "int",
                              "defaultValue": 60,
                              "metadata": {
                                "description": "Optional. Send and receive timeout on forwarding request to the origin."
                              }
                            },
                            "endpointName": {
                              "type": "string",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Name of the endpoint under the profile which is unique globally."
                              }
                            },
                            "endpointProperties": {
                              "type": "object",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Endpoint properties (see https://learn.microsoft.com/en-us/azure/templates/microsoft.cdn/profiles/endpoints?pivots=deployment-language-bicep#endpointproperties for details)."
                              }
                            },
                            "secrets": {
                              "type": "array",
                              "defaultValue": [],
                              "metadata": {
                                "description": "Optional. Array of secret objects."
                              }
                            },
                            "customDomains": {
                              "type": "array",
                              "items": {
                                "$ref": "#/definitions/customDomainType"
                              },
                              "defaultValue": [],
                              "metadata": {
                                "description": "Optional. Array of custom domain objects."
                              }
                            },
                            "originGroups": {
                              "type": "array",
                              "items": {
                                "$ref": "#/definitions/originGroupType"
                              },
                              "defaultValue": [],
                              "metadata": {
                                "description": "Conditional. Array of origin group objects. Required if the afdEndpoints is specified."
                              }
                            },
                            "ruleSets": {
                              "type": "array",
                              "items": {
                                "$ref": "#/definitions/ruleSetType"
                              },
                              "defaultValue": [],
                              "metadata": {
                                "description": "Optional. Array of rule set objects."
                              }
                            },
                            "afdEndpoints": {
                              "type": "array",
                              "items": {
                                "$ref": "#/definitions/afdEndpointType"
                              },
                              "defaultValue": [],
                              "metadata": {
                                "description": "Optional. Array of AFD endpoint objects."
                              }
                            },
                            "securityPolicies": {
                              "$ref": "#/definitions/securityPolicyType",
                              "defaultValue": [],
                              "metadata": {
                                "description": "Optional. Array of Security Policy objects (see https://learn.microsoft.com/en-us/azure/templates/microsoft.cdn/profiles/securitypolicies for details)."
                              }
                            },
                            "tags": {
                              "type": "object",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Endpoint tags."
                              }
                            },
                            "managedIdentities": {
                              "$ref": "#/definitions/managedIdentitiesType",
                              "metadata": {
                                "description": "Optional. The managed identity definition for this resource."
                              }
                            },
                            "lock": {
                              "$ref": "#/definitions/lockType",
                              "metadata": {
                                "description": "Optional. The lock settings of the service."
                              }
                            },
                            "roleAssignments": {
                              "$ref": "#/definitions/roleAssignmentType",
                              "metadata": {
                                "description": "Optional. Array of role assignments to create."
                              }
                            },
                            "enableTelemetry": {
                              "type": "bool",
                              "defaultValue": true,
                              "metadata": {
                                "description": "Optional. Enable/Disable usage telemetry for module."
                              }
                            },
                            "diagnosticSettings": {
                              "type": "array",
                              "items": {
                                "$ref": "#/definitions/diagnosticSettingFullType"
                              },
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. The diagnostic settings of the service."
                              }
                            }
                          },
                          "variables": {
                            "copy": [
                              {
                                "name": "formattedRoleAssignments",
                                "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]",
                                "input": "[union(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')], createObject('roleDefinitionId', coalesce(tryGet(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName), if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName)))))]"
                              }
                            ],
                            "builtInRoleNames": {
                              "CDN Endpoint Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '426e0c7f-0c7e-4658-b36f-ff54d6c29b45')]",
                              "CDN Endpoint Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '871e35f6-b5c1-49cc-a043-bde969a0f2cd')]",
                              "CDN Profile Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'ec156ff8-a8d1-4d15-830c-5b80698ca432')]",
                              "CDN Profile Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8f96442b-4075-438f-813d-ad51ab4019af')]",
                              "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                              "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                              "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                              "Role Based Access Control Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]",
                              "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]"
                            },
                            "formattedUserAssignedIdentities": "[reduce(map(coalesce(tryGet(parameters('managedIdentities'), 'userAssignedResourceIds'), createArray()), lambda('id', createObject(format('{0}', lambdaVariables('id')), createObject()))), createObject(), lambda('cur', 'next', union(lambdaVariables('cur'), lambdaVariables('next'))))]",
                            "identity": "[if(not(empty(parameters('managedIdentities'))), createObject('type', if(coalesce(tryGet(parameters('managedIdentities'), 'systemAssigned'), false()), if(not(empty(coalesce(tryGet(parameters('managedIdentities'), 'userAssignedResourceIds'), createObject()))), 'SystemAssigned,UserAssigned', 'SystemAssigned'), if(not(empty(coalesce(tryGet(parameters('managedIdentities'), 'userAssignedResourceIds'), createObject()))), 'UserAssigned', 'None')), 'userAssignedIdentities', if(not(empty(variables('formattedUserAssignedIdentities'))), variables('formattedUserAssignedIdentities'), null())), null())]"
                          },
                          "resources": {
                            "avmTelemetry": {
                              "condition": "[parameters('enableTelemetry')]",
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2024-03-01",
                              "name": "[format('46d3xbcp.res.cdn-profile.{0}.{1}', replace('0.11.0', '.', '-'), substring(uniqueString(deployment().name, parameters('location')), 0, 4))]",
                              "properties": {
                                "mode": "Incremental",
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "resources": [],
                                  "outputs": {
                                    "telemetry": {
                                      "type": "String",
                                      "value": "For more information, see https://aka.ms/avm/TelemetryInfo"
                                    }
                                  }
                                }
                              }
                            },
                            "profile": {
                              "type": "Microsoft.Cdn/profiles",
                              "apiVersion": "2023-05-01",
                              "name": "[parameters('name')]",
                              "location": "[parameters('location')]",
                              "identity": "[variables('identity')]",
                              "sku": {
                                "name": "[parameters('sku')]"
                              },
                              "properties": {
                                "originResponseTimeoutSeconds": "[parameters('originResponseTimeoutSeconds')]"
                              },
                              "tags": "[parameters('tags')]"
                            },
                            "profile_lock": {
                              "condition": "[and(not(empty(coalesce(parameters('lock'), createObject()))), not(equals(tryGet(parameters('lock'), 'kind'), 'None')))]",
                              "type": "Microsoft.Authorization/locks",
                              "apiVersion": "2020-05-01",
                              "scope": "[format('Microsoft.Cdn/profiles/{0}', parameters('name'))]",
                              "name": "[coalesce(tryGet(parameters('lock'), 'name'), format('lock-{0}', parameters('name')))]",
                              "properties": {
                                "level": "[coalesce(tryGet(parameters('lock'), 'kind'), '')]",
                                "notes": "[if(equals(tryGet(parameters('lock'), 'kind'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot delete or modify the resource or child resources.')]"
                              },
                              "dependsOn": [
                                "profile"
                              ]
                            },
                            "profile_roleAssignments": {
                              "copy": {
                                "name": "profile_roleAssignments",
                                "count": "[length(coalesce(variables('formattedRoleAssignments'), createArray()))]"
                              },
                              "type": "Microsoft.Authorization/roleAssignments",
                              "apiVersion": "2022-04-01",
                              "scope": "[format('Microsoft.Cdn/profiles/{0}', parameters('name'))]",
                              "name": "[coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'name'), guid(resourceId('Microsoft.Cdn/profiles', parameters('name')), coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId, coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId))]",
                              "properties": {
                                "roleDefinitionId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId]",
                                "principalId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId]",
                                "description": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'description')]",
                                "principalType": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'principalType')]",
                                "condition": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition')]",
                                "conditionVersion": "[if(not(empty(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                                "delegatedManagedIdentityResourceId": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
                              },
                              "dependsOn": [
                                "profile"
                              ]
                            },
                            "profile_diagnosticSettings": {
                              "copy": {
                                "name": "profile_diagnosticSettings",
                                "count": "[length(coalesce(parameters('diagnosticSettings'), createArray()))]"
                              },
                              "type": "Microsoft.Insights/diagnosticSettings",
                              "apiVersion": "2021-05-01-preview",
                              "scope": "[format('Microsoft.Cdn/profiles/{0}', parameters('name'))]",
                              "name": "[coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'name'), format('{0}-diagnosticSettings', parameters('name')))]",
                              "properties": {
                                "copy": [
                                  {
                                    "name": "metrics",
                                    "count": "[length(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics'))))]",
                                    "input": {
                                      "category": "[coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics')))[copyIndex('metrics')].category]",
                                      "enabled": "[coalesce(tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics')))[copyIndex('metrics')], 'enabled'), true())]",
                                      "timeGrain": null
                                    }
                                  },
                                  {
                                    "name": "logs",
                                    "count": "[length(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs'))))]",
                                    "input": {
                                      "categoryGroup": "[tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'categoryGroup')]",
                                      "category": "[tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'category')]",
                                      "enabled": "[coalesce(tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'enabled'), true())]"
                                    }
                                  }
                                ],
                                "storageAccountId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'storageAccountResourceId')]",
                                "workspaceId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'workspaceResourceId')]",
                                "eventHubAuthorizationRuleId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'eventHubAuthorizationRuleResourceId')]",
                                "eventHubName": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'eventHubName')]",
                                "marketplacePartnerId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'marketplacePartnerResourceId')]",
                                "logAnalyticsDestinationType": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logAnalyticsDestinationType')]"
                              },
                              "dependsOn": [
                                "profile"
                              ]
                            },
                            "profile_endpoint": {
                              "condition": "[not(empty(parameters('endpointProperties')))]",
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "[format('{0}-Profile-Endpoint', uniqueString(deployment().name, parameters('location')))]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "name": {
                                    "value": "[coalesce(parameters('endpointName'), format('{0}-endpoint', parameters('name')))]"
                                  },
                                  "properties": {
                                    "value": "[coalesce(parameters('endpointProperties'), createObject())]"
                                  },
                                  "location": {
                                    "value": "[parameters('location')]"
                                  },
                                  "profileName": {
                                    "value": "[parameters('name')]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "languageVersion": "2.0",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.32.4.45862",
                                      "templateHash": "12158435617192568330"
                                    },
                                    "name": "CDN Profiles Endpoints",
                                    "description": "This module deploys a CDN Profile Endpoint.",
                                    "owner": "Azure/module-maintainers"
                                  },
                                  "parameters": {
                                    "profileName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Conditional. The name of the parent CDN profile. Required if the template is used in a standalone deployment."
                                      }
                                    },
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. Name of the endpoint under the profile which is unique globally."
                                      }
                                    },
                                    "location": {
                                      "type": "string",
                                      "defaultValue": "[resourceGroup().location]",
                                      "metadata": {
                                        "description": "Optional. Resource location."
                                      }
                                    },
                                    "properties": {
                                      "type": "object",
                                      "metadata": {
                                        "description": "Required. Endpoint properties (see https://learn.microsoft.com/en-us/azure/templates/microsoft.cdn/profiles/endpoints?pivots=deployment-language-bicep#endpointproperties for details)."
                                      }
                                    },
                                    "tags": {
                                      "type": "object",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. Endpoint tags."
                                      }
                                    }
                                  },
                                  "resources": {
                                    "profile": {
                                      "existing": true,
                                      "type": "Microsoft.Cdn/profiles",
                                      "apiVersion": "2021-06-01",
                                      "name": "[parameters('profileName')]"
                                    },
                                    "endpoint": {
                                      "type": "Microsoft.Cdn/profiles/endpoints",
                                      "apiVersion": "2021-06-01",
                                      "name": "[format('{0}/{1}', parameters('profileName'), parameters('name'))]",
                                      "location": "[parameters('location')]",
                                      "properties": "[parameters('properties')]",
                                      "tags": "[parameters('tags')]"
                                    },
                                    "endpoint_origins": {
                                      "copy": {
                                        "name": "endpoint_origins",
                                        "count": "[length(parameters('properties').origins)]"
                                      },
                                      "type": "Microsoft.Resources/deployments",
                                      "apiVersion": "2022-09-01",
                                      "name": "[format('{0}-origins-{1}', parameters('name'), parameters('properties').origins[copyIndex()].name)]",
                                      "properties": {
                                        "expressionEvaluationOptions": {
                                          "scope": "inner"
                                        },
                                        "mode": "Incremental",
                                        "parameters": {
                                          "profileName": {
                                            "value": "[parameters('profileName')]"
                                          },
                                          "endpointName": {
                                            "value": "[parameters('name')]"
                                          },
                                          "name": {
                                            "value": "[parameters('properties').origins[copyIndex()].name]"
                                          },
                                          "hostName": {
                                            "value": "[parameters('properties').origins[copyIndex()].properties.hostName]"
                                          },
                                          "httpPort": {
                                            "value": "[tryGet(parameters('properties').origins[copyIndex()].properties, 'httpPort')]"
                                          },
                                          "httpsPort": {
                                            "value": "[tryGet(parameters('properties').origins[copyIndex()].properties, 'httpsPort')]"
                                          },
                                          "enabled": {
                                            "value": "[parameters('properties').origins[copyIndex()].properties.enabled]"
                                          },
                                          "priority": {
                                            "value": "[tryGet(parameters('properties').origins[copyIndex()].properties, 'priority')]"
                                          },
                                          "weight": {
                                            "value": "[tryGet(parameters('properties').origins[copyIndex()].properties, 'weight')]"
                                          },
                                          "originHostHeader": {
                                            "value": "[tryGet(parameters('properties').origins[copyIndex()].properties, 'originHostHeader')]"
                                          },
                                          "privateLinkAlias": {
                                            "value": "[tryGet(parameters('properties').origins[copyIndex()].properties, 'privateLinkAlias')]"
                                          },
                                          "privateLinkLocation": {
                                            "value": "[tryGet(parameters('properties').origins[copyIndex()].properties, 'privateLinkLocation')]"
                                          },
                                          "privateLinkResourceId": {
                                            "value": "[tryGet(parameters('properties').origins[copyIndex()].properties, 'privateLinkResourceId')]"
                                          }
                                        },
                                        "template": {
                                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                          "languageVersion": "2.0",
                                          "contentVersion": "1.0.0.0",
                                          "metadata": {
                                            "_generator": {
                                              "name": "bicep",
                                              "version": "0.32.4.45862",
                                              "templateHash": "1967881427631941882"
                                            },
                                            "name": "CDN Profiles Endpoints Origins",
                                            "description": "This module deploys a CDN Profile Endpoint Origin.",
                                            "owner": "Azure/module-maintainers"
                                          },
                                          "parameters": {
                                            "endpointName": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "Required. The name of the CDN Endpoint."
                                              }
                                            },
                                            "name": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "Required. The name of the origin."
                                              }
                                            },
                                            "enabled": {
                                              "type": "bool",
                                              "defaultValue": true,
                                              "metadata": {
                                                "description": "Optional. Whether the origin is enabled for load balancing."
                                              }
                                            },
                                            "hostName": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "Required. The hostname of the origin."
                                              }
                                            },
                                            "httpPort": {
                                              "type": "int",
                                              "defaultValue": 80,
                                              "metadata": {
                                                "description": "Optional. The HTTP port of the origin."
                                              }
                                            },
                                            "httpsPort": {
                                              "type": "int",
                                              "defaultValue": 443,
                                              "metadata": {
                                                "description": "Optional. The HTTPS port of the origin."
                                              }
                                            },
                                            "priority": {
                                              "type": "int",
                                              "defaultValue": -1,
                                              "metadata": {
                                                "description": "Conditional. The priority of origin in given origin group for load balancing. Required if `weight` is provided."
                                              }
                                            },
                                            "weight": {
                                              "type": "int",
                                              "defaultValue": -1,
                                              "metadata": {
                                                "description": "Conditional. The weight of the origin used for load balancing. Required if `priority` is provided."
                                              }
                                            },
                                            "privateLinkAlias": {
                                              "type": "string",
                                              "nullable": true,
                                              "metadata": {
                                                "description": "Conditional. The private link alias of the origin. Required if privateLinkLocation is provided."
                                              }
                                            },
                                            "privateLinkLocation": {
                                              "type": "string",
                                              "nullable": true,
                                              "metadata": {
                                                "description": "Conditional. The private link location of the origin. Required if privateLinkAlias is provided."
                                              }
                                            },
                                            "privateLinkResourceId": {
                                              "type": "string",
                                              "nullable": true,
                                              "metadata": {
                                                "description": "Optional. The private link resource ID of the origin."
                                              }
                                            },
                                            "originHostHeader": {
                                              "type": "string",
                                              "nullable": true,
                                              "metadata": {
                                                "description": "Optional. The host header value sent to the origin."
                                              }
                                            },
                                            "profileName": {
                                              "type": "string",
                                              "defaultValue": "default",
                                              "metadata": {
                                                "description": "Optional. The name of the CDN profile. Default to \"default\"."
                                              }
                                            }
                                          },
                                          "resources": {
                                            "profile": {
                                              "existing": true,
                                              "type": "Microsoft.Cdn/profiles",
                                              "apiVersion": "2021-06-01",
                                              "name": "[parameters('profileName')]"
                                            },
                                            "endpoint": {
                                              "existing": true,
                                              "type": "Microsoft.Cdn/profiles/endpoints",
                                              "apiVersion": "2021-06-01",
                                              "name": "[format('{0}/{1}', parameters('profileName'), parameters('endpointName'))]"
                                            },
                                            "origin": {
                                              "type": "Microsoft.Cdn/profiles/endpoints/origins",
                                              "apiVersion": "2021-06-01",
                                              "name": "[format('{0}/{1}/{2}', parameters('profileName'), parameters('endpointName'), parameters('name'))]",
                                              "properties": "[union(createObject('hostName', parameters('hostName'), 'httpPort', parameters('httpPort'), 'enabled', parameters('enabled'), 'httpsPort', parameters('httpsPort')), if(or(greater(parameters('priority'), 0), greater(parameters('weight'), 0)), createObject('priority', parameters('priority'), 'weight', parameters('weight')), createObject()), if(and(not(empty(parameters('privateLinkAlias'))), not(empty(parameters('privateLinkLocation')))), createObject('privateLinkAlias', parameters('privateLinkAlias'), 'privateLinkLocation', parameters('privateLinkLocation')), createObject()), if(not(empty(parameters('privateLinkResourceId'))), createObject('privateLinkResourceId', parameters('privateLinkResourceId')), createObject()), if(not(empty(parameters('originHostHeader'))), createObject('originHostHeader', parameters('originHostHeader')), createObject()))]"
                                            }
                                          },
                                          "outputs": {
                                            "name": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "The name of the endpoint."
                                              },
                                              "value": "[parameters('name')]"
                                            },
                                            "resourceId": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "The resource ID of the endpoint."
                                              },
                                              "value": "[resourceId('Microsoft.Cdn/profiles/endpoints/origins', parameters('profileName'), parameters('endpointName'), parameters('name'))]"
                                            },
                                            "resourceGroupName": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "The name of the resource group the endpoint was created in."
                                              },
                                              "value": "[resourceGroup().name]"
                                            },
                                            "location": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "The location the resource was deployed into."
                                              },
                                              "value": "[reference('endpoint', '2021-06-01', 'full').location]"
                                            }
                                          }
                                        }
                                      },
                                      "dependsOn": [
                                        "endpoint"
                                      ]
                                    }
                                  },
                                  "outputs": {
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the endpoint."
                                      },
                                      "value": "[parameters('name')]"
                                    },
                                    "resourceId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource ID of the endpoint."
                                      },
                                      "value": "[resourceId('Microsoft.Cdn/profiles/endpoints', parameters('profileName'), parameters('name'))]"
                                    },
                                    "resourceGroupName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the resource group the endpoint was created in."
                                      },
                                      "value": "[resourceGroup().name]"
                                    },
                                    "location": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The location the resource was deployed into."
                                      },
                                      "value": "[reference('endpoint', '2021-06-01', 'full').location]"
                                    },
                                    "endpointProperties": {
                                      "type": "object",
                                      "metadata": {
                                        "description": "The properties of the endpoint."
                                      },
                                      "value": "[reference('endpoint')]"
                                    },
                                    "uri": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The uri of the endpoint."
                                      },
                                      "value": "[format('https://{0}', reference('endpoint').hostName)]"
                                    }
                                  }
                                }
                              },
                              "dependsOn": [
                                "profile"
                              ]
                            },
                            "profile_secrets": {
                              "copy": {
                                "name": "profile_secrets",
                                "count": "[length(parameters('secrets'))]"
                              },
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "[format('{0}-Profile-Secret-{1}', uniqueString(deployment().name), copyIndex())]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "name": {
                                    "value": "[parameters('secrets')[copyIndex()].name]"
                                  },
                                  "profileName": {
                                    "value": "[parameters('name')]"
                                  },
                                  "type": {
                                    "value": "[parameters('secrets')[copyIndex()].type]"
                                  },
                                  "secretSourceResourceId": {
                                    "value": "[parameters('secrets')[copyIndex()].secretSourceResourceId]"
                                  },
                                  "subjectAlternativeNames": {
                                    "value": "[tryGet(parameters('secrets')[copyIndex()], 'subjectAlternativeNames')]"
                                  },
                                  "useLatestVersion": {
                                    "value": "[tryGet(parameters('secrets')[copyIndex()], 'useLatestVersion')]"
                                  },
                                  "secretVersion": {
                                    "value": "[parameters('secrets')[copyIndex()].secretVersion]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.32.4.45862",
                                      "templateHash": "6471061278844735033"
                                    },
                                    "name": "CDN Profiles Secret",
                                    "description": "This module deploys a CDN Profile Secret.",
                                    "owner": "Azure/module-maintainers"
                                  },
                                  "parameters": {
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The name of the secrect."
                                      }
                                    },
                                    "profileName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Conditional. The name of the parent CDN profile. Required if the template is used in a standalone deployment."
                                      }
                                    },
                                    "type": {
                                      "type": "string",
                                      "defaultValue": "AzureFirstPartyManagedCertificate",
                                      "allowedValues": [
                                        "AzureFirstPartyManagedCertificate",
                                        "CustomerCertificate",
                                        "ManagedCertificate",
                                        "UrlSigningKey"
                                      ],
                                      "metadata": {
                                        "description": "Optional. The type of the secrect."
                                      }
                                    },
                                    "secretSourceResourceId": {
                                      "type": "string",
                                      "defaultValue": "",
                                      "metadata": {
                                        "description": "Conditional. The resource ID of the secret source. Required if the `type` is \"CustomerCertificate\"."
                                      }
                                    },
                                    "secretVersion": {
                                      "type": "string",
                                      "defaultValue": "",
                                      "metadata": {
                                        "description": "Optional. The version of the secret."
                                      }
                                    },
                                    "subjectAlternativeNames": {
                                      "type": "array",
                                      "defaultValue": [],
                                      "metadata": {
                                        "description": "Optional. The subject alternative names of the secrect."
                                      }
                                    },
                                    "useLatestVersion": {
                                      "type": "bool",
                                      "defaultValue": false,
                                      "metadata": {
                                        "description": "Optional. Indicates whether to use the latest version of the secrect."
                                      }
                                    }
                                  },
                                  "resources": [
                                    {
                                      "type": "Microsoft.Cdn/profiles/secrets",
                                      "apiVersion": "2023-05-01",
                                      "name": "[format('{0}/{1}', parameters('profileName'), parameters('name'))]",
                                      "properties": {
                                        "parameters": "[if(equals(parameters('type'), 'CustomerCertificate'), createObject('type', parameters('type'), 'secretSource', createObject('id', parameters('secretSourceResourceId')), 'secretVersion', parameters('secretVersion'), 'subjectAlternativeNames', parameters('subjectAlternativeNames'), 'useLatestVersion', parameters('useLatestVersion')), null())]"
                                      }
                                    }
                                  ],
                                  "outputs": {
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the secrect."
                                      },
                                      "value": "[parameters('name')]"
                                    },
                                    "resourceId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource ID of the secrect."
                                      },
                                      "value": "[resourceId('Microsoft.Cdn/profiles/secrets', parameters('profileName'), parameters('name'))]"
                                    },
                                    "resourceGroupName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the resource group the secret was created in."
                                      },
                                      "value": "[resourceGroup().name]"
                                    }
                                  }
                                }
                              },
                              "dependsOn": [
                                "profile"
                              ]
                            },
                            "profile_customDomains": {
                              "copy": {
                                "name": "profile_customDomains",
                                "count": "[length(parameters('customDomains'))]"
                              },
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "[format('{0}-CustomDomain-{1}', uniqueString(deployment().name), copyIndex())]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "name": {
                                    "value": "[parameters('customDomains')[copyIndex()].name]"
                                  },
                                  "profileName": {
                                    "value": "[parameters('name')]"
                                  },
                                  "hostName": {
                                    "value": "[parameters('customDomains')[copyIndex()].hostName]"
                                  },
                                  "azureDnsZoneResourceId": {
                                    "value": "[tryGet(parameters('customDomains')[copyIndex()], 'azureDnsZoneResourceId')]"
                                  },
                                  "extendedProperties": {
                                    "value": "[tryGet(parameters('customDomains')[copyIndex()], 'extendedProperties')]"
                                  },
                                  "certificateType": {
                                    "value": "[parameters('customDomains')[copyIndex()].certificateType]"
                                  },
                                  "minimumTlsVersion": {
                                    "value": "[tryGet(parameters('customDomains')[copyIndex()], 'minimumTlsVersion')]"
                                  },
                                  "preValidatedCustomDomainResourceId": {
                                    "value": "[tryGet(parameters('customDomains')[copyIndex()], 'preValidatedCustomDomainResourceId')]"
                                  },
                                  "secretName": {
                                    "value": "[tryGet(parameters('customDomains')[copyIndex()], 'secretName')]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "languageVersion": "2.0",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.32.4.45862",
                                      "templateHash": "12647886167890211057"
                                    },
                                    "name": "CDN Profiles Custom Domains",
                                    "description": "This module deploys a CDN Profile Custom Domains.",
                                    "owner": "Azure/module-maintainers"
                                  },
                                  "definitions": {
                                    "customDomainType": {
                                      "type": "object",
                                      "properties": {
                                        "name": {
                                          "type": "string",
                                          "metadata": {
                                            "description": "Required. The name of the custom domain."
                                          }
                                        },
                                        "hostName": {
                                          "type": "string",
                                          "metadata": {
                                            "description": "Required. The host name of the custom domain."
                                          }
                                        },
                                        "certificateType": {
                                          "type": "string",
                                          "allowedValues": [
                                            "AzureFirstPartyManagedCertificate",
                                            "CustomerCertificate",
                                            "ManagedCertificate"
                                          ],
                                          "metadata": {
                                            "description": "Required. The type of the certificate."
                                          }
                                        },
                                        "azureDnsZoneResourceId": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The resource ID of the Azure DNS zone."
                                          }
                                        },
                                        "preValidatedCustomDomainResourceId": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The resource ID of the pre-validated custom domain."
                                          }
                                        },
                                        "secretName": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The name of the secret."
                                          }
                                        },
                                        "minimumTlsVersion": {
                                          "type": "string",
                                          "allowedValues": [
                                            "TLS10",
                                            "TLS12"
                                          ],
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The minimum TLS version."
                                          }
                                        },
                                        "extendedProperties": {
                                          "type": "object",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. Extended properties."
                                          }
                                        }
                                      },
                                      "metadata": {
                                        "__bicep_export!": true
                                      }
                                    },
                                    "dnsValidationType": {
                                      "type": "object",
                                      "properties": {
                                        "dnsTxtRecordName": {
                                          "type": "string",
                                          "metadata": {
                                            "description": "Required. The DNS record name."
                                          }
                                        },
                                        "dnsTxtRecordValue": {
                                          "type": "string",
                                          "metadata": {
                                            "description": "Required. The DNS record value."
                                          }
                                        },
                                        "dnsTxtRecordExpiry": {
                                          "type": "string",
                                          "metadata": {
                                            "description": "Required. The expiry date of the DNS record."
                                          }
                                        }
                                      },
                                      "metadata": {
                                        "__bicep_export!": true
                                      }
                                    }
                                  },
                                  "parameters": {
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The name of the custom domain."
                                      }
                                    },
                                    "profileName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The name of the CDN profile."
                                      }
                                    },
                                    "hostName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The host name of the domain. Must be a domain name."
                                      }
                                    },
                                    "azureDnsZoneResourceId": {
                                      "type": "string",
                                      "defaultValue": "",
                                      "metadata": {
                                        "description": "Optonal. Resource reference to the Azure DNS zone."
                                      }
                                    },
                                    "extendedProperties": {
                                      "type": "object",
                                      "defaultValue": {},
                                      "metadata": {
                                        "description": "Optional. Key-Value pair representing migration properties for domains."
                                      }
                                    },
                                    "preValidatedCustomDomainResourceId": {
                                      "type": "string",
                                      "defaultValue": "",
                                      "metadata": {
                                        "description": "Optional. Resource reference to the Azure resource where custom domain ownership was prevalidated."
                                      }
                                    },
                                    "certificateType": {
                                      "type": "string",
                                      "allowedValues": [
                                        "AzureFirstPartyManagedCertificate",
                                        "CustomerCertificate",
                                        "ManagedCertificate"
                                      ],
                                      "metadata": {
                                        "description": "Required. The type of the certificate used for secure delivery."
                                      }
                                    },
                                    "minimumTlsVersion": {
                                      "type": "string",
                                      "defaultValue": "TLS12",
                                      "allowedValues": [
                                        "TLS10",
                                        "TLS12"
                                      ],
                                      "metadata": {
                                        "description": "Optional. The minimum TLS version required for the custom domain. Default value: TLS12."
                                      }
                                    },
                                    "secretName": {
                                      "type": "string",
                                      "defaultValue": "",
                                      "metadata": {
                                        "description": "Optional. The name of the secret. ie. subs/rg/profile/secret."
                                      }
                                    }
                                  },
                                  "resources": {
                                    "profile::secrect": {
                                      "condition": "[not(empty(parameters('secretName')))]",
                                      "existing": true,
                                      "type": "Microsoft.Cdn/profiles/secrets",
                                      "apiVersion": "2023-05-01",
                                      "name": "[format('{0}/{1}', parameters('profileName'), parameters('secretName'))]"
                                    },
                                    "profile": {
                                      "existing": true,
                                      "type": "Microsoft.Cdn/profiles",
                                      "apiVersion": "2023-05-01",
                                      "name": "[parameters('profileName')]"
                                    },
                                    "customDomain": {
                                      "type": "Microsoft.Cdn/profiles/customDomains",
                                      "apiVersion": "2023-05-01",
                                      "name": "[format('{0}/{1}', parameters('profileName'), parameters('name'))]",
                                      "properties": {
                                        "azureDnsZone": "[if(not(empty(parameters('azureDnsZoneResourceId'))), createObject('id', parameters('azureDnsZoneResourceId')), null())]",
                                        "extendedProperties": "[if(not(empty(parameters('extendedProperties'))), parameters('extendedProperties'), null())]",
                                        "hostName": "[parameters('hostName')]",
                                        "preValidatedCustomDomainResourceId": "[if(not(empty(parameters('preValidatedCustomDomainResourceId'))), createObject('id', parameters('preValidatedCustomDomainResourceId')), null())]",
                                        "tlsSettings": {
                                          "certificateType": "[parameters('certificateType')]",
                                          "minimumTlsVersion": "[parameters('minimumTlsVersion')]",
                                          "secret": "[if(not(empty(parameters('secretName'))), createObject('id', resourceId('Microsoft.Cdn/profiles/secrets', parameters('profileName'), parameters('secretName'))), null())]"
                                        }
                                      }
                                    }
                                  },
                                  "outputs": {
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the custom domain."
                                      },
                                      "value": "[parameters('name')]"
                                    },
                                    "resourceId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource id of the custom domain."
                                      },
                                      "value": "[resourceId('Microsoft.Cdn/profiles/customDomains', parameters('profileName'), parameters('name'))]"
                                    },
                                    "resourceGroupName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the resource group the custom domain was created in."
                                      },
                                      "value": "[resourceGroup().name]"
                                    },
                                    "dnsValidation": {
                                      "$ref": "#/definitions/dnsValidationType",
                                      "metadata": {
                                        "description": "The DNS validation records."
                                      },
                                      "value": {
                                        "dnsTxtRecordName": "[format('_dnsauth.{0}', reference('customDomain').hostName)]",
                                        "dnsTxtRecordValue": "[reference('customDomain').validationProperties.validationToken]",
                                        "dnsTxtRecordExpiry": "[reference('customDomain').validationProperties.expirationDate]"
                                      }
                                    }
                                  }
                                }
                              },
                              "dependsOn": [
                                "profile",
                                "profile_secrets"
                              ]
                            },
                            "profile_originGroups": {
                              "copy": {
                                "name": "profile_originGroups",
                                "count": "[length(parameters('originGroups'))]"
                              },
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "[format('{0}-Profile-OriginGroup-{1}', uniqueString(deployment().name), copyIndex())]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "name": {
                                    "value": "[parameters('originGroups')[copyIndex()].name]"
                                  },
                                  "profileName": {
                                    "value": "[parameters('name')]"
                                  },
                                  "loadBalancingSettings": {
                                    "value": "[parameters('originGroups')[copyIndex()].loadBalancingSettings]"
                                  },
                                  "healthProbeSettings": {
                                    "value": "[tryGet(parameters('originGroups')[copyIndex()], 'healthProbeSettings')]"
                                  },
                                  "sessionAffinityState": {
                                    "value": "[tryGet(parameters('originGroups')[copyIndex()], 'sessionAffinityState')]"
                                  },
                                  "trafficRestorationTimeToHealedOrNewEndpointsInMinutes": {
                                    "value": "[tryGet(parameters('originGroups')[copyIndex()], 'trafficRestorationTimeToHealedOrNewEndpointsInMinutes')]"
                                  },
                                  "origins": {
                                    "value": "[parameters('originGroups')[copyIndex()].origins]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "languageVersion": "2.0",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.32.4.45862",
                                      "templateHash": "3450465162010752754"
                                    },
                                    "name": "CDN Profiles Origin Group",
                                    "description": "This module deploys a CDN Profile Origin Group.",
                                    "owner": "Azure/module-maintainers"
                                  },
                                  "definitions": {
                                    "originGroupType": {
                                      "type": "object",
                                      "properties": {
                                        "name": {
                                          "type": "string",
                                          "metadata": {
                                            "description": "Required. The name of the origin group."
                                          }
                                        },
                                        "loadBalancingSettings": {
                                          "$ref": "#/definitions/loadBalancingSettingsType",
                                          "metadata": {
                                            "description": "Required. Load balancing settings for a backend pool."
                                          }
                                        },
                                        "healthProbeSettings": {
                                          "$ref": "#/definitions/healthProbeSettingsType",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. Health probe settings to the origin that is used to determine the health of the origin."
                                          }
                                        },
                                        "sessionAffinityState": {
                                          "type": "string",
                                          "allowedValues": [
                                            "Disabled",
                                            "Enabled"
                                          ],
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. Whether to allow session affinity on this host."
                                          }
                                        },
                                        "trafficRestorationTimeToHealedOrNewEndpointsInMinutes": {
                                          "type": "int",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. Time in minutes to shift the traffic to the endpoint gradually when an unhealthy endpoint comes healthy or a new endpoint is added. Default is 10 mins."
                                          }
                                        },
                                        "origins": {
                                          "type": "array",
                                          "items": {
                                            "$ref": "#/definitions/originType"
                                          },
                                          "metadata": {
                                            "description": "Required. The list of origins within the origin group."
                                          }
                                        }
                                      },
                                      "metadata": {
                                        "__bicep_export!": true
                                      }
                                    },
                                    "loadBalancingSettingsType": {
                                      "type": "object",
                                      "properties": {
                                        "additionalLatencyInMilliseconds": {
                                          "type": "int",
                                          "metadata": {
                                            "description": "Required. Additional latency in milliseconds for probes to the backend. Must be between 0 and 1000."
                                          }
                                        },
                                        "sampleSize": {
                                          "type": "int",
                                          "metadata": {
                                            "description": "Required. Number of samples to consider for load balancing decisions."
                                          }
                                        },
                                        "successfulSamplesRequired": {
                                          "type": "int",
                                          "metadata": {
                                            "description": "Required. Number of samples within the sample window that must be successful to mark the backend as healthy."
                                          }
                                        }
                                      },
                                      "metadata": {
                                        "__bicep_export!": true
                                      }
                                    },
                                    "healthProbeSettingsType": {
                                      "type": "object",
                                      "properties": {
                                        "probePath": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The path relative to the origin that is used to determine the health of the origin."
                                          }
                                        },
                                        "probeProtocol": {
                                          "type": "string",
                                          "allowedValues": [
                                            "Http",
                                            "Https",
                                            "NotSet"
                                          ],
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. Protocol to use for health probe."
                                          }
                                        },
                                        "probeRequestType": {
                                          "type": "string",
                                          "allowedValues": [
                                            "GET",
                                            "HEAD",
                                            "NotSet"
                                          ],
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The request type to probe."
                                          }
                                        },
                                        "probeIntervalInSeconds": {
                                          "type": "int",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The number of seconds between health probes.Default is 240sec."
                                          }
                                        }
                                      },
                                      "metadata": {
                                        "__bicep_export!": true
                                      }
                                    },
                                    "originType": {
                                      "type": "object",
                                      "properties": {
                                        "name": {
                                          "type": "string",
                                          "metadata": {
                                            "description": "Required. The name of the origion."
                                          }
                                        },
                                        "hostName": {
                                          "type": "string",
                                          "metadata": {
                                            "description": "Required. The address of the origin. Domain names, IPv4 addresses, and IPv6 addresses are supported.This should be unique across all origins in an endpoint."
                                          }
                                        },
                                        "enabledState": {
                                          "type": "string",
                                          "allowedValues": [
                                            "Disabled",
                                            "Enabled"
                                          ],
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. Whether to enable health probes to be made against backends defined under backendPools. Health probes can only be disabled if there is a single enabled backend in single enabled backend pool."
                                          }
                                        },
                                        "enforceCertificateNameCheck": {
                                          "type": "bool",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. Whether to enable certificate name check at origin level."
                                          }
                                        },
                                        "httpPort": {
                                          "type": "int",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The value of the HTTP port. Must be between 1 and 65535."
                                          }
                                        },
                                        "httpsPort": {
                                          "type": "int",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The value of the HTTPS port. Must be between 1 and 65535."
                                          }
                                        },
                                        "originHostHeader": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The host header value sent to the origin with each request. If you leave this blank, the request hostname determines this value. Azure Front Door origins, such as Web Apps, Blob Storage, and Cloud Services require this host header value to match the origin hostname by default. This overrides the host header defined at Endpoint."
                                          }
                                        },
                                        "priority": {
                                          "type": "int",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. Priority of origin in given origin group for load balancing. Higher priorities will not be used for load balancing if any lower priority origin is healthy.Must be between 1 and 5."
                                          }
                                        },
                                        "weight": {
                                          "type": "int",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. Weight of the origin in given origin group for load balancing. Must be between 1 and 1000."
                                          }
                                        },
                                        "sharedPrivateLinkResource": {
                                          "type": "object",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The properties of the private link resource for private origin."
                                          }
                                        }
                                      },
                                      "metadata": {
                                        "__bicep_imported_from!": {
                                          "sourceTemplate": "origin/main.bicep"
                                        }
                                      }
                                    }
                                  },
                                  "parameters": {
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The name of the origin group."
                                      }
                                    },
                                    "profileName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The name of the CDN profile."
                                      }
                                    },
                                    "healthProbeSettings": {
                                      "type": "object",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. Health probe settings to the origin that is used to determine the health of the origin."
                                      }
                                    },
                                    "loadBalancingSettings": {
                                      "type": "object",
                                      "metadata": {
                                        "description": "Required. Load balancing settings for a backend pool."
                                      }
                                    },
                                    "sessionAffinityState": {
                                      "type": "string",
                                      "defaultValue": "Disabled",
                                      "allowedValues": [
                                        "Disabled",
                                        "Enabled"
                                      ],
                                      "metadata": {
                                        "description": "Optional. Whether to allow session affinity on this host."
                                      }
                                    },
                                    "trafficRestorationTimeToHealedOrNewEndpointsInMinutes": {
                                      "type": "int",
                                      "defaultValue": 10,
                                      "metadata": {
                                        "description": "Optional. Time in minutes to shift the traffic to the endpoint gradually when an unhealthy endpoint comes healthy or a new endpoint is added. Default is 10 mins."
                                      }
                                    },
                                    "origins": {
                                      "type": "array",
                                      "metadata": {
                                        "description": "Required. The list of origins within the origin group."
                                      }
                                    }
                                  },
                                  "resources": {
                                    "profile": {
                                      "existing": true,
                                      "type": "Microsoft.Cdn/profiles",
                                      "apiVersion": "2023-05-01",
                                      "name": "[parameters('profileName')]"
                                    },
                                    "originGroup": {
                                      "type": "Microsoft.Cdn/profiles/originGroups",
                                      "apiVersion": "2023-05-01",
                                      "name": "[format('{0}/{1}', parameters('profileName'), parameters('name'))]",
                                      "properties": {
                                        "healthProbeSettings": "[parameters('healthProbeSettings')]",
                                        "loadBalancingSettings": "[parameters('loadBalancingSettings')]",
                                        "sessionAffinityState": "[parameters('sessionAffinityState')]",
                                        "trafficRestorationTimeToHealedOrNewEndpointsInMinutes": "[parameters('trafficRestorationTimeToHealedOrNewEndpointsInMinutes')]"
                                      }
                                    },
                                    "originGroup_origins": {
                                      "copy": {
                                        "name": "originGroup_origins",
                                        "count": "[length(parameters('origins'))]"
                                      },
                                      "type": "Microsoft.Resources/deployments",
                                      "apiVersion": "2022-09-01",
                                      "name": "[format('{0}-OriginGroup-Origin-{1}', uniqueString(deployment().name), copyIndex())]",
                                      "properties": {
                                        "expressionEvaluationOptions": {
                                          "scope": "inner"
                                        },
                                        "mode": "Incremental",
                                        "parameters": {
                                          "name": {
                                            "value": "[parameters('origins')[copyIndex()].name]"
                                          },
                                          "profileName": {
                                            "value": "[parameters('profileName')]"
                                          },
                                          "hostName": {
                                            "value": "[parameters('origins')[copyIndex()].hostName]"
                                          },
                                          "originGroupName": {
                                            "value": "[parameters('name')]"
                                          },
                                          "enabledState": {
                                            "value": "[tryGet(parameters('origins')[copyIndex()], 'enabledState')]"
                                          },
                                          "enforceCertificateNameCheck": {
                                            "value": "[tryGet(parameters('origins')[copyIndex()], 'enforceCertificateNameCheck')]"
                                          },
                                          "httpPort": {
                                            "value": "[tryGet(parameters('origins')[copyIndex()], 'httpPort')]"
                                          },
                                          "httpsPort": {
                                            "value": "[tryGet(parameters('origins')[copyIndex()], 'httpsPort')]"
                                          },
                                          "originHostHeader": {
                                            "value": "[coalesce(tryGet(parameters('origins')[copyIndex()], 'originHostHeader'), parameters('origins')[copyIndex()].hostName)]"
                                          },
                                          "priority": {
                                            "value": "[tryGet(parameters('origins')[copyIndex()], 'priority')]"
                                          },
                                          "weight": {
                                            "value": "[tryGet(parameters('origins')[copyIndex()], 'weight')]"
                                          },
                                          "sharedPrivateLinkResource": {
                                            "value": "[tryGet(parameters('origins')[copyIndex()], 'sharedPrivateLinkResource')]"
                                          }
                                        },
                                        "template": {
                                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                          "languageVersion": "2.0",
                                          "contentVersion": "1.0.0.0",
                                          "metadata": {
                                            "_generator": {
                                              "name": "bicep",
                                              "version": "0.32.4.45862",
                                              "templateHash": "5172201899085933507"
                                            },
                                            "name": "CDN Profiles Origin",
                                            "description": "This module deploys a CDN Profile Origin.",
                                            "owner": "Azure/module-maintainers"
                                          },
                                          "definitions": {
                                            "originType": {
                                              "type": "object",
                                              "properties": {
                                                "name": {
                                                  "type": "string",
                                                  "metadata": {
                                                    "description": "Required. The name of the origion."
                                                  }
                                                },
                                                "hostName": {
                                                  "type": "string",
                                                  "metadata": {
                                                    "description": "Required. The address of the origin. Domain names, IPv4 addresses, and IPv6 addresses are supported.This should be unique across all origins in an endpoint."
                                                  }
                                                },
                                                "enabledState": {
                                                  "type": "string",
                                                  "allowedValues": [
                                                    "Disabled",
                                                    "Enabled"
                                                  ],
                                                  "nullable": true,
                                                  "metadata": {
                                                    "description": "Optional. Whether to enable health probes to be made against backends defined under backendPools. Health probes can only be disabled if there is a single enabled backend in single enabled backend pool."
                                                  }
                                                },
                                                "enforceCertificateNameCheck": {
                                                  "type": "bool",
                                                  "nullable": true,
                                                  "metadata": {
                                                    "description": "Optional. Whether to enable certificate name check at origin level."
                                                  }
                                                },
                                                "httpPort": {
                                                  "type": "int",
                                                  "nullable": true,
                                                  "metadata": {
                                                    "description": "Optional. The value of the HTTP port. Must be between 1 and 65535."
                                                  }
                                                },
                                                "httpsPort": {
                                                  "type": "int",
                                                  "nullable": true,
                                                  "metadata": {
                                                    "description": "Optional. The value of the HTTPS port. Must be between 1 and 65535."
                                                  }
                                                },
                                                "originHostHeader": {
                                                  "type": "string",
                                                  "nullable": true,
                                                  "metadata": {
                                                    "description": "Optional. The host header value sent to the origin with each request. If you leave this blank, the request hostname determines this value. Azure Front Door origins, such as Web Apps, Blob Storage, and Cloud Services require this host header value to match the origin hostname by default. This overrides the host header defined at Endpoint."
                                                  }
                                                },
                                                "priority": {
                                                  "type": "int",
                                                  "nullable": true,
                                                  "metadata": {
                                                    "description": "Optional. Priority of origin in given origin group for load balancing. Higher priorities will not be used for load balancing if any lower priority origin is healthy.Must be between 1 and 5."
                                                  }
                                                },
                                                "weight": {
                                                  "type": "int",
                                                  "nullable": true,
                                                  "metadata": {
                                                    "description": "Optional. Weight of the origin in given origin group for load balancing. Must be between 1 and 1000."
                                                  }
                                                },
                                                "sharedPrivateLinkResource": {
                                                  "type": "object",
                                                  "nullable": true,
                                                  "metadata": {
                                                    "description": "Optional. The properties of the private link resource for private origin."
                                                  }
                                                }
                                              },
                                              "metadata": {
                                                "__bicep_export!": true
                                              }
                                            }
                                          },
                                          "parameters": {
                                            "name": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "Required. The name of the origion."
                                              }
                                            },
                                            "profileName": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "Required. The name of the CDN profile."
                                              }
                                            },
                                            "originGroupName": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "Required. The name of the group."
                                              }
                                            },
                                            "enabledState": {
                                              "type": "string",
                                              "defaultValue": "Enabled",
                                              "allowedValues": [
                                                "Disabled",
                                                "Enabled"
                                              ],
                                              "metadata": {
                                                "description": "Optional. Whether to enable health probes to be made against backends defined under backendPools. Health probes can only be disabled if there is a single enabled backend in single enabled backend pool."
                                              }
                                            },
                                            "enforceCertificateNameCheck": {
                                              "type": "bool",
                                              "defaultValue": true,
                                              "metadata": {
                                                "description": "Optional. Whether to enable certificate name check at origin level."
                                              }
                                            },
                                            "hostName": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "Required. The address of the origin. Domain names, IPv4 addresses, and IPv6 addresses are supported.This should be unique across all origins in an endpoint."
                                              }
                                            },
                                            "httpPort": {
                                              "type": "int",
                                              "defaultValue": 80,
                                              "metadata": {
                                                "description": "Optional. The value of the HTTP port. Must be between 1 and 65535."
                                              }
                                            },
                                            "httpsPort": {
                                              "type": "int",
                                              "defaultValue": 443,
                                              "metadata": {
                                                "description": "Optional. The value of the HTTPS port. Must be between 1 and 65535."
                                              }
                                            },
                                            "originHostHeader": {
                                              "type": "string",
                                              "defaultValue": "",
                                              "metadata": {
                                                "description": "Optional. The host header value sent to the origin with each request. If you leave this blank, the request hostname determines this value. Azure Front Door origins, such as Web Apps, Blob Storage, and Cloud Services require this host header value to match the origin hostname by default. This overrides the host header defined at Endpoint."
                                              }
                                            },
                                            "priority": {
                                              "type": "int",
                                              "defaultValue": 1,
                                              "metadata": {
                                                "description": "Optional. Priority of origin in given origin group for load balancing. Higher priorities will not be used for load balancing if any lower priority origin is healthy.Must be between 1 and 5."
                                              }
                                            },
                                            "sharedPrivateLinkResource": {
                                              "type": "object",
                                              "nullable": true,
                                              "metadata": {
                                                "description": "Optional. The properties of the private link resource for private origin."
                                              }
                                            },
                                            "weight": {
                                              "type": "int",
                                              "defaultValue": 1000,
                                              "metadata": {
                                                "description": "Optional. Weight of the origin in given origin group for load balancing. Must be between 1 and 1000."
                                              }
                                            }
                                          },
                                          "resources": {
                                            "profile::originGroup": {
                                              "existing": true,
                                              "type": "Microsoft.Cdn/profiles/originGroups",
                                              "apiVersion": "2023-05-01",
                                              "name": "[format('{0}/{1}', parameters('profileName'), parameters('originGroupName'))]"
                                            },
                                            "profile": {
                                              "existing": true,
                                              "type": "Microsoft.Cdn/profiles",
                                              "apiVersion": "2023-05-01",
                                              "name": "[parameters('profileName')]"
                                            },
                                            "origin": {
                                              "type": "Microsoft.Cdn/profiles/originGroups/origins",
                                              "apiVersion": "2023-05-01",
                                              "name": "[format('{0}/{1}/{2}', parameters('profileName'), parameters('originGroupName'), parameters('name'))]",
                                              "properties": {
                                                "enabledState": "[parameters('enabledState')]",
                                                "enforceCertificateNameCheck": "[parameters('enforceCertificateNameCheck')]",
                                                "hostName": "[parameters('hostName')]",
                                                "httpPort": "[parameters('httpPort')]",
                                                "httpsPort": "[parameters('httpsPort')]",
                                                "originHostHeader": "[parameters('originHostHeader')]",
                                                "priority": "[parameters('priority')]",
                                                "sharedPrivateLinkResource": "[parameters('sharedPrivateLinkResource')]",
                                                "weight": "[parameters('weight')]"
                                              }
                                            }
                                          },
                                          "outputs": {
                                            "name": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "The name of the origin."
                                              },
                                              "value": "[parameters('name')]"
                                            },
                                            "resourceId": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "The resource id of the origin."
                                              },
                                              "value": "[resourceId('Microsoft.Cdn/profiles/originGroups/origins', parameters('profileName'), parameters('originGroupName'), parameters('name'))]"
                                            },
                                            "resourceGroupName": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "The name of the resource group the origin was created in."
                                              },
                                              "value": "[resourceGroup().name]"
                                            }
                                          }
                                        }
                                      },
                                      "dependsOn": [
                                        "originGroup"
                                      ]
                                    }
                                  },
                                  "outputs": {
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the origin group."
                                      },
                                      "value": "[parameters('name')]"
                                    },
                                    "resourceId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource id of the origin group."
                                      },
                                      "value": "[resourceId('Microsoft.Cdn/profiles/originGroups', parameters('profileName'), parameters('name'))]"
                                    },
                                    "resourceGroupName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the resource group the origin group was created in."
                                      },
                                      "value": "[resourceGroup().name]"
                                    },
                                    "location": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The location the resource was deployed into."
                                      },
                                      "value": "[reference('profile', '2023-05-01', 'full').location]"
                                    }
                                  }
                                }
                              },
                              "dependsOn": [
                                "profile"
                              ]
                            },
                            "profile_ruleSets": {
                              "copy": {
                                "name": "profile_ruleSets",
                                "count": "[length(parameters('ruleSets'))]"
                              },
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "[format('{0}-Profile-RuleSet-{1}', uniqueString(deployment().name), copyIndex())]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "name": {
                                    "value": "[parameters('ruleSets')[copyIndex()].name]"
                                  },
                                  "profileName": {
                                    "value": "[parameters('name')]"
                                  },
                                  "rules": {
                                    "value": "[parameters('ruleSets')[copyIndex()].rules]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "languageVersion": "2.0",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.32.4.45862",
                                      "templateHash": "8263137294746797692"
                                    },
                                    "name": "CDN Profiles Rule Sets",
                                    "description": "This module deploys a CDN Profile rule set.",
                                    "owner": "Azure/module-maintainers"
                                  },
                                  "definitions": {
                                    "ruleSetType": {
                                      "type": "object",
                                      "properties": {
                                        "name": {
                                          "type": "string",
                                          "metadata": {
                                            "description": "Required. Name of the rule set."
                                          }
                                        },
                                        "rules": {
                                          "type": "array",
                                          "items": {
                                            "$ref": "#/definitions/ruleType"
                                          },
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. Array of rules."
                                          }
                                        }
                                      },
                                      "metadata": {
                                        "__bicep_export!": true
                                      }
                                    },
                                    "ruleType": {
                                      "type": "object",
                                      "properties": {
                                        "name": {
                                          "type": "string",
                                          "metadata": {
                                            "description": "Required. The name of the rule."
                                          }
                                        },
                                        "order": {
                                          "type": "int",
                                          "metadata": {
                                            "description": "Required. The order in which the rules are applied for the endpoint."
                                          }
                                        },
                                        "actions": {
                                          "type": "array",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. A list of actions that are executed when all the conditions of a rule are satisfied.."
                                          }
                                        },
                                        "conditions": {
                                          "type": "array",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. A list of conditions that must be matched for the actions to be executed."
                                          }
                                        },
                                        "matchProcessingBehavior": {
                                          "type": "string",
                                          "allowedValues": [
                                            "Continue",
                                            "Stop"
                                          ],
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. If this rule is a match should the rules engine continue running the remaining rules or stop. If not present, defaults to Continue."
                                          }
                                        }
                                      },
                                      "metadata": {
                                        "__bicep_imported_from!": {
                                          "sourceTemplate": "rule/main.bicep"
                                        }
                                      }
                                    }
                                  },
                                  "parameters": {
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The name of the rule set."
                                      }
                                    },
                                    "profileName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The name of the CDN profile."
                                      }
                                    },
                                    "rules": {
                                      "type": "array",
                                      "items": {
                                        "$ref": "#/definitions/ruleType"
                                      },
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optinal. The rules to apply to the rule set."
                                      }
                                    }
                                  },
                                  "resources": {
                                    "profile": {
                                      "existing": true,
                                      "type": "Microsoft.Cdn/profiles",
                                      "apiVersion": "2023-05-01",
                                      "name": "[parameters('profileName')]"
                                    },
                                    "ruleSet": {
                                      "type": "Microsoft.Cdn/profiles/ruleSets",
                                      "apiVersion": "2023-05-01",
                                      "name": "[format('{0}/{1}', parameters('profileName'), parameters('name'))]"
                                    },
                                    "ruleSet_rules": {
                                      "copy": {
                                        "name": "ruleSet_rules",
                                        "count": "[length(coalesce(parameters('rules'), createArray()))]"
                                      },
                                      "type": "Microsoft.Resources/deployments",
                                      "apiVersion": "2022-09-01",
                                      "name": "[format('{0}-RuleSet-Rule-{1}-{2}', uniqueString(deployment().name), coalesce(parameters('rules'), createArray())[copyIndex()].name, copyIndex())]",
                                      "properties": {
                                        "expressionEvaluationOptions": {
                                          "scope": "inner"
                                        },
                                        "mode": "Incremental",
                                        "parameters": {
                                          "profileName": {
                                            "value": "[parameters('profileName')]"
                                          },
                                          "ruleSetName": {
                                            "value": "[parameters('name')]"
                                          },
                                          "name": {
                                            "value": "[coalesce(parameters('rules'), createArray())[copyIndex()].name]"
                                          },
                                          "order": {
                                            "value": "[coalesce(parameters('rules'), createArray())[copyIndex()].order]"
                                          },
                                          "actions": {
                                            "value": "[tryGet(coalesce(parameters('rules'), createArray())[copyIndex()], 'actions')]"
                                          },
                                          "conditions": {
                                            "value": "[tryGet(coalesce(parameters('rules'), createArray())[copyIndex()], 'conditions')]"
                                          },
                                          "matchProcessingBehavior": {
                                            "value": "[tryGet(coalesce(parameters('rules'), createArray())[copyIndex()], 'matchProcessingBehavior')]"
                                          }
                                        },
                                        "template": {
                                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                          "languageVersion": "2.0",
                                          "contentVersion": "1.0.0.0",
                                          "metadata": {
                                            "_generator": {
                                              "name": "bicep",
                                              "version": "0.32.4.45862",
                                              "templateHash": "14540406126609060699"
                                            },
                                            "name": "CDN Profiles Rules",
                                            "description": "This module deploys a CDN Profile rule.",
                                            "owner": "Azure/module-maintainers"
                                          },
                                          "definitions": {
                                            "ruleType": {
                                              "type": "object",
                                              "properties": {
                                                "name": {
                                                  "type": "string",
                                                  "metadata": {
                                                    "description": "Required. The name of the rule."
                                                  }
                                                },
                                                "order": {
                                                  "type": "int",
                                                  "metadata": {
                                                    "description": "Required. The order in which the rules are applied for the endpoint."
                                                  }
                                                },
                                                "actions": {
                                                  "type": "array",
                                                  "nullable": true,
                                                  "metadata": {
                                                    "description": "Optional. A list of actions that are executed when all the conditions of a rule are satisfied.."
                                                  }
                                                },
                                                "conditions": {
                                                  "type": "array",
                                                  "nullable": true,
                                                  "metadata": {
                                                    "description": "Optional. A list of conditions that must be matched for the actions to be executed."
                                                  }
                                                },
                                                "matchProcessingBehavior": {
                                                  "type": "string",
                                                  "allowedValues": [
                                                    "Continue",
                                                    "Stop"
                                                  ],
                                                  "nullable": true,
                                                  "metadata": {
                                                    "description": "Optional. If this rule is a match should the rules engine continue running the remaining rules or stop. If not present, defaults to Continue."
                                                  }
                                                }
                                              },
                                              "metadata": {
                                                "__bicep_export!": true
                                              }
                                            }
                                          },
                                          "parameters": {
                                            "name": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "Required. The name of the rule."
                                              }
                                            },
                                            "profileName": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "Required. The name of the profile."
                                              }
                                            },
                                            "ruleSetName": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "Required. The name of the rule set."
                                              }
                                            },
                                            "order": {
                                              "type": "int",
                                              "metadata": {
                                                "description": "Required. The order in which this rule will be applied. Rules with a lower order are applied before rules with a higher order."
                                              }
                                            },
                                            "actions": {
                                              "type": "array",
                                              "nullable": true,
                                              "metadata": {
                                                "description": "Optional. A list of actions that are executed when all the conditions of a rule are satisfied."
                                              }
                                            },
                                            "conditions": {
                                              "type": "array",
                                              "nullable": true,
                                              "metadata": {
                                                "description": "Optional. A list of conditions that must be matched for the actions to be executed."
                                              }
                                            },
                                            "matchProcessingBehavior": {
                                              "type": "string",
                                              "defaultValue": "Continue",
                                              "allowedValues": [
                                                "Continue",
                                                "Stop"
                                              ],
                                              "metadata": {
                                                "description": "Optional. If this rule is a match should the rules engine continue running the remaining rules or stop. If not present, defaults to Continue."
                                              }
                                            }
                                          },
                                          "resources": {
                                            "profile::ruleSet": {
                                              "existing": true,
                                              "type": "Microsoft.Cdn/profiles/ruleSets",
                                              "apiVersion": "2023-05-01",
                                              "name": "[format('{0}/{1}', parameters('profileName'), parameters('ruleSetName'))]"
                                            },
                                            "profile": {
                                              "existing": true,
                                              "type": "Microsoft.Cdn/profiles",
                                              "apiVersion": "2023-05-01",
                                              "name": "[parameters('profileName')]"
                                            },
                                            "rule": {
                                              "type": "Microsoft.Cdn/profiles/ruleSets/rules",
                                              "apiVersion": "2023-05-01",
                                              "name": "[format('{0}/{1}/{2}', parameters('profileName'), parameters('ruleSetName'), parameters('name'))]",
                                              "properties": {
                                                "order": "[parameters('order')]",
                                                "actions": "[parameters('actions')]",
                                                "conditions": "[parameters('conditions')]",
                                                "matchProcessingBehavior": "[parameters('matchProcessingBehavior')]"
                                              }
                                            }
                                          },
                                          "outputs": {
                                            "name": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "The name of the rule."
                                              },
                                              "value": "[parameters('name')]"
                                            },
                                            "resourceId": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "The resource id of the rule."
                                              },
                                              "value": "[resourceId('Microsoft.Cdn/profiles/ruleSets/rules', parameters('profileName'), parameters('ruleSetName'), parameters('name'))]"
                                            },
                                            "resourceGroupName": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "The name of the resource group the custom domain was created in."
                                              },
                                              "value": "[resourceGroup().name]"
                                            }
                                          }
                                        }
                                      }
                                    }
                                  },
                                  "outputs": {
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the rule set."
                                      },
                                      "value": "[parameters('name')]"
                                    },
                                    "resourceId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource id of the rule set."
                                      },
                                      "value": "[resourceId('Microsoft.Cdn/profiles/ruleSets', parameters('profileName'), parameters('name'))]"
                                    },
                                    "resourceGroupName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the resource group the custom domain was created in."
                                      },
                                      "value": "[resourceGroup().name]"
                                    }
                                  }
                                }
                              },
                              "dependsOn": [
                                "profile"
                              ]
                            },
                            "profile_afdEndpoints": {
                              "copy": {
                                "name": "profile_afdEndpoints",
                                "count": "[length(parameters('afdEndpoints'))]"
                              },
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "[format('{0}-Profile-AfdEndpoint-{1}', uniqueString(deployment().name), copyIndex())]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "name": {
                                    "value": "[parameters('afdEndpoints')[copyIndex()].name]"
                                  },
                                  "location": {
                                    "value": "[parameters('location')]"
                                  },
                                  "profileName": {
                                    "value": "[parameters('name')]"
                                  },
                                  "autoGeneratedDomainNameLabelScope": {
                                    "value": "[tryGet(parameters('afdEndpoints')[copyIndex()], 'autoGeneratedDomainNameLabelScope')]"
                                  },
                                  "enabledState": {
                                    "value": "[tryGet(parameters('afdEndpoints')[copyIndex()], 'enabledState')]"
                                  },
                                  "routes": {
                                    "value": "[tryGet(parameters('afdEndpoints')[copyIndex()], 'routes')]"
                                  },
                                  "tags": {
                                    "value": "[coalesce(tryGet(parameters('afdEndpoints')[copyIndex()], 'tags'), parameters('tags'))]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "languageVersion": "2.0",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.32.4.45862",
                                      "templateHash": "5418845183779263042"
                                    },
                                    "name": "CDN Profiles AFD Endpoints",
                                    "description": "This module deploys a CDN Profile AFD Endpoint.",
                                    "owner": "Azure/module-maintainers"
                                  },
                                  "definitions": {
                                    "afdEndpointType": {
                                      "type": "object",
                                      "properties": {
                                        "name": {
                                          "type": "string",
                                          "metadata": {
                                            "description": "Required. The name of the AFD Endpoint."
                                          }
                                        },
                                        "routes": {
                                          "type": "array",
                                          "items": {
                                            "$ref": "#/definitions/routeType"
                                          },
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The list of routes for this AFD Endpoint."
                                          }
                                        },
                                        "tags": {
                                          "type": "object",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The tags for the AFD Endpoint."
                                          }
                                        },
                                        "autoGeneratedDomainNameLabelScope": {
                                          "type": "string",
                                          "allowedValues": [
                                            "NoReuse",
                                            "ResourceGroupReuse",
                                            "SubscriptionReuse",
                                            "TenantReuse"
                                          ],
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The scope of the auto-generated domain name label."
                                          }
                                        },
                                        "enabledState": {
                                          "type": "string",
                                          "allowedValues": [
                                            "Disabled",
                                            "Enabled"
                                          ],
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The state of the AFD Endpoint."
                                          }
                                        }
                                      },
                                      "metadata": {
                                        "__bicep_export!": true
                                      }
                                    },
                                    "_1.afdRoutecacheConfigurationType": {
                                      "type": "object",
                                      "properties": {
                                        "compressionSettings": {
                                          "type": "object",
                                          "properties": {
                                            "contentTypesToCompress": {
                                              "type": "array",
                                              "items": {
                                                "type": "string"
                                              },
                                              "metadata": {
                                                "description": "Required. List of content types on which compression applies. The value should be a valid MIME type."
                                              }
                                            },
                                            "iscontentTypeToCompressAll": {
                                              "type": "bool",
                                              "nullable": true,
                                              "metadata": {
                                                "description": "Optional. Indicates whether content compression is enabled on AzureFrontDoor. Default value is false. If compression is enabled, content will be served as compressed if user requests for a compressed version. Content won't be compressed on AzureFrontDoor when requested content is smaller than 1 byte or larger than 1 MB."
                                              }
                                            }
                                          },
                                          "metadata": {
                                            "description": "Required. Compression settings."
                                          }
                                        },
                                        "queryParameters": {
                                          "type": "string",
                                          "metadata": {
                                            "description": "Required. Query parameters to include or exclude (comma separated)."
                                          }
                                        },
                                        "queryStringCachingBehavior": {
                                          "type": "string",
                                          "allowedValues": [
                                            "IgnoreQueryString",
                                            "IgnoreSpecifiedQueryStrings",
                                            "IncludeSpecifiedQueryStrings",
                                            "UseQueryString"
                                          ],
                                          "metadata": {
                                            "description": "Required. Defines how Frontdoor caches requests that include query strings."
                                          }
                                        }
                                      },
                                      "metadata": {
                                        "__bicep_imported_from!": {
                                          "sourceTemplate": "route/main.bicep"
                                        }
                                      }
                                    },
                                    "routeType": {
                                      "type": "object",
                                      "properties": {
                                        "name": {
                                          "type": "string",
                                          "metadata": {
                                            "description": "Required. The name of the route."
                                          }
                                        },
                                        "cacheConfiguration": {
                                          "$ref": "#/definitions/_1.afdRoutecacheConfigurationType",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The caching configuration for this route. To disable caching, do not provide a cacheConfiguration object."
                                          }
                                        },
                                        "customDomainNames": {
                                          "type": "array",
                                          "items": {
                                            "type": "string"
                                          },
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The names of the custom domains."
                                          }
                                        },
                                        "enabledState": {
                                          "type": "string",
                                          "allowedValues": [
                                            "Disabled",
                                            "Enabled"
                                          ],
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. Whether to enable use of this rule."
                                          }
                                        },
                                        "forwardingProtocol": {
                                          "type": "string",
                                          "allowedValues": [
                                            "HttpOnly",
                                            "HttpsOnly",
                                            "MatchRequest"
                                          ],
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The protocol this rule will use when forwarding traffic to backends."
                                          }
                                        },
                                        "httpsRedirect": {
                                          "type": "string",
                                          "allowedValues": [
                                            "Disabled",
                                            "Enabled"
                                          ],
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. Whether to automatically redirect HTTP traffic to HTTPS traffic."
                                          }
                                        },
                                        "linkToDefaultDomain": {
                                          "type": "string",
                                          "allowedValues": [
                                            "Disabled",
                                            "Enabled"
                                          ],
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. Whether this route will be linked to the default endpoint domain."
                                          }
                                        },
                                        "originGroupName": {
                                          "type": "string",
                                          "metadata": {
                                            "description": "Required. The name of the origin group."
                                          }
                                        },
                                        "originPath": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. A directory path on the origin that AzureFrontDoor can use to retrieve content from, e.g. contoso.cloudapp.net/originpath."
                                          }
                                        },
                                        "patternsToMatch": {
                                          "type": "array",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The route patterns of the rule."
                                          }
                                        },
                                        "ruleSets": {
                                          "type": "array",
                                          "items": {
                                            "type": "object"
                                          },
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The rule sets of the rule."
                                          }
                                        },
                                        "supportedProtocols": {
                                          "type": "array",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The supported protocols of the rule."
                                          }
                                        }
                                      },
                                      "metadata": {
                                        "__bicep_imported_from!": {
                                          "sourceTemplate": "route/main.bicep"
                                        }
                                      }
                                    }
                                  },
                                  "parameters": {
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The name of the AFD Endpoint."
                                      }
                                    },
                                    "profileName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Conditional. The name of the parent CDN profile. Required if the template is used in a standalone deployment."
                                      }
                                    },
                                    "location": {
                                      "type": "string",
                                      "defaultValue": "[resourceGroup().location]",
                                      "metadata": {
                                        "description": "Optional. The location of the AFD Endpoint."
                                      }
                                    },
                                    "tags": {
                                      "type": "object",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. The tags of the AFD Endpoint."
                                      }
                                    },
                                    "autoGeneratedDomainNameLabelScope": {
                                      "type": "string",
                                      "defaultValue": "TenantReuse",
                                      "allowedValues": [
                                        "NoReuse",
                                        "ResourceGroupReuse",
                                        "SubscriptionReuse",
                                        "TenantReuse"
                                      ],
                                      "metadata": {
                                        "description": "Optional. Indicates the endpoint name reuse scope. The default value is TenantReuse."
                                      }
                                    },
                                    "enabledState": {
                                      "type": "string",
                                      "defaultValue": "Enabled",
                                      "allowedValues": [
                                        "Enabled",
                                        "Disabled"
                                      ],
                                      "metadata": {
                                        "description": "Optional. Indicates whether the AFD Endpoint is enabled. The default value is Enabled."
                                      }
                                    },
                                    "routes": {
                                      "type": "array",
                                      "items": {
                                        "$ref": "#/definitions/routeType"
                                      },
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. The list of routes for this AFD Endpoint."
                                      }
                                    }
                                  },
                                  "resources": {
                                    "profile": {
                                      "existing": true,
                                      "type": "Microsoft.Cdn/profiles",
                                      "apiVersion": "2023-05-01",
                                      "name": "[parameters('profileName')]"
                                    },
                                    "afdEndpoint": {
                                      "type": "Microsoft.Cdn/profiles/afdEndpoints",
                                      "apiVersion": "2023-05-01",
                                      "name": "[format('{0}/{1}', parameters('profileName'), parameters('name'))]",
                                      "location": "[parameters('location')]",
                                      "tags": "[parameters('tags')]",
                                      "properties": {
                                        "autoGeneratedDomainNameLabelScope": "[parameters('autoGeneratedDomainNameLabelScope')]",
                                        "enabledState": "[parameters('enabledState')]"
                                      }
                                    },
                                    "afdEndpoint_routes": {
                                      "copy": {
                                        "name": "afdEndpoint_routes",
                                        "count": "[length(coalesce(parameters('routes'), createArray()))]"
                                      },
                                      "type": "Microsoft.Resources/deployments",
                                      "apiVersion": "2022-09-01",
                                      "name": "[format('{0}-Profile-AfdEndpoint-Route', uniqueString(deployment().name, coalesce(parameters('routes'), createArray())[copyIndex()].name))]",
                                      "properties": {
                                        "expressionEvaluationOptions": {
                                          "scope": "inner"
                                        },
                                        "mode": "Incremental",
                                        "parameters": {
                                          "name": {
                                            "value": "[coalesce(parameters('routes'), createArray())[copyIndex()].name]"
                                          },
                                          "profileName": {
                                            "value": "[parameters('profileName')]"
                                          },
                                          "afdEndpointName": {
                                            "value": "[parameters('name')]"
                                          },
                                          "cacheConfiguration": {
                                            "value": "[tryGet(coalesce(parameters('routes'), createArray())[copyIndex()], 'cacheConfiguration')]"
                                          },
                                          "customDomainNames": {
                                            "value": "[tryGet(coalesce(parameters('routes'), createArray())[copyIndex()], 'customDomainNames')]"
                                          },
                                          "enabledState": {
                                            "value": "[tryGet(coalesce(parameters('routes'), createArray())[copyIndex()], 'enabledState')]"
                                          },
                                          "forwardingProtocol": {
                                            "value": "[tryGet(coalesce(parameters('routes'), createArray())[copyIndex()], 'forwardingProtocol')]"
                                          },
                                          "httpsRedirect": {
                                            "value": "[tryGet(coalesce(parameters('routes'), createArray())[copyIndex()], 'httpsRedirect')]"
                                          },
                                          "linkToDefaultDomain": {
                                            "value": "[tryGet(coalesce(parameters('routes'), createArray())[copyIndex()], 'linkToDefaultDomain')]"
                                          },
                                          "originGroupName": {
                                            "value": "[tryGet(coalesce(parameters('routes'), createArray())[copyIndex()], 'originGroupName')]"
                                          },
                                          "originPath": {
                                            "value": "[tryGet(coalesce(parameters('routes'), createArray())[copyIndex()], 'originPath')]"
                                          },
                                          "patternsToMatch": {
                                            "value": "[tryGet(coalesce(parameters('routes'), createArray())[copyIndex()], 'patternsToMatch')]"
                                          },
                                          "ruleSets": {
                                            "value": "[tryGet(coalesce(parameters('routes'), createArray())[copyIndex()], 'ruleSets')]"
                                          },
                                          "supportedProtocols": {
                                            "value": "[tryGet(coalesce(parameters('routes'), createArray())[copyIndex()], 'supportedProtocols')]"
                                          }
                                        },
                                        "template": {
                                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                          "languageVersion": "2.0",
                                          "contentVersion": "1.0.0.0",
                                          "metadata": {
                                            "_generator": {
                                              "name": "bicep",
                                              "version": "0.32.4.45862",
                                              "templateHash": "11233659924871585320"
                                            },
                                            "name": "CDN Profiles AFD Endpoint Route",
                                            "description": "This module deploys a CDN Profile AFD Endpoint route.",
                                            "owner": "Azure/module-maintainers"
                                          },
                                          "definitions": {
                                            "routeType": {
                                              "type": "object",
                                              "properties": {
                                                "name": {
                                                  "type": "string",
                                                  "metadata": {
                                                    "description": "Required. The name of the route."
                                                  }
                                                },
                                                "cacheConfiguration": {
                                                  "$ref": "#/definitions/afdRoutecacheConfigurationType",
                                                  "nullable": true,
                                                  "metadata": {
                                                    "description": "Optional. The caching configuration for this route. To disable caching, do not provide a cacheConfiguration object."
                                                  }
                                                },
                                                "customDomainNames": {
                                                  "type": "array",
                                                  "items": {
                                                    "type": "string"
                                                  },
                                                  "nullable": true,
                                                  "metadata": {
                                                    "description": "Optional. The names of the custom domains."
                                                  }
                                                },
                                                "enabledState": {
                                                  "type": "string",
                                                  "allowedValues": [
                                                    "Disabled",
                                                    "Enabled"
                                                  ],
                                                  "nullable": true,
                                                  "metadata": {
                                                    "description": "Optional. Whether to enable use of this rule."
                                                  }
                                                },
                                                "forwardingProtocol": {
                                                  "type": "string",
                                                  "allowedValues": [
                                                    "HttpOnly",
                                                    "HttpsOnly",
                                                    "MatchRequest"
                                                  ],
                                                  "nullable": true,
                                                  "metadata": {
                                                    "description": "Optional. The protocol this rule will use when forwarding traffic to backends."
                                                  }
                                                },
                                                "httpsRedirect": {
                                                  "type": "string",
                                                  "allowedValues": [
                                                    "Disabled",
                                                    "Enabled"
                                                  ],
                                                  "nullable": true,
                                                  "metadata": {
                                                    "description": "Optional. Whether to automatically redirect HTTP traffic to HTTPS traffic."
                                                  }
                                                },
                                                "linkToDefaultDomain": {
                                                  "type": "string",
                                                  "allowedValues": [
                                                    "Disabled",
                                                    "Enabled"
                                                  ],
                                                  "nullable": true,
                                                  "metadata": {
                                                    "description": "Optional. Whether this route will be linked to the default endpoint domain."
                                                  }
                                                },
                                                "originGroupName": {
                                                  "type": "string",
                                                  "metadata": {
                                                    "description": "Required. The name of the origin group."
                                                  }
                                                },
                                                "originPath": {
                                                  "type": "string",
                                                  "nullable": true,
                                                  "metadata": {
                                                    "description": "Optional. A directory path on the origin that AzureFrontDoor can use to retrieve content from, e.g. contoso.cloudapp.net/originpath."
                                                  }
                                                },
                                                "patternsToMatch": {
                                                  "type": "array",
                                                  "nullable": true,
                                                  "metadata": {
                                                    "description": "Optional. The route patterns of the rule."
                                                  }
                                                },
                                                "ruleSets": {
                                                  "type": "array",
                                                  "items": {
                                                    "type": "object"
                                                  },
                                                  "nullable": true,
                                                  "metadata": {
                                                    "description": "Optional. The rule sets of the rule."
                                                  }
                                                },
                                                "supportedProtocols": {
                                                  "type": "array",
                                                  "nullable": true,
                                                  "metadata": {
                                                    "description": "Optional. The supported protocols of the rule."
                                                  }
                                                }
                                              },
                                              "metadata": {
                                                "__bicep_export!": true
                                              }
                                            },
                                            "afdRoutecacheConfigurationType": {
                                              "type": "object",
                                              "properties": {
                                                "compressionSettings": {
                                                  "type": "object",
                                                  "properties": {
                                                    "contentTypesToCompress": {
                                                      "type": "array",
                                                      "items": {
                                                        "type": "string"
                                                      },
                                                      "metadata": {
                                                        "description": "Required. List of content types on which compression applies. The value should be a valid MIME type."
                                                      }
                                                    },
                                                    "iscontentTypeToCompressAll": {
                                                      "type": "bool",
                                                      "nullable": true,
                                                      "metadata": {
                                                        "description": "Optional. Indicates whether content compression is enabled on AzureFrontDoor. Default value is false. If compression is enabled, content will be served as compressed if user requests for a compressed version. Content won't be compressed on AzureFrontDoor when requested content is smaller than 1 byte or larger than 1 MB."
                                                      }
                                                    }
                                                  },
                                                  "metadata": {
                                                    "description": "Required. Compression settings."
                                                  }
                                                },
                                                "queryParameters": {
                                                  "type": "string",
                                                  "metadata": {
                                                    "description": "Required. Query parameters to include or exclude (comma separated)."
                                                  }
                                                },
                                                "queryStringCachingBehavior": {
                                                  "type": "string",
                                                  "allowedValues": [
                                                    "IgnoreQueryString",
                                                    "IgnoreSpecifiedQueryStrings",
                                                    "IncludeSpecifiedQueryStrings",
                                                    "UseQueryString"
                                                  ],
                                                  "metadata": {
                                                    "description": "Required. Defines how Frontdoor caches requests that include query strings."
                                                  }
                                                }
                                              }
                                            }
                                          },
                                          "parameters": {
                                            "name": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "Required. The name of the route."
                                              }
                                            },
                                            "profileName": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "Required. The name of the parent CDN profile."
                                              }
                                            },
                                            "afdEndpointName": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "Required. The name of the AFD endpoint."
                                              }
                                            },
                                            "cacheConfiguration": {
                                              "type": "object",
                                              "nullable": true,
                                              "metadata": {
                                                "description": "Optional. The caching configuration for this route. To disable caching, do not provide a cacheConfiguration object."
                                              }
                                            },
                                            "customDomainNames": {
                                              "type": "array",
                                              "items": {
                                                "type": "string"
                                              },
                                              "nullable": true,
                                              "metadata": {
                                                "description": "Optional. The names of the custom domains. The custom domains must be defined in the profile customDomains array."
                                              }
                                            },
                                            "forwardingProtocol": {
                                              "type": "string",
                                              "defaultValue": "MatchRequest",
                                              "allowedValues": [
                                                "HttpOnly",
                                                "HttpsOnly",
                                                "MatchRequest"
                                              ],
                                              "metadata": {
                                                "description": "Optional. The protocol this rule will use when forwarding traffic to backends."
                                              }
                                            },
                                            "enabledState": {
                                              "type": "string",
                                              "defaultValue": "Enabled",
                                              "allowedValues": [
                                                "Disabled",
                                                "Enabled"
                                              ],
                                              "metadata": {
                                                "description": "Optional. Whether this route is enabled."
                                              }
                                            },
                                            "httpsRedirect": {
                                              "type": "string",
                                              "defaultValue": "Enabled",
                                              "allowedValues": [
                                                "Disabled",
                                                "Enabled"
                                              ],
                                              "metadata": {
                                                "description": "Optional. Whether to automatically redirect HTTP traffic to HTTPS traffic."
                                              }
                                            },
                                            "linkToDefaultDomain": {
                                              "type": "string",
                                              "defaultValue": "Enabled",
                                              "allowedValues": [
                                                "Disabled",
                                                "Enabled"
                                              ],
                                              "metadata": {
                                                "description": "Optional. Whether this route will be linked to the default endpoint domain."
                                              }
                                            },
                                            "originGroupName": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "Required. The name of the origin group. The origin group must be defined in the profile originGroups."
                                              }
                                            },
                                            "originPath": {
                                              "type": "string",
                                              "nullable": true,
                                              "metadata": {
                                                "description": "Optional. A directory path on the origin that AzureFrontDoor can use to retrieve content from, e.g. contoso.cloudapp.net/originpath."
                                              }
                                            },
                                            "patternsToMatch": {
                                              "type": "array",
                                              "nullable": true,
                                              "metadata": {
                                                "description": "Optional. The route patterns of the rule."
                                              }
                                            },
                                            "ruleSets": {
                                              "type": "array",
                                              "defaultValue": [],
                                              "metadata": {
                                                "description": "Optional. The rule sets of the rule. The rule sets must be defined in the profile ruleSets."
                                              }
                                            },
                                            "supportedProtocols": {
                                              "type": "array",
                                              "nullable": true,
                                              "allowedValues": [
                                                "Http",
                                                "Https"
                                              ],
                                              "metadata": {
                                                "description": "Optional. The supported protocols of the rule."
                                              }
                                            }
                                          },
                                          "resources": {
                                            "profile::afdEndpoint": {
                                              "existing": true,
                                              "type": "Microsoft.Cdn/profiles/afdEndpoints",
                                              "apiVersion": "2023-05-01",
                                              "name": "[format('{0}/{1}', parameters('profileName'), parameters('afdEndpointName'))]"
                                            },
                                            "profile::customDomains": {
                                              "copy": {
                                                "name": "customDomains",
                                                "count": "[length(coalesce(parameters('customDomainNames'), createArray()))]"
                                              },
                                              "existing": true,
                                              "type": "Microsoft.Cdn/profiles/customDomains",
                                              "apiVersion": "2023-05-01",
                                              "name": "[format('{0}/{1}', parameters('profileName'), coalesce(parameters('customDomainNames'), createArray())[copyIndex()])]"
                                            },
                                            "profile::originGroup": {
                                              "existing": true,
                                              "type": "Microsoft.Cdn/profiles/originGroups",
                                              "apiVersion": "2023-05-01",
                                              "name": "[format('{0}/{1}', parameters('profileName'), parameters('originGroupName'))]"
                                            },
                                            "profile::ruleSet": {
                                              "copy": {
                                                "name": "ruleSet",
                                                "count": "[length(parameters('ruleSets'))]"
                                              },
                                              "existing": true,
                                              "type": "Microsoft.Cdn/profiles/ruleSets",
                                              "apiVersion": "2023-05-01",
                                              "name": "[format('{0}/{1}', parameters('profileName'), parameters('ruleSets')[copyIndex()].name)]"
                                            },
                                            "profile": {
                                              "existing": true,
                                              "type": "Microsoft.Cdn/profiles",
                                              "apiVersion": "2023-05-01",
                                              "name": "[parameters('profileName')]"
                                            },
                                            "route": {
                                              "type": "Microsoft.Cdn/profiles/afdEndpoints/routes",
                                              "apiVersion": "2023-05-01",
                                              "name": "[format('{0}/{1}/{2}', parameters('profileName'), parameters('afdEndpointName'), parameters('name'))]",
                                              "properties": {
                                                "copy": [
                                                  {
                                                    "name": "customDomains",
                                                    "count": "[length(range(0, length(coalesce(parameters('customDomainNames'), createArray()))))]",
                                                    "input": {
                                                      "id": "[resourceId('Microsoft.Cdn/profiles/customDomains', parameters('profileName'), coalesce(parameters('customDomainNames'), createArray())[range(0, length(coalesce(parameters('customDomainNames'), createArray())))[copyIndex('customDomains')]])]"
                                                    }
                                                  },
                                                  {
                                                    "name": "ruleSets",
                                                    "count": "[length(parameters('ruleSets'))]",
                                                    "input": {
                                                      "id": "[resourceId('Microsoft.Cdn/profiles/ruleSets', parameters('profileName'), parameters('ruleSets')[copyIndex('ruleSets')].name)]"
                                                    }
                                                  }
                                                ],
                                                "cacheConfiguration": "[parameters('cacheConfiguration')]",
                                                "enabledState": "[parameters('enabledState')]",
                                                "forwardingProtocol": "[parameters('forwardingProtocol')]",
                                                "httpsRedirect": "[parameters('httpsRedirect')]",
                                                "linkToDefaultDomain": "[parameters('linkToDefaultDomain')]",
                                                "originGroup": {
                                                  "id": "[resourceId('Microsoft.Cdn/profiles/originGroups', parameters('profileName'), parameters('originGroupName'))]"
                                                },
                                                "originPath": "[parameters('originPath')]",
                                                "patternsToMatch": "[parameters('patternsToMatch')]",
                                                "supportedProtocols": "[parameters('supportedProtocols')]"
                                              }
                                            }
                                          },
                                          "outputs": {
                                            "name": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "The name of the route."
                                              },
                                              "value": "[parameters('name')]"
                                            },
                                            "resourceId": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "The ID of the route."
                                              },
                                              "value": "[resourceId('Microsoft.Cdn/profiles/afdEndpoints/routes', parameters('profileName'), parameters('afdEndpointName'), parameters('name'))]"
                                            },
                                            "resourceGroupName": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "The name of the resource group the route was created in."
                                              },
                                              "value": "[resourceGroup().name]"
                                            }
                                          }
                                        }
                                      },
                                      "dependsOn": [
                                        "afdEndpoint"
                                      ]
                                    }
                                  },
                                  "outputs": {
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the AFD Endpoint."
                                      },
                                      "value": "[parameters('name')]"
                                    },
                                    "resourceId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource id of the AFD Endpoint."
                                      },
                                      "value": "[resourceId('Microsoft.Cdn/profiles/afdEndpoints', parameters('profileName'), parameters('name'))]"
                                    },
                                    "resourceGroupName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the resource group the endpoint was created in."
                                      },
                                      "value": "[resourceGroup().name]"
                                    },
                                    "location": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The location the resource was deployed into."
                                      },
                                      "value": "[reference('afdEndpoint', '2023-05-01', 'full').location]"
                                    },
                                    "routes": {
                                      "type": "array",
                                      "metadata": {
                                        "description": "The list of routes assigned to the AFD endpoint."
                                      },
                                      "value": "[coalesce(parameters('routes'), createArray())]"
                                    },
                                    "frontDoorEndpointHostName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The host name of the AFD endpoint."
                                      },
                                      "value": "[reference('afdEndpoint').hostName]"
                                    }
                                  }
                                }
                              },
                              "dependsOn": [
                                "profile",
                                "profile_customDomains",
                                "profile_originGroups",
                                "profile_ruleSets"
                              ]
                            },
                            "profile_securityPolicies": {
                              "copy": {
                                "name": "profile_securityPolicies",
                                "count": "[length(parameters('securityPolicies'))]"
                              },
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "[format('{0}-Profile-SecurityPolicy-{1}', uniqueString(deployment().name), copyIndex())]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "name": {
                                    "value": "[parameters('securityPolicies')[copyIndex()].name]"
                                  },
                                  "profileName": {
                                    "value": "[parameters('name')]"
                                  },
                                  "associations": {
                                    "value": "[parameters('securityPolicies')[copyIndex()].associations]"
                                  },
                                  "wafPolicyResourceId": {
                                    "value": "[parameters('securityPolicies')[copyIndex()].wafPolicyResourceId]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "languageVersion": "2.0",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.32.4.45862",
                                      "templateHash": "13846745009559493983"
                                    },
                                    "name": "CDN Profiles Security Policy",
                                    "description": "This module deploys a CDN Profile Security Policy.",
                                    "owner": "Azure/module-maintainers"
                                  },
                                  "definitions": {
                                    "associationsType": {
                                      "type": "array",
                                      "items": {
                                        "type": "object",
                                        "properties": {
                                          "domains": {
                                            "type": "array",
                                            "items": {
                                              "type": "object",
                                              "properties": {
                                                "id": {
                                                  "type": "string",
                                                  "metadata": {
                                                    "description": "Required. ResourceID to domain that will be associated."
                                                  }
                                                }
                                              }
                                            },
                                            "metadata": {
                                              "description": "Required. List of domain resource id to associate with this resource."
                                            }
                                          },
                                          "patternsToMatch": {
                                            "type": "array",
                                            "items": {
                                              "type": "string"
                                            },
                                            "metadata": {
                                              "description": "Required. List of patterns to match with this association."
                                            }
                                          }
                                        }
                                      },
                                      "metadata": {
                                        "__bicep_export!": true
                                      }
                                    }
                                  },
                                  "parameters": {
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The resource name."
                                      }
                                    },
                                    "profileName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Conditional. The name of the parent CDN profile. Required if the template is used in a standalone deployment."
                                      }
                                    },
                                    "wafPolicyResourceId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. Resource ID of WAF Policy."
                                      }
                                    },
                                    "associations": {
                                      "$ref": "#/definitions/associationsType",
                                      "metadata": {
                                        "description": "Required. Waf associations (see https://learn.microsoft.com/en-us/azure/templates/microsoft.cdn/profiles/securitypolicies?pivots=deployment-language-bicep#securitypolicywebapplicationfirewallassociation for details)."
                                      }
                                    }
                                  },
                                  "resources": {
                                    "profile": {
                                      "existing": true,
                                      "type": "Microsoft.Cdn/profiles",
                                      "apiVersion": "2023-05-01",
                                      "name": "[parameters('profileName')]"
                                    },
                                    "securityPolicies": {
                                      "type": "Microsoft.Cdn/profiles/securityPolicies",
                                      "apiVersion": "2024-02-01",
                                      "name": "[format('{0}/{1}', parameters('profileName'), parameters('name'))]",
                                      "properties": {
                                        "parameters": {
                                          "type": "WebApplicationFirewall",
                                          "wafPolicy": {
                                            "id": "[parameters('wafPolicyResourceId')]"
                                          },
                                          "associations": "[parameters('associations')]"
                                        }
                                      }
                                    }
                                  },
                                  "outputs": {
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the secrect."
                                      },
                                      "value": "[parameters('name')]"
                                    },
                                    "resourceId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource ID of the secrect."
                                      },
                                      "value": "[resourceId('Microsoft.Cdn/profiles/securityPolicies', parameters('profileName'), parameters('name'))]"
                                    },
                                    "resourceGroupName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the resource group the secret was created in."
                                      },
                                      "value": "[resourceGroup().name]"
                                    }
                                  }
                                }
                              },
                              "dependsOn": [
                                "profile",
                                "profile_afdEndpoints",
                                "profile_customDomains"
                              ]
                            }
                          },
                          "outputs": {
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "The name of the CDN profile."
                              },
                              "value": "[parameters('name')]"
                            },
                            "resourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource ID of the CDN profile."
                              },
                              "value": "[resourceId('Microsoft.Cdn/profiles', parameters('name'))]"
                            },
                            "resourceGroupName": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource group where the CDN profile is deployed."
                              },
                              "value": "[resourceGroup().name]"
                            },
                            "profileType": {
                              "type": "string",
                              "metadata": {
                                "description": "The type of the CDN profile."
                              },
                              "value": "Microsoft.Cdn/profiles"
                            },
                            "location": {
                              "type": "string",
                              "metadata": {
                                "description": "The location the resource was deployed into."
                              },
                              "value": "[reference('profile', '2023-05-01', 'full').location]"
                            },
                            "endpointName": {
                              "type": "string",
                              "metadata": {
                                "description": "The name of the CDN profile endpoint."
                              },
                              "value": "[if(not(empty(parameters('endpointProperties'))), reference('profile_endpoint').outputs.name.value, '')]"
                            },
                            "endpointId": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource ID of the CDN profile endpoint."
                              },
                              "value": "[if(not(empty(parameters('endpointProperties'))), reference('profile_endpoint').outputs.resourceId.value, '')]"
                            },
                            "uri": {
                              "type": "string",
                              "metadata": {
                                "description": "The uri of the CDN profile endpoint."
                              },
                              "value": "[if(not(empty(parameters('endpointProperties'))), reference('profile_endpoint').outputs.uri.value, '')]"
                            },
                            "systemAssignedMIPrincipalId": {
                              "type": "string",
                              "metadata": {
                                "description": "The principal ID of the system assigned identity."
                              },
                              "value": "[coalesce(tryGet(tryGet(reference('profile', '2023-05-01', 'full'), 'identity'), 'principalId'), '')]"
                            },
                            "dnsValidation": {
                              "type": "array",
                              "items": {
                                "$ref": "#/definitions/dnsValidationType"
                              },
                              "metadata": {
                                "description": "The list of records required for custom domains validation."
                              },
                              "copy": {
                                "count": "[length(parameters('customDomains'))]",
                                "input": "[reference(format('profile_customDomains[{0}]', copyIndex())).outputs.dnsValidation.value]"
                              }
                            },
                            "frontDoorEndpointHostNames": {
                              "type": "array",
                              "metadata": {
                                "description": "The list of AFD endpoint host names."
                              },
                              "copy": {
                                "count": "[length(parameters('afdEndpoints'))]",
                                "input": "[reference(format('profile_afdEndpoints[{0}]', copyIndex())).outputs.frontDoorEndpointHostName.value]"
                              }
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Resources/deployments', parameters('wafPolicyName'))]"
                      ]
                    }
                  ],
                  "outputs": {
                    "afdProfileName": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the CDN profile."
                      },
                      "value": "[reference(resourceId('Microsoft.Resources/deployments', parameters('afdName')), '2022-09-01').outputs.name.value]"
                    },
                    "afdProfileId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the CDN profile."
                      },
                      "value": "[reference(resourceId('Microsoft.Resources/deployments', parameters('afdName')), '2022-09-01').outputs.resourceId.value]"
                    },
                    "endpointName": {
                      "type": "string",
                      "metadata": {
                        "description": "Name of the endpoint."
                      },
                      "value": "[reference(resourceId('Microsoft.Resources/deployments', parameters('afdName')), '2022-09-01').outputs.endpointName.value]"
                    },
                    "afdEndpointHostName": {
                      "type": "string",
                      "metadata": {
                        "description": "HostName of the endpoint."
                      },
                      "value": "[reference(resourceId('Microsoft.Resources/deployments', parameters('afdName')), '2022-09-01').outputs.uri.value]"
                    },
                    "resourceGroupName": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource group where the CDN profile is deployed."
                      },
                      "value": "[resourceGroup().name]"
                    },
                    "profileType": {
                      "type": "string",
                      "metadata": {
                        "description": "The type of the CDN profile."
                      },
                      "value": "[reference(resourceId('Microsoft.Resources/deployments', parameters('afdName')), '2022-09-01').outputs.profileType.value]"
                    }
                  }
                }
              },
              "dependsOn": [
                "logAnalyticsWs",
                "webApp"
              ]
            },
            "autoApproveAfdPe": {
              "condition": "[parameters('autoApproveAfdPrivateEndpoint')]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[take(format('autoApproveAfdPe-{0}-deployment', variables('resourceNames').frontDoor), 64)]",
              "resourceGroup": "[parameters('resourceGroupName')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "idAfdPeAutoApproverName": {
                    "value": "[variables('resourceNames').idAfdApprovePeAutoApprover]"
                  },
                  "tags": {
                    "value": "[parameters('tags')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.32.4.45862",
                      "templateHash": "18329992088702442963"
                    }
                  },
                  "parameters": {
                    "location": {
                      "type": "string",
                      "metadata": {
                        "description": "Optional. The location to deploy the Redis cache service."
                      }
                    },
                    "utcValue": {
                      "type": "string",
                      "defaultValue": "[utcNow()]",
                      "metadata": {
                        "description": "Default value is OK. Sets how the deployment script should be forced to execute even if the script resource has not changed. Can be current time stamp"
                      }
                    },
                    "idAfdPeAutoApproverName": {
                      "type": "string",
                      "defaultValue": "[guid(resourceGroup().id, 'userAssignedIdentity')]",
                      "metadata": {
                        "description": "Optional. The name of the user-assigned identity to be used to auto-approve the private endpoint connection of the AFD. Changing this forces a new resource to be created."
                      }
                    },
                    "tags": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. The tags to be assigned to the created resources."
                      }
                    }
                  },
                  "variables": {
                    "roleAssignmentName": "[guid(resourceGroup().id, 'contributor')]",
                    "contributorRoleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                    "deploymentScriptName": "runAfdApproval",
                    "uami": "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('idAfdPeAutoApproverName'))]"
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Authorization/roleAssignments",
                      "apiVersion": "2020-04-01-preview",
                      "name": "[variables('roleAssignmentName')]",
                      "properties": {
                        "roleDefinitionId": "[variables('contributorRoleDefinitionId')]",
                        "principalId": "[reference(resourceId('Microsoft.Resources/deployments', format('{0}-deployment', parameters('idAfdPeAutoApproverName'))), '2022-09-01').outputs.principalId.value]",
                        "principalType": "ServicePrincipal"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Resources/deployments', format('{0}-deployment', parameters('idAfdPeAutoApproverName')))]"
                      ],
                      "metadata": {
                        "description": "The role assignment that will be created to give the User Assigned Managed Identity Contributor role on the Resource Group in order to auto-approve the Private Endpoint Connection of the AFD."
                      }
                    },
                    {
                      "type": "Microsoft.Resources/deploymentScripts",
                      "apiVersion": "2023-08-01",
                      "name": "[variables('deploymentScriptName')]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]",
                      "kind": "AzureCLI",
                      "identity": {
                        "type": "UserAssigned",
                        "userAssignedIdentities": {
                          "[format('{0}', variables('uami'))]": {}
                        }
                      },
                      "properties": {
                        "forceUpdateTag": "[parameters('utcValue')]",
                        "azCliVersion": "2.47.0",
                        "timeout": "PT30M",
                        "environmentVariables": [
                          {
                            "name": "ResourceGroupName",
                            "value": "[resourceGroup().name]"
                          }
                        ],
                        "scriptContent": "rg_name=\"$ResourceGroupName\"; webapp_ids=$(az webapp list -g $rg_name --query \"[].id\" -o tsv); for webapp_id in $webapp_ids; do fd_conn_ids=$(az network private-endpoint-connection list --id $webapp_id --query \"[?properties.provisioningState == 'Pending'].id\" -o tsv); for fd_conn_id in $fd_conn_ids; do az network private-endpoint-connection approve --id \"$fd_conn_id\" --description \"ApprovedByCli\"; done; done",
                        "cleanupPreference": "OnSuccess",
                        "retentionInterval": "P1D"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Authorization/roleAssignments', variables('roleAssignmentName'))]"
                      ],
                      "metadata": {
                        "description": "The deployment script that will be used to auto-approve the Private Endpoint Connection of the AFD."
                      }
                    },
                    {
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('{0}-deployment', parameters('idAfdPeAutoApproverName'))]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "name": {
                            "value": "[parameters('idAfdPeAutoApproverName')]"
                          },
                          "location": {
                            "value": "[parameters('location')]"
                          },
                          "tags": {
                            "value": "[parameters('tags')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "languageVersion": "2.0",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.29.47.4906",
                              "templateHash": "10609859695208799167"
                            },
                            "name": "User Assigned Identities",
                            "description": "This module deploys a User Assigned Identity.",
                            "owner": "Azure/module-maintainers"
                          },
                          "definitions": {
                            "lockType": {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Specify the name of lock."
                                  }
                                },
                                "kind": {
                                  "type": "string",
                                  "allowedValues": [
                                    "CanNotDelete",
                                    "None",
                                    "ReadOnly"
                                  ],
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Specify the type of lock."
                                  }
                                }
                              },
                              "nullable": true
                            },
                            "roleAssignmentType": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "name": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The name (as GUID) of the role assignment. If not provided, a GUID will be generated."
                                    }
                                  },
                                  "roleDefinitionIdOrName": {
                                    "type": "string",
                                    "metadata": {
                                      "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                                    }
                                  },
                                  "principalId": {
                                    "type": "string",
                                    "metadata": {
                                      "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                                    }
                                  },
                                  "principalType": {
                                    "type": "string",
                                    "allowedValues": [
                                      "Device",
                                      "ForeignGroup",
                                      "Group",
                                      "ServicePrincipal",
                                      "User"
                                    ],
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The principal type of the assigned principal ID."
                                    }
                                  },
                                  "description": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The description of the role assignment."
                                    }
                                  },
                                  "condition": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                                    }
                                  },
                                  "conditionVersion": {
                                    "type": "string",
                                    "allowedValues": [
                                      "2.0"
                                    ],
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. Version of the condition."
                                    }
                                  },
                                  "delegatedManagedIdentityResourceId": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The Resource Id of the delegated managed identity resource."
                                    }
                                  }
                                }
                              },
                              "nullable": true
                            },
                            "federatedIdentityCredentialsType": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "name": {
                                    "type": "string",
                                    "metadata": {
                                      "description": "Required. The name of the federated identity credential."
                                    }
                                  },
                                  "audiences": {
                                    "type": "array",
                                    "items": {
                                      "type": "string"
                                    },
                                    "metadata": {
                                      "description": "Required. The list of audiences that can appear in the issued token."
                                    }
                                  },
                                  "issuer": {
                                    "type": "string",
                                    "metadata": {
                                      "description": "Required. The URL of the issuer to be trusted."
                                    }
                                  },
                                  "subject": {
                                    "type": "string",
                                    "metadata": {
                                      "description": "Required. The identifier of the external identity."
                                    }
                                  }
                                }
                              },
                              "nullable": true
                            }
                          },
                          "parameters": {
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. Name of the User Assigned Identity."
                              }
                            },
                            "location": {
                              "type": "string",
                              "defaultValue": "[resourceGroup().location]",
                              "metadata": {
                                "description": "Optional. Location for all resources."
                              }
                            },
                            "federatedIdentityCredentials": {
                              "$ref": "#/definitions/federatedIdentityCredentialsType",
                              "metadata": {
                                "description": "Optional. The federated identity credentials list to indicate which token from the external IdP should be trusted by your application. Federated identity credentials are supported on applications only. A maximum of 20 federated identity credentials can be added per application object."
                              }
                            },
                            "lock": {
                              "$ref": "#/definitions/lockType",
                              "metadata": {
                                "description": "Optional. The lock settings of the service."
                              }
                            },
                            "roleAssignments": {
                              "$ref": "#/definitions/roleAssignmentType",
                              "metadata": {
                                "description": "Optional. Array of role assignments to create."
                              }
                            },
                            "tags": {
                              "type": "object",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Tags of the resource."
                              }
                            },
                            "enableTelemetry": {
                              "type": "bool",
                              "defaultValue": true,
                              "metadata": {
                                "description": "Optional. Enable/Disable usage telemetry for module."
                              }
                            }
                          },
                          "variables": {
                            "copy": [
                              {
                                "name": "formattedRoleAssignments",
                                "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]",
                                "input": "[union(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')], createObject('roleDefinitionId', coalesce(tryGet(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName), if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName)))))]"
                              }
                            ],
                            "builtInRoleNames": {
                              "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                              "Managed Identity Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'e40ec5ca-96e0-45a2-b4ff-59039f2c2b59')]",
                              "Managed Identity Operator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f1a07417-d97a-45cb-824c-7a7467783830')]",
                              "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                              "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                              "Role Based Access Control Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]",
                              "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]"
                            }
                          },
                          "resources": {
                            "avmTelemetry": {
                              "condition": "[parameters('enableTelemetry')]",
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2024-03-01",
                              "name": "[format('46d3xbcp.res.managedidentity-userassignedidentity.{0}.{1}', replace('0.4.0', '.', '-'), substring(uniqueString(deployment().name, parameters('location')), 0, 4))]",
                              "properties": {
                                "mode": "Incremental",
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "resources": [],
                                  "outputs": {
                                    "telemetry": {
                                      "type": "String",
                                      "value": "For more information, see https://aka.ms/avm/TelemetryInfo"
                                    }
                                  }
                                }
                              }
                            },
                            "userAssignedIdentity": {
                              "type": "Microsoft.ManagedIdentity/userAssignedIdentities",
                              "apiVersion": "2023-01-31",
                              "name": "[parameters('name')]",
                              "location": "[parameters('location')]",
                              "tags": "[parameters('tags')]"
                            },
                            "userAssignedIdentity_lock": {
                              "condition": "[and(not(empty(coalesce(parameters('lock'), createObject()))), not(equals(tryGet(parameters('lock'), 'kind'), 'None')))]",
                              "type": "Microsoft.Authorization/locks",
                              "apiVersion": "2020-05-01",
                              "scope": "[format('Microsoft.ManagedIdentity/userAssignedIdentities/{0}', parameters('name'))]",
                              "name": "[coalesce(tryGet(parameters('lock'), 'name'), format('lock-{0}', parameters('name')))]",
                              "properties": {
                                "level": "[coalesce(tryGet(parameters('lock'), 'kind'), '')]",
                                "notes": "[if(equals(tryGet(parameters('lock'), 'kind'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot delete or modify the resource or child resources.')]"
                              },
                              "dependsOn": [
                                "userAssignedIdentity"
                              ]
                            },
                            "userAssignedIdentity_roleAssignments": {
                              "copy": {
                                "name": "userAssignedIdentity_roleAssignments",
                                "count": "[length(coalesce(variables('formattedRoleAssignments'), createArray()))]"
                              },
                              "type": "Microsoft.Authorization/roleAssignments",
                              "apiVersion": "2022-04-01",
                              "scope": "[format('Microsoft.ManagedIdentity/userAssignedIdentities/{0}', parameters('name'))]",
                              "name": "[coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'name'), guid(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('name')), coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId, coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId))]",
                              "properties": {
                                "roleDefinitionId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId]",
                                "principalId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId]",
                                "description": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'description')]",
                                "principalType": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'principalType')]",
                                "condition": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition')]",
                                "conditionVersion": "[if(not(empty(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                                "delegatedManagedIdentityResourceId": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
                              },
                              "dependsOn": [
                                "userAssignedIdentity"
                              ]
                            },
                            "userAssignedIdentity_federatedIdentityCredentials": {
                              "copy": {
                                "name": "userAssignedIdentity_federatedIdentityCredentials",
                                "count": "[length(coalesce(parameters('federatedIdentityCredentials'), createArray()))]",
                                "mode": "serial",
                                "batchSize": 1
                              },
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "[format('{0}-UserMSI-FederatedIdentityCredential-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "name": {
                                    "value": "[coalesce(parameters('federatedIdentityCredentials'), createArray())[copyIndex()].name]"
                                  },
                                  "userAssignedIdentityName": {
                                    "value": "[parameters('name')]"
                                  },
                                  "audiences": {
                                    "value": "[coalesce(parameters('federatedIdentityCredentials'), createArray())[copyIndex()].audiences]"
                                  },
                                  "issuer": {
                                    "value": "[coalesce(parameters('federatedIdentityCredentials'), createArray())[copyIndex()].issuer]"
                                  },
                                  "subject": {
                                    "value": "[coalesce(parameters('federatedIdentityCredentials'), createArray())[copyIndex()].subject]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.29.47.4906",
                                      "templateHash": "3716898257490923786"
                                    },
                                    "name": "User Assigned Identity Federated Identity Credential",
                                    "description": "This module deploys a User Assigned Identity Federated Identity Credential.",
                                    "owner": "Azure/module-maintainers"
                                  },
                                  "parameters": {
                                    "userAssignedIdentityName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Conditional. The name of the parent user assigned identity. Required if the template is used in a standalone deployment."
                                      }
                                    },
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The name of the secret."
                                      }
                                    },
                                    "audiences": {
                                      "type": "array",
                                      "metadata": {
                                        "description": "Required. The list of audiences that can appear in the issued token. Should be set to api://AzureADTokenExchange for Azure AD. It says what Microsoft identity platform should accept in the aud claim in the incoming token. This value represents Azure AD in your external identity provider and has no fixed value across identity providers - you might need to create a new application registration in your IdP to serve as the audience of this token."
                                      }
                                    },
                                    "issuer": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The URL of the issuer to be trusted. Must match the issuer claim of the external token being exchanged."
                                      }
                                    },
                                    "subject": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The identifier of the external software workload within the external identity provider. Like the audience value, it has no fixed format, as each IdP uses their own - sometimes a GUID, sometimes a colon delimited identifier, sometimes arbitrary strings. The value here must match the sub claim within the token presented to Azure AD."
                                      }
                                    }
                                  },
                                  "resources": [
                                    {
                                      "type": "Microsoft.ManagedIdentity/userAssignedIdentities/federatedIdentityCredentials",
                                      "apiVersion": "2023-01-31",
                                      "name": "[format('{0}/{1}', parameters('userAssignedIdentityName'), parameters('name'))]",
                                      "properties": {
                                        "audiences": "[parameters('audiences')]",
                                        "issuer": "[parameters('issuer')]",
                                        "subject": "[parameters('subject')]"
                                      }
                                    }
                                  ],
                                  "outputs": {
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the federated identity credential."
                                      },
                                      "value": "[parameters('name')]"
                                    },
                                    "resourceId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource ID of the federated identity credential."
                                      },
                                      "value": "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities/federatedIdentityCredentials', parameters('userAssignedIdentityName'), parameters('name'))]"
                                    },
                                    "resourceGroupName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the resource group the federated identity credential was created in."
                                      },
                                      "value": "[resourceGroup().name]"
                                    }
                                  }
                                }
                              },
                              "dependsOn": [
                                "userAssignedIdentity"
                              ]
                            }
                          },
                          "outputs": {
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "The name of the user assigned identity."
                              },
                              "value": "[parameters('name')]"
                            },
                            "resourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource ID of the user assigned identity."
                              },
                              "value": "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('name'))]"
                            },
                            "principalId": {
                              "type": "string",
                              "metadata": {
                                "description": "The principal ID (object ID) of the user assigned identity."
                              },
                              "value": "[reference('userAssignedIdentity').principalId]"
                            },
                            "clientId": {
                              "type": "string",
                              "metadata": {
                                "description": "The client ID (application ID) of the user assigned identity."
                              },
                              "value": "[reference('userAssignedIdentity').clientId]"
                            },
                            "resourceGroupName": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource group the user assigned identity was deployed into."
                              },
                              "value": "[resourceGroup().name]"
                            },
                            "location": {
                              "type": "string",
                              "metadata": {
                                "description": "The location the resource was deployed into."
                              },
                              "value": "[reference('userAssignedIdentity', '2023-01-31', 'full').location]"
                            }
                          }
                        }
                      },
                      "metadata": {
                        "description": "The User Assigned Managed Identity that will be given Contributor role on the Resource Group in order to auto-approve the Private Endpoint Connection of the AFD."
                      }
                    }
                  ],
                  "outputs": {
                    "logs": {
                      "type": "string",
                      "metadata": {
                        "description": "The output of the deployment script that will be used to auto-approve the Private Endpoint Connection of the AFD."
                      },
                      "value": "[reference(resourceId('Microsoft.Resources/deploymentScripts/logs', variables('deploymentScriptName'), 'default'), '2020-10-01').log]"
                    }
                  }
                }
              },
              "dependsOn": [
                "afd"
              ]
            },
            "jumpboxLinuxVM": {
              "condition": "[and(parameters('deployJumpHost'), equals(parameters('vmJumpboxOSType'), 'linux'))]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[take(format('vm-linux-{0}', deployment().name), 64)]",
              "resourceGroup": "[parameters('resourceGroupName')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "tags": {
                    "value": "[parameters('tags')]"
                  },
                  "enableTelemetry": {
                    "value": "[parameters('enableTelemetry')]"
                  },
                  "vmName": {
                    "value": "[parameters('naming').linuxVirtualMachine.name]"
                  },
                  "bastionResourceId": {
                    "value": "[parameters('bastionResourceId')]"
                  },
                  "vmAdminUsername": {
                    "value": "[parameters('adminUsername')]"
                  },
                  "vmAdminPassword": {
                    "value": "[parameters('adminPassword')]"
                  },
                  "vmSize": {
                    "value": "[parameters('vmSize')]"
                  },
                  "vmZone": {
                    "value": "[parameters('vmZone')]"
                  },
                  "storageAccountType": {
                    "value": "[parameters('storageAccountType')]"
                  },
                  "vmVnetName": {
                    "value": "[reference('networking').outputs.vnetSpokeName.value]"
                  },
                  "vmSubnetName": {
                    "value": "[variables('resourceNames').snetDevOps]"
                  },
                  "vmSubnetAddressPrefix": {
                    "value": "[parameters('subnetSpokeDevOpsAddressSpace')]"
                  },
                  "vmNetworkInterfaceName": {
                    "value": "[parameters('naming').networkInterface.name]"
                  },
                  "vmNetworkSecurityGroupName": {
                    "value": "[parameters('naming').networkSecurityGroup.name]"
                  },
                  "vmAuthenticationType": {
                    "value": "[parameters('vmAuthenticationType')]"
                  },
                  "logAnalyticsWorkspaceResourceId": {
                    "value": "[reference('logAnalyticsWs').outputs.resourceId.value]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.32.4.45862",
                      "templateHash": "3599966873711316007"
                    }
                  },
                  "parameters": {
                    "vmName": {
                      "type": "string"
                    },
                    "vmSize": {
                      "type": "string"
                    },
                    "storageAccountType": {
                      "type": "string",
                      "defaultValue": "Premium_LRS"
                    },
                    "vmZone": {
                      "type": "int",
                      "defaultValue": 0
                    },
                    "vmVnetName": {
                      "type": "string"
                    },
                    "vmSubnetName": {
                      "type": "string"
                    },
                    "vmSubnetAddressPrefix": {
                      "type": "string"
                    },
                    "vmNetworkSecurityGroupName": {
                      "type": "string"
                    },
                    "vmNetworkInterfaceName": {
                      "type": "string"
                    },
                    "logAnalyticsWorkspaceResourceId": {
                      "type": "string"
                    },
                    "bastionResourceId": {
                      "type": "string"
                    },
                    "vmAdminUsername": {
                      "type": "string"
                    },
                    "vmAdminPassword": {
                      "type": "securestring"
                    },
                    "sshKeyName": {
                      "type": "string",
                      "defaultValue": "jumpboxSshKey",
                      "metadata": {
                        "description": "Optional. Name of the SSH key for the jumpbox."
                      }
                    },
                    "vmAuthenticationType": {
                      "type": "string",
                      "defaultValue": "password",
                      "allowedValues": [
                        "sshPublicKey",
                        "password"
                      ],
                      "metadata": {
                        "description": "Type of authentication to use on the Virtual Machine. SSH key is recommended."
                      }
                    },
                    "tags": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. The tags to be assigned to the created resources."
                      }
                    },
                    "enableTelemetry": {
                      "type": "bool",
                      "metadata": {
                        "description": "Required. Whether to enable deployment telemetry."
                      }
                    },
                    "location": {
                      "type": "string",
                      "defaultValue": "[resourceGroup().location]"
                    },
                    "sshKeyGenName": {
                      "type": "string",
                      "defaultValue": "[guid(resourceGroup().id, 'userAssignedIdentity')]",
                      "metadata": {
                        "description": "Optional. The name of the user-assigned identity to be used to generate SSH key for Linux VM. Changing this forces a new resource to be created."
                      }
                    }
                  },
                  "variables": {
                    "$fxv#0": "<#\n.SYNOPSIS\nGenerate a new Public SSH Key or fetch it from an existing Public SSH Key resource.\n\n.DESCRIPTION\nGenerate a new Public SSH Key or fetch it from an existing Public SSH Key resource.\n\n.PARAMETER SSHKeyName\nMandatory. The name of the Public SSH Key Resource as it would be deployed in Azure\n\n.PARAMETER ResourceGroupName\nMandatory. The resource group name of the Public SSH Key Resource as it would be deployed in Azure\n\n.EXAMPLE\n./New-SSHKey.ps1 -SSHKeyName 'myKeyResource' -ResourceGroupName 'ssh-rg'\n\nGenerate a new Public SSH Key or fetch it from an existing Public SSH Key resource 'myKeyResource' in Resource Group 'ssh-rg'\n#>\nparam(\n    [Parameter(Mandatory = $true)]\n    [string] $SSHKeyName,\n\n    [Parameter(Mandatory = $true)]\n    [string] $ResourceGroupName\n)\n\nif (-not ($sshKey = Get-AzSshKey -ResourceGroupName $ResourceGroupName | Where-Object { $_.Name -eq $SSHKeyName })) {\n    Write-Verbose \"No SSH key [$SSHKeyName] found in Resource Group [$ResourceGroupName]. Generating new.\" -Verbose\n    $null = ssh-keygen -f generated -N (Get-Random -Maximum 99999)\n    $publicKey = Get-Content 'generated.pub' -Raw\n    # $privateKey = cat generated | Out-String\n} else {\n    Write-Verbose \"SSH key [$SSHKeyName] found in Resource Group [$ResourceGroupName]. Returning.\" -Verbose\n    $publicKey = $sshKey.publicKey\n}\n# Write into Deployment Script output stream\n$DeploymentScriptOutputs = @{\n    # Requires conversion as the script otherwise returns an object instead of the plain public key string\n    publicKey = $publicKey | Out-String\n}\n",
                    "roleAssignmentName": "[guid(resourceGroup().id, 'contributor')]",
                    "contributorRoleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                    "uami": "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('sshKeyGenName'))]"
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Network/virtualNetworks/subnets",
                      "apiVersion": "2023-11-01",
                      "name": "[format('{0}/{1}', parameters('vmVnetName'), parameters('vmSubnetName'))]",
                      "properties": {
                        "addressPrefix": "[parameters('vmSubnetAddressPrefix')]",
                        "networkSecurityGroup": {
                          "id": "[reference(resourceId('Microsoft.Resources/deployments', 'vmNetworkSecurityDeployment'), '2022-09-01').outputs.resourceId.value]"
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Resources/deployments', 'vmNetworkSecurityDeployment')]"
                      ]
                    },
                    {
                      "type": "Microsoft.Maintenance/maintenanceConfigurations",
                      "apiVersion": "2023-10-01-preview",
                      "name": "[format('dep-mc-{0}', parameters('vmName'))]",
                      "location": "[parameters('location')]",
                      "properties": {
                        "extensionProperties": {
                          "InGuestPatchMode": "User"
                        },
                        "maintenanceScope": "InGuestPatch",
                        "maintenanceWindow": {
                          "startDateTime": "2024-06-16 00:00",
                          "duration": "03:55",
                          "timeZone": "W. Europe Standard Time",
                          "recurEvery": "1Day"
                        },
                        "visibility": "Custom",
                        "installPatches": {
                          "rebootSetting": "IfRequired",
                          "linuxParameters": {
                            "classificationsToInclude": [
                              "Critical",
                              "Security"
                            ]
                          }
                        }
                      }
                    },
                    {
                      "type": "Microsoft.Authorization/roleAssignments",
                      "apiVersion": "2020-04-01-preview",
                      "name": "[variables('roleAssignmentName')]",
                      "properties": {
                        "roleDefinitionId": "[variables('contributorRoleDefinitionId')]",
                        "principalId": "[reference(resourceId('Microsoft.Resources/deployments', format('{0}-deployment', parameters('sshKeyGenName'))), '2022-09-01').outputs.principalId.value]",
                        "principalType": "ServicePrincipal"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Resources/deployments', format('{0}-deployment', parameters('sshKeyGenName')))]"
                      ],
                      "metadata": {
                        "description": "The role assignment that will be created to give the User Assigned Managed Identity Contributor role on the Resource Group in order to auto-approve the Private Endpoint Connection of the AFD."
                      }
                    },
                    {
                      "type": "Microsoft.Resources/deploymentScripts",
                      "apiVersion": "2020-10-01",
                      "name": "sshDeploymentScriptName",
                      "location": "[parameters('location')]",
                      "kind": "AzurePowerShell",
                      "identity": {
                        "type": "UserAssigned",
                        "userAssignedIdentities": {
                          "[format('{0}', variables('uami'))]": {}
                        }
                      },
                      "properties": {
                        "azPowerShellVersion": "9.0",
                        "retentionInterval": "P1D",
                        "arguments": "[format('-SSHKeyName \"{0}\" -ResourceGroupName \"{1}\"', parameters('sshKeyName'), resourceGroup().name)]",
                        "scriptContent": "[variables('$fxv#0')]"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Authorization/roleAssignments', variables('roleAssignmentName'))]"
                      ]
                    },
                    {
                      "type": "Microsoft.Compute/sshPublicKeys",
                      "apiVersion": "2022-03-01",
                      "name": "[parameters('sshKeyName')]",
                      "location": "[parameters('location')]",
                      "properties": {
                        "publicKey": "[reference(resourceId('Microsoft.Resources/deploymentScripts', 'sshDeploymentScriptName'), '2020-10-01').outputs.publicKey]"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Resources/deploymentScripts', 'sshDeploymentScriptName')]"
                      ]
                    },
                    {
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "vmNetworkSecurityDeployment",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "name": {
                            "value": "[parameters('vmNetworkSecurityGroupName')]"
                          },
                          "location": {
                            "value": "[parameters('location')]"
                          },
                          "tags": {
                            "value": "[parameters('tags')]"
                          },
                          "enableTelemetry": {
                            "value": "[parameters('enableTelemetry')]"
                          },
                          "securityRules": "[if(not(empty(parameters('bastionResourceId'))), createObject('value', createArray(createObject('name', 'allow-bastion-inbound', 'properties', createObject('description', 'Allow inbound traffic from Bastion to the JumpBox', 'protocol', '*', 'sourceAddressPrefix', 'Bastion', 'sourcePortRange', '*', 'destinationAddressPrefix', '*', 'destinationPortRange', '*', 'access', 'Allow', 'priority', 100, 'direction', 'Inbound')), createObject('name', 'deny-hop-outbound', 'properties', createObject('priority', 200, 'access', 'Deny', 'protocol', 'Tcp', 'direction', 'Outbound', 'sourceAddressPrefix', 'VirtualNetwork', 'destinationAddressPrefix', '*', 'destinationPortRanges', createArray('3389', '22'))))), createObject('value', createArray(createObject('name', 'deny-hop-outbound', 'properties', createObject('priority', 200, 'access', 'Deny', 'protocol', 'Tcp', 'direction', 'Outbound', 'sourceAddressPrefix', 'VirtualNetwork', 'destinationAddressPrefix', '*', 'destinationPortRanges', createArray('3389', '22'))))))]"
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "languageVersion": "2.0",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.27.1.19265",
                              "templateHash": "8543584719514494080"
                            },
                            "name": "Network Security Groups",
                            "description": "This module deploys a Network security Group (NSG).",
                            "owner": "Azure/module-maintainers"
                          },
                          "definitions": {
                            "lockType": {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Specify the name of lock."
                                  }
                                },
                                "kind": {
                                  "type": "string",
                                  "allowedValues": [
                                    "CanNotDelete",
                                    "None",
                                    "ReadOnly"
                                  ],
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Specify the type of lock."
                                  }
                                }
                              },
                              "nullable": true
                            },
                            "roleAssignmentType": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "roleDefinitionIdOrName": {
                                    "type": "string",
                                    "metadata": {
                                      "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                                    }
                                  },
                                  "principalId": {
                                    "type": "string",
                                    "metadata": {
                                      "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                                    }
                                  },
                                  "principalType": {
                                    "type": "string",
                                    "allowedValues": [
                                      "Device",
                                      "ForeignGroup",
                                      "Group",
                                      "ServicePrincipal",
                                      "User"
                                    ],
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The principal type of the assigned principal ID."
                                    }
                                  },
                                  "description": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The description of the role assignment."
                                    }
                                  },
                                  "condition": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                                    }
                                  },
                                  "conditionVersion": {
                                    "type": "string",
                                    "allowedValues": [
                                      "2.0"
                                    ],
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. Version of the condition."
                                    }
                                  },
                                  "delegatedManagedIdentityResourceId": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The Resource Id of the delegated managed identity resource."
                                    }
                                  }
                                }
                              },
                              "nullable": true
                            },
                            "diagnosticSettingType": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "name": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The name of diagnostic setting."
                                    }
                                  },
                                  "logCategoriesAndGroups": {
                                    "type": "array",
                                    "items": {
                                      "type": "object",
                                      "properties": {
                                        "category": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. Name of a Diagnostic Log category for a resource type this setting is applied to. Set the specific logs to collect here."
                                          }
                                        },
                                        "categoryGroup": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. Name of a Diagnostic Log category group for a resource type this setting is applied to. Set to `allLogs` to collect all logs."
                                          }
                                        },
                                        "enabled": {
                                          "type": "bool",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. Enable or disable the category explicitly. Default is `true`."
                                          }
                                        }
                                      }
                                    },
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The name of logs that will be streamed. \"allLogs\" includes all possible logs for the resource. Set to `[]` to disable log collection."
                                    }
                                  },
                                  "logAnalyticsDestinationType": {
                                    "type": "string",
                                    "allowedValues": [
                                      "AzureDiagnostics",
                                      "Dedicated"
                                    ],
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. A string indicating whether the export to Log Analytics should use the default destination type, i.e. AzureDiagnostics, or use a destination type."
                                    }
                                  },
                                  "workspaceResourceId": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. Resource ID of the diagnostic log analytics workspace. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                                    }
                                  },
                                  "storageAccountResourceId": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. Resource ID of the diagnostic storage account. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                                    }
                                  },
                                  "eventHubAuthorizationRuleResourceId": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. Resource ID of the diagnostic event hub authorization rule for the Event Hubs namespace in which the event hub should be created or streamed to."
                                    }
                                  },
                                  "eventHubName": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. Name of the diagnostic event hub within the namespace to which logs are streamed. Without this, an event hub is created for each log category. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                                    }
                                  },
                                  "marketplacePartnerResourceId": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The full ARM resource ID of the Marketplace resource to which you would like to send Diagnostic Logs."
                                    }
                                  }
                                }
                              },
                              "nullable": true
                            }
                          },
                          "parameters": {
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. Name of the Network Security Group."
                              }
                            },
                            "location": {
                              "type": "string",
                              "defaultValue": "[resourceGroup().location]",
                              "metadata": {
                                "description": "Optional. Location for all resources."
                              }
                            },
                            "securityRules": {
                              "type": "array",
                              "defaultValue": [],
                              "metadata": {
                                "description": "Optional. Array of Security Rules to deploy to the Network Security Group. When not provided, an NSG including only the built-in roles will be deployed."
                              }
                            },
                            "flushConnection": {
                              "type": "bool",
                              "defaultValue": false,
                              "metadata": {
                                "description": "Optional. When enabled, flows created from Network Security Group connections will be re-evaluated when rules are updates. Initial enablement will trigger re-evaluation. Network Security Group connection flushing is not available in all regions."
                              }
                            },
                            "diagnosticSettings": {
                              "$ref": "#/definitions/diagnosticSettingType",
                              "metadata": {
                                "description": "Optional. The diagnostic settings of the service."
                              }
                            },
                            "lock": {
                              "$ref": "#/definitions/lockType",
                              "metadata": {
                                "description": "Optional. The lock settings of the service."
                              }
                            },
                            "roleAssignments": {
                              "$ref": "#/definitions/roleAssignmentType",
                              "metadata": {
                                "description": "Optional. Array of role assignments to create."
                              }
                            },
                            "tags": {
                              "type": "object",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Tags of the NSG resource."
                              }
                            },
                            "enableTelemetry": {
                              "type": "bool",
                              "defaultValue": true,
                              "metadata": {
                                "description": "Optional. Enable/Disable usage telemetry for module."
                              }
                            }
                          },
                          "variables": {
                            "builtInRoleNames": {
                              "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                              "Network Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4d97b98b-1d4f-4787-a291-c67834d212e7')]",
                              "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                              "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                              "Role Based Access Control Administrator (Preview)": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]",
                              "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]"
                            }
                          },
                          "resources": {
                            "avmTelemetry": {
                              "condition": "[parameters('enableTelemetry')]",
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2023-07-01",
                              "name": "[format('46d3xbcp.res.network-networksecuritygroup.{0}.{1}', replace('0.2.0', '.', '-'), substring(uniqueString(deployment().name, parameters('location')), 0, 4))]",
                              "properties": {
                                "mode": "Incremental",
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "resources": [],
                                  "outputs": {
                                    "telemetry": {
                                      "type": "String",
                                      "value": "For more information, see https://aka.ms/avm/TelemetryInfo"
                                    }
                                  }
                                }
                              }
                            },
                            "networkSecurityGroup": {
                              "type": "Microsoft.Network/networkSecurityGroups",
                              "apiVersion": "2023-11-01",
                              "name": "[parameters('name')]",
                              "location": "[parameters('location')]",
                              "tags": "[parameters('tags')]",
                              "properties": {
                                "copy": [
                                  {
                                    "name": "securityRules",
                                    "count": "[length(parameters('securityRules'))]",
                                    "input": {
                                      "name": "[parameters('securityRules')[copyIndex('securityRules')].name]",
                                      "properties": {
                                        "protocol": "[parameters('securityRules')[copyIndex('securityRules')].properties.protocol]",
                                        "access": "[parameters('securityRules')[copyIndex('securityRules')].properties.access]",
                                        "priority": "[parameters('securityRules')[copyIndex('securityRules')].properties.priority]",
                                        "direction": "[parameters('securityRules')[copyIndex('securityRules')].properties.direction]",
                                        "description": "[if(contains(parameters('securityRules')[copyIndex('securityRules')].properties, 'description'), parameters('securityRules')[copyIndex('securityRules')].properties.description, '')]",
                                        "sourcePortRange": "[if(contains(parameters('securityRules')[copyIndex('securityRules')].properties, 'sourcePortRange'), parameters('securityRules')[copyIndex('securityRules')].properties.sourcePortRange, '')]",
                                        "sourcePortRanges": "[if(contains(parameters('securityRules')[copyIndex('securityRules')].properties, 'sourcePortRanges'), parameters('securityRules')[copyIndex('securityRules')].properties.sourcePortRanges, createArray())]",
                                        "destinationPortRange": "[if(contains(parameters('securityRules')[copyIndex('securityRules')].properties, 'destinationPortRange'), parameters('securityRules')[copyIndex('securityRules')].properties.destinationPortRange, '')]",
                                        "destinationPortRanges": "[if(contains(parameters('securityRules')[copyIndex('securityRules')].properties, 'destinationPortRanges'), parameters('securityRules')[copyIndex('securityRules')].properties.destinationPortRanges, createArray())]",
                                        "sourceAddressPrefix": "[if(contains(parameters('securityRules')[copyIndex('securityRules')].properties, 'sourceAddressPrefix'), parameters('securityRules')[copyIndex('securityRules')].properties.sourceAddressPrefix, '')]",
                                        "destinationAddressPrefix": "[if(contains(parameters('securityRules')[copyIndex('securityRules')].properties, 'destinationAddressPrefix'), parameters('securityRules')[copyIndex('securityRules')].properties.destinationAddressPrefix, '')]",
                                        "sourceAddressPrefixes": "[if(contains(parameters('securityRules')[copyIndex('securityRules')].properties, 'sourceAddressPrefixes'), parameters('securityRules')[copyIndex('securityRules')].properties.sourceAddressPrefixes, createArray())]",
                                        "destinationAddressPrefixes": "[if(contains(parameters('securityRules')[copyIndex('securityRules')].properties, 'destinationAddressPrefixes'), parameters('securityRules')[copyIndex('securityRules')].properties.destinationAddressPrefixes, createArray())]",
                                        "sourceApplicationSecurityGroups": "[if(contains(parameters('securityRules')[copyIndex('securityRules')].properties, 'sourceApplicationSecurityGroups'), parameters('securityRules')[copyIndex('securityRules')].properties.sourceApplicationSecurityGroups, createArray())]",
                                        "destinationApplicationSecurityGroups": "[if(contains(parameters('securityRules')[copyIndex('securityRules')].properties, 'destinationApplicationSecurityGroups'), parameters('securityRules')[copyIndex('securityRules')].properties.destinationApplicationSecurityGroups, createArray())]"
                                      }
                                    }
                                  }
                                ],
                                "flushConnection": "[parameters('flushConnection')]"
                              }
                            },
                            "networkSecurityGroup_lock": {
                              "condition": "[and(not(empty(coalesce(parameters('lock'), createObject()))), not(equals(tryGet(parameters('lock'), 'kind'), 'None')))]",
                              "type": "Microsoft.Authorization/locks",
                              "apiVersion": "2020-05-01",
                              "scope": "[format('Microsoft.Network/networkSecurityGroups/{0}', parameters('name'))]",
                              "name": "[coalesce(tryGet(parameters('lock'), 'name'), format('lock-{0}', parameters('name')))]",
                              "properties": {
                                "level": "[coalesce(tryGet(parameters('lock'), 'kind'), '')]",
                                "notes": "[if(equals(tryGet(parameters('lock'), 'kind'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot delete or modify the resource or child resources.')]"
                              },
                              "dependsOn": [
                                "networkSecurityGroup"
                              ]
                            },
                            "networkSecurityGroup_diagnosticSettings": {
                              "copy": {
                                "name": "networkSecurityGroup_diagnosticSettings",
                                "count": "[length(coalesce(parameters('diagnosticSettings'), createArray()))]"
                              },
                              "type": "Microsoft.Insights/diagnosticSettings",
                              "apiVersion": "2021-05-01-preview",
                              "scope": "[format('Microsoft.Network/networkSecurityGroups/{0}', parameters('name'))]",
                              "name": "[coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'name'), format('{0}-diagnosticSettings', parameters('name')))]",
                              "properties": {
                                "copy": [
                                  {
                                    "name": "logs",
                                    "count": "[length(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs'))))]",
                                    "input": {
                                      "categoryGroup": "[tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'categoryGroup')]",
                                      "category": "[tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'category')]",
                                      "enabled": "[coalesce(tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'enabled'), true())]"
                                    }
                                  }
                                ],
                                "storageAccountId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'storageAccountResourceId')]",
                                "workspaceId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'workspaceResourceId')]",
                                "eventHubAuthorizationRuleId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'eventHubAuthorizationRuleResourceId')]",
                                "eventHubName": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'eventHubName')]",
                                "marketplacePartnerId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'marketplacePartnerResourceId')]",
                                "logAnalyticsDestinationType": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logAnalyticsDestinationType')]"
                              },
                              "dependsOn": [
                                "networkSecurityGroup"
                              ]
                            },
                            "networkSecurityGroup_roleAssignments": {
                              "copy": {
                                "name": "networkSecurityGroup_roleAssignments",
                                "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]"
                              },
                              "type": "Microsoft.Authorization/roleAssignments",
                              "apiVersion": "2022-04-01",
                              "scope": "[format('Microsoft.Network/networkSecurityGroups/{0}', parameters('name'))]",
                              "name": "[guid(resourceId('Microsoft.Network/networkSecurityGroups', parameters('name')), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].principalId, coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName)]",
                              "properties": {
                                "roleDefinitionId": "[if(contains(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName), variables('builtInRoleNames')[coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName], if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName)))]",
                                "principalId": "[coalesce(parameters('roleAssignments'), createArray())[copyIndex()].principalId]",
                                "description": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'description')]",
                                "principalType": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'principalType')]",
                                "condition": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'condition')]",
                                "conditionVersion": "[if(not(empty(tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                                "delegatedManagedIdentityResourceId": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
                              },
                              "dependsOn": [
                                "networkSecurityGroup"
                              ]
                            },
                            "networkSecurityGroup_securityRules": {
                              "copy": {
                                "name": "networkSecurityGroup_securityRules",
                                "count": "[length(parameters('securityRules'))]"
                              },
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "[format('{0}-NetworkSecurityGroup-SecurityRule-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "name": {
                                    "value": "[parameters('securityRules')[copyIndex()].name]"
                                  },
                                  "networkSecurityGroupName": {
                                    "value": "[parameters('name')]"
                                  },
                                  "protocol": {
                                    "value": "[parameters('securityRules')[copyIndex()].properties.protocol]"
                                  },
                                  "access": {
                                    "value": "[parameters('securityRules')[copyIndex()].properties.access]"
                                  },
                                  "priority": {
                                    "value": "[parameters('securityRules')[copyIndex()].properties.priority]"
                                  },
                                  "direction": {
                                    "value": "[parameters('securityRules')[copyIndex()].properties.direction]"
                                  },
                                  "description": "[if(contains(parameters('securityRules')[copyIndex()].properties, 'description'), createObject('value', parameters('securityRules')[copyIndex()].properties.description), createObject('value', ''))]",
                                  "sourcePortRange": "[if(contains(parameters('securityRules')[copyIndex()].properties, 'sourcePortRange'), createObject('value', parameters('securityRules')[copyIndex()].properties.sourcePortRange), createObject('value', ''))]",
                                  "sourcePortRanges": "[if(contains(parameters('securityRules')[copyIndex()].properties, 'sourcePortRanges'), createObject('value', parameters('securityRules')[copyIndex()].properties.sourcePortRanges), createObject('value', createArray()))]",
                                  "destinationPortRange": "[if(contains(parameters('securityRules')[copyIndex()].properties, 'destinationPortRange'), createObject('value', parameters('securityRules')[copyIndex()].properties.destinationPortRange), createObject('value', ''))]",
                                  "destinationPortRanges": "[if(contains(parameters('securityRules')[copyIndex()].properties, 'destinationPortRanges'), createObject('value', parameters('securityRules')[copyIndex()].properties.destinationPortRanges), createObject('value', createArray()))]",
                                  "sourceAddressPrefix": "[if(contains(parameters('securityRules')[copyIndex()].properties, 'sourceAddressPrefix'), createObject('value', parameters('securityRules')[copyIndex()].properties.sourceAddressPrefix), createObject('value', ''))]",
                                  "destinationAddressPrefix": "[if(contains(parameters('securityRules')[copyIndex()].properties, 'destinationAddressPrefix'), createObject('value', parameters('securityRules')[copyIndex()].properties.destinationAddressPrefix), createObject('value', ''))]",
                                  "sourceAddressPrefixes": "[if(contains(parameters('securityRules')[copyIndex()].properties, 'sourceAddressPrefixes'), createObject('value', parameters('securityRules')[copyIndex()].properties.sourceAddressPrefixes), createObject('value', createArray()))]",
                                  "destinationAddressPrefixes": "[if(contains(parameters('securityRules')[copyIndex()].properties, 'destinationAddressPrefixes'), createObject('value', parameters('securityRules')[copyIndex()].properties.destinationAddressPrefixes), createObject('value', createArray()))]",
                                  "sourceApplicationSecurityGroups": "[if(contains(parameters('securityRules')[copyIndex()].properties, 'sourceApplicationSecurityGroups'), createObject('value', parameters('securityRules')[copyIndex()].properties.sourceApplicationSecurityGroups), createObject('value', createArray()))]",
                                  "destinationApplicationSecurityGroups": "[if(contains(parameters('securityRules')[copyIndex()].properties, 'destinationApplicationSecurityGroups'), createObject('value', parameters('securityRules')[copyIndex()].properties.destinationApplicationSecurityGroups), createObject('value', createArray()))]"
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.27.1.19265",
                                      "templateHash": "17252857850318600622"
                                    },
                                    "name": "Network Security Group (NSG) Security Rules",
                                    "description": "This module deploys a Network Security Group (NSG) Security Rule.",
                                    "owner": "Azure/module-maintainers"
                                  },
                                  "parameters": {
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The name of the security rule."
                                      }
                                    },
                                    "networkSecurityGroupName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Conditional. The name of the parent network security group to deploy the security rule into. Required if the template is used in a standalone deployment."
                                      }
                                    },
                                    "access": {
                                      "type": "string",
                                      "defaultValue": "Deny",
                                      "allowedValues": [
                                        "Allow",
                                        "Deny"
                                      ],
                                      "metadata": {
                                        "description": "Optional. Whether network traffic is allowed or denied."
                                      }
                                    },
                                    "description": {
                                      "type": "string",
                                      "defaultValue": "",
                                      "maxLength": 140,
                                      "metadata": {
                                        "description": "Optional. A description for this rule."
                                      }
                                    },
                                    "destinationAddressPrefix": {
                                      "type": "string",
                                      "defaultValue": "",
                                      "metadata": {
                                        "description": "Optional. The destination address prefix. CIDR or destination IP range. Asterisk \"*\" can also be used to match all source IPs. Default tags such as \"VirtualNetwork\", \"AzureLoadBalancer\" and \"Internet\" can also be used."
                                      }
                                    },
                                    "destinationAddressPrefixes": {
                                      "type": "array",
                                      "defaultValue": [],
                                      "metadata": {
                                        "description": "Optional. The destination address prefixes. CIDR or destination IP ranges."
                                      }
                                    },
                                    "destinationApplicationSecurityGroups": {
                                      "type": "array",
                                      "defaultValue": [],
                                      "metadata": {
                                        "description": "Optional. The application security group specified as destination."
                                      }
                                    },
                                    "destinationPortRange": {
                                      "type": "string",
                                      "defaultValue": "",
                                      "metadata": {
                                        "description": "Optional. The destination port or range. Integer or range between 0 and 65535. Asterisk \"*\" can also be used to match all ports."
                                      }
                                    },
                                    "destinationPortRanges": {
                                      "type": "array",
                                      "defaultValue": [],
                                      "metadata": {
                                        "description": "Optional. The destination port ranges."
                                      }
                                    },
                                    "direction": {
                                      "type": "string",
                                      "allowedValues": [
                                        "Inbound",
                                        "Outbound"
                                      ],
                                      "metadata": {
                                        "description": "Required. The direction of the rule. The direction specifies if rule will be evaluated on incoming or outgoing traffic."
                                      }
                                    },
                                    "priority": {
                                      "type": "int",
                                      "metadata": {
                                        "description": "Required. The priority of the rule. The value can be between 100 and 4096. The priority number must be unique for each rule in the collection. The lower the priority number, the higher the priority of the rule."
                                      }
                                    },
                                    "protocol": {
                                      "type": "string",
                                      "allowedValues": [
                                        "*",
                                        "Ah",
                                        "Esp",
                                        "Icmp",
                                        "Tcp",
                                        "Udp"
                                      ],
                                      "metadata": {
                                        "description": "Required. Network protocol this rule applies to."
                                      }
                                    },
                                    "sourceAddressPrefix": {
                                      "type": "string",
                                      "defaultValue": "",
                                      "metadata": {
                                        "description": "Optional. The CIDR or source IP range. Asterisk \"*\" can also be used to match all source IPs. Default tags such as \"VirtualNetwork\", \"AzureLoadBalancer\" and \"Internet\" can also be used. If this is an ingress rule, specifies where network traffic originates from."
                                      }
                                    },
                                    "sourceAddressPrefixes": {
                                      "type": "array",
                                      "defaultValue": [],
                                      "metadata": {
                                        "description": "Optional. The CIDR or source IP ranges."
                                      }
                                    },
                                    "sourceApplicationSecurityGroups": {
                                      "type": "array",
                                      "defaultValue": [],
                                      "metadata": {
                                        "description": "Optional. The application security group specified as source."
                                      }
                                    },
                                    "sourcePortRange": {
                                      "type": "string",
                                      "defaultValue": "",
                                      "metadata": {
                                        "description": "Optional. The source port or range. Integer or range between 0 and 65535. Asterisk \"*\" can also be used to match all ports."
                                      }
                                    },
                                    "sourcePortRanges": {
                                      "type": "array",
                                      "defaultValue": [],
                                      "metadata": {
                                        "description": "Optional. The source port ranges."
                                      }
                                    }
                                  },
                                  "resources": [
                                    {
                                      "type": "Microsoft.Network/networkSecurityGroups/securityRules",
                                      "apiVersion": "2023-11-01",
                                      "name": "[format('{0}/{1}', parameters('networkSecurityGroupName'), parameters('name'))]",
                                      "properties": {
                                        "access": "[parameters('access')]",
                                        "description": "[parameters('description')]",
                                        "destinationAddressPrefix": "[parameters('destinationAddressPrefix')]",
                                        "destinationAddressPrefixes": "[parameters('destinationAddressPrefixes')]",
                                        "destinationApplicationSecurityGroups": "[parameters('destinationApplicationSecurityGroups')]",
                                        "destinationPortRange": "[parameters('destinationPortRange')]",
                                        "destinationPortRanges": "[parameters('destinationPortRanges')]",
                                        "direction": "[parameters('direction')]",
                                        "priority": "[parameters('priority')]",
                                        "protocol": "[parameters('protocol')]",
                                        "sourceAddressPrefix": "[parameters('sourceAddressPrefix')]",
                                        "sourceAddressPrefixes": "[parameters('sourceAddressPrefixes')]",
                                        "sourceApplicationSecurityGroups": "[parameters('sourceApplicationSecurityGroups')]",
                                        "sourcePortRange": "[parameters('sourcePortRange')]",
                                        "sourcePortRanges": "[parameters('sourcePortRanges')]"
                                      }
                                    }
                                  ],
                                  "outputs": {
                                    "resourceGroupName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource group the security rule was deployed into."
                                      },
                                      "value": "[resourceGroup().name]"
                                    },
                                    "resourceId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource ID of the security rule."
                                      },
                                      "value": "[resourceId('Microsoft.Network/networkSecurityGroups/securityRules', parameters('networkSecurityGroupName'), parameters('name'))]"
                                    },
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the security rule."
                                      },
                                      "value": "[parameters('name')]"
                                    }
                                  }
                                }
                              },
                              "dependsOn": [
                                "networkSecurityGroup"
                              ]
                            }
                          },
                          "outputs": {
                            "resourceGroupName": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource group the network security group was deployed into."
                              },
                              "value": "[resourceGroup().name]"
                            },
                            "resourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource ID of the network security group."
                              },
                              "value": "[resourceId('Microsoft.Network/networkSecurityGroups', parameters('name'))]"
                            },
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "The name of the network security group."
                              },
                              "value": "[parameters('name')]"
                            },
                            "location": {
                              "type": "string",
                              "metadata": {
                                "description": "The location the resource was deployed into."
                              },
                              "value": "[reference('networkSecurityGroup', '2023-11-01', 'full').location]"
                            }
                          }
                        }
                      }
                    },
                    {
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('{0}-deployment', parameters('sshKeyGenName'))]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "name": {
                            "value": "[parameters('sshKeyGenName')]"
                          },
                          "location": {
                            "value": "[parameters('location')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "languageVersion": "2.0",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.29.47.4906",
                              "templateHash": "10609859695208799167"
                            },
                            "name": "User Assigned Identities",
                            "description": "This module deploys a User Assigned Identity.",
                            "owner": "Azure/module-maintainers"
                          },
                          "definitions": {
                            "lockType": {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Specify the name of lock."
                                  }
                                },
                                "kind": {
                                  "type": "string",
                                  "allowedValues": [
                                    "CanNotDelete",
                                    "None",
                                    "ReadOnly"
                                  ],
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Specify the type of lock."
                                  }
                                }
                              },
                              "nullable": true
                            },
                            "roleAssignmentType": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "name": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The name (as GUID) of the role assignment. If not provided, a GUID will be generated."
                                    }
                                  },
                                  "roleDefinitionIdOrName": {
                                    "type": "string",
                                    "metadata": {
                                      "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                                    }
                                  },
                                  "principalId": {
                                    "type": "string",
                                    "metadata": {
                                      "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                                    }
                                  },
                                  "principalType": {
                                    "type": "string",
                                    "allowedValues": [
                                      "Device",
                                      "ForeignGroup",
                                      "Group",
                                      "ServicePrincipal",
                                      "User"
                                    ],
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The principal type of the assigned principal ID."
                                    }
                                  },
                                  "description": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The description of the role assignment."
                                    }
                                  },
                                  "condition": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                                    }
                                  },
                                  "conditionVersion": {
                                    "type": "string",
                                    "allowedValues": [
                                      "2.0"
                                    ],
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. Version of the condition."
                                    }
                                  },
                                  "delegatedManagedIdentityResourceId": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The Resource Id of the delegated managed identity resource."
                                    }
                                  }
                                }
                              },
                              "nullable": true
                            },
                            "federatedIdentityCredentialsType": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "name": {
                                    "type": "string",
                                    "metadata": {
                                      "description": "Required. The name of the federated identity credential."
                                    }
                                  },
                                  "audiences": {
                                    "type": "array",
                                    "items": {
                                      "type": "string"
                                    },
                                    "metadata": {
                                      "description": "Required. The list of audiences that can appear in the issued token."
                                    }
                                  },
                                  "issuer": {
                                    "type": "string",
                                    "metadata": {
                                      "description": "Required. The URL of the issuer to be trusted."
                                    }
                                  },
                                  "subject": {
                                    "type": "string",
                                    "metadata": {
                                      "description": "Required. The identifier of the external identity."
                                    }
                                  }
                                }
                              },
                              "nullable": true
                            }
                          },
                          "parameters": {
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. Name of the User Assigned Identity."
                              }
                            },
                            "location": {
                              "type": "string",
                              "defaultValue": "[resourceGroup().location]",
                              "metadata": {
                                "description": "Optional. Location for all resources."
                              }
                            },
                            "federatedIdentityCredentials": {
                              "$ref": "#/definitions/federatedIdentityCredentialsType",
                              "metadata": {
                                "description": "Optional. The federated identity credentials list to indicate which token from the external IdP should be trusted by your application. Federated identity credentials are supported on applications only. A maximum of 20 federated identity credentials can be added per application object."
                              }
                            },
                            "lock": {
                              "$ref": "#/definitions/lockType",
                              "metadata": {
                                "description": "Optional. The lock settings of the service."
                              }
                            },
                            "roleAssignments": {
                              "$ref": "#/definitions/roleAssignmentType",
                              "metadata": {
                                "description": "Optional. Array of role assignments to create."
                              }
                            },
                            "tags": {
                              "type": "object",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Tags of the resource."
                              }
                            },
                            "enableTelemetry": {
                              "type": "bool",
                              "defaultValue": true,
                              "metadata": {
                                "description": "Optional. Enable/Disable usage telemetry for module."
                              }
                            }
                          },
                          "variables": {
                            "copy": [
                              {
                                "name": "formattedRoleAssignments",
                                "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]",
                                "input": "[union(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')], createObject('roleDefinitionId', coalesce(tryGet(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName), if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName)))))]"
                              }
                            ],
                            "builtInRoleNames": {
                              "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                              "Managed Identity Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'e40ec5ca-96e0-45a2-b4ff-59039f2c2b59')]",
                              "Managed Identity Operator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f1a07417-d97a-45cb-824c-7a7467783830')]",
                              "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                              "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                              "Role Based Access Control Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]",
                              "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]"
                            }
                          },
                          "resources": {
                            "avmTelemetry": {
                              "condition": "[parameters('enableTelemetry')]",
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2024-03-01",
                              "name": "[format('46d3xbcp.res.managedidentity-userassignedidentity.{0}.{1}', replace('0.4.0', '.', '-'), substring(uniqueString(deployment().name, parameters('location')), 0, 4))]",
                              "properties": {
                                "mode": "Incremental",
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "resources": [],
                                  "outputs": {
                                    "telemetry": {
                                      "type": "String",
                                      "value": "For more information, see https://aka.ms/avm/TelemetryInfo"
                                    }
                                  }
                                }
                              }
                            },
                            "userAssignedIdentity": {
                              "type": "Microsoft.ManagedIdentity/userAssignedIdentities",
                              "apiVersion": "2023-01-31",
                              "name": "[parameters('name')]",
                              "location": "[parameters('location')]",
                              "tags": "[parameters('tags')]"
                            },
                            "userAssignedIdentity_lock": {
                              "condition": "[and(not(empty(coalesce(parameters('lock'), createObject()))), not(equals(tryGet(parameters('lock'), 'kind'), 'None')))]",
                              "type": "Microsoft.Authorization/locks",
                              "apiVersion": "2020-05-01",
                              "scope": "[format('Microsoft.ManagedIdentity/userAssignedIdentities/{0}', parameters('name'))]",
                              "name": "[coalesce(tryGet(parameters('lock'), 'name'), format('lock-{0}', parameters('name')))]",
                              "properties": {
                                "level": "[coalesce(tryGet(parameters('lock'), 'kind'), '')]",
                                "notes": "[if(equals(tryGet(parameters('lock'), 'kind'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot delete or modify the resource or child resources.')]"
                              },
                              "dependsOn": [
                                "userAssignedIdentity"
                              ]
                            },
                            "userAssignedIdentity_roleAssignments": {
                              "copy": {
                                "name": "userAssignedIdentity_roleAssignments",
                                "count": "[length(coalesce(variables('formattedRoleAssignments'), createArray()))]"
                              },
                              "type": "Microsoft.Authorization/roleAssignments",
                              "apiVersion": "2022-04-01",
                              "scope": "[format('Microsoft.ManagedIdentity/userAssignedIdentities/{0}', parameters('name'))]",
                              "name": "[coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'name'), guid(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('name')), coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId, coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId))]",
                              "properties": {
                                "roleDefinitionId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId]",
                                "principalId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId]",
                                "description": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'description')]",
                                "principalType": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'principalType')]",
                                "condition": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition')]",
                                "conditionVersion": "[if(not(empty(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                                "delegatedManagedIdentityResourceId": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
                              },
                              "dependsOn": [
                                "userAssignedIdentity"
                              ]
                            },
                            "userAssignedIdentity_federatedIdentityCredentials": {
                              "copy": {
                                "name": "userAssignedIdentity_federatedIdentityCredentials",
                                "count": "[length(coalesce(parameters('federatedIdentityCredentials'), createArray()))]",
                                "mode": "serial",
                                "batchSize": 1
                              },
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "[format('{0}-UserMSI-FederatedIdentityCredential-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "name": {
                                    "value": "[coalesce(parameters('federatedIdentityCredentials'), createArray())[copyIndex()].name]"
                                  },
                                  "userAssignedIdentityName": {
                                    "value": "[parameters('name')]"
                                  },
                                  "audiences": {
                                    "value": "[coalesce(parameters('federatedIdentityCredentials'), createArray())[copyIndex()].audiences]"
                                  },
                                  "issuer": {
                                    "value": "[coalesce(parameters('federatedIdentityCredentials'), createArray())[copyIndex()].issuer]"
                                  },
                                  "subject": {
                                    "value": "[coalesce(parameters('federatedIdentityCredentials'), createArray())[copyIndex()].subject]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.29.47.4906",
                                      "templateHash": "3716898257490923786"
                                    },
                                    "name": "User Assigned Identity Federated Identity Credential",
                                    "description": "This module deploys a User Assigned Identity Federated Identity Credential.",
                                    "owner": "Azure/module-maintainers"
                                  },
                                  "parameters": {
                                    "userAssignedIdentityName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Conditional. The name of the parent user assigned identity. Required if the template is used in a standalone deployment."
                                      }
                                    },
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The name of the secret."
                                      }
                                    },
                                    "audiences": {
                                      "type": "array",
                                      "metadata": {
                                        "description": "Required. The list of audiences that can appear in the issued token. Should be set to api://AzureADTokenExchange for Azure AD. It says what Microsoft identity platform should accept in the aud claim in the incoming token. This value represents Azure AD in your external identity provider and has no fixed value across identity providers - you might need to create a new application registration in your IdP to serve as the audience of this token."
                                      }
                                    },
                                    "issuer": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The URL of the issuer to be trusted. Must match the issuer claim of the external token being exchanged."
                                      }
                                    },
                                    "subject": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The identifier of the external software workload within the external identity provider. Like the audience value, it has no fixed format, as each IdP uses their own - sometimes a GUID, sometimes a colon delimited identifier, sometimes arbitrary strings. The value here must match the sub claim within the token presented to Azure AD."
                                      }
                                    }
                                  },
                                  "resources": [
                                    {
                                      "type": "Microsoft.ManagedIdentity/userAssignedIdentities/federatedIdentityCredentials",
                                      "apiVersion": "2023-01-31",
                                      "name": "[format('{0}/{1}', parameters('userAssignedIdentityName'), parameters('name'))]",
                                      "properties": {
                                        "audiences": "[parameters('audiences')]",
                                        "issuer": "[parameters('issuer')]",
                                        "subject": "[parameters('subject')]"
                                      }
                                    }
                                  ],
                                  "outputs": {
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the federated identity credential."
                                      },
                                      "value": "[parameters('name')]"
                                    },
                                    "resourceId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource ID of the federated identity credential."
                                      },
                                      "value": "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities/federatedIdentityCredentials', parameters('userAssignedIdentityName'), parameters('name'))]"
                                    },
                                    "resourceGroupName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the resource group the federated identity credential was created in."
                                      },
                                      "value": "[resourceGroup().name]"
                                    }
                                  }
                                }
                              },
                              "dependsOn": [
                                "userAssignedIdentity"
                              ]
                            }
                          },
                          "outputs": {
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "The name of the user assigned identity."
                              },
                              "value": "[parameters('name')]"
                            },
                            "resourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource ID of the user assigned identity."
                              },
                              "value": "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('name'))]"
                            },
                            "principalId": {
                              "type": "string",
                              "metadata": {
                                "description": "The principal ID (object ID) of the user assigned identity."
                              },
                              "value": "[reference('userAssignedIdentity').principalId]"
                            },
                            "clientId": {
                              "type": "string",
                              "metadata": {
                                "description": "The client ID (application ID) of the user assigned identity."
                              },
                              "value": "[reference('userAssignedIdentity').clientId]"
                            },
                            "resourceGroupName": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource group the user assigned identity was deployed into."
                              },
                              "value": "[resourceGroup().name]"
                            },
                            "location": {
                              "type": "string",
                              "metadata": {
                                "description": "The location the resource was deployed into."
                              },
                              "value": "[reference('userAssignedIdentity', '2023-01-31', 'full').location]"
                            }
                          }
                        }
                      },
                      "metadata": {
                        "description": "The User Assigned Managed Identity that will be given Contributor role on the Resource Group in order to auto-approve the Private Endpoint Connection of the AFD."
                      }
                    },
                    {
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "vmDeployment",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "name": {
                            "value": "[parameters('vmName')]"
                          },
                          "location": {
                            "value": "[parameters('location')]"
                          },
                          "tags": {
                            "value": "[parameters('tags')]"
                          },
                          "enableTelemetry": {
                            "value": "[parameters('enableTelemetry')]"
                          },
                          "osType": {
                            "value": "Linux"
                          },
                          "computerName": {
                            "value": "[parameters('vmName')]"
                          },
                          "adminUsername": {
                            "value": "[parameters('vmAdminUsername')]"
                          },
                          "adminPassword": "[if(equals(parameters('vmAuthenticationType'), 'password'), createObject('value', parameters('vmAdminPassword')), createObject('value', null()))]",
                          "disablePasswordAuthentication": "[if(equals(parameters('vmAuthenticationType'), 'sshPublicKey'), createObject('value', true()), createObject('value', false()))]",
                          "encryptionAtHost": {
                            "value": false
                          },
                          "enableAutomaticUpdates": {
                            "value": true
                          },
                          "patchMode": {
                            "value": "AutomaticByPlatform"
                          },
                          "bypassPlatformSafetyChecksOnUserSchedule": {
                            "value": true
                          },
                          "maintenanceConfigurationResourceId": {
                            "value": "[resourceId('Microsoft.Maintenance/maintenanceConfigurations', format('dep-mc-{0}', parameters('vmName')))]"
                          },
                          "publicKeys": "[if(equals(parameters('vmAuthenticationType'), 'sshPublicKey'), createObject('value', createArray(createObject('keyData', reference(resourceId('Microsoft.Compute/sshPublicKeys', parameters('sshKeyName')), '2022-03-01').publicKey, 'path', format('/home/{0}/.ssh/authorized_keys', parameters('vmAdminUsername'))))), createObject('value', createArray()))]",
                          "nicConfigurations": {
                            "value": [
                              {
                                "name": "[parameters('vmNetworkInterfaceName')]",
                                "enableAcceleratedNetworking": false,
                                "ipConfigurations": [
                                  {
                                    "name": "ipConfig01",
                                    "privateIPAllocationMethod": "Dynamic",
                                    "subnetResourceId": "[resourceId('Microsoft.Network/virtualNetworks/subnets', split(format('{0}/{1}', parameters('vmVnetName'), parameters('vmSubnetName')), '/')[0], split(format('{0}/{1}', parameters('vmVnetName'), parameters('vmSubnetName')), '/')[1])]"
                                  }
                                ]
                              }
                            ]
                          },
                          "osDisk": {
                            "value": {
                              "caching": "ReadWrite",
                              "createOption": "FromImage",
                              "deleteOption": "Delete",
                              "diskSizeGB": 128,
                              "managedDisk": {
                                "storageAccountType": "[parameters('storageAccountType')]"
                              }
                            }
                          },
                          "dataDisks": {
                            "value": [
                              {
                                "caching": "ReadWrite",
                                "createOption": "Empty",
                                "diskSizeGB": 128,
                                "lun": 0,
                                "managedDisk": {
                                  "storageAccountType": "[parameters('storageAccountType')]"
                                }
                              }
                            ]
                          },
                          "zone": {
                            "value": "[parameters('vmZone')]"
                          },
                          "vmSize": {
                            "value": "[parameters('vmSize')]"
                          },
                          "imageReference": {
                            "value": {
                              "publisher": "canonical",
                              "offer": "0001-com-ubuntu-server-focal",
                              "sku": "20_04-lts-gen2",
                              "version": "latest"
                            }
                          },
                          "extensionMonitoringAgentConfig": {
                            "value": {
                              "enabled": true,
                              "tags": "[parameters('tags')]",
                              "monitoringWorkspaceResourceId": "[parameters('logAnalyticsWorkspaceResourceId')]"
                            }
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "languageVersion": "2.0",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.28.1.47646",
                              "templateHash": "7195052428088092384"
                            },
                            "name": "Virtual Machines",
                            "description": "This module deploys a Virtual Machine with one or multiple NICs and optionally one or multiple public IPs.",
                            "owner": "Azure/module-maintainers"
                          },
                          "definitions": {
                            "managedIdentitiesType": {
                              "type": "object",
                              "properties": {
                                "systemAssigned": {
                                  "type": "bool",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Enables system assigned managed identity on the resource."
                                  }
                                },
                                "userAssignedResourceIds": {
                                  "type": "array",
                                  "items": {
                                    "type": "string"
                                  },
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The resource ID(s) to assign to the resource."
                                  }
                                }
                              },
                              "nullable": true
                            },
                            "lockType": {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Specify the name of lock."
                                  }
                                },
                                "kind": {
                                  "type": "string",
                                  "allowedValues": [
                                    "CanNotDelete",
                                    "None",
                                    "ReadOnly"
                                  ],
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Specify the type of lock."
                                  }
                                }
                              },
                              "nullable": true
                            },
                            "roleAssignmentType": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "roleDefinitionIdOrName": {
                                    "type": "string",
                                    "metadata": {
                                      "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                                    }
                                  },
                                  "principalId": {
                                    "type": "string",
                                    "metadata": {
                                      "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                                    }
                                  },
                                  "principalType": {
                                    "type": "string",
                                    "allowedValues": [
                                      "Device",
                                      "ForeignGroup",
                                      "Group",
                                      "ServicePrincipal",
                                      "User"
                                    ],
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The principal type of the assigned principal ID."
                                    }
                                  },
                                  "description": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The description of the role assignment."
                                    }
                                  },
                                  "condition": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                                    }
                                  },
                                  "conditionVersion": {
                                    "type": "string",
                                    "allowedValues": [
                                      "2.0"
                                    ],
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. Version of the condition."
                                    }
                                  },
                                  "delegatedManagedIdentityResourceId": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The Resource Id of the delegated managed identity resource."
                                    }
                                  }
                                }
                              },
                              "nullable": true
                            },
                            "osDiskType": {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The disk name."
                                  }
                                },
                                "diskSizeGB": {
                                  "type": "int",
                                  "metadata": {
                                    "description": "Required. Specifies the size of an empty data disk in gigabytes."
                                  }
                                },
                                "createOption": {
                                  "type": "string",
                                  "allowedValues": [
                                    "Attach",
                                    "Empty",
                                    "FromImage"
                                  ],
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Specifies how the virtual machine should be created."
                                  }
                                },
                                "deleteOption": {
                                  "type": "string",
                                  "allowedValues": [
                                    "Delete",
                                    "Detach"
                                  ],
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Specifies whether data disk should be deleted or detached upon VM deletion."
                                  }
                                },
                                "caching": {
                                  "type": "string",
                                  "allowedValues": [
                                    "None",
                                    "ReadOnly",
                                    "ReadWrite"
                                  ],
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Specifies the caching requirements."
                                  }
                                },
                                "managedDisk": {
                                  "type": "object",
                                  "properties": {
                                    "storageAccountType": {
                                      "type": "string",
                                      "allowedValues": [
                                        "PremiumV2_LRS",
                                        "Premium_LRS",
                                        "Premium_ZRS",
                                        "StandardSSD_LRS",
                                        "StandardSSD_ZRS",
                                        "Standard_LRS",
                                        "UltraSSD_LRS"
                                      ],
                                      "metadata": {
                                        "description": "Required. Specifies the storage account type for the managed disk."
                                      }
                                    },
                                    "diskEncryptionSetResourceId": {
                                      "type": "string",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. Specifies the customer managed disk encryption set resource id for the managed disk."
                                      }
                                    }
                                  },
                                  "metadata": {
                                    "description": "Required. The managed disk parameters."
                                  }
                                }
                              }
                            },
                            "dataDisksType": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "name": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The disk name."
                                    }
                                  },
                                  "lun": {
                                    "type": "int",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. Specifies the logical unit number of the data disk."
                                    }
                                  },
                                  "diskSizeGB": {
                                    "type": "int",
                                    "metadata": {
                                      "description": "Required. Specifies the size of an empty data disk in gigabytes."
                                    }
                                  },
                                  "createOption": {
                                    "type": "string",
                                    "allowedValues": [
                                      "Attach",
                                      "Empty",
                                      "FromImage"
                                    ],
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. Specifies how the virtual machine should be created."
                                    }
                                  },
                                  "deleteOption": {
                                    "type": "string",
                                    "allowedValues": [
                                      "Delete",
                                      "Detach"
                                    ],
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. Specifies whether data disk should be deleted or detached upon VM deletion."
                                    }
                                  },
                                  "caching": {
                                    "type": "string",
                                    "allowedValues": [
                                      "None",
                                      "ReadOnly",
                                      "ReadWrite"
                                    ],
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. Specifies the caching requirements."
                                    }
                                  },
                                  "managedDisk": {
                                    "type": "object",
                                    "properties": {
                                      "storageAccountType": {
                                        "type": "string",
                                        "allowedValues": [
                                          "PremiumV2_LRS",
                                          "Premium_LRS",
                                          "Premium_ZRS",
                                          "StandardSSD_LRS",
                                          "StandardSSD_ZRS",
                                          "Standard_LRS",
                                          "UltraSSD_LRS"
                                        ],
                                        "metadata": {
                                          "description": "Required. Specifies the storage account type for the managed disk."
                                        }
                                      },
                                      "diskEncryptionSetResourceId": {
                                        "type": "string",
                                        "nullable": true,
                                        "metadata": {
                                          "description": "Optional. Specifies the customer managed disk encryption set resource id for the managed disk."
                                        }
                                      }
                                    },
                                    "metadata": {
                                      "description": "Required. The managed disk parameters."
                                    }
                                  }
                                }
                              },
                              "nullable": true
                            }
                          },
                          "parameters": {
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The name of the virtual machine to be created. You should use a unique prefix to reduce name collisions in Active Directory."
                              }
                            },
                            "computerName": {
                              "type": "string",
                              "defaultValue": "[parameters('name')]",
                              "metadata": {
                                "description": "Optional. Can be used if the computer name needs to be different from the Azure VM resource name. If not used, the resource name will be used as computer name."
                              }
                            },
                            "vmSize": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. Specifies the size for the VMs."
                              }
                            },
                            "encryptionAtHost": {
                              "type": "bool",
                              "defaultValue": true,
                              "metadata": {
                                "description": "Optional. This property can be used by user in the request to enable or disable the Host Encryption for the virtual machine. This will enable the encryption for all the disks including Resource/Temp disk at host itself. For security reasons, it is recommended to set encryptionAtHost to True. Restrictions: Cannot be enabled if Azure Disk Encryption (guest-VM encryption using bitlocker/DM-Crypt) is enabled on your VMs."
                              }
                            },
                            "securityType": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. Specifies the SecurityType of the virtual machine. It is set as TrustedLaunch to enable UefiSettings."
                              }
                            },
                            "secureBootEnabled": {
                              "type": "bool",
                              "defaultValue": false,
                              "metadata": {
                                "description": "Optional. Specifies whether secure boot should be enabled on the virtual machine. This parameter is part of the UefiSettings. SecurityType should be set to TrustedLaunch to enable UefiSettings."
                              }
                            },
                            "vTpmEnabled": {
                              "type": "bool",
                              "defaultValue": false,
                              "metadata": {
                                "description": "Optional. Specifies whether vTPM should be enabled on the virtual machine. This parameter is part of the UefiSettings.  SecurityType should be set to TrustedLaunch to enable UefiSettings."
                              }
                            },
                            "imageReference": {
                              "type": "object",
                              "metadata": {
                                "description": "Required. OS image reference. In case of marketplace images, it's the combination of the publisher, offer, sku, version attributes. In case of custom images it's the resource ID of the custom image."
                              }
                            },
                            "plan": {
                              "type": "object",
                              "defaultValue": {},
                              "metadata": {
                                "description": "Optional. Specifies information about the marketplace image used to create the virtual machine. This element is only used for marketplace images. Before you can use a marketplace image from an API, you must enable the image for programmatic use."
                              }
                            },
                            "osDisk": {
                              "$ref": "#/definitions/osDiskType",
                              "metadata": {
                                "description": "Required. Specifies the OS disk. For security reasons, it is recommended to specify DiskEncryptionSet into the osDisk object.  Restrictions: DiskEncryptionSet cannot be enabled if Azure Disk Encryption (guest-VM encryption using bitlocker/DM-Crypt) is enabled on your VMs."
                              }
                            },
                            "dataDisks": {
                              "$ref": "#/definitions/dataDisksType",
                              "metadata": {
                                "description": "Optional. Specifies the data disks. For security reasons, it is recommended to specify DiskEncryptionSet into the dataDisk object. Restrictions: DiskEncryptionSet cannot be enabled if Azure Disk Encryption (guest-VM encryption using bitlocker/DM-Crypt) is enabled on your VMs."
                              }
                            },
                            "ultraSSDEnabled": {
                              "type": "bool",
                              "defaultValue": false,
                              "metadata": {
                                "description": "Optional. The flag that enables or disables a capability to have one or more managed data disks with UltraSSD_LRS storage account type on the VM or VMSS. Managed disks with storage account type UltraSSD_LRS can be added to a virtual machine or virtual machine scale set only if this property is enabled."
                              }
                            },
                            "adminUsername": {
                              "type": "securestring",
                              "metadata": {
                                "description": "Required. Administrator username."
                              }
                            },
                            "adminPassword": {
                              "type": "securestring",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. When specifying a Windows Virtual Machine, this value should be passed."
                              }
                            },
                            "customData": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. Custom data associated to the VM, this value will be automatically converted into base64 to account for the expected VM format."
                              }
                            },
                            "certificatesToBeInstalled": {
                              "type": "array",
                              "defaultValue": [],
                              "metadata": {
                                "description": "Optional. Specifies set of certificates that should be installed onto the virtual machine."
                              }
                            },
                            "priority": {
                              "type": "string",
                              "defaultValue": "Regular",
                              "allowedValues": [
                                "Regular",
                                "Low",
                                "Spot"
                              ],
                              "metadata": {
                                "description": "Optional. Specifies the priority for the virtual machine."
                              }
                            },
                            "enableEvictionPolicy": {
                              "type": "bool",
                              "defaultValue": false,
                              "metadata": {
                                "description": "Optional. Specifies the eviction policy for the low priority virtual machine. Will result in 'Deallocate' eviction policy."
                              }
                            },
                            "maxPriceForLowPriorityVm": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. Specifies the maximum price you are willing to pay for a low priority VM/VMSS. This price is in US Dollars."
                              }
                            },
                            "dedicatedHostId": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. Specifies resource ID about the dedicated host that the virtual machine resides in."
                              }
                            },
                            "licenseType": {
                              "type": "string",
                              "defaultValue": "",
                              "allowedValues": [
                                "RHEL_BYOS",
                                "SLES_BYOS",
                                "Windows_Client",
                                "Windows_Server",
                                ""
                              ],
                              "metadata": {
                                "description": "Optional. Specifies that the image or disk that is being used was licensed on-premises."
                              }
                            },
                            "publicKeys": {
                              "type": "array",
                              "defaultValue": [],
                              "metadata": {
                                "description": "Optional. The list of SSH public keys used to authenticate with linux based VMs."
                              }
                            },
                            "managedIdentities": {
                              "$ref": "#/definitions/managedIdentitiesType",
                              "metadata": {
                                "description": "Optional. The managed identity definition for this resource. The system-assigned managed identity will automatically be enabled if extensionAadJoinConfig.enabled = \"True\"."
                              }
                            },
                            "bootDiagnostics": {
                              "type": "bool",
                              "defaultValue": false,
                              "metadata": {
                                "description": "Optional. Whether boot diagnostics should be enabled on the Virtual Machine. Boot diagnostics will be enabled with a managed storage account if no bootDiagnosticsStorageAccountName value is provided. If bootDiagnostics and bootDiagnosticsStorageAccountName values are not provided, boot diagnostics will be disabled."
                              }
                            },
                            "bootDiagnosticStorageAccountName": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. Custom storage account used to store boot diagnostic information. Boot diagnostics will be enabled with a custom storage account if a value is provided."
                              }
                            },
                            "bootDiagnosticStorageAccountUri": {
                              "type": "string",
                              "defaultValue": "[format('.blob.{0}/', environment().suffixes.storage)]",
                              "metadata": {
                                "description": "Optional. Storage account boot diagnostic base URI."
                              }
                            },
                            "proximityPlacementGroupResourceId": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. Resource ID of a proximity placement group."
                              }
                            },
                            "virtualMachineScaleSetResourceId": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. Resource ID of a virtual machine scale set, where the VM should be added."
                              }
                            },
                            "availabilitySetResourceId": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. Resource ID of an availability set. Cannot be used in combination with availability zone nor scale set."
                              }
                            },
                            "galleryApplications": {
                              "type": "array",
                              "defaultValue": [],
                              "metadata": {
                                "description": "Optional. Specifies the gallery applications that should be made available to the VM/VMSS."
                              }
                            },
                            "zone": {
                              "type": "int",
                              "allowedValues": [
                                0,
                                1,
                                2,
                                3
                              ],
                              "metadata": {
                                "description": "Required. If set to 1, 2 or 3, the availability zone for all VMs is hardcoded to that value. If zero, then availability zones is not used. Cannot be used in combination with availability set nor scale set."
                              }
                            },
                            "nicConfigurations": {
                              "type": "array",
                              "metadata": {
                                "description": "Required. Configures NICs and PIPs."
                              }
                            },
                            "backupVaultName": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. Recovery service vault name to add VMs to backup."
                              }
                            },
                            "backupVaultResourceGroup": {
                              "type": "string",
                              "defaultValue": "[resourceGroup().name]",
                              "metadata": {
                                "description": "Optional. Resource group of the backup recovery service vault. If not provided the current resource group name is considered by default."
                              }
                            },
                            "backupPolicyName": {
                              "type": "string",
                              "defaultValue": "DefaultPolicy",
                              "metadata": {
                                "description": "Optional. Backup policy the VMs should be using for backup. If not provided, it will use the DefaultPolicy from the backup recovery service vault."
                              }
                            },
                            "autoShutdownConfig": {
                              "type": "object",
                              "defaultValue": {},
                              "metadata": {
                                "description": "Optional. The configuration for auto-shutdown."
                              }
                            },
                            "maintenanceConfigurationResourceId": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. The resource Id of a maintenance configuration for this VM."
                              }
                            },
                            "allowExtensionOperations": {
                              "type": "bool",
                              "defaultValue": true,
                              "metadata": {
                                "description": "Optional. Specifies whether extension operations should be allowed on the virtual machine. This may only be set to False when no extensions are present on the virtual machine."
                              }
                            },
                            "extensionDomainJoinPassword": {
                              "type": "securestring",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. Required if name is specified. Password of the user specified in user parameter."
                              }
                            },
                            "extensionDomainJoinConfig": {
                              "type": "secureObject",
                              "defaultValue": {},
                              "metadata": {
                                "description": "Optional. The configuration for the [Domain Join] extension. Must at least contain the [\"enabled\": true] property to be executed."
                              }
                            },
                            "extensionAadJoinConfig": {
                              "type": "object",
                              "defaultValue": {
                                "enabled": false
                              },
                              "metadata": {
                                "description": "Optional. The configuration for the [AAD Join] extension. Must at least contain the [\"enabled\": true] property to be executed. To enroll in Intune, add the setting mdmId: \"0000000a-0000-0000-c000-000000000000\"."
                              }
                            },
                            "extensionAntiMalwareConfig": {
                              "type": "object",
                              "defaultValue": {
                                "enabled": false
                              },
                              "metadata": {
                                "description": "Optional. The configuration for the [Anti Malware] extension. Must at least contain the [\"enabled\": true] property to be executed."
                              }
                            },
                            "extensionMonitoringAgentConfig": {
                              "type": "object",
                              "defaultValue": {
                                "enabled": false
                              },
                              "metadata": {
                                "description": "Optional. The configuration for the [Monitoring Agent] extension. Must at least contain the [\"enabled\": true] property to be executed."
                              }
                            },
                            "extensionDependencyAgentConfig": {
                              "type": "object",
                              "defaultValue": {
                                "enabled": false
                              },
                              "metadata": {
                                "description": "Optional. The configuration for the [Dependency Agent] extension. Must at least contain the [\"enabled\": true] property to be executed."
                              }
                            },
                            "extensionNetworkWatcherAgentConfig": {
                              "type": "object",
                              "defaultValue": {
                                "enabled": false
                              },
                              "metadata": {
                                "description": "Optional. The configuration for the [Network Watcher Agent] extension. Must at least contain the [\"enabled\": true] property to be executed."
                              }
                            },
                            "extensionAzureDiskEncryptionConfig": {
                              "type": "object",
                              "defaultValue": {
                                "enabled": false
                              },
                              "metadata": {
                                "description": "Optional. The configuration for the [Azure Disk Encryption] extension. Must at least contain the [\"enabled\": true] property to be executed. Restrictions: Cannot be enabled on disks that have encryption at host enabled. Managed disks encrypted using Azure Disk Encryption cannot be encrypted using customer-managed keys."
                              }
                            },
                            "extensionDSCConfig": {
                              "type": "object",
                              "defaultValue": {
                                "enabled": false
                              },
                              "metadata": {
                                "description": "Optional. The configuration for the [Desired State Configuration] extension. Must at least contain the [\"enabled\": true] property to be executed."
                              }
                            },
                            "extensionCustomScriptConfig": {
                              "type": "object",
                              "defaultValue": {
                                "enabled": false,
                                "fileData": []
                              },
                              "metadata": {
                                "description": "Optional. The configuration for the [Custom Script] extension. Must at least contain the [\"enabled\": true] property to be executed."
                              }
                            },
                            "extensionNvidiaGpuDriverWindows": {
                              "type": "object",
                              "defaultValue": {
                                "enabled": false
                              },
                              "metadata": {
                                "description": "Optional. The configuration for the [Nvidia Gpu Driver Windows] extension. Must at least contain the [\"enabled\": true] property to be executed."
                              }
                            },
                            "extensionHostPoolRegistration": {
                              "type": "object",
                              "defaultValue": {
                                "enabled": false
                              },
                              "metadata": {
                                "description": "Optional. The configuration for the [Host Pool Registration] extension. Must at least contain the [\"enabled\": true] property to be executed. Needs a managed identy."
                              }
                            },
                            "extensionGuestConfigurationExtension": {
                              "type": "object",
                              "defaultValue": {
                                "enabled": false
                              },
                              "metadata": {
                                "description": "Optional. The configuration for the [Guest Configuration] extension. Must at least contain the [\"enabled\": true] property to be executed. Needs a managed identy."
                              }
                            },
                            "guestConfiguration": {
                              "type": "object",
                              "defaultValue": {},
                              "metadata": {
                                "description": "Optional. The guest configuration for the virtual machine. Needs the Guest Configuration extension to be enabled."
                              }
                            },
                            "extensionCustomScriptProtectedSetting": {
                              "type": "secureObject",
                              "defaultValue": {},
                              "metadata": {
                                "description": "Optional. An object that contains the extension specific protected settings."
                              }
                            },
                            "extensionGuestConfigurationExtensionProtectedSettings": {
                              "type": "secureObject",
                              "defaultValue": {},
                              "metadata": {
                                "description": "Optional. An object that contains the extension specific protected settings."
                              }
                            },
                            "location": {
                              "type": "string",
                              "defaultValue": "[resourceGroup().location]",
                              "metadata": {
                                "description": "Optional. Location for all resources."
                              }
                            },
                            "lock": {
                              "$ref": "#/definitions/lockType",
                              "metadata": {
                                "description": "Optional. The lock settings of the service."
                              }
                            },
                            "roleAssignments": {
                              "$ref": "#/definitions/roleAssignmentType",
                              "metadata": {
                                "description": "Optional. Array of role assignments to create."
                              }
                            },
                            "tags": {
                              "type": "object",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Tags of the resource."
                              }
                            },
                            "enableTelemetry": {
                              "type": "bool",
                              "defaultValue": true,
                              "metadata": {
                                "description": "Optional. Enable/Disable usage telemetry for module."
                              }
                            },
                            "baseTime": {
                              "type": "string",
                              "defaultValue": "[utcNow('u')]",
                              "metadata": {
                                "description": "Generated. Do not provide a value! This date value is used to generate a registration token."
                              }
                            },
                            "sasTokenValidityLength": {
                              "type": "string",
                              "defaultValue": "PT8H",
                              "metadata": {
                                "description": "Optional. SAS token validity length to use to download files from storage accounts. Usage: 'PT8H' - valid for 8 hours; 'P5D' - valid for 5 days; 'P1Y' - valid for 1 year. When not provided, the SAS token will be valid for 8 hours."
                              }
                            },
                            "osType": {
                              "type": "string",
                              "allowedValues": [
                                "Windows",
                                "Linux"
                              ],
                              "metadata": {
                                "description": "Required. The chosen OS type."
                              }
                            },
                            "disablePasswordAuthentication": {
                              "type": "bool",
                              "defaultValue": false,
                              "metadata": {
                                "description": "Optional. Specifies whether password authentication should be disabled."
                              }
                            },
                            "provisionVMAgent": {
                              "type": "bool",
                              "defaultValue": true,
                              "metadata": {
                                "description": "Optional. Indicates whether virtual machine agent should be provisioned on the virtual machine. When this property is not specified in the request body, default behavior is to set it to true. This will ensure that VM Agent is installed on the VM so that extensions can be added to the VM later."
                              }
                            },
                            "enableAutomaticUpdates": {
                              "type": "bool",
                              "defaultValue": true,
                              "metadata": {
                                "description": "Optional. Indicates whether Automatic Updates is enabled for the Windows virtual machine. Default value is true. When patchMode is set to Manual, this parameter must be set to false. For virtual machine scale sets, this property can be updated and updates will take effect on OS reprovisioning."
                              }
                            },
                            "patchMode": {
                              "type": "string",
                              "defaultValue": "",
                              "allowedValues": [
                                "AutomaticByPlatform",
                                "AutomaticByOS",
                                "Manual",
                                "ImageDefault",
                                ""
                              ],
                              "metadata": {
                                "description": "Optional. VM guest patching orchestration mode. 'AutomaticByOS' & 'Manual' are for Windows only, 'ImageDefault' for Linux only. Refer to 'https://learn.microsoft.com/en-us/azure/virtual-machines/automatic-vm-guest-patching'."
                              }
                            },
                            "bypassPlatformSafetyChecksOnUserSchedule": {
                              "type": "bool",
                              "defaultValue": true,
                              "metadata": {
                                "description": "Optional. Enables customer to schedule patching without accidental upgrades."
                              }
                            },
                            "rebootSetting": {
                              "type": "string",
                              "defaultValue": "IfRequired",
                              "allowedValues": [
                                "Always",
                                "IfRequired",
                                "Never",
                                "Unknown"
                              ],
                              "metadata": {
                                "description": "Optional. Specifies the reboot setting for all AutomaticByPlatform patch installation operations."
                              }
                            },
                            "patchAssessmentMode": {
                              "type": "string",
                              "defaultValue": "ImageDefault",
                              "allowedValues": [
                                "AutomaticByPlatform",
                                "ImageDefault"
                              ],
                              "metadata": {
                                "description": "Optional. VM guest patching assessment mode. Set it to 'AutomaticByPlatform' to enable automatically check for updates every 24 hours."
                              }
                            },
                            "timeZone": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. Specifies the time zone of the virtual machine. e.g. 'Pacific Standard Time'. Possible values can be `TimeZoneInfo.id` value from time zones returned by `TimeZoneInfo.GetSystemTimeZones`."
                              }
                            },
                            "additionalUnattendContent": {
                              "type": "array",
                              "defaultValue": [],
                              "metadata": {
                                "description": "Optional. Specifies additional XML formatted information that can be included in the Unattend.xml file, which is used by Windows Setup. Contents are defined by setting name, component name, and the pass in which the content is applied."
                              }
                            },
                            "winRM": {
                              "type": "array",
                              "defaultValue": [],
                              "metadata": {
                                "description": "Optional. Specifies the Windows Remote Management listeners. This enables remote Windows PowerShell. - WinRMConfiguration object."
                              }
                            },
                            "configurationProfile": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. The configuration profile of automanage. Either '/providers/Microsoft.Automanage/bestPractices/AzureBestPracticesProduction', 'providers/Microsoft.Automanage/bestPractices/AzureBestPracticesDevTest' or the resource Id of custom profile."
                              }
                            }
                          },
                          "variables": {
                            "copy": [
                              {
                                "name": "publicKeysFormatted",
                                "count": "[length(parameters('publicKeys'))]",
                                "input": {
                                  "path": "[parameters('publicKeys')[copyIndex('publicKeysFormatted')].path]",
                                  "keyData": "[parameters('publicKeys')[copyIndex('publicKeysFormatted')].keyData]"
                                }
                              }
                            ],
                            "linuxConfiguration": {
                              "disablePasswordAuthentication": "[parameters('disablePasswordAuthentication')]",
                              "ssh": {
                                "publicKeys": "[variables('publicKeysFormatted')]"
                              },
                              "provisionVMAgent": "[parameters('provisionVMAgent')]",
                              "patchSettings": "[if(and(parameters('provisionVMAgent'), or(equals(toLower(parameters('patchMode')), toLower('AutomaticByPlatform')), equals(toLower(parameters('patchMode')), toLower('ImageDefault')))), createObject('patchMode', parameters('patchMode'), 'assessmentMode', parameters('patchAssessmentMode'), 'automaticByPlatformSettings', if(equals(toLower(parameters('patchMode')), toLower('AutomaticByPlatform')), createObject('bypassPlatformSafetyChecksOnUserSchedule', parameters('bypassPlatformSafetyChecksOnUserSchedule'), 'rebootSetting', parameters('rebootSetting')), null())), null())]"
                            },
                            "windowsConfiguration": {
                              "provisionVMAgent": "[parameters('provisionVMAgent')]",
                              "enableAutomaticUpdates": "[parameters('enableAutomaticUpdates')]",
                              "patchSettings": "[if(and(parameters('provisionVMAgent'), or(or(equals(toLower(parameters('patchMode')), toLower('AutomaticByPlatform')), equals(toLower(parameters('patchMode')), toLower('AutomaticByOS'))), equals(toLower(parameters('patchMode')), toLower('Manual')))), createObject('patchMode', parameters('patchMode'), 'assessmentMode', parameters('patchAssessmentMode'), 'automaticByPlatformSettings', if(equals(toLower(parameters('patchMode')), toLower('AutomaticByPlatform')), createObject('bypassPlatformSafetyChecksOnUserSchedule', parameters('bypassPlatformSafetyChecksOnUserSchedule'), 'rebootSetting', parameters('rebootSetting')), null())), null())]",
                              "timeZone": "[if(empty(parameters('timeZone')), null(), parameters('timeZone'))]",
                              "additionalUnattendContent": "[if(empty(parameters('additionalUnattendContent')), null(), parameters('additionalUnattendContent'))]",
                              "winRM": "[if(not(empty(parameters('winRM'))), createObject('listeners', parameters('winRM')), null())]"
                            },
                            "accountSasProperties": {
                              "signedServices": "b",
                              "signedPermission": "r",
                              "signedExpiry": "[dateTimeAdd(parameters('baseTime'), parameters('sasTokenValidityLength'))]",
                              "signedResourceTypes": "o",
                              "signedProtocol": "https"
                            },
                            "formattedUserAssignedIdentities": "[reduce(map(coalesce(tryGet(parameters('managedIdentities'), 'userAssignedResourceIds'), createArray()), lambda('id', createObject(format('{0}', lambdaVariables('id')), createObject()))), createObject(), lambda('cur', 'next', union(lambdaVariables('cur'), lambdaVariables('next'))))]",
                            "identity": "[if(not(empty(parameters('managedIdentities'))), createObject('type', if(if(parameters('extensionAadJoinConfig').enabled, true(), coalesce(tryGet(parameters('managedIdentities'), 'systemAssigned'), false())), if(not(empty(coalesce(tryGet(parameters('managedIdentities'), 'userAssignedResourceIds'), createObject()))), 'SystemAssigned, UserAssigned', 'SystemAssigned'), if(not(empty(coalesce(tryGet(parameters('managedIdentities'), 'userAssignedResourceIds'), createObject()))), 'UserAssigned', null())), 'userAssignedIdentities', if(not(empty(variables('formattedUserAssignedIdentities'))), variables('formattedUserAssignedIdentities'), null())), null())]",
                            "builtInRoleNames": {
                              "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                              "Data Operator for Managed Disks": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '959f8984-c045-4866-89c7-12bf9737be2e')]",
                              "Desktop Virtualization Power On Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '489581de-a3bd-480d-9518-53dea7416b33')]",
                              "Desktop Virtualization Power On Off Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '40c5ff49-9181-41f8-ae61-143b0e78555e')]",
                              "Desktop Virtualization Virtual Machine Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'a959dbd1-f747-45e3-8ba6-dd80f235f97c')]",
                              "DevTest Labs User": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '76283e04-6283-4c54-8f91-bcf1374a3c64')]",
                              "Disk Backup Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '3e5e47e6-65f7-47ef-90b5-e5dd4d455f24')]",
                              "Disk Pool Operator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '60fc6e62-5479-42d4-8bf4-67625fcc2840')]",
                              "Disk Restore Operator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b50d9833-a0cb-478e-945f-707fcc997c13')]",
                              "Disk Snapshot Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '7efff54f-a5b4-42b5-a1c5-5411624893ce')]",
                              "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                              "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                              "Role Based Access Control Administrator (Preview)": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]",
                              "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]",
                              "Virtual Machine Administrator Login": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '1c0163c0-47e6-4577-8991-ea5c82e286e4')]",
                              "Virtual Machine Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '9980e02c-c2be-4d73-94e8-173b1dc7cf3c')]",
                              "Virtual Machine User Login": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'fb879df8-f326-4884-b1cf-06f3ad86be52')]",
                              "VM Scanner Operator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'd24ecba3-c1f4-40fa-a7bb-4588a071e8fd')]"
                            }
                          },
                          "resources": {
                            "avmTelemetry": {
                              "condition": "[parameters('enableTelemetry')]",
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2023-07-01",
                              "name": "[format('46d3xbcp.res.compute-virtualmachine.{0}.{1}', replace('0.5.1', '.', '-'), substring(uniqueString(deployment().name, parameters('location')), 0, 4))]",
                              "properties": {
                                "mode": "Incremental",
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "resources": [],
                                  "outputs": {
                                    "telemetry": {
                                      "type": "String",
                                      "value": "For more information, see https://aka.ms/avm/TelemetryInfo"
                                    }
                                  }
                                }
                              }
                            },
                            "vm": {
                              "type": "Microsoft.Compute/virtualMachines",
                              "apiVersion": "2023-09-01",
                              "name": "[parameters('name')]",
                              "location": "[parameters('location')]",
                              "identity": "[variables('identity')]",
                              "tags": "[parameters('tags')]",
                              "zones": "[if(not(equals(parameters('zone'), 0)), array(string(parameters('zone'))), null())]",
                              "plan": "[if(not(empty(parameters('plan'))), parameters('plan'), null())]",
                              "properties": {
                                "hardwareProfile": {
                                  "vmSize": "[parameters('vmSize')]"
                                },
                                "securityProfile": {
                                  "encryptionAtHost": "[if(parameters('encryptionAtHost'), parameters('encryptionAtHost'), null())]",
                                  "securityType": "[parameters('securityType')]",
                                  "uefiSettings": "[if(equals(parameters('securityType'), 'TrustedLaunch'), createObject('secureBootEnabled', parameters('secureBootEnabled'), 'vTpmEnabled', parameters('vTpmEnabled')), null())]"
                                },
                                "storageProfile": {
                                  "copy": [
                                    {
                                      "name": "dataDisks",
                                      "count": "[length(coalesce(parameters('dataDisks'), createArray()))]",
                                      "input": {
                                        "lun": "[coalesce(tryGet(coalesce(parameters('dataDisks'), createArray())[copyIndex('dataDisks')], 'lun'), copyIndex('dataDisks'))]",
                                        "name": "[coalesce(tryGet(coalesce(parameters('dataDisks'), createArray())[copyIndex('dataDisks')], 'name'), format('{0}-disk-data-{1}', parameters('name'), padLeft(add(copyIndex('dataDisks'), 1), 2, '0')))]",
                                        "diskSizeGB": "[coalesce(parameters('dataDisks'), createArray())[copyIndex('dataDisks')].diskSizeGB]",
                                        "createOption": "[coalesce(tryGet(coalesce(parameters('dataDisks'), createArray())[copyIndex('dataDisks')], 'createoption'), 'Empty')]",
                                        "deleteOption": "[coalesce(tryGet(coalesce(parameters('dataDisks'), createArray())[copyIndex('dataDisks')], 'deleteOption'), 'Delete')]",
                                        "caching": "[coalesce(tryGet(coalesce(parameters('dataDisks'), createArray())[copyIndex('dataDisks')], 'caching'), 'ReadOnly')]",
                                        "managedDisk": {
                                          "storageAccountType": "[coalesce(parameters('dataDisks'), createArray())[copyIndex('dataDisks')].managedDisk.storageAccountType]",
                                          "diskEncryptionSet": {
                                            "id": "[tryGet(coalesce(parameters('dataDisks'), createArray())[copyIndex('dataDisks')].managedDisk, 'diskEncryptionSetResourceId')]"
                                          }
                                        }
                                      }
                                    }
                                  ],
                                  "imageReference": "[parameters('imageReference')]",
                                  "osDisk": {
                                    "name": "[coalesce(tryGet(parameters('osDisk'), 'name'), format('{0}-disk-os-01', parameters('name')))]",
                                    "createOption": "[coalesce(tryGet(parameters('osDisk'), 'createOption'), 'FromImage')]",
                                    "deleteOption": "[coalesce(tryGet(parameters('osDisk'), 'deleteOption'), 'Delete')]",
                                    "diskSizeGB": "[parameters('osDisk').diskSizeGB]",
                                    "caching": "[coalesce(tryGet(parameters('osDisk'), 'caching'), 'ReadOnly')]",
                                    "managedDisk": {
                                      "storageAccountType": "[parameters('osDisk').managedDisk.storageAccountType]",
                                      "diskEncryptionSet": {
                                        "id": "[tryGet(parameters('osDisk').managedDisk, 'diskEncryptionSetResourceId')]"
                                      }
                                    }
                                  }
                                },
                                "additionalCapabilities": {
                                  "ultraSSDEnabled": "[parameters('ultraSSDEnabled')]"
                                },
                                "osProfile": {
                                  "computerName": "[parameters('computerName')]",
                                  "adminUsername": "[parameters('adminUsername')]",
                                  "adminPassword": "[parameters('adminPassword')]",
                                  "customData": "[if(not(empty(parameters('customData'))), base64(parameters('customData')), null())]",
                                  "windowsConfiguration": "[if(equals(parameters('osType'), 'Windows'), variables('windowsConfiguration'), null())]",
                                  "linuxConfiguration": "[if(equals(parameters('osType'), 'Linux'), variables('linuxConfiguration'), null())]",
                                  "secrets": "[parameters('certificatesToBeInstalled')]",
                                  "allowExtensionOperations": "[parameters('allowExtensionOperations')]"
                                },
                                "networkProfile": {
                                  "copy": [
                                    {
                                      "name": "networkInterfaces",
                                      "count": "[length(parameters('nicConfigurations'))]",
                                      "input": {
                                        "properties": {
                                          "deleteOption": "[if(contains(parameters('nicConfigurations')[copyIndex('networkInterfaces')], 'deleteOption'), parameters('nicConfigurations')[copyIndex('networkInterfaces')].deleteOption, 'Delete')]",
                                          "primary": "[if(equals(copyIndex('networkInterfaces'), 0), true(), false())]"
                                        },
                                        "id": "[resourceId('Microsoft.Network/networkInterfaces', if(contains(parameters('nicConfigurations')[copyIndex('networkInterfaces')], 'name'), parameters('nicConfigurations')[copyIndex('networkInterfaces')].name, format('{0}{1}', parameters('name'), parameters('nicConfigurations')[copyIndex('networkInterfaces')].nicSuffix)))]"
                                      }
                                    }
                                  ]
                                },
                                "diagnosticsProfile": {
                                  "bootDiagnostics": {
                                    "enabled": "[if(not(empty(parameters('bootDiagnosticStorageAccountName'))), true(), parameters('bootDiagnostics'))]",
                                    "storageUri": "[if(not(empty(parameters('bootDiagnosticStorageAccountName'))), format('https://{0}{1}', parameters('bootDiagnosticStorageAccountName'), parameters('bootDiagnosticStorageAccountUri')), null())]"
                                  }
                                },
                                "applicationProfile": "[if(not(empty(parameters('galleryApplications'))), createObject('galleryApplications', parameters('galleryApplications')), null())]",
                                "availabilitySet": "[if(not(empty(parameters('availabilitySetResourceId'))), createObject('id', parameters('availabilitySetResourceId')), null())]",
                                "proximityPlacementGroup": "[if(not(empty(parameters('proximityPlacementGroupResourceId'))), createObject('id', parameters('proximityPlacementGroupResourceId')), null())]",
                                "virtualMachineScaleSet": "[if(not(empty(parameters('virtualMachineScaleSetResourceId'))), createObject('id', parameters('virtualMachineScaleSetResourceId')), null())]",
                                "priority": "[parameters('priority')]",
                                "evictionPolicy": "[if(parameters('enableEvictionPolicy'), 'Deallocate', null())]",
                                "billingProfile": "[if(and(not(empty(parameters('priority'))), not(empty(parameters('maxPriceForLowPriorityVm')))), createObject('maxPrice', json(parameters('maxPriceForLowPriorityVm'))), null())]",
                                "host": "[if(not(empty(parameters('dedicatedHostId'))), createObject('id', parameters('dedicatedHostId')), null())]",
                                "licenseType": "[if(not(empty(parameters('licenseType'))), parameters('licenseType'), null())]"
                              },
                              "dependsOn": [
                                "vm_nic"
                              ]
                            },
                            "vm_configurationAssignment": {
                              "condition": "[not(empty(parameters('maintenanceConfigurationResourceId')))]",
                              "type": "Microsoft.Maintenance/configurationAssignments",
                              "apiVersion": "2023-04-01",
                              "scope": "[format('Microsoft.Compute/virtualMachines/{0}', parameters('name'))]",
                              "name": "[format('{0}assignment', parameters('name'))]",
                              "location": "[parameters('location')]",
                              "properties": {
                                "maintenanceConfigurationId": "[parameters('maintenanceConfigurationResourceId')]",
                                "resourceId": "[resourceId('Microsoft.Compute/virtualMachines', parameters('name'))]"
                              },
                              "dependsOn": [
                                "vm"
                              ]
                            },
                            "vm_configurationProfileAssignment": {
                              "condition": "[not(empty(parameters('configurationProfile')))]",
                              "type": "Microsoft.Automanage/configurationProfileAssignments",
                              "apiVersion": "2022-05-04",
                              "scope": "[format('Microsoft.Compute/virtualMachines/{0}', parameters('name'))]",
                              "name": "default",
                              "properties": {
                                "configurationProfile": "[parameters('configurationProfile')]"
                              },
                              "dependsOn": [
                                "vm"
                              ]
                            },
                            "vm_autoShutdownConfiguration": {
                              "condition": "[not(empty(parameters('autoShutdownConfig')))]",
                              "type": "Microsoft.DevTestLab/schedules",
                              "apiVersion": "2018-09-15",
                              "name": "[format('shutdown-computevm-{0}', parameters('name'))]",
                              "location": "[parameters('location')]",
                              "properties": {
                                "status": "[if(contains(parameters('autoShutdownConfig'), 'status'), parameters('autoShutdownConfig').status, 'Disabled')]",
                                "targetResourceId": "[resourceId('Microsoft.Compute/virtualMachines', parameters('name'))]",
                                "taskType": "ComputeVmShutdownTask",
                                "dailyRecurrence": {
                                  "time": "[if(contains(parameters('autoShutdownConfig'), 'dailyRecurrenceTime'), parameters('autoShutdownConfig').dailyRecurrenceTime, '19:00')]"
                                },
                                "timeZoneId": "[if(contains(parameters('autoShutdownConfig'), 'timeZone'), parameters('autoShutdownConfig').timeZone, 'UTC')]",
                                "notificationSettings": "[if(contains(parameters('autoShutdownConfig'), 'notificationStatus'), createObject('status', if(contains(parameters('autoShutdownConfig'), 'notificationStatus'), parameters('autoShutdownConfig').notificationStatus, 'Disabled'), 'emailRecipient', if(contains(parameters('autoShutdownConfig'), 'notificationEmail'), parameters('autoShutdownConfig').notificationEmail, ''), 'notificationLocale', if(contains(parameters('autoShutdownConfig'), 'notificationLocale'), parameters('autoShutdownConfig').notificationLocale, 'en'), 'webhookUrl', if(contains(parameters('autoShutdownConfig'), 'notificationWebhookUrl'), parameters('autoShutdownConfig').notificationWebhookUrl, ''), 'timeInMinutes', if(contains(parameters('autoShutdownConfig'), 'notificationTimeInMinutes'), parameters('autoShutdownConfig').notificationTimeInMinutes, 30)), null())]"
                              },
                              "dependsOn": [
                                "vm"
                              ]
                            },
                            "vm_logAnalyticsWorkspace": {
                              "condition": "[not(empty(tryGet(parameters('extensionMonitoringAgentConfig'), 'monitoringWorkspaceId')))]",
                              "existing": true,
                              "type": "Microsoft.OperationalInsights/workspaces",
                              "apiVersion": "2021-06-01",
                              "subscriptionId": "[split(if(not(empty(coalesce(tryGet(parameters('extensionMonitoringAgentConfig'), 'monitoringWorkspaceId'), ''))), parameters('extensionMonitoringAgentConfig').monitoringWorkspaceId, '//'), '/')[2]]",
                              "resourceGroup": "[split(if(not(empty(coalesce(tryGet(parameters('extensionMonitoringAgentConfig'), 'monitoringWorkspaceId'), ''))), parameters('extensionMonitoringAgentConfig').monitoringWorkspaceId, '////'), '/')[4]]",
                              "name": "[last(split(if(not(empty(coalesce(tryGet(parameters('extensionMonitoringAgentConfig'), 'monitoringWorkspaceId'), ''))), parameters('extensionMonitoringAgentConfig').monitoringWorkspaceId, 'law'), '/'))]"
                            },
                            "AzureWindowsBaseline": {
                              "condition": "[not(empty(parameters('guestConfiguration')))]",
                              "type": "Microsoft.GuestConfiguration/guestConfigurationAssignments",
                              "apiVersion": "2020-06-25",
                              "scope": "[format('Microsoft.Compute/virtualMachines/{0}', parameters('name'))]",
                              "name": "AzureWindowsBaseline",
                              "location": "[parameters('location')]",
                              "properties": {
                                "guestConfiguration": "[parameters('guestConfiguration')]"
                              },
                              "dependsOn": [
                                "vm",
                                "vm_azureGuestConfigurationExtension"
                              ]
                            },
                            "vm_lock": {
                              "condition": "[and(not(empty(coalesce(parameters('lock'), createObject()))), not(equals(tryGet(parameters('lock'), 'kind'), 'None')))]",
                              "type": "Microsoft.Authorization/locks",
                              "apiVersion": "2020-05-01",
                              "scope": "[format('Microsoft.Compute/virtualMachines/{0}', parameters('name'))]",
                              "name": "[coalesce(tryGet(parameters('lock'), 'name'), format('lock-{0}', parameters('name')))]",
                              "properties": {
                                "level": "[coalesce(tryGet(parameters('lock'), 'kind'), '')]",
                                "notes": "[if(equals(tryGet(parameters('lock'), 'kind'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot delete or modify the resource or child resources.')]"
                              },
                              "dependsOn": [
                                "vm"
                              ]
                            },
                            "vm_roleAssignments": {
                              "copy": {
                                "name": "vm_roleAssignments",
                                "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]"
                              },
                              "type": "Microsoft.Authorization/roleAssignments",
                              "apiVersion": "2022-04-01",
                              "scope": "[format('Microsoft.Compute/virtualMachines/{0}', parameters('name'))]",
                              "name": "[guid(resourceId('Microsoft.Compute/virtualMachines', parameters('name')), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].principalId, coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName)]",
                              "properties": {
                                "roleDefinitionId": "[if(contains(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName), variables('builtInRoleNames')[coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName], if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName)))]",
                                "principalId": "[coalesce(parameters('roleAssignments'), createArray())[copyIndex()].principalId]",
                                "description": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'description')]",
                                "principalType": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'principalType')]",
                                "condition": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'condition')]",
                                "conditionVersion": "[if(not(empty(tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                                "delegatedManagedIdentityResourceId": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
                              },
                              "dependsOn": [
                                "vm"
                              ]
                            },
                            "vm_nic": {
                              "copy": {
                                "name": "vm_nic",
                                "count": "[length(parameters('nicConfigurations'))]"
                              },
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "[format('{0}-VM-Nic-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "networkInterfaceName": "[if(contains(parameters('nicConfigurations')[copyIndex()], 'name'), createObject('value', parameters('nicConfigurations')[copyIndex()].name), createObject('value', format('{0}{1}', parameters('name'), parameters('nicConfigurations')[copyIndex()].nicSuffix)))]",
                                  "virtualMachineName": {
                                    "value": "[parameters('name')]"
                                  },
                                  "location": {
                                    "value": "[parameters('location')]"
                                  },
                                  "enableIPForwarding": "[if(contains(parameters('nicConfigurations')[copyIndex()], 'enableIPForwarding'), createObject('value', parameters('nicConfigurations')[copyIndex()].enableIPForwarding), createObject('value', false()))]",
                                  "enableAcceleratedNetworking": "[if(contains(parameters('nicConfigurations')[copyIndex()], 'enableAcceleratedNetworking'), createObject('value', parameters('nicConfigurations')[copyIndex()].enableAcceleratedNetworking), createObject('value', true()))]",
                                  "dnsServers": "[if(contains(parameters('nicConfigurations')[copyIndex()], 'dnsServers'), if(not(empty(parameters('nicConfigurations')[copyIndex()].dnsServers)), createObject('value', parameters('nicConfigurations')[copyIndex()].dnsServers), createObject('value', createArray())), createObject('value', createArray()))]",
                                  "networkSecurityGroupResourceId": "[if(contains(parameters('nicConfigurations')[copyIndex()], 'networkSecurityGroupResourceId'), createObject('value', parameters('nicConfigurations')[copyIndex()].networkSecurityGroupResourceId), createObject('value', ''))]",
                                  "ipConfigurations": {
                                    "value": "[parameters('nicConfigurations')[copyIndex()].ipConfigurations]"
                                  },
                                  "lock": {
                                    "value": "[coalesce(tryGet(parameters('nicConfigurations')[copyIndex()], 'lock'), parameters('lock'))]"
                                  },
                                  "tags": {
                                    "value": "[coalesce(tryGet(parameters('nicConfigurations')[copyIndex()], 'tags'), parameters('tags'))]"
                                  },
                                  "diagnosticSettings": {
                                    "value": "[tryGet(parameters('nicConfigurations')[copyIndex()], 'diagnosticSettings')]"
                                  },
                                  "roleAssignments": {
                                    "value": "[tryGet(parameters('nicConfigurations')[copyIndex()], 'roleAssignments')]"
                                  },
                                  "enableTelemetry": {
                                    "value": "[coalesce(tryGet(parameters('nicConfigurations')[copyIndex()], 'enableTelemetry'), parameters('enableTelemetry'))]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "languageVersion": "2.0",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.28.1.47646",
                                      "templateHash": "6185170122493883924"
                                    }
                                  },
                                  "definitions": {
                                    "lockType": {
                                      "type": "object",
                                      "properties": {
                                        "name": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. Specify the name of lock."
                                          }
                                        },
                                        "kind": {
                                          "type": "string",
                                          "allowedValues": [
                                            "CanNotDelete",
                                            "None",
                                            "ReadOnly"
                                          ],
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. Specify the type of lock."
                                          }
                                        }
                                      },
                                      "nullable": true
                                    },
                                    "diagnosticSettingType": {
                                      "type": "array",
                                      "items": {
                                        "type": "object",
                                        "properties": {
                                          "name": {
                                            "type": "string",
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. The name of diagnostic setting."
                                            }
                                          },
                                          "logCategoriesAndGroups": {
                                            "type": "array",
                                            "items": {
                                              "type": "object",
                                              "properties": {
                                                "category": {
                                                  "type": "string",
                                                  "nullable": true,
                                                  "metadata": {
                                                    "description": "Optional. Name of a Diagnostic Log category for a resource type this setting is applied to. Set the specific logs to collect here."
                                                  }
                                                },
                                                "categoryGroup": {
                                                  "type": "string",
                                                  "nullable": true,
                                                  "metadata": {
                                                    "description": "Optional. Name of a Diagnostic Log category group for a resource type this setting is applied to. Set to `allLogs` to collect all logs."
                                                  }
                                                },
                                                "enabled": {
                                                  "type": "bool",
                                                  "nullable": true,
                                                  "metadata": {
                                                    "description": "Optional. Enable or disable the category explicitly. Default is `true`."
                                                  }
                                                }
                                              }
                                            },
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. The name of logs that will be streamed. \"allLogs\" includes all possible logs for the resource. Set to `[]` to disable log collection."
                                            }
                                          },
                                          "metricCategories": {
                                            "type": "array",
                                            "items": {
                                              "type": "object",
                                              "properties": {
                                                "category": {
                                                  "type": "string",
                                                  "metadata": {
                                                    "description": "Required. Name of a Diagnostic Metric category for a resource type this setting is applied to. Set to `AllMetrics` to collect all metrics."
                                                  }
                                                },
                                                "enabled": {
                                                  "type": "bool",
                                                  "nullable": true,
                                                  "metadata": {
                                                    "description": "Optional. Enable or disable the category explicitly. Default is `true`."
                                                  }
                                                }
                                              }
                                            },
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. The name of metrics that will be streamed. \"allMetrics\" includes all possible metrics for the resource. Set to `[]` to disable metric collection."
                                            }
                                          },
                                          "logAnalyticsDestinationType": {
                                            "type": "string",
                                            "allowedValues": [
                                              "AzureDiagnostics",
                                              "Dedicated"
                                            ],
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. A string indicating whether the export to Log Analytics should use the default destination type, i.e. AzureDiagnostics, or use a destination type."
                                            }
                                          },
                                          "workspaceResourceId": {
                                            "type": "string",
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. Resource ID of the diagnostic log analytics workspace. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                                            }
                                          },
                                          "storageAccountResourceId": {
                                            "type": "string",
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. Resource ID of the diagnostic storage account. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                                            }
                                          },
                                          "eventHubAuthorizationRuleResourceId": {
                                            "type": "string",
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. Resource ID of the diagnostic event hub authorization rule for the Event Hubs namespace in which the event hub should be created or streamed to."
                                            }
                                          },
                                          "eventHubName": {
                                            "type": "string",
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. Name of the diagnostic event hub within the namespace to which logs are streamed. Without this, an event hub is created for each log category. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                                            }
                                          },
                                          "marketplacePartnerResourceId": {
                                            "type": "string",
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. The full ARM resource ID of the Marketplace resource to which you would like to send Diagnostic Logs."
                                            }
                                          }
                                        }
                                      },
                                      "nullable": true
                                    },
                                    "roleAssignmentType": {
                                      "type": "array",
                                      "items": {
                                        "type": "object",
                                        "properties": {
                                          "roleDefinitionIdOrName": {
                                            "type": "string",
                                            "metadata": {
                                              "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                                            }
                                          },
                                          "principalId": {
                                            "type": "string",
                                            "metadata": {
                                              "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                                            }
                                          },
                                          "principalType": {
                                            "type": "string",
                                            "allowedValues": [
                                              "Device",
                                              "ForeignGroup",
                                              "Group",
                                              "ServicePrincipal",
                                              "User"
                                            ],
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. The principal type of the assigned principal ID."
                                            }
                                          },
                                          "description": {
                                            "type": "string",
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. The description of the role assignment."
                                            }
                                          },
                                          "condition": {
                                            "type": "string",
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                                            }
                                          },
                                          "conditionVersion": {
                                            "type": "string",
                                            "allowedValues": [
                                              "2.0"
                                            ],
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. Version of the condition."
                                            }
                                          },
                                          "delegatedManagedIdentityResourceId": {
                                            "type": "string",
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. The Resource Id of the delegated managed identity resource."
                                            }
                                          }
                                        }
                                      },
                                      "nullable": true
                                    }
                                  },
                                  "parameters": {
                                    "networkInterfaceName": {
                                      "type": "string"
                                    },
                                    "virtualMachineName": {
                                      "type": "string"
                                    },
                                    "ipConfigurations": {
                                      "type": "array"
                                    },
                                    "location": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Optional. Location for all resources."
                                      }
                                    },
                                    "tags": {
                                      "type": "object",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. Tags of the resource."
                                      }
                                    },
                                    "enableIPForwarding": {
                                      "type": "bool",
                                      "defaultValue": false
                                    },
                                    "enableAcceleratedNetworking": {
                                      "type": "bool",
                                      "defaultValue": false
                                    },
                                    "dnsServers": {
                                      "type": "array",
                                      "defaultValue": []
                                    },
                                    "enableTelemetry": {
                                      "type": "bool",
                                      "metadata": {
                                        "description": "Required. Enable telemetry via a Globally Unique Identifier (GUID)."
                                      }
                                    },
                                    "networkSecurityGroupResourceId": {
                                      "type": "string",
                                      "defaultValue": "",
                                      "metadata": {
                                        "description": "Optional. The network security group (NSG) to attach to the network interface."
                                      }
                                    },
                                    "lock": {
                                      "$ref": "#/definitions/lockType",
                                      "metadata": {
                                        "description": "Optional. The lock settings of the service."
                                      }
                                    },
                                    "diagnosticSettings": {
                                      "$ref": "#/definitions/diagnosticSettingType",
                                      "metadata": {
                                        "description": "Optional. The diagnostic settings of the Network Interface."
                                      }
                                    },
                                    "roleAssignments": {
                                      "$ref": "#/definitions/roleAssignmentType",
                                      "metadata": {
                                        "description": "Optional. Array of role assignments to create."
                                      }
                                    }
                                  },
                                  "resources": {
                                    "networkInterface_publicIPAddresses": {
                                      "copy": {
                                        "name": "networkInterface_publicIPAddresses",
                                        "count": "[length(parameters('ipConfigurations'))]"
                                      },
                                      "condition": "[contains(parameters('ipConfigurations')[copyIndex()], 'pipConfiguration')]",
                                      "type": "Microsoft.Resources/deployments",
                                      "apiVersion": "2022-09-01",
                                      "name": "[format('{0}-publicIP-{1}', deployment().name, copyIndex())]",
                                      "properties": {
                                        "expressionEvaluationOptions": {
                                          "scope": "inner"
                                        },
                                        "mode": "Incremental",
                                        "parameters": {
                                          "name": "[if(contains(parameters('ipConfigurations')[copyIndex()].pipConfiguration, 'name'), createObject('value', parameters('ipConfigurations')[copyIndex()].pipConfiguration.name), createObject('value', format('{0}{1}', parameters('virtualMachineName'), parameters('ipConfigurations')[copyIndex()].pipConfiguration.publicIpNameSuffix)))]",
                                          "diagnosticSettings": {
                                            "value": "[tryGet(parameters('ipConfigurations')[copyIndex()], 'diagnosticSettings')]"
                                          },
                                          "location": {
                                            "value": "[parameters('location')]"
                                          },
                                          "lock": {
                                            "value": "[parameters('lock')]"
                                          },
                                          "idleTimeoutInMinutes": {
                                            "value": "[tryGet(parameters('ipConfigurations')[copyIndex()].pipConfiguration, 'idleTimeoutInMinutes')]"
                                          },
                                          "ddosSettings": {
                                            "value": "[tryGet(parameters('ipConfigurations')[copyIndex()].pipConfiguration, 'ddosSettings')]"
                                          },
                                          "dnsSettings": {
                                            "value": "[tryGet(parameters('ipConfigurations')[copyIndex()].pipConfiguration, 'dnsSettings')]"
                                          },
                                          "publicIPAddressVersion": "[if(contains(parameters('ipConfigurations')[copyIndex()].pipConfiguration, 'publicIPAddressVersion'), createObject('value', parameters('ipConfigurations')[copyIndex()].pipConfiguration.publicIPAddressVersion), createObject('value', 'IPv4'))]",
                                          "publicIPAllocationMethod": "[if(contains(parameters('ipConfigurations')[copyIndex()].pipConfiguration, 'publicIPAllocationMethod'), createObject('value', parameters('ipConfigurations')[copyIndex()].pipConfiguration.publicIPAllocationMethod), createObject('value', 'Static'))]",
                                          "publicIpPrefixResourceId": "[if(contains(parameters('ipConfigurations')[copyIndex()].pipConfiguration, 'publicIPPrefixResourceId'), createObject('value', parameters('ipConfigurations')[copyIndex()].pipConfiguration.publicIPPrefixResourceId), createObject('value', ''))]",
                                          "roleAssignments": "[if(contains(parameters('ipConfigurations')[copyIndex()].pipConfiguration, 'roleAssignments'), createObject('value', parameters('ipConfigurations')[copyIndex()].pipConfiguration.roleAssignments), createObject('value', createArray()))]",
                                          "skuName": "[if(contains(parameters('ipConfigurations')[copyIndex()].pipConfiguration, 'skuName'), createObject('value', parameters('ipConfigurations')[copyIndex()].pipConfiguration.skuName), createObject('value', 'Standard'))]",
                                          "skuTier": "[if(contains(parameters('ipConfigurations')[copyIndex()].pipConfiguration, 'skuTier'), createObject('value', parameters('ipConfigurations')[copyIndex()].pipConfiguration.skuTier), createObject('value', 'Regional'))]",
                                          "tags": {
                                            "value": "[coalesce(tryGet(parameters('ipConfigurations')[copyIndex()], 'tags'), parameters('tags'))]"
                                          },
                                          "zones": "[if(contains(parameters('ipConfigurations')[copyIndex()].pipConfiguration, 'zones'), createObject('value', parameters('ipConfigurations')[copyIndex()].pipConfiguration.zones), createObject('value', createArray(1, 2, 3)))]",
                                          "enableTelemetry": {
                                            "value": "[coalesce(tryGet(parameters('ipConfigurations')[copyIndex()], 'enableTelemetry'), parameters('enableTelemetry'))]"
                                          }
                                        },
                                        "template": {
                                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                          "languageVersion": "2.0",
                                          "contentVersion": "1.0.0.0",
                                          "metadata": {
                                            "_generator": {
                                              "name": "bicep",
                                              "version": "0.27.1.19265",
                                              "templateHash": "10356333973104369631"
                                            },
                                            "name": "Public IP Addresses",
                                            "description": "This module deploys a Public IP Address.",
                                            "owner": "Azure/module-maintainers"
                                          },
                                          "definitions": {
                                            "roleAssignmentType": {
                                              "type": "array",
                                              "items": {
                                                "type": "object",
                                                "properties": {
                                                  "roleDefinitionIdOrName": {
                                                    "type": "string",
                                                    "metadata": {
                                                      "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                                                    }
                                                  },
                                                  "principalId": {
                                                    "type": "string",
                                                    "metadata": {
                                                      "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                                                    }
                                                  },
                                                  "principalType": {
                                                    "type": "string",
                                                    "allowedValues": [
                                                      "Device",
                                                      "ForeignGroup",
                                                      "Group",
                                                      "ServicePrincipal",
                                                      "User"
                                                    ],
                                                    "nullable": true,
                                                    "metadata": {
                                                      "description": "Optional. The principal type of the assigned principal ID."
                                                    }
                                                  },
                                                  "description": {
                                                    "type": "string",
                                                    "nullable": true,
                                                    "metadata": {
                                                      "description": "Optional. The description of the role assignment."
                                                    }
                                                  },
                                                  "condition": {
                                                    "type": "string",
                                                    "nullable": true,
                                                    "metadata": {
                                                      "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                                                    }
                                                  },
                                                  "conditionVersion": {
                                                    "type": "string",
                                                    "allowedValues": [
                                                      "2.0"
                                                    ],
                                                    "nullable": true,
                                                    "metadata": {
                                                      "description": "Optional. Version of the condition."
                                                    }
                                                  },
                                                  "delegatedManagedIdentityResourceId": {
                                                    "type": "string",
                                                    "nullable": true,
                                                    "metadata": {
                                                      "description": "Optional. The Resource Id of the delegated managed identity resource."
                                                    }
                                                  }
                                                }
                                              },
                                              "nullable": true
                                            },
                                            "lockType": {
                                              "type": "object",
                                              "properties": {
                                                "name": {
                                                  "type": "string",
                                                  "nullable": true,
                                                  "metadata": {
                                                    "description": "Optional. Specify the name of lock."
                                                  }
                                                },
                                                "kind": {
                                                  "type": "string",
                                                  "allowedValues": [
                                                    "CanNotDelete",
                                                    "None",
                                                    "ReadOnly"
                                                  ],
                                                  "nullable": true,
                                                  "metadata": {
                                                    "description": "Optional. Specify the type of lock."
                                                  }
                                                }
                                              },
                                              "nullable": true
                                            },
                                            "dnsSettingsType": {
                                              "type": "object",
                                              "properties": {
                                                "domainNameLabel": {
                                                  "type": "string",
                                                  "metadata": {
                                                    "description": "Required. The domain name label. The concatenation of the domain name label and the regionalized DNS zone make up the fully qualified domain name associated with the public IP address. If a domain name label is specified, an A DNS record is created for the public IP in the Microsoft Azure DNS system."
                                                  }
                                                },
                                                "domainNameLabelScope": {
                                                  "type": "string",
                                                  "allowedValues": [
                                                    "",
                                                    "NoReuse",
                                                    "ResourceGroupReuse",
                                                    "SubscriptionReuse",
                                                    "TenantReuse"
                                                  ],
                                                  "metadata": {
                                                    "description": "Required. The domain name label scope. If a domain name label and a domain name label scope are specified, an A DNS record is created for the public IP in the Microsoft Azure DNS system with a hashed value includes in FQDN."
                                                  }
                                                },
                                                "fqdn": {
                                                  "type": "string",
                                                  "nullable": true,
                                                  "metadata": {
                                                    "description": "Optional. The Fully Qualified Domain Name of the A DNS record associated with the public IP. This is the concatenation of the domainNameLabel and the regionalized DNS zone."
                                                  }
                                                },
                                                "reverseFqdn": {
                                                  "type": "string",
                                                  "nullable": true,
                                                  "metadata": {
                                                    "description": "Optional. The reverse FQDN. A user-visible, fully qualified domain name that resolves to this public IP address. If the reverseFqdn is specified, then a PTR DNS record is created pointing from the IP address in the in-addr.arpa domain to the reverse FQDN."
                                                  }
                                                }
                                              }
                                            },
                                            "ddosSettingsType": {
                                              "type": "object",
                                              "properties": {
                                                "ddosProtectionPlan": {
                                                  "type": "object",
                                                  "properties": {
                                                    "id": {
                                                      "type": "string",
                                                      "metadata": {
                                                        "description": "Required. The resource ID of the DDOS protection plan associated with the public IP address."
                                                      }
                                                    }
                                                  },
                                                  "nullable": true,
                                                  "metadata": {
                                                    "description": "Optional. The DDoS protection plan associated with the public IP address."
                                                  }
                                                },
                                                "protectionMode": {
                                                  "type": "string",
                                                  "allowedValues": [
                                                    "Enabled"
                                                  ],
                                                  "metadata": {
                                                    "description": "Required. The DDoS protection policy customizations."
                                                  }
                                                }
                                              }
                                            },
                                            "diagnosticSettingType": {
                                              "type": "array",
                                              "items": {
                                                "type": "object",
                                                "properties": {
                                                  "name": {
                                                    "type": "string",
                                                    "nullable": true,
                                                    "metadata": {
                                                      "description": "Optional. The name of diagnostic setting."
                                                    }
                                                  },
                                                  "logCategoriesAndGroups": {
                                                    "type": "array",
                                                    "items": {
                                                      "type": "object",
                                                      "properties": {
                                                        "category": {
                                                          "type": "string",
                                                          "nullable": true,
                                                          "metadata": {
                                                            "description": "Optional. Name of a Diagnostic Log category for a resource type this setting is applied to. Set the specific logs to collect here."
                                                          }
                                                        },
                                                        "categoryGroup": {
                                                          "type": "string",
                                                          "nullable": true,
                                                          "metadata": {
                                                            "description": "Optional. Name of a Diagnostic Log category group for a resource type this setting is applied to. Set to `allLogs` to collect all logs."
                                                          }
                                                        },
                                                        "enabled": {
                                                          "type": "bool",
                                                          "nullable": true,
                                                          "metadata": {
                                                            "description": "Optional. Enable or disable the category explicitly. Default is `true`."
                                                          }
                                                        }
                                                      }
                                                    },
                                                    "nullable": true,
                                                    "metadata": {
                                                      "description": "Optional. The name of logs that will be streamed. \"allLogs\" includes all possible logs for the resource. Set to `[]` to disable log collection."
                                                    }
                                                  },
                                                  "metricCategories": {
                                                    "type": "array",
                                                    "items": {
                                                      "type": "object",
                                                      "properties": {
                                                        "category": {
                                                          "type": "string",
                                                          "metadata": {
                                                            "description": "Required. Name of a Diagnostic Metric category for a resource type this setting is applied to. Set to `AllMetrics` to collect all metrics."
                                                          }
                                                        },
                                                        "enabled": {
                                                          "type": "bool",
                                                          "nullable": true,
                                                          "metadata": {
                                                            "description": "Optional. Enable or disable the category explicitly. Default is `true`."
                                                          }
                                                        }
                                                      }
                                                    },
                                                    "nullable": true,
                                                    "metadata": {
                                                      "description": "Optional. The name of metrics that will be streamed. \"allMetrics\" includes all possible metrics for the resource. Set to `[]` to disable metric collection."
                                                    }
                                                  },
                                                  "logAnalyticsDestinationType": {
                                                    "type": "string",
                                                    "allowedValues": [
                                                      "AzureDiagnostics",
                                                      "Dedicated"
                                                    ],
                                                    "nullable": true,
                                                    "metadata": {
                                                      "description": "Optional. A string indicating whether the export to Log Analytics should use the default destination type, i.e. AzureDiagnostics, or use a destination type."
                                                    }
                                                  },
                                                  "workspaceResourceId": {
                                                    "type": "string",
                                                    "nullable": true,
                                                    "metadata": {
                                                      "description": "Optional. Resource ID of the diagnostic log analytics workspace. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                                                    }
                                                  },
                                                  "storageAccountResourceId": {
                                                    "type": "string",
                                                    "nullable": true,
                                                    "metadata": {
                                                      "description": "Optional. Resource ID of the diagnostic storage account. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                                                    }
                                                  },
                                                  "eventHubAuthorizationRuleResourceId": {
                                                    "type": "string",
                                                    "nullable": true,
                                                    "metadata": {
                                                      "description": "Optional. Resource ID of the diagnostic event hub authorization rule for the Event Hubs namespace in which the event hub should be created or streamed to."
                                                    }
                                                  },
                                                  "eventHubName": {
                                                    "type": "string",
                                                    "nullable": true,
                                                    "metadata": {
                                                      "description": "Optional. Name of the diagnostic event hub within the namespace to which logs are streamed. Without this, an event hub is created for each log category. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                                                    }
                                                  },
                                                  "marketplacePartnerResourceId": {
                                                    "type": "string",
                                                    "nullable": true,
                                                    "metadata": {
                                                      "description": "Optional. The full ARM resource ID of the Marketplace resource to which you would like to send Diagnostic Logs."
                                                    }
                                                  }
                                                }
                                              },
                                              "nullable": true
                                            }
                                          },
                                          "parameters": {
                                            "name": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "Required. The name of the Public IP Address."
                                              }
                                            },
                                            "publicIpPrefixResourceId": {
                                              "type": "string",
                                              "nullable": true,
                                              "metadata": {
                                                "description": "Optional. Resource ID of the Public IP Prefix object. This is only needed if you want your Public IPs created in a PIP Prefix."
                                              }
                                            },
                                            "publicIPAllocationMethod": {
                                              "type": "string",
                                              "defaultValue": "Static",
                                              "allowedValues": [
                                                "Dynamic",
                                                "Static"
                                              ],
                                              "metadata": {
                                                "description": "Optional. The public IP address allocation method."
                                              }
                                            },
                                            "zones": {
                                              "type": "array",
                                              "items": {
                                                "type": "int"
                                              },
                                              "defaultValue": [
                                                1,
                                                2,
                                                3
                                              ],
                                              "allowedValues": [
                                                1,
                                                2,
                                                3
                                              ],
                                              "metadata": {
                                                "description": "Optional. A list of availability zones denoting the IP allocated for the resource needs to come from."
                                              }
                                            },
                                            "publicIPAddressVersion": {
                                              "type": "string",
                                              "defaultValue": "IPv4",
                                              "allowedValues": [
                                                "IPv4",
                                                "IPv6"
                                              ],
                                              "metadata": {
                                                "description": "Optional. IP address version."
                                              }
                                            },
                                            "dnsSettings": {
                                              "$ref": "#/definitions/dnsSettingsType",
                                              "nullable": true,
                                              "metadata": {
                                                "description": "Optional. The DNS settings of the public IP address."
                                              }
                                            },
                                            "lock": {
                                              "$ref": "#/definitions/lockType",
                                              "metadata": {
                                                "description": "Optional. The lock settings of the service."
                                              }
                                            },
                                            "skuName": {
                                              "type": "string",
                                              "defaultValue": "Standard",
                                              "allowedValues": [
                                                "Basic",
                                                "Standard"
                                              ],
                                              "metadata": {
                                                "description": "Optional. Name of a public IP address SKU."
                                              }
                                            },
                                            "skuTier": {
                                              "type": "string",
                                              "defaultValue": "Regional",
                                              "allowedValues": [
                                                "Global",
                                                "Regional"
                                              ],
                                              "metadata": {
                                                "description": "Optional. Tier of a public IP address SKU."
                                              }
                                            },
                                            "ddosSettings": {
                                              "$ref": "#/definitions/ddosSettingsType",
                                              "nullable": true,
                                              "metadata": {
                                                "description": "Optional. The DDoS protection plan configuration associated with the public IP address."
                                              }
                                            },
                                            "location": {
                                              "type": "string",
                                              "defaultValue": "[resourceGroup().location]",
                                              "metadata": {
                                                "description": "Optional. Location for all resources."
                                              }
                                            },
                                            "roleAssignments": {
                                              "$ref": "#/definitions/roleAssignmentType",
                                              "metadata": {
                                                "description": "Optional. Array of role assignments to create."
                                              }
                                            },
                                            "enableTelemetry": {
                                              "type": "bool",
                                              "defaultValue": true,
                                              "metadata": {
                                                "description": "Optional. Enable/Disable usage telemetry for module."
                                              }
                                            },
                                            "idleTimeoutInMinutes": {
                                              "type": "int",
                                              "defaultValue": 4,
                                              "metadata": {
                                                "description": "Optional. The idle timeout of the public IP address."
                                              }
                                            },
                                            "tags": {
                                              "type": "object",
                                              "nullable": true,
                                              "metadata": {
                                                "description": "Optional. Tags of the resource."
                                              }
                                            },
                                            "diagnosticSettings": {
                                              "$ref": "#/definitions/diagnosticSettingType",
                                              "metadata": {
                                                "description": "Optional. The diagnostic settings of the service."
                                              }
                                            }
                                          },
                                          "variables": {
                                            "builtInRoleNames": {
                                              "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                                              "DNS Resolver Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '0f2ebee7-ffd4-4fc0-b3b7-664099fdad5d')]",
                                              "DNS Zone Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'befefa01-2a29-4197-83a8-272ff33ce314')]",
                                              "Domain Services Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'eeaeda52-9324-47f6-8069-5d5bade478b2')]",
                                              "Domain Services Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '361898ef-9ed1-48c2-849c-a832951106bb')]",
                                              "Network Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4d97b98b-1d4f-4787-a291-c67834d212e7')]",
                                              "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                                              "Private DNS Zone Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b12aa53e-6015-4669-85d0-8515ebb3ae7f')]",
                                              "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                                              "Role Based Access Control Administrator (Preview)": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]"
                                            }
                                          },
                                          "resources": {
                                            "avmTelemetry": {
                                              "condition": "[parameters('enableTelemetry')]",
                                              "type": "Microsoft.Resources/deployments",
                                              "apiVersion": "2023-07-01",
                                              "name": "[format('46d3xbcp.res.network-publicipaddress.{0}.{1}', replace('0.4.1', '.', '-'), substring(uniqueString(deployment().name, parameters('location')), 0, 4))]",
                                              "properties": {
                                                "mode": "Incremental",
                                                "template": {
                                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                                  "contentVersion": "1.0.0.0",
                                                  "resources": [],
                                                  "outputs": {
                                                    "telemetry": {
                                                      "type": "String",
                                                      "value": "For more information, see https://aka.ms/avm/TelemetryInfo"
                                                    }
                                                  }
                                                }
                                              }
                                            },
                                            "publicIpAddress": {
                                              "type": "Microsoft.Network/publicIPAddresses",
                                              "apiVersion": "2023-09-01",
                                              "name": "[parameters('name')]",
                                              "location": "[parameters('location')]",
                                              "tags": "[parameters('tags')]",
                                              "sku": {
                                                "name": "[parameters('skuName')]",
                                                "tier": "[parameters('skuTier')]"
                                              },
                                              "zones": "[map(parameters('zones'), lambda('zone', string(lambdaVariables('zone'))))]",
                                              "properties": {
                                                "ddosSettings": "[parameters('ddosSettings')]",
                                                "dnsSettings": "[parameters('dnsSettings')]",
                                                "publicIPAddressVersion": "[parameters('publicIPAddressVersion')]",
                                                "publicIPAllocationMethod": "[parameters('publicIPAllocationMethod')]",
                                                "publicIPPrefix": "[if(not(empty(parameters('publicIpPrefixResourceId'))), createObject('id', parameters('publicIpPrefixResourceId')), null())]",
                                                "idleTimeoutInMinutes": "[parameters('idleTimeoutInMinutes')]",
                                                "ipTags": null
                                              }
                                            },
                                            "publicIpAddress_lock": {
                                              "condition": "[and(not(empty(coalesce(parameters('lock'), createObject()))), not(equals(tryGet(parameters('lock'), 'kind'), 'None')))]",
                                              "type": "Microsoft.Authorization/locks",
                                              "apiVersion": "2020-05-01",
                                              "scope": "[format('Microsoft.Network/publicIPAddresses/{0}', parameters('name'))]",
                                              "name": "[coalesce(tryGet(parameters('lock'), 'name'), format('lock-{0}', parameters('name')))]",
                                              "properties": {
                                                "level": "[coalesce(tryGet(parameters('lock'), 'kind'), '')]",
                                                "notes": "[if(equals(tryGet(parameters('lock'), 'kind'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot delete or modify the resource or child resources.')]"
                                              },
                                              "dependsOn": [
                                                "publicIpAddress"
                                              ]
                                            },
                                            "publicIpAddress_roleAssignments": {
                                              "copy": {
                                                "name": "publicIpAddress_roleAssignments",
                                                "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]"
                                              },
                                              "type": "Microsoft.Authorization/roleAssignments",
                                              "apiVersion": "2022-04-01",
                                              "scope": "[format('Microsoft.Network/publicIPAddresses/{0}', parameters('name'))]",
                                              "name": "[guid(resourceId('Microsoft.Network/publicIPAddresses', parameters('name')), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].principalId, coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName)]",
                                              "properties": {
                                                "roleDefinitionId": "[if(contains(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName), variables('builtInRoleNames')[coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName], if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName)))]",
                                                "principalId": "[coalesce(parameters('roleAssignments'), createArray())[copyIndex()].principalId]",
                                                "description": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'description')]",
                                                "principalType": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'principalType')]",
                                                "condition": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'condition')]",
                                                "conditionVersion": "[if(not(empty(tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                                                "delegatedManagedIdentityResourceId": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
                                              },
                                              "dependsOn": [
                                                "publicIpAddress"
                                              ]
                                            },
                                            "publicIpAddress_diagnosticSettings": {
                                              "copy": {
                                                "name": "publicIpAddress_diagnosticSettings",
                                                "count": "[length(coalesce(parameters('diagnosticSettings'), createArray()))]"
                                              },
                                              "type": "Microsoft.Insights/diagnosticSettings",
                                              "apiVersion": "2021-05-01-preview",
                                              "scope": "[format('Microsoft.Network/publicIPAddresses/{0}', parameters('name'))]",
                                              "name": "[coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'name'), format('{0}-diagnosticSettings', parameters('name')))]",
                                              "properties": {
                                                "copy": [
                                                  {
                                                    "name": "metrics",
                                                    "count": "[length(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics'))))]",
                                                    "input": {
                                                      "category": "[coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics')))[copyIndex('metrics')].category]",
                                                      "enabled": "[coalesce(tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics')))[copyIndex('metrics')], 'enabled'), true())]",
                                                      "timeGrain": null
                                                    }
                                                  },
                                                  {
                                                    "name": "logs",
                                                    "count": "[length(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs'))))]",
                                                    "input": {
                                                      "categoryGroup": "[tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'categoryGroup')]",
                                                      "category": "[tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'category')]",
                                                      "enabled": "[coalesce(tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'enabled'), true())]"
                                                    }
                                                  }
                                                ],
                                                "storageAccountId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'storageAccountResourceId')]",
                                                "workspaceId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'workspaceResourceId')]",
                                                "eventHubAuthorizationRuleId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'eventHubAuthorizationRuleResourceId')]",
                                                "eventHubName": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'eventHubName')]",
                                                "marketplacePartnerId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'marketplacePartnerResourceId')]",
                                                "logAnalyticsDestinationType": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logAnalyticsDestinationType')]"
                                              },
                                              "dependsOn": [
                                                "publicIpAddress"
                                              ]
                                            }
                                          },
                                          "outputs": {
                                            "resourceGroupName": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "The resource group the public IP address was deployed into."
                                              },
                                              "value": "[resourceGroup().name]"
                                            },
                                            "name": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "The name of the public IP address."
                                              },
                                              "value": "[parameters('name')]"
                                            },
                                            "resourceId": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "The resource ID of the public IP address."
                                              },
                                              "value": "[resourceId('Microsoft.Network/publicIPAddresses', parameters('name'))]"
                                            },
                                            "ipAddress": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "The public IP address of the public IP address resource."
                                              },
                                              "value": "[coalesce(tryGet(reference('publicIpAddress'), 'ipAddress'), '')]"
                                            },
                                            "location": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "The location the resource was deployed into."
                                              },
                                              "value": "[reference('publicIpAddress', '2023-09-01', 'full').location]"
                                            }
                                          }
                                        }
                                      }
                                    },
                                    "networkInterface": {
                                      "type": "Microsoft.Resources/deployments",
                                      "apiVersion": "2022-09-01",
                                      "name": "[format('{0}-NetworkInterface', deployment().name)]",
                                      "properties": {
                                        "expressionEvaluationOptions": {
                                          "scope": "inner"
                                        },
                                        "mode": "Incremental",
                                        "parameters": {
                                          "name": {
                                            "value": "[parameters('networkInterfaceName')]"
                                          },
                                          "ipConfigurations": {
                                            "copy": [
                                              {
                                                "name": "value",
                                                "count": "[length(parameters('ipConfigurations'))]",
                                                "input": "[createObject('name', if(not(empty(parameters('ipConfigurations')[copyIndex('value')].name)), parameters('ipConfigurations')[copyIndex('value')].name, null()), 'primary', equals(copyIndex('value'), 0), 'privateIPAllocationMethod', if(contains(parameters('ipConfigurations')[copyIndex('value')], 'privateIPAllocationMethod'), if(not(empty(parameters('ipConfigurations')[copyIndex('value')].privateIPAllocationMethod)), parameters('ipConfigurations')[copyIndex('value')].privateIPAllocationMethod, null()), null()), 'privateIPAddress', if(contains(parameters('ipConfigurations')[copyIndex('value')], 'privateIPAddress'), if(not(empty(parameters('ipConfigurations')[copyIndex('value')].privateIPAddress)), parameters('ipConfigurations')[copyIndex('value')].privateIPAddress, null()), null()), 'publicIPAddressResourceId', if(contains(parameters('ipConfigurations')[copyIndex('value')], 'pipConfiguration'), resourceId('Microsoft.Network/publicIPAddresses', if(contains(parameters('ipConfigurations')[copyIndex('value')].pipConfiguration, 'name'), parameters('ipConfigurations')[copyIndex('value')].pipConfiguration.name, format('{0}{1}', parameters('virtualMachineName'), parameters('ipConfigurations')[copyIndex('value')].pipConfiguration.publicIpNameSuffix))), null()), 'subnetResourceId', parameters('ipConfigurations')[copyIndex('value')].subnetResourceId, 'loadBalancerBackendAddressPools', if(contains(parameters('ipConfigurations')[copyIndex('value')], 'loadBalancerBackendAddressPools'), parameters('ipConfigurations')[copyIndex('value')].loadBalancerBackendAddressPools, null()), 'applicationSecurityGroups', if(contains(parameters('ipConfigurations')[copyIndex('value')], 'applicationSecurityGroups'), parameters('ipConfigurations')[copyIndex('value')].applicationSecurityGroups, null()), 'applicationGatewayBackendAddressPools', if(contains(parameters('ipConfigurations')[copyIndex('value')], 'applicationGatewayBackendAddressPools'), parameters('ipConfigurations')[copyIndex('value')].applicationGatewayBackendAddressPools, null()), 'gatewayLoadBalancer', if(contains(parameters('ipConfigurations')[copyIndex('value')], 'gatewayLoadBalancer'), parameters('ipConfigurations')[copyIndex('value')].gatewayLoadBalancer, null()), 'loadBalancerInboundNatRules', if(contains(parameters('ipConfigurations')[copyIndex('value')], 'loadBalancerInboundNatRules'), parameters('ipConfigurations')[copyIndex('value')].loadBalancerInboundNatRules, null()), 'privateIPAddressVersion', if(contains(parameters('ipConfigurations')[copyIndex('value')], 'privateIPAddressVersion'), parameters('ipConfigurations')[copyIndex('value')].privateIPAddressVersion, null()), 'virtualNetworkTaps', if(contains(parameters('ipConfigurations')[copyIndex('value')], 'virtualNetworkTaps'), parameters('ipConfigurations')[copyIndex('value')].virtualNetworkTaps, null()))]"
                                              }
                                            ]
                                          },
                                          "location": {
                                            "value": "[parameters('location')]"
                                          },
                                          "tags": {
                                            "value": "[parameters('tags')]"
                                          },
                                          "diagnosticSettings": {
                                            "value": "[parameters('diagnosticSettings')]"
                                          },
                                          "dnsServers": "[if(not(empty(parameters('dnsServers'))), createObject('value', parameters('dnsServers')), createObject('value', createArray()))]",
                                          "enableAcceleratedNetworking": {
                                            "value": "[parameters('enableAcceleratedNetworking')]"
                                          },
                                          "enableTelemetry": {
                                            "value": "[parameters('enableTelemetry')]"
                                          },
                                          "enableIPForwarding": {
                                            "value": "[parameters('enableIPForwarding')]"
                                          },
                                          "lock": {
                                            "value": "[parameters('lock')]"
                                          },
                                          "networkSecurityGroupResourceId": "[if(not(empty(parameters('networkSecurityGroupResourceId'))), createObject('value', parameters('networkSecurityGroupResourceId')), createObject('value', ''))]",
                                          "roleAssignments": "[if(not(empty(parameters('roleAssignments'))), createObject('value', parameters('roleAssignments')), createObject('value', createArray()))]"
                                        },
                                        "template": {
                                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                          "languageVersion": "2.0",
                                          "contentVersion": "1.0.0.0",
                                          "metadata": {
                                            "_generator": {
                                              "name": "bicep",
                                              "version": "0.25.53.49325",
                                              "templateHash": "1612343535299711142"
                                            },
                                            "name": "Network Interface",
                                            "description": "This module deploys a Network Interface.",
                                            "owner": "Azure/module-maintainers"
                                          },
                                          "definitions": {
                                            "diagnosticSettingType": {
                                              "type": "array",
                                              "items": {
                                                "type": "object",
                                                "properties": {
                                                  "name": {
                                                    "type": "string",
                                                    "nullable": true,
                                                    "metadata": {
                                                      "description": "Optional. The name of diagnostic setting."
                                                    }
                                                  },
                                                  "logCategoriesAndGroups": {
                                                    "type": "array",
                                                    "items": {
                                                      "type": "object",
                                                      "properties": {
                                                        "category": {
                                                          "type": "string",
                                                          "nullable": true,
                                                          "metadata": {
                                                            "description": "Optional. Name of a Diagnostic Log category for a resource type this setting is applied to. Set the specific logs to collect here."
                                                          }
                                                        },
                                                        "categoryGroup": {
                                                          "type": "string",
                                                          "nullable": true,
                                                          "metadata": {
                                                            "description": "Optional. Name of a Diagnostic Log category group for a resource type this setting is applied to. Set to `allLogs` to collect all logs."
                                                          }
                                                        },
                                                        "enabled": {
                                                          "type": "bool",
                                                          "nullable": true,
                                                          "metadata": {
                                                            "description": "Optional. Enable or disable the category explicitly. Default is `true`."
                                                          }
                                                        }
                                                      }
                                                    },
                                                    "nullable": true,
                                                    "metadata": {
                                                      "description": "Optional. The name of logs that will be streamed. \"allLogs\" includes all possible logs for the resource. Set to `[]` to disable log collection."
                                                    }
                                                  },
                                                  "metricCategories": {
                                                    "type": "array",
                                                    "items": {
                                                      "type": "object",
                                                      "properties": {
                                                        "category": {
                                                          "type": "string",
                                                          "metadata": {
                                                            "description": "Required. Name of a Diagnostic Metric category for a resource type this setting is applied to. Set to `AllMetrics` to collect all metrics."
                                                          }
                                                        },
                                                        "enabled": {
                                                          "type": "bool",
                                                          "nullable": true,
                                                          "metadata": {
                                                            "description": "Optional. Enable or disable the category explicitly. Default is `true`."
                                                          }
                                                        }
                                                      }
                                                    },
                                                    "nullable": true,
                                                    "metadata": {
                                                      "description": "Optional. The name of metrics that will be streamed. \"allMetrics\" includes all possible metrics for the resource. Set to `[]` to disable metric collection."
                                                    }
                                                  },
                                                  "logAnalyticsDestinationType": {
                                                    "type": "string",
                                                    "allowedValues": [
                                                      "AzureDiagnostics",
                                                      "Dedicated"
                                                    ],
                                                    "nullable": true,
                                                    "metadata": {
                                                      "description": "Optional. A string indicating whether the export to Log Analytics should use the default destination type, i.e. AzureDiagnostics, or use a destination type."
                                                    }
                                                  },
                                                  "workspaceResourceId": {
                                                    "type": "string",
                                                    "nullable": true,
                                                    "metadata": {
                                                      "description": "Optional. Resource ID of the diagnostic log analytics workspace. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                                                    }
                                                  },
                                                  "storageAccountResourceId": {
                                                    "type": "string",
                                                    "nullable": true,
                                                    "metadata": {
                                                      "description": "Optional. Resource ID of the diagnostic storage account. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                                                    }
                                                  },
                                                  "eventHubAuthorizationRuleResourceId": {
                                                    "type": "string",
                                                    "nullable": true,
                                                    "metadata": {
                                                      "description": "Optional. Resource ID of the diagnostic event hub authorization rule for the Event Hubs namespace in which the event hub should be created or streamed to."
                                                    }
                                                  },
                                                  "eventHubName": {
                                                    "type": "string",
                                                    "nullable": true,
                                                    "metadata": {
                                                      "description": "Optional. Name of the diagnostic event hub within the namespace to which logs are streamed. Without this, an event hub is created for each log category. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                                                    }
                                                  },
                                                  "marketplacePartnerResourceId": {
                                                    "type": "string",
                                                    "nullable": true,
                                                    "metadata": {
                                                      "description": "Optional. The full ARM resource ID of the Marketplace resource to which you would like to send Diagnostic Logs."
                                                    }
                                                  }
                                                }
                                              },
                                              "nullable": true
                                            },
                                            "roleAssignmentType": {
                                              "type": "array",
                                              "items": {
                                                "type": "object",
                                                "properties": {
                                                  "roleDefinitionIdOrName": {
                                                    "type": "string",
                                                    "metadata": {
                                                      "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                                                    }
                                                  },
                                                  "principalId": {
                                                    "type": "string",
                                                    "metadata": {
                                                      "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                                                    }
                                                  },
                                                  "principalType": {
                                                    "type": "string",
                                                    "allowedValues": [
                                                      "Device",
                                                      "ForeignGroup",
                                                      "Group",
                                                      "ServicePrincipal",
                                                      "User"
                                                    ],
                                                    "nullable": true,
                                                    "metadata": {
                                                      "description": "Optional. The principal type of the assigned principal ID."
                                                    }
                                                  },
                                                  "description": {
                                                    "type": "string",
                                                    "nullable": true,
                                                    "metadata": {
                                                      "description": "Optional. The description of the role assignment."
                                                    }
                                                  },
                                                  "condition": {
                                                    "type": "string",
                                                    "nullable": true,
                                                    "metadata": {
                                                      "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                                                    }
                                                  },
                                                  "conditionVersion": {
                                                    "type": "string",
                                                    "allowedValues": [
                                                      "2.0"
                                                    ],
                                                    "nullable": true,
                                                    "metadata": {
                                                      "description": "Optional. Version of the condition."
                                                    }
                                                  },
                                                  "delegatedManagedIdentityResourceId": {
                                                    "type": "string",
                                                    "nullable": true,
                                                    "metadata": {
                                                      "description": "Optional. The Resource Id of the delegated managed identity resource."
                                                    }
                                                  }
                                                }
                                              },
                                              "nullable": true
                                            },
                                            "lockType": {
                                              "type": "object",
                                              "properties": {
                                                "name": {
                                                  "type": "string",
                                                  "nullable": true,
                                                  "metadata": {
                                                    "description": "Optional. Specify the name of lock."
                                                  }
                                                },
                                                "kind": {
                                                  "type": "string",
                                                  "allowedValues": [
                                                    "CanNotDelete",
                                                    "None",
                                                    "ReadOnly"
                                                  ],
                                                  "nullable": true,
                                                  "metadata": {
                                                    "description": "Optional. Specify the type of lock."
                                                  }
                                                }
                                              },
                                              "nullable": true
                                            }
                                          },
                                          "parameters": {
                                            "name": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "Required. The name of the network interface."
                                              }
                                            },
                                            "location": {
                                              "type": "string",
                                              "defaultValue": "[resourceGroup().location]",
                                              "metadata": {
                                                "description": "Optional. Location for all resources."
                                              }
                                            },
                                            "tags": {
                                              "type": "object",
                                              "nullable": true,
                                              "metadata": {
                                                "description": "Optional. Resource tags."
                                              }
                                            },
                                            "enableTelemetry": {
                                              "type": "bool",
                                              "defaultValue": true,
                                              "metadata": {
                                                "description": "Optional. Enable/Disable usage telemetry for module."
                                              }
                                            },
                                            "enableIPForwarding": {
                                              "type": "bool",
                                              "defaultValue": false,
                                              "metadata": {
                                                "description": "Optional. Indicates whether IP forwarding is enabled on this network interface."
                                              }
                                            },
                                            "enableAcceleratedNetworking": {
                                              "type": "bool",
                                              "defaultValue": false,
                                              "metadata": {
                                                "description": "Optional. If the network interface is accelerated networking enabled."
                                              }
                                            },
                                            "dnsServers": {
                                              "type": "array",
                                              "defaultValue": [],
                                              "metadata": {
                                                "description": "Optional. List of DNS servers IP addresses. Use 'AzureProvidedDNS' to switch to azure provided DNS resolution. 'AzureProvidedDNS' value cannot be combined with other IPs, it must be the only value in dnsServers collection."
                                              }
                                            },
                                            "networkSecurityGroupResourceId": {
                                              "type": "string",
                                              "defaultValue": "",
                                              "metadata": {
                                                "description": "Optional. The network security group (NSG) to attach to the network interface."
                                              }
                                            },
                                            "auxiliaryMode": {
                                              "type": "string",
                                              "defaultValue": "None",
                                              "allowedValues": [
                                                "Floating",
                                                "MaxConnections",
                                                "None"
                                              ],
                                              "metadata": {
                                                "description": "Optional. Auxiliary mode of Network Interface resource. Not all regions are enabled for Auxiliary Mode Nic."
                                              }
                                            },
                                            "auxiliarySku": {
                                              "type": "string",
                                              "defaultValue": "None",
                                              "allowedValues": [
                                                "A1",
                                                "A2",
                                                "A4",
                                                "A8",
                                                "None"
                                              ],
                                              "metadata": {
                                                "description": "Optional. Auxiliary sku of Network Interface resource. Not all regions are enabled for Auxiliary Mode Nic."
                                              }
                                            },
                                            "disableTcpStateTracking": {
                                              "type": "bool",
                                              "defaultValue": false,
                                              "metadata": {
                                                "description": "Optional. Indicates whether to disable tcp state tracking. Subscription must be registered for the Microsoft.Network/AllowDisableTcpStateTracking feature before this property can be set to true."
                                              }
                                            },
                                            "ipConfigurations": {
                                              "type": "array",
                                              "metadata": {
                                                "description": "Required. A list of IPConfigurations of the network interface."
                                              }
                                            },
                                            "lock": {
                                              "$ref": "#/definitions/lockType",
                                              "metadata": {
                                                "description": "Optional. The lock settings of the service."
                                              }
                                            },
                                            "roleAssignments": {
                                              "$ref": "#/definitions/roleAssignmentType",
                                              "metadata": {
                                                "description": "Optional. Array of role assignments to create."
                                              }
                                            },
                                            "diagnosticSettings": {
                                              "$ref": "#/definitions/diagnosticSettingType",
                                              "metadata": {
                                                "description": "Optional. The diagnostic settings of the service."
                                              }
                                            }
                                          },
                                          "variables": {
                                            "builtInRoleNames": {
                                              "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                                              "DNS Resolver Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '0f2ebee7-ffd4-4fc0-b3b7-664099fdad5d')]",
                                              "DNS Zone Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'befefa01-2a29-4197-83a8-272ff33ce314')]",
                                              "Network Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4d97b98b-1d4f-4787-a291-c67834d212e7')]",
                                              "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                                              "Private DNS Zone Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b12aa53e-6015-4669-85d0-8515ebb3ae7f')]",
                                              "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                                              "Role Based Access Control Administrator (Preview)": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]"
                                            }
                                          },
                                          "resources": {
                                            "avmTelemetry": {
                                              "condition": "[parameters('enableTelemetry')]",
                                              "type": "Microsoft.Resources/deployments",
                                              "apiVersion": "2023-07-01",
                                              "name": "[format('46d3xbcp.res.network-networkinterface.{0}.{1}', replace('0.2.4', '.', '-'), substring(uniqueString(deployment().name, parameters('location')), 0, 4))]",
                                              "properties": {
                                                "mode": "Incremental",
                                                "template": {
                                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                                  "contentVersion": "1.0.0.0",
                                                  "resources": [],
                                                  "outputs": {
                                                    "telemetry": {
                                                      "type": "String",
                                                      "value": "For more information, see https://aka.ms/avm/TelemetryInfo"
                                                    }
                                                  }
                                                }
                                              }
                                            },
                                            "networkInterface": {
                                              "type": "Microsoft.Network/networkInterfaces",
                                              "apiVersion": "2023-04-01",
                                              "name": "[parameters('name')]",
                                              "location": "[parameters('location')]",
                                              "tags": "[parameters('tags')]",
                                              "properties": {
                                                "copy": [
                                                  {
                                                    "name": "ipConfigurations",
                                                    "count": "[length(parameters('ipConfigurations'))]",
                                                    "input": {
                                                      "name": "[if(contains(parameters('ipConfigurations')[copyIndex('ipConfigurations')], 'name'), parameters('ipConfigurations')[copyIndex('ipConfigurations')].name, format('ipconfig0{0}', add(copyIndex('ipConfigurations'), 1)))]",
                                                      "properties": {
                                                        "primary": "[if(equals(copyIndex('ipConfigurations'), 0), true(), false())]",
                                                        "privateIPAllocationMethod": "[if(contains(parameters('ipConfigurations')[copyIndex('ipConfigurations')], 'privateIPAllocationMethod'), if(not(empty(parameters('ipConfigurations')[copyIndex('ipConfigurations')].privateIPAllocationMethod)), parameters('ipConfigurations')[copyIndex('ipConfigurations')].privateIPAllocationMethod, null()), null())]",
                                                        "privateIPAddress": "[if(contains(parameters('ipConfigurations')[copyIndex('ipConfigurations')], 'privateIPAddress'), if(not(empty(parameters('ipConfigurations')[copyIndex('ipConfigurations')].privateIPAddress)), parameters('ipConfigurations')[copyIndex('ipConfigurations')].privateIPAddress, null()), null())]",
                                                        "publicIPAddress": "[if(contains(parameters('ipConfigurations')[copyIndex('ipConfigurations')], 'publicIPAddressResourceId'), if(not(equals(parameters('ipConfigurations')[copyIndex('ipConfigurations')].publicIPAddressResourceId, null())), createObject('id', parameters('ipConfigurations')[copyIndex('ipConfigurations')].publicIPAddressResourceId), null()), null())]",
                                                        "subnet": {
                                                          "id": "[parameters('ipConfigurations')[copyIndex('ipConfigurations')].subnetResourceId]"
                                                        },
                                                        "loadBalancerBackendAddressPools": "[if(contains(parameters('ipConfigurations')[copyIndex('ipConfigurations')], 'loadBalancerBackendAddressPools'), parameters('ipConfigurations')[copyIndex('ipConfigurations')].loadBalancerBackendAddressPools, null())]",
                                                        "applicationSecurityGroups": "[if(contains(parameters('ipConfigurations')[copyIndex('ipConfigurations')], 'applicationSecurityGroups'), parameters('ipConfigurations')[copyIndex('ipConfigurations')].applicationSecurityGroups, null())]",
                                                        "applicationGatewayBackendAddressPools": "[if(contains(parameters('ipConfigurations')[copyIndex('ipConfigurations')], 'applicationGatewayBackendAddressPools'), parameters('ipConfigurations')[copyIndex('ipConfigurations')].applicationGatewayBackendAddressPools, null())]",
                                                        "gatewayLoadBalancer": "[if(contains(parameters('ipConfigurations')[copyIndex('ipConfigurations')], 'gatewayLoadBalancer'), parameters('ipConfigurations')[copyIndex('ipConfigurations')].gatewayLoadBalancer, null())]",
                                                        "loadBalancerInboundNatRules": "[if(contains(parameters('ipConfigurations')[copyIndex('ipConfigurations')], 'loadBalancerInboundNatRules'), parameters('ipConfigurations')[copyIndex('ipConfigurations')].loadBalancerInboundNatRules, null())]",
                                                        "privateIPAddressVersion": "[if(contains(parameters('ipConfigurations')[copyIndex('ipConfigurations')], 'privateIPAddressVersion'), parameters('ipConfigurations')[copyIndex('ipConfigurations')].privateIPAddressVersion, null())]",
                                                        "virtualNetworkTaps": "[if(contains(parameters('ipConfigurations')[copyIndex('ipConfigurations')], 'virtualNetworkTaps'), parameters('ipConfigurations')[copyIndex('ipConfigurations')].virtualNetworkTaps, null())]"
                                                      }
                                                    }
                                                  }
                                                ],
                                                "auxiliaryMode": "[parameters('auxiliaryMode')]",
                                                "auxiliarySku": "[parameters('auxiliarySku')]",
                                                "disableTcpStateTracking": "[parameters('disableTcpStateTracking')]",
                                                "dnsSettings": "[if(not(empty(parameters('dnsServers'))), createObject('dnsServers', parameters('dnsServers')), null())]",
                                                "enableAcceleratedNetworking": "[parameters('enableAcceleratedNetworking')]",
                                                "enableIPForwarding": "[parameters('enableIPForwarding')]",
                                                "networkSecurityGroup": "[if(not(empty(parameters('networkSecurityGroupResourceId'))), createObject('id', parameters('networkSecurityGroupResourceId')), null())]"
                                              }
                                            },
                                            "networkInterface_lock": {
                                              "condition": "[and(not(empty(coalesce(parameters('lock'), createObject()))), not(equals(tryGet(parameters('lock'), 'kind'), 'None')))]",
                                              "type": "Microsoft.Authorization/locks",
                                              "apiVersion": "2020-05-01",
                                              "scope": "[format('Microsoft.Network/networkInterfaces/{0}', parameters('name'))]",
                                              "name": "[coalesce(tryGet(parameters('lock'), 'name'), format('lock-{0}', parameters('name')))]",
                                              "properties": {
                                                "level": "[coalesce(tryGet(parameters('lock'), 'kind'), '')]",
                                                "notes": "[if(equals(tryGet(parameters('lock'), 'kind'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot delete or modify the resource or child resources.')]"
                                              },
                                              "dependsOn": [
                                                "networkInterface"
                                              ]
                                            },
                                            "networkInterface_diagnosticSettings": {
                                              "copy": {
                                                "name": "networkInterface_diagnosticSettings",
                                                "count": "[length(coalesce(parameters('diagnosticSettings'), createArray()))]"
                                              },
                                              "type": "Microsoft.Insights/diagnosticSettings",
                                              "apiVersion": "2021-05-01-preview",
                                              "scope": "[format('Microsoft.Network/networkInterfaces/{0}', parameters('name'))]",
                                              "name": "[coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'name'), format('{0}-diagnosticSettings', parameters('name')))]",
                                              "properties": {
                                                "copy": [
                                                  {
                                                    "name": "metrics",
                                                    "count": "[length(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics'))))]",
                                                    "input": {
                                                      "category": "[coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics')))[copyIndex('metrics')].category]",
                                                      "enabled": "[coalesce(tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics')))[copyIndex('metrics')], 'enabled'), true())]",
                                                      "timeGrain": null
                                                    }
                                                  }
                                                ],
                                                "storageAccountId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'storageAccountResourceId')]",
                                                "workspaceId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'workspaceResourceId')]",
                                                "eventHubAuthorizationRuleId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'eventHubAuthorizationRuleResourceId')]",
                                                "eventHubName": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'eventHubName')]",
                                                "marketplacePartnerId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'marketplacePartnerResourceId')]",
                                                "logAnalyticsDestinationType": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logAnalyticsDestinationType')]"
                                              },
                                              "dependsOn": [
                                                "networkInterface"
                                              ]
                                            },
                                            "networkInterface_roleAssignments": {
                                              "copy": {
                                                "name": "networkInterface_roleAssignments",
                                                "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]"
                                              },
                                              "type": "Microsoft.Authorization/roleAssignments",
                                              "apiVersion": "2022-04-01",
                                              "scope": "[format('Microsoft.Network/networkInterfaces/{0}', parameters('name'))]",
                                              "name": "[guid(resourceId('Microsoft.Network/networkInterfaces', parameters('name')), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].principalId, coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName)]",
                                              "properties": {
                                                "roleDefinitionId": "[if(contains(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName), variables('builtInRoleNames')[coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName], if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName)))]",
                                                "principalId": "[coalesce(parameters('roleAssignments'), createArray())[copyIndex()].principalId]",
                                                "description": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'description')]",
                                                "principalType": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'principalType')]",
                                                "condition": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'condition')]",
                                                "conditionVersion": "[if(not(empty(tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                                                "delegatedManagedIdentityResourceId": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
                                              },
                                              "dependsOn": [
                                                "networkInterface"
                                              ]
                                            }
                                          },
                                          "outputs": {
                                            "name": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "The name of the deployed resource."
                                              },
                                              "value": "[parameters('name')]"
                                            },
                                            "resourceId": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "The resource ID of the deployed resource."
                                              },
                                              "value": "[resourceId('Microsoft.Network/networkInterfaces', parameters('name'))]"
                                            },
                                            "resourceGroupName": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "The resource group of the deployed resource."
                                              },
                                              "value": "[resourceGroup().name]"
                                            },
                                            "location": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "The location the resource was deployed into."
                                              },
                                              "value": "[reference('networkInterface', '2023-04-01', 'full').location]"
                                            }
                                          }
                                        }
                                      },
                                      "dependsOn": [
                                        "networkInterface_publicIPAddresses"
                                      ]
                                    }
                                  }
                                }
                              }
                            },
                            "vm_aadJoinExtension": {
                              "condition": "[parameters('extensionAadJoinConfig').enabled]",
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "[format('{0}-VM-AADLogin', uniqueString(deployment().name, parameters('location')))]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "virtualMachineName": {
                                    "value": "[parameters('name')]"
                                  },
                                  "name": {
                                    "value": "AADLogin"
                                  },
                                  "location": {
                                    "value": "[parameters('location')]"
                                  },
                                  "publisher": {
                                    "value": "Microsoft.Azure.ActiveDirectory"
                                  },
                                  "type": "[if(equals(parameters('osType'), 'Windows'), createObject('value', 'AADLoginForWindows'), createObject('value', 'AADSSHLoginforLinux'))]",
                                  "typeHandlerVersion": "[if(contains(parameters('extensionAadJoinConfig'), 'typeHandlerVersion'), createObject('value', parameters('extensionAadJoinConfig').typeHandlerVersion), if(equals(parameters('osType'), 'Windows'), createObject('value', '2.0'), createObject('value', '1.0')))]",
                                  "autoUpgradeMinorVersion": "[if(contains(parameters('extensionAadJoinConfig'), 'autoUpgradeMinorVersion'), createObject('value', parameters('extensionAadJoinConfig').autoUpgradeMinorVersion), createObject('value', true()))]",
                                  "enableAutomaticUpgrade": "[if(contains(parameters('extensionAadJoinConfig'), 'enableAutomaticUpgrade'), createObject('value', parameters('extensionAadJoinConfig').enableAutomaticUpgrade), createObject('value', false()))]",
                                  "settings": "[if(contains(parameters('extensionAadJoinConfig'), 'settings'), createObject('value', parameters('extensionAadJoinConfig').settings), createObject('value', createObject()))]",
                                  "supressFailures": {
                                    "value": "[coalesce(tryGet(parameters('extensionAadJoinConfig'), 'supressFailures'), false())]"
                                  },
                                  "tags": {
                                    "value": "[coalesce(tryGet(parameters('extensionAadJoinConfig'), 'tags'), parameters('tags'))]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "languageVersion": "2.0",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.28.1.47646",
                                      "templateHash": "15287507275706455668"
                                    },
                                    "name": "Virtual Machine Extensions",
                                    "description": "This module deploys a Virtual Machine Extension.",
                                    "owner": "Azure/module-maintainers"
                                  },
                                  "parameters": {
                                    "virtualMachineName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Conditional. The name of the parent virtual machine that extension is provisioned for. Required if the template is used in a standalone deployment."
                                      }
                                    },
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The name of the virtual machine extension."
                                      }
                                    },
                                    "location": {
                                      "type": "string",
                                      "defaultValue": "[resourceGroup().location]",
                                      "metadata": {
                                        "description": "Optional. The location the extension is deployed to."
                                      }
                                    },
                                    "publisher": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The name of the extension handler publisher."
                                      }
                                    },
                                    "type": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. Specifies the type of the extension; an example is \"CustomScriptExtension\"."
                                      }
                                    },
                                    "typeHandlerVersion": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. Specifies the version of the script handler."
                                      }
                                    },
                                    "autoUpgradeMinorVersion": {
                                      "type": "bool",
                                      "metadata": {
                                        "description": "Required. Indicates whether the extension should use a newer minor version if one is available at deployment time. Once deployed, however, the extension will not upgrade minor versions unless redeployed, even with this property set to true."
                                      }
                                    },
                                    "forceUpdateTag": {
                                      "type": "string",
                                      "defaultValue": "",
                                      "metadata": {
                                        "description": "Optional. How the extension handler should be forced to update even if the extension configuration has not changed."
                                      }
                                    },
                                    "settings": {
                                      "type": "object",
                                      "defaultValue": {},
                                      "metadata": {
                                        "description": "Optional. Any object that contains the extension specific settings."
                                      }
                                    },
                                    "protectedSettings": {
                                      "type": "secureObject",
                                      "defaultValue": {},
                                      "metadata": {
                                        "description": "Optional. Any object that contains the extension specific protected settings."
                                      }
                                    },
                                    "supressFailures": {
                                      "type": "bool",
                                      "defaultValue": false,
                                      "metadata": {
                                        "description": "Optional. Indicates whether failures stemming from the extension will be suppressed (Operational failures such as not connecting to the VM will not be suppressed regardless of this value). The default is false."
                                      }
                                    },
                                    "enableAutomaticUpgrade": {
                                      "type": "bool",
                                      "metadata": {
                                        "description": "Required. Indicates whether the extension should be automatically upgraded by the platform if there is a newer version of the extension available."
                                      }
                                    },
                                    "tags": {
                                      "type": "object",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. Tags of the resource."
                                      }
                                    }
                                  },
                                  "resources": {
                                    "virtualMachine": {
                                      "existing": true,
                                      "type": "Microsoft.Compute/virtualMachines",
                                      "apiVersion": "2022-11-01",
                                      "name": "[parameters('virtualMachineName')]"
                                    },
                                    "extension": {
                                      "type": "Microsoft.Compute/virtualMachines/extensions",
                                      "apiVersion": "2022-11-01",
                                      "name": "[format('{0}/{1}', parameters('virtualMachineName'), parameters('name'))]",
                                      "location": "[parameters('location')]",
                                      "tags": "[parameters('tags')]",
                                      "properties": {
                                        "publisher": "[parameters('publisher')]",
                                        "type": "[parameters('type')]",
                                        "typeHandlerVersion": "[parameters('typeHandlerVersion')]",
                                        "autoUpgradeMinorVersion": "[parameters('autoUpgradeMinorVersion')]",
                                        "enableAutomaticUpgrade": "[parameters('enableAutomaticUpgrade')]",
                                        "forceUpdateTag": "[if(not(empty(parameters('forceUpdateTag'))), parameters('forceUpdateTag'), null())]",
                                        "settings": "[if(not(empty(parameters('settings'))), parameters('settings'), null())]",
                                        "protectedSettings": "[if(not(empty(parameters('protectedSettings'))), parameters('protectedSettings'), null())]",
                                        "suppressFailures": "[parameters('supressFailures')]"
                                      },
                                      "dependsOn": [
                                        "virtualMachine"
                                      ]
                                    }
                                  },
                                  "outputs": {
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the extension."
                                      },
                                      "value": "[parameters('name')]"
                                    },
                                    "resourceId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource ID of the extension."
                                      },
                                      "value": "[resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('virtualMachineName'), parameters('name'))]"
                                    },
                                    "resourceGroupName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the Resource Group the extension was created in."
                                      },
                                      "value": "[resourceGroup().name]"
                                    },
                                    "location": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The location the resource was deployed into."
                                      },
                                      "value": "[reference('extension', '2022-11-01', 'full').location]"
                                    }
                                  }
                                }
                              },
                              "dependsOn": [
                                "vm"
                              ]
                            },
                            "vm_domainJoinExtension": {
                              "condition": "[and(contains(parameters('extensionDomainJoinConfig'), 'enabled'), parameters('extensionDomainJoinConfig').enabled)]",
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "[format('{0}-VM-DomainJoin', uniqueString(deployment().name, parameters('location')))]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "virtualMachineName": {
                                    "value": "[parameters('name')]"
                                  },
                                  "name": {
                                    "value": "DomainJoin"
                                  },
                                  "location": {
                                    "value": "[parameters('location')]"
                                  },
                                  "publisher": {
                                    "value": "Microsoft.Compute"
                                  },
                                  "type": {
                                    "value": "JsonADDomainExtension"
                                  },
                                  "typeHandlerVersion": "[if(contains(parameters('extensionDomainJoinConfig'), 'typeHandlerVersion'), createObject('value', parameters('extensionDomainJoinConfig').typeHandlerVersion), createObject('value', '1.3'))]",
                                  "autoUpgradeMinorVersion": "[if(contains(parameters('extensionDomainJoinConfig'), 'autoUpgradeMinorVersion'), createObject('value', parameters('extensionDomainJoinConfig').autoUpgradeMinorVersion), createObject('value', true()))]",
                                  "enableAutomaticUpgrade": "[if(contains(parameters('extensionDomainJoinConfig'), 'enableAutomaticUpgrade'), createObject('value', parameters('extensionDomainJoinConfig').enableAutomaticUpgrade), createObject('value', false()))]",
                                  "settings": {
                                    "value": "[parameters('extensionDomainJoinConfig').settings]"
                                  },
                                  "supressFailures": {
                                    "value": "[coalesce(tryGet(parameters('extensionDomainJoinConfig'), 'supressFailures'), false())]"
                                  },
                                  "tags": {
                                    "value": "[coalesce(tryGet(parameters('extensionDomainJoinConfig'), 'tags'), parameters('tags'))]"
                                  },
                                  "protectedSettings": {
                                    "value": {
                                      "Password": "[parameters('extensionDomainJoinPassword')]"
                                    }
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "languageVersion": "2.0",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.28.1.47646",
                                      "templateHash": "15287507275706455668"
                                    },
                                    "name": "Virtual Machine Extensions",
                                    "description": "This module deploys a Virtual Machine Extension.",
                                    "owner": "Azure/module-maintainers"
                                  },
                                  "parameters": {
                                    "virtualMachineName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Conditional. The name of the parent virtual machine that extension is provisioned for. Required if the template is used in a standalone deployment."
                                      }
                                    },
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The name of the virtual machine extension."
                                      }
                                    },
                                    "location": {
                                      "type": "string",
                                      "defaultValue": "[resourceGroup().location]",
                                      "metadata": {
                                        "description": "Optional. The location the extension is deployed to."
                                      }
                                    },
                                    "publisher": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The name of the extension handler publisher."
                                      }
                                    },
                                    "type": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. Specifies the type of the extension; an example is \"CustomScriptExtension\"."
                                      }
                                    },
                                    "typeHandlerVersion": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. Specifies the version of the script handler."
                                      }
                                    },
                                    "autoUpgradeMinorVersion": {
                                      "type": "bool",
                                      "metadata": {
                                        "description": "Required. Indicates whether the extension should use a newer minor version if one is available at deployment time. Once deployed, however, the extension will not upgrade minor versions unless redeployed, even with this property set to true."
                                      }
                                    },
                                    "forceUpdateTag": {
                                      "type": "string",
                                      "defaultValue": "",
                                      "metadata": {
                                        "description": "Optional. How the extension handler should be forced to update even if the extension configuration has not changed."
                                      }
                                    },
                                    "settings": {
                                      "type": "object",
                                      "defaultValue": {},
                                      "metadata": {
                                        "description": "Optional. Any object that contains the extension specific settings."
                                      }
                                    },
                                    "protectedSettings": {
                                      "type": "secureObject",
                                      "defaultValue": {},
                                      "metadata": {
                                        "description": "Optional. Any object that contains the extension specific protected settings."
                                      }
                                    },
                                    "supressFailures": {
                                      "type": "bool",
                                      "defaultValue": false,
                                      "metadata": {
                                        "description": "Optional. Indicates whether failures stemming from the extension will be suppressed (Operational failures such as not connecting to the VM will not be suppressed regardless of this value). The default is false."
                                      }
                                    },
                                    "enableAutomaticUpgrade": {
                                      "type": "bool",
                                      "metadata": {
                                        "description": "Required. Indicates whether the extension should be automatically upgraded by the platform if there is a newer version of the extension available."
                                      }
                                    },
                                    "tags": {
                                      "type": "object",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. Tags of the resource."
                                      }
                                    }
                                  },
                                  "resources": {
                                    "virtualMachine": {
                                      "existing": true,
                                      "type": "Microsoft.Compute/virtualMachines",
                                      "apiVersion": "2022-11-01",
                                      "name": "[parameters('virtualMachineName')]"
                                    },
                                    "extension": {
                                      "type": "Microsoft.Compute/virtualMachines/extensions",
                                      "apiVersion": "2022-11-01",
                                      "name": "[format('{0}/{1}', parameters('virtualMachineName'), parameters('name'))]",
                                      "location": "[parameters('location')]",
                                      "tags": "[parameters('tags')]",
                                      "properties": {
                                        "publisher": "[parameters('publisher')]",
                                        "type": "[parameters('type')]",
                                        "typeHandlerVersion": "[parameters('typeHandlerVersion')]",
                                        "autoUpgradeMinorVersion": "[parameters('autoUpgradeMinorVersion')]",
                                        "enableAutomaticUpgrade": "[parameters('enableAutomaticUpgrade')]",
                                        "forceUpdateTag": "[if(not(empty(parameters('forceUpdateTag'))), parameters('forceUpdateTag'), null())]",
                                        "settings": "[if(not(empty(parameters('settings'))), parameters('settings'), null())]",
                                        "protectedSettings": "[if(not(empty(parameters('protectedSettings'))), parameters('protectedSettings'), null())]",
                                        "suppressFailures": "[parameters('supressFailures')]"
                                      },
                                      "dependsOn": [
                                        "virtualMachine"
                                      ]
                                    }
                                  },
                                  "outputs": {
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the extension."
                                      },
                                      "value": "[parameters('name')]"
                                    },
                                    "resourceId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource ID of the extension."
                                      },
                                      "value": "[resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('virtualMachineName'), parameters('name'))]"
                                    },
                                    "resourceGroupName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the Resource Group the extension was created in."
                                      },
                                      "value": "[resourceGroup().name]"
                                    },
                                    "location": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The location the resource was deployed into."
                                      },
                                      "value": "[reference('extension', '2022-11-01', 'full').location]"
                                    }
                                  }
                                }
                              },
                              "dependsOn": [
                                "vm",
                                "vm_aadJoinExtension"
                              ]
                            },
                            "vm_microsoftAntiMalwareExtension": {
                              "condition": "[parameters('extensionAntiMalwareConfig').enabled]",
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "[format('{0}-VM-MicrosoftAntiMalware', uniqueString(deployment().name, parameters('location')))]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "virtualMachineName": {
                                    "value": "[parameters('name')]"
                                  },
                                  "name": {
                                    "value": "MicrosoftAntiMalware"
                                  },
                                  "location": {
                                    "value": "[parameters('location')]"
                                  },
                                  "publisher": {
                                    "value": "Microsoft.Azure.Security"
                                  },
                                  "type": {
                                    "value": "IaaSAntimalware"
                                  },
                                  "typeHandlerVersion": "[if(contains(parameters('extensionAntiMalwareConfig'), 'typeHandlerVersion'), createObject('value', parameters('extensionAntiMalwareConfig').typeHandlerVersion), createObject('value', '1.3'))]",
                                  "autoUpgradeMinorVersion": "[if(contains(parameters('extensionAntiMalwareConfig'), 'autoUpgradeMinorVersion'), createObject('value', parameters('extensionAntiMalwareConfig').autoUpgradeMinorVersion), createObject('value', true()))]",
                                  "enableAutomaticUpgrade": "[if(contains(parameters('extensionAntiMalwareConfig'), 'enableAutomaticUpgrade'), createObject('value', parameters('extensionAntiMalwareConfig').enableAutomaticUpgrade), createObject('value', false()))]",
                                  "settings": {
                                    "value": "[parameters('extensionAntiMalwareConfig').settings]"
                                  },
                                  "supressFailures": {
                                    "value": "[coalesce(tryGet(parameters('extensionAntiMalwareConfig'), 'supressFailures'), false())]"
                                  },
                                  "tags": {
                                    "value": "[coalesce(tryGet(parameters('extensionAntiMalwareConfig'), 'tags'), parameters('tags'))]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "languageVersion": "2.0",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.28.1.47646",
                                      "templateHash": "15287507275706455668"
                                    },
                                    "name": "Virtual Machine Extensions",
                                    "description": "This module deploys a Virtual Machine Extension.",
                                    "owner": "Azure/module-maintainers"
                                  },
                                  "parameters": {
                                    "virtualMachineName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Conditional. The name of the parent virtual machine that extension is provisioned for. Required if the template is used in a standalone deployment."
                                      }
                                    },
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The name of the virtual machine extension."
                                      }
                                    },
                                    "location": {
                                      "type": "string",
                                      "defaultValue": "[resourceGroup().location]",
                                      "metadata": {
                                        "description": "Optional. The location the extension is deployed to."
                                      }
                                    },
                                    "publisher": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The name of the extension handler publisher."
                                      }
                                    },
                                    "type": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. Specifies the type of the extension; an example is \"CustomScriptExtension\"."
                                      }
                                    },
                                    "typeHandlerVersion": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. Specifies the version of the script handler."
                                      }
                                    },
                                    "autoUpgradeMinorVersion": {
                                      "type": "bool",
                                      "metadata": {
                                        "description": "Required. Indicates whether the extension should use a newer minor version if one is available at deployment time. Once deployed, however, the extension will not upgrade minor versions unless redeployed, even with this property set to true."
                                      }
                                    },
                                    "forceUpdateTag": {
                                      "type": "string",
                                      "defaultValue": "",
                                      "metadata": {
                                        "description": "Optional. How the extension handler should be forced to update even if the extension configuration has not changed."
                                      }
                                    },
                                    "settings": {
                                      "type": "object",
                                      "defaultValue": {},
                                      "metadata": {
                                        "description": "Optional. Any object that contains the extension specific settings."
                                      }
                                    },
                                    "protectedSettings": {
                                      "type": "secureObject",
                                      "defaultValue": {},
                                      "metadata": {
                                        "description": "Optional. Any object that contains the extension specific protected settings."
                                      }
                                    },
                                    "supressFailures": {
                                      "type": "bool",
                                      "defaultValue": false,
                                      "metadata": {
                                        "description": "Optional. Indicates whether failures stemming from the extension will be suppressed (Operational failures such as not connecting to the VM will not be suppressed regardless of this value). The default is false."
                                      }
                                    },
                                    "enableAutomaticUpgrade": {
                                      "type": "bool",
                                      "metadata": {
                                        "description": "Required. Indicates whether the extension should be automatically upgraded by the platform if there is a newer version of the extension available."
                                      }
                                    },
                                    "tags": {
                                      "type": "object",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. Tags of the resource."
                                      }
                                    }
                                  },
                                  "resources": {
                                    "virtualMachine": {
                                      "existing": true,
                                      "type": "Microsoft.Compute/virtualMachines",
                                      "apiVersion": "2022-11-01",
                                      "name": "[parameters('virtualMachineName')]"
                                    },
                                    "extension": {
                                      "type": "Microsoft.Compute/virtualMachines/extensions",
                                      "apiVersion": "2022-11-01",
                                      "name": "[format('{0}/{1}', parameters('virtualMachineName'), parameters('name'))]",
                                      "location": "[parameters('location')]",
                                      "tags": "[parameters('tags')]",
                                      "properties": {
                                        "publisher": "[parameters('publisher')]",
                                        "type": "[parameters('type')]",
                                        "typeHandlerVersion": "[parameters('typeHandlerVersion')]",
                                        "autoUpgradeMinorVersion": "[parameters('autoUpgradeMinorVersion')]",
                                        "enableAutomaticUpgrade": "[parameters('enableAutomaticUpgrade')]",
                                        "forceUpdateTag": "[if(not(empty(parameters('forceUpdateTag'))), parameters('forceUpdateTag'), null())]",
                                        "settings": "[if(not(empty(parameters('settings'))), parameters('settings'), null())]",
                                        "protectedSettings": "[if(not(empty(parameters('protectedSettings'))), parameters('protectedSettings'), null())]",
                                        "suppressFailures": "[parameters('supressFailures')]"
                                      },
                                      "dependsOn": [
                                        "virtualMachine"
                                      ]
                                    }
                                  },
                                  "outputs": {
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the extension."
                                      },
                                      "value": "[parameters('name')]"
                                    },
                                    "resourceId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource ID of the extension."
                                      },
                                      "value": "[resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('virtualMachineName'), parameters('name'))]"
                                    },
                                    "resourceGroupName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the Resource Group the extension was created in."
                                      },
                                      "value": "[resourceGroup().name]"
                                    },
                                    "location": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The location the resource was deployed into."
                                      },
                                      "value": "[reference('extension', '2022-11-01', 'full').location]"
                                    }
                                  }
                                }
                              },
                              "dependsOn": [
                                "vm",
                                "vm_domainJoinExtension"
                              ]
                            },
                            "vm_azureMonitorAgentExtension": {
                              "condition": "[parameters('extensionMonitoringAgentConfig').enabled]",
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "[format('{0}-VM-AzureMonitorAgent', uniqueString(deployment().name, parameters('location')))]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "virtualMachineName": {
                                    "value": "[parameters('name')]"
                                  },
                                  "name": {
                                    "value": "AzureMonitorAgent"
                                  },
                                  "location": {
                                    "value": "[parameters('location')]"
                                  },
                                  "publisher": {
                                    "value": "Microsoft.Azure.Monitor"
                                  },
                                  "type": "[if(equals(parameters('osType'), 'Windows'), createObject('value', 'AzureMonitorWindowsAgent'), createObject('value', 'AzureMonitorLinuxAgent'))]",
                                  "typeHandlerVersion": {
                                    "value": "[coalesce(tryGet(parameters('extensionMonitoringAgentConfig'), 'typeHandlerVersion'), if(equals(parameters('osType'), 'Windows'), '1.22', '1.29'))]"
                                  },
                                  "autoUpgradeMinorVersion": {
                                    "value": "[coalesce(tryGet(parameters('extensionMonitoringAgentConfig'), 'autoUpgradeMinorVersion'), true())]"
                                  },
                                  "enableAutomaticUpgrade": {
                                    "value": "[coalesce(tryGet(parameters('extensionMonitoringAgentConfig'), 'enableAutomaticUpgrade'), false())]"
                                  },
                                  "settings": {
                                    "value": {
                                      "workspaceId": "[if(not(empty(coalesce(tryGet(parameters('extensionMonitoringAgentConfig'), 'monitoringWorkspaceId'), ''))), reference('vm_logAnalyticsWorkspace').customerId, '')]",
                                      "GCS_AUTO_CONFIG": "[if(equals(parameters('osType'), 'Linux'), true(), null())]"
                                    }
                                  },
                                  "supressFailures": {
                                    "value": "[coalesce(tryGet(parameters('extensionMonitoringAgentConfig'), 'supressFailures'), false())]"
                                  },
                                  "tags": {
                                    "value": "[coalesce(tryGet(parameters('extensionMonitoringAgentConfig'), 'tags'), parameters('tags'))]"
                                  },
                                  "protectedSettings": {
                                    "value": {
                                      "workspaceKey": "[if(not(empty(coalesce(tryGet(parameters('extensionMonitoringAgentConfig'), 'monitoringWorkspaceId'), ''))), listKeys(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(if(not(empty(coalesce(tryGet(parameters('extensionMonitoringAgentConfig'), 'monitoringWorkspaceId'), ''))), parameters('extensionMonitoringAgentConfig').monitoringWorkspaceId, '//'), '/')[2], split(if(not(empty(coalesce(tryGet(parameters('extensionMonitoringAgentConfig'), 'monitoringWorkspaceId'), ''))), parameters('extensionMonitoringAgentConfig').monitoringWorkspaceId, '////'), '/')[4]), 'Microsoft.OperationalInsights/workspaces', last(split(if(not(empty(coalesce(tryGet(parameters('extensionMonitoringAgentConfig'), 'monitoringWorkspaceId'), ''))), parameters('extensionMonitoringAgentConfig').monitoringWorkspaceId, 'law'), '/'))), '2021-06-01').primarySharedKey, '')]"
                                    }
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "languageVersion": "2.0",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.28.1.47646",
                                      "templateHash": "15287507275706455668"
                                    },
                                    "name": "Virtual Machine Extensions",
                                    "description": "This module deploys a Virtual Machine Extension.",
                                    "owner": "Azure/module-maintainers"
                                  },
                                  "parameters": {
                                    "virtualMachineName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Conditional. The name of the parent virtual machine that extension is provisioned for. Required if the template is used in a standalone deployment."
                                      }
                                    },
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The name of the virtual machine extension."
                                      }
                                    },
                                    "location": {
                                      "type": "string",
                                      "defaultValue": "[resourceGroup().location]",
                                      "metadata": {
                                        "description": "Optional. The location the extension is deployed to."
                                      }
                                    },
                                    "publisher": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The name of the extension handler publisher."
                                      }
                                    },
                                    "type": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. Specifies the type of the extension; an example is \"CustomScriptExtension\"."
                                      }
                                    },
                                    "typeHandlerVersion": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. Specifies the version of the script handler."
                                      }
                                    },
                                    "autoUpgradeMinorVersion": {
                                      "type": "bool",
                                      "metadata": {
                                        "description": "Required. Indicates whether the extension should use a newer minor version if one is available at deployment time. Once deployed, however, the extension will not upgrade minor versions unless redeployed, even with this property set to true."
                                      }
                                    },
                                    "forceUpdateTag": {
                                      "type": "string",
                                      "defaultValue": "",
                                      "metadata": {
                                        "description": "Optional. How the extension handler should be forced to update even if the extension configuration has not changed."
                                      }
                                    },
                                    "settings": {
                                      "type": "object",
                                      "defaultValue": {},
                                      "metadata": {
                                        "description": "Optional. Any object that contains the extension specific settings."
                                      }
                                    },
                                    "protectedSettings": {
                                      "type": "secureObject",
                                      "defaultValue": {},
                                      "metadata": {
                                        "description": "Optional. Any object that contains the extension specific protected settings."
                                      }
                                    },
                                    "supressFailures": {
                                      "type": "bool",
                                      "defaultValue": false,
                                      "metadata": {
                                        "description": "Optional. Indicates whether failures stemming from the extension will be suppressed (Operational failures such as not connecting to the VM will not be suppressed regardless of this value). The default is false."
                                      }
                                    },
                                    "enableAutomaticUpgrade": {
                                      "type": "bool",
                                      "metadata": {
                                        "description": "Required. Indicates whether the extension should be automatically upgraded by the platform if there is a newer version of the extension available."
                                      }
                                    },
                                    "tags": {
                                      "type": "object",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. Tags of the resource."
                                      }
                                    }
                                  },
                                  "resources": {
                                    "virtualMachine": {
                                      "existing": true,
                                      "type": "Microsoft.Compute/virtualMachines",
                                      "apiVersion": "2022-11-01",
                                      "name": "[parameters('virtualMachineName')]"
                                    },
                                    "extension": {
                                      "type": "Microsoft.Compute/virtualMachines/extensions",
                                      "apiVersion": "2022-11-01",
                                      "name": "[format('{0}/{1}', parameters('virtualMachineName'), parameters('name'))]",
                                      "location": "[parameters('location')]",
                                      "tags": "[parameters('tags')]",
                                      "properties": {
                                        "publisher": "[parameters('publisher')]",
                                        "type": "[parameters('type')]",
                                        "typeHandlerVersion": "[parameters('typeHandlerVersion')]",
                                        "autoUpgradeMinorVersion": "[parameters('autoUpgradeMinorVersion')]",
                                        "enableAutomaticUpgrade": "[parameters('enableAutomaticUpgrade')]",
                                        "forceUpdateTag": "[if(not(empty(parameters('forceUpdateTag'))), parameters('forceUpdateTag'), null())]",
                                        "settings": "[if(not(empty(parameters('settings'))), parameters('settings'), null())]",
                                        "protectedSettings": "[if(not(empty(parameters('protectedSettings'))), parameters('protectedSettings'), null())]",
                                        "suppressFailures": "[parameters('supressFailures')]"
                                      },
                                      "dependsOn": [
                                        "virtualMachine"
                                      ]
                                    }
                                  },
                                  "outputs": {
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the extension."
                                      },
                                      "value": "[parameters('name')]"
                                    },
                                    "resourceId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource ID of the extension."
                                      },
                                      "value": "[resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('virtualMachineName'), parameters('name'))]"
                                    },
                                    "resourceGroupName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the Resource Group the extension was created in."
                                      },
                                      "value": "[resourceGroup().name]"
                                    },
                                    "location": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The location the resource was deployed into."
                                      },
                                      "value": "[reference('extension', '2022-11-01', 'full').location]"
                                    }
                                  }
                                }
                              },
                              "dependsOn": [
                                "vm",
                                "vm_logAnalyticsWorkspace",
                                "vm_microsoftAntiMalwareExtension"
                              ]
                            },
                            "vm_dependencyAgentExtension": {
                              "condition": "[parameters('extensionDependencyAgentConfig').enabled]",
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "[format('{0}-VM-DependencyAgent', uniqueString(deployment().name, parameters('location')))]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "virtualMachineName": {
                                    "value": "[parameters('name')]"
                                  },
                                  "name": {
                                    "value": "DependencyAgent"
                                  },
                                  "location": {
                                    "value": "[parameters('location')]"
                                  },
                                  "publisher": {
                                    "value": "Microsoft.Azure.Monitoring.DependencyAgent"
                                  },
                                  "type": "[if(equals(parameters('osType'), 'Windows'), createObject('value', 'DependencyAgentWindows'), createObject('value', 'DependencyAgentLinux'))]",
                                  "typeHandlerVersion": "[if(contains(parameters('extensionDependencyAgentConfig'), 'typeHandlerVersion'), createObject('value', parameters('extensionDependencyAgentConfig').typeHandlerVersion), createObject('value', '9.10'))]",
                                  "autoUpgradeMinorVersion": "[if(contains(parameters('extensionDependencyAgentConfig'), 'autoUpgradeMinorVersion'), createObject('value', parameters('extensionDependencyAgentConfig').autoUpgradeMinorVersion), createObject('value', true()))]",
                                  "enableAutomaticUpgrade": "[if(contains(parameters('extensionDependencyAgentConfig'), 'enableAutomaticUpgrade'), createObject('value', parameters('extensionDependencyAgentConfig').enableAutomaticUpgrade), createObject('value', true()))]",
                                  "settings": {
                                    "value": {
                                      "enableAMA": "[if(contains(parameters('extensionDependencyAgentConfig'), 'enableAMA'), parameters('extensionDependencyAgentConfig').enableAMA, true())]"
                                    }
                                  },
                                  "supressFailures": {
                                    "value": "[coalesce(tryGet(parameters('extensionDependencyAgentConfig'), 'supressFailures'), false())]"
                                  },
                                  "tags": {
                                    "value": "[coalesce(tryGet(parameters('extensionDependencyAgentConfig'), 'tags'), parameters('tags'))]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "languageVersion": "2.0",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.28.1.47646",
                                      "templateHash": "15287507275706455668"
                                    },
                                    "name": "Virtual Machine Extensions",
                                    "description": "This module deploys a Virtual Machine Extension.",
                                    "owner": "Azure/module-maintainers"
                                  },
                                  "parameters": {
                                    "virtualMachineName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Conditional. The name of the parent virtual machine that extension is provisioned for. Required if the template is used in a standalone deployment."
                                      }
                                    },
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The name of the virtual machine extension."
                                      }
                                    },
                                    "location": {
                                      "type": "string",
                                      "defaultValue": "[resourceGroup().location]",
                                      "metadata": {
                                        "description": "Optional. The location the extension is deployed to."
                                      }
                                    },
                                    "publisher": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The name of the extension handler publisher."
                                      }
                                    },
                                    "type": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. Specifies the type of the extension; an example is \"CustomScriptExtension\"."
                                      }
                                    },
                                    "typeHandlerVersion": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. Specifies the version of the script handler."
                                      }
                                    },
                                    "autoUpgradeMinorVersion": {
                                      "type": "bool",
                                      "metadata": {
                                        "description": "Required. Indicates whether the extension should use a newer minor version if one is available at deployment time. Once deployed, however, the extension will not upgrade minor versions unless redeployed, even with this property set to true."
                                      }
                                    },
                                    "forceUpdateTag": {
                                      "type": "string",
                                      "defaultValue": "",
                                      "metadata": {
                                        "description": "Optional. How the extension handler should be forced to update even if the extension configuration has not changed."
                                      }
                                    },
                                    "settings": {
                                      "type": "object",
                                      "defaultValue": {},
                                      "metadata": {
                                        "description": "Optional. Any object that contains the extension specific settings."
                                      }
                                    },
                                    "protectedSettings": {
                                      "type": "secureObject",
                                      "defaultValue": {},
                                      "metadata": {
                                        "description": "Optional. Any object that contains the extension specific protected settings."
                                      }
                                    },
                                    "supressFailures": {
                                      "type": "bool",
                                      "defaultValue": false,
                                      "metadata": {
                                        "description": "Optional. Indicates whether failures stemming from the extension will be suppressed (Operational failures such as not connecting to the VM will not be suppressed regardless of this value). The default is false."
                                      }
                                    },
                                    "enableAutomaticUpgrade": {
                                      "type": "bool",
                                      "metadata": {
                                        "description": "Required. Indicates whether the extension should be automatically upgraded by the platform if there is a newer version of the extension available."
                                      }
                                    },
                                    "tags": {
                                      "type": "object",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. Tags of the resource."
                                      }
                                    }
                                  },
                                  "resources": {
                                    "virtualMachine": {
                                      "existing": true,
                                      "type": "Microsoft.Compute/virtualMachines",
                                      "apiVersion": "2022-11-01",
                                      "name": "[parameters('virtualMachineName')]"
                                    },
                                    "extension": {
                                      "type": "Microsoft.Compute/virtualMachines/extensions",
                                      "apiVersion": "2022-11-01",
                                      "name": "[format('{0}/{1}', parameters('virtualMachineName'), parameters('name'))]",
                                      "location": "[parameters('location')]",
                                      "tags": "[parameters('tags')]",
                                      "properties": {
                                        "publisher": "[parameters('publisher')]",
                                        "type": "[parameters('type')]",
                                        "typeHandlerVersion": "[parameters('typeHandlerVersion')]",
                                        "autoUpgradeMinorVersion": "[parameters('autoUpgradeMinorVersion')]",
                                        "enableAutomaticUpgrade": "[parameters('enableAutomaticUpgrade')]",
                                        "forceUpdateTag": "[if(not(empty(parameters('forceUpdateTag'))), parameters('forceUpdateTag'), null())]",
                                        "settings": "[if(not(empty(parameters('settings'))), parameters('settings'), null())]",
                                        "protectedSettings": "[if(not(empty(parameters('protectedSettings'))), parameters('protectedSettings'), null())]",
                                        "suppressFailures": "[parameters('supressFailures')]"
                                      },
                                      "dependsOn": [
                                        "virtualMachine"
                                      ]
                                    }
                                  },
                                  "outputs": {
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the extension."
                                      },
                                      "value": "[parameters('name')]"
                                    },
                                    "resourceId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource ID of the extension."
                                      },
                                      "value": "[resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('virtualMachineName'), parameters('name'))]"
                                    },
                                    "resourceGroupName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the Resource Group the extension was created in."
                                      },
                                      "value": "[resourceGroup().name]"
                                    },
                                    "location": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The location the resource was deployed into."
                                      },
                                      "value": "[reference('extension', '2022-11-01', 'full').location]"
                                    }
                                  }
                                }
                              },
                              "dependsOn": [
                                "vm",
                                "vm_azureMonitorAgentExtension"
                              ]
                            },
                            "vm_networkWatcherAgentExtension": {
                              "condition": "[parameters('extensionNetworkWatcherAgentConfig').enabled]",
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "[format('{0}-VM-NetworkWatcherAgent', uniqueString(deployment().name, parameters('location')))]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "virtualMachineName": {
                                    "value": "[parameters('name')]"
                                  },
                                  "name": {
                                    "value": "NetworkWatcherAgent"
                                  },
                                  "location": {
                                    "value": "[parameters('location')]"
                                  },
                                  "publisher": {
                                    "value": "Microsoft.Azure.NetworkWatcher"
                                  },
                                  "type": "[if(equals(parameters('osType'), 'Windows'), createObject('value', 'NetworkWatcherAgentWindows'), createObject('value', 'NetworkWatcherAgentLinux'))]",
                                  "typeHandlerVersion": "[if(contains(parameters('extensionNetworkWatcherAgentConfig'), 'typeHandlerVersion'), createObject('value', parameters('extensionNetworkWatcherAgentConfig').typeHandlerVersion), createObject('value', '1.4'))]",
                                  "autoUpgradeMinorVersion": "[if(contains(parameters('extensionNetworkWatcherAgentConfig'), 'autoUpgradeMinorVersion'), createObject('value', parameters('extensionNetworkWatcherAgentConfig').autoUpgradeMinorVersion), createObject('value', true()))]",
                                  "enableAutomaticUpgrade": "[if(contains(parameters('extensionNetworkWatcherAgentConfig'), 'enableAutomaticUpgrade'), createObject('value', parameters('extensionNetworkWatcherAgentConfig').enableAutomaticUpgrade), createObject('value', false()))]",
                                  "supressFailures": {
                                    "value": "[coalesce(tryGet(parameters('extensionNetworkWatcherAgentConfig'), 'supressFailures'), false())]"
                                  },
                                  "tags": {
                                    "value": "[coalesce(tryGet(parameters('extensionNetworkWatcherAgentConfig'), 'tags'), parameters('tags'))]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "languageVersion": "2.0",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.28.1.47646",
                                      "templateHash": "15287507275706455668"
                                    },
                                    "name": "Virtual Machine Extensions",
                                    "description": "This module deploys a Virtual Machine Extension.",
                                    "owner": "Azure/module-maintainers"
                                  },
                                  "parameters": {
                                    "virtualMachineName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Conditional. The name of the parent virtual machine that extension is provisioned for. Required if the template is used in a standalone deployment."
                                      }
                                    },
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The name of the virtual machine extension."
                                      }
                                    },
                                    "location": {
                                      "type": "string",
                                      "defaultValue": "[resourceGroup().location]",
                                      "metadata": {
                                        "description": "Optional. The location the extension is deployed to."
                                      }
                                    },
                                    "publisher": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The name of the extension handler publisher."
                                      }
                                    },
                                    "type": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. Specifies the type of the extension; an example is \"CustomScriptExtension\"."
                                      }
                                    },
                                    "typeHandlerVersion": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. Specifies the version of the script handler."
                                      }
                                    },
                                    "autoUpgradeMinorVersion": {
                                      "type": "bool",
                                      "metadata": {
                                        "description": "Required. Indicates whether the extension should use a newer minor version if one is available at deployment time. Once deployed, however, the extension will not upgrade minor versions unless redeployed, even with this property set to true."
                                      }
                                    },
                                    "forceUpdateTag": {
                                      "type": "string",
                                      "defaultValue": "",
                                      "metadata": {
                                        "description": "Optional. How the extension handler should be forced to update even if the extension configuration has not changed."
                                      }
                                    },
                                    "settings": {
                                      "type": "object",
                                      "defaultValue": {},
                                      "metadata": {
                                        "description": "Optional. Any object that contains the extension specific settings."
                                      }
                                    },
                                    "protectedSettings": {
                                      "type": "secureObject",
                                      "defaultValue": {},
                                      "metadata": {
                                        "description": "Optional. Any object that contains the extension specific protected settings."
                                      }
                                    },
                                    "supressFailures": {
                                      "type": "bool",
                                      "defaultValue": false,
                                      "metadata": {
                                        "description": "Optional. Indicates whether failures stemming from the extension will be suppressed (Operational failures such as not connecting to the VM will not be suppressed regardless of this value). The default is false."
                                      }
                                    },
                                    "enableAutomaticUpgrade": {
                                      "type": "bool",
                                      "metadata": {
                                        "description": "Required. Indicates whether the extension should be automatically upgraded by the platform if there is a newer version of the extension available."
                                      }
                                    },
                                    "tags": {
                                      "type": "object",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. Tags of the resource."
                                      }
                                    }
                                  },
                                  "resources": {
                                    "virtualMachine": {
                                      "existing": true,
                                      "type": "Microsoft.Compute/virtualMachines",
                                      "apiVersion": "2022-11-01",
                                      "name": "[parameters('virtualMachineName')]"
                                    },
                                    "extension": {
                                      "type": "Microsoft.Compute/virtualMachines/extensions",
                                      "apiVersion": "2022-11-01",
                                      "name": "[format('{0}/{1}', parameters('virtualMachineName'), parameters('name'))]",
                                      "location": "[parameters('location')]",
                                      "tags": "[parameters('tags')]",
                                      "properties": {
                                        "publisher": "[parameters('publisher')]",
                                        "type": "[parameters('type')]",
                                        "typeHandlerVersion": "[parameters('typeHandlerVersion')]",
                                        "autoUpgradeMinorVersion": "[parameters('autoUpgradeMinorVersion')]",
                                        "enableAutomaticUpgrade": "[parameters('enableAutomaticUpgrade')]",
                                        "forceUpdateTag": "[if(not(empty(parameters('forceUpdateTag'))), parameters('forceUpdateTag'), null())]",
                                        "settings": "[if(not(empty(parameters('settings'))), parameters('settings'), null())]",
                                        "protectedSettings": "[if(not(empty(parameters('protectedSettings'))), parameters('protectedSettings'), null())]",
                                        "suppressFailures": "[parameters('supressFailures')]"
                                      },
                                      "dependsOn": [
                                        "virtualMachine"
                                      ]
                                    }
                                  },
                                  "outputs": {
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the extension."
                                      },
                                      "value": "[parameters('name')]"
                                    },
                                    "resourceId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource ID of the extension."
                                      },
                                      "value": "[resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('virtualMachineName'), parameters('name'))]"
                                    },
                                    "resourceGroupName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the Resource Group the extension was created in."
                                      },
                                      "value": "[resourceGroup().name]"
                                    },
                                    "location": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The location the resource was deployed into."
                                      },
                                      "value": "[reference('extension', '2022-11-01', 'full').location]"
                                    }
                                  }
                                }
                              },
                              "dependsOn": [
                                "vm",
                                "vm_dependencyAgentExtension"
                              ]
                            },
                            "vm_desiredStateConfigurationExtension": {
                              "condition": "[parameters('extensionDSCConfig').enabled]",
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "[format('{0}-VM-DesiredStateConfiguration', uniqueString(deployment().name, parameters('location')))]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "virtualMachineName": {
                                    "value": "[parameters('name')]"
                                  },
                                  "name": {
                                    "value": "DesiredStateConfiguration"
                                  },
                                  "location": {
                                    "value": "[parameters('location')]"
                                  },
                                  "publisher": {
                                    "value": "Microsoft.Powershell"
                                  },
                                  "type": {
                                    "value": "DSC"
                                  },
                                  "typeHandlerVersion": "[if(contains(parameters('extensionDSCConfig'), 'typeHandlerVersion'), createObject('value', parameters('extensionDSCConfig').typeHandlerVersion), createObject('value', '2.77'))]",
                                  "autoUpgradeMinorVersion": "[if(contains(parameters('extensionDSCConfig'), 'autoUpgradeMinorVersion'), createObject('value', parameters('extensionDSCConfig').autoUpgradeMinorVersion), createObject('value', true()))]",
                                  "enableAutomaticUpgrade": "[if(contains(parameters('extensionDSCConfig'), 'enableAutomaticUpgrade'), createObject('value', parameters('extensionDSCConfig').enableAutomaticUpgrade), createObject('value', false()))]",
                                  "settings": "[if(contains(parameters('extensionDSCConfig'), 'settings'), createObject('value', parameters('extensionDSCConfig').settings), createObject('value', createObject()))]",
                                  "supressFailures": {
                                    "value": "[coalesce(tryGet(parameters('extensionDSCConfig'), 'supressFailures'), false())]"
                                  },
                                  "tags": {
                                    "value": "[coalesce(tryGet(parameters('extensionDSCConfig'), 'tags'), parameters('tags'))]"
                                  },
                                  "protectedSettings": "[if(contains(parameters('extensionDSCConfig'), 'protectedSettings'), createObject('value', parameters('extensionDSCConfig').protectedSettings), createObject('value', createObject()))]"
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "languageVersion": "2.0",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.28.1.47646",
                                      "templateHash": "15287507275706455668"
                                    },
                                    "name": "Virtual Machine Extensions",
                                    "description": "This module deploys a Virtual Machine Extension.",
                                    "owner": "Azure/module-maintainers"
                                  },
                                  "parameters": {
                                    "virtualMachineName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Conditional. The name of the parent virtual machine that extension is provisioned for. Required if the template is used in a standalone deployment."
                                      }
                                    },
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The name of the virtual machine extension."
                                      }
                                    },
                                    "location": {
                                      "type": "string",
                                      "defaultValue": "[resourceGroup().location]",
                                      "metadata": {
                                        "description": "Optional. The location the extension is deployed to."
                                      }
                                    },
                                    "publisher": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The name of the extension handler publisher."
                                      }
                                    },
                                    "type": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. Specifies the type of the extension; an example is \"CustomScriptExtension\"."
                                      }
                                    },
                                    "typeHandlerVersion": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. Specifies the version of the script handler."
                                      }
                                    },
                                    "autoUpgradeMinorVersion": {
                                      "type": "bool",
                                      "metadata": {
                                        "description": "Required. Indicates whether the extension should use a newer minor version if one is available at deployment time. Once deployed, however, the extension will not upgrade minor versions unless redeployed, even with this property set to true."
                                      }
                                    },
                                    "forceUpdateTag": {
                                      "type": "string",
                                      "defaultValue": "",
                                      "metadata": {
                                        "description": "Optional. How the extension handler should be forced to update even if the extension configuration has not changed."
                                      }
                                    },
                                    "settings": {
                                      "type": "object",
                                      "defaultValue": {},
                                      "metadata": {
                                        "description": "Optional. Any object that contains the extension specific settings."
                                      }
                                    },
                                    "protectedSettings": {
                                      "type": "secureObject",
                                      "defaultValue": {},
                                      "metadata": {
                                        "description": "Optional. Any object that contains the extension specific protected settings."
                                      }
                                    },
                                    "supressFailures": {
                                      "type": "bool",
                                      "defaultValue": false,
                                      "metadata": {
                                        "description": "Optional. Indicates whether failures stemming from the extension will be suppressed (Operational failures such as not connecting to the VM will not be suppressed regardless of this value). The default is false."
                                      }
                                    },
                                    "enableAutomaticUpgrade": {
                                      "type": "bool",
                                      "metadata": {
                                        "description": "Required. Indicates whether the extension should be automatically upgraded by the platform if there is a newer version of the extension available."
                                      }
                                    },
                                    "tags": {
                                      "type": "object",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. Tags of the resource."
                                      }
                                    }
                                  },
                                  "resources": {
                                    "virtualMachine": {
                                      "existing": true,
                                      "type": "Microsoft.Compute/virtualMachines",
                                      "apiVersion": "2022-11-01",
                                      "name": "[parameters('virtualMachineName')]"
                                    },
                                    "extension": {
                                      "type": "Microsoft.Compute/virtualMachines/extensions",
                                      "apiVersion": "2022-11-01",
                                      "name": "[format('{0}/{1}', parameters('virtualMachineName'), parameters('name'))]",
                                      "location": "[parameters('location')]",
                                      "tags": "[parameters('tags')]",
                                      "properties": {
                                        "publisher": "[parameters('publisher')]",
                                        "type": "[parameters('type')]",
                                        "typeHandlerVersion": "[parameters('typeHandlerVersion')]",
                                        "autoUpgradeMinorVersion": "[parameters('autoUpgradeMinorVersion')]",
                                        "enableAutomaticUpgrade": "[parameters('enableAutomaticUpgrade')]",
                                        "forceUpdateTag": "[if(not(empty(parameters('forceUpdateTag'))), parameters('forceUpdateTag'), null())]",
                                        "settings": "[if(not(empty(parameters('settings'))), parameters('settings'), null())]",
                                        "protectedSettings": "[if(not(empty(parameters('protectedSettings'))), parameters('protectedSettings'), null())]",
                                        "suppressFailures": "[parameters('supressFailures')]"
                                      },
                                      "dependsOn": [
                                        "virtualMachine"
                                      ]
                                    }
                                  },
                                  "outputs": {
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the extension."
                                      },
                                      "value": "[parameters('name')]"
                                    },
                                    "resourceId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource ID of the extension."
                                      },
                                      "value": "[resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('virtualMachineName'), parameters('name'))]"
                                    },
                                    "resourceGroupName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the Resource Group the extension was created in."
                                      },
                                      "value": "[resourceGroup().name]"
                                    },
                                    "location": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The location the resource was deployed into."
                                      },
                                      "value": "[reference('extension', '2022-11-01', 'full').location]"
                                    }
                                  }
                                }
                              },
                              "dependsOn": [
                                "vm",
                                "vm_networkWatcherAgentExtension"
                              ]
                            },
                            "vm_customScriptExtension": {
                              "condition": "[parameters('extensionCustomScriptConfig').enabled]",
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "[format('{0}-VM-CustomScriptExtension', uniqueString(deployment().name, parameters('location')))]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "virtualMachineName": {
                                    "value": "[parameters('name')]"
                                  },
                                  "name": {
                                    "value": "CustomScriptExtension"
                                  },
                                  "location": {
                                    "value": "[parameters('location')]"
                                  },
                                  "publisher": "[if(equals(parameters('osType'), 'Windows'), createObject('value', 'Microsoft.Compute'), createObject('value', 'Microsoft.Azure.Extensions'))]",
                                  "type": "[if(equals(parameters('osType'), 'Windows'), createObject('value', 'CustomScriptExtension'), createObject('value', 'CustomScript'))]",
                                  "typeHandlerVersion": "[if(contains(parameters('extensionCustomScriptConfig'), 'typeHandlerVersion'), createObject('value', parameters('extensionCustomScriptConfig').typeHandlerVersion), if(equals(parameters('osType'), 'Windows'), createObject('value', '1.10'), createObject('value', '2.1')))]",
                                  "autoUpgradeMinorVersion": "[if(contains(parameters('extensionCustomScriptConfig'), 'autoUpgradeMinorVersion'), createObject('value', parameters('extensionCustomScriptConfig').autoUpgradeMinorVersion), createObject('value', true()))]",
                                  "enableAutomaticUpgrade": "[if(contains(parameters('extensionCustomScriptConfig'), 'enableAutomaticUpgrade'), createObject('value', parameters('extensionCustomScriptConfig').enableAutomaticUpgrade), createObject('value', false()))]",
                                  "settings": {
                                    "value": {
                                      "copy": [
                                        {
                                          "name": "fileUris",
                                          "count": "[length(parameters('extensionCustomScriptConfig').fileData)]",
                                          "input": "[if(contains(parameters('extensionCustomScriptConfig').fileData[copyIndex('fileUris')], 'storageAccountId'), format('{0}?{1}', parameters('extensionCustomScriptConfig').fileData[copyIndex('fileUris')].uri, listAccountSas(parameters('extensionCustomScriptConfig').fileData[copyIndex('fileUris')].storageAccountId, '2019-04-01', variables('accountSasProperties')).accountSasToken), parameters('extensionCustomScriptConfig').fileData[copyIndex('fileUris')].uri)]"
                                        }
                                      ]
                                    }
                                  },
                                  "supressFailures": {
                                    "value": "[coalesce(tryGet(parameters('extensionCustomScriptConfig'), 'supressFailures'), false())]"
                                  },
                                  "tags": {
                                    "value": "[coalesce(tryGet(parameters('extensionCustomScriptConfig'), 'tags'), parameters('tags'))]"
                                  },
                                  "protectedSettings": {
                                    "value": "[parameters('extensionCustomScriptProtectedSetting')]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "languageVersion": "2.0",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.28.1.47646",
                                      "templateHash": "15287507275706455668"
                                    },
                                    "name": "Virtual Machine Extensions",
                                    "description": "This module deploys a Virtual Machine Extension.",
                                    "owner": "Azure/module-maintainers"
                                  },
                                  "parameters": {
                                    "virtualMachineName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Conditional. The name of the parent virtual machine that extension is provisioned for. Required if the template is used in a standalone deployment."
                                      }
                                    },
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The name of the virtual machine extension."
                                      }
                                    },
                                    "location": {
                                      "type": "string",
                                      "defaultValue": "[resourceGroup().location]",
                                      "metadata": {
                                        "description": "Optional. The location the extension is deployed to."
                                      }
                                    },
                                    "publisher": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The name of the extension handler publisher."
                                      }
                                    },
                                    "type": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. Specifies the type of the extension; an example is \"CustomScriptExtension\"."
                                      }
                                    },
                                    "typeHandlerVersion": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. Specifies the version of the script handler."
                                      }
                                    },
                                    "autoUpgradeMinorVersion": {
                                      "type": "bool",
                                      "metadata": {
                                        "description": "Required. Indicates whether the extension should use a newer minor version if one is available at deployment time. Once deployed, however, the extension will not upgrade minor versions unless redeployed, even with this property set to true."
                                      }
                                    },
                                    "forceUpdateTag": {
                                      "type": "string",
                                      "defaultValue": "",
                                      "metadata": {
                                        "description": "Optional. How the extension handler should be forced to update even if the extension configuration has not changed."
                                      }
                                    },
                                    "settings": {
                                      "type": "object",
                                      "defaultValue": {},
                                      "metadata": {
                                        "description": "Optional. Any object that contains the extension specific settings."
                                      }
                                    },
                                    "protectedSettings": {
                                      "type": "secureObject",
                                      "defaultValue": {},
                                      "metadata": {
                                        "description": "Optional. Any object that contains the extension specific protected settings."
                                      }
                                    },
                                    "supressFailures": {
                                      "type": "bool",
                                      "defaultValue": false,
                                      "metadata": {
                                        "description": "Optional. Indicates whether failures stemming from the extension will be suppressed (Operational failures such as not connecting to the VM will not be suppressed regardless of this value). The default is false."
                                      }
                                    },
                                    "enableAutomaticUpgrade": {
                                      "type": "bool",
                                      "metadata": {
                                        "description": "Required. Indicates whether the extension should be automatically upgraded by the platform if there is a newer version of the extension available."
                                      }
                                    },
                                    "tags": {
                                      "type": "object",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. Tags of the resource."
                                      }
                                    }
                                  },
                                  "resources": {
                                    "virtualMachine": {
                                      "existing": true,
                                      "type": "Microsoft.Compute/virtualMachines",
                                      "apiVersion": "2022-11-01",
                                      "name": "[parameters('virtualMachineName')]"
                                    },
                                    "extension": {
                                      "type": "Microsoft.Compute/virtualMachines/extensions",
                                      "apiVersion": "2022-11-01",
                                      "name": "[format('{0}/{1}', parameters('virtualMachineName'), parameters('name'))]",
                                      "location": "[parameters('location')]",
                                      "tags": "[parameters('tags')]",
                                      "properties": {
                                        "publisher": "[parameters('publisher')]",
                                        "type": "[parameters('type')]",
                                        "typeHandlerVersion": "[parameters('typeHandlerVersion')]",
                                        "autoUpgradeMinorVersion": "[parameters('autoUpgradeMinorVersion')]",
                                        "enableAutomaticUpgrade": "[parameters('enableAutomaticUpgrade')]",
                                        "forceUpdateTag": "[if(not(empty(parameters('forceUpdateTag'))), parameters('forceUpdateTag'), null())]",
                                        "settings": "[if(not(empty(parameters('settings'))), parameters('settings'), null())]",
                                        "protectedSettings": "[if(not(empty(parameters('protectedSettings'))), parameters('protectedSettings'), null())]",
                                        "suppressFailures": "[parameters('supressFailures')]"
                                      },
                                      "dependsOn": [
                                        "virtualMachine"
                                      ]
                                    }
                                  },
                                  "outputs": {
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the extension."
                                      },
                                      "value": "[parameters('name')]"
                                    },
                                    "resourceId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource ID of the extension."
                                      },
                                      "value": "[resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('virtualMachineName'), parameters('name'))]"
                                    },
                                    "resourceGroupName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the Resource Group the extension was created in."
                                      },
                                      "value": "[resourceGroup().name]"
                                    },
                                    "location": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The location the resource was deployed into."
                                      },
                                      "value": "[reference('extension', '2022-11-01', 'full').location]"
                                    }
                                  }
                                }
                              },
                              "dependsOn": [
                                "vm",
                                "vm_desiredStateConfigurationExtension"
                              ]
                            },
                            "vm_azureDiskEncryptionExtension": {
                              "condition": "[parameters('extensionAzureDiskEncryptionConfig').enabled]",
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "[format('{0}-VM-AzureDiskEncryption', uniqueString(deployment().name, parameters('location')))]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "virtualMachineName": {
                                    "value": "[parameters('name')]"
                                  },
                                  "name": {
                                    "value": "AzureDiskEncryption"
                                  },
                                  "location": {
                                    "value": "[parameters('location')]"
                                  },
                                  "publisher": {
                                    "value": "Microsoft.Azure.Security"
                                  },
                                  "type": "[if(equals(parameters('osType'), 'Windows'), createObject('value', 'AzureDiskEncryption'), createObject('value', 'AzureDiskEncryptionForLinux'))]",
                                  "typeHandlerVersion": "[if(contains(parameters('extensionAzureDiskEncryptionConfig'), 'typeHandlerVersion'), createObject('value', parameters('extensionAzureDiskEncryptionConfig').typeHandlerVersion), if(equals(parameters('osType'), 'Windows'), createObject('value', '2.2'), createObject('value', '1.1')))]",
                                  "autoUpgradeMinorVersion": "[if(contains(parameters('extensionAzureDiskEncryptionConfig'), 'autoUpgradeMinorVersion'), createObject('value', parameters('extensionAzureDiskEncryptionConfig').autoUpgradeMinorVersion), createObject('value', true()))]",
                                  "enableAutomaticUpgrade": "[if(contains(parameters('extensionAzureDiskEncryptionConfig'), 'enableAutomaticUpgrade'), createObject('value', parameters('extensionAzureDiskEncryptionConfig').enableAutomaticUpgrade), createObject('value', false()))]",
                                  "forceUpdateTag": "[if(contains(parameters('extensionAzureDiskEncryptionConfig'), 'forceUpdateTag'), createObject('value', parameters('extensionAzureDiskEncryptionConfig').forceUpdateTag), createObject('value', '1.0'))]",
                                  "settings": {
                                    "value": "[coalesce(tryGet(parameters('extensionAzureDiskEncryptionConfig'), 'settings'), createObject())]"
                                  },
                                  "supressFailures": {
                                    "value": "[coalesce(tryGet(parameters('extensionAzureDiskEncryptionConfig'), 'supressFailures'), false())]"
                                  },
                                  "tags": {
                                    "value": "[coalesce(tryGet(parameters('extensionAzureDiskEncryptionConfig'), 'tags'), parameters('tags'))]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "languageVersion": "2.0",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.28.1.47646",
                                      "templateHash": "15287507275706455668"
                                    },
                                    "name": "Virtual Machine Extensions",
                                    "description": "This module deploys a Virtual Machine Extension.",
                                    "owner": "Azure/module-maintainers"
                                  },
                                  "parameters": {
                                    "virtualMachineName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Conditional. The name of the parent virtual machine that extension is provisioned for. Required if the template is used in a standalone deployment."
                                      }
                                    },
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The name of the virtual machine extension."
                                      }
                                    },
                                    "location": {
                                      "type": "string",
                                      "defaultValue": "[resourceGroup().location]",
                                      "metadata": {
                                        "description": "Optional. The location the extension is deployed to."
                                      }
                                    },
                                    "publisher": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The name of the extension handler publisher."
                                      }
                                    },
                                    "type": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. Specifies the type of the extension; an example is \"CustomScriptExtension\"."
                                      }
                                    },
                                    "typeHandlerVersion": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. Specifies the version of the script handler."
                                      }
                                    },
                                    "autoUpgradeMinorVersion": {
                                      "type": "bool",
                                      "metadata": {
                                        "description": "Required. Indicates whether the extension should use a newer minor version if one is available at deployment time. Once deployed, however, the extension will not upgrade minor versions unless redeployed, even with this property set to true."
                                      }
                                    },
                                    "forceUpdateTag": {
                                      "type": "string",
                                      "defaultValue": "",
                                      "metadata": {
                                        "description": "Optional. How the extension handler should be forced to update even if the extension configuration has not changed."
                                      }
                                    },
                                    "settings": {
                                      "type": "object",
                                      "defaultValue": {},
                                      "metadata": {
                                        "description": "Optional. Any object that contains the extension specific settings."
                                      }
                                    },
                                    "protectedSettings": {
                                      "type": "secureObject",
                                      "defaultValue": {},
                                      "metadata": {
                                        "description": "Optional. Any object that contains the extension specific protected settings."
                                      }
                                    },
                                    "supressFailures": {
                                      "type": "bool",
                                      "defaultValue": false,
                                      "metadata": {
                                        "description": "Optional. Indicates whether failures stemming from the extension will be suppressed (Operational failures such as not connecting to the VM will not be suppressed regardless of this value). The default is false."
                                      }
                                    },
                                    "enableAutomaticUpgrade": {
                                      "type": "bool",
                                      "metadata": {
                                        "description": "Required. Indicates whether the extension should be automatically upgraded by the platform if there is a newer version of the extension available."
                                      }
                                    },
                                    "tags": {
                                      "type": "object",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. Tags of the resource."
                                      }
                                    }
                                  },
                                  "resources": {
                                    "virtualMachine": {
                                      "existing": true,
                                      "type": "Microsoft.Compute/virtualMachines",
                                      "apiVersion": "2022-11-01",
                                      "name": "[parameters('virtualMachineName')]"
                                    },
                                    "extension": {
                                      "type": "Microsoft.Compute/virtualMachines/extensions",
                                      "apiVersion": "2022-11-01",
                                      "name": "[format('{0}/{1}', parameters('virtualMachineName'), parameters('name'))]",
                                      "location": "[parameters('location')]",
                                      "tags": "[parameters('tags')]",
                                      "properties": {
                                        "publisher": "[parameters('publisher')]",
                                        "type": "[parameters('type')]",
                                        "typeHandlerVersion": "[parameters('typeHandlerVersion')]",
                                        "autoUpgradeMinorVersion": "[parameters('autoUpgradeMinorVersion')]",
                                        "enableAutomaticUpgrade": "[parameters('enableAutomaticUpgrade')]",
                                        "forceUpdateTag": "[if(not(empty(parameters('forceUpdateTag'))), parameters('forceUpdateTag'), null())]",
                                        "settings": "[if(not(empty(parameters('settings'))), parameters('settings'), null())]",
                                        "protectedSettings": "[if(not(empty(parameters('protectedSettings'))), parameters('protectedSettings'), null())]",
                                        "suppressFailures": "[parameters('supressFailures')]"
                                      },
                                      "dependsOn": [
                                        "virtualMachine"
                                      ]
                                    }
                                  },
                                  "outputs": {
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the extension."
                                      },
                                      "value": "[parameters('name')]"
                                    },
                                    "resourceId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource ID of the extension."
                                      },
                                      "value": "[resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('virtualMachineName'), parameters('name'))]"
                                    },
                                    "resourceGroupName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the Resource Group the extension was created in."
                                      },
                                      "value": "[resourceGroup().name]"
                                    },
                                    "location": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The location the resource was deployed into."
                                      },
                                      "value": "[reference('extension', '2022-11-01', 'full').location]"
                                    }
                                  }
                                }
                              },
                              "dependsOn": [
                                "vm",
                                "vm_customScriptExtension"
                              ]
                            },
                            "vm_nvidiaGpuDriverWindowsExtension": {
                              "condition": "[parameters('extensionNvidiaGpuDriverWindows').enabled]",
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "[format('{0}-VM-NvidiaGpuDriverWindows', uniqueString(deployment().name, parameters('location')))]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "virtualMachineName": {
                                    "value": "[parameters('name')]"
                                  },
                                  "name": {
                                    "value": "NvidiaGpuDriverWindows"
                                  },
                                  "location": {
                                    "value": "[parameters('location')]"
                                  },
                                  "publisher": {
                                    "value": "Microsoft.HpcCompute"
                                  },
                                  "type": {
                                    "value": "NvidiaGpuDriverWindows"
                                  },
                                  "typeHandlerVersion": "[if(contains(parameters('extensionNvidiaGpuDriverWindows'), 'typeHandlerVersion'), createObject('value', parameters('extensionNvidiaGpuDriverWindows').typeHandlerVersion), createObject('value', '1.4'))]",
                                  "autoUpgradeMinorVersion": "[if(contains(parameters('extensionNvidiaGpuDriverWindows'), 'autoUpgradeMinorVersion'), createObject('value', parameters('extensionNvidiaGpuDriverWindows').autoUpgradeMinorVersion), createObject('value', true()))]",
                                  "enableAutomaticUpgrade": "[if(contains(parameters('extensionNvidiaGpuDriverWindows'), 'enableAutomaticUpgrade'), createObject('value', parameters('extensionNvidiaGpuDriverWindows').enableAutomaticUpgrade), createObject('value', false()))]",
                                  "supressFailures": {
                                    "value": "[coalesce(tryGet(parameters('extensionNvidiaGpuDriverWindows'), 'supressFailures'), false())]"
                                  },
                                  "tags": {
                                    "value": "[coalesce(tryGet(parameters('extensionNvidiaGpuDriverWindows'), 'tags'), parameters('tags'))]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "languageVersion": "2.0",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.28.1.47646",
                                      "templateHash": "15287507275706455668"
                                    },
                                    "name": "Virtual Machine Extensions",
                                    "description": "This module deploys a Virtual Machine Extension.",
                                    "owner": "Azure/module-maintainers"
                                  },
                                  "parameters": {
                                    "virtualMachineName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Conditional. The name of the parent virtual machine that extension is provisioned for. Required if the template is used in a standalone deployment."
                                      }
                                    },
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The name of the virtual machine extension."
                                      }
                                    },
                                    "location": {
                                      "type": "string",
                                      "defaultValue": "[resourceGroup().location]",
                                      "metadata": {
                                        "description": "Optional. The location the extension is deployed to."
                                      }
                                    },
                                    "publisher": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The name of the extension handler publisher."
                                      }
                                    },
                                    "type": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. Specifies the type of the extension; an example is \"CustomScriptExtension\"."
                                      }
                                    },
                                    "typeHandlerVersion": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. Specifies the version of the script handler."
                                      }
                                    },
                                    "autoUpgradeMinorVersion": {
                                      "type": "bool",
                                      "metadata": {
                                        "description": "Required. Indicates whether the extension should use a newer minor version if one is available at deployment time. Once deployed, however, the extension will not upgrade minor versions unless redeployed, even with this property set to true."
                                      }
                                    },
                                    "forceUpdateTag": {
                                      "type": "string",
                                      "defaultValue": "",
                                      "metadata": {
                                        "description": "Optional. How the extension handler should be forced to update even if the extension configuration has not changed."
                                      }
                                    },
                                    "settings": {
                                      "type": "object",
                                      "defaultValue": {},
                                      "metadata": {
                                        "description": "Optional. Any object that contains the extension specific settings."
                                      }
                                    },
                                    "protectedSettings": {
                                      "type": "secureObject",
                                      "defaultValue": {},
                                      "metadata": {
                                        "description": "Optional. Any object that contains the extension specific protected settings."
                                      }
                                    },
                                    "supressFailures": {
                                      "type": "bool",
                                      "defaultValue": false,
                                      "metadata": {
                                        "description": "Optional. Indicates whether failures stemming from the extension will be suppressed (Operational failures such as not connecting to the VM will not be suppressed regardless of this value). The default is false."
                                      }
                                    },
                                    "enableAutomaticUpgrade": {
                                      "type": "bool",
                                      "metadata": {
                                        "description": "Required. Indicates whether the extension should be automatically upgraded by the platform if there is a newer version of the extension available."
                                      }
                                    },
                                    "tags": {
                                      "type": "object",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. Tags of the resource."
                                      }
                                    }
                                  },
                                  "resources": {
                                    "virtualMachine": {
                                      "existing": true,
                                      "type": "Microsoft.Compute/virtualMachines",
                                      "apiVersion": "2022-11-01",
                                      "name": "[parameters('virtualMachineName')]"
                                    },
                                    "extension": {
                                      "type": "Microsoft.Compute/virtualMachines/extensions",
                                      "apiVersion": "2022-11-01",
                                      "name": "[format('{0}/{1}', parameters('virtualMachineName'), parameters('name'))]",
                                      "location": "[parameters('location')]",
                                      "tags": "[parameters('tags')]",
                                      "properties": {
                                        "publisher": "[parameters('publisher')]",
                                        "type": "[parameters('type')]",
                                        "typeHandlerVersion": "[parameters('typeHandlerVersion')]",
                                        "autoUpgradeMinorVersion": "[parameters('autoUpgradeMinorVersion')]",
                                        "enableAutomaticUpgrade": "[parameters('enableAutomaticUpgrade')]",
                                        "forceUpdateTag": "[if(not(empty(parameters('forceUpdateTag'))), parameters('forceUpdateTag'), null())]",
                                        "settings": "[if(not(empty(parameters('settings'))), parameters('settings'), null())]",
                                        "protectedSettings": "[if(not(empty(parameters('protectedSettings'))), parameters('protectedSettings'), null())]",
                                        "suppressFailures": "[parameters('supressFailures')]"
                                      },
                                      "dependsOn": [
                                        "virtualMachine"
                                      ]
                                    }
                                  },
                                  "outputs": {
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the extension."
                                      },
                                      "value": "[parameters('name')]"
                                    },
                                    "resourceId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource ID of the extension."
                                      },
                                      "value": "[resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('virtualMachineName'), parameters('name'))]"
                                    },
                                    "resourceGroupName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the Resource Group the extension was created in."
                                      },
                                      "value": "[resourceGroup().name]"
                                    },
                                    "location": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The location the resource was deployed into."
                                      },
                                      "value": "[reference('extension', '2022-11-01', 'full').location]"
                                    }
                                  }
                                }
                              },
                              "dependsOn": [
                                "vm",
                                "vm_azureDiskEncryptionExtension"
                              ]
                            },
                            "vm_hostPoolRegistrationExtension": {
                              "condition": "[parameters('extensionHostPoolRegistration').enabled]",
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "[format('{0}-VM-HostPoolRegistration', uniqueString(deployment().name, parameters('location')))]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "virtualMachineName": {
                                    "value": "[parameters('name')]"
                                  },
                                  "name": {
                                    "value": "HostPoolRegistration"
                                  },
                                  "location": {
                                    "value": "[parameters('location')]"
                                  },
                                  "publisher": {
                                    "value": "Microsoft.PowerShell"
                                  },
                                  "type": {
                                    "value": "DSC"
                                  },
                                  "typeHandlerVersion": "[if(contains(parameters('extensionHostPoolRegistration'), 'typeHandlerVersion'), createObject('value', parameters('extensionHostPoolRegistration').typeHandlerVersion), createObject('value', '2.77'))]",
                                  "autoUpgradeMinorVersion": "[if(contains(parameters('extensionHostPoolRegistration'), 'autoUpgradeMinorVersion'), createObject('value', parameters('extensionHostPoolRegistration').autoUpgradeMinorVersion), createObject('value', true()))]",
                                  "enableAutomaticUpgrade": "[if(contains(parameters('extensionHostPoolRegistration'), 'enableAutomaticUpgrade'), createObject('value', parameters('extensionHostPoolRegistration').enableAutomaticUpgrade), createObject('value', false()))]",
                                  "settings": {
                                    "value": {
                                      "modulesUrl": "[parameters('extensionHostPoolRegistration').modulesUrl]",
                                      "configurationFunction": "[parameters('extensionHostPoolRegistration').configurationFunction]",
                                      "properties": {
                                        "hostPoolName": "[parameters('extensionHostPoolRegistration').hostPoolName]",
                                        "registrationInfoToken": "[parameters('extensionHostPoolRegistration').registrationInfoToken]",
                                        "aadJoin": true
                                      },
                                      "supressFailures": "[coalesce(tryGet(parameters('extensionHostPoolRegistration'), 'supressFailures'), false())]"
                                    }
                                  },
                                  "tags": {
                                    "value": "[coalesce(tryGet(parameters('extensionHostPoolRegistration'), 'tags'), parameters('tags'))]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "languageVersion": "2.0",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.28.1.47646",
                                      "templateHash": "15287507275706455668"
                                    },
                                    "name": "Virtual Machine Extensions",
                                    "description": "This module deploys a Virtual Machine Extension.",
                                    "owner": "Azure/module-maintainers"
                                  },
                                  "parameters": {
                                    "virtualMachineName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Conditional. The name of the parent virtual machine that extension is provisioned for. Required if the template is used in a standalone deployment."
                                      }
                                    },
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The name of the virtual machine extension."
                                      }
                                    },
                                    "location": {
                                      "type": "string",
                                      "defaultValue": "[resourceGroup().location]",
                                      "metadata": {
                                        "description": "Optional. The location the extension is deployed to."
                                      }
                                    },
                                    "publisher": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The name of the extension handler publisher."
                                      }
                                    },
                                    "type": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. Specifies the type of the extension; an example is \"CustomScriptExtension\"."
                                      }
                                    },
                                    "typeHandlerVersion": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. Specifies the version of the script handler."
                                      }
                                    },
                                    "autoUpgradeMinorVersion": {
                                      "type": "bool",
                                      "metadata": {
                                        "description": "Required. Indicates whether the extension should use a newer minor version if one is available at deployment time. Once deployed, however, the extension will not upgrade minor versions unless redeployed, even with this property set to true."
                                      }
                                    },
                                    "forceUpdateTag": {
                                      "type": "string",
                                      "defaultValue": "",
                                      "metadata": {
                                        "description": "Optional. How the extension handler should be forced to update even if the extension configuration has not changed."
                                      }
                                    },
                                    "settings": {
                                      "type": "object",
                                      "defaultValue": {},
                                      "metadata": {
                                        "description": "Optional. Any object that contains the extension specific settings."
                                      }
                                    },
                                    "protectedSettings": {
                                      "type": "secureObject",
                                      "defaultValue": {},
                                      "metadata": {
                                        "description": "Optional. Any object that contains the extension specific protected settings."
                                      }
                                    },
                                    "supressFailures": {
                                      "type": "bool",
                                      "defaultValue": false,
                                      "metadata": {
                                        "description": "Optional. Indicates whether failures stemming from the extension will be suppressed (Operational failures such as not connecting to the VM will not be suppressed regardless of this value). The default is false."
                                      }
                                    },
                                    "enableAutomaticUpgrade": {
                                      "type": "bool",
                                      "metadata": {
                                        "description": "Required. Indicates whether the extension should be automatically upgraded by the platform if there is a newer version of the extension available."
                                      }
                                    },
                                    "tags": {
                                      "type": "object",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. Tags of the resource."
                                      }
                                    }
                                  },
                                  "resources": {
                                    "virtualMachine": {
                                      "existing": true,
                                      "type": "Microsoft.Compute/virtualMachines",
                                      "apiVersion": "2022-11-01",
                                      "name": "[parameters('virtualMachineName')]"
                                    },
                                    "extension": {
                                      "type": "Microsoft.Compute/virtualMachines/extensions",
                                      "apiVersion": "2022-11-01",
                                      "name": "[format('{0}/{1}', parameters('virtualMachineName'), parameters('name'))]",
                                      "location": "[parameters('location')]",
                                      "tags": "[parameters('tags')]",
                                      "properties": {
                                        "publisher": "[parameters('publisher')]",
                                        "type": "[parameters('type')]",
                                        "typeHandlerVersion": "[parameters('typeHandlerVersion')]",
                                        "autoUpgradeMinorVersion": "[parameters('autoUpgradeMinorVersion')]",
                                        "enableAutomaticUpgrade": "[parameters('enableAutomaticUpgrade')]",
                                        "forceUpdateTag": "[if(not(empty(parameters('forceUpdateTag'))), parameters('forceUpdateTag'), null())]",
                                        "settings": "[if(not(empty(parameters('settings'))), parameters('settings'), null())]",
                                        "protectedSettings": "[if(not(empty(parameters('protectedSettings'))), parameters('protectedSettings'), null())]",
                                        "suppressFailures": "[parameters('supressFailures')]"
                                      },
                                      "dependsOn": [
                                        "virtualMachine"
                                      ]
                                    }
                                  },
                                  "outputs": {
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the extension."
                                      },
                                      "value": "[parameters('name')]"
                                    },
                                    "resourceId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource ID of the extension."
                                      },
                                      "value": "[resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('virtualMachineName'), parameters('name'))]"
                                    },
                                    "resourceGroupName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the Resource Group the extension was created in."
                                      },
                                      "value": "[resourceGroup().name]"
                                    },
                                    "location": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The location the resource was deployed into."
                                      },
                                      "value": "[reference('extension', '2022-11-01', 'full').location]"
                                    }
                                  }
                                }
                              },
                              "dependsOn": [
                                "vm",
                                "vm_nvidiaGpuDriverWindowsExtension"
                              ]
                            },
                            "vm_azureGuestConfigurationExtension": {
                              "condition": "[parameters('extensionGuestConfigurationExtension').enabled]",
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "[format('{0}-VM-GuestConfiguration', uniqueString(deployment().name, parameters('location')))]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "virtualMachineName": {
                                    "value": "[parameters('name')]"
                                  },
                                  "name": "[if(equals(parameters('osType'), 'Windows'), createObject('value', 'AzurePolicyforWindows'), createObject('value', 'AzurePolicyforLinux'))]",
                                  "location": {
                                    "value": "[parameters('location')]"
                                  },
                                  "publisher": {
                                    "value": "Microsoft.GuestConfiguration"
                                  },
                                  "type": "[if(equals(parameters('osType'), 'Windows'), createObject('value', 'ConfigurationforWindows'), createObject('value', 'ConfigurationForLinux'))]",
                                  "typeHandlerVersion": "[if(contains(parameters('extensionGuestConfigurationExtension'), 'typeHandlerVersion'), createObject('value', parameters('extensionGuestConfigurationExtension').typeHandlerVersion), if(equals(parameters('osType'), 'Windows'), createObject('value', '1.0'), createObject('value', '1.0')))]",
                                  "autoUpgradeMinorVersion": "[if(contains(parameters('extensionGuestConfigurationExtension'), 'autoUpgradeMinorVersion'), createObject('value', parameters('extensionGuestConfigurationExtension').autoUpgradeMinorVersion), createObject('value', true()))]",
                                  "enableAutomaticUpgrade": "[if(contains(parameters('extensionGuestConfigurationExtension'), 'enableAutomaticUpgrade'), createObject('value', parameters('extensionGuestConfigurationExtension').enableAutomaticUpgrade), createObject('value', true()))]",
                                  "forceUpdateTag": "[if(contains(parameters('extensionGuestConfigurationExtension'), 'forceUpdateTag'), createObject('value', parameters('extensionGuestConfigurationExtension').forceUpdateTag), createObject('value', '1.0'))]",
                                  "settings": "[if(contains(parameters('extensionGuestConfigurationExtension'), 'settings'), createObject('value', parameters('extensionGuestConfigurationExtension').settings), createObject('value', createObject()))]",
                                  "supressFailures": {
                                    "value": "[coalesce(tryGet(parameters('extensionGuestConfigurationExtension'), 'supressFailures'), false())]"
                                  },
                                  "protectedSettings": {
                                    "value": "[parameters('extensionGuestConfigurationExtensionProtectedSettings')]"
                                  },
                                  "tags": {
                                    "value": "[coalesce(tryGet(parameters('extensionGuestConfigurationExtension'), 'tags'), parameters('tags'))]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "languageVersion": "2.0",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.28.1.47646",
                                      "templateHash": "15287507275706455668"
                                    },
                                    "name": "Virtual Machine Extensions",
                                    "description": "This module deploys a Virtual Machine Extension.",
                                    "owner": "Azure/module-maintainers"
                                  },
                                  "parameters": {
                                    "virtualMachineName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Conditional. The name of the parent virtual machine that extension is provisioned for. Required if the template is used in a standalone deployment."
                                      }
                                    },
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The name of the virtual machine extension."
                                      }
                                    },
                                    "location": {
                                      "type": "string",
                                      "defaultValue": "[resourceGroup().location]",
                                      "metadata": {
                                        "description": "Optional. The location the extension is deployed to."
                                      }
                                    },
                                    "publisher": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The name of the extension handler publisher."
                                      }
                                    },
                                    "type": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. Specifies the type of the extension; an example is \"CustomScriptExtension\"."
                                      }
                                    },
                                    "typeHandlerVersion": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. Specifies the version of the script handler."
                                      }
                                    },
                                    "autoUpgradeMinorVersion": {
                                      "type": "bool",
                                      "metadata": {
                                        "description": "Required. Indicates whether the extension should use a newer minor version if one is available at deployment time. Once deployed, however, the extension will not upgrade minor versions unless redeployed, even with this property set to true."
                                      }
                                    },
                                    "forceUpdateTag": {
                                      "type": "string",
                                      "defaultValue": "",
                                      "metadata": {
                                        "description": "Optional. How the extension handler should be forced to update even if the extension configuration has not changed."
                                      }
                                    },
                                    "settings": {
                                      "type": "object",
                                      "defaultValue": {},
                                      "metadata": {
                                        "description": "Optional. Any object that contains the extension specific settings."
                                      }
                                    },
                                    "protectedSettings": {
                                      "type": "secureObject",
                                      "defaultValue": {},
                                      "metadata": {
                                        "description": "Optional. Any object that contains the extension specific protected settings."
                                      }
                                    },
                                    "supressFailures": {
                                      "type": "bool",
                                      "defaultValue": false,
                                      "metadata": {
                                        "description": "Optional. Indicates whether failures stemming from the extension will be suppressed (Operational failures such as not connecting to the VM will not be suppressed regardless of this value). The default is false."
                                      }
                                    },
                                    "enableAutomaticUpgrade": {
                                      "type": "bool",
                                      "metadata": {
                                        "description": "Required. Indicates whether the extension should be automatically upgraded by the platform if there is a newer version of the extension available."
                                      }
                                    },
                                    "tags": {
                                      "type": "object",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. Tags of the resource."
                                      }
                                    }
                                  },
                                  "resources": {
                                    "virtualMachine": {
                                      "existing": true,
                                      "type": "Microsoft.Compute/virtualMachines",
                                      "apiVersion": "2022-11-01",
                                      "name": "[parameters('virtualMachineName')]"
                                    },
                                    "extension": {
                                      "type": "Microsoft.Compute/virtualMachines/extensions",
                                      "apiVersion": "2022-11-01",
                                      "name": "[format('{0}/{1}', parameters('virtualMachineName'), parameters('name'))]",
                                      "location": "[parameters('location')]",
                                      "tags": "[parameters('tags')]",
                                      "properties": {
                                        "publisher": "[parameters('publisher')]",
                                        "type": "[parameters('type')]",
                                        "typeHandlerVersion": "[parameters('typeHandlerVersion')]",
                                        "autoUpgradeMinorVersion": "[parameters('autoUpgradeMinorVersion')]",
                                        "enableAutomaticUpgrade": "[parameters('enableAutomaticUpgrade')]",
                                        "forceUpdateTag": "[if(not(empty(parameters('forceUpdateTag'))), parameters('forceUpdateTag'), null())]",
                                        "settings": "[if(not(empty(parameters('settings'))), parameters('settings'), null())]",
                                        "protectedSettings": "[if(not(empty(parameters('protectedSettings'))), parameters('protectedSettings'), null())]",
                                        "suppressFailures": "[parameters('supressFailures')]"
                                      },
                                      "dependsOn": [
                                        "virtualMachine"
                                      ]
                                    }
                                  },
                                  "outputs": {
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the extension."
                                      },
                                      "value": "[parameters('name')]"
                                    },
                                    "resourceId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource ID of the extension."
                                      },
                                      "value": "[resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('virtualMachineName'), parameters('name'))]"
                                    },
                                    "resourceGroupName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the Resource Group the extension was created in."
                                      },
                                      "value": "[resourceGroup().name]"
                                    },
                                    "location": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The location the resource was deployed into."
                                      },
                                      "value": "[reference('extension', '2022-11-01', 'full').location]"
                                    }
                                  }
                                }
                              },
                              "dependsOn": [
                                "vm",
                                "vm_hostPoolRegistrationExtension"
                              ]
                            },
                            "vm_backup": {
                              "condition": "[not(empty(parameters('backupVaultName')))]",
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "[format('{0}-VM-Backup', uniqueString(deployment().name, parameters('location')))]",
                              "resourceGroup": "[parameters('backupVaultResourceGroup')]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "name": {
                                    "value": "[format('vm;iaasvmcontainerv2;{0};{1}', resourceGroup().name, parameters('name'))]"
                                  },
                                  "location": {
                                    "value": "[parameters('location')]"
                                  },
                                  "policyId": {
                                    "value": "[resourceId('Microsoft.RecoveryServices/vaults/backupPolicies', parameters('backupVaultName'), parameters('backupPolicyName'))]"
                                  },
                                  "protectedItemType": {
                                    "value": "Microsoft.Compute/virtualMachines"
                                  },
                                  "protectionContainerName": {
                                    "value": "[format('iaasvmcontainer;iaasvmcontainerv2;{0};{1}', resourceGroup().name, parameters('name'))]"
                                  },
                                  "recoveryVaultName": {
                                    "value": "[parameters('backupVaultName')]"
                                  },
                                  "sourceResourceId": {
                                    "value": "[resourceId('Microsoft.Compute/virtualMachines', parameters('name'))]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.28.1.47646",
                                      "templateHash": "4311417160342913977"
                                    },
                                    "name": "Recovery Service Vaults Protection Container Protected Item",
                                    "description": "This module deploys a Recovery Services Vault Protection Container Protected Item.",
                                    "owner": "Azure/module-maintainers"
                                  },
                                  "parameters": {
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. Name of the resource."
                                      }
                                    },
                                    "protectionContainerName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Conditional. Name of the Azure Recovery Service Vault Protection Container. Required if the template is used in a standalone deployment."
                                      }
                                    },
                                    "recoveryVaultName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Conditional. The name of the parent Azure Recovery Service Vault. Required if the template is used in a standalone deployment."
                                      }
                                    },
                                    "location": {
                                      "type": "string",
                                      "defaultValue": "[resourceGroup().location]",
                                      "metadata": {
                                        "description": "Optional. Location for all resources."
                                      }
                                    },
                                    "protectedItemType": {
                                      "type": "string",
                                      "allowedValues": [
                                        "AzureFileShareProtectedItem",
                                        "AzureVmWorkloadSAPAseDatabase",
                                        "AzureVmWorkloadSAPHanaDatabase",
                                        "AzureVmWorkloadSQLDatabase",
                                        "DPMProtectedItem",
                                        "GenericProtectedItem",
                                        "MabFileFolderProtectedItem",
                                        "Microsoft.ClassicCompute/virtualMachines",
                                        "Microsoft.Compute/virtualMachines",
                                        "Microsoft.Sql/servers/databases"
                                      ],
                                      "metadata": {
                                        "description": "Required. The backup item type."
                                      }
                                    },
                                    "policyId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. ID of the backup policy with which this item is backed up."
                                      }
                                    },
                                    "sourceResourceId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. Resource ID of the resource to back up."
                                      }
                                    }
                                  },
                                  "resources": [
                                    {
                                      "type": "Microsoft.RecoveryServices/vaults/backupFabrics/protectionContainers/protectedItems",
                                      "apiVersion": "2023-01-01",
                                      "name": "[format('{0}/Azure/{1}/{2}', parameters('recoveryVaultName'), parameters('protectionContainerName'), parameters('name'))]",
                                      "location": "[parameters('location')]",
                                      "properties": {
                                        "protectedItemType": "[parameters('protectedItemType')]",
                                        "policyId": "[parameters('policyId')]",
                                        "sourceResourceId": "[parameters('sourceResourceId')]"
                                      }
                                    }
                                  ],
                                  "outputs": {
                                    "resourceGroupName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the Resource Group the protected item was created in."
                                      },
                                      "value": "[resourceGroup().name]"
                                    },
                                    "resourceId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource ID of the protected item."
                                      },
                                      "value": "[resourceId('Microsoft.RecoveryServices/vaults/backupFabrics/protectionContainers/protectedItems', split(format('{0}/Azure/{1}/{2}', parameters('recoveryVaultName'), parameters('protectionContainerName'), parameters('name')), '/')[0], split(format('{0}/Azure/{1}/{2}', parameters('recoveryVaultName'), parameters('protectionContainerName'), parameters('name')), '/')[1], split(format('{0}/Azure/{1}/{2}', parameters('recoveryVaultName'), parameters('protectionContainerName'), parameters('name')), '/')[2], split(format('{0}/Azure/{1}/{2}', parameters('recoveryVaultName'), parameters('protectionContainerName'), parameters('name')), '/')[3])]"
                                    },
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The Name of the protected item."
                                      },
                                      "value": "[format('{0}/Azure/{1}/{2}', parameters('recoveryVaultName'), parameters('protectionContainerName'), parameters('name'))]"
                                    }
                                  }
                                }
                              },
                              "dependsOn": [
                                "vm",
                                "vm_azureGuestConfigurationExtension"
                              ]
                            }
                          },
                          "outputs": {
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "The name of the VM."
                              },
                              "value": "[parameters('name')]"
                            },
                            "resourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource ID of the VM."
                              },
                              "value": "[resourceId('Microsoft.Compute/virtualMachines', parameters('name'))]"
                            },
                            "resourceGroupName": {
                              "type": "string",
                              "metadata": {
                                "description": "The name of the resource group the VM was created in."
                              },
                              "value": "[resourceGroup().name]"
                            },
                            "systemAssignedMIPrincipalId": {
                              "type": "string",
                              "metadata": {
                                "description": "The principal ID of the system assigned identity."
                              },
                              "value": "[coalesce(tryGet(tryGet(reference('vm', '2023-09-01', 'full'), 'identity'), 'principalId'), '')]"
                            },
                            "location": {
                              "type": "string",
                              "metadata": {
                                "description": "The location the resource was deployed into."
                              },
                              "value": "[reference('vm', '2023-09-01', 'full').location]"
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Maintenance/maintenanceConfigurations', format('dep-mc-{0}', parameters('vmName')))]",
                        "[resourceId('Microsoft.Compute/sshPublicKeys', parameters('sshKeyName'))]",
                        "[resourceId('Microsoft.Network/virtualNetworks/subnets', split(format('{0}/{1}', parameters('vmVnetName'), parameters('vmSubnetName')), '/')[0], split(format('{0}/{1}', parameters('vmVnetName'), parameters('vmSubnetName')), '/')[1])]"
                      ]
                    }
                  ]
                }
              },
              "dependsOn": [
                "logAnalyticsWs",
                "networking"
              ],
              "metadata": {
                "description": "An optional Linux virtual machine deployment to act as a jump box."
              }
            },
            "jumpboxWindowsVM": {
              "condition": "[and(parameters('deployJumpHost'), equals(parameters('vmJumpboxOSType'), 'windows'))]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[take(format('vm-windows-{0}', deployment().name), 64)]",
              "resourceGroup": "[parameters('resourceGroupName')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "tags": {
                    "value": "[parameters('tags')]"
                  },
                  "enableTelemetry": {
                    "value": "[parameters('enableTelemetry')]"
                  },
                  "vmName": {
                    "value": "[parameters('naming').windowsVirtualMachine.name]"
                  },
                  "bastionResourceId": {
                    "value": "[parameters('bastionResourceId')]"
                  },
                  "vmAdminUsername": {
                    "value": "[parameters('vmAdminUsername')]"
                  },
                  "vmAdminPassword": {
                    "value": "[parameters('vmAdminPassword')]"
                  },
                  "vmSize": {
                    "value": "[parameters('vmSize')]"
                  },
                  "vmZone": {
                    "value": "[parameters('vmZone')]"
                  },
                  "storageAccountType": {
                    "value": "[parameters('storageAccountType')]"
                  },
                  "vmVnetName": {
                    "value": "[reference('networking').outputs.vnetSpokeName.value]"
                  },
                  "vmSubnetName": {
                    "value": "[parameters('vmSubnetName')]"
                  },
                  "vmSubnetAddressPrefix": {
                    "value": "[parameters('subnetSpokeDevOpsAddressSpace')]"
                  },
                  "vmNetworkInterfaceName": {
                    "value": "[parameters('naming').networkInterface.name]"
                  },
                  "vmNetworkSecurityGroupName": {
                    "value": "[variables('resourceNames').jumpboxNsg]"
                  },
                  "logAnalyticsWorkspaceResourceId": {
                    "value": "[reference('logAnalyticsWs').outputs.resourceId.value]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.32.4.45862",
                      "templateHash": "5550740089245163932"
                    }
                  },
                  "parameters": {
                    "vmName": {
                      "type": "string"
                    },
                    "vmSize": {
                      "type": "string"
                    },
                    "storageAccountType": {
                      "type": "string",
                      "defaultValue": "Premium_LRS"
                    },
                    "vmWindowsOSVersion": {
                      "type": "string",
                      "defaultValue": "2016-Datacenter"
                    },
                    "vmZone": {
                      "type": "int",
                      "defaultValue": 0
                    },
                    "vmVnetName": {
                      "type": "string"
                    },
                    "vmSubnetName": {
                      "type": "string"
                    },
                    "vmSubnetAddressPrefix": {
                      "type": "string"
                    },
                    "vmNetworkSecurityGroupName": {
                      "type": "string"
                    },
                    "vmNetworkInterfaceName": {
                      "type": "string"
                    },
                    "logAnalyticsWorkspaceResourceId": {
                      "type": "string"
                    },
                    "bastionResourceId": {
                      "type": "string"
                    },
                    "vmAdminUsername": {
                      "type": "string"
                    },
                    "vmAdminPassword": {
                      "type": "securestring"
                    },
                    "tags": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. The tags to be assigned to the created resources."
                      }
                    },
                    "enableTelemetry": {
                      "type": "bool",
                      "metadata": {
                        "description": "Required. Whether to enable deployment telemetry."
                      }
                    },
                    "location": {
                      "type": "string",
                      "defaultValue": "[resourceGroup().location]"
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Network/virtualNetworks/subnets",
                      "apiVersion": "2023-11-01",
                      "name": "[format('{0}/{1}', parameters('vmVnetName'), parameters('vmSubnetName'))]",
                      "properties": {
                        "addressPrefix": "[parameters('vmSubnetAddressPrefix')]",
                        "networkSecurityGroup": {
                          "id": "[reference(resourceId('Microsoft.Resources/deployments', 'vmNetworkSecurityDeployment'), '2022-09-01').outputs.resourceId.value]"
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Resources/deployments', 'vmNetworkSecurityDeployment')]"
                      ]
                    },
                    {
                      "type": "Microsoft.Maintenance/maintenanceConfigurations",
                      "apiVersion": "2023-10-01-preview",
                      "name": "[format('dep-mc-{0}', parameters('vmName'))]",
                      "location": "[parameters('location')]",
                      "properties": {
                        "extensionProperties": {
                          "InGuestPatchMode": "User"
                        },
                        "maintenanceScope": "InGuestPatch",
                        "maintenanceWindow": {
                          "startDateTime": "2024-06-16 00:00",
                          "duration": "03:55",
                          "timeZone": "W. Europe Standard Time",
                          "recurEvery": "1Day"
                        },
                        "visibility": "Custom",
                        "installPatches": {
                          "rebootSetting": "IfRequired",
                          "windowsParameters": {
                            "classificationsToInclude": [
                              "Critical",
                              "Security"
                            ]
                          }
                        }
                      }
                    },
                    {
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "vmNetworkSecurityDeployment",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "name": {
                            "value": "[parameters('vmNetworkSecurityGroupName')]"
                          },
                          "location": {
                            "value": "[parameters('location')]"
                          },
                          "tags": {
                            "value": "[parameters('tags')]"
                          },
                          "enableTelemetry": {
                            "value": "[parameters('enableTelemetry')]"
                          },
                          "securityRules": "[if(not(empty(parameters('bastionResourceId'))), createObject('value', createArray(createObject('name', 'allow-bastion-inbound', 'properties', createObject('description', 'Allow inbound traffic from Bastion to the JumpBox', 'protocol', '*', 'sourceAddressPrefix', 'Bastion', 'sourcePortRange', '*', 'destinationAddressPrefix', '*', 'destinationPortRange', '*', 'access', 'Allow', 'priority', 100, 'direction', 'Inbound')), createObject('name', 'deny-hop-outbound', 'properties', createObject('priority', 200, 'access', 'Deny', 'protocol', 'Tcp', 'direction', 'Outbound', 'sourceAddressPrefix', 'VirtualNetwork', 'destinationAddressPrefix', '*', 'destinationPortRanges', createArray('3389', '22'))))), createObject('value', createArray(createObject('name', 'deny-hop-outbound', 'properties', createObject('priority', 200, 'access', 'Deny', 'protocol', 'Tcp', 'direction', 'Outbound', 'sourceAddressPrefix', 'VirtualNetwork', 'destinationAddressPrefix', '*', 'destinationPortRanges', createArray('3389', '22'))))))]"
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "languageVersion": "2.0",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.27.1.19265",
                              "templateHash": "8543584719514494080"
                            },
                            "name": "Network Security Groups",
                            "description": "This module deploys a Network security Group (NSG).",
                            "owner": "Azure/module-maintainers"
                          },
                          "definitions": {
                            "lockType": {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Specify the name of lock."
                                  }
                                },
                                "kind": {
                                  "type": "string",
                                  "allowedValues": [
                                    "CanNotDelete",
                                    "None",
                                    "ReadOnly"
                                  ],
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Specify the type of lock."
                                  }
                                }
                              },
                              "nullable": true
                            },
                            "roleAssignmentType": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "roleDefinitionIdOrName": {
                                    "type": "string",
                                    "metadata": {
                                      "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                                    }
                                  },
                                  "principalId": {
                                    "type": "string",
                                    "metadata": {
                                      "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                                    }
                                  },
                                  "principalType": {
                                    "type": "string",
                                    "allowedValues": [
                                      "Device",
                                      "ForeignGroup",
                                      "Group",
                                      "ServicePrincipal",
                                      "User"
                                    ],
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The principal type of the assigned principal ID."
                                    }
                                  },
                                  "description": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The description of the role assignment."
                                    }
                                  },
                                  "condition": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                                    }
                                  },
                                  "conditionVersion": {
                                    "type": "string",
                                    "allowedValues": [
                                      "2.0"
                                    ],
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. Version of the condition."
                                    }
                                  },
                                  "delegatedManagedIdentityResourceId": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The Resource Id of the delegated managed identity resource."
                                    }
                                  }
                                }
                              },
                              "nullable": true
                            },
                            "diagnosticSettingType": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "name": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The name of diagnostic setting."
                                    }
                                  },
                                  "logCategoriesAndGroups": {
                                    "type": "array",
                                    "items": {
                                      "type": "object",
                                      "properties": {
                                        "category": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. Name of a Diagnostic Log category for a resource type this setting is applied to. Set the specific logs to collect here."
                                          }
                                        },
                                        "categoryGroup": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. Name of a Diagnostic Log category group for a resource type this setting is applied to. Set to `allLogs` to collect all logs."
                                          }
                                        },
                                        "enabled": {
                                          "type": "bool",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. Enable or disable the category explicitly. Default is `true`."
                                          }
                                        }
                                      }
                                    },
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The name of logs that will be streamed. \"allLogs\" includes all possible logs for the resource. Set to `[]` to disable log collection."
                                    }
                                  },
                                  "logAnalyticsDestinationType": {
                                    "type": "string",
                                    "allowedValues": [
                                      "AzureDiagnostics",
                                      "Dedicated"
                                    ],
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. A string indicating whether the export to Log Analytics should use the default destination type, i.e. AzureDiagnostics, or use a destination type."
                                    }
                                  },
                                  "workspaceResourceId": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. Resource ID of the diagnostic log analytics workspace. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                                    }
                                  },
                                  "storageAccountResourceId": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. Resource ID of the diagnostic storage account. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                                    }
                                  },
                                  "eventHubAuthorizationRuleResourceId": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. Resource ID of the diagnostic event hub authorization rule for the Event Hubs namespace in which the event hub should be created or streamed to."
                                    }
                                  },
                                  "eventHubName": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. Name of the diagnostic event hub within the namespace to which logs are streamed. Without this, an event hub is created for each log category. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                                    }
                                  },
                                  "marketplacePartnerResourceId": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The full ARM resource ID of the Marketplace resource to which you would like to send Diagnostic Logs."
                                    }
                                  }
                                }
                              },
                              "nullable": true
                            }
                          },
                          "parameters": {
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. Name of the Network Security Group."
                              }
                            },
                            "location": {
                              "type": "string",
                              "defaultValue": "[resourceGroup().location]",
                              "metadata": {
                                "description": "Optional. Location for all resources."
                              }
                            },
                            "securityRules": {
                              "type": "array",
                              "defaultValue": [],
                              "metadata": {
                                "description": "Optional. Array of Security Rules to deploy to the Network Security Group. When not provided, an NSG including only the built-in roles will be deployed."
                              }
                            },
                            "flushConnection": {
                              "type": "bool",
                              "defaultValue": false,
                              "metadata": {
                                "description": "Optional. When enabled, flows created from Network Security Group connections will be re-evaluated when rules are updates. Initial enablement will trigger re-evaluation. Network Security Group connection flushing is not available in all regions."
                              }
                            },
                            "diagnosticSettings": {
                              "$ref": "#/definitions/diagnosticSettingType",
                              "metadata": {
                                "description": "Optional. The diagnostic settings of the service."
                              }
                            },
                            "lock": {
                              "$ref": "#/definitions/lockType",
                              "metadata": {
                                "description": "Optional. The lock settings of the service."
                              }
                            },
                            "roleAssignments": {
                              "$ref": "#/definitions/roleAssignmentType",
                              "metadata": {
                                "description": "Optional. Array of role assignments to create."
                              }
                            },
                            "tags": {
                              "type": "object",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Tags of the NSG resource."
                              }
                            },
                            "enableTelemetry": {
                              "type": "bool",
                              "defaultValue": true,
                              "metadata": {
                                "description": "Optional. Enable/Disable usage telemetry for module."
                              }
                            }
                          },
                          "variables": {
                            "builtInRoleNames": {
                              "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                              "Network Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4d97b98b-1d4f-4787-a291-c67834d212e7')]",
                              "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                              "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                              "Role Based Access Control Administrator (Preview)": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]",
                              "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]"
                            }
                          },
                          "resources": {
                            "avmTelemetry": {
                              "condition": "[parameters('enableTelemetry')]",
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2023-07-01",
                              "name": "[format('46d3xbcp.res.network-networksecuritygroup.{0}.{1}', replace('0.2.0', '.', '-'), substring(uniqueString(deployment().name, parameters('location')), 0, 4))]",
                              "properties": {
                                "mode": "Incremental",
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "resources": [],
                                  "outputs": {
                                    "telemetry": {
                                      "type": "String",
                                      "value": "For more information, see https://aka.ms/avm/TelemetryInfo"
                                    }
                                  }
                                }
                              }
                            },
                            "networkSecurityGroup": {
                              "type": "Microsoft.Network/networkSecurityGroups",
                              "apiVersion": "2023-11-01",
                              "name": "[parameters('name')]",
                              "location": "[parameters('location')]",
                              "tags": "[parameters('tags')]",
                              "properties": {
                                "copy": [
                                  {
                                    "name": "securityRules",
                                    "count": "[length(parameters('securityRules'))]",
                                    "input": {
                                      "name": "[parameters('securityRules')[copyIndex('securityRules')].name]",
                                      "properties": {
                                        "protocol": "[parameters('securityRules')[copyIndex('securityRules')].properties.protocol]",
                                        "access": "[parameters('securityRules')[copyIndex('securityRules')].properties.access]",
                                        "priority": "[parameters('securityRules')[copyIndex('securityRules')].properties.priority]",
                                        "direction": "[parameters('securityRules')[copyIndex('securityRules')].properties.direction]",
                                        "description": "[if(contains(parameters('securityRules')[copyIndex('securityRules')].properties, 'description'), parameters('securityRules')[copyIndex('securityRules')].properties.description, '')]",
                                        "sourcePortRange": "[if(contains(parameters('securityRules')[copyIndex('securityRules')].properties, 'sourcePortRange'), parameters('securityRules')[copyIndex('securityRules')].properties.sourcePortRange, '')]",
                                        "sourcePortRanges": "[if(contains(parameters('securityRules')[copyIndex('securityRules')].properties, 'sourcePortRanges'), parameters('securityRules')[copyIndex('securityRules')].properties.sourcePortRanges, createArray())]",
                                        "destinationPortRange": "[if(contains(parameters('securityRules')[copyIndex('securityRules')].properties, 'destinationPortRange'), parameters('securityRules')[copyIndex('securityRules')].properties.destinationPortRange, '')]",
                                        "destinationPortRanges": "[if(contains(parameters('securityRules')[copyIndex('securityRules')].properties, 'destinationPortRanges'), parameters('securityRules')[copyIndex('securityRules')].properties.destinationPortRanges, createArray())]",
                                        "sourceAddressPrefix": "[if(contains(parameters('securityRules')[copyIndex('securityRules')].properties, 'sourceAddressPrefix'), parameters('securityRules')[copyIndex('securityRules')].properties.sourceAddressPrefix, '')]",
                                        "destinationAddressPrefix": "[if(contains(parameters('securityRules')[copyIndex('securityRules')].properties, 'destinationAddressPrefix'), parameters('securityRules')[copyIndex('securityRules')].properties.destinationAddressPrefix, '')]",
                                        "sourceAddressPrefixes": "[if(contains(parameters('securityRules')[copyIndex('securityRules')].properties, 'sourceAddressPrefixes'), parameters('securityRules')[copyIndex('securityRules')].properties.sourceAddressPrefixes, createArray())]",
                                        "destinationAddressPrefixes": "[if(contains(parameters('securityRules')[copyIndex('securityRules')].properties, 'destinationAddressPrefixes'), parameters('securityRules')[copyIndex('securityRules')].properties.destinationAddressPrefixes, createArray())]",
                                        "sourceApplicationSecurityGroups": "[if(contains(parameters('securityRules')[copyIndex('securityRules')].properties, 'sourceApplicationSecurityGroups'), parameters('securityRules')[copyIndex('securityRules')].properties.sourceApplicationSecurityGroups, createArray())]",
                                        "destinationApplicationSecurityGroups": "[if(contains(parameters('securityRules')[copyIndex('securityRules')].properties, 'destinationApplicationSecurityGroups'), parameters('securityRules')[copyIndex('securityRules')].properties.destinationApplicationSecurityGroups, createArray())]"
                                      }
                                    }
                                  }
                                ],
                                "flushConnection": "[parameters('flushConnection')]"
                              }
                            },
                            "networkSecurityGroup_lock": {
                              "condition": "[and(not(empty(coalesce(parameters('lock'), createObject()))), not(equals(tryGet(parameters('lock'), 'kind'), 'None')))]",
                              "type": "Microsoft.Authorization/locks",
                              "apiVersion": "2020-05-01",
                              "scope": "[format('Microsoft.Network/networkSecurityGroups/{0}', parameters('name'))]",
                              "name": "[coalesce(tryGet(parameters('lock'), 'name'), format('lock-{0}', parameters('name')))]",
                              "properties": {
                                "level": "[coalesce(tryGet(parameters('lock'), 'kind'), '')]",
                                "notes": "[if(equals(tryGet(parameters('lock'), 'kind'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot delete or modify the resource or child resources.')]"
                              },
                              "dependsOn": [
                                "networkSecurityGroup"
                              ]
                            },
                            "networkSecurityGroup_diagnosticSettings": {
                              "copy": {
                                "name": "networkSecurityGroup_diagnosticSettings",
                                "count": "[length(coalesce(parameters('diagnosticSettings'), createArray()))]"
                              },
                              "type": "Microsoft.Insights/diagnosticSettings",
                              "apiVersion": "2021-05-01-preview",
                              "scope": "[format('Microsoft.Network/networkSecurityGroups/{0}', parameters('name'))]",
                              "name": "[coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'name'), format('{0}-diagnosticSettings', parameters('name')))]",
                              "properties": {
                                "copy": [
                                  {
                                    "name": "logs",
                                    "count": "[length(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs'))))]",
                                    "input": {
                                      "categoryGroup": "[tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'categoryGroup')]",
                                      "category": "[tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'category')]",
                                      "enabled": "[coalesce(tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'enabled'), true())]"
                                    }
                                  }
                                ],
                                "storageAccountId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'storageAccountResourceId')]",
                                "workspaceId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'workspaceResourceId')]",
                                "eventHubAuthorizationRuleId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'eventHubAuthorizationRuleResourceId')]",
                                "eventHubName": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'eventHubName')]",
                                "marketplacePartnerId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'marketplacePartnerResourceId')]",
                                "logAnalyticsDestinationType": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logAnalyticsDestinationType')]"
                              },
                              "dependsOn": [
                                "networkSecurityGroup"
                              ]
                            },
                            "networkSecurityGroup_roleAssignments": {
                              "copy": {
                                "name": "networkSecurityGroup_roleAssignments",
                                "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]"
                              },
                              "type": "Microsoft.Authorization/roleAssignments",
                              "apiVersion": "2022-04-01",
                              "scope": "[format('Microsoft.Network/networkSecurityGroups/{0}', parameters('name'))]",
                              "name": "[guid(resourceId('Microsoft.Network/networkSecurityGroups', parameters('name')), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].principalId, coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName)]",
                              "properties": {
                                "roleDefinitionId": "[if(contains(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName), variables('builtInRoleNames')[coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName], if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName)))]",
                                "principalId": "[coalesce(parameters('roleAssignments'), createArray())[copyIndex()].principalId]",
                                "description": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'description')]",
                                "principalType": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'principalType')]",
                                "condition": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'condition')]",
                                "conditionVersion": "[if(not(empty(tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                                "delegatedManagedIdentityResourceId": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
                              },
                              "dependsOn": [
                                "networkSecurityGroup"
                              ]
                            },
                            "networkSecurityGroup_securityRules": {
                              "copy": {
                                "name": "networkSecurityGroup_securityRules",
                                "count": "[length(parameters('securityRules'))]"
                              },
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "[format('{0}-NetworkSecurityGroup-SecurityRule-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "name": {
                                    "value": "[parameters('securityRules')[copyIndex()].name]"
                                  },
                                  "networkSecurityGroupName": {
                                    "value": "[parameters('name')]"
                                  },
                                  "protocol": {
                                    "value": "[parameters('securityRules')[copyIndex()].properties.protocol]"
                                  },
                                  "access": {
                                    "value": "[parameters('securityRules')[copyIndex()].properties.access]"
                                  },
                                  "priority": {
                                    "value": "[parameters('securityRules')[copyIndex()].properties.priority]"
                                  },
                                  "direction": {
                                    "value": "[parameters('securityRules')[copyIndex()].properties.direction]"
                                  },
                                  "description": "[if(contains(parameters('securityRules')[copyIndex()].properties, 'description'), createObject('value', parameters('securityRules')[copyIndex()].properties.description), createObject('value', ''))]",
                                  "sourcePortRange": "[if(contains(parameters('securityRules')[copyIndex()].properties, 'sourcePortRange'), createObject('value', parameters('securityRules')[copyIndex()].properties.sourcePortRange), createObject('value', ''))]",
                                  "sourcePortRanges": "[if(contains(parameters('securityRules')[copyIndex()].properties, 'sourcePortRanges'), createObject('value', parameters('securityRules')[copyIndex()].properties.sourcePortRanges), createObject('value', createArray()))]",
                                  "destinationPortRange": "[if(contains(parameters('securityRules')[copyIndex()].properties, 'destinationPortRange'), createObject('value', parameters('securityRules')[copyIndex()].properties.destinationPortRange), createObject('value', ''))]",
                                  "destinationPortRanges": "[if(contains(parameters('securityRules')[copyIndex()].properties, 'destinationPortRanges'), createObject('value', parameters('securityRules')[copyIndex()].properties.destinationPortRanges), createObject('value', createArray()))]",
                                  "sourceAddressPrefix": "[if(contains(parameters('securityRules')[copyIndex()].properties, 'sourceAddressPrefix'), createObject('value', parameters('securityRules')[copyIndex()].properties.sourceAddressPrefix), createObject('value', ''))]",
                                  "destinationAddressPrefix": "[if(contains(parameters('securityRules')[copyIndex()].properties, 'destinationAddressPrefix'), createObject('value', parameters('securityRules')[copyIndex()].properties.destinationAddressPrefix), createObject('value', ''))]",
                                  "sourceAddressPrefixes": "[if(contains(parameters('securityRules')[copyIndex()].properties, 'sourceAddressPrefixes'), createObject('value', parameters('securityRules')[copyIndex()].properties.sourceAddressPrefixes), createObject('value', createArray()))]",
                                  "destinationAddressPrefixes": "[if(contains(parameters('securityRules')[copyIndex()].properties, 'destinationAddressPrefixes'), createObject('value', parameters('securityRules')[copyIndex()].properties.destinationAddressPrefixes), createObject('value', createArray()))]",
                                  "sourceApplicationSecurityGroups": "[if(contains(parameters('securityRules')[copyIndex()].properties, 'sourceApplicationSecurityGroups'), createObject('value', parameters('securityRules')[copyIndex()].properties.sourceApplicationSecurityGroups), createObject('value', createArray()))]",
                                  "destinationApplicationSecurityGroups": "[if(contains(parameters('securityRules')[copyIndex()].properties, 'destinationApplicationSecurityGroups'), createObject('value', parameters('securityRules')[copyIndex()].properties.destinationApplicationSecurityGroups), createObject('value', createArray()))]"
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.27.1.19265",
                                      "templateHash": "17252857850318600622"
                                    },
                                    "name": "Network Security Group (NSG) Security Rules",
                                    "description": "This module deploys a Network Security Group (NSG) Security Rule.",
                                    "owner": "Azure/module-maintainers"
                                  },
                                  "parameters": {
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The name of the security rule."
                                      }
                                    },
                                    "networkSecurityGroupName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Conditional. The name of the parent network security group to deploy the security rule into. Required if the template is used in a standalone deployment."
                                      }
                                    },
                                    "access": {
                                      "type": "string",
                                      "defaultValue": "Deny",
                                      "allowedValues": [
                                        "Allow",
                                        "Deny"
                                      ],
                                      "metadata": {
                                        "description": "Optional. Whether network traffic is allowed or denied."
                                      }
                                    },
                                    "description": {
                                      "type": "string",
                                      "defaultValue": "",
                                      "maxLength": 140,
                                      "metadata": {
                                        "description": "Optional. A description for this rule."
                                      }
                                    },
                                    "destinationAddressPrefix": {
                                      "type": "string",
                                      "defaultValue": "",
                                      "metadata": {
                                        "description": "Optional. The destination address prefix. CIDR or destination IP range. Asterisk \"*\" can also be used to match all source IPs. Default tags such as \"VirtualNetwork\", \"AzureLoadBalancer\" and \"Internet\" can also be used."
                                      }
                                    },
                                    "destinationAddressPrefixes": {
                                      "type": "array",
                                      "defaultValue": [],
                                      "metadata": {
                                        "description": "Optional. The destination address prefixes. CIDR or destination IP ranges."
                                      }
                                    },
                                    "destinationApplicationSecurityGroups": {
                                      "type": "array",
                                      "defaultValue": [],
                                      "metadata": {
                                        "description": "Optional. The application security group specified as destination."
                                      }
                                    },
                                    "destinationPortRange": {
                                      "type": "string",
                                      "defaultValue": "",
                                      "metadata": {
                                        "description": "Optional. The destination port or range. Integer or range between 0 and 65535. Asterisk \"*\" can also be used to match all ports."
                                      }
                                    },
                                    "destinationPortRanges": {
                                      "type": "array",
                                      "defaultValue": [],
                                      "metadata": {
                                        "description": "Optional. The destination port ranges."
                                      }
                                    },
                                    "direction": {
                                      "type": "string",
                                      "allowedValues": [
                                        "Inbound",
                                        "Outbound"
                                      ],
                                      "metadata": {
                                        "description": "Required. The direction of the rule. The direction specifies if rule will be evaluated on incoming or outgoing traffic."
                                      }
                                    },
                                    "priority": {
                                      "type": "int",
                                      "metadata": {
                                        "description": "Required. The priority of the rule. The value can be between 100 and 4096. The priority number must be unique for each rule in the collection. The lower the priority number, the higher the priority of the rule."
                                      }
                                    },
                                    "protocol": {
                                      "type": "string",
                                      "allowedValues": [
                                        "*",
                                        "Ah",
                                        "Esp",
                                        "Icmp",
                                        "Tcp",
                                        "Udp"
                                      ],
                                      "metadata": {
                                        "description": "Required. Network protocol this rule applies to."
                                      }
                                    },
                                    "sourceAddressPrefix": {
                                      "type": "string",
                                      "defaultValue": "",
                                      "metadata": {
                                        "description": "Optional. The CIDR or source IP range. Asterisk \"*\" can also be used to match all source IPs. Default tags such as \"VirtualNetwork\", \"AzureLoadBalancer\" and \"Internet\" can also be used. If this is an ingress rule, specifies where network traffic originates from."
                                      }
                                    },
                                    "sourceAddressPrefixes": {
                                      "type": "array",
                                      "defaultValue": [],
                                      "metadata": {
                                        "description": "Optional. The CIDR or source IP ranges."
                                      }
                                    },
                                    "sourceApplicationSecurityGroups": {
                                      "type": "array",
                                      "defaultValue": [],
                                      "metadata": {
                                        "description": "Optional. The application security group specified as source."
                                      }
                                    },
                                    "sourcePortRange": {
                                      "type": "string",
                                      "defaultValue": "",
                                      "metadata": {
                                        "description": "Optional. The source port or range. Integer or range between 0 and 65535. Asterisk \"*\" can also be used to match all ports."
                                      }
                                    },
                                    "sourcePortRanges": {
                                      "type": "array",
                                      "defaultValue": [],
                                      "metadata": {
                                        "description": "Optional. The source port ranges."
                                      }
                                    }
                                  },
                                  "resources": [
                                    {
                                      "type": "Microsoft.Network/networkSecurityGroups/securityRules",
                                      "apiVersion": "2023-11-01",
                                      "name": "[format('{0}/{1}', parameters('networkSecurityGroupName'), parameters('name'))]",
                                      "properties": {
                                        "access": "[parameters('access')]",
                                        "description": "[parameters('description')]",
                                        "destinationAddressPrefix": "[parameters('destinationAddressPrefix')]",
                                        "destinationAddressPrefixes": "[parameters('destinationAddressPrefixes')]",
                                        "destinationApplicationSecurityGroups": "[parameters('destinationApplicationSecurityGroups')]",
                                        "destinationPortRange": "[parameters('destinationPortRange')]",
                                        "destinationPortRanges": "[parameters('destinationPortRanges')]",
                                        "direction": "[parameters('direction')]",
                                        "priority": "[parameters('priority')]",
                                        "protocol": "[parameters('protocol')]",
                                        "sourceAddressPrefix": "[parameters('sourceAddressPrefix')]",
                                        "sourceAddressPrefixes": "[parameters('sourceAddressPrefixes')]",
                                        "sourceApplicationSecurityGroups": "[parameters('sourceApplicationSecurityGroups')]",
                                        "sourcePortRange": "[parameters('sourcePortRange')]",
                                        "sourcePortRanges": "[parameters('sourcePortRanges')]"
                                      }
                                    }
                                  ],
                                  "outputs": {
                                    "resourceGroupName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource group the security rule was deployed into."
                                      },
                                      "value": "[resourceGroup().name]"
                                    },
                                    "resourceId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource ID of the security rule."
                                      },
                                      "value": "[resourceId('Microsoft.Network/networkSecurityGroups/securityRules', parameters('networkSecurityGroupName'), parameters('name'))]"
                                    },
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the security rule."
                                      },
                                      "value": "[parameters('name')]"
                                    }
                                  }
                                }
                              },
                              "dependsOn": [
                                "networkSecurityGroup"
                              ]
                            }
                          },
                          "outputs": {
                            "resourceGroupName": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource group the network security group was deployed into."
                              },
                              "value": "[resourceGroup().name]"
                            },
                            "resourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource ID of the network security group."
                              },
                              "value": "[resourceId('Microsoft.Network/networkSecurityGroups', parameters('name'))]"
                            },
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "The name of the network security group."
                              },
                              "value": "[parameters('name')]"
                            },
                            "location": {
                              "type": "string",
                              "metadata": {
                                "description": "The location the resource was deployed into."
                              },
                              "value": "[reference('networkSecurityGroup', '2023-11-01', 'full').location]"
                            }
                          }
                        }
                      }
                    },
                    {
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "vmDeployment",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "name": {
                            "value": "[parameters('vmName')]"
                          },
                          "location": {
                            "value": "[parameters('location')]"
                          },
                          "tags": {
                            "value": "[parameters('tags')]"
                          },
                          "enableTelemetry": {
                            "value": "[parameters('enableTelemetry')]"
                          },
                          "osType": {
                            "value": "Windows"
                          },
                          "computerName": {
                            "value": "[parameters('vmName')]"
                          },
                          "adminUsername": {
                            "value": "[parameters('vmAdminUsername')]"
                          },
                          "adminPassword": {
                            "value": "[parameters('vmAdminPassword')]"
                          },
                          "encryptionAtHost": {
                            "value": false
                          },
                          "enableAutomaticUpdates": {
                            "value": true
                          },
                          "patchMode": {
                            "value": "AutomaticByPlatform"
                          },
                          "bypassPlatformSafetyChecksOnUserSchedule": {
                            "value": true
                          },
                          "maintenanceConfigurationResourceId": {
                            "value": "[resourceId('Microsoft.Maintenance/maintenanceConfigurations', format('dep-mc-{0}', parameters('vmName')))]"
                          },
                          "nicConfigurations": {
                            "value": [
                              {
                                "name": "[parameters('vmNetworkInterfaceName')]",
                                "enableAcceleratedNetworking": false,
                                "ipConfigurations": [
                                  {
                                    "name": "ipconfig1",
                                    "privateIPAllocationMethod": "Dynamic",
                                    "subnetResourceId": "[resourceId('Microsoft.Network/virtualNetworks/subnets', split(format('{0}/{1}', parameters('vmVnetName'), parameters('vmSubnetName')), '/')[0], split(format('{0}/{1}', parameters('vmVnetName'), parameters('vmSubnetName')), '/')[1])]"
                                  }
                                ]
                              }
                            ]
                          },
                          "osDisk": {
                            "value": {
                              "caching": "ReadWrite",
                              "createOption": "FromImage",
                              "deleteOption": "Delete",
                              "diskSizeGB": 128,
                              "managedDisk": {
                                "storageAccountType": "[parameters('storageAccountType')]"
                              }
                            }
                          },
                          "dataDisks": {
                            "value": [
                              {
                                "caching": "ReadWrite",
                                "createOption": "Empty",
                                "diskSizeGB": 128,
                                "lun": 0,
                                "managedDisk": {
                                  "storageAccountType": "[parameters('storageAccountType')]"
                                }
                              }
                            ]
                          },
                          "zone": {
                            "value": "[parameters('vmZone')]"
                          },
                          "vmSize": {
                            "value": "[parameters('vmSize')]"
                          },
                          "imageReference": {
                            "value": {
                              "publisher": "MicrosoftWindowsServer",
                              "offer": "WindowsServer",
                              "sku": "[parameters('vmWindowsOSVersion')]",
                              "version": "latest"
                            }
                          },
                          "extensionMonitoringAgentConfig": {
                            "value": {
                              "enabled": true,
                              "tags": "[parameters('tags')]",
                              "monitoringWorkspaceResourceId": "[parameters('logAnalyticsWorkspaceResourceId')]"
                            }
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "languageVersion": "2.0",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.28.1.47646",
                              "templateHash": "7195052428088092384"
                            },
                            "name": "Virtual Machines",
                            "description": "This module deploys a Virtual Machine with one or multiple NICs and optionally one or multiple public IPs.",
                            "owner": "Azure/module-maintainers"
                          },
                          "definitions": {
                            "managedIdentitiesType": {
                              "type": "object",
                              "properties": {
                                "systemAssigned": {
                                  "type": "bool",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Enables system assigned managed identity on the resource."
                                  }
                                },
                                "userAssignedResourceIds": {
                                  "type": "array",
                                  "items": {
                                    "type": "string"
                                  },
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The resource ID(s) to assign to the resource."
                                  }
                                }
                              },
                              "nullable": true
                            },
                            "lockType": {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Specify the name of lock."
                                  }
                                },
                                "kind": {
                                  "type": "string",
                                  "allowedValues": [
                                    "CanNotDelete",
                                    "None",
                                    "ReadOnly"
                                  ],
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Specify the type of lock."
                                  }
                                }
                              },
                              "nullable": true
                            },
                            "roleAssignmentType": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "roleDefinitionIdOrName": {
                                    "type": "string",
                                    "metadata": {
                                      "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                                    }
                                  },
                                  "principalId": {
                                    "type": "string",
                                    "metadata": {
                                      "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                                    }
                                  },
                                  "principalType": {
                                    "type": "string",
                                    "allowedValues": [
                                      "Device",
                                      "ForeignGroup",
                                      "Group",
                                      "ServicePrincipal",
                                      "User"
                                    ],
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The principal type of the assigned principal ID."
                                    }
                                  },
                                  "description": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The description of the role assignment."
                                    }
                                  },
                                  "condition": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                                    }
                                  },
                                  "conditionVersion": {
                                    "type": "string",
                                    "allowedValues": [
                                      "2.0"
                                    ],
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. Version of the condition."
                                    }
                                  },
                                  "delegatedManagedIdentityResourceId": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The Resource Id of the delegated managed identity resource."
                                    }
                                  }
                                }
                              },
                              "nullable": true
                            },
                            "osDiskType": {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The disk name."
                                  }
                                },
                                "diskSizeGB": {
                                  "type": "int",
                                  "metadata": {
                                    "description": "Required. Specifies the size of an empty data disk in gigabytes."
                                  }
                                },
                                "createOption": {
                                  "type": "string",
                                  "allowedValues": [
                                    "Attach",
                                    "Empty",
                                    "FromImage"
                                  ],
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Specifies how the virtual machine should be created."
                                  }
                                },
                                "deleteOption": {
                                  "type": "string",
                                  "allowedValues": [
                                    "Delete",
                                    "Detach"
                                  ],
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Specifies whether data disk should be deleted or detached upon VM deletion."
                                  }
                                },
                                "caching": {
                                  "type": "string",
                                  "allowedValues": [
                                    "None",
                                    "ReadOnly",
                                    "ReadWrite"
                                  ],
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Specifies the caching requirements."
                                  }
                                },
                                "managedDisk": {
                                  "type": "object",
                                  "properties": {
                                    "storageAccountType": {
                                      "type": "string",
                                      "allowedValues": [
                                        "PremiumV2_LRS",
                                        "Premium_LRS",
                                        "Premium_ZRS",
                                        "StandardSSD_LRS",
                                        "StandardSSD_ZRS",
                                        "Standard_LRS",
                                        "UltraSSD_LRS"
                                      ],
                                      "metadata": {
                                        "description": "Required. Specifies the storage account type for the managed disk."
                                      }
                                    },
                                    "diskEncryptionSetResourceId": {
                                      "type": "string",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. Specifies the customer managed disk encryption set resource id for the managed disk."
                                      }
                                    }
                                  },
                                  "metadata": {
                                    "description": "Required. The managed disk parameters."
                                  }
                                }
                              }
                            },
                            "dataDisksType": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "name": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The disk name."
                                    }
                                  },
                                  "lun": {
                                    "type": "int",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. Specifies the logical unit number of the data disk."
                                    }
                                  },
                                  "diskSizeGB": {
                                    "type": "int",
                                    "metadata": {
                                      "description": "Required. Specifies the size of an empty data disk in gigabytes."
                                    }
                                  },
                                  "createOption": {
                                    "type": "string",
                                    "allowedValues": [
                                      "Attach",
                                      "Empty",
                                      "FromImage"
                                    ],
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. Specifies how the virtual machine should be created."
                                    }
                                  },
                                  "deleteOption": {
                                    "type": "string",
                                    "allowedValues": [
                                      "Delete",
                                      "Detach"
                                    ],
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. Specifies whether data disk should be deleted or detached upon VM deletion."
                                    }
                                  },
                                  "caching": {
                                    "type": "string",
                                    "allowedValues": [
                                      "None",
                                      "ReadOnly",
                                      "ReadWrite"
                                    ],
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. Specifies the caching requirements."
                                    }
                                  },
                                  "managedDisk": {
                                    "type": "object",
                                    "properties": {
                                      "storageAccountType": {
                                        "type": "string",
                                        "allowedValues": [
                                          "PremiumV2_LRS",
                                          "Premium_LRS",
                                          "Premium_ZRS",
                                          "StandardSSD_LRS",
                                          "StandardSSD_ZRS",
                                          "Standard_LRS",
                                          "UltraSSD_LRS"
                                        ],
                                        "metadata": {
                                          "description": "Required. Specifies the storage account type for the managed disk."
                                        }
                                      },
                                      "diskEncryptionSetResourceId": {
                                        "type": "string",
                                        "nullable": true,
                                        "metadata": {
                                          "description": "Optional. Specifies the customer managed disk encryption set resource id for the managed disk."
                                        }
                                      }
                                    },
                                    "metadata": {
                                      "description": "Required. The managed disk parameters."
                                    }
                                  }
                                }
                              },
                              "nullable": true
                            }
                          },
                          "parameters": {
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The name of the virtual machine to be created. You should use a unique prefix to reduce name collisions in Active Directory."
                              }
                            },
                            "computerName": {
                              "type": "string",
                              "defaultValue": "[parameters('name')]",
                              "metadata": {
                                "description": "Optional. Can be used if the computer name needs to be different from the Azure VM resource name. If not used, the resource name will be used as computer name."
                              }
                            },
                            "vmSize": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. Specifies the size for the VMs."
                              }
                            },
                            "encryptionAtHost": {
                              "type": "bool",
                              "defaultValue": true,
                              "metadata": {
                                "description": "Optional. This property can be used by user in the request to enable or disable the Host Encryption for the virtual machine. This will enable the encryption for all the disks including Resource/Temp disk at host itself. For security reasons, it is recommended to set encryptionAtHost to True. Restrictions: Cannot be enabled if Azure Disk Encryption (guest-VM encryption using bitlocker/DM-Crypt) is enabled on your VMs."
                              }
                            },
                            "securityType": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. Specifies the SecurityType of the virtual machine. It is set as TrustedLaunch to enable UefiSettings."
                              }
                            },
                            "secureBootEnabled": {
                              "type": "bool",
                              "defaultValue": false,
                              "metadata": {
                                "description": "Optional. Specifies whether secure boot should be enabled on the virtual machine. This parameter is part of the UefiSettings. SecurityType should be set to TrustedLaunch to enable UefiSettings."
                              }
                            },
                            "vTpmEnabled": {
                              "type": "bool",
                              "defaultValue": false,
                              "metadata": {
                                "description": "Optional. Specifies whether vTPM should be enabled on the virtual machine. This parameter is part of the UefiSettings.  SecurityType should be set to TrustedLaunch to enable UefiSettings."
                              }
                            },
                            "imageReference": {
                              "type": "object",
                              "metadata": {
                                "description": "Required. OS image reference. In case of marketplace images, it's the combination of the publisher, offer, sku, version attributes. In case of custom images it's the resource ID of the custom image."
                              }
                            },
                            "plan": {
                              "type": "object",
                              "defaultValue": {},
                              "metadata": {
                                "description": "Optional. Specifies information about the marketplace image used to create the virtual machine. This element is only used for marketplace images. Before you can use a marketplace image from an API, you must enable the image for programmatic use."
                              }
                            },
                            "osDisk": {
                              "$ref": "#/definitions/osDiskType",
                              "metadata": {
                                "description": "Required. Specifies the OS disk. For security reasons, it is recommended to specify DiskEncryptionSet into the osDisk object.  Restrictions: DiskEncryptionSet cannot be enabled if Azure Disk Encryption (guest-VM encryption using bitlocker/DM-Crypt) is enabled on your VMs."
                              }
                            },
                            "dataDisks": {
                              "$ref": "#/definitions/dataDisksType",
                              "metadata": {
                                "description": "Optional. Specifies the data disks. For security reasons, it is recommended to specify DiskEncryptionSet into the dataDisk object. Restrictions: DiskEncryptionSet cannot be enabled if Azure Disk Encryption (guest-VM encryption using bitlocker/DM-Crypt) is enabled on your VMs."
                              }
                            },
                            "ultraSSDEnabled": {
                              "type": "bool",
                              "defaultValue": false,
                              "metadata": {
                                "description": "Optional. The flag that enables or disables a capability to have one or more managed data disks with UltraSSD_LRS storage account type on the VM or VMSS. Managed disks with storage account type UltraSSD_LRS can be added to a virtual machine or virtual machine scale set only if this property is enabled."
                              }
                            },
                            "adminUsername": {
                              "type": "securestring",
                              "metadata": {
                                "description": "Required. Administrator username."
                              }
                            },
                            "adminPassword": {
                              "type": "securestring",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. When specifying a Windows Virtual Machine, this value should be passed."
                              }
                            },
                            "customData": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. Custom data associated to the VM, this value will be automatically converted into base64 to account for the expected VM format."
                              }
                            },
                            "certificatesToBeInstalled": {
                              "type": "array",
                              "defaultValue": [],
                              "metadata": {
                                "description": "Optional. Specifies set of certificates that should be installed onto the virtual machine."
                              }
                            },
                            "priority": {
                              "type": "string",
                              "defaultValue": "Regular",
                              "allowedValues": [
                                "Regular",
                                "Low",
                                "Spot"
                              ],
                              "metadata": {
                                "description": "Optional. Specifies the priority for the virtual machine."
                              }
                            },
                            "enableEvictionPolicy": {
                              "type": "bool",
                              "defaultValue": false,
                              "metadata": {
                                "description": "Optional. Specifies the eviction policy for the low priority virtual machine. Will result in 'Deallocate' eviction policy."
                              }
                            },
                            "maxPriceForLowPriorityVm": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. Specifies the maximum price you are willing to pay for a low priority VM/VMSS. This price is in US Dollars."
                              }
                            },
                            "dedicatedHostId": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. Specifies resource ID about the dedicated host that the virtual machine resides in."
                              }
                            },
                            "licenseType": {
                              "type": "string",
                              "defaultValue": "",
                              "allowedValues": [
                                "RHEL_BYOS",
                                "SLES_BYOS",
                                "Windows_Client",
                                "Windows_Server",
                                ""
                              ],
                              "metadata": {
                                "description": "Optional. Specifies that the image or disk that is being used was licensed on-premises."
                              }
                            },
                            "publicKeys": {
                              "type": "array",
                              "defaultValue": [],
                              "metadata": {
                                "description": "Optional. The list of SSH public keys used to authenticate with linux based VMs."
                              }
                            },
                            "managedIdentities": {
                              "$ref": "#/definitions/managedIdentitiesType",
                              "metadata": {
                                "description": "Optional. The managed identity definition for this resource. The system-assigned managed identity will automatically be enabled if extensionAadJoinConfig.enabled = \"True\"."
                              }
                            },
                            "bootDiagnostics": {
                              "type": "bool",
                              "defaultValue": false,
                              "metadata": {
                                "description": "Optional. Whether boot diagnostics should be enabled on the Virtual Machine. Boot diagnostics will be enabled with a managed storage account if no bootDiagnosticsStorageAccountName value is provided. If bootDiagnostics and bootDiagnosticsStorageAccountName values are not provided, boot diagnostics will be disabled."
                              }
                            },
                            "bootDiagnosticStorageAccountName": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. Custom storage account used to store boot diagnostic information. Boot diagnostics will be enabled with a custom storage account if a value is provided."
                              }
                            },
                            "bootDiagnosticStorageAccountUri": {
                              "type": "string",
                              "defaultValue": "[format('.blob.{0}/', environment().suffixes.storage)]",
                              "metadata": {
                                "description": "Optional. Storage account boot diagnostic base URI."
                              }
                            },
                            "proximityPlacementGroupResourceId": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. Resource ID of a proximity placement group."
                              }
                            },
                            "virtualMachineScaleSetResourceId": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. Resource ID of a virtual machine scale set, where the VM should be added."
                              }
                            },
                            "availabilitySetResourceId": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. Resource ID of an availability set. Cannot be used in combination with availability zone nor scale set."
                              }
                            },
                            "galleryApplications": {
                              "type": "array",
                              "defaultValue": [],
                              "metadata": {
                                "description": "Optional. Specifies the gallery applications that should be made available to the VM/VMSS."
                              }
                            },
                            "zone": {
                              "type": "int",
                              "allowedValues": [
                                0,
                                1,
                                2,
                                3
                              ],
                              "metadata": {
                                "description": "Required. If set to 1, 2 or 3, the availability zone for all VMs is hardcoded to that value. If zero, then availability zones is not used. Cannot be used in combination with availability set nor scale set."
                              }
                            },
                            "nicConfigurations": {
                              "type": "array",
                              "metadata": {
                                "description": "Required. Configures NICs and PIPs."
                              }
                            },
                            "backupVaultName": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. Recovery service vault name to add VMs to backup."
                              }
                            },
                            "backupVaultResourceGroup": {
                              "type": "string",
                              "defaultValue": "[resourceGroup().name]",
                              "metadata": {
                                "description": "Optional. Resource group of the backup recovery service vault. If not provided the current resource group name is considered by default."
                              }
                            },
                            "backupPolicyName": {
                              "type": "string",
                              "defaultValue": "DefaultPolicy",
                              "metadata": {
                                "description": "Optional. Backup policy the VMs should be using for backup. If not provided, it will use the DefaultPolicy from the backup recovery service vault."
                              }
                            },
                            "autoShutdownConfig": {
                              "type": "object",
                              "defaultValue": {},
                              "metadata": {
                                "description": "Optional. The configuration for auto-shutdown."
                              }
                            },
                            "maintenanceConfigurationResourceId": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. The resource Id of a maintenance configuration for this VM."
                              }
                            },
                            "allowExtensionOperations": {
                              "type": "bool",
                              "defaultValue": true,
                              "metadata": {
                                "description": "Optional. Specifies whether extension operations should be allowed on the virtual machine. This may only be set to False when no extensions are present on the virtual machine."
                              }
                            },
                            "extensionDomainJoinPassword": {
                              "type": "securestring",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. Required if name is specified. Password of the user specified in user parameter."
                              }
                            },
                            "extensionDomainJoinConfig": {
                              "type": "secureObject",
                              "defaultValue": {},
                              "metadata": {
                                "description": "Optional. The configuration for the [Domain Join] extension. Must at least contain the [\"enabled\": true] property to be executed."
                              }
                            },
                            "extensionAadJoinConfig": {
                              "type": "object",
                              "defaultValue": {
                                "enabled": false
                              },
                              "metadata": {
                                "description": "Optional. The configuration for the [AAD Join] extension. Must at least contain the [\"enabled\": true] property to be executed. To enroll in Intune, add the setting mdmId: \"0000000a-0000-0000-c000-000000000000\"."
                              }
                            },
                            "extensionAntiMalwareConfig": {
                              "type": "object",
                              "defaultValue": {
                                "enabled": false
                              },
                              "metadata": {
                                "description": "Optional. The configuration for the [Anti Malware] extension. Must at least contain the [\"enabled\": true] property to be executed."
                              }
                            },
                            "extensionMonitoringAgentConfig": {
                              "type": "object",
                              "defaultValue": {
                                "enabled": false
                              },
                              "metadata": {
                                "description": "Optional. The configuration for the [Monitoring Agent] extension. Must at least contain the [\"enabled\": true] property to be executed."
                              }
                            },
                            "extensionDependencyAgentConfig": {
                              "type": "object",
                              "defaultValue": {
                                "enabled": false
                              },
                              "metadata": {
                                "description": "Optional. The configuration for the [Dependency Agent] extension. Must at least contain the [\"enabled\": true] property to be executed."
                              }
                            },
                            "extensionNetworkWatcherAgentConfig": {
                              "type": "object",
                              "defaultValue": {
                                "enabled": false
                              },
                              "metadata": {
                                "description": "Optional. The configuration for the [Network Watcher Agent] extension. Must at least contain the [\"enabled\": true] property to be executed."
                              }
                            },
                            "extensionAzureDiskEncryptionConfig": {
                              "type": "object",
                              "defaultValue": {
                                "enabled": false
                              },
                              "metadata": {
                                "description": "Optional. The configuration for the [Azure Disk Encryption] extension. Must at least contain the [\"enabled\": true] property to be executed. Restrictions: Cannot be enabled on disks that have encryption at host enabled. Managed disks encrypted using Azure Disk Encryption cannot be encrypted using customer-managed keys."
                              }
                            },
                            "extensionDSCConfig": {
                              "type": "object",
                              "defaultValue": {
                                "enabled": false
                              },
                              "metadata": {
                                "description": "Optional. The configuration for the [Desired State Configuration] extension. Must at least contain the [\"enabled\": true] property to be executed."
                              }
                            },
                            "extensionCustomScriptConfig": {
                              "type": "object",
                              "defaultValue": {
                                "enabled": false,
                                "fileData": []
                              },
                              "metadata": {
                                "description": "Optional. The configuration for the [Custom Script] extension. Must at least contain the [\"enabled\": true] property to be executed."
                              }
                            },
                            "extensionNvidiaGpuDriverWindows": {
                              "type": "object",
                              "defaultValue": {
                                "enabled": false
                              },
                              "metadata": {
                                "description": "Optional. The configuration for the [Nvidia Gpu Driver Windows] extension. Must at least contain the [\"enabled\": true] property to be executed."
                              }
                            },
                            "extensionHostPoolRegistration": {
                              "type": "object",
                              "defaultValue": {
                                "enabled": false
                              },
                              "metadata": {
                                "description": "Optional. The configuration for the [Host Pool Registration] extension. Must at least contain the [\"enabled\": true] property to be executed. Needs a managed identy."
                              }
                            },
                            "extensionGuestConfigurationExtension": {
                              "type": "object",
                              "defaultValue": {
                                "enabled": false
                              },
                              "metadata": {
                                "description": "Optional. The configuration for the [Guest Configuration] extension. Must at least contain the [\"enabled\": true] property to be executed. Needs a managed identy."
                              }
                            },
                            "guestConfiguration": {
                              "type": "object",
                              "defaultValue": {},
                              "metadata": {
                                "description": "Optional. The guest configuration for the virtual machine. Needs the Guest Configuration extension to be enabled."
                              }
                            },
                            "extensionCustomScriptProtectedSetting": {
                              "type": "secureObject",
                              "defaultValue": {},
                              "metadata": {
                                "description": "Optional. An object that contains the extension specific protected settings."
                              }
                            },
                            "extensionGuestConfigurationExtensionProtectedSettings": {
                              "type": "secureObject",
                              "defaultValue": {},
                              "metadata": {
                                "description": "Optional. An object that contains the extension specific protected settings."
                              }
                            },
                            "location": {
                              "type": "string",
                              "defaultValue": "[resourceGroup().location]",
                              "metadata": {
                                "description": "Optional. Location for all resources."
                              }
                            },
                            "lock": {
                              "$ref": "#/definitions/lockType",
                              "metadata": {
                                "description": "Optional. The lock settings of the service."
                              }
                            },
                            "roleAssignments": {
                              "$ref": "#/definitions/roleAssignmentType",
                              "metadata": {
                                "description": "Optional. Array of role assignments to create."
                              }
                            },
                            "tags": {
                              "type": "object",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Tags of the resource."
                              }
                            },
                            "enableTelemetry": {
                              "type": "bool",
                              "defaultValue": true,
                              "metadata": {
                                "description": "Optional. Enable/Disable usage telemetry for module."
                              }
                            },
                            "baseTime": {
                              "type": "string",
                              "defaultValue": "[utcNow('u')]",
                              "metadata": {
                                "description": "Generated. Do not provide a value! This date value is used to generate a registration token."
                              }
                            },
                            "sasTokenValidityLength": {
                              "type": "string",
                              "defaultValue": "PT8H",
                              "metadata": {
                                "description": "Optional. SAS token validity length to use to download files from storage accounts. Usage: 'PT8H' - valid for 8 hours; 'P5D' - valid for 5 days; 'P1Y' - valid for 1 year. When not provided, the SAS token will be valid for 8 hours."
                              }
                            },
                            "osType": {
                              "type": "string",
                              "allowedValues": [
                                "Windows",
                                "Linux"
                              ],
                              "metadata": {
                                "description": "Required. The chosen OS type."
                              }
                            },
                            "disablePasswordAuthentication": {
                              "type": "bool",
                              "defaultValue": false,
                              "metadata": {
                                "description": "Optional. Specifies whether password authentication should be disabled."
                              }
                            },
                            "provisionVMAgent": {
                              "type": "bool",
                              "defaultValue": true,
                              "metadata": {
                                "description": "Optional. Indicates whether virtual machine agent should be provisioned on the virtual machine. When this property is not specified in the request body, default behavior is to set it to true. This will ensure that VM Agent is installed on the VM so that extensions can be added to the VM later."
                              }
                            },
                            "enableAutomaticUpdates": {
                              "type": "bool",
                              "defaultValue": true,
                              "metadata": {
                                "description": "Optional. Indicates whether Automatic Updates is enabled for the Windows virtual machine. Default value is true. When patchMode is set to Manual, this parameter must be set to false. For virtual machine scale sets, this property can be updated and updates will take effect on OS reprovisioning."
                              }
                            },
                            "patchMode": {
                              "type": "string",
                              "defaultValue": "",
                              "allowedValues": [
                                "AutomaticByPlatform",
                                "AutomaticByOS",
                                "Manual",
                                "ImageDefault",
                                ""
                              ],
                              "metadata": {
                                "description": "Optional. VM guest patching orchestration mode. 'AutomaticByOS' & 'Manual' are for Windows only, 'ImageDefault' for Linux only. Refer to 'https://learn.microsoft.com/en-us/azure/virtual-machines/automatic-vm-guest-patching'."
                              }
                            },
                            "bypassPlatformSafetyChecksOnUserSchedule": {
                              "type": "bool",
                              "defaultValue": true,
                              "metadata": {
                                "description": "Optional. Enables customer to schedule patching without accidental upgrades."
                              }
                            },
                            "rebootSetting": {
                              "type": "string",
                              "defaultValue": "IfRequired",
                              "allowedValues": [
                                "Always",
                                "IfRequired",
                                "Never",
                                "Unknown"
                              ],
                              "metadata": {
                                "description": "Optional. Specifies the reboot setting for all AutomaticByPlatform patch installation operations."
                              }
                            },
                            "patchAssessmentMode": {
                              "type": "string",
                              "defaultValue": "ImageDefault",
                              "allowedValues": [
                                "AutomaticByPlatform",
                                "ImageDefault"
                              ],
                              "metadata": {
                                "description": "Optional. VM guest patching assessment mode. Set it to 'AutomaticByPlatform' to enable automatically check for updates every 24 hours."
                              }
                            },
                            "timeZone": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. Specifies the time zone of the virtual machine. e.g. 'Pacific Standard Time'. Possible values can be `TimeZoneInfo.id` value from time zones returned by `TimeZoneInfo.GetSystemTimeZones`."
                              }
                            },
                            "additionalUnattendContent": {
                              "type": "array",
                              "defaultValue": [],
                              "metadata": {
                                "description": "Optional. Specifies additional XML formatted information that can be included in the Unattend.xml file, which is used by Windows Setup. Contents are defined by setting name, component name, and the pass in which the content is applied."
                              }
                            },
                            "winRM": {
                              "type": "array",
                              "defaultValue": [],
                              "metadata": {
                                "description": "Optional. Specifies the Windows Remote Management listeners. This enables remote Windows PowerShell. - WinRMConfiguration object."
                              }
                            },
                            "configurationProfile": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. The configuration profile of automanage. Either '/providers/Microsoft.Automanage/bestPractices/AzureBestPracticesProduction', 'providers/Microsoft.Automanage/bestPractices/AzureBestPracticesDevTest' or the resource Id of custom profile."
                              }
                            }
                          },
                          "variables": {
                            "copy": [
                              {
                                "name": "publicKeysFormatted",
                                "count": "[length(parameters('publicKeys'))]",
                                "input": {
                                  "path": "[parameters('publicKeys')[copyIndex('publicKeysFormatted')].path]",
                                  "keyData": "[parameters('publicKeys')[copyIndex('publicKeysFormatted')].keyData]"
                                }
                              }
                            ],
                            "linuxConfiguration": {
                              "disablePasswordAuthentication": "[parameters('disablePasswordAuthentication')]",
                              "ssh": {
                                "publicKeys": "[variables('publicKeysFormatted')]"
                              },
                              "provisionVMAgent": "[parameters('provisionVMAgent')]",
                              "patchSettings": "[if(and(parameters('provisionVMAgent'), or(equals(toLower(parameters('patchMode')), toLower('AutomaticByPlatform')), equals(toLower(parameters('patchMode')), toLower('ImageDefault')))), createObject('patchMode', parameters('patchMode'), 'assessmentMode', parameters('patchAssessmentMode'), 'automaticByPlatformSettings', if(equals(toLower(parameters('patchMode')), toLower('AutomaticByPlatform')), createObject('bypassPlatformSafetyChecksOnUserSchedule', parameters('bypassPlatformSafetyChecksOnUserSchedule'), 'rebootSetting', parameters('rebootSetting')), null())), null())]"
                            },
                            "windowsConfiguration": {
                              "provisionVMAgent": "[parameters('provisionVMAgent')]",
                              "enableAutomaticUpdates": "[parameters('enableAutomaticUpdates')]",
                              "patchSettings": "[if(and(parameters('provisionVMAgent'), or(or(equals(toLower(parameters('patchMode')), toLower('AutomaticByPlatform')), equals(toLower(parameters('patchMode')), toLower('AutomaticByOS'))), equals(toLower(parameters('patchMode')), toLower('Manual')))), createObject('patchMode', parameters('patchMode'), 'assessmentMode', parameters('patchAssessmentMode'), 'automaticByPlatformSettings', if(equals(toLower(parameters('patchMode')), toLower('AutomaticByPlatform')), createObject('bypassPlatformSafetyChecksOnUserSchedule', parameters('bypassPlatformSafetyChecksOnUserSchedule'), 'rebootSetting', parameters('rebootSetting')), null())), null())]",
                              "timeZone": "[if(empty(parameters('timeZone')), null(), parameters('timeZone'))]",
                              "additionalUnattendContent": "[if(empty(parameters('additionalUnattendContent')), null(), parameters('additionalUnattendContent'))]",
                              "winRM": "[if(not(empty(parameters('winRM'))), createObject('listeners', parameters('winRM')), null())]"
                            },
                            "accountSasProperties": {
                              "signedServices": "b",
                              "signedPermission": "r",
                              "signedExpiry": "[dateTimeAdd(parameters('baseTime'), parameters('sasTokenValidityLength'))]",
                              "signedResourceTypes": "o",
                              "signedProtocol": "https"
                            },
                            "formattedUserAssignedIdentities": "[reduce(map(coalesce(tryGet(parameters('managedIdentities'), 'userAssignedResourceIds'), createArray()), lambda('id', createObject(format('{0}', lambdaVariables('id')), createObject()))), createObject(), lambda('cur', 'next', union(lambdaVariables('cur'), lambdaVariables('next'))))]",
                            "identity": "[if(not(empty(parameters('managedIdentities'))), createObject('type', if(if(parameters('extensionAadJoinConfig').enabled, true(), coalesce(tryGet(parameters('managedIdentities'), 'systemAssigned'), false())), if(not(empty(coalesce(tryGet(parameters('managedIdentities'), 'userAssignedResourceIds'), createObject()))), 'SystemAssigned, UserAssigned', 'SystemAssigned'), if(not(empty(coalesce(tryGet(parameters('managedIdentities'), 'userAssignedResourceIds'), createObject()))), 'UserAssigned', null())), 'userAssignedIdentities', if(not(empty(variables('formattedUserAssignedIdentities'))), variables('formattedUserAssignedIdentities'), null())), null())]",
                            "builtInRoleNames": {
                              "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                              "Data Operator for Managed Disks": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '959f8984-c045-4866-89c7-12bf9737be2e')]",
                              "Desktop Virtualization Power On Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '489581de-a3bd-480d-9518-53dea7416b33')]",
                              "Desktop Virtualization Power On Off Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '40c5ff49-9181-41f8-ae61-143b0e78555e')]",
                              "Desktop Virtualization Virtual Machine Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'a959dbd1-f747-45e3-8ba6-dd80f235f97c')]",
                              "DevTest Labs User": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '76283e04-6283-4c54-8f91-bcf1374a3c64')]",
                              "Disk Backup Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '3e5e47e6-65f7-47ef-90b5-e5dd4d455f24')]",
                              "Disk Pool Operator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '60fc6e62-5479-42d4-8bf4-67625fcc2840')]",
                              "Disk Restore Operator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b50d9833-a0cb-478e-945f-707fcc997c13')]",
                              "Disk Snapshot Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '7efff54f-a5b4-42b5-a1c5-5411624893ce')]",
                              "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                              "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                              "Role Based Access Control Administrator (Preview)": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]",
                              "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]",
                              "Virtual Machine Administrator Login": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '1c0163c0-47e6-4577-8991-ea5c82e286e4')]",
                              "Virtual Machine Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '9980e02c-c2be-4d73-94e8-173b1dc7cf3c')]",
                              "Virtual Machine User Login": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'fb879df8-f326-4884-b1cf-06f3ad86be52')]",
                              "VM Scanner Operator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'd24ecba3-c1f4-40fa-a7bb-4588a071e8fd')]"
                            }
                          },
                          "resources": {
                            "avmTelemetry": {
                              "condition": "[parameters('enableTelemetry')]",
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2023-07-01",
                              "name": "[format('46d3xbcp.res.compute-virtualmachine.{0}.{1}', replace('0.5.1', '.', '-'), substring(uniqueString(deployment().name, parameters('location')), 0, 4))]",
                              "properties": {
                                "mode": "Incremental",
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "resources": [],
                                  "outputs": {
                                    "telemetry": {
                                      "type": "String",
                                      "value": "For more information, see https://aka.ms/avm/TelemetryInfo"
                                    }
                                  }
                                }
                              }
                            },
                            "vm": {
                              "type": "Microsoft.Compute/virtualMachines",
                              "apiVersion": "2023-09-01",
                              "name": "[parameters('name')]",
                              "location": "[parameters('location')]",
                              "identity": "[variables('identity')]",
                              "tags": "[parameters('tags')]",
                              "zones": "[if(not(equals(parameters('zone'), 0)), array(string(parameters('zone'))), null())]",
                              "plan": "[if(not(empty(parameters('plan'))), parameters('plan'), null())]",
                              "properties": {
                                "hardwareProfile": {
                                  "vmSize": "[parameters('vmSize')]"
                                },
                                "securityProfile": {
                                  "encryptionAtHost": "[if(parameters('encryptionAtHost'), parameters('encryptionAtHost'), null())]",
                                  "securityType": "[parameters('securityType')]",
                                  "uefiSettings": "[if(equals(parameters('securityType'), 'TrustedLaunch'), createObject('secureBootEnabled', parameters('secureBootEnabled'), 'vTpmEnabled', parameters('vTpmEnabled')), null())]"
                                },
                                "storageProfile": {
                                  "copy": [
                                    {
                                      "name": "dataDisks",
                                      "count": "[length(coalesce(parameters('dataDisks'), createArray()))]",
                                      "input": {
                                        "lun": "[coalesce(tryGet(coalesce(parameters('dataDisks'), createArray())[copyIndex('dataDisks')], 'lun'), copyIndex('dataDisks'))]",
                                        "name": "[coalesce(tryGet(coalesce(parameters('dataDisks'), createArray())[copyIndex('dataDisks')], 'name'), format('{0}-disk-data-{1}', parameters('name'), padLeft(add(copyIndex('dataDisks'), 1), 2, '0')))]",
                                        "diskSizeGB": "[coalesce(parameters('dataDisks'), createArray())[copyIndex('dataDisks')].diskSizeGB]",
                                        "createOption": "[coalesce(tryGet(coalesce(parameters('dataDisks'), createArray())[copyIndex('dataDisks')], 'createoption'), 'Empty')]",
                                        "deleteOption": "[coalesce(tryGet(coalesce(parameters('dataDisks'), createArray())[copyIndex('dataDisks')], 'deleteOption'), 'Delete')]",
                                        "caching": "[coalesce(tryGet(coalesce(parameters('dataDisks'), createArray())[copyIndex('dataDisks')], 'caching'), 'ReadOnly')]",
                                        "managedDisk": {
                                          "storageAccountType": "[coalesce(parameters('dataDisks'), createArray())[copyIndex('dataDisks')].managedDisk.storageAccountType]",
                                          "diskEncryptionSet": {
                                            "id": "[tryGet(coalesce(parameters('dataDisks'), createArray())[copyIndex('dataDisks')].managedDisk, 'diskEncryptionSetResourceId')]"
                                          }
                                        }
                                      }
                                    }
                                  ],
                                  "imageReference": "[parameters('imageReference')]",
                                  "osDisk": {
                                    "name": "[coalesce(tryGet(parameters('osDisk'), 'name'), format('{0}-disk-os-01', parameters('name')))]",
                                    "createOption": "[coalesce(tryGet(parameters('osDisk'), 'createOption'), 'FromImage')]",
                                    "deleteOption": "[coalesce(tryGet(parameters('osDisk'), 'deleteOption'), 'Delete')]",
                                    "diskSizeGB": "[parameters('osDisk').diskSizeGB]",
                                    "caching": "[coalesce(tryGet(parameters('osDisk'), 'caching'), 'ReadOnly')]",
                                    "managedDisk": {
                                      "storageAccountType": "[parameters('osDisk').managedDisk.storageAccountType]",
                                      "diskEncryptionSet": {
                                        "id": "[tryGet(parameters('osDisk').managedDisk, 'diskEncryptionSetResourceId')]"
                                      }
                                    }
                                  }
                                },
                                "additionalCapabilities": {
                                  "ultraSSDEnabled": "[parameters('ultraSSDEnabled')]"
                                },
                                "osProfile": {
                                  "computerName": "[parameters('computerName')]",
                                  "adminUsername": "[parameters('adminUsername')]",
                                  "adminPassword": "[parameters('adminPassword')]",
                                  "customData": "[if(not(empty(parameters('customData'))), base64(parameters('customData')), null())]",
                                  "windowsConfiguration": "[if(equals(parameters('osType'), 'Windows'), variables('windowsConfiguration'), null())]",
                                  "linuxConfiguration": "[if(equals(parameters('osType'), 'Linux'), variables('linuxConfiguration'), null())]",
                                  "secrets": "[parameters('certificatesToBeInstalled')]",
                                  "allowExtensionOperations": "[parameters('allowExtensionOperations')]"
                                },
                                "networkProfile": {
                                  "copy": [
                                    {
                                      "name": "networkInterfaces",
                                      "count": "[length(parameters('nicConfigurations'))]",
                                      "input": {
                                        "properties": {
                                          "deleteOption": "[if(contains(parameters('nicConfigurations')[copyIndex('networkInterfaces')], 'deleteOption'), parameters('nicConfigurations')[copyIndex('networkInterfaces')].deleteOption, 'Delete')]",
                                          "primary": "[if(equals(copyIndex('networkInterfaces'), 0), true(), false())]"
                                        },
                                        "id": "[resourceId('Microsoft.Network/networkInterfaces', if(contains(parameters('nicConfigurations')[copyIndex('networkInterfaces')], 'name'), parameters('nicConfigurations')[copyIndex('networkInterfaces')].name, format('{0}{1}', parameters('name'), parameters('nicConfigurations')[copyIndex('networkInterfaces')].nicSuffix)))]"
                                      }
                                    }
                                  ]
                                },
                                "diagnosticsProfile": {
                                  "bootDiagnostics": {
                                    "enabled": "[if(not(empty(parameters('bootDiagnosticStorageAccountName'))), true(), parameters('bootDiagnostics'))]",
                                    "storageUri": "[if(not(empty(parameters('bootDiagnosticStorageAccountName'))), format('https://{0}{1}', parameters('bootDiagnosticStorageAccountName'), parameters('bootDiagnosticStorageAccountUri')), null())]"
                                  }
                                },
                                "applicationProfile": "[if(not(empty(parameters('galleryApplications'))), createObject('galleryApplications', parameters('galleryApplications')), null())]",
                                "availabilitySet": "[if(not(empty(parameters('availabilitySetResourceId'))), createObject('id', parameters('availabilitySetResourceId')), null())]",
                                "proximityPlacementGroup": "[if(not(empty(parameters('proximityPlacementGroupResourceId'))), createObject('id', parameters('proximityPlacementGroupResourceId')), null())]",
                                "virtualMachineScaleSet": "[if(not(empty(parameters('virtualMachineScaleSetResourceId'))), createObject('id', parameters('virtualMachineScaleSetResourceId')), null())]",
                                "priority": "[parameters('priority')]",
                                "evictionPolicy": "[if(parameters('enableEvictionPolicy'), 'Deallocate', null())]",
                                "billingProfile": "[if(and(not(empty(parameters('priority'))), not(empty(parameters('maxPriceForLowPriorityVm')))), createObject('maxPrice', json(parameters('maxPriceForLowPriorityVm'))), null())]",
                                "host": "[if(not(empty(parameters('dedicatedHostId'))), createObject('id', parameters('dedicatedHostId')), null())]",
                                "licenseType": "[if(not(empty(parameters('licenseType'))), parameters('licenseType'), null())]"
                              },
                              "dependsOn": [
                                "vm_nic"
                              ]
                            },
                            "vm_configurationAssignment": {
                              "condition": "[not(empty(parameters('maintenanceConfigurationResourceId')))]",
                              "type": "Microsoft.Maintenance/configurationAssignments",
                              "apiVersion": "2023-04-01",
                              "scope": "[format('Microsoft.Compute/virtualMachines/{0}', parameters('name'))]",
                              "name": "[format('{0}assignment', parameters('name'))]",
                              "location": "[parameters('location')]",
                              "properties": {
                                "maintenanceConfigurationId": "[parameters('maintenanceConfigurationResourceId')]",
                                "resourceId": "[resourceId('Microsoft.Compute/virtualMachines', parameters('name'))]"
                              },
                              "dependsOn": [
                                "vm"
                              ]
                            },
                            "vm_configurationProfileAssignment": {
                              "condition": "[not(empty(parameters('configurationProfile')))]",
                              "type": "Microsoft.Automanage/configurationProfileAssignments",
                              "apiVersion": "2022-05-04",
                              "scope": "[format('Microsoft.Compute/virtualMachines/{0}', parameters('name'))]",
                              "name": "default",
                              "properties": {
                                "configurationProfile": "[parameters('configurationProfile')]"
                              },
                              "dependsOn": [
                                "vm"
                              ]
                            },
                            "vm_autoShutdownConfiguration": {
                              "condition": "[not(empty(parameters('autoShutdownConfig')))]",
                              "type": "Microsoft.DevTestLab/schedules",
                              "apiVersion": "2018-09-15",
                              "name": "[format('shutdown-computevm-{0}', parameters('name'))]",
                              "location": "[parameters('location')]",
                              "properties": {
                                "status": "[if(contains(parameters('autoShutdownConfig'), 'status'), parameters('autoShutdownConfig').status, 'Disabled')]",
                                "targetResourceId": "[resourceId('Microsoft.Compute/virtualMachines', parameters('name'))]",
                                "taskType": "ComputeVmShutdownTask",
                                "dailyRecurrence": {
                                  "time": "[if(contains(parameters('autoShutdownConfig'), 'dailyRecurrenceTime'), parameters('autoShutdownConfig').dailyRecurrenceTime, '19:00')]"
                                },
                                "timeZoneId": "[if(contains(parameters('autoShutdownConfig'), 'timeZone'), parameters('autoShutdownConfig').timeZone, 'UTC')]",
                                "notificationSettings": "[if(contains(parameters('autoShutdownConfig'), 'notificationStatus'), createObject('status', if(contains(parameters('autoShutdownConfig'), 'notificationStatus'), parameters('autoShutdownConfig').notificationStatus, 'Disabled'), 'emailRecipient', if(contains(parameters('autoShutdownConfig'), 'notificationEmail'), parameters('autoShutdownConfig').notificationEmail, ''), 'notificationLocale', if(contains(parameters('autoShutdownConfig'), 'notificationLocale'), parameters('autoShutdownConfig').notificationLocale, 'en'), 'webhookUrl', if(contains(parameters('autoShutdownConfig'), 'notificationWebhookUrl'), parameters('autoShutdownConfig').notificationWebhookUrl, ''), 'timeInMinutes', if(contains(parameters('autoShutdownConfig'), 'notificationTimeInMinutes'), parameters('autoShutdownConfig').notificationTimeInMinutes, 30)), null())]"
                              },
                              "dependsOn": [
                                "vm"
                              ]
                            },
                            "vm_logAnalyticsWorkspace": {
                              "condition": "[not(empty(tryGet(parameters('extensionMonitoringAgentConfig'), 'monitoringWorkspaceId')))]",
                              "existing": true,
                              "type": "Microsoft.OperationalInsights/workspaces",
                              "apiVersion": "2021-06-01",
                              "subscriptionId": "[split(if(not(empty(coalesce(tryGet(parameters('extensionMonitoringAgentConfig'), 'monitoringWorkspaceId'), ''))), parameters('extensionMonitoringAgentConfig').monitoringWorkspaceId, '//'), '/')[2]]",
                              "resourceGroup": "[split(if(not(empty(coalesce(tryGet(parameters('extensionMonitoringAgentConfig'), 'monitoringWorkspaceId'), ''))), parameters('extensionMonitoringAgentConfig').monitoringWorkspaceId, '////'), '/')[4]]",
                              "name": "[last(split(if(not(empty(coalesce(tryGet(parameters('extensionMonitoringAgentConfig'), 'monitoringWorkspaceId'), ''))), parameters('extensionMonitoringAgentConfig').monitoringWorkspaceId, 'law'), '/'))]"
                            },
                            "AzureWindowsBaseline": {
                              "condition": "[not(empty(parameters('guestConfiguration')))]",
                              "type": "Microsoft.GuestConfiguration/guestConfigurationAssignments",
                              "apiVersion": "2020-06-25",
                              "scope": "[format('Microsoft.Compute/virtualMachines/{0}', parameters('name'))]",
                              "name": "AzureWindowsBaseline",
                              "location": "[parameters('location')]",
                              "properties": {
                                "guestConfiguration": "[parameters('guestConfiguration')]"
                              },
                              "dependsOn": [
                                "vm",
                                "vm_azureGuestConfigurationExtension"
                              ]
                            },
                            "vm_lock": {
                              "condition": "[and(not(empty(coalesce(parameters('lock'), createObject()))), not(equals(tryGet(parameters('lock'), 'kind'), 'None')))]",
                              "type": "Microsoft.Authorization/locks",
                              "apiVersion": "2020-05-01",
                              "scope": "[format('Microsoft.Compute/virtualMachines/{0}', parameters('name'))]",
                              "name": "[coalesce(tryGet(parameters('lock'), 'name'), format('lock-{0}', parameters('name')))]",
                              "properties": {
                                "level": "[coalesce(tryGet(parameters('lock'), 'kind'), '')]",
                                "notes": "[if(equals(tryGet(parameters('lock'), 'kind'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot delete or modify the resource or child resources.')]"
                              },
                              "dependsOn": [
                                "vm"
                              ]
                            },
                            "vm_roleAssignments": {
                              "copy": {
                                "name": "vm_roleAssignments",
                                "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]"
                              },
                              "type": "Microsoft.Authorization/roleAssignments",
                              "apiVersion": "2022-04-01",
                              "scope": "[format('Microsoft.Compute/virtualMachines/{0}', parameters('name'))]",
                              "name": "[guid(resourceId('Microsoft.Compute/virtualMachines', parameters('name')), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].principalId, coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName)]",
                              "properties": {
                                "roleDefinitionId": "[if(contains(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName), variables('builtInRoleNames')[coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName], if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName)))]",
                                "principalId": "[coalesce(parameters('roleAssignments'), createArray())[copyIndex()].principalId]",
                                "description": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'description')]",
                                "principalType": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'principalType')]",
                                "condition": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'condition')]",
                                "conditionVersion": "[if(not(empty(tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                                "delegatedManagedIdentityResourceId": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
                              },
                              "dependsOn": [
                                "vm"
                              ]
                            },
                            "vm_nic": {
                              "copy": {
                                "name": "vm_nic",
                                "count": "[length(parameters('nicConfigurations'))]"
                              },
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "[format('{0}-VM-Nic-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "networkInterfaceName": "[if(contains(parameters('nicConfigurations')[copyIndex()], 'name'), createObject('value', parameters('nicConfigurations')[copyIndex()].name), createObject('value', format('{0}{1}', parameters('name'), parameters('nicConfigurations')[copyIndex()].nicSuffix)))]",
                                  "virtualMachineName": {
                                    "value": "[parameters('name')]"
                                  },
                                  "location": {
                                    "value": "[parameters('location')]"
                                  },
                                  "enableIPForwarding": "[if(contains(parameters('nicConfigurations')[copyIndex()], 'enableIPForwarding'), createObject('value', parameters('nicConfigurations')[copyIndex()].enableIPForwarding), createObject('value', false()))]",
                                  "enableAcceleratedNetworking": "[if(contains(parameters('nicConfigurations')[copyIndex()], 'enableAcceleratedNetworking'), createObject('value', parameters('nicConfigurations')[copyIndex()].enableAcceleratedNetworking), createObject('value', true()))]",
                                  "dnsServers": "[if(contains(parameters('nicConfigurations')[copyIndex()], 'dnsServers'), if(not(empty(parameters('nicConfigurations')[copyIndex()].dnsServers)), createObject('value', parameters('nicConfigurations')[copyIndex()].dnsServers), createObject('value', createArray())), createObject('value', createArray()))]",
                                  "networkSecurityGroupResourceId": "[if(contains(parameters('nicConfigurations')[copyIndex()], 'networkSecurityGroupResourceId'), createObject('value', parameters('nicConfigurations')[copyIndex()].networkSecurityGroupResourceId), createObject('value', ''))]",
                                  "ipConfigurations": {
                                    "value": "[parameters('nicConfigurations')[copyIndex()].ipConfigurations]"
                                  },
                                  "lock": {
                                    "value": "[coalesce(tryGet(parameters('nicConfigurations')[copyIndex()], 'lock'), parameters('lock'))]"
                                  },
                                  "tags": {
                                    "value": "[coalesce(tryGet(parameters('nicConfigurations')[copyIndex()], 'tags'), parameters('tags'))]"
                                  },
                                  "diagnosticSettings": {
                                    "value": "[tryGet(parameters('nicConfigurations')[copyIndex()], 'diagnosticSettings')]"
                                  },
                                  "roleAssignments": {
                                    "value": "[tryGet(parameters('nicConfigurations')[copyIndex()], 'roleAssignments')]"
                                  },
                                  "enableTelemetry": {
                                    "value": "[coalesce(tryGet(parameters('nicConfigurations')[copyIndex()], 'enableTelemetry'), parameters('enableTelemetry'))]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "languageVersion": "2.0",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.28.1.47646",
                                      "templateHash": "6185170122493883924"
                                    }
                                  },
                                  "definitions": {
                                    "lockType": {
                                      "type": "object",
                                      "properties": {
                                        "name": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. Specify the name of lock."
                                          }
                                        },
                                        "kind": {
                                          "type": "string",
                                          "allowedValues": [
                                            "CanNotDelete",
                                            "None",
                                            "ReadOnly"
                                          ],
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. Specify the type of lock."
                                          }
                                        }
                                      },
                                      "nullable": true
                                    },
                                    "diagnosticSettingType": {
                                      "type": "array",
                                      "items": {
                                        "type": "object",
                                        "properties": {
                                          "name": {
                                            "type": "string",
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. The name of diagnostic setting."
                                            }
                                          },
                                          "logCategoriesAndGroups": {
                                            "type": "array",
                                            "items": {
                                              "type": "object",
                                              "properties": {
                                                "category": {
                                                  "type": "string",
                                                  "nullable": true,
                                                  "metadata": {
                                                    "description": "Optional. Name of a Diagnostic Log category for a resource type this setting is applied to. Set the specific logs to collect here."
                                                  }
                                                },
                                                "categoryGroup": {
                                                  "type": "string",
                                                  "nullable": true,
                                                  "metadata": {
                                                    "description": "Optional. Name of a Diagnostic Log category group for a resource type this setting is applied to. Set to `allLogs` to collect all logs."
                                                  }
                                                },
                                                "enabled": {
                                                  "type": "bool",
                                                  "nullable": true,
                                                  "metadata": {
                                                    "description": "Optional. Enable or disable the category explicitly. Default is `true`."
                                                  }
                                                }
                                              }
                                            },
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. The name of logs that will be streamed. \"allLogs\" includes all possible logs for the resource. Set to `[]` to disable log collection."
                                            }
                                          },
                                          "metricCategories": {
                                            "type": "array",
                                            "items": {
                                              "type": "object",
                                              "properties": {
                                                "category": {
                                                  "type": "string",
                                                  "metadata": {
                                                    "description": "Required. Name of a Diagnostic Metric category for a resource type this setting is applied to. Set to `AllMetrics` to collect all metrics."
                                                  }
                                                },
                                                "enabled": {
                                                  "type": "bool",
                                                  "nullable": true,
                                                  "metadata": {
                                                    "description": "Optional. Enable or disable the category explicitly. Default is `true`."
                                                  }
                                                }
                                              }
                                            },
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. The name of metrics that will be streamed. \"allMetrics\" includes all possible metrics for the resource. Set to `[]` to disable metric collection."
                                            }
                                          },
                                          "logAnalyticsDestinationType": {
                                            "type": "string",
                                            "allowedValues": [
                                              "AzureDiagnostics",
                                              "Dedicated"
                                            ],
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. A string indicating whether the export to Log Analytics should use the default destination type, i.e. AzureDiagnostics, or use a destination type."
                                            }
                                          },
                                          "workspaceResourceId": {
                                            "type": "string",
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. Resource ID of the diagnostic log analytics workspace. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                                            }
                                          },
                                          "storageAccountResourceId": {
                                            "type": "string",
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. Resource ID of the diagnostic storage account. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                                            }
                                          },
                                          "eventHubAuthorizationRuleResourceId": {
                                            "type": "string",
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. Resource ID of the diagnostic event hub authorization rule for the Event Hubs namespace in which the event hub should be created or streamed to."
                                            }
                                          },
                                          "eventHubName": {
                                            "type": "string",
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. Name of the diagnostic event hub within the namespace to which logs are streamed. Without this, an event hub is created for each log category. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                                            }
                                          },
                                          "marketplacePartnerResourceId": {
                                            "type": "string",
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. The full ARM resource ID of the Marketplace resource to which you would like to send Diagnostic Logs."
                                            }
                                          }
                                        }
                                      },
                                      "nullable": true
                                    },
                                    "roleAssignmentType": {
                                      "type": "array",
                                      "items": {
                                        "type": "object",
                                        "properties": {
                                          "roleDefinitionIdOrName": {
                                            "type": "string",
                                            "metadata": {
                                              "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                                            }
                                          },
                                          "principalId": {
                                            "type": "string",
                                            "metadata": {
                                              "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                                            }
                                          },
                                          "principalType": {
                                            "type": "string",
                                            "allowedValues": [
                                              "Device",
                                              "ForeignGroup",
                                              "Group",
                                              "ServicePrincipal",
                                              "User"
                                            ],
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. The principal type of the assigned principal ID."
                                            }
                                          },
                                          "description": {
                                            "type": "string",
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. The description of the role assignment."
                                            }
                                          },
                                          "condition": {
                                            "type": "string",
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                                            }
                                          },
                                          "conditionVersion": {
                                            "type": "string",
                                            "allowedValues": [
                                              "2.0"
                                            ],
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. Version of the condition."
                                            }
                                          },
                                          "delegatedManagedIdentityResourceId": {
                                            "type": "string",
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. The Resource Id of the delegated managed identity resource."
                                            }
                                          }
                                        }
                                      },
                                      "nullable": true
                                    }
                                  },
                                  "parameters": {
                                    "networkInterfaceName": {
                                      "type": "string"
                                    },
                                    "virtualMachineName": {
                                      "type": "string"
                                    },
                                    "ipConfigurations": {
                                      "type": "array"
                                    },
                                    "location": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Optional. Location for all resources."
                                      }
                                    },
                                    "tags": {
                                      "type": "object",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. Tags of the resource."
                                      }
                                    },
                                    "enableIPForwarding": {
                                      "type": "bool",
                                      "defaultValue": false
                                    },
                                    "enableAcceleratedNetworking": {
                                      "type": "bool",
                                      "defaultValue": false
                                    },
                                    "dnsServers": {
                                      "type": "array",
                                      "defaultValue": []
                                    },
                                    "enableTelemetry": {
                                      "type": "bool",
                                      "metadata": {
                                        "description": "Required. Enable telemetry via a Globally Unique Identifier (GUID)."
                                      }
                                    },
                                    "networkSecurityGroupResourceId": {
                                      "type": "string",
                                      "defaultValue": "",
                                      "metadata": {
                                        "description": "Optional. The network security group (NSG) to attach to the network interface."
                                      }
                                    },
                                    "lock": {
                                      "$ref": "#/definitions/lockType",
                                      "metadata": {
                                        "description": "Optional. The lock settings of the service."
                                      }
                                    },
                                    "diagnosticSettings": {
                                      "$ref": "#/definitions/diagnosticSettingType",
                                      "metadata": {
                                        "description": "Optional. The diagnostic settings of the Network Interface."
                                      }
                                    },
                                    "roleAssignments": {
                                      "$ref": "#/definitions/roleAssignmentType",
                                      "metadata": {
                                        "description": "Optional. Array of role assignments to create."
                                      }
                                    }
                                  },
                                  "resources": {
                                    "networkInterface_publicIPAddresses": {
                                      "copy": {
                                        "name": "networkInterface_publicIPAddresses",
                                        "count": "[length(parameters('ipConfigurations'))]"
                                      },
                                      "condition": "[contains(parameters('ipConfigurations')[copyIndex()], 'pipConfiguration')]",
                                      "type": "Microsoft.Resources/deployments",
                                      "apiVersion": "2022-09-01",
                                      "name": "[format('{0}-publicIP-{1}', deployment().name, copyIndex())]",
                                      "properties": {
                                        "expressionEvaluationOptions": {
                                          "scope": "inner"
                                        },
                                        "mode": "Incremental",
                                        "parameters": {
                                          "name": "[if(contains(parameters('ipConfigurations')[copyIndex()].pipConfiguration, 'name'), createObject('value', parameters('ipConfigurations')[copyIndex()].pipConfiguration.name), createObject('value', format('{0}{1}', parameters('virtualMachineName'), parameters('ipConfigurations')[copyIndex()].pipConfiguration.publicIpNameSuffix)))]",
                                          "diagnosticSettings": {
                                            "value": "[tryGet(parameters('ipConfigurations')[copyIndex()], 'diagnosticSettings')]"
                                          },
                                          "location": {
                                            "value": "[parameters('location')]"
                                          },
                                          "lock": {
                                            "value": "[parameters('lock')]"
                                          },
                                          "idleTimeoutInMinutes": {
                                            "value": "[tryGet(parameters('ipConfigurations')[copyIndex()].pipConfiguration, 'idleTimeoutInMinutes')]"
                                          },
                                          "ddosSettings": {
                                            "value": "[tryGet(parameters('ipConfigurations')[copyIndex()].pipConfiguration, 'ddosSettings')]"
                                          },
                                          "dnsSettings": {
                                            "value": "[tryGet(parameters('ipConfigurations')[copyIndex()].pipConfiguration, 'dnsSettings')]"
                                          },
                                          "publicIPAddressVersion": "[if(contains(parameters('ipConfigurations')[copyIndex()].pipConfiguration, 'publicIPAddressVersion'), createObject('value', parameters('ipConfigurations')[copyIndex()].pipConfiguration.publicIPAddressVersion), createObject('value', 'IPv4'))]",
                                          "publicIPAllocationMethod": "[if(contains(parameters('ipConfigurations')[copyIndex()].pipConfiguration, 'publicIPAllocationMethod'), createObject('value', parameters('ipConfigurations')[copyIndex()].pipConfiguration.publicIPAllocationMethod), createObject('value', 'Static'))]",
                                          "publicIpPrefixResourceId": "[if(contains(parameters('ipConfigurations')[copyIndex()].pipConfiguration, 'publicIPPrefixResourceId'), createObject('value', parameters('ipConfigurations')[copyIndex()].pipConfiguration.publicIPPrefixResourceId), createObject('value', ''))]",
                                          "roleAssignments": "[if(contains(parameters('ipConfigurations')[copyIndex()].pipConfiguration, 'roleAssignments'), createObject('value', parameters('ipConfigurations')[copyIndex()].pipConfiguration.roleAssignments), createObject('value', createArray()))]",
                                          "skuName": "[if(contains(parameters('ipConfigurations')[copyIndex()].pipConfiguration, 'skuName'), createObject('value', parameters('ipConfigurations')[copyIndex()].pipConfiguration.skuName), createObject('value', 'Standard'))]",
                                          "skuTier": "[if(contains(parameters('ipConfigurations')[copyIndex()].pipConfiguration, 'skuTier'), createObject('value', parameters('ipConfigurations')[copyIndex()].pipConfiguration.skuTier), createObject('value', 'Regional'))]",
                                          "tags": {
                                            "value": "[coalesce(tryGet(parameters('ipConfigurations')[copyIndex()], 'tags'), parameters('tags'))]"
                                          },
                                          "zones": "[if(contains(parameters('ipConfigurations')[copyIndex()].pipConfiguration, 'zones'), createObject('value', parameters('ipConfigurations')[copyIndex()].pipConfiguration.zones), createObject('value', createArray(1, 2, 3)))]",
                                          "enableTelemetry": {
                                            "value": "[coalesce(tryGet(parameters('ipConfigurations')[copyIndex()], 'enableTelemetry'), parameters('enableTelemetry'))]"
                                          }
                                        },
                                        "template": {
                                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                          "languageVersion": "2.0",
                                          "contentVersion": "1.0.0.0",
                                          "metadata": {
                                            "_generator": {
                                              "name": "bicep",
                                              "version": "0.27.1.19265",
                                              "templateHash": "10356333973104369631"
                                            },
                                            "name": "Public IP Addresses",
                                            "description": "This module deploys a Public IP Address.",
                                            "owner": "Azure/module-maintainers"
                                          },
                                          "definitions": {
                                            "roleAssignmentType": {
                                              "type": "array",
                                              "items": {
                                                "type": "object",
                                                "properties": {
                                                  "roleDefinitionIdOrName": {
                                                    "type": "string",
                                                    "metadata": {
                                                      "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                                                    }
                                                  },
                                                  "principalId": {
                                                    "type": "string",
                                                    "metadata": {
                                                      "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                                                    }
                                                  },
                                                  "principalType": {
                                                    "type": "string",
                                                    "allowedValues": [
                                                      "Device",
                                                      "ForeignGroup",
                                                      "Group",
                                                      "ServicePrincipal",
                                                      "User"
                                                    ],
                                                    "nullable": true,
                                                    "metadata": {
                                                      "description": "Optional. The principal type of the assigned principal ID."
                                                    }
                                                  },
                                                  "description": {
                                                    "type": "string",
                                                    "nullable": true,
                                                    "metadata": {
                                                      "description": "Optional. The description of the role assignment."
                                                    }
                                                  },
                                                  "condition": {
                                                    "type": "string",
                                                    "nullable": true,
                                                    "metadata": {
                                                      "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                                                    }
                                                  },
                                                  "conditionVersion": {
                                                    "type": "string",
                                                    "allowedValues": [
                                                      "2.0"
                                                    ],
                                                    "nullable": true,
                                                    "metadata": {
                                                      "description": "Optional. Version of the condition."
                                                    }
                                                  },
                                                  "delegatedManagedIdentityResourceId": {
                                                    "type": "string",
                                                    "nullable": true,
                                                    "metadata": {
                                                      "description": "Optional. The Resource Id of the delegated managed identity resource."
                                                    }
                                                  }
                                                }
                                              },
                                              "nullable": true
                                            },
                                            "lockType": {
                                              "type": "object",
                                              "properties": {
                                                "name": {
                                                  "type": "string",
                                                  "nullable": true,
                                                  "metadata": {
                                                    "description": "Optional. Specify the name of lock."
                                                  }
                                                },
                                                "kind": {
                                                  "type": "string",
                                                  "allowedValues": [
                                                    "CanNotDelete",
                                                    "None",
                                                    "ReadOnly"
                                                  ],
                                                  "nullable": true,
                                                  "metadata": {
                                                    "description": "Optional. Specify the type of lock."
                                                  }
                                                }
                                              },
                                              "nullable": true
                                            },
                                            "dnsSettingsType": {
                                              "type": "object",
                                              "properties": {
                                                "domainNameLabel": {
                                                  "type": "string",
                                                  "metadata": {
                                                    "description": "Required. The domain name label. The concatenation of the domain name label and the regionalized DNS zone make up the fully qualified domain name associated with the public IP address. If a domain name label is specified, an A DNS record is created for the public IP in the Microsoft Azure DNS system."
                                                  }
                                                },
                                                "domainNameLabelScope": {
                                                  "type": "string",
                                                  "allowedValues": [
                                                    "",
                                                    "NoReuse",
                                                    "ResourceGroupReuse",
                                                    "SubscriptionReuse",
                                                    "TenantReuse"
                                                  ],
                                                  "metadata": {
                                                    "description": "Required. The domain name label scope. If a domain name label and a domain name label scope are specified, an A DNS record is created for the public IP in the Microsoft Azure DNS system with a hashed value includes in FQDN."
                                                  }
                                                },
                                                "fqdn": {
                                                  "type": "string",
                                                  "nullable": true,
                                                  "metadata": {
                                                    "description": "Optional. The Fully Qualified Domain Name of the A DNS record associated with the public IP. This is the concatenation of the domainNameLabel and the regionalized DNS zone."
                                                  }
                                                },
                                                "reverseFqdn": {
                                                  "type": "string",
                                                  "nullable": true,
                                                  "metadata": {
                                                    "description": "Optional. The reverse FQDN. A user-visible, fully qualified domain name that resolves to this public IP address. If the reverseFqdn is specified, then a PTR DNS record is created pointing from the IP address in the in-addr.arpa domain to the reverse FQDN."
                                                  }
                                                }
                                              }
                                            },
                                            "ddosSettingsType": {
                                              "type": "object",
                                              "properties": {
                                                "ddosProtectionPlan": {
                                                  "type": "object",
                                                  "properties": {
                                                    "id": {
                                                      "type": "string",
                                                      "metadata": {
                                                        "description": "Required. The resource ID of the DDOS protection plan associated with the public IP address."
                                                      }
                                                    }
                                                  },
                                                  "nullable": true,
                                                  "metadata": {
                                                    "description": "Optional. The DDoS protection plan associated with the public IP address."
                                                  }
                                                },
                                                "protectionMode": {
                                                  "type": "string",
                                                  "allowedValues": [
                                                    "Enabled"
                                                  ],
                                                  "metadata": {
                                                    "description": "Required. The DDoS protection policy customizations."
                                                  }
                                                }
                                              }
                                            },
                                            "diagnosticSettingType": {
                                              "type": "array",
                                              "items": {
                                                "type": "object",
                                                "properties": {
                                                  "name": {
                                                    "type": "string",
                                                    "nullable": true,
                                                    "metadata": {
                                                      "description": "Optional. The name of diagnostic setting."
                                                    }
                                                  },
                                                  "logCategoriesAndGroups": {
                                                    "type": "array",
                                                    "items": {
                                                      "type": "object",
                                                      "properties": {
                                                        "category": {
                                                          "type": "string",
                                                          "nullable": true,
                                                          "metadata": {
                                                            "description": "Optional. Name of a Diagnostic Log category for a resource type this setting is applied to. Set the specific logs to collect here."
                                                          }
                                                        },
                                                        "categoryGroup": {
                                                          "type": "string",
                                                          "nullable": true,
                                                          "metadata": {
                                                            "description": "Optional. Name of a Diagnostic Log category group for a resource type this setting is applied to. Set to `allLogs` to collect all logs."
                                                          }
                                                        },
                                                        "enabled": {
                                                          "type": "bool",
                                                          "nullable": true,
                                                          "metadata": {
                                                            "description": "Optional. Enable or disable the category explicitly. Default is `true`."
                                                          }
                                                        }
                                                      }
                                                    },
                                                    "nullable": true,
                                                    "metadata": {
                                                      "description": "Optional. The name of logs that will be streamed. \"allLogs\" includes all possible logs for the resource. Set to `[]` to disable log collection."
                                                    }
                                                  },
                                                  "metricCategories": {
                                                    "type": "array",
                                                    "items": {
                                                      "type": "object",
                                                      "properties": {
                                                        "category": {
                                                          "type": "string",
                                                          "metadata": {
                                                            "description": "Required. Name of a Diagnostic Metric category for a resource type this setting is applied to. Set to `AllMetrics` to collect all metrics."
                                                          }
                                                        },
                                                        "enabled": {
                                                          "type": "bool",
                                                          "nullable": true,
                                                          "metadata": {
                                                            "description": "Optional. Enable or disable the category explicitly. Default is `true`."
                                                          }
                                                        }
                                                      }
                                                    },
                                                    "nullable": true,
                                                    "metadata": {
                                                      "description": "Optional. The name of metrics that will be streamed. \"allMetrics\" includes all possible metrics for the resource. Set to `[]` to disable metric collection."
                                                    }
                                                  },
                                                  "logAnalyticsDestinationType": {
                                                    "type": "string",
                                                    "allowedValues": [
                                                      "AzureDiagnostics",
                                                      "Dedicated"
                                                    ],
                                                    "nullable": true,
                                                    "metadata": {
                                                      "description": "Optional. A string indicating whether the export to Log Analytics should use the default destination type, i.e. AzureDiagnostics, or use a destination type."
                                                    }
                                                  },
                                                  "workspaceResourceId": {
                                                    "type": "string",
                                                    "nullable": true,
                                                    "metadata": {
                                                      "description": "Optional. Resource ID of the diagnostic log analytics workspace. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                                                    }
                                                  },
                                                  "storageAccountResourceId": {
                                                    "type": "string",
                                                    "nullable": true,
                                                    "metadata": {
                                                      "description": "Optional. Resource ID of the diagnostic storage account. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                                                    }
                                                  },
                                                  "eventHubAuthorizationRuleResourceId": {
                                                    "type": "string",
                                                    "nullable": true,
                                                    "metadata": {
                                                      "description": "Optional. Resource ID of the diagnostic event hub authorization rule for the Event Hubs namespace in which the event hub should be created or streamed to."
                                                    }
                                                  },
                                                  "eventHubName": {
                                                    "type": "string",
                                                    "nullable": true,
                                                    "metadata": {
                                                      "description": "Optional. Name of the diagnostic event hub within the namespace to which logs are streamed. Without this, an event hub is created for each log category. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                                                    }
                                                  },
                                                  "marketplacePartnerResourceId": {
                                                    "type": "string",
                                                    "nullable": true,
                                                    "metadata": {
                                                      "description": "Optional. The full ARM resource ID of the Marketplace resource to which you would like to send Diagnostic Logs."
                                                    }
                                                  }
                                                }
                                              },
                                              "nullable": true
                                            }
                                          },
                                          "parameters": {
                                            "name": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "Required. The name of the Public IP Address."
                                              }
                                            },
                                            "publicIpPrefixResourceId": {
                                              "type": "string",
                                              "nullable": true,
                                              "metadata": {
                                                "description": "Optional. Resource ID of the Public IP Prefix object. This is only needed if you want your Public IPs created in a PIP Prefix."
                                              }
                                            },
                                            "publicIPAllocationMethod": {
                                              "type": "string",
                                              "defaultValue": "Static",
                                              "allowedValues": [
                                                "Dynamic",
                                                "Static"
                                              ],
                                              "metadata": {
                                                "description": "Optional. The public IP address allocation method."
                                              }
                                            },
                                            "zones": {
                                              "type": "array",
                                              "items": {
                                                "type": "int"
                                              },
                                              "defaultValue": [
                                                1,
                                                2,
                                                3
                                              ],
                                              "allowedValues": [
                                                1,
                                                2,
                                                3
                                              ],
                                              "metadata": {
                                                "description": "Optional. A list of availability zones denoting the IP allocated for the resource needs to come from."
                                              }
                                            },
                                            "publicIPAddressVersion": {
                                              "type": "string",
                                              "defaultValue": "IPv4",
                                              "allowedValues": [
                                                "IPv4",
                                                "IPv6"
                                              ],
                                              "metadata": {
                                                "description": "Optional. IP address version."
                                              }
                                            },
                                            "dnsSettings": {
                                              "$ref": "#/definitions/dnsSettingsType",
                                              "nullable": true,
                                              "metadata": {
                                                "description": "Optional. The DNS settings of the public IP address."
                                              }
                                            },
                                            "lock": {
                                              "$ref": "#/definitions/lockType",
                                              "metadata": {
                                                "description": "Optional. The lock settings of the service."
                                              }
                                            },
                                            "skuName": {
                                              "type": "string",
                                              "defaultValue": "Standard",
                                              "allowedValues": [
                                                "Basic",
                                                "Standard"
                                              ],
                                              "metadata": {
                                                "description": "Optional. Name of a public IP address SKU."
                                              }
                                            },
                                            "skuTier": {
                                              "type": "string",
                                              "defaultValue": "Regional",
                                              "allowedValues": [
                                                "Global",
                                                "Regional"
                                              ],
                                              "metadata": {
                                                "description": "Optional. Tier of a public IP address SKU."
                                              }
                                            },
                                            "ddosSettings": {
                                              "$ref": "#/definitions/ddosSettingsType",
                                              "nullable": true,
                                              "metadata": {
                                                "description": "Optional. The DDoS protection plan configuration associated with the public IP address."
                                              }
                                            },
                                            "location": {
                                              "type": "string",
                                              "defaultValue": "[resourceGroup().location]",
                                              "metadata": {
                                                "description": "Optional. Location for all resources."
                                              }
                                            },
                                            "roleAssignments": {
                                              "$ref": "#/definitions/roleAssignmentType",
                                              "metadata": {
                                                "description": "Optional. Array of role assignments to create."
                                              }
                                            },
                                            "enableTelemetry": {
                                              "type": "bool",
                                              "defaultValue": true,
                                              "metadata": {
                                                "description": "Optional. Enable/Disable usage telemetry for module."
                                              }
                                            },
                                            "idleTimeoutInMinutes": {
                                              "type": "int",
                                              "defaultValue": 4,
                                              "metadata": {
                                                "description": "Optional. The idle timeout of the public IP address."
                                              }
                                            },
                                            "tags": {
                                              "type": "object",
                                              "nullable": true,
                                              "metadata": {
                                                "description": "Optional. Tags of the resource."
                                              }
                                            },
                                            "diagnosticSettings": {
                                              "$ref": "#/definitions/diagnosticSettingType",
                                              "metadata": {
                                                "description": "Optional. The diagnostic settings of the service."
                                              }
                                            }
                                          },
                                          "variables": {
                                            "builtInRoleNames": {
                                              "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                                              "DNS Resolver Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '0f2ebee7-ffd4-4fc0-b3b7-664099fdad5d')]",
                                              "DNS Zone Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'befefa01-2a29-4197-83a8-272ff33ce314')]",
                                              "Domain Services Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'eeaeda52-9324-47f6-8069-5d5bade478b2')]",
                                              "Domain Services Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '361898ef-9ed1-48c2-849c-a832951106bb')]",
                                              "Network Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4d97b98b-1d4f-4787-a291-c67834d212e7')]",
                                              "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                                              "Private DNS Zone Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b12aa53e-6015-4669-85d0-8515ebb3ae7f')]",
                                              "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                                              "Role Based Access Control Administrator (Preview)": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]"
                                            }
                                          },
                                          "resources": {
                                            "avmTelemetry": {
                                              "condition": "[parameters('enableTelemetry')]",
                                              "type": "Microsoft.Resources/deployments",
                                              "apiVersion": "2023-07-01",
                                              "name": "[format('46d3xbcp.res.network-publicipaddress.{0}.{1}', replace('0.4.1', '.', '-'), substring(uniqueString(deployment().name, parameters('location')), 0, 4))]",
                                              "properties": {
                                                "mode": "Incremental",
                                                "template": {
                                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                                  "contentVersion": "1.0.0.0",
                                                  "resources": [],
                                                  "outputs": {
                                                    "telemetry": {
                                                      "type": "String",
                                                      "value": "For more information, see https://aka.ms/avm/TelemetryInfo"
                                                    }
                                                  }
                                                }
                                              }
                                            },
                                            "publicIpAddress": {
                                              "type": "Microsoft.Network/publicIPAddresses",
                                              "apiVersion": "2023-09-01",
                                              "name": "[parameters('name')]",
                                              "location": "[parameters('location')]",
                                              "tags": "[parameters('tags')]",
                                              "sku": {
                                                "name": "[parameters('skuName')]",
                                                "tier": "[parameters('skuTier')]"
                                              },
                                              "zones": "[map(parameters('zones'), lambda('zone', string(lambdaVariables('zone'))))]",
                                              "properties": {
                                                "ddosSettings": "[parameters('ddosSettings')]",
                                                "dnsSettings": "[parameters('dnsSettings')]",
                                                "publicIPAddressVersion": "[parameters('publicIPAddressVersion')]",
                                                "publicIPAllocationMethod": "[parameters('publicIPAllocationMethod')]",
                                                "publicIPPrefix": "[if(not(empty(parameters('publicIpPrefixResourceId'))), createObject('id', parameters('publicIpPrefixResourceId')), null())]",
                                                "idleTimeoutInMinutes": "[parameters('idleTimeoutInMinutes')]",
                                                "ipTags": null
                                              }
                                            },
                                            "publicIpAddress_lock": {
                                              "condition": "[and(not(empty(coalesce(parameters('lock'), createObject()))), not(equals(tryGet(parameters('lock'), 'kind'), 'None')))]",
                                              "type": "Microsoft.Authorization/locks",
                                              "apiVersion": "2020-05-01",
                                              "scope": "[format('Microsoft.Network/publicIPAddresses/{0}', parameters('name'))]",
                                              "name": "[coalesce(tryGet(parameters('lock'), 'name'), format('lock-{0}', parameters('name')))]",
                                              "properties": {
                                                "level": "[coalesce(tryGet(parameters('lock'), 'kind'), '')]",
                                                "notes": "[if(equals(tryGet(parameters('lock'), 'kind'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot delete or modify the resource or child resources.')]"
                                              },
                                              "dependsOn": [
                                                "publicIpAddress"
                                              ]
                                            },
                                            "publicIpAddress_roleAssignments": {
                                              "copy": {
                                                "name": "publicIpAddress_roleAssignments",
                                                "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]"
                                              },
                                              "type": "Microsoft.Authorization/roleAssignments",
                                              "apiVersion": "2022-04-01",
                                              "scope": "[format('Microsoft.Network/publicIPAddresses/{0}', parameters('name'))]",
                                              "name": "[guid(resourceId('Microsoft.Network/publicIPAddresses', parameters('name')), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].principalId, coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName)]",
                                              "properties": {
                                                "roleDefinitionId": "[if(contains(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName), variables('builtInRoleNames')[coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName], if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName)))]",
                                                "principalId": "[coalesce(parameters('roleAssignments'), createArray())[copyIndex()].principalId]",
                                                "description": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'description')]",
                                                "principalType": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'principalType')]",
                                                "condition": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'condition')]",
                                                "conditionVersion": "[if(not(empty(tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                                                "delegatedManagedIdentityResourceId": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
                                              },
                                              "dependsOn": [
                                                "publicIpAddress"
                                              ]
                                            },
                                            "publicIpAddress_diagnosticSettings": {
                                              "copy": {
                                                "name": "publicIpAddress_diagnosticSettings",
                                                "count": "[length(coalesce(parameters('diagnosticSettings'), createArray()))]"
                                              },
                                              "type": "Microsoft.Insights/diagnosticSettings",
                                              "apiVersion": "2021-05-01-preview",
                                              "scope": "[format('Microsoft.Network/publicIPAddresses/{0}', parameters('name'))]",
                                              "name": "[coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'name'), format('{0}-diagnosticSettings', parameters('name')))]",
                                              "properties": {
                                                "copy": [
                                                  {
                                                    "name": "metrics",
                                                    "count": "[length(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics'))))]",
                                                    "input": {
                                                      "category": "[coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics')))[copyIndex('metrics')].category]",
                                                      "enabled": "[coalesce(tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics')))[copyIndex('metrics')], 'enabled'), true())]",
                                                      "timeGrain": null
                                                    }
                                                  },
                                                  {
                                                    "name": "logs",
                                                    "count": "[length(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs'))))]",
                                                    "input": {
                                                      "categoryGroup": "[tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'categoryGroup')]",
                                                      "category": "[tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'category')]",
                                                      "enabled": "[coalesce(tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'enabled'), true())]"
                                                    }
                                                  }
                                                ],
                                                "storageAccountId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'storageAccountResourceId')]",
                                                "workspaceId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'workspaceResourceId')]",
                                                "eventHubAuthorizationRuleId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'eventHubAuthorizationRuleResourceId')]",
                                                "eventHubName": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'eventHubName')]",
                                                "marketplacePartnerId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'marketplacePartnerResourceId')]",
                                                "logAnalyticsDestinationType": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logAnalyticsDestinationType')]"
                                              },
                                              "dependsOn": [
                                                "publicIpAddress"
                                              ]
                                            }
                                          },
                                          "outputs": {
                                            "resourceGroupName": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "The resource group the public IP address was deployed into."
                                              },
                                              "value": "[resourceGroup().name]"
                                            },
                                            "name": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "The name of the public IP address."
                                              },
                                              "value": "[parameters('name')]"
                                            },
                                            "resourceId": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "The resource ID of the public IP address."
                                              },
                                              "value": "[resourceId('Microsoft.Network/publicIPAddresses', parameters('name'))]"
                                            },
                                            "ipAddress": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "The public IP address of the public IP address resource."
                                              },
                                              "value": "[coalesce(tryGet(reference('publicIpAddress'), 'ipAddress'), '')]"
                                            },
                                            "location": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "The location the resource was deployed into."
                                              },
                                              "value": "[reference('publicIpAddress', '2023-09-01', 'full').location]"
                                            }
                                          }
                                        }
                                      }
                                    },
                                    "networkInterface": {
                                      "type": "Microsoft.Resources/deployments",
                                      "apiVersion": "2022-09-01",
                                      "name": "[format('{0}-NetworkInterface', deployment().name)]",
                                      "properties": {
                                        "expressionEvaluationOptions": {
                                          "scope": "inner"
                                        },
                                        "mode": "Incremental",
                                        "parameters": {
                                          "name": {
                                            "value": "[parameters('networkInterfaceName')]"
                                          },
                                          "ipConfigurations": {
                                            "copy": [
                                              {
                                                "name": "value",
                                                "count": "[length(parameters('ipConfigurations'))]",
                                                "input": "[createObject('name', if(not(empty(parameters('ipConfigurations')[copyIndex('value')].name)), parameters('ipConfigurations')[copyIndex('value')].name, null()), 'primary', equals(copyIndex('value'), 0), 'privateIPAllocationMethod', if(contains(parameters('ipConfigurations')[copyIndex('value')], 'privateIPAllocationMethod'), if(not(empty(parameters('ipConfigurations')[copyIndex('value')].privateIPAllocationMethod)), parameters('ipConfigurations')[copyIndex('value')].privateIPAllocationMethod, null()), null()), 'privateIPAddress', if(contains(parameters('ipConfigurations')[copyIndex('value')], 'privateIPAddress'), if(not(empty(parameters('ipConfigurations')[copyIndex('value')].privateIPAddress)), parameters('ipConfigurations')[copyIndex('value')].privateIPAddress, null()), null()), 'publicIPAddressResourceId', if(contains(parameters('ipConfigurations')[copyIndex('value')], 'pipConfiguration'), resourceId('Microsoft.Network/publicIPAddresses', if(contains(parameters('ipConfigurations')[copyIndex('value')].pipConfiguration, 'name'), parameters('ipConfigurations')[copyIndex('value')].pipConfiguration.name, format('{0}{1}', parameters('virtualMachineName'), parameters('ipConfigurations')[copyIndex('value')].pipConfiguration.publicIpNameSuffix))), null()), 'subnetResourceId', parameters('ipConfigurations')[copyIndex('value')].subnetResourceId, 'loadBalancerBackendAddressPools', if(contains(parameters('ipConfigurations')[copyIndex('value')], 'loadBalancerBackendAddressPools'), parameters('ipConfigurations')[copyIndex('value')].loadBalancerBackendAddressPools, null()), 'applicationSecurityGroups', if(contains(parameters('ipConfigurations')[copyIndex('value')], 'applicationSecurityGroups'), parameters('ipConfigurations')[copyIndex('value')].applicationSecurityGroups, null()), 'applicationGatewayBackendAddressPools', if(contains(parameters('ipConfigurations')[copyIndex('value')], 'applicationGatewayBackendAddressPools'), parameters('ipConfigurations')[copyIndex('value')].applicationGatewayBackendAddressPools, null()), 'gatewayLoadBalancer', if(contains(parameters('ipConfigurations')[copyIndex('value')], 'gatewayLoadBalancer'), parameters('ipConfigurations')[copyIndex('value')].gatewayLoadBalancer, null()), 'loadBalancerInboundNatRules', if(contains(parameters('ipConfigurations')[copyIndex('value')], 'loadBalancerInboundNatRules'), parameters('ipConfigurations')[copyIndex('value')].loadBalancerInboundNatRules, null()), 'privateIPAddressVersion', if(contains(parameters('ipConfigurations')[copyIndex('value')], 'privateIPAddressVersion'), parameters('ipConfigurations')[copyIndex('value')].privateIPAddressVersion, null()), 'virtualNetworkTaps', if(contains(parameters('ipConfigurations')[copyIndex('value')], 'virtualNetworkTaps'), parameters('ipConfigurations')[copyIndex('value')].virtualNetworkTaps, null()))]"
                                              }
                                            ]
                                          },
                                          "location": {
                                            "value": "[parameters('location')]"
                                          },
                                          "tags": {
                                            "value": "[parameters('tags')]"
                                          },
                                          "diagnosticSettings": {
                                            "value": "[parameters('diagnosticSettings')]"
                                          },
                                          "dnsServers": "[if(not(empty(parameters('dnsServers'))), createObject('value', parameters('dnsServers')), createObject('value', createArray()))]",
                                          "enableAcceleratedNetworking": {
                                            "value": "[parameters('enableAcceleratedNetworking')]"
                                          },
                                          "enableTelemetry": {
                                            "value": "[parameters('enableTelemetry')]"
                                          },
                                          "enableIPForwarding": {
                                            "value": "[parameters('enableIPForwarding')]"
                                          },
                                          "lock": {
                                            "value": "[parameters('lock')]"
                                          },
                                          "networkSecurityGroupResourceId": "[if(not(empty(parameters('networkSecurityGroupResourceId'))), createObject('value', parameters('networkSecurityGroupResourceId')), createObject('value', ''))]",
                                          "roleAssignments": "[if(not(empty(parameters('roleAssignments'))), createObject('value', parameters('roleAssignments')), createObject('value', createArray()))]"
                                        },
                                        "template": {
                                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                          "languageVersion": "2.0",
                                          "contentVersion": "1.0.0.0",
                                          "metadata": {
                                            "_generator": {
                                              "name": "bicep",
                                              "version": "0.25.53.49325",
                                              "templateHash": "1612343535299711142"
                                            },
                                            "name": "Network Interface",
                                            "description": "This module deploys a Network Interface.",
                                            "owner": "Azure/module-maintainers"
                                          },
                                          "definitions": {
                                            "diagnosticSettingType": {
                                              "type": "array",
                                              "items": {
                                                "type": "object",
                                                "properties": {
                                                  "name": {
                                                    "type": "string",
                                                    "nullable": true,
                                                    "metadata": {
                                                      "description": "Optional. The name of diagnostic setting."
                                                    }
                                                  },
                                                  "logCategoriesAndGroups": {
                                                    "type": "array",
                                                    "items": {
                                                      "type": "object",
                                                      "properties": {
                                                        "category": {
                                                          "type": "string",
                                                          "nullable": true,
                                                          "metadata": {
                                                            "description": "Optional. Name of a Diagnostic Log category for a resource type this setting is applied to. Set the specific logs to collect here."
                                                          }
                                                        },
                                                        "categoryGroup": {
                                                          "type": "string",
                                                          "nullable": true,
                                                          "metadata": {
                                                            "description": "Optional. Name of a Diagnostic Log category group for a resource type this setting is applied to. Set to `allLogs` to collect all logs."
                                                          }
                                                        },
                                                        "enabled": {
                                                          "type": "bool",
                                                          "nullable": true,
                                                          "metadata": {
                                                            "description": "Optional. Enable or disable the category explicitly. Default is `true`."
                                                          }
                                                        }
                                                      }
                                                    },
                                                    "nullable": true,
                                                    "metadata": {
                                                      "description": "Optional. The name of logs that will be streamed. \"allLogs\" includes all possible logs for the resource. Set to `[]` to disable log collection."
                                                    }
                                                  },
                                                  "metricCategories": {
                                                    "type": "array",
                                                    "items": {
                                                      "type": "object",
                                                      "properties": {
                                                        "category": {
                                                          "type": "string",
                                                          "metadata": {
                                                            "description": "Required. Name of a Diagnostic Metric category for a resource type this setting is applied to. Set to `AllMetrics` to collect all metrics."
                                                          }
                                                        },
                                                        "enabled": {
                                                          "type": "bool",
                                                          "nullable": true,
                                                          "metadata": {
                                                            "description": "Optional. Enable or disable the category explicitly. Default is `true`."
                                                          }
                                                        }
                                                      }
                                                    },
                                                    "nullable": true,
                                                    "metadata": {
                                                      "description": "Optional. The name of metrics that will be streamed. \"allMetrics\" includes all possible metrics for the resource. Set to `[]` to disable metric collection."
                                                    }
                                                  },
                                                  "logAnalyticsDestinationType": {
                                                    "type": "string",
                                                    "allowedValues": [
                                                      "AzureDiagnostics",
                                                      "Dedicated"
                                                    ],
                                                    "nullable": true,
                                                    "metadata": {
                                                      "description": "Optional. A string indicating whether the export to Log Analytics should use the default destination type, i.e. AzureDiagnostics, or use a destination type."
                                                    }
                                                  },
                                                  "workspaceResourceId": {
                                                    "type": "string",
                                                    "nullable": true,
                                                    "metadata": {
                                                      "description": "Optional. Resource ID of the diagnostic log analytics workspace. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                                                    }
                                                  },
                                                  "storageAccountResourceId": {
                                                    "type": "string",
                                                    "nullable": true,
                                                    "metadata": {
                                                      "description": "Optional. Resource ID of the diagnostic storage account. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                                                    }
                                                  },
                                                  "eventHubAuthorizationRuleResourceId": {
                                                    "type": "string",
                                                    "nullable": true,
                                                    "metadata": {
                                                      "description": "Optional. Resource ID of the diagnostic event hub authorization rule for the Event Hubs namespace in which the event hub should be created or streamed to."
                                                    }
                                                  },
                                                  "eventHubName": {
                                                    "type": "string",
                                                    "nullable": true,
                                                    "metadata": {
                                                      "description": "Optional. Name of the diagnostic event hub within the namespace to which logs are streamed. Without this, an event hub is created for each log category. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                                                    }
                                                  },
                                                  "marketplacePartnerResourceId": {
                                                    "type": "string",
                                                    "nullable": true,
                                                    "metadata": {
                                                      "description": "Optional. The full ARM resource ID of the Marketplace resource to which you would like to send Diagnostic Logs."
                                                    }
                                                  }
                                                }
                                              },
                                              "nullable": true
                                            },
                                            "roleAssignmentType": {
                                              "type": "array",
                                              "items": {
                                                "type": "object",
                                                "properties": {
                                                  "roleDefinitionIdOrName": {
                                                    "type": "string",
                                                    "metadata": {
                                                      "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                                                    }
                                                  },
                                                  "principalId": {
                                                    "type": "string",
                                                    "metadata": {
                                                      "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                                                    }
                                                  },
                                                  "principalType": {
                                                    "type": "string",
                                                    "allowedValues": [
                                                      "Device",
                                                      "ForeignGroup",
                                                      "Group",
                                                      "ServicePrincipal",
                                                      "User"
                                                    ],
                                                    "nullable": true,
                                                    "metadata": {
                                                      "description": "Optional. The principal type of the assigned principal ID."
                                                    }
                                                  },
                                                  "description": {
                                                    "type": "string",
                                                    "nullable": true,
                                                    "metadata": {
                                                      "description": "Optional. The description of the role assignment."
                                                    }
                                                  },
                                                  "condition": {
                                                    "type": "string",
                                                    "nullable": true,
                                                    "metadata": {
                                                      "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                                                    }
                                                  },
                                                  "conditionVersion": {
                                                    "type": "string",
                                                    "allowedValues": [
                                                      "2.0"
                                                    ],
                                                    "nullable": true,
                                                    "metadata": {
                                                      "description": "Optional. Version of the condition."
                                                    }
                                                  },
                                                  "delegatedManagedIdentityResourceId": {
                                                    "type": "string",
                                                    "nullable": true,
                                                    "metadata": {
                                                      "description": "Optional. The Resource Id of the delegated managed identity resource."
                                                    }
                                                  }
                                                }
                                              },
                                              "nullable": true
                                            },
                                            "lockType": {
                                              "type": "object",
                                              "properties": {
                                                "name": {
                                                  "type": "string",
                                                  "nullable": true,
                                                  "metadata": {
                                                    "description": "Optional. Specify the name of lock."
                                                  }
                                                },
                                                "kind": {
                                                  "type": "string",
                                                  "allowedValues": [
                                                    "CanNotDelete",
                                                    "None",
                                                    "ReadOnly"
                                                  ],
                                                  "nullable": true,
                                                  "metadata": {
                                                    "description": "Optional. Specify the type of lock."
                                                  }
                                                }
                                              },
                                              "nullable": true
                                            }
                                          },
                                          "parameters": {
                                            "name": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "Required. The name of the network interface."
                                              }
                                            },
                                            "location": {
                                              "type": "string",
                                              "defaultValue": "[resourceGroup().location]",
                                              "metadata": {
                                                "description": "Optional. Location for all resources."
                                              }
                                            },
                                            "tags": {
                                              "type": "object",
                                              "nullable": true,
                                              "metadata": {
                                                "description": "Optional. Resource tags."
                                              }
                                            },
                                            "enableTelemetry": {
                                              "type": "bool",
                                              "defaultValue": true,
                                              "metadata": {
                                                "description": "Optional. Enable/Disable usage telemetry for module."
                                              }
                                            },
                                            "enableIPForwarding": {
                                              "type": "bool",
                                              "defaultValue": false,
                                              "metadata": {
                                                "description": "Optional. Indicates whether IP forwarding is enabled on this network interface."
                                              }
                                            },
                                            "enableAcceleratedNetworking": {
                                              "type": "bool",
                                              "defaultValue": false,
                                              "metadata": {
                                                "description": "Optional. If the network interface is accelerated networking enabled."
                                              }
                                            },
                                            "dnsServers": {
                                              "type": "array",
                                              "defaultValue": [],
                                              "metadata": {
                                                "description": "Optional. List of DNS servers IP addresses. Use 'AzureProvidedDNS' to switch to azure provided DNS resolution. 'AzureProvidedDNS' value cannot be combined with other IPs, it must be the only value in dnsServers collection."
                                              }
                                            },
                                            "networkSecurityGroupResourceId": {
                                              "type": "string",
                                              "defaultValue": "",
                                              "metadata": {
                                                "description": "Optional. The network security group (NSG) to attach to the network interface."
                                              }
                                            },
                                            "auxiliaryMode": {
                                              "type": "string",
                                              "defaultValue": "None",
                                              "allowedValues": [
                                                "Floating",
                                                "MaxConnections",
                                                "None"
                                              ],
                                              "metadata": {
                                                "description": "Optional. Auxiliary mode of Network Interface resource. Not all regions are enabled for Auxiliary Mode Nic."
                                              }
                                            },
                                            "auxiliarySku": {
                                              "type": "string",
                                              "defaultValue": "None",
                                              "allowedValues": [
                                                "A1",
                                                "A2",
                                                "A4",
                                                "A8",
                                                "None"
                                              ],
                                              "metadata": {
                                                "description": "Optional. Auxiliary sku of Network Interface resource. Not all regions are enabled for Auxiliary Mode Nic."
                                              }
                                            },
                                            "disableTcpStateTracking": {
                                              "type": "bool",
                                              "defaultValue": false,
                                              "metadata": {
                                                "description": "Optional. Indicates whether to disable tcp state tracking. Subscription must be registered for the Microsoft.Network/AllowDisableTcpStateTracking feature before this property can be set to true."
                                              }
                                            },
                                            "ipConfigurations": {
                                              "type": "array",
                                              "metadata": {
                                                "description": "Required. A list of IPConfigurations of the network interface."
                                              }
                                            },
                                            "lock": {
                                              "$ref": "#/definitions/lockType",
                                              "metadata": {
                                                "description": "Optional. The lock settings of the service."
                                              }
                                            },
                                            "roleAssignments": {
                                              "$ref": "#/definitions/roleAssignmentType",
                                              "metadata": {
                                                "description": "Optional. Array of role assignments to create."
                                              }
                                            },
                                            "diagnosticSettings": {
                                              "$ref": "#/definitions/diagnosticSettingType",
                                              "metadata": {
                                                "description": "Optional. The diagnostic settings of the service."
                                              }
                                            }
                                          },
                                          "variables": {
                                            "builtInRoleNames": {
                                              "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                                              "DNS Resolver Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '0f2ebee7-ffd4-4fc0-b3b7-664099fdad5d')]",
                                              "DNS Zone Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'befefa01-2a29-4197-83a8-272ff33ce314')]",
                                              "Network Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4d97b98b-1d4f-4787-a291-c67834d212e7')]",
                                              "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                                              "Private DNS Zone Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b12aa53e-6015-4669-85d0-8515ebb3ae7f')]",
                                              "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                                              "Role Based Access Control Administrator (Preview)": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]"
                                            }
                                          },
                                          "resources": {
                                            "avmTelemetry": {
                                              "condition": "[parameters('enableTelemetry')]",
                                              "type": "Microsoft.Resources/deployments",
                                              "apiVersion": "2023-07-01",
                                              "name": "[format('46d3xbcp.res.network-networkinterface.{0}.{1}', replace('0.2.4', '.', '-'), substring(uniqueString(deployment().name, parameters('location')), 0, 4))]",
                                              "properties": {
                                                "mode": "Incremental",
                                                "template": {
                                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                                  "contentVersion": "1.0.0.0",
                                                  "resources": [],
                                                  "outputs": {
                                                    "telemetry": {
                                                      "type": "String",
                                                      "value": "For more information, see https://aka.ms/avm/TelemetryInfo"
                                                    }
                                                  }
                                                }
                                              }
                                            },
                                            "networkInterface": {
                                              "type": "Microsoft.Network/networkInterfaces",
                                              "apiVersion": "2023-04-01",
                                              "name": "[parameters('name')]",
                                              "location": "[parameters('location')]",
                                              "tags": "[parameters('tags')]",
                                              "properties": {
                                                "copy": [
                                                  {
                                                    "name": "ipConfigurations",
                                                    "count": "[length(parameters('ipConfigurations'))]",
                                                    "input": {
                                                      "name": "[if(contains(parameters('ipConfigurations')[copyIndex('ipConfigurations')], 'name'), parameters('ipConfigurations')[copyIndex('ipConfigurations')].name, format('ipconfig0{0}', add(copyIndex('ipConfigurations'), 1)))]",
                                                      "properties": {
                                                        "primary": "[if(equals(copyIndex('ipConfigurations'), 0), true(), false())]",
                                                        "privateIPAllocationMethod": "[if(contains(parameters('ipConfigurations')[copyIndex('ipConfigurations')], 'privateIPAllocationMethod'), if(not(empty(parameters('ipConfigurations')[copyIndex('ipConfigurations')].privateIPAllocationMethod)), parameters('ipConfigurations')[copyIndex('ipConfigurations')].privateIPAllocationMethod, null()), null())]",
                                                        "privateIPAddress": "[if(contains(parameters('ipConfigurations')[copyIndex('ipConfigurations')], 'privateIPAddress'), if(not(empty(parameters('ipConfigurations')[copyIndex('ipConfigurations')].privateIPAddress)), parameters('ipConfigurations')[copyIndex('ipConfigurations')].privateIPAddress, null()), null())]",
                                                        "publicIPAddress": "[if(contains(parameters('ipConfigurations')[copyIndex('ipConfigurations')], 'publicIPAddressResourceId'), if(not(equals(parameters('ipConfigurations')[copyIndex('ipConfigurations')].publicIPAddressResourceId, null())), createObject('id', parameters('ipConfigurations')[copyIndex('ipConfigurations')].publicIPAddressResourceId), null()), null())]",
                                                        "subnet": {
                                                          "id": "[parameters('ipConfigurations')[copyIndex('ipConfigurations')].subnetResourceId]"
                                                        },
                                                        "loadBalancerBackendAddressPools": "[if(contains(parameters('ipConfigurations')[copyIndex('ipConfigurations')], 'loadBalancerBackendAddressPools'), parameters('ipConfigurations')[copyIndex('ipConfigurations')].loadBalancerBackendAddressPools, null())]",
                                                        "applicationSecurityGroups": "[if(contains(parameters('ipConfigurations')[copyIndex('ipConfigurations')], 'applicationSecurityGroups'), parameters('ipConfigurations')[copyIndex('ipConfigurations')].applicationSecurityGroups, null())]",
                                                        "applicationGatewayBackendAddressPools": "[if(contains(parameters('ipConfigurations')[copyIndex('ipConfigurations')], 'applicationGatewayBackendAddressPools'), parameters('ipConfigurations')[copyIndex('ipConfigurations')].applicationGatewayBackendAddressPools, null())]",
                                                        "gatewayLoadBalancer": "[if(contains(parameters('ipConfigurations')[copyIndex('ipConfigurations')], 'gatewayLoadBalancer'), parameters('ipConfigurations')[copyIndex('ipConfigurations')].gatewayLoadBalancer, null())]",
                                                        "loadBalancerInboundNatRules": "[if(contains(parameters('ipConfigurations')[copyIndex('ipConfigurations')], 'loadBalancerInboundNatRules'), parameters('ipConfigurations')[copyIndex('ipConfigurations')].loadBalancerInboundNatRules, null())]",
                                                        "privateIPAddressVersion": "[if(contains(parameters('ipConfigurations')[copyIndex('ipConfigurations')], 'privateIPAddressVersion'), parameters('ipConfigurations')[copyIndex('ipConfigurations')].privateIPAddressVersion, null())]",
                                                        "virtualNetworkTaps": "[if(contains(parameters('ipConfigurations')[copyIndex('ipConfigurations')], 'virtualNetworkTaps'), parameters('ipConfigurations')[copyIndex('ipConfigurations')].virtualNetworkTaps, null())]"
                                                      }
                                                    }
                                                  }
                                                ],
                                                "auxiliaryMode": "[parameters('auxiliaryMode')]",
                                                "auxiliarySku": "[parameters('auxiliarySku')]",
                                                "disableTcpStateTracking": "[parameters('disableTcpStateTracking')]",
                                                "dnsSettings": "[if(not(empty(parameters('dnsServers'))), createObject('dnsServers', parameters('dnsServers')), null())]",
                                                "enableAcceleratedNetworking": "[parameters('enableAcceleratedNetworking')]",
                                                "enableIPForwarding": "[parameters('enableIPForwarding')]",
                                                "networkSecurityGroup": "[if(not(empty(parameters('networkSecurityGroupResourceId'))), createObject('id', parameters('networkSecurityGroupResourceId')), null())]"
                                              }
                                            },
                                            "networkInterface_lock": {
                                              "condition": "[and(not(empty(coalesce(parameters('lock'), createObject()))), not(equals(tryGet(parameters('lock'), 'kind'), 'None')))]",
                                              "type": "Microsoft.Authorization/locks",
                                              "apiVersion": "2020-05-01",
                                              "scope": "[format('Microsoft.Network/networkInterfaces/{0}', parameters('name'))]",
                                              "name": "[coalesce(tryGet(parameters('lock'), 'name'), format('lock-{0}', parameters('name')))]",
                                              "properties": {
                                                "level": "[coalesce(tryGet(parameters('lock'), 'kind'), '')]",
                                                "notes": "[if(equals(tryGet(parameters('lock'), 'kind'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot delete or modify the resource or child resources.')]"
                                              },
                                              "dependsOn": [
                                                "networkInterface"
                                              ]
                                            },
                                            "networkInterface_diagnosticSettings": {
                                              "copy": {
                                                "name": "networkInterface_diagnosticSettings",
                                                "count": "[length(coalesce(parameters('diagnosticSettings'), createArray()))]"
                                              },
                                              "type": "Microsoft.Insights/diagnosticSettings",
                                              "apiVersion": "2021-05-01-preview",
                                              "scope": "[format('Microsoft.Network/networkInterfaces/{0}', parameters('name'))]",
                                              "name": "[coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'name'), format('{0}-diagnosticSettings', parameters('name')))]",
                                              "properties": {
                                                "copy": [
                                                  {
                                                    "name": "metrics",
                                                    "count": "[length(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics'))))]",
                                                    "input": {
                                                      "category": "[coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics')))[copyIndex('metrics')].category]",
                                                      "enabled": "[coalesce(tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics')))[copyIndex('metrics')], 'enabled'), true())]",
                                                      "timeGrain": null
                                                    }
                                                  }
                                                ],
                                                "storageAccountId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'storageAccountResourceId')]",
                                                "workspaceId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'workspaceResourceId')]",
                                                "eventHubAuthorizationRuleId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'eventHubAuthorizationRuleResourceId')]",
                                                "eventHubName": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'eventHubName')]",
                                                "marketplacePartnerId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'marketplacePartnerResourceId')]",
                                                "logAnalyticsDestinationType": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logAnalyticsDestinationType')]"
                                              },
                                              "dependsOn": [
                                                "networkInterface"
                                              ]
                                            },
                                            "networkInterface_roleAssignments": {
                                              "copy": {
                                                "name": "networkInterface_roleAssignments",
                                                "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]"
                                              },
                                              "type": "Microsoft.Authorization/roleAssignments",
                                              "apiVersion": "2022-04-01",
                                              "scope": "[format('Microsoft.Network/networkInterfaces/{0}', parameters('name'))]",
                                              "name": "[guid(resourceId('Microsoft.Network/networkInterfaces', parameters('name')), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].principalId, coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName)]",
                                              "properties": {
                                                "roleDefinitionId": "[if(contains(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName), variables('builtInRoleNames')[coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName], if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName)))]",
                                                "principalId": "[coalesce(parameters('roleAssignments'), createArray())[copyIndex()].principalId]",
                                                "description": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'description')]",
                                                "principalType": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'principalType')]",
                                                "condition": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'condition')]",
                                                "conditionVersion": "[if(not(empty(tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                                                "delegatedManagedIdentityResourceId": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
                                              },
                                              "dependsOn": [
                                                "networkInterface"
                                              ]
                                            }
                                          },
                                          "outputs": {
                                            "name": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "The name of the deployed resource."
                                              },
                                              "value": "[parameters('name')]"
                                            },
                                            "resourceId": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "The resource ID of the deployed resource."
                                              },
                                              "value": "[resourceId('Microsoft.Network/networkInterfaces', parameters('name'))]"
                                            },
                                            "resourceGroupName": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "The resource group of the deployed resource."
                                              },
                                              "value": "[resourceGroup().name]"
                                            },
                                            "location": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "The location the resource was deployed into."
                                              },
                                              "value": "[reference('networkInterface', '2023-04-01', 'full').location]"
                                            }
                                          }
                                        }
                                      },
                                      "dependsOn": [
                                        "networkInterface_publicIPAddresses"
                                      ]
                                    }
                                  }
                                }
                              }
                            },
                            "vm_aadJoinExtension": {
                              "condition": "[parameters('extensionAadJoinConfig').enabled]",
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "[format('{0}-VM-AADLogin', uniqueString(deployment().name, parameters('location')))]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "virtualMachineName": {
                                    "value": "[parameters('name')]"
                                  },
                                  "name": {
                                    "value": "AADLogin"
                                  },
                                  "location": {
                                    "value": "[parameters('location')]"
                                  },
                                  "publisher": {
                                    "value": "Microsoft.Azure.ActiveDirectory"
                                  },
                                  "type": "[if(equals(parameters('osType'), 'Windows'), createObject('value', 'AADLoginForWindows'), createObject('value', 'AADSSHLoginforLinux'))]",
                                  "typeHandlerVersion": "[if(contains(parameters('extensionAadJoinConfig'), 'typeHandlerVersion'), createObject('value', parameters('extensionAadJoinConfig').typeHandlerVersion), if(equals(parameters('osType'), 'Windows'), createObject('value', '2.0'), createObject('value', '1.0')))]",
                                  "autoUpgradeMinorVersion": "[if(contains(parameters('extensionAadJoinConfig'), 'autoUpgradeMinorVersion'), createObject('value', parameters('extensionAadJoinConfig').autoUpgradeMinorVersion), createObject('value', true()))]",
                                  "enableAutomaticUpgrade": "[if(contains(parameters('extensionAadJoinConfig'), 'enableAutomaticUpgrade'), createObject('value', parameters('extensionAadJoinConfig').enableAutomaticUpgrade), createObject('value', false()))]",
                                  "settings": "[if(contains(parameters('extensionAadJoinConfig'), 'settings'), createObject('value', parameters('extensionAadJoinConfig').settings), createObject('value', createObject()))]",
                                  "supressFailures": {
                                    "value": "[coalesce(tryGet(parameters('extensionAadJoinConfig'), 'supressFailures'), false())]"
                                  },
                                  "tags": {
                                    "value": "[coalesce(tryGet(parameters('extensionAadJoinConfig'), 'tags'), parameters('tags'))]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "languageVersion": "2.0",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.28.1.47646",
                                      "templateHash": "15287507275706455668"
                                    },
                                    "name": "Virtual Machine Extensions",
                                    "description": "This module deploys a Virtual Machine Extension.",
                                    "owner": "Azure/module-maintainers"
                                  },
                                  "parameters": {
                                    "virtualMachineName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Conditional. The name of the parent virtual machine that extension is provisioned for. Required if the template is used in a standalone deployment."
                                      }
                                    },
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The name of the virtual machine extension."
                                      }
                                    },
                                    "location": {
                                      "type": "string",
                                      "defaultValue": "[resourceGroup().location]",
                                      "metadata": {
                                        "description": "Optional. The location the extension is deployed to."
                                      }
                                    },
                                    "publisher": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The name of the extension handler publisher."
                                      }
                                    },
                                    "type": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. Specifies the type of the extension; an example is \"CustomScriptExtension\"."
                                      }
                                    },
                                    "typeHandlerVersion": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. Specifies the version of the script handler."
                                      }
                                    },
                                    "autoUpgradeMinorVersion": {
                                      "type": "bool",
                                      "metadata": {
                                        "description": "Required. Indicates whether the extension should use a newer minor version if one is available at deployment time. Once deployed, however, the extension will not upgrade minor versions unless redeployed, even with this property set to true."
                                      }
                                    },
                                    "forceUpdateTag": {
                                      "type": "string",
                                      "defaultValue": "",
                                      "metadata": {
                                        "description": "Optional. How the extension handler should be forced to update even if the extension configuration has not changed."
                                      }
                                    },
                                    "settings": {
                                      "type": "object",
                                      "defaultValue": {},
                                      "metadata": {
                                        "description": "Optional. Any object that contains the extension specific settings."
                                      }
                                    },
                                    "protectedSettings": {
                                      "type": "secureObject",
                                      "defaultValue": {},
                                      "metadata": {
                                        "description": "Optional. Any object that contains the extension specific protected settings."
                                      }
                                    },
                                    "supressFailures": {
                                      "type": "bool",
                                      "defaultValue": false,
                                      "metadata": {
                                        "description": "Optional. Indicates whether failures stemming from the extension will be suppressed (Operational failures such as not connecting to the VM will not be suppressed regardless of this value). The default is false."
                                      }
                                    },
                                    "enableAutomaticUpgrade": {
                                      "type": "bool",
                                      "metadata": {
                                        "description": "Required. Indicates whether the extension should be automatically upgraded by the platform if there is a newer version of the extension available."
                                      }
                                    },
                                    "tags": {
                                      "type": "object",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. Tags of the resource."
                                      }
                                    }
                                  },
                                  "resources": {
                                    "virtualMachine": {
                                      "existing": true,
                                      "type": "Microsoft.Compute/virtualMachines",
                                      "apiVersion": "2022-11-01",
                                      "name": "[parameters('virtualMachineName')]"
                                    },
                                    "extension": {
                                      "type": "Microsoft.Compute/virtualMachines/extensions",
                                      "apiVersion": "2022-11-01",
                                      "name": "[format('{0}/{1}', parameters('virtualMachineName'), parameters('name'))]",
                                      "location": "[parameters('location')]",
                                      "tags": "[parameters('tags')]",
                                      "properties": {
                                        "publisher": "[parameters('publisher')]",
                                        "type": "[parameters('type')]",
                                        "typeHandlerVersion": "[parameters('typeHandlerVersion')]",
                                        "autoUpgradeMinorVersion": "[parameters('autoUpgradeMinorVersion')]",
                                        "enableAutomaticUpgrade": "[parameters('enableAutomaticUpgrade')]",
                                        "forceUpdateTag": "[if(not(empty(parameters('forceUpdateTag'))), parameters('forceUpdateTag'), null())]",
                                        "settings": "[if(not(empty(parameters('settings'))), parameters('settings'), null())]",
                                        "protectedSettings": "[if(not(empty(parameters('protectedSettings'))), parameters('protectedSettings'), null())]",
                                        "suppressFailures": "[parameters('supressFailures')]"
                                      },
                                      "dependsOn": [
                                        "virtualMachine"
                                      ]
                                    }
                                  },
                                  "outputs": {
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the extension."
                                      },
                                      "value": "[parameters('name')]"
                                    },
                                    "resourceId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource ID of the extension."
                                      },
                                      "value": "[resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('virtualMachineName'), parameters('name'))]"
                                    },
                                    "resourceGroupName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the Resource Group the extension was created in."
                                      },
                                      "value": "[resourceGroup().name]"
                                    },
                                    "location": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The location the resource was deployed into."
                                      },
                                      "value": "[reference('extension', '2022-11-01', 'full').location]"
                                    }
                                  }
                                }
                              },
                              "dependsOn": [
                                "vm"
                              ]
                            },
                            "vm_domainJoinExtension": {
                              "condition": "[and(contains(parameters('extensionDomainJoinConfig'), 'enabled'), parameters('extensionDomainJoinConfig').enabled)]",
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "[format('{0}-VM-DomainJoin', uniqueString(deployment().name, parameters('location')))]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "virtualMachineName": {
                                    "value": "[parameters('name')]"
                                  },
                                  "name": {
                                    "value": "DomainJoin"
                                  },
                                  "location": {
                                    "value": "[parameters('location')]"
                                  },
                                  "publisher": {
                                    "value": "Microsoft.Compute"
                                  },
                                  "type": {
                                    "value": "JsonADDomainExtension"
                                  },
                                  "typeHandlerVersion": "[if(contains(parameters('extensionDomainJoinConfig'), 'typeHandlerVersion'), createObject('value', parameters('extensionDomainJoinConfig').typeHandlerVersion), createObject('value', '1.3'))]",
                                  "autoUpgradeMinorVersion": "[if(contains(parameters('extensionDomainJoinConfig'), 'autoUpgradeMinorVersion'), createObject('value', parameters('extensionDomainJoinConfig').autoUpgradeMinorVersion), createObject('value', true()))]",
                                  "enableAutomaticUpgrade": "[if(contains(parameters('extensionDomainJoinConfig'), 'enableAutomaticUpgrade'), createObject('value', parameters('extensionDomainJoinConfig').enableAutomaticUpgrade), createObject('value', false()))]",
                                  "settings": {
                                    "value": "[parameters('extensionDomainJoinConfig').settings]"
                                  },
                                  "supressFailures": {
                                    "value": "[coalesce(tryGet(parameters('extensionDomainJoinConfig'), 'supressFailures'), false())]"
                                  },
                                  "tags": {
                                    "value": "[coalesce(tryGet(parameters('extensionDomainJoinConfig'), 'tags'), parameters('tags'))]"
                                  },
                                  "protectedSettings": {
                                    "value": {
                                      "Password": "[parameters('extensionDomainJoinPassword')]"
                                    }
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "languageVersion": "2.0",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.28.1.47646",
                                      "templateHash": "15287507275706455668"
                                    },
                                    "name": "Virtual Machine Extensions",
                                    "description": "This module deploys a Virtual Machine Extension.",
                                    "owner": "Azure/module-maintainers"
                                  },
                                  "parameters": {
                                    "virtualMachineName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Conditional. The name of the parent virtual machine that extension is provisioned for. Required if the template is used in a standalone deployment."
                                      }
                                    },
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The name of the virtual machine extension."
                                      }
                                    },
                                    "location": {
                                      "type": "string",
                                      "defaultValue": "[resourceGroup().location]",
                                      "metadata": {
                                        "description": "Optional. The location the extension is deployed to."
                                      }
                                    },
                                    "publisher": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The name of the extension handler publisher."
                                      }
                                    },
                                    "type": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. Specifies the type of the extension; an example is \"CustomScriptExtension\"."
                                      }
                                    },
                                    "typeHandlerVersion": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. Specifies the version of the script handler."
                                      }
                                    },
                                    "autoUpgradeMinorVersion": {
                                      "type": "bool",
                                      "metadata": {
                                        "description": "Required. Indicates whether the extension should use a newer minor version if one is available at deployment time. Once deployed, however, the extension will not upgrade minor versions unless redeployed, even with this property set to true."
                                      }
                                    },
                                    "forceUpdateTag": {
                                      "type": "string",
                                      "defaultValue": "",
                                      "metadata": {
                                        "description": "Optional. How the extension handler should be forced to update even if the extension configuration has not changed."
                                      }
                                    },
                                    "settings": {
                                      "type": "object",
                                      "defaultValue": {},
                                      "metadata": {
                                        "description": "Optional. Any object that contains the extension specific settings."
                                      }
                                    },
                                    "protectedSettings": {
                                      "type": "secureObject",
                                      "defaultValue": {},
                                      "metadata": {
                                        "description": "Optional. Any object that contains the extension specific protected settings."
                                      }
                                    },
                                    "supressFailures": {
                                      "type": "bool",
                                      "defaultValue": false,
                                      "metadata": {
                                        "description": "Optional. Indicates whether failures stemming from the extension will be suppressed (Operational failures such as not connecting to the VM will not be suppressed regardless of this value). The default is false."
                                      }
                                    },
                                    "enableAutomaticUpgrade": {
                                      "type": "bool",
                                      "metadata": {
                                        "description": "Required. Indicates whether the extension should be automatically upgraded by the platform if there is a newer version of the extension available."
                                      }
                                    },
                                    "tags": {
                                      "type": "object",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. Tags of the resource."
                                      }
                                    }
                                  },
                                  "resources": {
                                    "virtualMachine": {
                                      "existing": true,
                                      "type": "Microsoft.Compute/virtualMachines",
                                      "apiVersion": "2022-11-01",
                                      "name": "[parameters('virtualMachineName')]"
                                    },
                                    "extension": {
                                      "type": "Microsoft.Compute/virtualMachines/extensions",
                                      "apiVersion": "2022-11-01",
                                      "name": "[format('{0}/{1}', parameters('virtualMachineName'), parameters('name'))]",
                                      "location": "[parameters('location')]",
                                      "tags": "[parameters('tags')]",
                                      "properties": {
                                        "publisher": "[parameters('publisher')]",
                                        "type": "[parameters('type')]",
                                        "typeHandlerVersion": "[parameters('typeHandlerVersion')]",
                                        "autoUpgradeMinorVersion": "[parameters('autoUpgradeMinorVersion')]",
                                        "enableAutomaticUpgrade": "[parameters('enableAutomaticUpgrade')]",
                                        "forceUpdateTag": "[if(not(empty(parameters('forceUpdateTag'))), parameters('forceUpdateTag'), null())]",
                                        "settings": "[if(not(empty(parameters('settings'))), parameters('settings'), null())]",
                                        "protectedSettings": "[if(not(empty(parameters('protectedSettings'))), parameters('protectedSettings'), null())]",
                                        "suppressFailures": "[parameters('supressFailures')]"
                                      },
                                      "dependsOn": [
                                        "virtualMachine"
                                      ]
                                    }
                                  },
                                  "outputs": {
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the extension."
                                      },
                                      "value": "[parameters('name')]"
                                    },
                                    "resourceId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource ID of the extension."
                                      },
                                      "value": "[resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('virtualMachineName'), parameters('name'))]"
                                    },
                                    "resourceGroupName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the Resource Group the extension was created in."
                                      },
                                      "value": "[resourceGroup().name]"
                                    },
                                    "location": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The location the resource was deployed into."
                                      },
                                      "value": "[reference('extension', '2022-11-01', 'full').location]"
                                    }
                                  }
                                }
                              },
                              "dependsOn": [
                                "vm",
                                "vm_aadJoinExtension"
                              ]
                            },
                            "vm_microsoftAntiMalwareExtension": {
                              "condition": "[parameters('extensionAntiMalwareConfig').enabled]",
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "[format('{0}-VM-MicrosoftAntiMalware', uniqueString(deployment().name, parameters('location')))]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "virtualMachineName": {
                                    "value": "[parameters('name')]"
                                  },
                                  "name": {
                                    "value": "MicrosoftAntiMalware"
                                  },
                                  "location": {
                                    "value": "[parameters('location')]"
                                  },
                                  "publisher": {
                                    "value": "Microsoft.Azure.Security"
                                  },
                                  "type": {
                                    "value": "IaaSAntimalware"
                                  },
                                  "typeHandlerVersion": "[if(contains(parameters('extensionAntiMalwareConfig'), 'typeHandlerVersion'), createObject('value', parameters('extensionAntiMalwareConfig').typeHandlerVersion), createObject('value', '1.3'))]",
                                  "autoUpgradeMinorVersion": "[if(contains(parameters('extensionAntiMalwareConfig'), 'autoUpgradeMinorVersion'), createObject('value', parameters('extensionAntiMalwareConfig').autoUpgradeMinorVersion), createObject('value', true()))]",
                                  "enableAutomaticUpgrade": "[if(contains(parameters('extensionAntiMalwareConfig'), 'enableAutomaticUpgrade'), createObject('value', parameters('extensionAntiMalwareConfig').enableAutomaticUpgrade), createObject('value', false()))]",
                                  "settings": {
                                    "value": "[parameters('extensionAntiMalwareConfig').settings]"
                                  },
                                  "supressFailures": {
                                    "value": "[coalesce(tryGet(parameters('extensionAntiMalwareConfig'), 'supressFailures'), false())]"
                                  },
                                  "tags": {
                                    "value": "[coalesce(tryGet(parameters('extensionAntiMalwareConfig'), 'tags'), parameters('tags'))]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "languageVersion": "2.0",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.28.1.47646",
                                      "templateHash": "15287507275706455668"
                                    },
                                    "name": "Virtual Machine Extensions",
                                    "description": "This module deploys a Virtual Machine Extension.",
                                    "owner": "Azure/module-maintainers"
                                  },
                                  "parameters": {
                                    "virtualMachineName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Conditional. The name of the parent virtual machine that extension is provisioned for. Required if the template is used in a standalone deployment."
                                      }
                                    },
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The name of the virtual machine extension."
                                      }
                                    },
                                    "location": {
                                      "type": "string",
                                      "defaultValue": "[resourceGroup().location]",
                                      "metadata": {
                                        "description": "Optional. The location the extension is deployed to."
                                      }
                                    },
                                    "publisher": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The name of the extension handler publisher."
                                      }
                                    },
                                    "type": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. Specifies the type of the extension; an example is \"CustomScriptExtension\"."
                                      }
                                    },
                                    "typeHandlerVersion": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. Specifies the version of the script handler."
                                      }
                                    },
                                    "autoUpgradeMinorVersion": {
                                      "type": "bool",
                                      "metadata": {
                                        "description": "Required. Indicates whether the extension should use a newer minor version if one is available at deployment time. Once deployed, however, the extension will not upgrade minor versions unless redeployed, even with this property set to true."
                                      }
                                    },
                                    "forceUpdateTag": {
                                      "type": "string",
                                      "defaultValue": "",
                                      "metadata": {
                                        "description": "Optional. How the extension handler should be forced to update even if the extension configuration has not changed."
                                      }
                                    },
                                    "settings": {
                                      "type": "object",
                                      "defaultValue": {},
                                      "metadata": {
                                        "description": "Optional. Any object that contains the extension specific settings."
                                      }
                                    },
                                    "protectedSettings": {
                                      "type": "secureObject",
                                      "defaultValue": {},
                                      "metadata": {
                                        "description": "Optional. Any object that contains the extension specific protected settings."
                                      }
                                    },
                                    "supressFailures": {
                                      "type": "bool",
                                      "defaultValue": false,
                                      "metadata": {
                                        "description": "Optional. Indicates whether failures stemming from the extension will be suppressed (Operational failures such as not connecting to the VM will not be suppressed regardless of this value). The default is false."
                                      }
                                    },
                                    "enableAutomaticUpgrade": {
                                      "type": "bool",
                                      "metadata": {
                                        "description": "Required. Indicates whether the extension should be automatically upgraded by the platform if there is a newer version of the extension available."
                                      }
                                    },
                                    "tags": {
                                      "type": "object",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. Tags of the resource."
                                      }
                                    }
                                  },
                                  "resources": {
                                    "virtualMachine": {
                                      "existing": true,
                                      "type": "Microsoft.Compute/virtualMachines",
                                      "apiVersion": "2022-11-01",
                                      "name": "[parameters('virtualMachineName')]"
                                    },
                                    "extension": {
                                      "type": "Microsoft.Compute/virtualMachines/extensions",
                                      "apiVersion": "2022-11-01",
                                      "name": "[format('{0}/{1}', parameters('virtualMachineName'), parameters('name'))]",
                                      "location": "[parameters('location')]",
                                      "tags": "[parameters('tags')]",
                                      "properties": {
                                        "publisher": "[parameters('publisher')]",
                                        "type": "[parameters('type')]",
                                        "typeHandlerVersion": "[parameters('typeHandlerVersion')]",
                                        "autoUpgradeMinorVersion": "[parameters('autoUpgradeMinorVersion')]",
                                        "enableAutomaticUpgrade": "[parameters('enableAutomaticUpgrade')]",
                                        "forceUpdateTag": "[if(not(empty(parameters('forceUpdateTag'))), parameters('forceUpdateTag'), null())]",
                                        "settings": "[if(not(empty(parameters('settings'))), parameters('settings'), null())]",
                                        "protectedSettings": "[if(not(empty(parameters('protectedSettings'))), parameters('protectedSettings'), null())]",
                                        "suppressFailures": "[parameters('supressFailures')]"
                                      },
                                      "dependsOn": [
                                        "virtualMachine"
                                      ]
                                    }
                                  },
                                  "outputs": {
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the extension."
                                      },
                                      "value": "[parameters('name')]"
                                    },
                                    "resourceId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource ID of the extension."
                                      },
                                      "value": "[resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('virtualMachineName'), parameters('name'))]"
                                    },
                                    "resourceGroupName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the Resource Group the extension was created in."
                                      },
                                      "value": "[resourceGroup().name]"
                                    },
                                    "location": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The location the resource was deployed into."
                                      },
                                      "value": "[reference('extension', '2022-11-01', 'full').location]"
                                    }
                                  }
                                }
                              },
                              "dependsOn": [
                                "vm",
                                "vm_domainJoinExtension"
                              ]
                            },
                            "vm_azureMonitorAgentExtension": {
                              "condition": "[parameters('extensionMonitoringAgentConfig').enabled]",
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "[format('{0}-VM-AzureMonitorAgent', uniqueString(deployment().name, parameters('location')))]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "virtualMachineName": {
                                    "value": "[parameters('name')]"
                                  },
                                  "name": {
                                    "value": "AzureMonitorAgent"
                                  },
                                  "location": {
                                    "value": "[parameters('location')]"
                                  },
                                  "publisher": {
                                    "value": "Microsoft.Azure.Monitor"
                                  },
                                  "type": "[if(equals(parameters('osType'), 'Windows'), createObject('value', 'AzureMonitorWindowsAgent'), createObject('value', 'AzureMonitorLinuxAgent'))]",
                                  "typeHandlerVersion": {
                                    "value": "[coalesce(tryGet(parameters('extensionMonitoringAgentConfig'), 'typeHandlerVersion'), if(equals(parameters('osType'), 'Windows'), '1.22', '1.29'))]"
                                  },
                                  "autoUpgradeMinorVersion": {
                                    "value": "[coalesce(tryGet(parameters('extensionMonitoringAgentConfig'), 'autoUpgradeMinorVersion'), true())]"
                                  },
                                  "enableAutomaticUpgrade": {
                                    "value": "[coalesce(tryGet(parameters('extensionMonitoringAgentConfig'), 'enableAutomaticUpgrade'), false())]"
                                  },
                                  "settings": {
                                    "value": {
                                      "workspaceId": "[if(not(empty(coalesce(tryGet(parameters('extensionMonitoringAgentConfig'), 'monitoringWorkspaceId'), ''))), reference('vm_logAnalyticsWorkspace').customerId, '')]",
                                      "GCS_AUTO_CONFIG": "[if(equals(parameters('osType'), 'Linux'), true(), null())]"
                                    }
                                  },
                                  "supressFailures": {
                                    "value": "[coalesce(tryGet(parameters('extensionMonitoringAgentConfig'), 'supressFailures'), false())]"
                                  },
                                  "tags": {
                                    "value": "[coalesce(tryGet(parameters('extensionMonitoringAgentConfig'), 'tags'), parameters('tags'))]"
                                  },
                                  "protectedSettings": {
                                    "value": {
                                      "workspaceKey": "[if(not(empty(coalesce(tryGet(parameters('extensionMonitoringAgentConfig'), 'monitoringWorkspaceId'), ''))), listKeys(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(if(not(empty(coalesce(tryGet(parameters('extensionMonitoringAgentConfig'), 'monitoringWorkspaceId'), ''))), parameters('extensionMonitoringAgentConfig').monitoringWorkspaceId, '//'), '/')[2], split(if(not(empty(coalesce(tryGet(parameters('extensionMonitoringAgentConfig'), 'monitoringWorkspaceId'), ''))), parameters('extensionMonitoringAgentConfig').monitoringWorkspaceId, '////'), '/')[4]), 'Microsoft.OperationalInsights/workspaces', last(split(if(not(empty(coalesce(tryGet(parameters('extensionMonitoringAgentConfig'), 'monitoringWorkspaceId'), ''))), parameters('extensionMonitoringAgentConfig').monitoringWorkspaceId, 'law'), '/'))), '2021-06-01').primarySharedKey, '')]"
                                    }
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "languageVersion": "2.0",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.28.1.47646",
                                      "templateHash": "15287507275706455668"
                                    },
                                    "name": "Virtual Machine Extensions",
                                    "description": "This module deploys a Virtual Machine Extension.",
                                    "owner": "Azure/module-maintainers"
                                  },
                                  "parameters": {
                                    "virtualMachineName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Conditional. The name of the parent virtual machine that extension is provisioned for. Required if the template is used in a standalone deployment."
                                      }
                                    },
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The name of the virtual machine extension."
                                      }
                                    },
                                    "location": {
                                      "type": "string",
                                      "defaultValue": "[resourceGroup().location]",
                                      "metadata": {
                                        "description": "Optional. The location the extension is deployed to."
                                      }
                                    },
                                    "publisher": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The name of the extension handler publisher."
                                      }
                                    },
                                    "type": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. Specifies the type of the extension; an example is \"CustomScriptExtension\"."
                                      }
                                    },
                                    "typeHandlerVersion": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. Specifies the version of the script handler."
                                      }
                                    },
                                    "autoUpgradeMinorVersion": {
                                      "type": "bool",
                                      "metadata": {
                                        "description": "Required. Indicates whether the extension should use a newer minor version if one is available at deployment time. Once deployed, however, the extension will not upgrade minor versions unless redeployed, even with this property set to true."
                                      }
                                    },
                                    "forceUpdateTag": {
                                      "type": "string",
                                      "defaultValue": "",
                                      "metadata": {
                                        "description": "Optional. How the extension handler should be forced to update even if the extension configuration has not changed."
                                      }
                                    },
                                    "settings": {
                                      "type": "object",
                                      "defaultValue": {},
                                      "metadata": {
                                        "description": "Optional. Any object that contains the extension specific settings."
                                      }
                                    },
                                    "protectedSettings": {
                                      "type": "secureObject",
                                      "defaultValue": {},
                                      "metadata": {
                                        "description": "Optional. Any object that contains the extension specific protected settings."
                                      }
                                    },
                                    "supressFailures": {
                                      "type": "bool",
                                      "defaultValue": false,
                                      "metadata": {
                                        "description": "Optional. Indicates whether failures stemming from the extension will be suppressed (Operational failures such as not connecting to the VM will not be suppressed regardless of this value). The default is false."
                                      }
                                    },
                                    "enableAutomaticUpgrade": {
                                      "type": "bool",
                                      "metadata": {
                                        "description": "Required. Indicates whether the extension should be automatically upgraded by the platform if there is a newer version of the extension available."
                                      }
                                    },
                                    "tags": {
                                      "type": "object",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. Tags of the resource."
                                      }
                                    }
                                  },
                                  "resources": {
                                    "virtualMachine": {
                                      "existing": true,
                                      "type": "Microsoft.Compute/virtualMachines",
                                      "apiVersion": "2022-11-01",
                                      "name": "[parameters('virtualMachineName')]"
                                    },
                                    "extension": {
                                      "type": "Microsoft.Compute/virtualMachines/extensions",
                                      "apiVersion": "2022-11-01",
                                      "name": "[format('{0}/{1}', parameters('virtualMachineName'), parameters('name'))]",
                                      "location": "[parameters('location')]",
                                      "tags": "[parameters('tags')]",
                                      "properties": {
                                        "publisher": "[parameters('publisher')]",
                                        "type": "[parameters('type')]",
                                        "typeHandlerVersion": "[parameters('typeHandlerVersion')]",
                                        "autoUpgradeMinorVersion": "[parameters('autoUpgradeMinorVersion')]",
                                        "enableAutomaticUpgrade": "[parameters('enableAutomaticUpgrade')]",
                                        "forceUpdateTag": "[if(not(empty(parameters('forceUpdateTag'))), parameters('forceUpdateTag'), null())]",
                                        "settings": "[if(not(empty(parameters('settings'))), parameters('settings'), null())]",
                                        "protectedSettings": "[if(not(empty(parameters('protectedSettings'))), parameters('protectedSettings'), null())]",
                                        "suppressFailures": "[parameters('supressFailures')]"
                                      },
                                      "dependsOn": [
                                        "virtualMachine"
                                      ]
                                    }
                                  },
                                  "outputs": {
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the extension."
                                      },
                                      "value": "[parameters('name')]"
                                    },
                                    "resourceId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource ID of the extension."
                                      },
                                      "value": "[resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('virtualMachineName'), parameters('name'))]"
                                    },
                                    "resourceGroupName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the Resource Group the extension was created in."
                                      },
                                      "value": "[resourceGroup().name]"
                                    },
                                    "location": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The location the resource was deployed into."
                                      },
                                      "value": "[reference('extension', '2022-11-01', 'full').location]"
                                    }
                                  }
                                }
                              },
                              "dependsOn": [
                                "vm",
                                "vm_logAnalyticsWorkspace",
                                "vm_microsoftAntiMalwareExtension"
                              ]
                            },
                            "vm_dependencyAgentExtension": {
                              "condition": "[parameters('extensionDependencyAgentConfig').enabled]",
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "[format('{0}-VM-DependencyAgent', uniqueString(deployment().name, parameters('location')))]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "virtualMachineName": {
                                    "value": "[parameters('name')]"
                                  },
                                  "name": {
                                    "value": "DependencyAgent"
                                  },
                                  "location": {
                                    "value": "[parameters('location')]"
                                  },
                                  "publisher": {
                                    "value": "Microsoft.Azure.Monitoring.DependencyAgent"
                                  },
                                  "type": "[if(equals(parameters('osType'), 'Windows'), createObject('value', 'DependencyAgentWindows'), createObject('value', 'DependencyAgentLinux'))]",
                                  "typeHandlerVersion": "[if(contains(parameters('extensionDependencyAgentConfig'), 'typeHandlerVersion'), createObject('value', parameters('extensionDependencyAgentConfig').typeHandlerVersion), createObject('value', '9.10'))]",
                                  "autoUpgradeMinorVersion": "[if(contains(parameters('extensionDependencyAgentConfig'), 'autoUpgradeMinorVersion'), createObject('value', parameters('extensionDependencyAgentConfig').autoUpgradeMinorVersion), createObject('value', true()))]",
                                  "enableAutomaticUpgrade": "[if(contains(parameters('extensionDependencyAgentConfig'), 'enableAutomaticUpgrade'), createObject('value', parameters('extensionDependencyAgentConfig').enableAutomaticUpgrade), createObject('value', true()))]",
                                  "settings": {
                                    "value": {
                                      "enableAMA": "[if(contains(parameters('extensionDependencyAgentConfig'), 'enableAMA'), parameters('extensionDependencyAgentConfig').enableAMA, true())]"
                                    }
                                  },
                                  "supressFailures": {
                                    "value": "[coalesce(tryGet(parameters('extensionDependencyAgentConfig'), 'supressFailures'), false())]"
                                  },
                                  "tags": {
                                    "value": "[coalesce(tryGet(parameters('extensionDependencyAgentConfig'), 'tags'), parameters('tags'))]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "languageVersion": "2.0",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.28.1.47646",
                                      "templateHash": "15287507275706455668"
                                    },
                                    "name": "Virtual Machine Extensions",
                                    "description": "This module deploys a Virtual Machine Extension.",
                                    "owner": "Azure/module-maintainers"
                                  },
                                  "parameters": {
                                    "virtualMachineName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Conditional. The name of the parent virtual machine that extension is provisioned for. Required if the template is used in a standalone deployment."
                                      }
                                    },
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The name of the virtual machine extension."
                                      }
                                    },
                                    "location": {
                                      "type": "string",
                                      "defaultValue": "[resourceGroup().location]",
                                      "metadata": {
                                        "description": "Optional. The location the extension is deployed to."
                                      }
                                    },
                                    "publisher": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The name of the extension handler publisher."
                                      }
                                    },
                                    "type": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. Specifies the type of the extension; an example is \"CustomScriptExtension\"."
                                      }
                                    },
                                    "typeHandlerVersion": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. Specifies the version of the script handler."
                                      }
                                    },
                                    "autoUpgradeMinorVersion": {
                                      "type": "bool",
                                      "metadata": {
                                        "description": "Required. Indicates whether the extension should use a newer minor version if one is available at deployment time. Once deployed, however, the extension will not upgrade minor versions unless redeployed, even with this property set to true."
                                      }
                                    },
                                    "forceUpdateTag": {
                                      "type": "string",
                                      "defaultValue": "",
                                      "metadata": {
                                        "description": "Optional. How the extension handler should be forced to update even if the extension configuration has not changed."
                                      }
                                    },
                                    "settings": {
                                      "type": "object",
                                      "defaultValue": {},
                                      "metadata": {
                                        "description": "Optional. Any object that contains the extension specific settings."
                                      }
                                    },
                                    "protectedSettings": {
                                      "type": "secureObject",
                                      "defaultValue": {},
                                      "metadata": {
                                        "description": "Optional. Any object that contains the extension specific protected settings."
                                      }
                                    },
                                    "supressFailures": {
                                      "type": "bool",
                                      "defaultValue": false,
                                      "metadata": {
                                        "description": "Optional. Indicates whether failures stemming from the extension will be suppressed (Operational failures such as not connecting to the VM will not be suppressed regardless of this value). The default is false."
                                      }
                                    },
                                    "enableAutomaticUpgrade": {
                                      "type": "bool",
                                      "metadata": {
                                        "description": "Required. Indicates whether the extension should be automatically upgraded by the platform if there is a newer version of the extension available."
                                      }
                                    },
                                    "tags": {
                                      "type": "object",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. Tags of the resource."
                                      }
                                    }
                                  },
                                  "resources": {
                                    "virtualMachine": {
                                      "existing": true,
                                      "type": "Microsoft.Compute/virtualMachines",
                                      "apiVersion": "2022-11-01",
                                      "name": "[parameters('virtualMachineName')]"
                                    },
                                    "extension": {
                                      "type": "Microsoft.Compute/virtualMachines/extensions",
                                      "apiVersion": "2022-11-01",
                                      "name": "[format('{0}/{1}', parameters('virtualMachineName'), parameters('name'))]",
                                      "location": "[parameters('location')]",
                                      "tags": "[parameters('tags')]",
                                      "properties": {
                                        "publisher": "[parameters('publisher')]",
                                        "type": "[parameters('type')]",
                                        "typeHandlerVersion": "[parameters('typeHandlerVersion')]",
                                        "autoUpgradeMinorVersion": "[parameters('autoUpgradeMinorVersion')]",
                                        "enableAutomaticUpgrade": "[parameters('enableAutomaticUpgrade')]",
                                        "forceUpdateTag": "[if(not(empty(parameters('forceUpdateTag'))), parameters('forceUpdateTag'), null())]",
                                        "settings": "[if(not(empty(parameters('settings'))), parameters('settings'), null())]",
                                        "protectedSettings": "[if(not(empty(parameters('protectedSettings'))), parameters('protectedSettings'), null())]",
                                        "suppressFailures": "[parameters('supressFailures')]"
                                      },
                                      "dependsOn": [
                                        "virtualMachine"
                                      ]
                                    }
                                  },
                                  "outputs": {
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the extension."
                                      },
                                      "value": "[parameters('name')]"
                                    },
                                    "resourceId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource ID of the extension."
                                      },
                                      "value": "[resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('virtualMachineName'), parameters('name'))]"
                                    },
                                    "resourceGroupName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the Resource Group the extension was created in."
                                      },
                                      "value": "[resourceGroup().name]"
                                    },
                                    "location": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The location the resource was deployed into."
                                      },
                                      "value": "[reference('extension', '2022-11-01', 'full').location]"
                                    }
                                  }
                                }
                              },
                              "dependsOn": [
                                "vm",
                                "vm_azureMonitorAgentExtension"
                              ]
                            },
                            "vm_networkWatcherAgentExtension": {
                              "condition": "[parameters('extensionNetworkWatcherAgentConfig').enabled]",
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "[format('{0}-VM-NetworkWatcherAgent', uniqueString(deployment().name, parameters('location')))]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "virtualMachineName": {
                                    "value": "[parameters('name')]"
                                  },
                                  "name": {
                                    "value": "NetworkWatcherAgent"
                                  },
                                  "location": {
                                    "value": "[parameters('location')]"
                                  },
                                  "publisher": {
                                    "value": "Microsoft.Azure.NetworkWatcher"
                                  },
                                  "type": "[if(equals(parameters('osType'), 'Windows'), createObject('value', 'NetworkWatcherAgentWindows'), createObject('value', 'NetworkWatcherAgentLinux'))]",
                                  "typeHandlerVersion": "[if(contains(parameters('extensionNetworkWatcherAgentConfig'), 'typeHandlerVersion'), createObject('value', parameters('extensionNetworkWatcherAgentConfig').typeHandlerVersion), createObject('value', '1.4'))]",
                                  "autoUpgradeMinorVersion": "[if(contains(parameters('extensionNetworkWatcherAgentConfig'), 'autoUpgradeMinorVersion'), createObject('value', parameters('extensionNetworkWatcherAgentConfig').autoUpgradeMinorVersion), createObject('value', true()))]",
                                  "enableAutomaticUpgrade": "[if(contains(parameters('extensionNetworkWatcherAgentConfig'), 'enableAutomaticUpgrade'), createObject('value', parameters('extensionNetworkWatcherAgentConfig').enableAutomaticUpgrade), createObject('value', false()))]",
                                  "supressFailures": {
                                    "value": "[coalesce(tryGet(parameters('extensionNetworkWatcherAgentConfig'), 'supressFailures'), false())]"
                                  },
                                  "tags": {
                                    "value": "[coalesce(tryGet(parameters('extensionNetworkWatcherAgentConfig'), 'tags'), parameters('tags'))]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "languageVersion": "2.0",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.28.1.47646",
                                      "templateHash": "15287507275706455668"
                                    },
                                    "name": "Virtual Machine Extensions",
                                    "description": "This module deploys a Virtual Machine Extension.",
                                    "owner": "Azure/module-maintainers"
                                  },
                                  "parameters": {
                                    "virtualMachineName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Conditional. The name of the parent virtual machine that extension is provisioned for. Required if the template is used in a standalone deployment."
                                      }
                                    },
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The name of the virtual machine extension."
                                      }
                                    },
                                    "location": {
                                      "type": "string",
                                      "defaultValue": "[resourceGroup().location]",
                                      "metadata": {
                                        "description": "Optional. The location the extension is deployed to."
                                      }
                                    },
                                    "publisher": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The name of the extension handler publisher."
                                      }
                                    },
                                    "type": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. Specifies the type of the extension; an example is \"CustomScriptExtension\"."
                                      }
                                    },
                                    "typeHandlerVersion": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. Specifies the version of the script handler."
                                      }
                                    },
                                    "autoUpgradeMinorVersion": {
                                      "type": "bool",
                                      "metadata": {
                                        "description": "Required. Indicates whether the extension should use a newer minor version if one is available at deployment time. Once deployed, however, the extension will not upgrade minor versions unless redeployed, even with this property set to true."
                                      }
                                    },
                                    "forceUpdateTag": {
                                      "type": "string",
                                      "defaultValue": "",
                                      "metadata": {
                                        "description": "Optional. How the extension handler should be forced to update even if the extension configuration has not changed."
                                      }
                                    },
                                    "settings": {
                                      "type": "object",
                                      "defaultValue": {},
                                      "metadata": {
                                        "description": "Optional. Any object that contains the extension specific settings."
                                      }
                                    },
                                    "protectedSettings": {
                                      "type": "secureObject",
                                      "defaultValue": {},
                                      "metadata": {
                                        "description": "Optional. Any object that contains the extension specific protected settings."
                                      }
                                    },
                                    "supressFailures": {
                                      "type": "bool",
                                      "defaultValue": false,
                                      "metadata": {
                                        "description": "Optional. Indicates whether failures stemming from the extension will be suppressed (Operational failures such as not connecting to the VM will not be suppressed regardless of this value). The default is false."
                                      }
                                    },
                                    "enableAutomaticUpgrade": {
                                      "type": "bool",
                                      "metadata": {
                                        "description": "Required. Indicates whether the extension should be automatically upgraded by the platform if there is a newer version of the extension available."
                                      }
                                    },
                                    "tags": {
                                      "type": "object",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. Tags of the resource."
                                      }
                                    }
                                  },
                                  "resources": {
                                    "virtualMachine": {
                                      "existing": true,
                                      "type": "Microsoft.Compute/virtualMachines",
                                      "apiVersion": "2022-11-01",
                                      "name": "[parameters('virtualMachineName')]"
                                    },
                                    "extension": {
                                      "type": "Microsoft.Compute/virtualMachines/extensions",
                                      "apiVersion": "2022-11-01",
                                      "name": "[format('{0}/{1}', parameters('virtualMachineName'), parameters('name'))]",
                                      "location": "[parameters('location')]",
                                      "tags": "[parameters('tags')]",
                                      "properties": {
                                        "publisher": "[parameters('publisher')]",
                                        "type": "[parameters('type')]",
                                        "typeHandlerVersion": "[parameters('typeHandlerVersion')]",
                                        "autoUpgradeMinorVersion": "[parameters('autoUpgradeMinorVersion')]",
                                        "enableAutomaticUpgrade": "[parameters('enableAutomaticUpgrade')]",
                                        "forceUpdateTag": "[if(not(empty(parameters('forceUpdateTag'))), parameters('forceUpdateTag'), null())]",
                                        "settings": "[if(not(empty(parameters('settings'))), parameters('settings'), null())]",
                                        "protectedSettings": "[if(not(empty(parameters('protectedSettings'))), parameters('protectedSettings'), null())]",
                                        "suppressFailures": "[parameters('supressFailures')]"
                                      },
                                      "dependsOn": [
                                        "virtualMachine"
                                      ]
                                    }
                                  },
                                  "outputs": {
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the extension."
                                      },
                                      "value": "[parameters('name')]"
                                    },
                                    "resourceId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource ID of the extension."
                                      },
                                      "value": "[resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('virtualMachineName'), parameters('name'))]"
                                    },
                                    "resourceGroupName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the Resource Group the extension was created in."
                                      },
                                      "value": "[resourceGroup().name]"
                                    },
                                    "location": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The location the resource was deployed into."
                                      },
                                      "value": "[reference('extension', '2022-11-01', 'full').location]"
                                    }
                                  }
                                }
                              },
                              "dependsOn": [
                                "vm",
                                "vm_dependencyAgentExtension"
                              ]
                            },
                            "vm_desiredStateConfigurationExtension": {
                              "condition": "[parameters('extensionDSCConfig').enabled]",
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "[format('{0}-VM-DesiredStateConfiguration', uniqueString(deployment().name, parameters('location')))]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "virtualMachineName": {
                                    "value": "[parameters('name')]"
                                  },
                                  "name": {
                                    "value": "DesiredStateConfiguration"
                                  },
                                  "location": {
                                    "value": "[parameters('location')]"
                                  },
                                  "publisher": {
                                    "value": "Microsoft.Powershell"
                                  },
                                  "type": {
                                    "value": "DSC"
                                  },
                                  "typeHandlerVersion": "[if(contains(parameters('extensionDSCConfig'), 'typeHandlerVersion'), createObject('value', parameters('extensionDSCConfig').typeHandlerVersion), createObject('value', '2.77'))]",
                                  "autoUpgradeMinorVersion": "[if(contains(parameters('extensionDSCConfig'), 'autoUpgradeMinorVersion'), createObject('value', parameters('extensionDSCConfig').autoUpgradeMinorVersion), createObject('value', true()))]",
                                  "enableAutomaticUpgrade": "[if(contains(parameters('extensionDSCConfig'), 'enableAutomaticUpgrade'), createObject('value', parameters('extensionDSCConfig').enableAutomaticUpgrade), createObject('value', false()))]",
                                  "settings": "[if(contains(parameters('extensionDSCConfig'), 'settings'), createObject('value', parameters('extensionDSCConfig').settings), createObject('value', createObject()))]",
                                  "supressFailures": {
                                    "value": "[coalesce(tryGet(parameters('extensionDSCConfig'), 'supressFailures'), false())]"
                                  },
                                  "tags": {
                                    "value": "[coalesce(tryGet(parameters('extensionDSCConfig'), 'tags'), parameters('tags'))]"
                                  },
                                  "protectedSettings": "[if(contains(parameters('extensionDSCConfig'), 'protectedSettings'), createObject('value', parameters('extensionDSCConfig').protectedSettings), createObject('value', createObject()))]"
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "languageVersion": "2.0",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.28.1.47646",
                                      "templateHash": "15287507275706455668"
                                    },
                                    "name": "Virtual Machine Extensions",
                                    "description": "This module deploys a Virtual Machine Extension.",
                                    "owner": "Azure/module-maintainers"
                                  },
                                  "parameters": {
                                    "virtualMachineName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Conditional. The name of the parent virtual machine that extension is provisioned for. Required if the template is used in a standalone deployment."
                                      }
                                    },
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The name of the virtual machine extension."
                                      }
                                    },
                                    "location": {
                                      "type": "string",
                                      "defaultValue": "[resourceGroup().location]",
                                      "metadata": {
                                        "description": "Optional. The location the extension is deployed to."
                                      }
                                    },
                                    "publisher": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The name of the extension handler publisher."
                                      }
                                    },
                                    "type": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. Specifies the type of the extension; an example is \"CustomScriptExtension\"."
                                      }
                                    },
                                    "typeHandlerVersion": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. Specifies the version of the script handler."
                                      }
                                    },
                                    "autoUpgradeMinorVersion": {
                                      "type": "bool",
                                      "metadata": {
                                        "description": "Required. Indicates whether the extension should use a newer minor version if one is available at deployment time. Once deployed, however, the extension will not upgrade minor versions unless redeployed, even with this property set to true."
                                      }
                                    },
                                    "forceUpdateTag": {
                                      "type": "string",
                                      "defaultValue": "",
                                      "metadata": {
                                        "description": "Optional. How the extension handler should be forced to update even if the extension configuration has not changed."
                                      }
                                    },
                                    "settings": {
                                      "type": "object",
                                      "defaultValue": {},
                                      "metadata": {
                                        "description": "Optional. Any object that contains the extension specific settings."
                                      }
                                    },
                                    "protectedSettings": {
                                      "type": "secureObject",
                                      "defaultValue": {},
                                      "metadata": {
                                        "description": "Optional. Any object that contains the extension specific protected settings."
                                      }
                                    },
                                    "supressFailures": {
                                      "type": "bool",
                                      "defaultValue": false,
                                      "metadata": {
                                        "description": "Optional. Indicates whether failures stemming from the extension will be suppressed (Operational failures such as not connecting to the VM will not be suppressed regardless of this value). The default is false."
                                      }
                                    },
                                    "enableAutomaticUpgrade": {
                                      "type": "bool",
                                      "metadata": {
                                        "description": "Required. Indicates whether the extension should be automatically upgraded by the platform if there is a newer version of the extension available."
                                      }
                                    },
                                    "tags": {
                                      "type": "object",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. Tags of the resource."
                                      }
                                    }
                                  },
                                  "resources": {
                                    "virtualMachine": {
                                      "existing": true,
                                      "type": "Microsoft.Compute/virtualMachines",
                                      "apiVersion": "2022-11-01",
                                      "name": "[parameters('virtualMachineName')]"
                                    },
                                    "extension": {
                                      "type": "Microsoft.Compute/virtualMachines/extensions",
                                      "apiVersion": "2022-11-01",
                                      "name": "[format('{0}/{1}', parameters('virtualMachineName'), parameters('name'))]",
                                      "location": "[parameters('location')]",
                                      "tags": "[parameters('tags')]",
                                      "properties": {
                                        "publisher": "[parameters('publisher')]",
                                        "type": "[parameters('type')]",
                                        "typeHandlerVersion": "[parameters('typeHandlerVersion')]",
                                        "autoUpgradeMinorVersion": "[parameters('autoUpgradeMinorVersion')]",
                                        "enableAutomaticUpgrade": "[parameters('enableAutomaticUpgrade')]",
                                        "forceUpdateTag": "[if(not(empty(parameters('forceUpdateTag'))), parameters('forceUpdateTag'), null())]",
                                        "settings": "[if(not(empty(parameters('settings'))), parameters('settings'), null())]",
                                        "protectedSettings": "[if(not(empty(parameters('protectedSettings'))), parameters('protectedSettings'), null())]",
                                        "suppressFailures": "[parameters('supressFailures')]"
                                      },
                                      "dependsOn": [
                                        "virtualMachine"
                                      ]
                                    }
                                  },
                                  "outputs": {
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the extension."
                                      },
                                      "value": "[parameters('name')]"
                                    },
                                    "resourceId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource ID of the extension."
                                      },
                                      "value": "[resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('virtualMachineName'), parameters('name'))]"
                                    },
                                    "resourceGroupName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the Resource Group the extension was created in."
                                      },
                                      "value": "[resourceGroup().name]"
                                    },
                                    "location": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The location the resource was deployed into."
                                      },
                                      "value": "[reference('extension', '2022-11-01', 'full').location]"
                                    }
                                  }
                                }
                              },
                              "dependsOn": [
                                "vm",
                                "vm_networkWatcherAgentExtension"
                              ]
                            },
                            "vm_customScriptExtension": {
                              "condition": "[parameters('extensionCustomScriptConfig').enabled]",
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "[format('{0}-VM-CustomScriptExtension', uniqueString(deployment().name, parameters('location')))]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "virtualMachineName": {
                                    "value": "[parameters('name')]"
                                  },
                                  "name": {
                                    "value": "CustomScriptExtension"
                                  },
                                  "location": {
                                    "value": "[parameters('location')]"
                                  },
                                  "publisher": "[if(equals(parameters('osType'), 'Windows'), createObject('value', 'Microsoft.Compute'), createObject('value', 'Microsoft.Azure.Extensions'))]",
                                  "type": "[if(equals(parameters('osType'), 'Windows'), createObject('value', 'CustomScriptExtension'), createObject('value', 'CustomScript'))]",
                                  "typeHandlerVersion": "[if(contains(parameters('extensionCustomScriptConfig'), 'typeHandlerVersion'), createObject('value', parameters('extensionCustomScriptConfig').typeHandlerVersion), if(equals(parameters('osType'), 'Windows'), createObject('value', '1.10'), createObject('value', '2.1')))]",
                                  "autoUpgradeMinorVersion": "[if(contains(parameters('extensionCustomScriptConfig'), 'autoUpgradeMinorVersion'), createObject('value', parameters('extensionCustomScriptConfig').autoUpgradeMinorVersion), createObject('value', true()))]",
                                  "enableAutomaticUpgrade": "[if(contains(parameters('extensionCustomScriptConfig'), 'enableAutomaticUpgrade'), createObject('value', parameters('extensionCustomScriptConfig').enableAutomaticUpgrade), createObject('value', false()))]",
                                  "settings": {
                                    "value": {
                                      "copy": [
                                        {
                                          "name": "fileUris",
                                          "count": "[length(parameters('extensionCustomScriptConfig').fileData)]",
                                          "input": "[if(contains(parameters('extensionCustomScriptConfig').fileData[copyIndex('fileUris')], 'storageAccountId'), format('{0}?{1}', parameters('extensionCustomScriptConfig').fileData[copyIndex('fileUris')].uri, listAccountSas(parameters('extensionCustomScriptConfig').fileData[copyIndex('fileUris')].storageAccountId, '2019-04-01', variables('accountSasProperties')).accountSasToken), parameters('extensionCustomScriptConfig').fileData[copyIndex('fileUris')].uri)]"
                                        }
                                      ]
                                    }
                                  },
                                  "supressFailures": {
                                    "value": "[coalesce(tryGet(parameters('extensionCustomScriptConfig'), 'supressFailures'), false())]"
                                  },
                                  "tags": {
                                    "value": "[coalesce(tryGet(parameters('extensionCustomScriptConfig'), 'tags'), parameters('tags'))]"
                                  },
                                  "protectedSettings": {
                                    "value": "[parameters('extensionCustomScriptProtectedSetting')]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "languageVersion": "2.0",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.28.1.47646",
                                      "templateHash": "15287507275706455668"
                                    },
                                    "name": "Virtual Machine Extensions",
                                    "description": "This module deploys a Virtual Machine Extension.",
                                    "owner": "Azure/module-maintainers"
                                  },
                                  "parameters": {
                                    "virtualMachineName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Conditional. The name of the parent virtual machine that extension is provisioned for. Required if the template is used in a standalone deployment."
                                      }
                                    },
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The name of the virtual machine extension."
                                      }
                                    },
                                    "location": {
                                      "type": "string",
                                      "defaultValue": "[resourceGroup().location]",
                                      "metadata": {
                                        "description": "Optional. The location the extension is deployed to."
                                      }
                                    },
                                    "publisher": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The name of the extension handler publisher."
                                      }
                                    },
                                    "type": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. Specifies the type of the extension; an example is \"CustomScriptExtension\"."
                                      }
                                    },
                                    "typeHandlerVersion": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. Specifies the version of the script handler."
                                      }
                                    },
                                    "autoUpgradeMinorVersion": {
                                      "type": "bool",
                                      "metadata": {
                                        "description": "Required. Indicates whether the extension should use a newer minor version if one is available at deployment time. Once deployed, however, the extension will not upgrade minor versions unless redeployed, even with this property set to true."
                                      }
                                    },
                                    "forceUpdateTag": {
                                      "type": "string",
                                      "defaultValue": "",
                                      "metadata": {
                                        "description": "Optional. How the extension handler should be forced to update even if the extension configuration has not changed."
                                      }
                                    },
                                    "settings": {
                                      "type": "object",
                                      "defaultValue": {},
                                      "metadata": {
                                        "description": "Optional. Any object that contains the extension specific settings."
                                      }
                                    },
                                    "protectedSettings": {
                                      "type": "secureObject",
                                      "defaultValue": {},
                                      "metadata": {
                                        "description": "Optional. Any object that contains the extension specific protected settings."
                                      }
                                    },
                                    "supressFailures": {
                                      "type": "bool",
                                      "defaultValue": false,
                                      "metadata": {
                                        "description": "Optional. Indicates whether failures stemming from the extension will be suppressed (Operational failures such as not connecting to the VM will not be suppressed regardless of this value). The default is false."
                                      }
                                    },
                                    "enableAutomaticUpgrade": {
                                      "type": "bool",
                                      "metadata": {
                                        "description": "Required. Indicates whether the extension should be automatically upgraded by the platform if there is a newer version of the extension available."
                                      }
                                    },
                                    "tags": {
                                      "type": "object",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. Tags of the resource."
                                      }
                                    }
                                  },
                                  "resources": {
                                    "virtualMachine": {
                                      "existing": true,
                                      "type": "Microsoft.Compute/virtualMachines",
                                      "apiVersion": "2022-11-01",
                                      "name": "[parameters('virtualMachineName')]"
                                    },
                                    "extension": {
                                      "type": "Microsoft.Compute/virtualMachines/extensions",
                                      "apiVersion": "2022-11-01",
                                      "name": "[format('{0}/{1}', parameters('virtualMachineName'), parameters('name'))]",
                                      "location": "[parameters('location')]",
                                      "tags": "[parameters('tags')]",
                                      "properties": {
                                        "publisher": "[parameters('publisher')]",
                                        "type": "[parameters('type')]",
                                        "typeHandlerVersion": "[parameters('typeHandlerVersion')]",
                                        "autoUpgradeMinorVersion": "[parameters('autoUpgradeMinorVersion')]",
                                        "enableAutomaticUpgrade": "[parameters('enableAutomaticUpgrade')]",
                                        "forceUpdateTag": "[if(not(empty(parameters('forceUpdateTag'))), parameters('forceUpdateTag'), null())]",
                                        "settings": "[if(not(empty(parameters('settings'))), parameters('settings'), null())]",
                                        "protectedSettings": "[if(not(empty(parameters('protectedSettings'))), parameters('protectedSettings'), null())]",
                                        "suppressFailures": "[parameters('supressFailures')]"
                                      },
                                      "dependsOn": [
                                        "virtualMachine"
                                      ]
                                    }
                                  },
                                  "outputs": {
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the extension."
                                      },
                                      "value": "[parameters('name')]"
                                    },
                                    "resourceId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource ID of the extension."
                                      },
                                      "value": "[resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('virtualMachineName'), parameters('name'))]"
                                    },
                                    "resourceGroupName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the Resource Group the extension was created in."
                                      },
                                      "value": "[resourceGroup().name]"
                                    },
                                    "location": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The location the resource was deployed into."
                                      },
                                      "value": "[reference('extension', '2022-11-01', 'full').location]"
                                    }
                                  }
                                }
                              },
                              "dependsOn": [
                                "vm",
                                "vm_desiredStateConfigurationExtension"
                              ]
                            },
                            "vm_azureDiskEncryptionExtension": {
                              "condition": "[parameters('extensionAzureDiskEncryptionConfig').enabled]",
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "[format('{0}-VM-AzureDiskEncryption', uniqueString(deployment().name, parameters('location')))]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "virtualMachineName": {
                                    "value": "[parameters('name')]"
                                  },
                                  "name": {
                                    "value": "AzureDiskEncryption"
                                  },
                                  "location": {
                                    "value": "[parameters('location')]"
                                  },
                                  "publisher": {
                                    "value": "Microsoft.Azure.Security"
                                  },
                                  "type": "[if(equals(parameters('osType'), 'Windows'), createObject('value', 'AzureDiskEncryption'), createObject('value', 'AzureDiskEncryptionForLinux'))]",
                                  "typeHandlerVersion": "[if(contains(parameters('extensionAzureDiskEncryptionConfig'), 'typeHandlerVersion'), createObject('value', parameters('extensionAzureDiskEncryptionConfig').typeHandlerVersion), if(equals(parameters('osType'), 'Windows'), createObject('value', '2.2'), createObject('value', '1.1')))]",
                                  "autoUpgradeMinorVersion": "[if(contains(parameters('extensionAzureDiskEncryptionConfig'), 'autoUpgradeMinorVersion'), createObject('value', parameters('extensionAzureDiskEncryptionConfig').autoUpgradeMinorVersion), createObject('value', true()))]",
                                  "enableAutomaticUpgrade": "[if(contains(parameters('extensionAzureDiskEncryptionConfig'), 'enableAutomaticUpgrade'), createObject('value', parameters('extensionAzureDiskEncryptionConfig').enableAutomaticUpgrade), createObject('value', false()))]",
                                  "forceUpdateTag": "[if(contains(parameters('extensionAzureDiskEncryptionConfig'), 'forceUpdateTag'), createObject('value', parameters('extensionAzureDiskEncryptionConfig').forceUpdateTag), createObject('value', '1.0'))]",
                                  "settings": {
                                    "value": "[coalesce(tryGet(parameters('extensionAzureDiskEncryptionConfig'), 'settings'), createObject())]"
                                  },
                                  "supressFailures": {
                                    "value": "[coalesce(tryGet(parameters('extensionAzureDiskEncryptionConfig'), 'supressFailures'), false())]"
                                  },
                                  "tags": {
                                    "value": "[coalesce(tryGet(parameters('extensionAzureDiskEncryptionConfig'), 'tags'), parameters('tags'))]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "languageVersion": "2.0",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.28.1.47646",
                                      "templateHash": "15287507275706455668"
                                    },
                                    "name": "Virtual Machine Extensions",
                                    "description": "This module deploys a Virtual Machine Extension.",
                                    "owner": "Azure/module-maintainers"
                                  },
                                  "parameters": {
                                    "virtualMachineName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Conditional. The name of the parent virtual machine that extension is provisioned for. Required if the template is used in a standalone deployment."
                                      }
                                    },
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The name of the virtual machine extension."
                                      }
                                    },
                                    "location": {
                                      "type": "string",
                                      "defaultValue": "[resourceGroup().location]",
                                      "metadata": {
                                        "description": "Optional. The location the extension is deployed to."
                                      }
                                    },
                                    "publisher": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The name of the extension handler publisher."
                                      }
                                    },
                                    "type": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. Specifies the type of the extension; an example is \"CustomScriptExtension\"."
                                      }
                                    },
                                    "typeHandlerVersion": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. Specifies the version of the script handler."
                                      }
                                    },
                                    "autoUpgradeMinorVersion": {
                                      "type": "bool",
                                      "metadata": {
                                        "description": "Required. Indicates whether the extension should use a newer minor version if one is available at deployment time. Once deployed, however, the extension will not upgrade minor versions unless redeployed, even with this property set to true."
                                      }
                                    },
                                    "forceUpdateTag": {
                                      "type": "string",
                                      "defaultValue": "",
                                      "metadata": {
                                        "description": "Optional. How the extension handler should be forced to update even if the extension configuration has not changed."
                                      }
                                    },
                                    "settings": {
                                      "type": "object",
                                      "defaultValue": {},
                                      "metadata": {
                                        "description": "Optional. Any object that contains the extension specific settings."
                                      }
                                    },
                                    "protectedSettings": {
                                      "type": "secureObject",
                                      "defaultValue": {},
                                      "metadata": {
                                        "description": "Optional. Any object that contains the extension specific protected settings."
                                      }
                                    },
                                    "supressFailures": {
                                      "type": "bool",
                                      "defaultValue": false,
                                      "metadata": {
                                        "description": "Optional. Indicates whether failures stemming from the extension will be suppressed (Operational failures such as not connecting to the VM will not be suppressed regardless of this value). The default is false."
                                      }
                                    },
                                    "enableAutomaticUpgrade": {
                                      "type": "bool",
                                      "metadata": {
                                        "description": "Required. Indicates whether the extension should be automatically upgraded by the platform if there is a newer version of the extension available."
                                      }
                                    },
                                    "tags": {
                                      "type": "object",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. Tags of the resource."
                                      }
                                    }
                                  },
                                  "resources": {
                                    "virtualMachine": {
                                      "existing": true,
                                      "type": "Microsoft.Compute/virtualMachines",
                                      "apiVersion": "2022-11-01",
                                      "name": "[parameters('virtualMachineName')]"
                                    },
                                    "extension": {
                                      "type": "Microsoft.Compute/virtualMachines/extensions",
                                      "apiVersion": "2022-11-01",
                                      "name": "[format('{0}/{1}', parameters('virtualMachineName'), parameters('name'))]",
                                      "location": "[parameters('location')]",
                                      "tags": "[parameters('tags')]",
                                      "properties": {
                                        "publisher": "[parameters('publisher')]",
                                        "type": "[parameters('type')]",
                                        "typeHandlerVersion": "[parameters('typeHandlerVersion')]",
                                        "autoUpgradeMinorVersion": "[parameters('autoUpgradeMinorVersion')]",
                                        "enableAutomaticUpgrade": "[parameters('enableAutomaticUpgrade')]",
                                        "forceUpdateTag": "[if(not(empty(parameters('forceUpdateTag'))), parameters('forceUpdateTag'), null())]",
                                        "settings": "[if(not(empty(parameters('settings'))), parameters('settings'), null())]",
                                        "protectedSettings": "[if(not(empty(parameters('protectedSettings'))), parameters('protectedSettings'), null())]",
                                        "suppressFailures": "[parameters('supressFailures')]"
                                      },
                                      "dependsOn": [
                                        "virtualMachine"
                                      ]
                                    }
                                  },
                                  "outputs": {
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the extension."
                                      },
                                      "value": "[parameters('name')]"
                                    },
                                    "resourceId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource ID of the extension."
                                      },
                                      "value": "[resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('virtualMachineName'), parameters('name'))]"
                                    },
                                    "resourceGroupName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the Resource Group the extension was created in."
                                      },
                                      "value": "[resourceGroup().name]"
                                    },
                                    "location": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The location the resource was deployed into."
                                      },
                                      "value": "[reference('extension', '2022-11-01', 'full').location]"
                                    }
                                  }
                                }
                              },
                              "dependsOn": [
                                "vm",
                                "vm_customScriptExtension"
                              ]
                            },
                            "vm_nvidiaGpuDriverWindowsExtension": {
                              "condition": "[parameters('extensionNvidiaGpuDriverWindows').enabled]",
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "[format('{0}-VM-NvidiaGpuDriverWindows', uniqueString(deployment().name, parameters('location')))]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "virtualMachineName": {
                                    "value": "[parameters('name')]"
                                  },
                                  "name": {
                                    "value": "NvidiaGpuDriverWindows"
                                  },
                                  "location": {
                                    "value": "[parameters('location')]"
                                  },
                                  "publisher": {
                                    "value": "Microsoft.HpcCompute"
                                  },
                                  "type": {
                                    "value": "NvidiaGpuDriverWindows"
                                  },
                                  "typeHandlerVersion": "[if(contains(parameters('extensionNvidiaGpuDriverWindows'), 'typeHandlerVersion'), createObject('value', parameters('extensionNvidiaGpuDriverWindows').typeHandlerVersion), createObject('value', '1.4'))]",
                                  "autoUpgradeMinorVersion": "[if(contains(parameters('extensionNvidiaGpuDriverWindows'), 'autoUpgradeMinorVersion'), createObject('value', parameters('extensionNvidiaGpuDriverWindows').autoUpgradeMinorVersion), createObject('value', true()))]",
                                  "enableAutomaticUpgrade": "[if(contains(parameters('extensionNvidiaGpuDriverWindows'), 'enableAutomaticUpgrade'), createObject('value', parameters('extensionNvidiaGpuDriverWindows').enableAutomaticUpgrade), createObject('value', false()))]",
                                  "supressFailures": {
                                    "value": "[coalesce(tryGet(parameters('extensionNvidiaGpuDriverWindows'), 'supressFailures'), false())]"
                                  },
                                  "tags": {
                                    "value": "[coalesce(tryGet(parameters('extensionNvidiaGpuDriverWindows'), 'tags'), parameters('tags'))]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "languageVersion": "2.0",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.28.1.47646",
                                      "templateHash": "15287507275706455668"
                                    },
                                    "name": "Virtual Machine Extensions",
                                    "description": "This module deploys a Virtual Machine Extension.",
                                    "owner": "Azure/module-maintainers"
                                  },
                                  "parameters": {
                                    "virtualMachineName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Conditional. The name of the parent virtual machine that extension is provisioned for. Required if the template is used in a standalone deployment."
                                      }
                                    },
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The name of the virtual machine extension."
                                      }
                                    },
                                    "location": {
                                      "type": "string",
                                      "defaultValue": "[resourceGroup().location]",
                                      "metadata": {
                                        "description": "Optional. The location the extension is deployed to."
                                      }
                                    },
                                    "publisher": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The name of the extension handler publisher."
                                      }
                                    },
                                    "type": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. Specifies the type of the extension; an example is \"CustomScriptExtension\"."
                                      }
                                    },
                                    "typeHandlerVersion": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. Specifies the version of the script handler."
                                      }
                                    },
                                    "autoUpgradeMinorVersion": {
                                      "type": "bool",
                                      "metadata": {
                                        "description": "Required. Indicates whether the extension should use a newer minor version if one is available at deployment time. Once deployed, however, the extension will not upgrade minor versions unless redeployed, even with this property set to true."
                                      }
                                    },
                                    "forceUpdateTag": {
                                      "type": "string",
                                      "defaultValue": "",
                                      "metadata": {
                                        "description": "Optional. How the extension handler should be forced to update even if the extension configuration has not changed."
                                      }
                                    },
                                    "settings": {
                                      "type": "object",
                                      "defaultValue": {},
                                      "metadata": {
                                        "description": "Optional. Any object that contains the extension specific settings."
                                      }
                                    },
                                    "protectedSettings": {
                                      "type": "secureObject",
                                      "defaultValue": {},
                                      "metadata": {
                                        "description": "Optional. Any object that contains the extension specific protected settings."
                                      }
                                    },
                                    "supressFailures": {
                                      "type": "bool",
                                      "defaultValue": false,
                                      "metadata": {
                                        "description": "Optional. Indicates whether failures stemming from the extension will be suppressed (Operational failures such as not connecting to the VM will not be suppressed regardless of this value). The default is false."
                                      }
                                    },
                                    "enableAutomaticUpgrade": {
                                      "type": "bool",
                                      "metadata": {
                                        "description": "Required. Indicates whether the extension should be automatically upgraded by the platform if there is a newer version of the extension available."
                                      }
                                    },
                                    "tags": {
                                      "type": "object",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. Tags of the resource."
                                      }
                                    }
                                  },
                                  "resources": {
                                    "virtualMachine": {
                                      "existing": true,
                                      "type": "Microsoft.Compute/virtualMachines",
                                      "apiVersion": "2022-11-01",
                                      "name": "[parameters('virtualMachineName')]"
                                    },
                                    "extension": {
                                      "type": "Microsoft.Compute/virtualMachines/extensions",
                                      "apiVersion": "2022-11-01",
                                      "name": "[format('{0}/{1}', parameters('virtualMachineName'), parameters('name'))]",
                                      "location": "[parameters('location')]",
                                      "tags": "[parameters('tags')]",
                                      "properties": {
                                        "publisher": "[parameters('publisher')]",
                                        "type": "[parameters('type')]",
                                        "typeHandlerVersion": "[parameters('typeHandlerVersion')]",
                                        "autoUpgradeMinorVersion": "[parameters('autoUpgradeMinorVersion')]",
                                        "enableAutomaticUpgrade": "[parameters('enableAutomaticUpgrade')]",
                                        "forceUpdateTag": "[if(not(empty(parameters('forceUpdateTag'))), parameters('forceUpdateTag'), null())]",
                                        "settings": "[if(not(empty(parameters('settings'))), parameters('settings'), null())]",
                                        "protectedSettings": "[if(not(empty(parameters('protectedSettings'))), parameters('protectedSettings'), null())]",
                                        "suppressFailures": "[parameters('supressFailures')]"
                                      },
                                      "dependsOn": [
                                        "virtualMachine"
                                      ]
                                    }
                                  },
                                  "outputs": {
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the extension."
                                      },
                                      "value": "[parameters('name')]"
                                    },
                                    "resourceId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource ID of the extension."
                                      },
                                      "value": "[resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('virtualMachineName'), parameters('name'))]"
                                    },
                                    "resourceGroupName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the Resource Group the extension was created in."
                                      },
                                      "value": "[resourceGroup().name]"
                                    },
                                    "location": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The location the resource was deployed into."
                                      },
                                      "value": "[reference('extension', '2022-11-01', 'full').location]"
                                    }
                                  }
                                }
                              },
                              "dependsOn": [
                                "vm",
                                "vm_azureDiskEncryptionExtension"
                              ]
                            },
                            "vm_hostPoolRegistrationExtension": {
                              "condition": "[parameters('extensionHostPoolRegistration').enabled]",
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "[format('{0}-VM-HostPoolRegistration', uniqueString(deployment().name, parameters('location')))]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "virtualMachineName": {
                                    "value": "[parameters('name')]"
                                  },
                                  "name": {
                                    "value": "HostPoolRegistration"
                                  },
                                  "location": {
                                    "value": "[parameters('location')]"
                                  },
                                  "publisher": {
                                    "value": "Microsoft.PowerShell"
                                  },
                                  "type": {
                                    "value": "DSC"
                                  },
                                  "typeHandlerVersion": "[if(contains(parameters('extensionHostPoolRegistration'), 'typeHandlerVersion'), createObject('value', parameters('extensionHostPoolRegistration').typeHandlerVersion), createObject('value', '2.77'))]",
                                  "autoUpgradeMinorVersion": "[if(contains(parameters('extensionHostPoolRegistration'), 'autoUpgradeMinorVersion'), createObject('value', parameters('extensionHostPoolRegistration').autoUpgradeMinorVersion), createObject('value', true()))]",
                                  "enableAutomaticUpgrade": "[if(contains(parameters('extensionHostPoolRegistration'), 'enableAutomaticUpgrade'), createObject('value', parameters('extensionHostPoolRegistration').enableAutomaticUpgrade), createObject('value', false()))]",
                                  "settings": {
                                    "value": {
                                      "modulesUrl": "[parameters('extensionHostPoolRegistration').modulesUrl]",
                                      "configurationFunction": "[parameters('extensionHostPoolRegistration').configurationFunction]",
                                      "properties": {
                                        "hostPoolName": "[parameters('extensionHostPoolRegistration').hostPoolName]",
                                        "registrationInfoToken": "[parameters('extensionHostPoolRegistration').registrationInfoToken]",
                                        "aadJoin": true
                                      },
                                      "supressFailures": "[coalesce(tryGet(parameters('extensionHostPoolRegistration'), 'supressFailures'), false())]"
                                    }
                                  },
                                  "tags": {
                                    "value": "[coalesce(tryGet(parameters('extensionHostPoolRegistration'), 'tags'), parameters('tags'))]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "languageVersion": "2.0",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.28.1.47646",
                                      "templateHash": "15287507275706455668"
                                    },
                                    "name": "Virtual Machine Extensions",
                                    "description": "This module deploys a Virtual Machine Extension.",
                                    "owner": "Azure/module-maintainers"
                                  },
                                  "parameters": {
                                    "virtualMachineName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Conditional. The name of the parent virtual machine that extension is provisioned for. Required if the template is used in a standalone deployment."
                                      }
                                    },
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The name of the virtual machine extension."
                                      }
                                    },
                                    "location": {
                                      "type": "string",
                                      "defaultValue": "[resourceGroup().location]",
                                      "metadata": {
                                        "description": "Optional. The location the extension is deployed to."
                                      }
                                    },
                                    "publisher": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The name of the extension handler publisher."
                                      }
                                    },
                                    "type": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. Specifies the type of the extension; an example is \"CustomScriptExtension\"."
                                      }
                                    },
                                    "typeHandlerVersion": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. Specifies the version of the script handler."
                                      }
                                    },
                                    "autoUpgradeMinorVersion": {
                                      "type": "bool",
                                      "metadata": {
                                        "description": "Required. Indicates whether the extension should use a newer minor version if one is available at deployment time. Once deployed, however, the extension will not upgrade minor versions unless redeployed, even with this property set to true."
                                      }
                                    },
                                    "forceUpdateTag": {
                                      "type": "string",
                                      "defaultValue": "",
                                      "metadata": {
                                        "description": "Optional. How the extension handler should be forced to update even if the extension configuration has not changed."
                                      }
                                    },
                                    "settings": {
                                      "type": "object",
                                      "defaultValue": {},
                                      "metadata": {
                                        "description": "Optional. Any object that contains the extension specific settings."
                                      }
                                    },
                                    "protectedSettings": {
                                      "type": "secureObject",
                                      "defaultValue": {},
                                      "metadata": {
                                        "description": "Optional. Any object that contains the extension specific protected settings."
                                      }
                                    },
                                    "supressFailures": {
                                      "type": "bool",
                                      "defaultValue": false,
                                      "metadata": {
                                        "description": "Optional. Indicates whether failures stemming from the extension will be suppressed (Operational failures such as not connecting to the VM will not be suppressed regardless of this value). The default is false."
                                      }
                                    },
                                    "enableAutomaticUpgrade": {
                                      "type": "bool",
                                      "metadata": {
                                        "description": "Required. Indicates whether the extension should be automatically upgraded by the platform if there is a newer version of the extension available."
                                      }
                                    },
                                    "tags": {
                                      "type": "object",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. Tags of the resource."
                                      }
                                    }
                                  },
                                  "resources": {
                                    "virtualMachine": {
                                      "existing": true,
                                      "type": "Microsoft.Compute/virtualMachines",
                                      "apiVersion": "2022-11-01",
                                      "name": "[parameters('virtualMachineName')]"
                                    },
                                    "extension": {
                                      "type": "Microsoft.Compute/virtualMachines/extensions",
                                      "apiVersion": "2022-11-01",
                                      "name": "[format('{0}/{1}', parameters('virtualMachineName'), parameters('name'))]",
                                      "location": "[parameters('location')]",
                                      "tags": "[parameters('tags')]",
                                      "properties": {
                                        "publisher": "[parameters('publisher')]",
                                        "type": "[parameters('type')]",
                                        "typeHandlerVersion": "[parameters('typeHandlerVersion')]",
                                        "autoUpgradeMinorVersion": "[parameters('autoUpgradeMinorVersion')]",
                                        "enableAutomaticUpgrade": "[parameters('enableAutomaticUpgrade')]",
                                        "forceUpdateTag": "[if(not(empty(parameters('forceUpdateTag'))), parameters('forceUpdateTag'), null())]",
                                        "settings": "[if(not(empty(parameters('settings'))), parameters('settings'), null())]",
                                        "protectedSettings": "[if(not(empty(parameters('protectedSettings'))), parameters('protectedSettings'), null())]",
                                        "suppressFailures": "[parameters('supressFailures')]"
                                      },
                                      "dependsOn": [
                                        "virtualMachine"
                                      ]
                                    }
                                  },
                                  "outputs": {
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the extension."
                                      },
                                      "value": "[parameters('name')]"
                                    },
                                    "resourceId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource ID of the extension."
                                      },
                                      "value": "[resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('virtualMachineName'), parameters('name'))]"
                                    },
                                    "resourceGroupName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the Resource Group the extension was created in."
                                      },
                                      "value": "[resourceGroup().name]"
                                    },
                                    "location": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The location the resource was deployed into."
                                      },
                                      "value": "[reference('extension', '2022-11-01', 'full').location]"
                                    }
                                  }
                                }
                              },
                              "dependsOn": [
                                "vm",
                                "vm_nvidiaGpuDriverWindowsExtension"
                              ]
                            },
                            "vm_azureGuestConfigurationExtension": {
                              "condition": "[parameters('extensionGuestConfigurationExtension').enabled]",
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "[format('{0}-VM-GuestConfiguration', uniqueString(deployment().name, parameters('location')))]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "virtualMachineName": {
                                    "value": "[parameters('name')]"
                                  },
                                  "name": "[if(equals(parameters('osType'), 'Windows'), createObject('value', 'AzurePolicyforWindows'), createObject('value', 'AzurePolicyforLinux'))]",
                                  "location": {
                                    "value": "[parameters('location')]"
                                  },
                                  "publisher": {
                                    "value": "Microsoft.GuestConfiguration"
                                  },
                                  "type": "[if(equals(parameters('osType'), 'Windows'), createObject('value', 'ConfigurationforWindows'), createObject('value', 'ConfigurationForLinux'))]",
                                  "typeHandlerVersion": "[if(contains(parameters('extensionGuestConfigurationExtension'), 'typeHandlerVersion'), createObject('value', parameters('extensionGuestConfigurationExtension').typeHandlerVersion), if(equals(parameters('osType'), 'Windows'), createObject('value', '1.0'), createObject('value', '1.0')))]",
                                  "autoUpgradeMinorVersion": "[if(contains(parameters('extensionGuestConfigurationExtension'), 'autoUpgradeMinorVersion'), createObject('value', parameters('extensionGuestConfigurationExtension').autoUpgradeMinorVersion), createObject('value', true()))]",
                                  "enableAutomaticUpgrade": "[if(contains(parameters('extensionGuestConfigurationExtension'), 'enableAutomaticUpgrade'), createObject('value', parameters('extensionGuestConfigurationExtension').enableAutomaticUpgrade), createObject('value', true()))]",
                                  "forceUpdateTag": "[if(contains(parameters('extensionGuestConfigurationExtension'), 'forceUpdateTag'), createObject('value', parameters('extensionGuestConfigurationExtension').forceUpdateTag), createObject('value', '1.0'))]",
                                  "settings": "[if(contains(parameters('extensionGuestConfigurationExtension'), 'settings'), createObject('value', parameters('extensionGuestConfigurationExtension').settings), createObject('value', createObject()))]",
                                  "supressFailures": {
                                    "value": "[coalesce(tryGet(parameters('extensionGuestConfigurationExtension'), 'supressFailures'), false())]"
                                  },
                                  "protectedSettings": {
                                    "value": "[parameters('extensionGuestConfigurationExtensionProtectedSettings')]"
                                  },
                                  "tags": {
                                    "value": "[coalesce(tryGet(parameters('extensionGuestConfigurationExtension'), 'tags'), parameters('tags'))]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "languageVersion": "2.0",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.28.1.47646",
                                      "templateHash": "15287507275706455668"
                                    },
                                    "name": "Virtual Machine Extensions",
                                    "description": "This module deploys a Virtual Machine Extension.",
                                    "owner": "Azure/module-maintainers"
                                  },
                                  "parameters": {
                                    "virtualMachineName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Conditional. The name of the parent virtual machine that extension is provisioned for. Required if the template is used in a standalone deployment."
                                      }
                                    },
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The name of the virtual machine extension."
                                      }
                                    },
                                    "location": {
                                      "type": "string",
                                      "defaultValue": "[resourceGroup().location]",
                                      "metadata": {
                                        "description": "Optional. The location the extension is deployed to."
                                      }
                                    },
                                    "publisher": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The name of the extension handler publisher."
                                      }
                                    },
                                    "type": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. Specifies the type of the extension; an example is \"CustomScriptExtension\"."
                                      }
                                    },
                                    "typeHandlerVersion": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. Specifies the version of the script handler."
                                      }
                                    },
                                    "autoUpgradeMinorVersion": {
                                      "type": "bool",
                                      "metadata": {
                                        "description": "Required. Indicates whether the extension should use a newer minor version if one is available at deployment time. Once deployed, however, the extension will not upgrade minor versions unless redeployed, even with this property set to true."
                                      }
                                    },
                                    "forceUpdateTag": {
                                      "type": "string",
                                      "defaultValue": "",
                                      "metadata": {
                                        "description": "Optional. How the extension handler should be forced to update even if the extension configuration has not changed."
                                      }
                                    },
                                    "settings": {
                                      "type": "object",
                                      "defaultValue": {},
                                      "metadata": {
                                        "description": "Optional. Any object that contains the extension specific settings."
                                      }
                                    },
                                    "protectedSettings": {
                                      "type": "secureObject",
                                      "defaultValue": {},
                                      "metadata": {
                                        "description": "Optional. Any object that contains the extension specific protected settings."
                                      }
                                    },
                                    "supressFailures": {
                                      "type": "bool",
                                      "defaultValue": false,
                                      "metadata": {
                                        "description": "Optional. Indicates whether failures stemming from the extension will be suppressed (Operational failures such as not connecting to the VM will not be suppressed regardless of this value). The default is false."
                                      }
                                    },
                                    "enableAutomaticUpgrade": {
                                      "type": "bool",
                                      "metadata": {
                                        "description": "Required. Indicates whether the extension should be automatically upgraded by the platform if there is a newer version of the extension available."
                                      }
                                    },
                                    "tags": {
                                      "type": "object",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. Tags of the resource."
                                      }
                                    }
                                  },
                                  "resources": {
                                    "virtualMachine": {
                                      "existing": true,
                                      "type": "Microsoft.Compute/virtualMachines",
                                      "apiVersion": "2022-11-01",
                                      "name": "[parameters('virtualMachineName')]"
                                    },
                                    "extension": {
                                      "type": "Microsoft.Compute/virtualMachines/extensions",
                                      "apiVersion": "2022-11-01",
                                      "name": "[format('{0}/{1}', parameters('virtualMachineName'), parameters('name'))]",
                                      "location": "[parameters('location')]",
                                      "tags": "[parameters('tags')]",
                                      "properties": {
                                        "publisher": "[parameters('publisher')]",
                                        "type": "[parameters('type')]",
                                        "typeHandlerVersion": "[parameters('typeHandlerVersion')]",
                                        "autoUpgradeMinorVersion": "[parameters('autoUpgradeMinorVersion')]",
                                        "enableAutomaticUpgrade": "[parameters('enableAutomaticUpgrade')]",
                                        "forceUpdateTag": "[if(not(empty(parameters('forceUpdateTag'))), parameters('forceUpdateTag'), null())]",
                                        "settings": "[if(not(empty(parameters('settings'))), parameters('settings'), null())]",
                                        "protectedSettings": "[if(not(empty(parameters('protectedSettings'))), parameters('protectedSettings'), null())]",
                                        "suppressFailures": "[parameters('supressFailures')]"
                                      },
                                      "dependsOn": [
                                        "virtualMachine"
                                      ]
                                    }
                                  },
                                  "outputs": {
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the extension."
                                      },
                                      "value": "[parameters('name')]"
                                    },
                                    "resourceId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource ID of the extension."
                                      },
                                      "value": "[resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('virtualMachineName'), parameters('name'))]"
                                    },
                                    "resourceGroupName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the Resource Group the extension was created in."
                                      },
                                      "value": "[resourceGroup().name]"
                                    },
                                    "location": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The location the resource was deployed into."
                                      },
                                      "value": "[reference('extension', '2022-11-01', 'full').location]"
                                    }
                                  }
                                }
                              },
                              "dependsOn": [
                                "vm",
                                "vm_hostPoolRegistrationExtension"
                              ]
                            },
                            "vm_backup": {
                              "condition": "[not(empty(parameters('backupVaultName')))]",
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "[format('{0}-VM-Backup', uniqueString(deployment().name, parameters('location')))]",
                              "resourceGroup": "[parameters('backupVaultResourceGroup')]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "name": {
                                    "value": "[format('vm;iaasvmcontainerv2;{0};{1}', resourceGroup().name, parameters('name'))]"
                                  },
                                  "location": {
                                    "value": "[parameters('location')]"
                                  },
                                  "policyId": {
                                    "value": "[resourceId('Microsoft.RecoveryServices/vaults/backupPolicies', parameters('backupVaultName'), parameters('backupPolicyName'))]"
                                  },
                                  "protectedItemType": {
                                    "value": "Microsoft.Compute/virtualMachines"
                                  },
                                  "protectionContainerName": {
                                    "value": "[format('iaasvmcontainer;iaasvmcontainerv2;{0};{1}', resourceGroup().name, parameters('name'))]"
                                  },
                                  "recoveryVaultName": {
                                    "value": "[parameters('backupVaultName')]"
                                  },
                                  "sourceResourceId": {
                                    "value": "[resourceId('Microsoft.Compute/virtualMachines', parameters('name'))]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.28.1.47646",
                                      "templateHash": "4311417160342913977"
                                    },
                                    "name": "Recovery Service Vaults Protection Container Protected Item",
                                    "description": "This module deploys a Recovery Services Vault Protection Container Protected Item.",
                                    "owner": "Azure/module-maintainers"
                                  },
                                  "parameters": {
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. Name of the resource."
                                      }
                                    },
                                    "protectionContainerName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Conditional. Name of the Azure Recovery Service Vault Protection Container. Required if the template is used in a standalone deployment."
                                      }
                                    },
                                    "recoveryVaultName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Conditional. The name of the parent Azure Recovery Service Vault. Required if the template is used in a standalone deployment."
                                      }
                                    },
                                    "location": {
                                      "type": "string",
                                      "defaultValue": "[resourceGroup().location]",
                                      "metadata": {
                                        "description": "Optional. Location for all resources."
                                      }
                                    },
                                    "protectedItemType": {
                                      "type": "string",
                                      "allowedValues": [
                                        "AzureFileShareProtectedItem",
                                        "AzureVmWorkloadSAPAseDatabase",
                                        "AzureVmWorkloadSAPHanaDatabase",
                                        "AzureVmWorkloadSQLDatabase",
                                        "DPMProtectedItem",
                                        "GenericProtectedItem",
                                        "MabFileFolderProtectedItem",
                                        "Microsoft.ClassicCompute/virtualMachines",
                                        "Microsoft.Compute/virtualMachines",
                                        "Microsoft.Sql/servers/databases"
                                      ],
                                      "metadata": {
                                        "description": "Required. The backup item type."
                                      }
                                    },
                                    "policyId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. ID of the backup policy with which this item is backed up."
                                      }
                                    },
                                    "sourceResourceId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. Resource ID of the resource to back up."
                                      }
                                    }
                                  },
                                  "resources": [
                                    {
                                      "type": "Microsoft.RecoveryServices/vaults/backupFabrics/protectionContainers/protectedItems",
                                      "apiVersion": "2023-01-01",
                                      "name": "[format('{0}/Azure/{1}/{2}', parameters('recoveryVaultName'), parameters('protectionContainerName'), parameters('name'))]",
                                      "location": "[parameters('location')]",
                                      "properties": {
                                        "protectedItemType": "[parameters('protectedItemType')]",
                                        "policyId": "[parameters('policyId')]",
                                        "sourceResourceId": "[parameters('sourceResourceId')]"
                                      }
                                    }
                                  ],
                                  "outputs": {
                                    "resourceGroupName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the Resource Group the protected item was created in."
                                      },
                                      "value": "[resourceGroup().name]"
                                    },
                                    "resourceId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource ID of the protected item."
                                      },
                                      "value": "[resourceId('Microsoft.RecoveryServices/vaults/backupFabrics/protectionContainers/protectedItems', split(format('{0}/Azure/{1}/{2}', parameters('recoveryVaultName'), parameters('protectionContainerName'), parameters('name')), '/')[0], split(format('{0}/Azure/{1}/{2}', parameters('recoveryVaultName'), parameters('protectionContainerName'), parameters('name')), '/')[1], split(format('{0}/Azure/{1}/{2}', parameters('recoveryVaultName'), parameters('protectionContainerName'), parameters('name')), '/')[2], split(format('{0}/Azure/{1}/{2}', parameters('recoveryVaultName'), parameters('protectionContainerName'), parameters('name')), '/')[3])]"
                                    },
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The Name of the protected item."
                                      },
                                      "value": "[format('{0}/Azure/{1}/{2}', parameters('recoveryVaultName'), parameters('protectionContainerName'), parameters('name'))]"
                                    }
                                  }
                                }
                              },
                              "dependsOn": [
                                "vm",
                                "vm_azureGuestConfigurationExtension"
                              ]
                            }
                          },
                          "outputs": {
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "The name of the VM."
                              },
                              "value": "[parameters('name')]"
                            },
                            "resourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource ID of the VM."
                              },
                              "value": "[resourceId('Microsoft.Compute/virtualMachines', parameters('name'))]"
                            },
                            "resourceGroupName": {
                              "type": "string",
                              "metadata": {
                                "description": "The name of the resource group the VM was created in."
                              },
                              "value": "[resourceGroup().name]"
                            },
                            "systemAssignedMIPrincipalId": {
                              "type": "string",
                              "metadata": {
                                "description": "The principal ID of the system assigned identity."
                              },
                              "value": "[coalesce(tryGet(tryGet(reference('vm', '2023-09-01', 'full'), 'identity'), 'principalId'), '')]"
                            },
                            "location": {
                              "type": "string",
                              "metadata": {
                                "description": "The location the resource was deployed into."
                              },
                              "value": "[reference('vm', '2023-09-01', 'full').location]"
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Maintenance/maintenanceConfigurations', format('dep-mc-{0}', parameters('vmName')))]",
                        "[resourceId('Microsoft.Network/virtualNetworks/subnets', split(format('{0}/{1}', parameters('vmVnetName'), parameters('vmSubnetName')), '/')[0], split(format('{0}/{1}', parameters('vmVnetName'), parameters('vmSubnetName')), '/')[1])]"
                      ]
                    }
                  ]
                }
              },
              "dependsOn": [
                "logAnalyticsWs",
                "networking"
              ],
              "metadata": {
                "description": "An optional Windows virtual machine deployment to act as a jump box."
              }
            }
          },
          "outputs": {
            "vnetSpokeName": {
              "type": "string",
              "value": "[reference('networking').outputs.vnetSpokeName.value]"
            },
            "vnetSpokeId": {
              "type": "string",
              "value": "[reference('networking').outputs.vnetSpokeId.value]"
            },
            "spokePrivateEndpointSubnetName": {
              "type": "string",
              "value": "[reference('networking').outputs.snetPeName.value]"
            },
            "appServiceManagedIdentityPrincipalId": {
              "type": "string",
              "value": "[reference('webApp').outputs.webAppSystemAssignedPrincipalId.value]"
            },
            "logAnalyticsWorkspaceId": {
              "type": "string",
              "value": "[reference('logAnalyticsWs').outputs.resourceId.value]"
            }
          }
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('resourceGroupName')), 'Microsoft.Resources/deployments', 'NamingDeployment')]",
        "[subscriptionResourceId('Microsoft.Resources/deployments', format('{0}-deployment', uniqueString(deployment().name, parameters('location'), variables('resourceGroupName'))))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('{0}-supportingServicesDeployment', uniqueString(deployment().name, parameters('location')))]",
      "resourceGroup": "[variables('resourceGroupName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "enableTelemetry": {
            "value": "[parameters('enableTelemetry')]"
          },
          "naming": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('resourceGroupName')), 'Microsoft.Resources/deployments', 'NamingDeployment'), '2022-09-01').outputs.names.value]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "spokeVNetId": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('{0}-spokedeployment', uniqueString(deployment().name, parameters('location')))), '2022-09-01').outputs.vnetSpokeId.value]"
          },
          "spokePrivateEndpointSubnetName": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('{0}-spokedeployment', uniqueString(deployment().name, parameters('location')))), '2022-09-01').outputs.spokePrivateEndpointSubnetName.value]"
          },
          "appServiceManagedIdentityPrincipalId": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('{0}-spokedeployment', uniqueString(deployment().name, parameters('location')))), '2022-09-01').outputs.appServiceManagedIdentityPrincipalId.value]"
          },
          "logAnalyticsWorkspaceId": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('{0}-spokedeployment', uniqueString(deployment().name, parameters('location')))), '2022-09-01').outputs.logAnalyticsWorkspaceId.value]"
          },
          "hubVNetId": {
            "value": "[parameters('vnetHubResourceId')]"
          },
          "tags": {
            "value": "[parameters('tags')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "languageVersion": "2.0",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.32.4.45862",
              "templateHash": "9744623775015520647"
            }
          },
          "definitions": {
            "_1.ServiceNameType": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string"
                },
                "nameUnique": {
                  "type": "string"
                },
                "slug": {
                  "type": "string"
                }
              },
              "metadata": {
                "__bicep_imported_from!": {
                  "sourceTemplate": "../naming/naming.module.bicep"
                }
              }
            },
            "NamingOutput": {
              "type": "object",
              "properties": {
                "aiSearch": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "analysisServicesServer": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "apiManagement": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "appConfiguration": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "appServiceEnvironment": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "appServicePlan": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "appService": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "applicationGateway": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "applicationInsights": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "applicationSecurityGroup": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "automationAccount": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "automationCertificate": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "automationCredential": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "automationRunbook": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "automationSchedule": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "automationVariable": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "availabilitySet": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "bastionHost": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "batchAccount": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "batchApplication": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "batchCertificate": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "batchPool": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "botChannelDirectline": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "botChannelEmail": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "botChannelMsTeams": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "botChannelSlack": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "botChannelsRegistration": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "botConnection": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "botWebApp": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "cdnEndpoint": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "cdnProfile": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "chaosExperiment": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "chaosTarget": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "cognitiveAccount": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "cognitiveServicesOpenAi": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "cognitiveServicesComputerVision": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "cognitiveServicesContentModerator": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "cognitiveServicesContentSafety": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "cognitiveServicesCustomVisionPrediction": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "cognitiveServicesCustomVisionTraining": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "cognitiveServicesDocumentIntelligence": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "cognitiveServicesMultiServiceAccount": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "cognitiveServicesVideoIndexer": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "cognitiveServicesFaceApi": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "cognitiveServicesImmersiveReader": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "cognitiveServicesLanguageService": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "cognitiveServicesSpeechService": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "cognitiveServicesTranslator": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "containerApps": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "containerAppsEnvironment": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "containerGroup": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "containerRegistry": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "containerRegistryWebhook": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "cosmosdbAccount": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "customProvider": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "dashboard": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "dataFactory": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "dataFactoryDatasetMysql": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "dataFactoryDatasetPostgresql": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "dataFactoryDatasetSqlServerTable": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "dataFactoryIntegrationRuntimeManaged": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "dataFactoryLinkedServiceDataLakeStorageGen2": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "dataFactoryLinkedServiceKeyVault": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "dataFactoryLinkedServiceMysql": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "dataFactoryLinkedServicePostgresql": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "dataFactoryLinkedServiceSqlServer": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "dataFactoryPipeline": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "dataFactoryTriggerSchedule": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "dataLakeAnalyticsAccount": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "dataLakeAnalyticsFirewallRule": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "dataLakeStore": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "dataLakeStoreFirewallRule": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "databaseMigrationProject": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "databaseMigrationService": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "databricksWorkspace": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "devTestLab": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "devTestLinuxVirtualMachine": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "devTestWindowsVirtualMachine": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "diskEncryptionSet": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "dnsZone": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "eventGridDomain": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "eventGridDomainTopic": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "eventGridEventSubscription": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "eventGridTopic": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "eventHub": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "eventHubAuthorizationRule": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "eventHubConsumerGroup": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "eventHubNamespace": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "eventHubNamespaceAuthorizationRule": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "eventHubNamespaceDisasterRecoveryConfig": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "expressRouteCircuit": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "expressRouteGateway": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "firewall": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "firewallPolicy": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "frontDoor": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "frontDoorFirewallPolicy": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "functionApp": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "grafana": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "hdInsightHadoopCluster": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "hdInsightHbaseCluster": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "hdInsightInteractiveQueryCluster": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "hdInsightKafkaCluster": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "hdInsightMlServicesCluster": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "hdInsightRserverCluster": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "hdInsightSparkCluster": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "hdInsightStormCluster": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "image": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "iotCentralApplication": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "iotHub": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "iotHubConsumerGroup": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "iotHubDps": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "iotHubDpsCertificate": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "keyVault": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "keyVaultCertificate": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "keyVaultKey": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "keyVaultSecret": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "kubernetesCluster": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "kustoCluster": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "kustoDatabase": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "kustoEventHubDataConnection": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "loadBalancer": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "loadBalancerNatRule": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "loadTesting": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "linuxVirtualMachine": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "linuxVirtualMachineScaleSet": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "localNetworkGateway": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "logicApp": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "logAnalyticsWorkspace": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "machineLearningWorkspace": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "managedDisk": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "managedIdentity": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "mapsAccount": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "mariadbDatabase": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "mariadbFirewallRule": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "mariadbServer": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "mariadbVirtualNetworkRule": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "mssqlDatabase": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "mssqlElasticpool": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "mssqlServer": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "mysqlDatabase": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "mysqlFirewallRule": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "mysqlServer": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "mysqlVirtualNetworkRule": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "networkInterface": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "networkSecurityGroup": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "networkSecurityGroupRule": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "networkSecurityRule": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "networkWatcher": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "notificationHub": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "notificationHubAuthorizationRule": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "notificationHubNamespace": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "pointToSiteVpnGateway": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "postgresqlDatabase": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "postgresqlFirewallRule": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "postgresqlServer": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "postgresqlVirtualNetworkRule": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "powerbiEmbedded": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "privateDnsZone": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "publicIp": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "publicIpPrefix": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "redisCache": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "redisFirewallRule": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "relayHybridConnection": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "relayNamespace": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "resourceGroup": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "roleAssignment": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "roleDefinition": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "route": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "routeTable": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "serviceFabricCluster": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "serviceFabricManagedCluster": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "serviceBusNamespace": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "serviceBusNamespaceAuthorizationRule": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "serviceBusQueue": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "serviceBusQueueAuthorizationRule": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "serviceBusSubscription": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "serviceBusSubscriptionRule": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "serviceBusTopic": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "serviceBusTopicAuthorizationRule": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "sharedImage": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "sharedImageGallery": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "signalrService": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "snapshots": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "sqlElasticpool": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "sqlFailoverGroup": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "sqlFirewallRule": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "sqlServer": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "storageAccount": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "storageBlob": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "storageContainer": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "storageDataLakeGen2Filesystem": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "storageQueue": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "storageShare": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "storageShareDirectory": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "storageTable": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "streamAnalyticsFunctionJavascriptUdf": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "streamAnalyticsJob": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "streamAnalyticsOutputBlob": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "streamAnalyticsOutputEventHub": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "streamAnalyticsOutputMssql": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "streamAnalyticsOutputServiceBusQueue": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "streamAnalyticsOutputServiceBusTopic": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "streamAnalyticsReferenceInputBlob": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "streamAnalyticsStreamInputBlob": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "streamAnalyticsStreamInputEventHub": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "streamAnalyticsStreamInputIotHub": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "subnet": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "templateDeployment": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "trafficManagerProfile": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "virtualMachine": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "virtualMachineScaleSet": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "virtualNetwork": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "virtualNetworkGateway": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "virtualNetworkPeering": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "virtualWan": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "windowsVirtualMachine": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                },
                "windowsVirtualMachineScaleSet": {
                  "$ref": "#/definitions/_1.ServiceNameType"
                }
              },
              "metadata": {
                "__bicep_imported_from!": {
                  "sourceTemplate": "../naming/naming.module.bicep"
                }
              }
            }
          },
          "parameters": {
            "naming": {
              "$ref": "#/definitions/NamingOutput"
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]",
              "metadata": {
                "description": "The location where the resources will be created. This needs to be the same region as the spoke."
              }
            },
            "tags": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "Optional. The tags to be assigned to the created resources."
              }
            },
            "enableTelemetry": {
              "type": "bool",
              "metadata": {
                "description": "Required. Whether to enable deployment telemetry."
              }
            },
            "hubVNetId": {
              "type": "string",
              "metadata": {
                "description": "The resource ID of the existing hub virtual network."
              }
            },
            "spokeVNetId": {
              "type": "string",
              "metadata": {
                "description": "The resource ID of the existing spoke virtual network to which the private endpoint will be connected."
              }
            },
            "spokePrivateEndpointSubnetName": {
              "type": "string",
              "metadata": {
                "description": "The name of the existing subnet in the spoke virtual to which the private endpoint will be connected."
              }
            },
            "logAnalyticsWorkspaceId": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. Resource ID of the diagnostic log analytics workspace. If left empty, no diagnostics settings will be defined."
              }
            },
            "appServiceManagedIdentityPrincipalId": {
              "type": "string"
            }
          },
          "resources": {
            "keyVault": {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('keyVaultModule-{0}', uniqueString(resourceGroup().id))]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "keyVaultName": {
                    "value": "[parameters('naming').keyVault.nameUnique]"
                  },
                  "tags": {
                    "value": "[parameters('tags')]"
                  },
                  "enableTelemetry": {
                    "value": "[parameters('enableTelemetry')]"
                  },
                  "hubVNetId": {
                    "value": "[parameters('hubVNetId')]"
                  },
                  "spokeVNetId": {
                    "value": "[parameters('spokeVNetId')]"
                  },
                  "spokePrivateEndpointSubnetName": {
                    "value": "[parameters('spokePrivateEndpointSubnetName')]"
                  },
                  "diagnosticWorkspaceId": {
                    "value": "[parameters('logAnalyticsWorkspaceId')]"
                  },
                  "appServiceManagedIdentityPrincipalId": {
                    "value": "[parameters('appServiceManagedIdentityPrincipalId')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.32.4.45862",
                      "templateHash": "12083990258416423454"
                    }
                  },
                  "parameters": {
                    "location": {
                      "type": "string",
                      "defaultValue": "[resourceGroup().location]",
                      "metadata": {
                        "description": "The location where the resources will be created."
                      }
                    },
                    "keyVaultName": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the Key Vault."
                      }
                    },
                    "tags": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. The tags to be assigned to the created resources."
                      }
                    },
                    "enableTelemetry": {
                      "type": "bool",
                      "metadata": {
                        "description": "Required. Whether to enable deplotment telemetry."
                      }
                    },
                    "hubVNetId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the Hub Virtual Network."
                      }
                    },
                    "spokeVNetId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the VNet to which the private endpoint will be connected."
                      }
                    },
                    "spokePrivateEndpointSubnetName": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the subnet in the VNet to which the private endpoint will be connected."
                      }
                    },
                    "keyVaultPrivateEndpointName": {
                      "type": "string",
                      "defaultValue": "keyvault-pep",
                      "metadata": {
                        "description": "Optional. The name of the private endpoint to be created for Key Vault. If left empty, it defaults to \"<resourceName>-pep"
                      }
                    },
                    "diagnosticWorkspaceId": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Resource ID of the diagnostic log analytics workspace. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace."
                      }
                    },
                    "diagnosticSettingsName": {
                      "type": "string",
                      "defaultValue": "keyvault-diagnosticSettings",
                      "metadata": {
                        "description": "Optional. The name of the diagnostic setting, if deployed. If left empty, it defaults to \"<resourceName>-diagnosticSettings\"."
                      }
                    },
                    "appServiceManagedIdentityPrincipalId": {
                      "type": "string"
                    }
                  },
                  "variables": {
                    "vaultDnsZoneName": "privatelink.vaultcore.azure.net",
                    "spokeVNetIdTokens": "[split(parameters('spokeVNetId'), '/')]",
                    "spokeSubscriptionId": "[variables('spokeVNetIdTokens')[2]]",
                    "spokeResourceGroupName": "[variables('spokeVNetIdTokens')[4]]",
                    "spokeVNetName": "[variables('spokeVNetIdTokens')[8]]",
                    "virtualNetworkLinks": "[concat(createArray(createObject('virtualNetworkResourceId', parameters('spokeVNetId'), 'registrationEnabled', false())), if(not(empty(parameters('hubVNetId'))), createArray(createObject('virtualNetworkResourceId', parameters('hubVNetId'), 'registrationEnabled', false())), createArray()))]"
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('keyvaultDnsZoneDeployment-{0}', uniqueString(resourceGroup().id))]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "name": {
                            "value": "[variables('vaultDnsZoneName')]"
                          },
                          "location": {
                            "value": "global"
                          },
                          "tags": {
                            "value": "[parameters('tags')]"
                          },
                          "enableTelemetry": {
                            "value": "[parameters('enableTelemetry')]"
                          },
                          "virtualNetworkLinks": {
                            "value": "[variables('virtualNetworkLinks')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "languageVersion": "2.0",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.28.1.47646",
                              "templateHash": "11412633288570781407"
                            },
                            "name": "Private DNS Zones",
                            "description": "This module deploys a Private DNS zone.",
                            "owner": "Azure/module-maintainers"
                          },
                          "definitions": {
                            "roleAssignmentType": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "roleDefinitionIdOrName": {
                                    "type": "string",
                                    "metadata": {
                                      "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                                    }
                                  },
                                  "principalId": {
                                    "type": "string",
                                    "metadata": {
                                      "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                                    }
                                  },
                                  "principalType": {
                                    "type": "string",
                                    "allowedValues": [
                                      "Device",
                                      "ForeignGroup",
                                      "Group",
                                      "ServicePrincipal",
                                      "User"
                                    ],
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The principal type of the assigned principal ID."
                                    }
                                  },
                                  "description": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The description of the role assignment."
                                    }
                                  },
                                  "condition": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                                    }
                                  },
                                  "conditionVersion": {
                                    "type": "string",
                                    "allowedValues": [
                                      "2.0"
                                    ],
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. Version of the condition."
                                    }
                                  },
                                  "delegatedManagedIdentityResourceId": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The Resource Id of the delegated managed identity resource."
                                    }
                                  }
                                }
                              },
                              "nullable": true
                            },
                            "lockType": {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Specify the name of lock."
                                  }
                                },
                                "kind": {
                                  "type": "string",
                                  "allowedValues": [
                                    "CanNotDelete",
                                    "None",
                                    "ReadOnly"
                                  ],
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Specify the type of lock."
                                  }
                                }
                              },
                              "nullable": true
                            },
                            "aType": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "name": {
                                    "type": "string",
                                    "metadata": {
                                      "description": "Required. The name of the record."
                                    }
                                  },
                                  "metadata": {
                                    "type": "object",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The metadata of the record."
                                    }
                                  },
                                  "ttl": {
                                    "type": "int",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The TTL of the record."
                                    }
                                  },
                                  "roleAssignments": {
                                    "$ref": "#/definitions/roleAssignmentType",
                                    "metadata": {
                                      "description": "Optional. Array of role assignments to create."
                                    }
                                  },
                                  "aRecords": {
                                    "type": "array",
                                    "items": {
                                      "type": "object",
                                      "properties": {
                                        "ipv4Address": {
                                          "type": "string",
                                          "metadata": {
                                            "description": "Required. The IPv4 address of this A record."
                                          }
                                        }
                                      }
                                    },
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The list of A records in the record set."
                                    }
                                  }
                                }
                              },
                              "nullable": true
                            },
                            "aaaaType": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "name": {
                                    "type": "string",
                                    "metadata": {
                                      "description": "Required. The name of the record."
                                    }
                                  },
                                  "metadata": {
                                    "type": "object",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The metadata of the record."
                                    }
                                  },
                                  "ttl": {
                                    "type": "int",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The TTL of the record."
                                    }
                                  },
                                  "roleAssignments": {
                                    "$ref": "#/definitions/roleAssignmentType",
                                    "metadata": {
                                      "description": "Optional. Array of role assignments to create."
                                    }
                                  },
                                  "aaaaRecords": {
                                    "type": "array",
                                    "items": {
                                      "type": "object",
                                      "properties": {
                                        "ipv6Address": {
                                          "type": "string",
                                          "metadata": {
                                            "description": "Required. The IPv6 address of this AAAA record."
                                          }
                                        }
                                      }
                                    },
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The list of AAAA records in the record set."
                                    }
                                  }
                                }
                              },
                              "nullable": true
                            },
                            "cnameType": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "name": {
                                    "type": "string",
                                    "metadata": {
                                      "description": "Required. The name of the record."
                                    }
                                  },
                                  "metadata": {
                                    "type": "object",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The metadata of the record."
                                    }
                                  },
                                  "ttl": {
                                    "type": "int",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The TTL of the record."
                                    }
                                  },
                                  "roleAssignments": {
                                    "$ref": "#/definitions/roleAssignmentType",
                                    "metadata": {
                                      "description": "Optional. Array of role assignments to create."
                                    }
                                  },
                                  "cnameRecord": {
                                    "type": "object",
                                    "properties": {
                                      "cname": {
                                        "type": "string",
                                        "metadata": {
                                          "description": "Required. The canonical name of the CNAME record."
                                        }
                                      }
                                    },
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The CNAME record in the record set."
                                    }
                                  }
                                }
                              },
                              "nullable": true
                            },
                            "mxType": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "name": {
                                    "type": "string",
                                    "metadata": {
                                      "description": "Required. The name of the record."
                                    }
                                  },
                                  "metadata": {
                                    "type": "object",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The metadata of the record."
                                    }
                                  },
                                  "ttl": {
                                    "type": "int",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The TTL of the record."
                                    }
                                  },
                                  "roleAssignments": {
                                    "$ref": "#/definitions/roleAssignmentType",
                                    "metadata": {
                                      "description": "Optional. Array of role assignments to create."
                                    }
                                  },
                                  "mxRecords": {
                                    "type": "array",
                                    "items": {
                                      "type": "object",
                                      "properties": {
                                        "exchange": {
                                          "type": "string",
                                          "metadata": {
                                            "description": "Required. The domain name of the mail host for this MX record."
                                          }
                                        },
                                        "preference": {
                                          "type": "int",
                                          "metadata": {
                                            "description": "Required. The preference value for this MX record."
                                          }
                                        }
                                      }
                                    },
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The list of MX records in the record set."
                                    }
                                  }
                                }
                              },
                              "nullable": true
                            },
                            "ptrType": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "name": {
                                    "type": "string",
                                    "metadata": {
                                      "description": "Required. The name of the record."
                                    }
                                  },
                                  "metadata": {
                                    "type": "object",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The metadata of the record."
                                    }
                                  },
                                  "ttl": {
                                    "type": "int",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The TTL of the record."
                                    }
                                  },
                                  "roleAssignments": {
                                    "$ref": "#/definitions/roleAssignmentType",
                                    "metadata": {
                                      "description": "Optional. Array of role assignments to create."
                                    }
                                  },
                                  "ptrRecords": {
                                    "type": "array",
                                    "items": {
                                      "type": "object",
                                      "properties": {
                                        "ptrdname": {
                                          "type": "string",
                                          "metadata": {
                                            "description": "Required. The PTR target domain name for this PTR record."
                                          }
                                        }
                                      }
                                    },
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The list of PTR records in the record set."
                                    }
                                  }
                                }
                              },
                              "nullable": true
                            },
                            "soaType": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "name": {
                                    "type": "string",
                                    "metadata": {
                                      "description": "Required. The name of the record."
                                    }
                                  },
                                  "metadata": {
                                    "type": "object",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The metadata of the record."
                                    }
                                  },
                                  "ttl": {
                                    "type": "int",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The TTL of the record."
                                    }
                                  },
                                  "roleAssignments": {
                                    "$ref": "#/definitions/roleAssignmentType",
                                    "metadata": {
                                      "description": "Optional. Array of role assignments to create."
                                    }
                                  },
                                  "soaRecord": {
                                    "type": "object",
                                    "properties": {
                                      "email": {
                                        "type": "string",
                                        "metadata": {
                                          "description": "Required. The email contact for this SOA record."
                                        }
                                      },
                                      "expireTime": {
                                        "type": "int",
                                        "metadata": {
                                          "description": "Required. The expire time for this SOA record."
                                        }
                                      },
                                      "host": {
                                        "type": "string",
                                        "metadata": {
                                          "description": "Required. The domain name of the authoritative name server for this SOA record."
                                        }
                                      },
                                      "minimumTtl": {
                                        "type": "int",
                                        "metadata": {
                                          "description": "Required. The minimum value for this SOA record. By convention this is used to determine the negative caching duration."
                                        }
                                      },
                                      "refreshTime": {
                                        "type": "int",
                                        "metadata": {
                                          "description": "Required. The refresh value for this SOA record."
                                        }
                                      },
                                      "retryTime": {
                                        "type": "int",
                                        "metadata": {
                                          "description": "Required. The retry time for this SOA record."
                                        }
                                      },
                                      "serialNumber": {
                                        "type": "int",
                                        "metadata": {
                                          "description": "Required. The serial number for this SOA record."
                                        }
                                      }
                                    },
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The SOA record in the record set."
                                    }
                                  }
                                }
                              },
                              "nullable": true
                            },
                            "srvType": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "name": {
                                    "type": "string",
                                    "metadata": {
                                      "description": "Required. The name of the record."
                                    }
                                  },
                                  "metadata": {
                                    "type": "object",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The metadata of the record."
                                    }
                                  },
                                  "ttl": {
                                    "type": "int",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The TTL of the record."
                                    }
                                  },
                                  "roleAssignments": {
                                    "$ref": "#/definitions/roleAssignmentType",
                                    "metadata": {
                                      "description": "Optional. Array of role assignments to create."
                                    }
                                  },
                                  "srvRecords": {
                                    "type": "array",
                                    "items": {
                                      "type": "object",
                                      "properties": {
                                        "priority": {
                                          "type": "int",
                                          "metadata": {
                                            "description": "Required. The priority value for this SRV record."
                                          }
                                        },
                                        "weight": {
                                          "type": "int",
                                          "metadata": {
                                            "description": "Required. The weight value for this SRV record."
                                          }
                                        },
                                        "port": {
                                          "type": "int",
                                          "metadata": {
                                            "description": "Required. The port value for this SRV record."
                                          }
                                        },
                                        "target": {
                                          "type": "string",
                                          "metadata": {
                                            "description": "Required. The target domain name for this SRV record."
                                          }
                                        }
                                      }
                                    },
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The list of SRV records in the record set."
                                    }
                                  }
                                }
                              },
                              "nullable": true
                            },
                            "txtType": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "name": {
                                    "type": "string",
                                    "metadata": {
                                      "description": "Required. The name of the record."
                                    }
                                  },
                                  "metadata": {
                                    "type": "object",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The metadata of the record."
                                    }
                                  },
                                  "ttl": {
                                    "type": "int",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The TTL of the record."
                                    }
                                  },
                                  "roleAssignments": {
                                    "$ref": "#/definitions/roleAssignmentType",
                                    "metadata": {
                                      "description": "Optional. Array of role assignments to create."
                                    }
                                  },
                                  "txtRecords": {
                                    "type": "array",
                                    "items": {
                                      "type": "object",
                                      "properties": {
                                        "value": {
                                          "type": "array",
                                          "items": {
                                            "type": "string"
                                          },
                                          "metadata": {
                                            "description": "Required. The text value of this TXT record."
                                          }
                                        }
                                      }
                                    },
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The list of TXT records in the record set."
                                    }
                                  }
                                }
                              },
                              "nullable": true
                            }
                          },
                          "parameters": {
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. Private DNS zone name."
                              }
                            },
                            "a": {
                              "$ref": "#/definitions/aType",
                              "metadata": {
                                "description": "Optional. Array of A records."
                              }
                            },
                            "aaaa": {
                              "$ref": "#/definitions/aaaaType",
                              "metadata": {
                                "description": "Optional. Array of AAAA records."
                              }
                            },
                            "cname": {
                              "$ref": "#/definitions/cnameType",
                              "metadata": {
                                "description": "Optional. Array of CNAME records."
                              }
                            },
                            "mx": {
                              "$ref": "#/definitions/mxType",
                              "metadata": {
                                "description": "Optional. Array of MX records."
                              }
                            },
                            "ptr": {
                              "$ref": "#/definitions/ptrType",
                              "metadata": {
                                "description": "Optional. Array of PTR records."
                              }
                            },
                            "soa": {
                              "$ref": "#/definitions/soaType",
                              "metadata": {
                                "description": "Optional. Array of SOA records."
                              }
                            },
                            "srv": {
                              "$ref": "#/definitions/srvType",
                              "metadata": {
                                "description": "Optional. Array of SRV records."
                              }
                            },
                            "txt": {
                              "$ref": "#/definitions/txtType",
                              "metadata": {
                                "description": "Optional. Array of TXT records."
                              }
                            },
                            "virtualNetworkLinks": {
                              "type": "array",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Array of custom objects describing vNet links of the DNS zone. Each object should contain properties 'virtualNetworkResourceId' and 'registrationEnabled'. The 'vnetResourceId' is a resource ID of a vNet to link, 'registrationEnabled' (bool) enables automatic DNS registration in the zone for the linked vNet."
                              }
                            },
                            "location": {
                              "type": "string",
                              "defaultValue": "global",
                              "metadata": {
                                "description": "Optional. The location of the PrivateDNSZone. Should be global."
                              }
                            },
                            "roleAssignments": {
                              "$ref": "#/definitions/roleAssignmentType",
                              "metadata": {
                                "description": "Optional. Array of role assignments to create."
                              }
                            },
                            "tags": {
                              "type": "object",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Tags of the resource."
                              }
                            },
                            "lock": {
                              "$ref": "#/definitions/lockType",
                              "metadata": {
                                "description": "Optional. The lock settings of the service."
                              }
                            },
                            "enableTelemetry": {
                              "type": "bool",
                              "defaultValue": true,
                              "metadata": {
                                "description": "Optional. Enable/Disable usage telemetry for module."
                              }
                            }
                          },
                          "variables": {
                            "builtInRoleNames": {
                              "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                              "Network Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4d97b98b-1d4f-4787-a291-c67834d212e7')]",
                              "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                              "Private DNS Zone Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b12aa53e-6015-4669-85d0-8515ebb3ae7f')]",
                              "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                              "Role Based Access Control Administrator (Preview)": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]"
                            }
                          },
                          "resources": {
                            "avmTelemetry": {
                              "condition": "[parameters('enableTelemetry')]",
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2023-07-01",
                              "name": "[format('46d3xbcp.res.network-privatednszone.{0}.{1}', replace('0.3.0', '.', '-'), substring(uniqueString(deployment().name, parameters('location')), 0, 4))]",
                              "properties": {
                                "mode": "Incremental",
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "resources": [],
                                  "outputs": {
                                    "telemetry": {
                                      "type": "String",
                                      "value": "For more information, see https://aka.ms/avm/TelemetryInfo"
                                    }
                                  }
                                }
                              }
                            },
                            "privateDnsZone": {
                              "type": "Microsoft.Network/privateDnsZones",
                              "apiVersion": "2020-06-01",
                              "name": "[parameters('name')]",
                              "location": "[parameters('location')]",
                              "tags": "[parameters('tags')]"
                            },
                            "privateDnsZone_lock": {
                              "condition": "[and(not(empty(coalesce(parameters('lock'), createObject()))), not(equals(tryGet(parameters('lock'), 'kind'), 'None')))]",
                              "type": "Microsoft.Authorization/locks",
                              "apiVersion": "2020-05-01",
                              "scope": "[format('Microsoft.Network/privateDnsZones/{0}', parameters('name'))]",
                              "name": "[coalesce(tryGet(parameters('lock'), 'name'), format('lock-{0}', parameters('name')))]",
                              "properties": {
                                "level": "[coalesce(tryGet(parameters('lock'), 'kind'), '')]",
                                "notes": "[if(equals(tryGet(parameters('lock'), 'kind'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot delete or modify the resource or child resources.')]"
                              },
                              "dependsOn": [
                                "privateDnsZone"
                              ]
                            },
                            "privateDnsZone_roleAssignments": {
                              "copy": {
                                "name": "privateDnsZone_roleAssignments",
                                "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]"
                              },
                              "type": "Microsoft.Authorization/roleAssignments",
                              "apiVersion": "2022-04-01",
                              "scope": "[format('Microsoft.Network/privateDnsZones/{0}', parameters('name'))]",
                              "name": "[guid(resourceId('Microsoft.Network/privateDnsZones', parameters('name')), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].principalId, coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName)]",
                              "properties": {
                                "roleDefinitionId": "[if(contains(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName), variables('builtInRoleNames')[coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName], if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName)))]",
                                "principalId": "[coalesce(parameters('roleAssignments'), createArray())[copyIndex()].principalId]",
                                "description": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'description')]",
                                "principalType": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'principalType')]",
                                "condition": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'condition')]",
                                "conditionVersion": "[if(not(empty(tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                                "delegatedManagedIdentityResourceId": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
                              },
                              "dependsOn": [
                                "privateDnsZone"
                              ]
                            },
                            "privateDnsZone_A": {
                              "copy": {
                                "name": "privateDnsZone_A",
                                "count": "[length(coalesce(parameters('a'), createArray()))]"
                              },
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "[format('{0}-PrivateDnsZone-ARecord-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "privateDnsZoneName": {
                                    "value": "[parameters('name')]"
                                  },
                                  "name": {
                                    "value": "[coalesce(parameters('a'), createArray())[copyIndex()].name]"
                                  },
                                  "aRecords": {
                                    "value": "[tryGet(coalesce(parameters('a'), createArray())[copyIndex()], 'aRecords')]"
                                  },
                                  "metadata": {
                                    "value": "[tryGet(coalesce(parameters('a'), createArray())[copyIndex()], 'metadata')]"
                                  },
                                  "ttl": {
                                    "value": "[coalesce(tryGet(coalesce(parameters('a'), createArray())[copyIndex()], 'ttl'), 3600)]"
                                  },
                                  "roleAssignments": {
                                    "value": "[tryGet(coalesce(parameters('a'), createArray())[copyIndex()], 'roleAssignments')]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "languageVersion": "2.0",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.28.1.47646",
                                      "templateHash": "8657463061873174631"
                                    },
                                    "name": "Private DNS Zone A record",
                                    "description": "This module deploys a Private DNS Zone A record.",
                                    "owner": "Azure/module-maintainers"
                                  },
                                  "definitions": {
                                    "roleAssignmentType": {
                                      "type": "array",
                                      "items": {
                                        "type": "object",
                                        "properties": {
                                          "roleDefinitionIdOrName": {
                                            "type": "string",
                                            "metadata": {
                                              "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                                            }
                                          },
                                          "principalId": {
                                            "type": "string",
                                            "metadata": {
                                              "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                                            }
                                          },
                                          "principalType": {
                                            "type": "string",
                                            "allowedValues": [
                                              "Device",
                                              "ForeignGroup",
                                              "Group",
                                              "ServicePrincipal",
                                              "User"
                                            ],
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. The principal type of the assigned principal ID."
                                            }
                                          },
                                          "description": {
                                            "type": "string",
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. The description of the role assignment."
                                            }
                                          },
                                          "condition": {
                                            "type": "string",
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                                            }
                                          },
                                          "conditionVersion": {
                                            "type": "string",
                                            "allowedValues": [
                                              "2.0"
                                            ],
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. Version of the condition."
                                            }
                                          },
                                          "delegatedManagedIdentityResourceId": {
                                            "type": "string",
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. The Resource Id of the delegated managed identity resource."
                                            }
                                          }
                                        }
                                      },
                                      "nullable": true
                                    }
                                  },
                                  "parameters": {
                                    "privateDnsZoneName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Conditional. The name of the parent Private DNS zone. Required if the template is used in a standalone deployment."
                                      }
                                    },
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The name of the A record."
                                      }
                                    },
                                    "aRecords": {
                                      "type": "array",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. The list of A records in the record set."
                                      }
                                    },
                                    "metadata": {
                                      "type": "object",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. The metadata attached to the record set."
                                      }
                                    },
                                    "ttl": {
                                      "type": "int",
                                      "defaultValue": 3600,
                                      "metadata": {
                                        "description": "Optional. The TTL (time-to-live) of the records in the record set."
                                      }
                                    },
                                    "roleAssignments": {
                                      "$ref": "#/definitions/roleAssignmentType",
                                      "metadata": {
                                        "description": "Optional. Array of role assignments to create."
                                      }
                                    }
                                  },
                                  "variables": {
                                    "builtInRoleNames": {
                                      "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                                      "Private DNS Zone Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b12aa53e-6015-4669-85d0-8515ebb3ae7f')]",
                                      "Network Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4d97b98b-1d4f-4787-a291-c67834d212e7')]",
                                      "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                                      "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                                      "Role Based Access Control Administrator (Preview)": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]",
                                      "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]"
                                    }
                                  },
                                  "resources": {
                                    "privateDnsZone": {
                                      "existing": true,
                                      "type": "Microsoft.Network/privateDnsZones",
                                      "apiVersion": "2020-06-01",
                                      "name": "[parameters('privateDnsZoneName')]"
                                    },
                                    "A": {
                                      "type": "Microsoft.Network/privateDnsZones/A",
                                      "apiVersion": "2020-06-01",
                                      "name": "[format('{0}/{1}', parameters('privateDnsZoneName'), parameters('name'))]",
                                      "properties": {
                                        "aRecords": "[parameters('aRecords')]",
                                        "metadata": "[parameters('metadata')]",
                                        "ttl": "[parameters('ttl')]"
                                      },
                                      "dependsOn": [
                                        "privateDnsZone"
                                      ]
                                    },
                                    "A_roleAssignments": {
                                      "copy": {
                                        "name": "A_roleAssignments",
                                        "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]"
                                      },
                                      "type": "Microsoft.Authorization/roleAssignments",
                                      "apiVersion": "2022-04-01",
                                      "scope": "[format('Microsoft.Network/privateDnsZones/{0}/A/{1}', parameters('privateDnsZoneName'), parameters('name'))]",
                                      "name": "[guid(resourceId('Microsoft.Network/privateDnsZones/A', parameters('privateDnsZoneName'), parameters('name')), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].principalId, coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName)]",
                                      "properties": {
                                        "roleDefinitionId": "[if(contains(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName), variables('builtInRoleNames')[coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName], if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName)))]",
                                        "principalId": "[coalesce(parameters('roleAssignments'), createArray())[copyIndex()].principalId]",
                                        "description": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'description')]",
                                        "principalType": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'principalType')]",
                                        "condition": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'condition')]",
                                        "conditionVersion": "[if(not(empty(tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                                        "delegatedManagedIdentityResourceId": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
                                      },
                                      "dependsOn": [
                                        "A"
                                      ]
                                    }
                                  },
                                  "outputs": {
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the deployed A record."
                                      },
                                      "value": "[parameters('name')]"
                                    },
                                    "resourceId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource ID of the deployed A record."
                                      },
                                      "value": "[resourceId('Microsoft.Network/privateDnsZones/A', parameters('privateDnsZoneName'), parameters('name'))]"
                                    },
                                    "resourceGroupName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource group of the deployed A record."
                                      },
                                      "value": "[resourceGroup().name]"
                                    }
                                  }
                                }
                              },
                              "dependsOn": [
                                "privateDnsZone"
                              ]
                            },
                            "privateDnsZone_AAAA": {
                              "copy": {
                                "name": "privateDnsZone_AAAA",
                                "count": "[length(coalesce(parameters('aaaa'), createArray()))]"
                              },
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "[format('{0}-PrivateDnsZone-AAAARecord-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "privateDnsZoneName": {
                                    "value": "[parameters('name')]"
                                  },
                                  "name": {
                                    "value": "[coalesce(parameters('aaaa'), createArray())[copyIndex()].name]"
                                  },
                                  "aaaaRecords": {
                                    "value": "[tryGet(coalesce(parameters('aaaa'), createArray())[copyIndex()], 'aaaaRecords')]"
                                  },
                                  "metadata": {
                                    "value": "[tryGet(coalesce(parameters('aaaa'), createArray())[copyIndex()], 'metadata')]"
                                  },
                                  "ttl": {
                                    "value": "[coalesce(tryGet(coalesce(parameters('aaaa'), createArray())[copyIndex()], 'ttl'), 3600)]"
                                  },
                                  "roleAssignments": {
                                    "value": "[tryGet(coalesce(parameters('aaaa'), createArray())[copyIndex()], 'roleAssignments')]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "languageVersion": "2.0",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.28.1.47646",
                                      "templateHash": "1725749611610769138"
                                    },
                                    "name": "Private DNS Zone AAAA record",
                                    "description": "This module deploys a Private DNS Zone AAAA record.",
                                    "owner": "Azure/module-maintainers"
                                  },
                                  "definitions": {
                                    "roleAssignmentType": {
                                      "type": "array",
                                      "items": {
                                        "type": "object",
                                        "properties": {
                                          "roleDefinitionIdOrName": {
                                            "type": "string",
                                            "metadata": {
                                              "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                                            }
                                          },
                                          "principalId": {
                                            "type": "string",
                                            "metadata": {
                                              "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                                            }
                                          },
                                          "principalType": {
                                            "type": "string",
                                            "allowedValues": [
                                              "Device",
                                              "ForeignGroup",
                                              "Group",
                                              "ServicePrincipal",
                                              "User"
                                            ],
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. The principal type of the assigned principal ID."
                                            }
                                          },
                                          "description": {
                                            "type": "string",
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. The description of the role assignment."
                                            }
                                          },
                                          "condition": {
                                            "type": "string",
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                                            }
                                          },
                                          "conditionVersion": {
                                            "type": "string",
                                            "allowedValues": [
                                              "2.0"
                                            ],
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. Version of the condition."
                                            }
                                          },
                                          "delegatedManagedIdentityResourceId": {
                                            "type": "string",
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. The Resource Id of the delegated managed identity resource."
                                            }
                                          }
                                        }
                                      },
                                      "nullable": true
                                    }
                                  },
                                  "parameters": {
                                    "privateDnsZoneName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Conditional. The name of the parent Private DNS zone. Required if the template is used in a standalone deployment."
                                      }
                                    },
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The name of the AAAA record."
                                      }
                                    },
                                    "aaaaRecords": {
                                      "type": "array",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. The list of AAAA records in the record set."
                                      }
                                    },
                                    "metadata": {
                                      "type": "object",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. The metadata attached to the record set."
                                      }
                                    },
                                    "ttl": {
                                      "type": "int",
                                      "defaultValue": 3600,
                                      "metadata": {
                                        "description": "Optional. The TTL (time-to-live) of the records in the record set."
                                      }
                                    },
                                    "roleAssignments": {
                                      "$ref": "#/definitions/roleAssignmentType",
                                      "metadata": {
                                        "description": "Optional. Array of role assignments to create."
                                      }
                                    }
                                  },
                                  "variables": {
                                    "builtInRoleNames": {
                                      "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                                      "Private DNS Zone Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b12aa53e-6015-4669-85d0-8515ebb3ae7f')]",
                                      "Network Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4d97b98b-1d4f-4787-a291-c67834d212e7')]",
                                      "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                                      "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                                      "Role Based Access Control Administrator (Preview)": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]",
                                      "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]"
                                    }
                                  },
                                  "resources": {
                                    "privateDnsZone": {
                                      "existing": true,
                                      "type": "Microsoft.Network/privateDnsZones",
                                      "apiVersion": "2020-06-01",
                                      "name": "[parameters('privateDnsZoneName')]"
                                    },
                                    "AAAA": {
                                      "type": "Microsoft.Network/privateDnsZones/AAAA",
                                      "apiVersion": "2020-06-01",
                                      "name": "[format('{0}/{1}', parameters('privateDnsZoneName'), parameters('name'))]",
                                      "properties": {
                                        "aaaaRecords": "[parameters('aaaaRecords')]",
                                        "metadata": "[parameters('metadata')]",
                                        "ttl": "[parameters('ttl')]"
                                      },
                                      "dependsOn": [
                                        "privateDnsZone"
                                      ]
                                    },
                                    "AAAA_roleAssignments": {
                                      "copy": {
                                        "name": "AAAA_roleAssignments",
                                        "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]"
                                      },
                                      "type": "Microsoft.Authorization/roleAssignments",
                                      "apiVersion": "2022-04-01",
                                      "scope": "[format('Microsoft.Network/privateDnsZones/{0}/AAAA/{1}', parameters('privateDnsZoneName'), parameters('name'))]",
                                      "name": "[guid(resourceId('Microsoft.Network/privateDnsZones/AAAA', parameters('privateDnsZoneName'), parameters('name')), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].principalId, coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName)]",
                                      "properties": {
                                        "roleDefinitionId": "[if(contains(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName), variables('builtInRoleNames')[coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName], if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName)))]",
                                        "principalId": "[coalesce(parameters('roleAssignments'), createArray())[copyIndex()].principalId]",
                                        "description": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'description')]",
                                        "principalType": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'principalType')]",
                                        "condition": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'condition')]",
                                        "conditionVersion": "[if(not(empty(tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                                        "delegatedManagedIdentityResourceId": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
                                      },
                                      "dependsOn": [
                                        "AAAA"
                                      ]
                                    }
                                  },
                                  "outputs": {
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the deployed AAAA record."
                                      },
                                      "value": "[parameters('name')]"
                                    },
                                    "resourceId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource ID of the deployed AAAA record."
                                      },
                                      "value": "[resourceId('Microsoft.Network/privateDnsZones/AAAA', parameters('privateDnsZoneName'), parameters('name'))]"
                                    },
                                    "resourceGroupName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource group of the deployed AAAA record."
                                      },
                                      "value": "[resourceGroup().name]"
                                    }
                                  }
                                }
                              },
                              "dependsOn": [
                                "privateDnsZone"
                              ]
                            },
                            "privateDnsZone_CNAME": {
                              "copy": {
                                "name": "privateDnsZone_CNAME",
                                "count": "[length(coalesce(parameters('cname'), createArray()))]"
                              },
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "[format('{0}-PrivateDnsZone-CNAMERecord-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "privateDnsZoneName": {
                                    "value": "[parameters('name')]"
                                  },
                                  "name": {
                                    "value": "[coalesce(parameters('cname'), createArray())[copyIndex()].name]"
                                  },
                                  "cnameRecord": {
                                    "value": "[tryGet(coalesce(parameters('cname'), createArray())[copyIndex()], 'cnameRecord')]"
                                  },
                                  "metadata": {
                                    "value": "[tryGet(coalesce(parameters('cname'), createArray())[copyIndex()], 'metadata')]"
                                  },
                                  "ttl": {
                                    "value": "[coalesce(tryGet(coalesce(parameters('cname'), createArray())[copyIndex()], 'ttl'), 3600)]"
                                  },
                                  "roleAssignments": {
                                    "value": "[tryGet(coalesce(parameters('cname'), createArray())[copyIndex()], 'roleAssignments')]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "languageVersion": "2.0",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.28.1.47646",
                                      "templateHash": "12750497126800708872"
                                    },
                                    "name": "Private DNS Zone CNAME record",
                                    "description": "This module deploys a Private DNS Zone CNAME record.",
                                    "owner": "Azure/module-maintainers"
                                  },
                                  "definitions": {
                                    "roleAssignmentType": {
                                      "type": "array",
                                      "items": {
                                        "type": "object",
                                        "properties": {
                                          "roleDefinitionIdOrName": {
                                            "type": "string",
                                            "metadata": {
                                              "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                                            }
                                          },
                                          "principalId": {
                                            "type": "string",
                                            "metadata": {
                                              "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                                            }
                                          },
                                          "principalType": {
                                            "type": "string",
                                            "allowedValues": [
                                              "Device",
                                              "ForeignGroup",
                                              "Group",
                                              "ServicePrincipal",
                                              "User"
                                            ],
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. The principal type of the assigned principal ID."
                                            }
                                          },
                                          "description": {
                                            "type": "string",
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. The description of the role assignment."
                                            }
                                          },
                                          "condition": {
                                            "type": "string",
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                                            }
                                          },
                                          "conditionVersion": {
                                            "type": "string",
                                            "allowedValues": [
                                              "2.0"
                                            ],
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. Version of the condition."
                                            }
                                          },
                                          "delegatedManagedIdentityResourceId": {
                                            "type": "string",
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. The Resource Id of the delegated managed identity resource."
                                            }
                                          }
                                        }
                                      },
                                      "nullable": true
                                    }
                                  },
                                  "parameters": {
                                    "privateDnsZoneName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Conditional. The name of the parent Private DNS zone. Required if the template is used in a standalone deployment."
                                      }
                                    },
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The name of the CNAME record."
                                      }
                                    },
                                    "cnameRecord": {
                                      "type": "object",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. A CNAME record."
                                      }
                                    },
                                    "metadata": {
                                      "type": "object",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. The metadata attached to the record set."
                                      }
                                    },
                                    "ttl": {
                                      "type": "int",
                                      "defaultValue": 3600,
                                      "metadata": {
                                        "description": "Optional. The TTL (time-to-live) of the records in the record set."
                                      }
                                    },
                                    "roleAssignments": {
                                      "$ref": "#/definitions/roleAssignmentType",
                                      "metadata": {
                                        "description": "Optional. Array of role assignments to create."
                                      }
                                    }
                                  },
                                  "variables": {
                                    "builtInRoleNames": {
                                      "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                                      "Private DNS Zone Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b12aa53e-6015-4669-85d0-8515ebb3ae7f')]",
                                      "Network Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4d97b98b-1d4f-4787-a291-c67834d212e7')]",
                                      "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                                      "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                                      "Role Based Access Control Administrator (Preview)": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]",
                                      "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]"
                                    }
                                  },
                                  "resources": {
                                    "privateDnsZone": {
                                      "existing": true,
                                      "type": "Microsoft.Network/privateDnsZones",
                                      "apiVersion": "2020-06-01",
                                      "name": "[parameters('privateDnsZoneName')]"
                                    },
                                    "CNAME": {
                                      "type": "Microsoft.Network/privateDnsZones/CNAME",
                                      "apiVersion": "2020-06-01",
                                      "name": "[format('{0}/{1}', parameters('privateDnsZoneName'), parameters('name'))]",
                                      "properties": {
                                        "cnameRecord": "[parameters('cnameRecord')]",
                                        "metadata": "[parameters('metadata')]",
                                        "ttl": "[parameters('ttl')]"
                                      },
                                      "dependsOn": [
                                        "privateDnsZone"
                                      ]
                                    },
                                    "CNAME_roleAssignments": {
                                      "copy": {
                                        "name": "CNAME_roleAssignments",
                                        "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]"
                                      },
                                      "type": "Microsoft.Authorization/roleAssignments",
                                      "apiVersion": "2022-04-01",
                                      "scope": "[format('Microsoft.Network/privateDnsZones/{0}/CNAME/{1}', parameters('privateDnsZoneName'), parameters('name'))]",
                                      "name": "[guid(resourceId('Microsoft.Network/privateDnsZones/CNAME', parameters('privateDnsZoneName'), parameters('name')), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].principalId, coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName)]",
                                      "properties": {
                                        "roleDefinitionId": "[if(contains(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName), variables('builtInRoleNames')[coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName], if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName)))]",
                                        "principalId": "[coalesce(parameters('roleAssignments'), createArray())[copyIndex()].principalId]",
                                        "description": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'description')]",
                                        "principalType": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'principalType')]",
                                        "condition": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'condition')]",
                                        "conditionVersion": "[if(not(empty(tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                                        "delegatedManagedIdentityResourceId": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
                                      },
                                      "dependsOn": [
                                        "CNAME"
                                      ]
                                    }
                                  },
                                  "outputs": {
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the deployed CNAME record."
                                      },
                                      "value": "[parameters('name')]"
                                    },
                                    "resourceId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource ID of the deployed CNAME record."
                                      },
                                      "value": "[resourceId('Microsoft.Network/privateDnsZones/CNAME', parameters('privateDnsZoneName'), parameters('name'))]"
                                    },
                                    "resourceGroupName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource group of the deployed CNAME record."
                                      },
                                      "value": "[resourceGroup().name]"
                                    }
                                  }
                                }
                              },
                              "dependsOn": [
                                "privateDnsZone"
                              ]
                            },
                            "privateDnsZone_MX": {
                              "copy": {
                                "name": "privateDnsZone_MX",
                                "count": "[length(coalesce(parameters('mx'), createArray()))]"
                              },
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "[format('{0}-PrivateDnsZone-MXRecord-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "privateDnsZoneName": {
                                    "value": "[parameters('name')]"
                                  },
                                  "name": {
                                    "value": "[coalesce(parameters('mx'), createArray())[copyIndex()].name]"
                                  },
                                  "metadata": {
                                    "value": "[tryGet(coalesce(parameters('mx'), createArray())[copyIndex()], 'metadata')]"
                                  },
                                  "mxRecords": {
                                    "value": "[tryGet(coalesce(parameters('mx'), createArray())[copyIndex()], 'mxRecords')]"
                                  },
                                  "ttl": {
                                    "value": "[coalesce(tryGet(coalesce(parameters('mx'), createArray())[copyIndex()], 'ttl'), 3600)]"
                                  },
                                  "roleAssignments": {
                                    "value": "[tryGet(coalesce(parameters('mx'), createArray())[copyIndex()], 'roleAssignments')]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "languageVersion": "2.0",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.28.1.47646",
                                      "templateHash": "13512848802819943036"
                                    },
                                    "name": "Private DNS Zone MX record",
                                    "description": "This module deploys a Private DNS Zone MX record.",
                                    "owner": "Azure/module-maintainers"
                                  },
                                  "definitions": {
                                    "roleAssignmentType": {
                                      "type": "array",
                                      "items": {
                                        "type": "object",
                                        "properties": {
                                          "roleDefinitionIdOrName": {
                                            "type": "string",
                                            "metadata": {
                                              "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                                            }
                                          },
                                          "principalId": {
                                            "type": "string",
                                            "metadata": {
                                              "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                                            }
                                          },
                                          "principalType": {
                                            "type": "string",
                                            "allowedValues": [
                                              "Device",
                                              "ForeignGroup",
                                              "Group",
                                              "ServicePrincipal",
                                              "User"
                                            ],
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. The principal type of the assigned principal ID."
                                            }
                                          },
                                          "description": {
                                            "type": "string",
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. The description of the role assignment."
                                            }
                                          },
                                          "condition": {
                                            "type": "string",
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                                            }
                                          },
                                          "conditionVersion": {
                                            "type": "string",
                                            "allowedValues": [
                                              "2.0"
                                            ],
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. Version of the condition."
                                            }
                                          },
                                          "delegatedManagedIdentityResourceId": {
                                            "type": "string",
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. The Resource Id of the delegated managed identity resource."
                                            }
                                          }
                                        }
                                      },
                                      "nullable": true
                                    }
                                  },
                                  "parameters": {
                                    "privateDnsZoneName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Conditional. The name of the parent Private DNS zone. Required if the template is used in a standalone deployment."
                                      }
                                    },
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The name of the MX record."
                                      }
                                    },
                                    "metadata": {
                                      "type": "object",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. The metadata attached to the record set."
                                      }
                                    },
                                    "mxRecords": {
                                      "type": "array",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. The list of MX records in the record set."
                                      }
                                    },
                                    "ttl": {
                                      "type": "int",
                                      "defaultValue": 3600,
                                      "metadata": {
                                        "description": "Optional. The TTL (time-to-live) of the records in the record set."
                                      }
                                    },
                                    "roleAssignments": {
                                      "$ref": "#/definitions/roleAssignmentType",
                                      "metadata": {
                                        "description": "Optional. Array of role assignments to create."
                                      }
                                    }
                                  },
                                  "variables": {
                                    "builtInRoleNames": {
                                      "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                                      "Private DNS Zone Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b12aa53e-6015-4669-85d0-8515ebb3ae7f')]",
                                      "Network Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4d97b98b-1d4f-4787-a291-c67834d212e7')]",
                                      "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                                      "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                                      "Role Based Access Control Administrator (Preview)": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]",
                                      "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]"
                                    }
                                  },
                                  "resources": {
                                    "privateDnsZone": {
                                      "existing": true,
                                      "type": "Microsoft.Network/privateDnsZones",
                                      "apiVersion": "2020-06-01",
                                      "name": "[parameters('privateDnsZoneName')]"
                                    },
                                    "MX": {
                                      "type": "Microsoft.Network/privateDnsZones/MX",
                                      "apiVersion": "2020-06-01",
                                      "name": "[format('{0}/{1}', parameters('privateDnsZoneName'), parameters('name'))]",
                                      "properties": {
                                        "metadata": "[parameters('metadata')]",
                                        "mxRecords": "[parameters('mxRecords')]",
                                        "ttl": "[parameters('ttl')]"
                                      },
                                      "dependsOn": [
                                        "privateDnsZone"
                                      ]
                                    },
                                    "MX_roleAssignments": {
                                      "copy": {
                                        "name": "MX_roleAssignments",
                                        "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]"
                                      },
                                      "type": "Microsoft.Authorization/roleAssignments",
                                      "apiVersion": "2022-04-01",
                                      "scope": "[format('Microsoft.Network/privateDnsZones/{0}/MX/{1}', parameters('privateDnsZoneName'), parameters('name'))]",
                                      "name": "[guid(resourceId('Microsoft.Network/privateDnsZones/MX', parameters('privateDnsZoneName'), parameters('name')), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].principalId, coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName)]",
                                      "properties": {
                                        "roleDefinitionId": "[if(contains(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName), variables('builtInRoleNames')[coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName], if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName)))]",
                                        "principalId": "[coalesce(parameters('roleAssignments'), createArray())[copyIndex()].principalId]",
                                        "description": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'description')]",
                                        "principalType": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'principalType')]",
                                        "condition": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'condition')]",
                                        "conditionVersion": "[if(not(empty(tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                                        "delegatedManagedIdentityResourceId": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
                                      },
                                      "dependsOn": [
                                        "MX"
                                      ]
                                    }
                                  },
                                  "outputs": {
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the deployed MX record."
                                      },
                                      "value": "[parameters('name')]"
                                    },
                                    "resourceId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource ID of the deployed MX record."
                                      },
                                      "value": "[resourceId('Microsoft.Network/privateDnsZones/MX', parameters('privateDnsZoneName'), parameters('name'))]"
                                    },
                                    "resourceGroupName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource group of the deployed MX record."
                                      },
                                      "value": "[resourceGroup().name]"
                                    }
                                  }
                                }
                              },
                              "dependsOn": [
                                "privateDnsZone"
                              ]
                            },
                            "privateDnsZone_PTR": {
                              "copy": {
                                "name": "privateDnsZone_PTR",
                                "count": "[length(coalesce(parameters('ptr'), createArray()))]"
                              },
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "[format('{0}-PrivateDnsZone-PTRRecord-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "privateDnsZoneName": {
                                    "value": "[parameters('name')]"
                                  },
                                  "name": {
                                    "value": "[coalesce(parameters('ptr'), createArray())[copyIndex()].name]"
                                  },
                                  "metadata": {
                                    "value": "[tryGet(coalesce(parameters('ptr'), createArray())[copyIndex()], 'metadata')]"
                                  },
                                  "ptrRecords": {
                                    "value": "[tryGet(coalesce(parameters('ptr'), createArray())[copyIndex()], 'ptrRecords')]"
                                  },
                                  "ttl": {
                                    "value": "[coalesce(tryGet(coalesce(parameters('ptr'), createArray())[copyIndex()], 'ttl'), 3600)]"
                                  },
                                  "roleAssignments": {
                                    "value": "[tryGet(coalesce(parameters('ptr'), createArray())[copyIndex()], 'roleAssignments')]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "languageVersion": "2.0",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.28.1.47646",
                                      "templateHash": "5069219418696231980"
                                    },
                                    "name": "Private DNS Zone PTR record",
                                    "description": "This module deploys a Private DNS Zone PTR record.",
                                    "owner": "Azure/module-maintainers"
                                  },
                                  "definitions": {
                                    "roleAssignmentType": {
                                      "type": "array",
                                      "items": {
                                        "type": "object",
                                        "properties": {
                                          "roleDefinitionIdOrName": {
                                            "type": "string",
                                            "metadata": {
                                              "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                                            }
                                          },
                                          "principalId": {
                                            "type": "string",
                                            "metadata": {
                                              "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                                            }
                                          },
                                          "principalType": {
                                            "type": "string",
                                            "allowedValues": [
                                              "Device",
                                              "ForeignGroup",
                                              "Group",
                                              "ServicePrincipal",
                                              "User"
                                            ],
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. The principal type of the assigned principal ID."
                                            }
                                          },
                                          "description": {
                                            "type": "string",
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. The description of the role assignment."
                                            }
                                          },
                                          "condition": {
                                            "type": "string",
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                                            }
                                          },
                                          "conditionVersion": {
                                            "type": "string",
                                            "allowedValues": [
                                              "2.0"
                                            ],
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. Version of the condition."
                                            }
                                          },
                                          "delegatedManagedIdentityResourceId": {
                                            "type": "string",
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. The Resource Id of the delegated managed identity resource."
                                            }
                                          }
                                        }
                                      },
                                      "nullable": true
                                    }
                                  },
                                  "parameters": {
                                    "privateDnsZoneName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Conditional. The name of the parent Private DNS zone. Required if the template is used in a standalone deployment."
                                      }
                                    },
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The name of the PTR record."
                                      }
                                    },
                                    "metadata": {
                                      "type": "object",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. The metadata attached to the record set."
                                      }
                                    },
                                    "ptrRecords": {
                                      "type": "array",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. The list of PTR records in the record set."
                                      }
                                    },
                                    "ttl": {
                                      "type": "int",
                                      "defaultValue": 3600,
                                      "metadata": {
                                        "description": "Optional. The TTL (time-to-live) of the records in the record set."
                                      }
                                    },
                                    "roleAssignments": {
                                      "$ref": "#/definitions/roleAssignmentType",
                                      "metadata": {
                                        "description": "Optional. Array of role assignments to create."
                                      }
                                    }
                                  },
                                  "variables": {
                                    "builtInRoleNames": {
                                      "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                                      "Private DNS Zone Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b12aa53e-6015-4669-85d0-8515ebb3ae7f')]",
                                      "Network Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4d97b98b-1d4f-4787-a291-c67834d212e7')]",
                                      "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                                      "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                                      "Role Based Access Control Administrator (Preview)": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]",
                                      "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]"
                                    }
                                  },
                                  "resources": {
                                    "privateDnsZone": {
                                      "existing": true,
                                      "type": "Microsoft.Network/privateDnsZones",
                                      "apiVersion": "2020-06-01",
                                      "name": "[parameters('privateDnsZoneName')]"
                                    },
                                    "PTR": {
                                      "type": "Microsoft.Network/privateDnsZones/PTR",
                                      "apiVersion": "2020-06-01",
                                      "name": "[format('{0}/{1}', parameters('privateDnsZoneName'), parameters('name'))]",
                                      "properties": {
                                        "metadata": "[parameters('metadata')]",
                                        "ptrRecords": "[parameters('ptrRecords')]",
                                        "ttl": "[parameters('ttl')]"
                                      },
                                      "dependsOn": [
                                        "privateDnsZone"
                                      ]
                                    },
                                    "PTR_roleAssignments": {
                                      "copy": {
                                        "name": "PTR_roleAssignments",
                                        "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]"
                                      },
                                      "type": "Microsoft.Authorization/roleAssignments",
                                      "apiVersion": "2022-04-01",
                                      "scope": "[format('Microsoft.Network/privateDnsZones/{0}/PTR/{1}', parameters('privateDnsZoneName'), parameters('name'))]",
                                      "name": "[guid(resourceId('Microsoft.Network/privateDnsZones/PTR', parameters('privateDnsZoneName'), parameters('name')), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].principalId, coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName)]",
                                      "properties": {
                                        "roleDefinitionId": "[if(contains(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName), variables('builtInRoleNames')[coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName], if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName)))]",
                                        "principalId": "[coalesce(parameters('roleAssignments'), createArray())[copyIndex()].principalId]",
                                        "description": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'description')]",
                                        "principalType": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'principalType')]",
                                        "condition": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'condition')]",
                                        "conditionVersion": "[if(not(empty(tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                                        "delegatedManagedIdentityResourceId": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
                                      },
                                      "dependsOn": [
                                        "PTR"
                                      ]
                                    }
                                  },
                                  "outputs": {
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the deployed PTR record."
                                      },
                                      "value": "[parameters('name')]"
                                    },
                                    "resourceId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource ID of the deployed PTR record."
                                      },
                                      "value": "[resourceId('Microsoft.Network/privateDnsZones/PTR', parameters('privateDnsZoneName'), parameters('name'))]"
                                    },
                                    "resourceGroupName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource group of the deployed PTR record."
                                      },
                                      "value": "[resourceGroup().name]"
                                    }
                                  }
                                }
                              },
                              "dependsOn": [
                                "privateDnsZone"
                              ]
                            },
                            "privateDnsZone_SOA": {
                              "copy": {
                                "name": "privateDnsZone_SOA",
                                "count": "[length(coalesce(parameters('soa'), createArray()))]"
                              },
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "[format('{0}-PrivateDnsZone-SOARecord-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "privateDnsZoneName": {
                                    "value": "[parameters('name')]"
                                  },
                                  "name": {
                                    "value": "[coalesce(parameters('soa'), createArray())[copyIndex()].name]"
                                  },
                                  "metadata": {
                                    "value": "[tryGet(coalesce(parameters('soa'), createArray())[copyIndex()], 'metadata')]"
                                  },
                                  "soaRecord": {
                                    "value": "[tryGet(coalesce(parameters('soa'), createArray())[copyIndex()], 'soaRecord')]"
                                  },
                                  "ttl": {
                                    "value": "[coalesce(tryGet(coalesce(parameters('soa'), createArray())[copyIndex()], 'ttl'), 3600)]"
                                  },
                                  "roleAssignments": {
                                    "value": "[tryGet(coalesce(parameters('soa'), createArray())[copyIndex()], 'roleAssignments')]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "languageVersion": "2.0",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.28.1.47646",
                                      "templateHash": "8649693365938652763"
                                    },
                                    "name": "Private DNS Zone SOA record",
                                    "description": "This module deploys a Private DNS Zone SOA record.",
                                    "owner": "Azure/module-maintainers"
                                  },
                                  "definitions": {
                                    "roleAssignmentType": {
                                      "type": "array",
                                      "items": {
                                        "type": "object",
                                        "properties": {
                                          "roleDefinitionIdOrName": {
                                            "type": "string",
                                            "metadata": {
                                              "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                                            }
                                          },
                                          "principalId": {
                                            "type": "string",
                                            "metadata": {
                                              "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                                            }
                                          },
                                          "principalType": {
                                            "type": "string",
                                            "allowedValues": [
                                              "Device",
                                              "ForeignGroup",
                                              "Group",
                                              "ServicePrincipal",
                                              "User"
                                            ],
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. The principal type of the assigned principal ID."
                                            }
                                          },
                                          "description": {
                                            "type": "string",
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. The description of the role assignment."
                                            }
                                          },
                                          "condition": {
                                            "type": "string",
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                                            }
                                          },
                                          "conditionVersion": {
                                            "type": "string",
                                            "allowedValues": [
                                              "2.0"
                                            ],
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. Version of the condition."
                                            }
                                          },
                                          "delegatedManagedIdentityResourceId": {
                                            "type": "string",
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. The Resource Id of the delegated managed identity resource."
                                            }
                                          }
                                        }
                                      },
                                      "nullable": true
                                    }
                                  },
                                  "parameters": {
                                    "privateDnsZoneName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Conditional. The name of the parent Private DNS zone. Required if the template is used in a standalone deployment."
                                      }
                                    },
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The name of the SOA record."
                                      }
                                    },
                                    "metadata": {
                                      "type": "object",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. The metadata attached to the record set."
                                      }
                                    },
                                    "soaRecord": {
                                      "type": "object",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. A SOA record."
                                      }
                                    },
                                    "ttl": {
                                      "type": "int",
                                      "defaultValue": 3600,
                                      "metadata": {
                                        "description": "Optional. The TTL (time-to-live) of the records in the record set."
                                      }
                                    },
                                    "roleAssignments": {
                                      "$ref": "#/definitions/roleAssignmentType",
                                      "metadata": {
                                        "description": "Optional. Array of role assignments to create."
                                      }
                                    }
                                  },
                                  "variables": {
                                    "builtInRoleNames": {
                                      "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                                      "Private DNS Zone Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b12aa53e-6015-4669-85d0-8515ebb3ae7f')]",
                                      "Network Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4d97b98b-1d4f-4787-a291-c67834d212e7')]",
                                      "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                                      "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                                      "Role Based Access Control Administrator (Preview)": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]",
                                      "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]"
                                    }
                                  },
                                  "resources": {
                                    "privateDnsZone": {
                                      "existing": true,
                                      "type": "Microsoft.Network/privateDnsZones",
                                      "apiVersion": "2020-06-01",
                                      "name": "[parameters('privateDnsZoneName')]"
                                    },
                                    "SOA": {
                                      "type": "Microsoft.Network/privateDnsZones/SOA",
                                      "apiVersion": "2020-06-01",
                                      "name": "[format('{0}/{1}', parameters('privateDnsZoneName'), parameters('name'))]",
                                      "properties": {
                                        "metadata": "[parameters('metadata')]",
                                        "soaRecord": "[parameters('soaRecord')]",
                                        "ttl": "[parameters('ttl')]"
                                      },
                                      "dependsOn": [
                                        "privateDnsZone"
                                      ]
                                    },
                                    "SOA_roleAssignments": {
                                      "copy": {
                                        "name": "SOA_roleAssignments",
                                        "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]"
                                      },
                                      "type": "Microsoft.Authorization/roleAssignments",
                                      "apiVersion": "2022-04-01",
                                      "scope": "[format('Microsoft.Network/privateDnsZones/{0}/SOA/{1}', parameters('privateDnsZoneName'), parameters('name'))]",
                                      "name": "[guid(resourceId('Microsoft.Network/privateDnsZones/SOA', parameters('privateDnsZoneName'), parameters('name')), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].principalId, coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName)]",
                                      "properties": {
                                        "roleDefinitionId": "[if(contains(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName), variables('builtInRoleNames')[coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName], if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName)))]",
                                        "principalId": "[coalesce(parameters('roleAssignments'), createArray())[copyIndex()].principalId]",
                                        "description": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'description')]",
                                        "principalType": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'principalType')]",
                                        "condition": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'condition')]",
                                        "conditionVersion": "[if(not(empty(tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                                        "delegatedManagedIdentityResourceId": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
                                      },
                                      "dependsOn": [
                                        "SOA"
                                      ]
                                    }
                                  },
                                  "outputs": {
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the deployed SOA record."
                                      },
                                      "value": "[parameters('name')]"
                                    },
                                    "resourceId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource ID of the deployed SOA record."
                                      },
                                      "value": "[resourceId('Microsoft.Network/privateDnsZones/SOA', parameters('privateDnsZoneName'), parameters('name'))]"
                                    },
                                    "resourceGroupName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource group of the deployed SOA record."
                                      },
                                      "value": "[resourceGroup().name]"
                                    }
                                  }
                                }
                              },
                              "dependsOn": [
                                "privateDnsZone"
                              ]
                            },
                            "privateDnsZone_SRV": {
                              "copy": {
                                "name": "privateDnsZone_SRV",
                                "count": "[length(coalesce(parameters('srv'), createArray()))]"
                              },
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "[format('{0}-PrivateDnsZone-SRVRecord-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "privateDnsZoneName": {
                                    "value": "[parameters('name')]"
                                  },
                                  "name": {
                                    "value": "[coalesce(parameters('srv'), createArray())[copyIndex()].name]"
                                  },
                                  "metadata": {
                                    "value": "[tryGet(coalesce(parameters('srv'), createArray())[copyIndex()], 'metadata')]"
                                  },
                                  "srvRecords": {
                                    "value": "[tryGet(coalesce(parameters('srv'), createArray())[copyIndex()], 'srvRecords')]"
                                  },
                                  "ttl": {
                                    "value": "[coalesce(tryGet(coalesce(parameters('srv'), createArray())[copyIndex()], 'ttl'), 3600)]"
                                  },
                                  "roleAssignments": {
                                    "value": "[tryGet(coalesce(parameters('srv'), createArray())[copyIndex()], 'roleAssignments')]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "languageVersion": "2.0",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.28.1.47646",
                                      "templateHash": "1580431299497536987"
                                    },
                                    "name": "Private DNS Zone SRV record",
                                    "description": "This module deploys a Private DNS Zone SRV record.",
                                    "owner": "Azure/module-maintainers"
                                  },
                                  "definitions": {
                                    "roleAssignmentType": {
                                      "type": "array",
                                      "items": {
                                        "type": "object",
                                        "properties": {
                                          "roleDefinitionIdOrName": {
                                            "type": "string",
                                            "metadata": {
                                              "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                                            }
                                          },
                                          "principalId": {
                                            "type": "string",
                                            "metadata": {
                                              "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                                            }
                                          },
                                          "principalType": {
                                            "type": "string",
                                            "allowedValues": [
                                              "Device",
                                              "ForeignGroup",
                                              "Group",
                                              "ServicePrincipal",
                                              "User"
                                            ],
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. The principal type of the assigned principal ID."
                                            }
                                          },
                                          "description": {
                                            "type": "string",
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. The description of the role assignment."
                                            }
                                          },
                                          "condition": {
                                            "type": "string",
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                                            }
                                          },
                                          "conditionVersion": {
                                            "type": "string",
                                            "allowedValues": [
                                              "2.0"
                                            ],
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. Version of the condition."
                                            }
                                          },
                                          "delegatedManagedIdentityResourceId": {
                                            "type": "string",
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. The Resource Id of the delegated managed identity resource."
                                            }
                                          }
                                        }
                                      },
                                      "nullable": true
                                    }
                                  },
                                  "parameters": {
                                    "privateDnsZoneName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Conditional. The name of the parent Private DNS zone. Required if the template is used in a standalone deployment."
                                      }
                                    },
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The name of the SRV record."
                                      }
                                    },
                                    "metadata": {
                                      "type": "object",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. The metadata attached to the record set."
                                      }
                                    },
                                    "srvRecords": {
                                      "type": "array",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. The list of SRV records in the record set."
                                      }
                                    },
                                    "ttl": {
                                      "type": "int",
                                      "defaultValue": 3600,
                                      "metadata": {
                                        "description": "Optional. The TTL (time-to-live) of the records in the record set."
                                      }
                                    },
                                    "roleAssignments": {
                                      "$ref": "#/definitions/roleAssignmentType",
                                      "metadata": {
                                        "description": "Optional. Array of role assignments to create."
                                      }
                                    }
                                  },
                                  "variables": {
                                    "builtInRoleNames": {
                                      "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                                      "Private DNS Zone Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b12aa53e-6015-4669-85d0-8515ebb3ae7f')]",
                                      "Network Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4d97b98b-1d4f-4787-a291-c67834d212e7')]",
                                      "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                                      "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                                      "Role Based Access Control Administrator (Preview)": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]",
                                      "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]"
                                    }
                                  },
                                  "resources": {
                                    "privateDnsZone": {
                                      "existing": true,
                                      "type": "Microsoft.Network/privateDnsZones",
                                      "apiVersion": "2020-06-01",
                                      "name": "[parameters('privateDnsZoneName')]"
                                    },
                                    "SRV": {
                                      "type": "Microsoft.Network/privateDnsZones/SRV",
                                      "apiVersion": "2020-06-01",
                                      "name": "[format('{0}/{1}', parameters('privateDnsZoneName'), parameters('name'))]",
                                      "properties": {
                                        "metadata": "[parameters('metadata')]",
                                        "srvRecords": "[parameters('srvRecords')]",
                                        "ttl": "[parameters('ttl')]"
                                      },
                                      "dependsOn": [
                                        "privateDnsZone"
                                      ]
                                    },
                                    "SRV_roleAssignments": {
                                      "copy": {
                                        "name": "SRV_roleAssignments",
                                        "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]"
                                      },
                                      "type": "Microsoft.Authorization/roleAssignments",
                                      "apiVersion": "2022-04-01",
                                      "scope": "[format('Microsoft.Network/privateDnsZones/{0}/SRV/{1}', parameters('privateDnsZoneName'), parameters('name'))]",
                                      "name": "[guid(resourceId('Microsoft.Network/privateDnsZones/SRV', parameters('privateDnsZoneName'), parameters('name')), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].principalId, coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName)]",
                                      "properties": {
                                        "roleDefinitionId": "[if(contains(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName), variables('builtInRoleNames')[coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName], if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName)))]",
                                        "principalId": "[coalesce(parameters('roleAssignments'), createArray())[copyIndex()].principalId]",
                                        "description": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'description')]",
                                        "principalType": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'principalType')]",
                                        "condition": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'condition')]",
                                        "conditionVersion": "[if(not(empty(tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                                        "delegatedManagedIdentityResourceId": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
                                      },
                                      "dependsOn": [
                                        "SRV"
                                      ]
                                    }
                                  },
                                  "outputs": {
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the deployed SRV record."
                                      },
                                      "value": "[parameters('name')]"
                                    },
                                    "resourceId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource ID of the deployed SRV record."
                                      },
                                      "value": "[resourceId('Microsoft.Network/privateDnsZones/SRV', parameters('privateDnsZoneName'), parameters('name'))]"
                                    },
                                    "resourceGroupName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource group of the deployed SRV record."
                                      },
                                      "value": "[resourceGroup().name]"
                                    }
                                  }
                                }
                              },
                              "dependsOn": [
                                "privateDnsZone"
                              ]
                            },
                            "privateDnsZone_TXT": {
                              "copy": {
                                "name": "privateDnsZone_TXT",
                                "count": "[length(coalesce(parameters('txt'), createArray()))]"
                              },
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "[format('{0}-PrivateDnsZone-TXTRecord-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "privateDnsZoneName": {
                                    "value": "[parameters('name')]"
                                  },
                                  "name": {
                                    "value": "[coalesce(parameters('txt'), createArray())[copyIndex()].name]"
                                  },
                                  "metadata": {
                                    "value": "[tryGet(coalesce(parameters('txt'), createArray())[copyIndex()], 'metadata')]"
                                  },
                                  "txtRecords": {
                                    "value": "[tryGet(coalesce(parameters('txt'), createArray())[copyIndex()], 'txtRecords')]"
                                  },
                                  "ttl": {
                                    "value": "[coalesce(tryGet(coalesce(parameters('txt'), createArray())[copyIndex()], 'ttl'), 3600)]"
                                  },
                                  "roleAssignments": {
                                    "value": "[tryGet(coalesce(parameters('txt'), createArray())[copyIndex()], 'roleAssignments')]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "languageVersion": "2.0",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.28.1.47646",
                                      "templateHash": "1628766837655887758"
                                    },
                                    "name": "Private DNS Zone TXT record",
                                    "description": "This module deploys a Private DNS Zone TXT record.",
                                    "owner": "Azure/module-maintainers"
                                  },
                                  "definitions": {
                                    "roleAssignmentType": {
                                      "type": "array",
                                      "items": {
                                        "type": "object",
                                        "properties": {
                                          "roleDefinitionIdOrName": {
                                            "type": "string",
                                            "metadata": {
                                              "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                                            }
                                          },
                                          "principalId": {
                                            "type": "string",
                                            "metadata": {
                                              "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                                            }
                                          },
                                          "principalType": {
                                            "type": "string",
                                            "allowedValues": [
                                              "Device",
                                              "ForeignGroup",
                                              "Group",
                                              "ServicePrincipal",
                                              "User"
                                            ],
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. The principal type of the assigned principal ID."
                                            }
                                          },
                                          "description": {
                                            "type": "string",
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. The description of the role assignment."
                                            }
                                          },
                                          "condition": {
                                            "type": "string",
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                                            }
                                          },
                                          "conditionVersion": {
                                            "type": "string",
                                            "allowedValues": [
                                              "2.0"
                                            ],
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. Version of the condition."
                                            }
                                          },
                                          "delegatedManagedIdentityResourceId": {
                                            "type": "string",
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. The Resource Id of the delegated managed identity resource."
                                            }
                                          }
                                        }
                                      },
                                      "nullable": true
                                    }
                                  },
                                  "parameters": {
                                    "privateDnsZoneName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Conditional. The name of the parent Private DNS zone. Required if the template is used in a standalone deployment."
                                      }
                                    },
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The name of the TXT record."
                                      }
                                    },
                                    "metadata": {
                                      "type": "object",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. The metadata attached to the record set."
                                      }
                                    },
                                    "ttl": {
                                      "type": "int",
                                      "defaultValue": 3600,
                                      "metadata": {
                                        "description": "Optional. The TTL (time-to-live) of the records in the record set."
                                      }
                                    },
                                    "txtRecords": {
                                      "type": "array",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. The list of TXT records in the record set."
                                      }
                                    },
                                    "roleAssignments": {
                                      "$ref": "#/definitions/roleAssignmentType",
                                      "metadata": {
                                        "description": "Optional. Array of role assignments to create."
                                      }
                                    }
                                  },
                                  "variables": {
                                    "builtInRoleNames": {
                                      "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                                      "Private DNS Zone Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b12aa53e-6015-4669-85d0-8515ebb3ae7f')]",
                                      "Network Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4d97b98b-1d4f-4787-a291-c67834d212e7')]",
                                      "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                                      "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                                      "Role Based Access Control Administrator (Preview)": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]",
                                      "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]"
                                    }
                                  },
                                  "resources": {
                                    "privateDnsZone": {
                                      "existing": true,
                                      "type": "Microsoft.Network/privateDnsZones",
                                      "apiVersion": "2020-06-01",
                                      "name": "[parameters('privateDnsZoneName')]"
                                    },
                                    "TXT": {
                                      "type": "Microsoft.Network/privateDnsZones/TXT",
                                      "apiVersion": "2020-06-01",
                                      "name": "[format('{0}/{1}', parameters('privateDnsZoneName'), parameters('name'))]",
                                      "properties": {
                                        "metadata": "[parameters('metadata')]",
                                        "ttl": "[parameters('ttl')]",
                                        "txtRecords": "[parameters('txtRecords')]"
                                      },
                                      "dependsOn": [
                                        "privateDnsZone"
                                      ]
                                    },
                                    "TXT_roleAssignments": {
                                      "copy": {
                                        "name": "TXT_roleAssignments",
                                        "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]"
                                      },
                                      "type": "Microsoft.Authorization/roleAssignments",
                                      "apiVersion": "2022-04-01",
                                      "scope": "[format('Microsoft.Network/privateDnsZones/{0}/TXT/{1}', parameters('privateDnsZoneName'), parameters('name'))]",
                                      "name": "[guid(resourceId('Microsoft.Network/privateDnsZones/TXT', parameters('privateDnsZoneName'), parameters('name')), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].principalId, coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName)]",
                                      "properties": {
                                        "roleDefinitionId": "[if(contains(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName), variables('builtInRoleNames')[coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName], if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName)))]",
                                        "principalId": "[coalesce(parameters('roleAssignments'), createArray())[copyIndex()].principalId]",
                                        "description": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'description')]",
                                        "principalType": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'principalType')]",
                                        "condition": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'condition')]",
                                        "conditionVersion": "[if(not(empty(tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                                        "delegatedManagedIdentityResourceId": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
                                      },
                                      "dependsOn": [
                                        "TXT"
                                      ]
                                    }
                                  },
                                  "outputs": {
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the deployed TXT record."
                                      },
                                      "value": "[parameters('name')]"
                                    },
                                    "resourceId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource ID of the deployed TXT record."
                                      },
                                      "value": "[resourceId('Microsoft.Network/privateDnsZones/TXT', parameters('privateDnsZoneName'), parameters('name'))]"
                                    },
                                    "resourceGroupName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource group of the deployed TXT record."
                                      },
                                      "value": "[resourceGroup().name]"
                                    }
                                  }
                                }
                              },
                              "dependsOn": [
                                "privateDnsZone"
                              ]
                            },
                            "privateDnsZone_virtualNetworkLinks": {
                              "copy": {
                                "name": "privateDnsZone_virtualNetworkLinks",
                                "count": "[length(coalesce(parameters('virtualNetworkLinks'), createArray()))]"
                              },
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "[format('{0}-PrivateDnsZone-VirtualNetworkLink-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "privateDnsZoneName": {
                                    "value": "[parameters('name')]"
                                  },
                                  "name": {
                                    "value": "[coalesce(tryGet(coalesce(parameters('virtualNetworkLinks'), createArray())[copyIndex()], 'name'), format('{0}-vnetlink', last(split(coalesce(parameters('virtualNetworkLinks'), createArray())[copyIndex()].virtualNetworkResourceId, '/'))))]"
                                  },
                                  "virtualNetworkResourceId": {
                                    "value": "[coalesce(parameters('virtualNetworkLinks'), createArray())[copyIndex()].virtualNetworkResourceId]"
                                  },
                                  "location": {
                                    "value": "[coalesce(tryGet(coalesce(parameters('virtualNetworkLinks'), createArray())[copyIndex()], 'location'), 'global')]"
                                  },
                                  "registrationEnabled": {
                                    "value": "[coalesce(tryGet(coalesce(parameters('virtualNetworkLinks'), createArray())[copyIndex()], 'registrationEnabled'), false())]"
                                  },
                                  "tags": {
                                    "value": "[coalesce(tryGet(coalesce(parameters('virtualNetworkLinks'), createArray())[copyIndex()], 'tags'), parameters('tags'))]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "languageVersion": "2.0",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.28.1.47646",
                                      "templateHash": "8423159394395901832"
                                    },
                                    "name": "Private DNS Zone Virtual Network Link",
                                    "description": "This module deploys a Private DNS Zone Virtual Network Link.",
                                    "owner": "Azure/module-maintainers"
                                  },
                                  "parameters": {
                                    "privateDnsZoneName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Conditional. The name of the parent Private DNS zone. Required if the template is used in a standalone deployment."
                                      }
                                    },
                                    "name": {
                                      "type": "string",
                                      "defaultValue": "[format('{0}-vnetlink', last(split(parameters('virtualNetworkResourceId'), '/')))]",
                                      "metadata": {
                                        "description": "Optional. The name of the virtual network link."
                                      }
                                    },
                                    "location": {
                                      "type": "string",
                                      "defaultValue": "global",
                                      "metadata": {
                                        "description": "Optional. The location of the PrivateDNSZone. Should be global."
                                      }
                                    },
                                    "tags": {
                                      "type": "object",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. Tags of the resource."
                                      }
                                    },
                                    "registrationEnabled": {
                                      "type": "bool",
                                      "defaultValue": false,
                                      "metadata": {
                                        "description": "Optional. Is auto-registration of virtual machine records in the virtual network in the Private DNS zone enabled?."
                                      }
                                    },
                                    "virtualNetworkResourceId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. Link to another virtual network resource ID."
                                      }
                                    }
                                  },
                                  "resources": {
                                    "privateDnsZone": {
                                      "existing": true,
                                      "type": "Microsoft.Network/privateDnsZones",
                                      "apiVersion": "2020-06-01",
                                      "name": "[parameters('privateDnsZoneName')]"
                                    },
                                    "virtualNetworkLink": {
                                      "type": "Microsoft.Network/privateDnsZones/virtualNetworkLinks",
                                      "apiVersion": "2020-06-01",
                                      "name": "[format('{0}/{1}', parameters('privateDnsZoneName'), parameters('name'))]",
                                      "location": "[parameters('location')]",
                                      "tags": "[parameters('tags')]",
                                      "properties": {
                                        "registrationEnabled": "[parameters('registrationEnabled')]",
                                        "virtualNetwork": {
                                          "id": "[parameters('virtualNetworkResourceId')]"
                                        }
                                      },
                                      "dependsOn": [
                                        "privateDnsZone"
                                      ]
                                    }
                                  },
                                  "outputs": {
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the deployed virtual network link."
                                      },
                                      "value": "[parameters('name')]"
                                    },
                                    "resourceId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource ID of the deployed virtual network link."
                                      },
                                      "value": "[resourceId('Microsoft.Network/privateDnsZones/virtualNetworkLinks', parameters('privateDnsZoneName'), parameters('name'))]"
                                    },
                                    "resourceGroupName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource group of the deployed virtual network link."
                                      },
                                      "value": "[resourceGroup().name]"
                                    },
                                    "location": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The location the resource was deployed into."
                                      },
                                      "value": "[reference('virtualNetworkLink', '2020-06-01', 'full').location]"
                                    }
                                  }
                                }
                              },
                              "dependsOn": [
                                "privateDnsZone"
                              ]
                            }
                          },
                          "outputs": {
                            "resourceGroupName": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource group the private DNS zone was deployed into."
                              },
                              "value": "[resourceGroup().name]"
                            },
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "The name of the private DNS zone."
                              },
                              "value": "[parameters('name')]"
                            },
                            "resourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource ID of the private DNS zone."
                              },
                              "value": "[resourceId('Microsoft.Network/privateDnsZones', parameters('name'))]"
                            },
                            "location": {
                              "type": "string",
                              "metadata": {
                                "description": "The location the resource was deployed into."
                              },
                              "value": "[reference('privateDnsZone', '2020-06-01', 'full').location]"
                            }
                          }
                        }
                      }
                    },
                    {
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('vault-{0}', uniqueString(resourceGroup().id))]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "name": {
                            "value": "[parameters('keyVaultName')]"
                          },
                          "location": {
                            "value": "[parameters('location')]"
                          },
                          "tags": {
                            "value": "[parameters('tags')]"
                          },
                          "enableTelemetry": {
                            "value": "[parameters('enableTelemetry')]"
                          },
                          "sku": {
                            "value": "standard"
                          },
                          "networkAcls": {
                            "value": {
                              "bypass": "AzureServices",
                              "defaultAction": "Deny"
                            }
                          },
                          "enableSoftDelete": {
                            "value": true
                          },
                          "softDeleteRetentionInDays": {
                            "value": 7
                          },
                          "enablePurgeProtection": {
                            "value": null
                          },
                          "publicNetworkAccess": {
                            "value": "Disabled"
                          },
                          "enableRbacAuthorization": {
                            "value": true
                          },
                          "enableVaultForDeployment": {
                            "value": true
                          },
                          "privateEndpoints": {
                            "value": [
                              {
                                "name": "[parameters('keyVaultPrivateEndpointName')]",
                                "privateDnsZoneResourceIds": [
                                  "[reference(resourceId('Microsoft.Resources/deployments', format('keyvaultDnsZoneDeployment-{0}', uniqueString(resourceGroup().id))), '2022-09-01').outputs.resourceId.value]"
                                ],
                                "subnetResourceId": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('spokeSubscriptionId'), variables('spokeResourceGroupName')), 'Microsoft.Network/virtualNetworks/subnets', variables('spokeVNetName'), parameters('spokePrivateEndpointSubnetName'))]"
                              }
                            ]
                          },
                          "diagnosticSettings": {
                            "value": [
                              {
                                "name": "[parameters('diagnosticSettingsName')]",
                                "workspaceResourceId": "[parameters('diagnosticWorkspaceId')]",
                                "logCategoriesAndGroups": [
                                  {
                                    "categoryGroup": "allLogs"
                                  }
                                ],
                                "metricCategories": [
                                  {
                                    "category": "AllMetrics"
                                  }
                                ]
                              }
                            ]
                          },
                          "roleAssignments": {
                            "value": [
                              {
                                "principalId": "[parameters('appServiceManagedIdentityPrincipalId')]",
                                "roleDefinitionIdOrName": "4633458b-17de-408a-b874-0445c86b69e6"
                              }
                            ]
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "languageVersion": "2.0",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.27.1.19265",
                              "templateHash": "4424685997744462747"
                            },
                            "name": "Key Vaults",
                            "description": "This module deploys a Key Vault.",
                            "owner": "Azure/module-maintainers"
                          },
                          "definitions": {
                            "diagnosticSettingType": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "name": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The name of diagnostic setting."
                                    }
                                  },
                                  "logCategoriesAndGroups": {
                                    "type": "array",
                                    "items": {
                                      "type": "object",
                                      "properties": {
                                        "category": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. Name of a Diagnostic Log category for a resource type this setting is applied to. Set the specific logs to collect here."
                                          }
                                        },
                                        "categoryGroup": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. Name of a Diagnostic Log category group for a resource type this setting is applied to. Set to `allLogs` to collect all logs."
                                          }
                                        },
                                        "enabled": {
                                          "type": "bool",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. Enable or disable the category explicitly. Default is `true`."
                                          }
                                        }
                                      }
                                    },
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The name of logs that will be streamed. \"allLogs\" includes all possible logs for the resource. Set to `[]` to disable log collection."
                                    }
                                  },
                                  "metricCategories": {
                                    "type": "array",
                                    "items": {
                                      "type": "object",
                                      "properties": {
                                        "category": {
                                          "type": "string",
                                          "metadata": {
                                            "description": "Required. Name of a Diagnostic Metric category for a resource type this setting is applied to. Set to `AllMetrics` to collect all metrics."
                                          }
                                        },
                                        "enabled": {
                                          "type": "bool",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. Enable or disable the category explicitly. Default is `true`."
                                          }
                                        }
                                      }
                                    },
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The name of metrics that will be streamed. \"allMetrics\" includes all possible metrics for the resource. Set to `[]` to disable metric collection."
                                    }
                                  },
                                  "logAnalyticsDestinationType": {
                                    "type": "string",
                                    "allowedValues": [
                                      "AzureDiagnostics",
                                      "Dedicated"
                                    ],
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. A string indicating whether the export to Log Analytics should use the default destination type, i.e. AzureDiagnostics, or use a destination type."
                                    }
                                  },
                                  "workspaceResourceId": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. Resource ID of the diagnostic log analytics workspace. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                                    }
                                  },
                                  "storageAccountResourceId": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. Resource ID of the diagnostic storage account. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                                    }
                                  },
                                  "eventHubAuthorizationRuleResourceId": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. Resource ID of the diagnostic event hub authorization rule for the Event Hubs namespace in which the event hub should be created or streamed to."
                                    }
                                  },
                                  "eventHubName": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. Name of the diagnostic event hub within the namespace to which logs are streamed. Without this, an event hub is created for each log category. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                                    }
                                  },
                                  "marketplacePartnerResourceId": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The full ARM resource ID of the Marketplace resource to which you would like to send Diagnostic Logs."
                                    }
                                  }
                                }
                              },
                              "nullable": true
                            },
                            "roleAssignmentType": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "roleDefinitionIdOrName": {
                                    "type": "string",
                                    "metadata": {
                                      "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                                    }
                                  },
                                  "principalId": {
                                    "type": "string",
                                    "metadata": {
                                      "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                                    }
                                  },
                                  "principalType": {
                                    "type": "string",
                                    "allowedValues": [
                                      "Device",
                                      "ForeignGroup",
                                      "Group",
                                      "ServicePrincipal",
                                      "User"
                                    ],
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The principal type of the assigned principal ID."
                                    }
                                  },
                                  "description": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The description of the role assignment."
                                    }
                                  },
                                  "condition": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                                    }
                                  },
                                  "conditionVersion": {
                                    "type": "string",
                                    "allowedValues": [
                                      "2.0"
                                    ],
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. Version of the condition."
                                    }
                                  },
                                  "delegatedManagedIdentityResourceId": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The Resource Id of the delegated managed identity resource."
                                    }
                                  }
                                }
                              },
                              "nullable": true
                            },
                            "privateEndpointType": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "name": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The name of the private endpoint."
                                    }
                                  },
                                  "location": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The location to deploy the private endpoint to."
                                    }
                                  },
                                  "privateLinkServiceConnectionName": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The name of the private link connection to create."
                                    }
                                  },
                                  "service": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The subresource to deploy the private endpoint for. For example \"vault\", \"mysqlServer\" or \"dataFactory\"."
                                    }
                                  },
                                  "subnetResourceId": {
                                    "type": "string",
                                    "metadata": {
                                      "description": "Required. Resource ID of the subnet where the endpoint needs to be created."
                                    }
                                  },
                                  "privateDnsZoneGroupName": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The name of the private DNS zone group to create if `privateDnsZoneResourceIds` were provided."
                                    }
                                  },
                                  "privateDnsZoneResourceIds": {
                                    "type": "array",
                                    "items": {
                                      "type": "string"
                                    },
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The private DNS zone groups to associate the private endpoint with. A DNS zone group can support up to 5 DNS zones."
                                    }
                                  },
                                  "isManualConnection": {
                                    "type": "bool",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. If Manual Private Link Connection is required."
                                    }
                                  },
                                  "manualConnectionRequestMessage": {
                                    "type": "string",
                                    "nullable": true,
                                    "maxLength": 140,
                                    "metadata": {
                                      "description": "Optional. A message passed to the owner of the remote resource with the manual connection request."
                                    }
                                  },
                                  "customDnsConfigs": {
                                    "type": "array",
                                    "items": {
                                      "type": "object",
                                      "properties": {
                                        "fqdn": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Required. Fqdn that resolves to private endpoint IP address."
                                          }
                                        },
                                        "ipAddresses": {
                                          "type": "array",
                                          "items": {
                                            "type": "string"
                                          },
                                          "metadata": {
                                            "description": "Required. A list of private IP addresses of the private endpoint."
                                          }
                                        }
                                      }
                                    },
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. Custom DNS configurations."
                                    }
                                  },
                                  "ipConfigurations": {
                                    "type": "array",
                                    "items": {
                                      "type": "object",
                                      "properties": {
                                        "name": {
                                          "type": "string",
                                          "metadata": {
                                            "description": "Required. The name of the resource that is unique within a resource group."
                                          }
                                        },
                                        "properties": {
                                          "type": "object",
                                          "properties": {
                                            "groupId": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "Required. The ID of a group obtained from the remote resource that this private endpoint should connect to."
                                              }
                                            },
                                            "memberName": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "Required. The member name of a group obtained from the remote resource that this private endpoint should connect to."
                                              }
                                            },
                                            "privateIPAddress": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "Required. A private IP address obtained from the private endpoint's subnet."
                                              }
                                            }
                                          },
                                          "metadata": {
                                            "description": "Required. Properties of private endpoint IP configurations."
                                          }
                                        }
                                      }
                                    },
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. A list of IP configurations of the private endpoint. This will be used to map to the First Party Service endpoints."
                                    }
                                  },
                                  "applicationSecurityGroupResourceIds": {
                                    "type": "array",
                                    "items": {
                                      "type": "string"
                                    },
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. Application security groups in which the private endpoint IP configuration is included."
                                    }
                                  },
                                  "customNetworkInterfaceName": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The custom name of the network interface attached to the private endpoint."
                                    }
                                  },
                                  "lock": {
                                    "$ref": "#/definitions/lockType",
                                    "metadata": {
                                      "description": "Optional. Specify the type of lock."
                                    }
                                  },
                                  "roleAssignments": {
                                    "$ref": "#/definitions/roleAssignmentType",
                                    "metadata": {
                                      "description": "Optional. Array of role assignments to create."
                                    }
                                  },
                                  "tags": {
                                    "type": "object",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. Tags to be applied on all resources/resource groups in this deployment."
                                    }
                                  },
                                  "enableTelemetry": {
                                    "type": "bool",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. Enable/Disable usage telemetry for module."
                                    }
                                  },
                                  "resourceGroupName": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. Specify if you want to deploy the Private Endpoint into a different resource group than the main resource."
                                    }
                                  }
                                }
                              },
                              "nullable": true
                            },
                            "lockType": {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Specify the name of lock."
                                  }
                                },
                                "kind": {
                                  "type": "string",
                                  "allowedValues": [
                                    "CanNotDelete",
                                    "None",
                                    "ReadOnly"
                                  ],
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Specify the type of lock."
                                  }
                                }
                              },
                              "nullable": true
                            },
                            "accessPoliciesType": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "tenantId": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The tenant ID that is used for authenticating requests to the key vault."
                                    }
                                  },
                                  "objectId": {
                                    "type": "string",
                                    "metadata": {
                                      "description": "Required. The object ID of a user, service principal or security group in the tenant for the vault."
                                    }
                                  },
                                  "applicationId": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. Application ID of the client making request on behalf of a principal."
                                    }
                                  },
                                  "permissions": {
                                    "type": "object",
                                    "properties": {
                                      "keys": {
                                        "type": "array",
                                        "allowedValues": [
                                          "all",
                                          "backup",
                                          "create",
                                          "decrypt",
                                          "delete",
                                          "encrypt",
                                          "get",
                                          "getrotationpolicy",
                                          "import",
                                          "list",
                                          "purge",
                                          "recover",
                                          "release",
                                          "restore",
                                          "rotate",
                                          "setrotationpolicy",
                                          "sign",
                                          "unwrapKey",
                                          "update",
                                          "verify",
                                          "wrapKey"
                                        ],
                                        "nullable": true,
                                        "metadata": {
                                          "description": "Optional. Permissions to keys."
                                        }
                                      },
                                      "secrets": {
                                        "type": "array",
                                        "allowedValues": [
                                          "all",
                                          "backup",
                                          "delete",
                                          "get",
                                          "list",
                                          "purge",
                                          "recover",
                                          "restore",
                                          "set"
                                        ],
                                        "nullable": true,
                                        "metadata": {
                                          "description": "Optional. Permissions to secrets."
                                        }
                                      },
                                      "certificates": {
                                        "type": "array",
                                        "allowedValues": [
                                          "all",
                                          "backup",
                                          "create",
                                          "delete",
                                          "deleteissuers",
                                          "get",
                                          "getissuers",
                                          "import",
                                          "list",
                                          "listissuers",
                                          "managecontacts",
                                          "manageissuers",
                                          "purge",
                                          "recover",
                                          "restore",
                                          "setissuers",
                                          "update"
                                        ],
                                        "nullable": true,
                                        "metadata": {
                                          "description": "Optional. Permissions to certificates."
                                        }
                                      },
                                      "storage": {
                                        "type": "array",
                                        "allowedValues": [
                                          "all",
                                          "backup",
                                          "delete",
                                          "deletesas",
                                          "get",
                                          "getsas",
                                          "list",
                                          "listsas",
                                          "purge",
                                          "recover",
                                          "regeneratekey",
                                          "restore",
                                          "set",
                                          "setsas",
                                          "update"
                                        ],
                                        "nullable": true,
                                        "metadata": {
                                          "description": "Optional. Permissions to storage accounts."
                                        }
                                      }
                                    },
                                    "metadata": {
                                      "description": "Required. Permissions the identity has for keys, secrets and certificates."
                                    }
                                  }
                                }
                              },
                              "nullable": true
                            },
                            "secretsType": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "name": {
                                    "type": "string",
                                    "metadata": {
                                      "description": "Required. The name of the secret."
                                    }
                                  },
                                  "tags": {
                                    "type": "object",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. Resource tags."
                                    }
                                  },
                                  "attributes": {
                                    "type": "object",
                                    "properties": {
                                      "enabled": {
                                        "type": "bool",
                                        "nullable": true,
                                        "metadata": {
                                          "description": "Optional. Defines whether the secret is enabled or disabled."
                                        }
                                      },
                                      "exp": {
                                        "type": "int",
                                        "nullable": true,
                                        "metadata": {
                                          "description": "Optional. Defines when the secret will become invalid. Defined in seconds since 1970-01-01T00:00:00Z."
                                        }
                                      },
                                      "nbf": {
                                        "type": "int",
                                        "nullable": true,
                                        "metadata": {
                                          "description": "Optional. If set, defines the date from which onwards the secret becomes valid. Defined in seconds since 1970-01-01T00:00:00Z."
                                        }
                                      }
                                    },
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. Contains attributes of the secret."
                                    }
                                  },
                                  "contentType": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The content type of the secret."
                                    }
                                  },
                                  "value": {
                                    "type": "securestring",
                                    "metadata": {
                                      "description": "Required. The value of the secret. NOTE: \"value\" will never be returned from the service, as APIs using this model are is intended for internal use in ARM deployments. Users should use the data-plane REST service for interaction with vault secrets."
                                    }
                                  },
                                  "roleAssignments": {
                                    "$ref": "#/definitions/roleAssignmentType",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. Array of role assignments to create."
                                    }
                                  }
                                }
                              },
                              "nullable": true
                            },
                            "keysType": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "name": {
                                    "type": "string",
                                    "metadata": {
                                      "description": "Required. The name of the key."
                                    }
                                  },
                                  "tags": {
                                    "type": "object",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. Resource tags."
                                    }
                                  },
                                  "attributes": {
                                    "type": "object",
                                    "properties": {
                                      "enabled": {
                                        "type": "bool",
                                        "nullable": true,
                                        "metadata": {
                                          "description": "Optional. Defines whether the key is enabled or disabled."
                                        }
                                      },
                                      "exp": {
                                        "type": "int",
                                        "nullable": true,
                                        "metadata": {
                                          "description": "Optional. Defines when the key will become invalid. Defined in seconds since 1970-01-01T00:00:00Z."
                                        }
                                      },
                                      "nbf": {
                                        "type": "int",
                                        "nullable": true,
                                        "metadata": {
                                          "description": "Optional. If set, defines the date from which onwards the key becomes valid. Defined in seconds since 1970-01-01T00:00:00Z."
                                        }
                                      }
                                    },
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. Contains attributes of the key."
                                    }
                                  },
                                  "curveName": {
                                    "type": "string",
                                    "allowedValues": [
                                      "P-256",
                                      "P-256K",
                                      "P-384",
                                      "P-521"
                                    ],
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The elliptic curve name. Only works if \"keySize\" equals \"EC\" or \"EC-HSM\". Default is \"P-256\"."
                                    }
                                  },
                                  "keyOps": {
                                    "type": "array",
                                    "allowedValues": [
                                      "decrypt",
                                      "encrypt",
                                      "import",
                                      "release",
                                      "sign",
                                      "unwrapKey",
                                      "verify",
                                      "wrapKey"
                                    ],
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The allowed operations on this key."
                                    }
                                  },
                                  "keySize": {
                                    "type": "int",
                                    "allowedValues": [
                                      2048,
                                      3072,
                                      4096
                                    ],
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The key size in bits. Only works if \"keySize\" equals \"RSA\" or \"RSA-HSM\". Default is \"4096\"."
                                    }
                                  },
                                  "kty": {
                                    "type": "string",
                                    "allowedValues": [
                                      "EC",
                                      "EC-HSM",
                                      "RSA",
                                      "RSA-HSM"
                                    ],
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The type of the key. Default is \"EC\"."
                                    }
                                  },
                                  "releasePolicy": {
                                    "type": "object",
                                    "properties": {
                                      "contentType": {
                                        "type": "string",
                                        "nullable": true,
                                        "metadata": {
                                          "description": "Optional. Content type and version of key release policy."
                                        }
                                      },
                                      "data": {
                                        "type": "string",
                                        "nullable": true,
                                        "metadata": {
                                          "description": "Optional. Blob encoding the policy rules under which the key can be released."
                                        }
                                      }
                                    },
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. Key release policy."
                                    }
                                  },
                                  "rotationPolicy": {
                                    "$ref": "#/definitions/rotationPoliciesType",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. Key rotation policy."
                                    }
                                  },
                                  "roleAssignments": {
                                    "$ref": "#/definitions/roleAssignmentType",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. Array of role assignments to create."
                                    }
                                  }
                                }
                              },
                              "nullable": true
                            },
                            "rotationPoliciesType": {
                              "type": "object",
                              "properties": {
                                "attributes": {
                                  "type": "object",
                                  "properties": {
                                    "expiryTime": {
                                      "type": "string",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. The expiration time for the new key version. It should be in ISO8601 format. Eg: \"P90D\", \"P1Y\"."
                                      }
                                    }
                                  },
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The attributes of key rotation policy."
                                  }
                                },
                                "lifetimeActions": {
                                  "type": "array",
                                  "items": {
                                    "type": "object",
                                    "properties": {
                                      "action": {
                                        "type": "object",
                                        "properties": {
                                          "type": {
                                            "type": "string",
                                            "allowedValues": [
                                              "Notify",
                                              "Rotate"
                                            ],
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. The type of action."
                                            }
                                          }
                                        },
                                        "nullable": true,
                                        "metadata": {
                                          "description": "Optional. The action of key rotation policy lifetimeAction."
                                        }
                                      },
                                      "trigger": {
                                        "type": "object",
                                        "properties": {
                                          "timeAfterCreate": {
                                            "type": "string",
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. The time duration after key creation to rotate the key. It only applies to rotate. It will be in ISO 8601 duration format. Eg: \"P90D\", \"P1Y\"."
                                            }
                                          },
                                          "timeBeforeExpiry": {
                                            "type": "string",
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. The time duration before key expiring to rotate or notify. It will be in ISO 8601 duration format. Eg: \"P90D\", \"P1Y\"."
                                            }
                                          }
                                        },
                                        "nullable": true,
                                        "metadata": {
                                          "description": "Optional. The trigger of key rotation policy lifetimeAction."
                                        }
                                      }
                                    }
                                  },
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The lifetimeActions for key rotation action."
                                  }
                                }
                              },
                              "nullable": true
                            }
                          },
                          "parameters": {
                            "name": {
                              "type": "string",
                              "maxLength": 24,
                              "metadata": {
                                "description": "Required. Name of the Key Vault. Must be globally unique."
                              }
                            },
                            "location": {
                              "type": "string",
                              "defaultValue": "[resourceGroup().location]",
                              "metadata": {
                                "description": "Optional. Location for all resources."
                              }
                            },
                            "accessPolicies": {
                              "$ref": "#/definitions/accessPoliciesType",
                              "metadata": {
                                "description": "Optional. All access policies to create."
                              }
                            },
                            "secrets": {
                              "$ref": "#/definitions/secretsType",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. All secrets to create."
                              }
                            },
                            "keys": {
                              "$ref": "#/definitions/keysType",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. All keys to create."
                              }
                            },
                            "enableVaultForDeployment": {
                              "type": "bool",
                              "defaultValue": true,
                              "metadata": {
                                "description": "Optional. Specifies if the vault is enabled for deployment by script or compute."
                              }
                            },
                            "enableVaultForTemplateDeployment": {
                              "type": "bool",
                              "defaultValue": true,
                              "metadata": {
                                "description": "Optional. Specifies if the vault is enabled for a template deployment."
                              }
                            },
                            "enableVaultForDiskEncryption": {
                              "type": "bool",
                              "defaultValue": true,
                              "metadata": {
                                "description": "Optional. Specifies if the azure platform has access to the vault for enabling disk encryption scenarios."
                              }
                            },
                            "enableSoftDelete": {
                              "type": "bool",
                              "defaultValue": true,
                              "metadata": {
                                "description": "Optional. Switch to enable/disable Key Vault's soft delete feature."
                              }
                            },
                            "softDeleteRetentionInDays": {
                              "type": "int",
                              "defaultValue": 90,
                              "metadata": {
                                "description": "Optional. softDelete data retention days. It accepts >=7 and <=90."
                              }
                            },
                            "enableRbacAuthorization": {
                              "type": "bool",
                              "defaultValue": true,
                              "metadata": {
                                "description": "Optional. Property that controls how data actions are authorized. When true, the key vault will use Role Based Access Control (RBAC) for authorization of data actions, and the access policies specified in vault properties will be ignored. When false, the key vault will use the access policies specified in vault properties, and any policy stored on Azure Resource Manager will be ignored. Note that management actions are always authorized with RBAC."
                              }
                            },
                            "createMode": {
                              "type": "string",
                              "defaultValue": "default",
                              "metadata": {
                                "description": "Optional. The vault's create mode to indicate whether the vault need to be recovered or not. - recover or default."
                              }
                            },
                            "enablePurgeProtection": {
                              "type": "bool",
                              "defaultValue": true,
                              "metadata": {
                                "description": "Optional. Provide 'true' to enable Key Vault's purge protection feature."
                              }
                            },
                            "sku": {
                              "type": "string",
                              "defaultValue": "premium",
                              "allowedValues": [
                                "premium",
                                "standard"
                              ],
                              "metadata": {
                                "description": "Optional. Specifies the SKU for the vault."
                              }
                            },
                            "networkAcls": {
                              "type": "object",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Rules governing the accessibility of the resource from specific network locations."
                              }
                            },
                            "publicNetworkAccess": {
                              "type": "string",
                              "defaultValue": "",
                              "allowedValues": [
                                "",
                                "Enabled",
                                "Disabled"
                              ],
                              "metadata": {
                                "description": "Optional. Whether or not public network access is allowed for this resource. For security reasons it should be disabled. If not specified, it will be disabled by default if private endpoints are set and networkAcls are not set."
                              }
                            },
                            "lock": {
                              "$ref": "#/definitions/lockType",
                              "metadata": {
                                "description": "Optional. The lock settings of the service."
                              }
                            },
                            "roleAssignments": {
                              "$ref": "#/definitions/roleAssignmentType",
                              "metadata": {
                                "description": "Optional. Array of role assignments to create."
                              }
                            },
                            "privateEndpoints": {
                              "$ref": "#/definitions/privateEndpointType",
                              "metadata": {
                                "description": "Optional. Configuration details for private endpoints. For security reasons, it is recommended to use private endpoints whenever possible."
                              }
                            },
                            "tags": {
                              "type": "object",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Resource tags."
                              }
                            },
                            "diagnosticSettings": {
                              "$ref": "#/definitions/diagnosticSettingType",
                              "metadata": {
                                "description": "Optional. The diagnostic settings of the service."
                              }
                            },
                            "enableTelemetry": {
                              "type": "bool",
                              "defaultValue": true,
                              "metadata": {
                                "description": "Optional. Enable/Disable usage telemetry for module."
                              }
                            }
                          },
                          "variables": {
                            "copy": [
                              {
                                "name": "formattedAccessPolicies",
                                "count": "[length(coalesce(parameters('accessPolicies'), createArray()))]",
                                "input": {
                                  "applicationId": "[coalesce(tryGet(coalesce(parameters('accessPolicies'), createArray())[copyIndex('formattedAccessPolicies')], 'applicationId'), '')]",
                                  "objectId": "[coalesce(parameters('accessPolicies'), createArray())[copyIndex('formattedAccessPolicies')].objectId]",
                                  "permissions": "[coalesce(parameters('accessPolicies'), createArray())[copyIndex('formattedAccessPolicies')].permissions]",
                                  "tenantId": "[coalesce(tryGet(coalesce(parameters('accessPolicies'), createArray())[copyIndex('formattedAccessPolicies')], 'tenantId'), tenant().tenantId)]"
                                }
                              }
                            ],
                            "builtInRoleNames": {
                              "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                              "Key Vault Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '00482a5a-887f-4fb3-b363-3b7fe8e74483')]",
                              "Key Vault Certificates Officer": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'a4417e6f-fecd-4de8-b567-7b0420556985')]",
                              "Key Vault Certificate User": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'db79e9a7-68ee-4b58-9aeb-b90e7c24fcba')]",
                              "Key Vault Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f25e0fa2-a7c8-4377-a976-54943a77a395')]",
                              "Key Vault Crypto Officer": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '14b46e9e-c2b7-41b4-b07b-48a6ebf60603')]",
                              "Key Vault Crypto Service Encryption User": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'e147488a-f6f5-4113-8e2d-b22465e65bf6')]",
                              "Key Vault Crypto User": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '12338af0-0e69-4776-bea7-57ae8d297424')]",
                              "Key Vault Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '21090545-7ca7-4776-b22c-e363652d74d2')]",
                              "Key Vault Secrets Officer": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b86a8fe4-44ce-4948-aee5-eccb2c155cd7')]",
                              "Key Vault Secrets User": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4633458b-17de-408a-b874-0445c86b69e6')]",
                              "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                              "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                              "Role Based Access Control Administrator (Preview)": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]",
                              "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]"
                            }
                          },
                          "resources": {
                            "avmTelemetry": {
                              "condition": "[parameters('enableTelemetry')]",
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2023-07-01",
                              "name": "[format('46d3xbcp.res.keyvault-vault.{0}.{1}', replace('0.6.1', '.', '-'), substring(uniqueString(deployment().name, parameters('location')), 0, 4))]",
                              "properties": {
                                "mode": "Incremental",
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "resources": [],
                                  "outputs": {
                                    "telemetry": {
                                      "type": "String",
                                      "value": "For more information, see https://aka.ms/avm/TelemetryInfo"
                                    }
                                  }
                                }
                              }
                            },
                            "keyVault": {
                              "type": "Microsoft.KeyVault/vaults",
                              "apiVersion": "2022-07-01",
                              "name": "[parameters('name')]",
                              "location": "[parameters('location')]",
                              "tags": "[parameters('tags')]",
                              "properties": {
                                "enabledForDeployment": "[parameters('enableVaultForDeployment')]",
                                "enabledForTemplateDeployment": "[parameters('enableVaultForTemplateDeployment')]",
                                "enabledForDiskEncryption": "[parameters('enableVaultForDiskEncryption')]",
                                "enableSoftDelete": "[parameters('enableSoftDelete')]",
                                "softDeleteRetentionInDays": "[parameters('softDeleteRetentionInDays')]",
                                "enableRbacAuthorization": "[parameters('enableRbacAuthorization')]",
                                "createMode": "[parameters('createMode')]",
                                "enablePurgeProtection": "[if(parameters('enablePurgeProtection'), parameters('enablePurgeProtection'), null())]",
                                "tenantId": "[subscription().tenantId]",
                                "accessPolicies": "[variables('formattedAccessPolicies')]",
                                "sku": {
                                  "name": "[parameters('sku')]",
                                  "family": "A"
                                },
                                "networkAcls": "[if(not(empty(coalesce(parameters('networkAcls'), createObject()))), createObject('bypass', tryGet(parameters('networkAcls'), 'bypass'), 'defaultAction', tryGet(parameters('networkAcls'), 'defaultAction'), 'virtualNetworkRules', coalesce(tryGet(parameters('networkAcls'), 'virtualNetworkRules'), createArray()), 'ipRules', coalesce(tryGet(parameters('networkAcls'), 'ipRules'), createArray())), null())]",
                                "publicNetworkAccess": "[if(not(empty(parameters('publicNetworkAccess'))), parameters('publicNetworkAccess'), if(and(not(empty(coalesce(parameters('privateEndpoints'), createArray()))), empty(coalesce(parameters('networkAcls'), createObject()))), 'Disabled', null()))]"
                              }
                            },
                            "keyVault_lock": {
                              "condition": "[and(not(empty(coalesce(parameters('lock'), createObject()))), not(equals(tryGet(parameters('lock'), 'kind'), 'None')))]",
                              "type": "Microsoft.Authorization/locks",
                              "apiVersion": "2020-05-01",
                              "scope": "[format('Microsoft.KeyVault/vaults/{0}', parameters('name'))]",
                              "name": "[coalesce(tryGet(parameters('lock'), 'name'), format('lock-{0}', parameters('name')))]",
                              "properties": {
                                "level": "[coalesce(tryGet(parameters('lock'), 'kind'), '')]",
                                "notes": "[if(equals(tryGet(parameters('lock'), 'kind'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot delete or modify the resource or child resources.')]"
                              },
                              "dependsOn": [
                                "keyVault"
                              ]
                            },
                            "keyVault_diagnosticSettings": {
                              "copy": {
                                "name": "keyVault_diagnosticSettings",
                                "count": "[length(coalesce(parameters('diagnosticSettings'), createArray()))]"
                              },
                              "type": "Microsoft.Insights/diagnosticSettings",
                              "apiVersion": "2021-05-01-preview",
                              "scope": "[format('Microsoft.KeyVault/vaults/{0}', parameters('name'))]",
                              "name": "[coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'name'), format('{0}-diagnosticSettings', parameters('name')))]",
                              "properties": {
                                "copy": [
                                  {
                                    "name": "metrics",
                                    "count": "[length(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics'))))]",
                                    "input": {
                                      "category": "[coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics')))[copyIndex('metrics')].category]",
                                      "enabled": "[coalesce(tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics')))[copyIndex('metrics')], 'enabled'), true())]",
                                      "timeGrain": null
                                    }
                                  },
                                  {
                                    "name": "logs",
                                    "count": "[length(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs'))))]",
                                    "input": {
                                      "categoryGroup": "[tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'categoryGroup')]",
                                      "category": "[tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'category')]",
                                      "enabled": "[coalesce(tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'enabled'), true())]"
                                    }
                                  }
                                ],
                                "storageAccountId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'storageAccountResourceId')]",
                                "workspaceId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'workspaceResourceId')]",
                                "eventHubAuthorizationRuleId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'eventHubAuthorizationRuleResourceId')]",
                                "eventHubName": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'eventHubName')]",
                                "marketplacePartnerId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'marketplacePartnerResourceId')]",
                                "logAnalyticsDestinationType": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logAnalyticsDestinationType')]"
                              },
                              "dependsOn": [
                                "keyVault"
                              ]
                            },
                            "keyVault_roleAssignments": {
                              "copy": {
                                "name": "keyVault_roleAssignments",
                                "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]"
                              },
                              "type": "Microsoft.Authorization/roleAssignments",
                              "apiVersion": "2022-04-01",
                              "scope": "[format('Microsoft.KeyVault/vaults/{0}', parameters('name'))]",
                              "name": "[guid(resourceId('Microsoft.KeyVault/vaults', parameters('name')), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].principalId, coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName)]",
                              "properties": {
                                "roleDefinitionId": "[if(contains(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName), variables('builtInRoleNames')[coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName], if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName)))]",
                                "principalId": "[coalesce(parameters('roleAssignments'), createArray())[copyIndex()].principalId]",
                                "description": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'description')]",
                                "principalType": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'principalType')]",
                                "condition": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'condition')]",
                                "conditionVersion": "[if(not(empty(tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                                "delegatedManagedIdentityResourceId": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
                              },
                              "dependsOn": [
                                "keyVault"
                              ]
                            },
                            "keyVault_accessPolicies": {
                              "condition": "[not(empty(parameters('accessPolicies')))]",
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "[format('{0}-KeyVault-AccessPolicies', uniqueString(deployment().name, parameters('location')))]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "keyVaultName": {
                                    "value": "[parameters('name')]"
                                  },
                                  "accessPolicies": {
                                    "value": "[parameters('accessPolicies')]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "languageVersion": "2.0",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.27.1.19265",
                                      "templateHash": "13379419349517171769"
                                    },
                                    "name": "Key Vault Access Policies",
                                    "description": "This module deploys a Key Vault Access Policy.",
                                    "owner": "Azure/module-maintainers"
                                  },
                                  "definitions": {
                                    "accessPoliciesType": {
                                      "type": "array",
                                      "items": {
                                        "type": "object",
                                        "properties": {
                                          "tenantId": {
                                            "type": "string",
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. The tenant ID that is used for authenticating requests to the key vault."
                                            }
                                          },
                                          "objectId": {
                                            "type": "string",
                                            "metadata": {
                                              "description": "Required. The object ID of a user, service principal or security group in the tenant for the vault."
                                            }
                                          },
                                          "applicationId": {
                                            "type": "string",
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. Application ID of the client making request on behalf of a principal."
                                            }
                                          },
                                          "permissions": {
                                            "type": "object",
                                            "properties": {
                                              "keys": {
                                                "type": "array",
                                                "allowedValues": [
                                                  "all",
                                                  "backup",
                                                  "create",
                                                  "decrypt",
                                                  "delete",
                                                  "encrypt",
                                                  "get",
                                                  "getrotationpolicy",
                                                  "import",
                                                  "list",
                                                  "purge",
                                                  "recover",
                                                  "release",
                                                  "restore",
                                                  "rotate",
                                                  "setrotationpolicy",
                                                  "sign",
                                                  "unwrapKey",
                                                  "update",
                                                  "verify",
                                                  "wrapKey"
                                                ],
                                                "nullable": true,
                                                "metadata": {
                                                  "description": "Optional. Permissions to keys."
                                                }
                                              },
                                              "secrets": {
                                                "type": "array",
                                                "allowedValues": [
                                                  "all",
                                                  "backup",
                                                  "delete",
                                                  "get",
                                                  "list",
                                                  "purge",
                                                  "recover",
                                                  "restore",
                                                  "set"
                                                ],
                                                "nullable": true,
                                                "metadata": {
                                                  "description": "Optional. Permissions to secrets."
                                                }
                                              },
                                              "certificates": {
                                                "type": "array",
                                                "allowedValues": [
                                                  "all",
                                                  "backup",
                                                  "create",
                                                  "delete",
                                                  "deleteissuers",
                                                  "get",
                                                  "getissuers",
                                                  "import",
                                                  "list",
                                                  "listissuers",
                                                  "managecontacts",
                                                  "manageissuers",
                                                  "purge",
                                                  "recover",
                                                  "restore",
                                                  "setissuers",
                                                  "update"
                                                ],
                                                "nullable": true,
                                                "metadata": {
                                                  "description": "Optional. Permissions to certificates."
                                                }
                                              },
                                              "storage": {
                                                "type": "array",
                                                "allowedValues": [
                                                  "all",
                                                  "backup",
                                                  "delete",
                                                  "deletesas",
                                                  "get",
                                                  "getsas",
                                                  "list",
                                                  "listsas",
                                                  "purge",
                                                  "recover",
                                                  "regeneratekey",
                                                  "restore",
                                                  "set",
                                                  "setsas",
                                                  "update"
                                                ],
                                                "nullable": true,
                                                "metadata": {
                                                  "description": "Optional. Permissions to storage accounts."
                                                }
                                              }
                                            },
                                            "metadata": {
                                              "description": "Required. Permissions the identity has for keys, secrets and certificates."
                                            }
                                          }
                                        }
                                      },
                                      "nullable": true
                                    }
                                  },
                                  "parameters": {
                                    "keyVaultName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Conditional. The name of the parent key vault. Required if the template is used in a standalone deployment."
                                      }
                                    },
                                    "accessPolicies": {
                                      "$ref": "#/definitions/accessPoliciesType",
                                      "metadata": {
                                        "description": "Optional. An array of 0 to 16 identities that have access to the key vault. All identities in the array must use the same tenant ID as the key vault's tenant ID."
                                      }
                                    }
                                  },
                                  "variables": {
                                    "copy": [
                                      {
                                        "name": "formattedAccessPolicies",
                                        "count": "[length(coalesce(parameters('accessPolicies'), createArray()))]",
                                        "input": {
                                          "applicationId": "[coalesce(tryGet(coalesce(parameters('accessPolicies'), createArray())[copyIndex('formattedAccessPolicies')], 'applicationId'), '')]",
                                          "objectId": "[coalesce(parameters('accessPolicies'), createArray())[copyIndex('formattedAccessPolicies')].objectId]",
                                          "permissions": "[coalesce(parameters('accessPolicies'), createArray())[copyIndex('formattedAccessPolicies')].permissions]",
                                          "tenantId": "[coalesce(tryGet(coalesce(parameters('accessPolicies'), createArray())[copyIndex('formattedAccessPolicies')], 'tenantId'), tenant().tenantId)]"
                                        }
                                      }
                                    ]
                                  },
                                  "resources": {
                                    "keyVault": {
                                      "existing": true,
                                      "type": "Microsoft.KeyVault/vaults",
                                      "apiVersion": "2022-07-01",
                                      "name": "[parameters('keyVaultName')]"
                                    },
                                    "policies": {
                                      "type": "Microsoft.KeyVault/vaults/accessPolicies",
                                      "apiVersion": "2022-07-01",
                                      "name": "[format('{0}/{1}', parameters('keyVaultName'), 'add')]",
                                      "properties": {
                                        "accessPolicies": "[variables('formattedAccessPolicies')]"
                                      },
                                      "dependsOn": [
                                        "keyVault"
                                      ]
                                    }
                                  },
                                  "outputs": {
                                    "resourceGroupName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the resource group the access policies assignment was created in."
                                      },
                                      "value": "[resourceGroup().name]"
                                    },
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the access policies assignment."
                                      },
                                      "value": "add"
                                    },
                                    "resourceId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource ID of the access policies assignment."
                                      },
                                      "value": "[resourceId('Microsoft.KeyVault/vaults/accessPolicies', parameters('keyVaultName'), 'add')]"
                                    }
                                  }
                                }
                              },
                              "dependsOn": [
                                "keyVault"
                              ]
                            },
                            "keyVault_secrets": {
                              "copy": {
                                "name": "keyVault_secrets",
                                "count": "[length(coalesce(parameters('secrets'), createArray()))]"
                              },
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "[format('{0}-KeyVault-Secret-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "name": {
                                    "value": "[coalesce(parameters('secrets'), createArray())[copyIndex()].name]"
                                  },
                                  "value": {
                                    "value": "[coalesce(parameters('secrets'), createArray())[copyIndex()].value]"
                                  },
                                  "keyVaultName": {
                                    "value": "[parameters('name')]"
                                  },
                                  "attributesEnabled": {
                                    "value": "[tryGet(coalesce(parameters('secrets'), createArray())[copyIndex()], 'attributesEnabled')]"
                                  },
                                  "attributesExp": {
                                    "value": "[tryGet(coalesce(parameters('secrets'), createArray())[copyIndex()], 'attributesExp')]"
                                  },
                                  "attributesNbf": {
                                    "value": "[tryGet(coalesce(parameters('secrets'), createArray())[copyIndex()], 'attributesNbf')]"
                                  },
                                  "contentType": {
                                    "value": "[tryGet(coalesce(parameters('secrets'), createArray())[copyIndex()], 'contentType')]"
                                  },
                                  "tags": {
                                    "value": "[coalesce(tryGet(coalesce(parameters('secrets'), createArray())[copyIndex()], 'tags'), parameters('tags'))]"
                                  },
                                  "roleAssignments": {
                                    "value": "[tryGet(coalesce(parameters('secrets'), createArray())[copyIndex()], 'roleAssignments')]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "languageVersion": "2.0",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.27.1.19265",
                                      "templateHash": "5636875941217257115"
                                    },
                                    "name": "Key Vault Secrets",
                                    "description": "This module deploys a Key Vault Secret.",
                                    "owner": "Azure/module-maintainers"
                                  },
                                  "definitions": {
                                    "roleAssignmentType": {
                                      "type": "array",
                                      "items": {
                                        "type": "object",
                                        "properties": {
                                          "roleDefinitionIdOrName": {
                                            "type": "string",
                                            "metadata": {
                                              "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                                            }
                                          },
                                          "principalId": {
                                            "type": "string",
                                            "metadata": {
                                              "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                                            }
                                          },
                                          "principalType": {
                                            "type": "string",
                                            "allowedValues": [
                                              "Device",
                                              "ForeignGroup",
                                              "Group",
                                              "ServicePrincipal",
                                              "User"
                                            ],
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. The principal type of the assigned principal ID."
                                            }
                                          },
                                          "description": {
                                            "type": "string",
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. The description of the role assignment."
                                            }
                                          },
                                          "condition": {
                                            "type": "string",
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                                            }
                                          },
                                          "conditionVersion": {
                                            "type": "string",
                                            "allowedValues": [
                                              "2.0"
                                            ],
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. Version of the condition."
                                            }
                                          },
                                          "delegatedManagedIdentityResourceId": {
                                            "type": "string",
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. The Resource Id of the delegated managed identity resource."
                                            }
                                          }
                                        }
                                      },
                                      "nullable": true
                                    }
                                  },
                                  "parameters": {
                                    "keyVaultName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Conditional. The name of the parent key vault. Required if the template is used in a standalone deployment."
                                      }
                                    },
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The name of the secret."
                                      }
                                    },
                                    "tags": {
                                      "type": "object",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. Resource tags."
                                      }
                                    },
                                    "attributesEnabled": {
                                      "type": "bool",
                                      "defaultValue": true,
                                      "metadata": {
                                        "description": "Optional. Determines whether the object is enabled."
                                      }
                                    },
                                    "attributesExp": {
                                      "type": "int",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. Expiry date in seconds since 1970-01-01T00:00:00Z. For security reasons, it is recommended to set an expiration date whenever possible."
                                      }
                                    },
                                    "attributesNbf": {
                                      "type": "int",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. Not before date in seconds since 1970-01-01T00:00:00Z."
                                      }
                                    },
                                    "contentType": {
                                      "type": "securestring",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. The content type of the secret."
                                      }
                                    },
                                    "value": {
                                      "type": "securestring",
                                      "metadata": {
                                        "description": "Required. The value of the secret. NOTE: \"value\" will never be returned from the service, as APIs using this model are is intended for internal use in ARM deployments. Users should use the data-plane REST service for interaction with vault secrets."
                                      }
                                    },
                                    "roleAssignments": {
                                      "$ref": "#/definitions/roleAssignmentType",
                                      "metadata": {
                                        "description": "Optional. Array of role assignments to create."
                                      }
                                    }
                                  },
                                  "variables": {
                                    "builtInRoleNames": {
                                      "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                                      "Key Vault Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '00482a5a-887f-4fb3-b363-3b7fe8e74483')]",
                                      "Key Vault Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f25e0fa2-a7c8-4377-a976-54943a77a395')]",
                                      "Key Vault Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '21090545-7ca7-4776-b22c-e363652d74d2')]",
                                      "Key Vault Secrets Officer": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b86a8fe4-44ce-4948-aee5-eccb2c155cd7')]",
                                      "Key Vault Secrets User": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4633458b-17de-408a-b874-0445c86b69e6')]",
                                      "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                                      "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                                      "Role Based Access Control Administrator (Preview)": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]",
                                      "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]"
                                    }
                                  },
                                  "resources": {
                                    "keyVault": {
                                      "existing": true,
                                      "type": "Microsoft.KeyVault/vaults",
                                      "apiVersion": "2022-07-01",
                                      "name": "[parameters('keyVaultName')]"
                                    },
                                    "secret": {
                                      "type": "Microsoft.KeyVault/vaults/secrets",
                                      "apiVersion": "2022-07-01",
                                      "name": "[format('{0}/{1}', parameters('keyVaultName'), parameters('name'))]",
                                      "tags": "[parameters('tags')]",
                                      "properties": {
                                        "contentType": "[parameters('contentType')]",
                                        "attributes": {
                                          "enabled": "[parameters('attributesEnabled')]",
                                          "exp": "[parameters('attributesExp')]",
                                          "nbf": "[parameters('attributesNbf')]"
                                        },
                                        "value": "[parameters('value')]"
                                      },
                                      "dependsOn": [
                                        "keyVault"
                                      ]
                                    },
                                    "secret_roleAssignments": {
                                      "copy": {
                                        "name": "secret_roleAssignments",
                                        "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]"
                                      },
                                      "type": "Microsoft.Authorization/roleAssignments",
                                      "apiVersion": "2022-04-01",
                                      "scope": "[format('Microsoft.KeyVault/vaults/{0}/secrets/{1}', parameters('keyVaultName'), parameters('name'))]",
                                      "name": "[guid(resourceId('Microsoft.KeyVault/vaults/secrets', parameters('keyVaultName'), parameters('name')), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].principalId, coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName)]",
                                      "properties": {
                                        "roleDefinitionId": "[if(contains(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName), variables('builtInRoleNames')[coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName], if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName)))]",
                                        "principalId": "[coalesce(parameters('roleAssignments'), createArray())[copyIndex()].principalId]",
                                        "description": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'description')]",
                                        "principalType": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'principalType')]",
                                        "condition": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'condition')]",
                                        "conditionVersion": "[if(not(empty(tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                                        "delegatedManagedIdentityResourceId": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
                                      },
                                      "dependsOn": [
                                        "secret"
                                      ]
                                    }
                                  },
                                  "outputs": {
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the secret."
                                      },
                                      "value": "[parameters('name')]"
                                    },
                                    "resourceId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource ID of the secret."
                                      },
                                      "value": "[resourceId('Microsoft.KeyVault/vaults/secrets', parameters('keyVaultName'), parameters('name'))]"
                                    },
                                    "resourceGroupName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the resource group the secret was created in."
                                      },
                                      "value": "[resourceGroup().name]"
                                    }
                                  }
                                }
                              },
                              "dependsOn": [
                                "keyVault"
                              ]
                            },
                            "keyVault_keys": {
                              "copy": {
                                "name": "keyVault_keys",
                                "count": "[length(coalesce(parameters('keys'), createArray()))]"
                              },
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "[format('{0}-KeyVault-Key-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "name": {
                                    "value": "[coalesce(parameters('keys'), createArray())[copyIndex()].name]"
                                  },
                                  "keyVaultName": {
                                    "value": "[parameters('name')]"
                                  },
                                  "attributesEnabled": {
                                    "value": "[tryGet(coalesce(parameters('keys'), createArray())[copyIndex()], 'attributesEnabled')]"
                                  },
                                  "attributesExp": {
                                    "value": "[tryGet(coalesce(parameters('keys'), createArray())[copyIndex()], 'attributesExp')]"
                                  },
                                  "attributesNbf": {
                                    "value": "[tryGet(coalesce(parameters('keys'), createArray())[copyIndex()], 'attributesNbf')]"
                                  },
                                  "curveName": "[if(and(not(equals(tryGet(coalesce(parameters('keys'), createArray())[copyIndex()], 'kty'), 'RSA')), not(equals(tryGet(coalesce(parameters('keys'), createArray())[copyIndex()], 'kty'), 'RSA-HSM'))), createObject('value', coalesce(tryGet(coalesce(parameters('keys'), createArray())[copyIndex()], 'curveName'), 'P-256')), createObject('value', null()))]",
                                  "keyOps": {
                                    "value": "[tryGet(coalesce(parameters('keys'), createArray())[copyIndex()], 'keyOps')]"
                                  },
                                  "keySize": "[if(or(equals(tryGet(coalesce(parameters('keys'), createArray())[copyIndex()], 'kty'), 'RSA'), equals(tryGet(coalesce(parameters('keys'), createArray())[copyIndex()], 'kty'), 'RSA-HSM')), createObject('value', coalesce(tryGet(coalesce(parameters('keys'), createArray())[copyIndex()], 'keySize'), 4096)), createObject('value', null()))]",
                                  "releasePolicy": {
                                    "value": "[coalesce(tryGet(coalesce(parameters('keys'), createArray())[copyIndex()], 'releasePolicy'), createObject())]"
                                  },
                                  "kty": {
                                    "value": "[coalesce(tryGet(coalesce(parameters('keys'), createArray())[copyIndex()], 'kty'), 'EC')]"
                                  },
                                  "tags": {
                                    "value": "[coalesce(tryGet(coalesce(parameters('keys'), createArray())[copyIndex()], 'tags'), parameters('tags'))]"
                                  },
                                  "roleAssignments": {
                                    "value": "[tryGet(coalesce(parameters('keys'), createArray())[copyIndex()], 'roleAssignments')]"
                                  },
                                  "rotationPolicy": {
                                    "value": "[tryGet(coalesce(parameters('keys'), createArray())[copyIndex()], 'rotationPolicy')]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "languageVersion": "2.0",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.27.1.19265",
                                      "templateHash": "2556304156587722941"
                                    },
                                    "name": "Key Vault Keys",
                                    "description": "This module deploys a Key Vault Key.",
                                    "owner": "Azure/module-maintainers"
                                  },
                                  "definitions": {
                                    "roleAssignmentType": {
                                      "type": "array",
                                      "items": {
                                        "type": "object",
                                        "properties": {
                                          "roleDefinitionIdOrName": {
                                            "type": "string",
                                            "metadata": {
                                              "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                                            }
                                          },
                                          "principalId": {
                                            "type": "string",
                                            "metadata": {
                                              "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                                            }
                                          },
                                          "principalType": {
                                            "type": "string",
                                            "allowedValues": [
                                              "Device",
                                              "ForeignGroup",
                                              "Group",
                                              "ServicePrincipal",
                                              "User"
                                            ],
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. The principal type of the assigned principal ID."
                                            }
                                          },
                                          "description": {
                                            "type": "string",
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. The description of the role assignment."
                                            }
                                          },
                                          "condition": {
                                            "type": "string",
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                                            }
                                          },
                                          "conditionVersion": {
                                            "type": "string",
                                            "allowedValues": [
                                              "2.0"
                                            ],
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. Version of the condition."
                                            }
                                          },
                                          "delegatedManagedIdentityResourceId": {
                                            "type": "string",
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. The Resource Id of the delegated managed identity resource."
                                            }
                                          }
                                        }
                                      },
                                      "nullable": true
                                    }
                                  },
                                  "parameters": {
                                    "keyVaultName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Conditional. The name of the parent key vault. Required if the template is used in a standalone deployment."
                                      }
                                    },
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The name of the key."
                                      }
                                    },
                                    "tags": {
                                      "type": "object",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. Resource tags."
                                      }
                                    },
                                    "attributesEnabled": {
                                      "type": "bool",
                                      "defaultValue": true,
                                      "metadata": {
                                        "description": "Optional. Determines whether the object is enabled."
                                      }
                                    },
                                    "attributesExp": {
                                      "type": "int",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. Expiry date in seconds since 1970-01-01T00:00:00Z. For security reasons, it is recommended to set an expiration date whenever possible."
                                      }
                                    },
                                    "attributesNbf": {
                                      "type": "int",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. Not before date in seconds since 1970-01-01T00:00:00Z."
                                      }
                                    },
                                    "curveName": {
                                      "type": "string",
                                      "defaultValue": "P-256",
                                      "allowedValues": [
                                        "P-256",
                                        "P-256K",
                                        "P-384",
                                        "P-521"
                                      ],
                                      "metadata": {
                                        "description": "Optional. The elliptic curve name."
                                      }
                                    },
                                    "keyOps": {
                                      "type": "array",
                                      "nullable": true,
                                      "allowedValues": [
                                        "decrypt",
                                        "encrypt",
                                        "import",
                                        "sign",
                                        "unwrapKey",
                                        "verify",
                                        "wrapKey"
                                      ],
                                      "metadata": {
                                        "description": "Optional. Array of JsonWebKeyOperation."
                                      }
                                    },
                                    "keySize": {
                                      "type": "int",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. The key size in bits. For example: 2048, 3072, or 4096 for RSA."
                                      }
                                    },
                                    "kty": {
                                      "type": "string",
                                      "defaultValue": "EC",
                                      "allowedValues": [
                                        "EC",
                                        "EC-HSM",
                                        "RSA",
                                        "RSA-HSM"
                                      ],
                                      "metadata": {
                                        "description": "Optional. The type of the key."
                                      }
                                    },
                                    "releasePolicy": {
                                      "type": "object",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. Key release policy."
                                      }
                                    },
                                    "roleAssignments": {
                                      "$ref": "#/definitions/roleAssignmentType",
                                      "metadata": {
                                        "description": "Optional. Array of role assignments to create."
                                      }
                                    },
                                    "rotationPolicy": {
                                      "type": "object",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. Key rotation policy properties object."
                                      }
                                    }
                                  },
                                  "variables": {
                                    "builtInRoleNames": {
                                      "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                                      "Key Vault Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '00482a5a-887f-4fb3-b363-3b7fe8e74483')]",
                                      "Key Vault Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f25e0fa2-a7c8-4377-a976-54943a77a395')]",
                                      "Key Vault Crypto Officer": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '14b46e9e-c2b7-41b4-b07b-48a6ebf60603')]",
                                      "Key Vault Crypto Service Encryption User": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'e147488a-f6f5-4113-8e2d-b22465e65bf6')]",
                                      "Key Vault Crypto User": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '12338af0-0e69-4776-bea7-57ae8d297424')]",
                                      "Key Vault Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '21090545-7ca7-4776-b22c-e363652d74d2')]",
                                      "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                                      "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                                      "Role Based Access Control Administrator (Preview)": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]",
                                      "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]"
                                    }
                                  },
                                  "resources": {
                                    "keyVault": {
                                      "existing": true,
                                      "type": "Microsoft.KeyVault/vaults",
                                      "apiVersion": "2022-07-01",
                                      "name": "[parameters('keyVaultName')]"
                                    },
                                    "key": {
                                      "type": "Microsoft.KeyVault/vaults/keys",
                                      "apiVersion": "2022-07-01",
                                      "name": "[format('{0}/{1}', parameters('keyVaultName'), parameters('name'))]",
                                      "tags": "[parameters('tags')]",
                                      "properties": {
                                        "attributes": {
                                          "enabled": "[parameters('attributesEnabled')]",
                                          "exp": "[parameters('attributesExp')]",
                                          "nbf": "[parameters('attributesNbf')]"
                                        },
                                        "curveName": "[parameters('curveName')]",
                                        "keyOps": "[parameters('keyOps')]",
                                        "keySize": "[parameters('keySize')]",
                                        "kty": "[parameters('kty')]",
                                        "rotationPolicy": "[coalesce(parameters('rotationPolicy'), createObject())]",
                                        "release_policy": "[coalesce(parameters('releasePolicy'), createObject())]"
                                      },
                                      "dependsOn": [
                                        "keyVault"
                                      ]
                                    },
                                    "key_roleAssignments": {
                                      "copy": {
                                        "name": "key_roleAssignments",
                                        "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]"
                                      },
                                      "type": "Microsoft.Authorization/roleAssignments",
                                      "apiVersion": "2022-04-01",
                                      "scope": "[format('Microsoft.KeyVault/vaults/{0}/keys/{1}', parameters('keyVaultName'), parameters('name'))]",
                                      "name": "[guid(resourceId('Microsoft.KeyVault/vaults/keys', parameters('keyVaultName'), parameters('name')), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].principalId, coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName)]",
                                      "properties": {
                                        "roleDefinitionId": "[if(contains(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName), variables('builtInRoleNames')[coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName], if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName)))]",
                                        "principalId": "[coalesce(parameters('roleAssignments'), createArray())[copyIndex()].principalId]",
                                        "description": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'description')]",
                                        "principalType": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'principalType')]",
                                        "condition": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'condition')]",
                                        "conditionVersion": "[if(not(empty(tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                                        "delegatedManagedIdentityResourceId": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
                                      },
                                      "dependsOn": [
                                        "key"
                                      ]
                                    }
                                  },
                                  "outputs": {
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the key."
                                      },
                                      "value": "[parameters('name')]"
                                    },
                                    "resourceId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource ID of the key."
                                      },
                                      "value": "[resourceId('Microsoft.KeyVault/vaults/keys', parameters('keyVaultName'), parameters('name'))]"
                                    },
                                    "resourceGroupName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the resource group the key was created in."
                                      },
                                      "value": "[resourceGroup().name]"
                                    }
                                  }
                                }
                              },
                              "dependsOn": [
                                "keyVault"
                              ]
                            },
                            "keyVault_privateEndpoints": {
                              "copy": {
                                "name": "keyVault_privateEndpoints",
                                "count": "[length(coalesce(parameters('privateEndpoints'), createArray()))]"
                              },
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "[format('{0}-keyVault-PrivateEndpoint-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
                              "resourceGroup": "[coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'resourceGroupName'), '')]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "name": {
                                    "value": "[coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'name'), format('pep-{0}-{1}-{2}', last(split(resourceId('Microsoft.KeyVault/vaults', parameters('name')), '/')), coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'service'), 'vault'), copyIndex()))]"
                                  },
                                  "privateLinkServiceConnections": "[if(not(equals(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'isManualConnection'), true())), createObject('value', createArray(createObject('name', coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'privateLinkServiceConnectionName'), format('{0}-{1}-{2}', last(split(resourceId('Microsoft.KeyVault/vaults', parameters('name')), '/')), coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'service'), 'vault'), copyIndex())), 'properties', createObject('privateLinkServiceId', resourceId('Microsoft.KeyVault/vaults', parameters('name')), 'groupIds', createArray(coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'service'), 'vault')))))), createObject('value', null()))]",
                                  "manualPrivateLinkServiceConnections": "[if(equals(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'isManualConnection'), true()), createObject('value', createArray(createObject('name', coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'privateLinkServiceConnectionName'), format('{0}-{1}-{2}', last(split(resourceId('Microsoft.KeyVault/vaults', parameters('name')), '/')), coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'service'), 'vault'), copyIndex())), 'properties', createObject('privateLinkServiceId', resourceId('Microsoft.KeyVault/vaults', parameters('name')), 'groupIds', createArray(coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'service'), 'vault')), 'requestMessage', coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'manualConnectionRequestMessage'), 'Manual approval required.'))))), createObject('value', null()))]",
                                  "subnetResourceId": {
                                    "value": "[coalesce(parameters('privateEndpoints'), createArray())[copyIndex()].subnetResourceId]"
                                  },
                                  "enableTelemetry": {
                                    "value": "[coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'enableTelemetry'), parameters('enableTelemetry'))]"
                                  },
                                  "location": {
                                    "value": "[coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'location'), reference(split(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()].subnetResourceId, '/subnets/')[0], '2020-06-01', 'Full').location)]"
                                  },
                                  "lock": {
                                    "value": "[coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'lock'), parameters('lock'))]"
                                  },
                                  "privateDnsZoneGroupName": {
                                    "value": "[tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'privateDnsZoneGroupName')]"
                                  },
                                  "privateDnsZoneResourceIds": {
                                    "value": "[tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'privateDnsZoneResourceIds')]"
                                  },
                                  "roleAssignments": {
                                    "value": "[tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'roleAssignments')]"
                                  },
                                  "tags": {
                                    "value": "[coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'tags'), parameters('tags'))]"
                                  },
                                  "customDnsConfigs": {
                                    "value": "[tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'customDnsConfigs')]"
                                  },
                                  "ipConfigurations": {
                                    "value": "[tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'ipConfigurations')]"
                                  },
                                  "applicationSecurityGroupResourceIds": {
                                    "value": "[tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'applicationSecurityGroupResourceIds')]"
                                  },
                                  "customNetworkInterfaceName": {
                                    "value": "[tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'customNetworkInterfaceName')]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "languageVersion": "2.0",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.25.53.49325",
                                      "templateHash": "4120048060064073955"
                                    },
                                    "name": "Private Endpoints",
                                    "description": "This module deploys a Private Endpoint.",
                                    "owner": "Azure/module-maintainers"
                                  },
                                  "definitions": {
                                    "roleAssignmentType": {
                                      "type": "array",
                                      "items": {
                                        "type": "object",
                                        "properties": {
                                          "roleDefinitionIdOrName": {
                                            "type": "string",
                                            "metadata": {
                                              "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                                            }
                                          },
                                          "principalId": {
                                            "type": "string",
                                            "metadata": {
                                              "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                                            }
                                          },
                                          "principalType": {
                                            "type": "string",
                                            "allowedValues": [
                                              "Device",
                                              "ForeignGroup",
                                              "Group",
                                              "ServicePrincipal",
                                              "User"
                                            ],
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. The principal type of the assigned principal ID."
                                            }
                                          },
                                          "description": {
                                            "type": "string",
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. The description of the role assignment."
                                            }
                                          },
                                          "condition": {
                                            "type": "string",
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                                            }
                                          },
                                          "conditionVersion": {
                                            "type": "string",
                                            "allowedValues": [
                                              "2.0"
                                            ],
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. Version of the condition."
                                            }
                                          },
                                          "delegatedManagedIdentityResourceId": {
                                            "type": "string",
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. The Resource Id of the delegated managed identity resource."
                                            }
                                          }
                                        }
                                      },
                                      "nullable": true
                                    },
                                    "lockType": {
                                      "type": "object",
                                      "properties": {
                                        "name": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. Specify the name of lock."
                                          }
                                        },
                                        "kind": {
                                          "type": "string",
                                          "allowedValues": [
                                            "CanNotDelete",
                                            "None",
                                            "ReadOnly"
                                          ],
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. Specify the type of lock."
                                          }
                                        }
                                      },
                                      "nullable": true
                                    },
                                    "ipConfigurationsType": {
                                      "type": "array",
                                      "items": {
                                        "type": "object",
                                        "properties": {
                                          "name": {
                                            "type": "string",
                                            "metadata": {
                                              "description": "Required. The name of the resource that is unique within a resource group."
                                            }
                                          },
                                          "properties": {
                                            "type": "object",
                                            "properties": {
                                              "groupId": {
                                                "type": "string",
                                                "metadata": {
                                                  "description": "Required. The ID of a group obtained from the remote resource that this private endpoint should connect to."
                                                }
                                              },
                                              "memberName": {
                                                "type": "string",
                                                "metadata": {
                                                  "description": "Required. The member name of a group obtained from the remote resource that this private endpoint should connect to."
                                                }
                                              },
                                              "privateIPAddress": {
                                                "type": "string",
                                                "metadata": {
                                                  "description": "Required. A private IP address obtained from the private endpoint's subnet."
                                                }
                                              }
                                            },
                                            "metadata": {
                                              "description": "Required. Properties of private endpoint IP configurations."
                                            }
                                          }
                                        }
                                      },
                                      "nullable": true
                                    },
                                    "manualPrivateLinkServiceConnectionsType": {
                                      "type": "array",
                                      "items": {
                                        "type": "object",
                                        "properties": {
                                          "name": {
                                            "type": "string",
                                            "metadata": {
                                              "description": "Required. The name of the private link service connection."
                                            }
                                          },
                                          "properties": {
                                            "type": "object",
                                            "properties": {
                                              "groupIds": {
                                                "type": "array",
                                                "metadata": {
                                                  "description": "Required. The ID of a group obtained from the remote resource that this private endpoint should connect to."
                                                }
                                              },
                                              "privateLinkServiceId": {
                                                "type": "string",
                                                "metadata": {
                                                  "description": "Required. The resource id of private link service."
                                                }
                                              },
                                              "requestMessage": {
                                                "type": "string",
                                                "metadata": {
                                                  "description": "Optional. A message passed to the owner of the remote resource with this connection request. Restricted to 140 chars."
                                                }
                                              }
                                            },
                                            "metadata": {
                                              "description": "Required. Properties of private link service connection."
                                            }
                                          }
                                        }
                                      },
                                      "nullable": true
                                    },
                                    "privateLinkServiceConnectionsType": {
                                      "type": "array",
                                      "items": {
                                        "type": "object",
                                        "properties": {
                                          "name": {
                                            "type": "string",
                                            "metadata": {
                                              "description": "Required. The name of the private link service connection."
                                            }
                                          },
                                          "properties": {
                                            "type": "object",
                                            "properties": {
                                              "groupIds": {
                                                "type": "array",
                                                "metadata": {
                                                  "description": "Required. The ID of a group obtained from the remote resource that this private endpoint should connect to."
                                                }
                                              },
                                              "privateLinkServiceId": {
                                                "type": "string",
                                                "metadata": {
                                                  "description": "Required. The resource id of private link service."
                                                }
                                              },
                                              "requestMessage": {
                                                "type": "string",
                                                "nullable": true,
                                                "metadata": {
                                                  "description": "Optional. A message passed to the owner of the remote resource with this connection request. Restricted to 140 chars."
                                                }
                                              }
                                            },
                                            "metadata": {
                                              "description": "Required. Properties of private link service connection."
                                            }
                                          }
                                        }
                                      },
                                      "nullable": true
                                    },
                                    "customDnsConfigType": {
                                      "type": "array",
                                      "items": {
                                        "type": "object",
                                        "properties": {
                                          "fqdn": {
                                            "type": "string",
                                            "metadata": {
                                              "description": "Required. Fqdn that resolves to private endpoint IP address."
                                            }
                                          },
                                          "ipAddresses": {
                                            "type": "array",
                                            "items": {
                                              "type": "string"
                                            },
                                            "metadata": {
                                              "description": "Required. A list of private IP addresses of the private endpoint."
                                            }
                                          }
                                        }
                                      },
                                      "nullable": true
                                    }
                                  },
                                  "parameters": {
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. Name of the private endpoint resource to create."
                                      }
                                    },
                                    "subnetResourceId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. Resource ID of the subnet where the endpoint needs to be created."
                                      }
                                    },
                                    "applicationSecurityGroupResourceIds": {
                                      "type": "array",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. Application security groups in which the private endpoint IP configuration is included."
                                      }
                                    },
                                    "customNetworkInterfaceName": {
                                      "type": "string",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. The custom name of the network interface attached to the private endpoint."
                                      }
                                    },
                                    "ipConfigurations": {
                                      "$ref": "#/definitions/ipConfigurationsType",
                                      "metadata": {
                                        "description": "Optional. A list of IP configurations of the private endpoint. This will be used to map to the First Party Service endpoints."
                                      }
                                    },
                                    "privateDnsZoneGroupName": {
                                      "type": "string",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. The name of the private DNS zone group to create if `privateDnsZoneResourceIds` were provided."
                                      }
                                    },
                                    "privateDnsZoneResourceIds": {
                                      "type": "array",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. The private DNS zone groups to associate the private endpoint. A DNS zone group can support up to 5 DNS zones."
                                      }
                                    },
                                    "location": {
                                      "type": "string",
                                      "defaultValue": "[resourceGroup().location]",
                                      "metadata": {
                                        "description": "Optional. Location for all Resources."
                                      }
                                    },
                                    "lock": {
                                      "$ref": "#/definitions/lockType",
                                      "metadata": {
                                        "description": "Optional. The lock settings of the service."
                                      }
                                    },
                                    "roleAssignments": {
                                      "$ref": "#/definitions/roleAssignmentType",
                                      "metadata": {
                                        "description": "Optional. Array of role assignments to create."
                                      }
                                    },
                                    "tags": {
                                      "type": "object",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. Tags to be applied on all resources/resource groups in this deployment."
                                      }
                                    },
                                    "customDnsConfigs": {
                                      "$ref": "#/definitions/customDnsConfigType",
                                      "metadata": {
                                        "description": "Optional. Custom DNS configurations."
                                      }
                                    },
                                    "manualPrivateLinkServiceConnections": {
                                      "$ref": "#/definitions/manualPrivateLinkServiceConnectionsType",
                                      "metadata": {
                                        "description": "Optional. A grouping of information about the connection to the remote resource. Used when the network admin does not have access to approve connections to the remote resource."
                                      }
                                    },
                                    "privateLinkServiceConnections": {
                                      "$ref": "#/definitions/privateLinkServiceConnectionsType",
                                      "metadata": {
                                        "description": "Optional. A grouping of information about the connection to the remote resource."
                                      }
                                    },
                                    "enableTelemetry": {
                                      "type": "bool",
                                      "defaultValue": true,
                                      "metadata": {
                                        "description": "Optional. Enable/Disable usage telemetry for module."
                                      }
                                    }
                                  },
                                  "variables": {
                                    "builtInRoleNames": {
                                      "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                                      "DNS Resolver Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '0f2ebee7-ffd4-4fc0-b3b7-664099fdad5d')]",
                                      "DNS Zone Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'befefa01-2a29-4197-83a8-272ff33ce314')]",
                                      "Domain Services Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'eeaeda52-9324-47f6-8069-5d5bade478b2')]",
                                      "Domain Services Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '361898ef-9ed1-48c2-849c-a832951106bb')]",
                                      "Network Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4d97b98b-1d4f-4787-a291-c67834d212e7')]",
                                      "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                                      "Private DNS Zone Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b12aa53e-6015-4669-85d0-8515ebb3ae7f')]",
                                      "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                                      "Role Based Access Control Administrator (Preview)": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]"
                                    }
                                  },
                                  "resources": {
                                    "avmTelemetry": {
                                      "condition": "[parameters('enableTelemetry')]",
                                      "type": "Microsoft.Resources/deployments",
                                      "apiVersion": "2023-07-01",
                                      "name": "[format('46d3xbcp.res.network-privateendpoint.{0}.{1}', replace('0.4.1', '.', '-'), substring(uniqueString(deployment().name, parameters('location')), 0, 4))]",
                                      "properties": {
                                        "mode": "Incremental",
                                        "template": {
                                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                          "contentVersion": "1.0.0.0",
                                          "resources": [],
                                          "outputs": {
                                            "telemetry": {
                                              "type": "String",
                                              "value": "For more information, see https://aka.ms/avm/TelemetryInfo"
                                            }
                                          }
                                        }
                                      }
                                    },
                                    "privateEndpoint": {
                                      "type": "Microsoft.Network/privateEndpoints",
                                      "apiVersion": "2023-04-01",
                                      "name": "[parameters('name')]",
                                      "location": "[parameters('location')]",
                                      "tags": "[parameters('tags')]",
                                      "properties": {
                                        "copy": [
                                          {
                                            "name": "applicationSecurityGroups",
                                            "count": "[length(coalesce(parameters('applicationSecurityGroupResourceIds'), createArray()))]",
                                            "input": {
                                              "id": "[coalesce(parameters('applicationSecurityGroupResourceIds'), createArray())[copyIndex('applicationSecurityGroups')]]"
                                            }
                                          }
                                        ],
                                        "customDnsConfigs": "[coalesce(parameters('customDnsConfigs'), createArray())]",
                                        "customNetworkInterfaceName": "[coalesce(parameters('customNetworkInterfaceName'), '')]",
                                        "ipConfigurations": "[coalesce(parameters('ipConfigurations'), createArray())]",
                                        "manualPrivateLinkServiceConnections": "[coalesce(parameters('manualPrivateLinkServiceConnections'), createArray())]",
                                        "privateLinkServiceConnections": "[coalesce(parameters('privateLinkServiceConnections'), createArray())]",
                                        "subnet": {
                                          "id": "[parameters('subnetResourceId')]"
                                        }
                                      }
                                    },
                                    "privateEndpoint_lock": {
                                      "condition": "[and(not(empty(coalesce(parameters('lock'), createObject()))), not(equals(tryGet(parameters('lock'), 'kind'), 'None')))]",
                                      "type": "Microsoft.Authorization/locks",
                                      "apiVersion": "2020-05-01",
                                      "scope": "[format('Microsoft.Network/privateEndpoints/{0}', parameters('name'))]",
                                      "name": "[coalesce(tryGet(parameters('lock'), 'name'), format('lock-{0}', parameters('name')))]",
                                      "properties": {
                                        "level": "[coalesce(tryGet(parameters('lock'), 'kind'), '')]",
                                        "notes": "[if(equals(tryGet(parameters('lock'), 'kind'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot delete or modify the resource or child resources.')]"
                                      },
                                      "dependsOn": [
                                        "privateEndpoint"
                                      ]
                                    },
                                    "privateEndpoint_roleAssignments": {
                                      "copy": {
                                        "name": "privateEndpoint_roleAssignments",
                                        "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]"
                                      },
                                      "type": "Microsoft.Authorization/roleAssignments",
                                      "apiVersion": "2022-04-01",
                                      "scope": "[format('Microsoft.Network/privateEndpoints/{0}', parameters('name'))]",
                                      "name": "[guid(resourceId('Microsoft.Network/privateEndpoints', parameters('name')), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].principalId, coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName)]",
                                      "properties": {
                                        "roleDefinitionId": "[if(contains(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName), variables('builtInRoleNames')[coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName], if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName)))]",
                                        "principalId": "[coalesce(parameters('roleAssignments'), createArray())[copyIndex()].principalId]",
                                        "description": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'description')]",
                                        "principalType": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'principalType')]",
                                        "condition": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'condition')]",
                                        "conditionVersion": "[if(not(empty(tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                                        "delegatedManagedIdentityResourceId": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
                                      },
                                      "dependsOn": [
                                        "privateEndpoint"
                                      ]
                                    },
                                    "privateEndpoint_privateDnsZoneGroup": {
                                      "condition": "[not(empty(parameters('privateDnsZoneResourceIds')))]",
                                      "type": "Microsoft.Resources/deployments",
                                      "apiVersion": "2022-09-01",
                                      "name": "[format('{0}-PrivateEndpoint-PrivateDnsZoneGroup', uniqueString(deployment().name))]",
                                      "properties": {
                                        "expressionEvaluationOptions": {
                                          "scope": "inner"
                                        },
                                        "mode": "Incremental",
                                        "parameters": {
                                          "name": {
                                            "value": "[coalesce(parameters('privateDnsZoneGroupName'), 'default')]"
                                          },
                                          "privateDNSResourceIds": {
                                            "value": "[coalesce(parameters('privateDnsZoneResourceIds'), createArray())]"
                                          },
                                          "privateEndpointName": {
                                            "value": "[parameters('name')]"
                                          }
                                        },
                                        "template": {
                                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                          "contentVersion": "1.0.0.0",
                                          "metadata": {
                                            "_generator": {
                                              "name": "bicep",
                                              "version": "0.25.53.49325",
                                              "templateHash": "11244630631275470040"
                                            },
                                            "name": "Private Endpoint Private DNS Zone Groups",
                                            "description": "This module deploys a Private Endpoint Private DNS Zone Group.",
                                            "owner": "Azure/module-maintainers"
                                          },
                                          "parameters": {
                                            "privateEndpointName": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "Conditional. The name of the parent private endpoint. Required if the template is used in a standalone deployment."
                                              }
                                            },
                                            "privateDNSResourceIds": {
                                              "type": "array",
                                              "minLength": 1,
                                              "maxLength": 5,
                                              "metadata": {
                                                "description": "Required. Array of private DNS zone resource IDs. A DNS zone group can support up to 5 DNS zones."
                                              }
                                            },
                                            "name": {
                                              "type": "string",
                                              "defaultValue": "default",
                                              "metadata": {
                                                "description": "Optional. The name of the private DNS zone group."
                                              }
                                            }
                                          },
                                          "variables": {
                                            "copy": [
                                              {
                                                "name": "privateDnsZoneConfigs",
                                                "count": "[length(parameters('privateDNSResourceIds'))]",
                                                "input": {
                                                  "name": "[last(split(parameters('privateDNSResourceIds')[copyIndex('privateDnsZoneConfigs')], '/'))]",
                                                  "properties": {
                                                    "privateDnsZoneId": "[parameters('privateDNSResourceIds')[copyIndex('privateDnsZoneConfigs')]]"
                                                  }
                                                }
                                              }
                                            ]
                                          },
                                          "resources": [
                                            {
                                              "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
                                              "apiVersion": "2023-04-01",
                                              "name": "[format('{0}/{1}', parameters('privateEndpointName'), parameters('name'))]",
                                              "properties": {
                                                "privateDnsZoneConfigs": "[variables('privateDnsZoneConfigs')]"
                                              }
                                            }
                                          ],
                                          "outputs": {
                                            "name": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "The name of the private endpoint DNS zone group."
                                              },
                                              "value": "[parameters('name')]"
                                            },
                                            "resourceId": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "The resource ID of the private endpoint DNS zone group."
                                              },
                                              "value": "[resourceId('Microsoft.Network/privateEndpoints/privateDnsZoneGroups', parameters('privateEndpointName'), parameters('name'))]"
                                            },
                                            "resourceGroupName": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "The resource group the private endpoint DNS zone group was deployed into."
                                              },
                                              "value": "[resourceGroup().name]"
                                            }
                                          }
                                        }
                                      },
                                      "dependsOn": [
                                        "privateEndpoint"
                                      ]
                                    }
                                  },
                                  "outputs": {
                                    "resourceGroupName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource group the private endpoint was deployed into."
                                      },
                                      "value": "[resourceGroup().name]"
                                    },
                                    "resourceId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource ID of the private endpoint."
                                      },
                                      "value": "[resourceId('Microsoft.Network/privateEndpoints', parameters('name'))]"
                                    },
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the private endpoint."
                                      },
                                      "value": "[parameters('name')]"
                                    },
                                    "location": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The location the resource was deployed into."
                                      },
                                      "value": "[reference('privateEndpoint', '2023-04-01', 'full').location]"
                                    },
                                    "groupId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The group Id for the private endpoint Group."
                                      },
                                      "value": "[if(not(empty(reference('privateEndpoint').manualPrivateLinkServiceConnections)), reference('privateEndpoint').manualPrivateLinkServiceConnections[0].properties.groupIds[0], reference('privateEndpoint').privateLinkServiceConnections[0].properties.groupIds[0])]"
                                    }
                                  }
                                }
                              },
                              "dependsOn": [
                                "keyVault"
                              ]
                            }
                          },
                          "outputs": {
                            "resourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource ID of the key vault."
                              },
                              "value": "[resourceId('Microsoft.KeyVault/vaults', parameters('name'))]"
                            },
                            "resourceGroupName": {
                              "type": "string",
                              "metadata": {
                                "description": "The name of the resource group the key vault was created in."
                              },
                              "value": "[resourceGroup().name]"
                            },
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "The name of the key vault."
                              },
                              "value": "[parameters('name')]"
                            },
                            "uri": {
                              "type": "string",
                              "metadata": {
                                "description": "The URI of the key vault."
                              },
                              "value": "[reference('keyVault').vaultUri]"
                            },
                            "location": {
                              "type": "string",
                              "metadata": {
                                "description": "The location the resource was deployed into."
                              },
                              "value": "[reference('keyVault', '2022-07-01', 'full').location]"
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Resources/deployments', format('keyvaultDnsZoneDeployment-{0}', uniqueString(resourceGroup().id)))]"
                      ]
                    }
                  ],
                  "outputs": {
                    "keyVaultId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the key vault."
                      },
                      "value": "[reference(resourceId('Microsoft.Resources/deployments', format('vault-{0}', uniqueString(resourceGroup().id))), '2022-09-01').outputs.resourceId.value]"
                    },
                    "keyVaultName": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the key vault."
                      },
                      "value": "[reference(resourceId('Microsoft.Resources/deployments', format('vault-{0}', uniqueString(resourceGroup().id))), '2022-09-01').outputs.name.value]"
                    }
                  }
                }
              },
              "metadata": {
                "description": "Azure Key Vault used to hold items like TLS certs and application secrets that your workload will need."
              }
            }
          },
          "outputs": {
            "keyVaultResourceId": {
              "type": "string",
              "metadata": {
                "description": "The resource ID of the Azure Key Vault."
              },
              "value": "[reference('keyVault').outputs.keyVaultId.value]"
            },
            "keyVaultName": {
              "type": "string",
              "metadata": {
                "description": "The name of the Azure Key Vault."
              },
              "value": "[reference('keyVault').outputs.keyVaultName.value]"
            }
          }
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('resourceGroupName')), 'Microsoft.Resources/deployments', 'NamingDeployment')]",
        "[subscriptionResourceId('Microsoft.Resources/deployments', format('{0}-spokedeployment', uniqueString(deployment().name, parameters('location'))))]"
      ]
    }
  ],
  "outputs": {
    "spokeResourceGroupName": {
      "type": "string",
      "metadata": {
        "description": "The name of the Spoke resource group."
      },
      "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('{0}-deployment', uniqueString(deployment().name, parameters('location'), variables('resourceGroupName')))), '2022-09-01').outputs.name.value]"
    },
    "spokeVNetResourceId": {
      "type": "string",
      "metadata": {
        "description": "The  resource ID of the Spoke Virtual Network."
      },
      "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('{0}-spokedeployment', uniqueString(deployment().name, parameters('location')))), '2022-09-01').outputs.vnetSpokeId.value]"
    },
    "spokeVnetName": {
      "type": "string",
      "metadata": {
        "description": "The name of the Spoke Virtual Network."
      },
      "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('{0}-spokedeployment', uniqueString(deployment().name, parameters('location')))), '2022-09-01').outputs.vnetSpokeName.value]"
    },
    "keyVaultResourceId": {
      "type": "string",
      "metadata": {
        "description": "The resource ID of the key vault."
      },
      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('{0}-supportingServicesDeployment', uniqueString(deployment().name, parameters('location')))), '2022-09-01').outputs.keyVaultResourceId.value]"
    },
    "keyVaultName": {
      "type": "string",
      "metadata": {
        "description": "The name of the Azure key vault."
      },
      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('{0}-supportingServicesDeployment', uniqueString(deployment().name, parameters('location')))), '2022-09-01').outputs.keyVaultName.value]"
    }
  }
}