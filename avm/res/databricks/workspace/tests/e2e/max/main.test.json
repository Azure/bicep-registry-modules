{
  "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "_generator": {
      "name": "bicep",
      "version": "0.29.47.4906",
      "templateHash": "2842482749679965523"
    },
    "name": "Using large parameter set",
    "description": "This instance deploys the module with most of its features enabled."
  },
  "parameters": {
    "resourceGroupName": {
      "type": "string",
      "defaultValue": "[format('dep-{0}-databricks.workspaces-{1}-rg', parameters('namePrefix'), parameters('serviceShort'))]",
      "maxLength": 90,
      "metadata": {
        "description": "Optional. The name of the resource group to deploy for testing purposes."
      }
    },
    "resourceLocation": {
      "type": "string",
      "defaultValue": "[deployment().location]",
      "metadata": {
        "description": "Optional. The location to deploy resources to."
      }
    },
    "serviceShort": {
      "type": "string",
      "defaultValue": "dwmax",
      "metadata": {
        "description": "Optional. A short identifier for the kind of deployment. Should be kept short to not run into resource-name length-constraints."
      }
    },
    "baseTime": {
      "type": "string",
      "defaultValue": "[utcNow('u')]",
      "metadata": {
        "description": "Generated. Used as a basis for unique resource names."
      }
    },
    "namePrefix": {
      "type": "string",
      "defaultValue": "cat3",
      "metadata": {
        "description": "Optional. A token to inject into the name of each resource."
      }
    }
  },
  "resources": [
    {
      "type": "Microsoft.Resources/resourceGroups",
      "apiVersion": "2021-04-01",
      "name": "[parameters('resourceGroupName')]",
      "location": "[parameters('resourceLocation')]"
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('{0}-nestedDependencies', uniqueString(deployment().name, parameters('resourceLocation')))]",
      "resourceGroup": "[parameters('resourceGroupName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "managedIdentityName": {
            "value": "[format('dep-{0}-msi-{1}', parameters('namePrefix'), parameters('serviceShort'))]"
          },
          "location": {
            "value": "[parameters('resourceLocation')]"
          },
          "amlWorkspaceName": {
            "value": "[format('dep-{0}-aml-{1}', parameters('namePrefix'), parameters('serviceShort'))]"
          },
          "applicationInsightsName": {
            "value": "[format('dep-{0}-appi-{1}', parameters('namePrefix'), parameters('serviceShort'))]"
          },
          "logAnalyticsWorkspaceName": {
            "value": "[format('dep-{0}-law-{1}', parameters('namePrefix'), parameters('serviceShort'))]"
          },
          "loadBalancerName": {
            "value": "[format('dep-{0}-lb-{1}', parameters('namePrefix'), parameters('serviceShort'))]"
          },
          "storageAccountName": {
            "value": "[format('dep{0}sa{1}', parameters('namePrefix'), parameters('serviceShort'))]"
          },
          "virtualNetworkName": {
            "value": "[format('dep-{0}-vnet-{1}', parameters('namePrefix'), parameters('serviceShort'))]"
          },
          "networkSecurityGroupName": {
            "value": "[format('dep-{0}-nsg-{1}', parameters('namePrefix'), parameters('serviceShort'))]"
          },
          "databricksApplicationObjectId": {
            "value": "711330f9-cfad-4b10-a462-d82faa92027d"
          },
          "keyVaultDiskName": {
            "value": "[format('dep-{0}-kve-{1}-{2}', parameters('namePrefix'), parameters('serviceShort'), substring(uniqueString(parameters('baseTime')), 0, 3))]"
          },
          "keyVaultName": {
            "value": "[format('dep-{0}-kv-{1}-{2}', parameters('namePrefix'), parameters('serviceShort'), substring(uniqueString(parameters('baseTime')), 0, 3))]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.29.47.4906",
              "templateHash": "2936771902595639487"
            }
          },
          "parameters": {
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]",
              "metadata": {
                "description": "Optional. The location to deploy to."
              }
            },
            "managedIdentityName": {
              "type": "string",
              "metadata": {
                "description": "Required. The name of the Managed Identity to create."
              }
            },
            "keyVaultName": {
              "type": "string",
              "metadata": {
                "description": "Required. The name of the Key Vault to create."
              }
            },
            "keyVaultDiskName": {
              "type": "string",
              "metadata": {
                "description": "Required. The name of the Key Vault for Disk Encryption to create."
              }
            },
            "amlWorkspaceName": {
              "type": "string",
              "metadata": {
                "description": "Required. The name of the Azure Machine Learning Workspace to create."
              }
            },
            "loadBalancerName": {
              "type": "string",
              "metadata": {
                "description": "Required. The name of the Load Balancer to create."
              }
            },
            "networkSecurityGroupName": {
              "type": "string",
              "metadata": {
                "description": "Required. The name of the Network Security Group to create."
              }
            },
            "storageAccountName": {
              "type": "string",
              "metadata": {
                "description": "Required. The name of the Storage Account to create."
              }
            },
            "applicationInsightsName": {
              "type": "string",
              "metadata": {
                "description": "Required. The name of the Application Insights Instanec to create."
              }
            },
            "logAnalyticsWorkspaceName": {
              "type": "string",
              "metadata": {
                "description": "Required. The name of the log analytics workspace to create."
              }
            },
            "virtualNetworkName": {
              "type": "string",
              "metadata": {
                "description": "Required. The name of the Virtual Network to create."
              }
            },
            "databricksApplicationObjectId": {
              "type": "string",
              "metadata": {
                "description": "Required. The object ID of the Databricks Enterprise Application. Required for Customer-Managed-Keys."
              }
            }
          },
          "variables": {
            "addressPrefix": "10.0.0.0/16"
          },
          "resources": [
            {
              "type": "Microsoft.KeyVault/vaults/keys",
              "apiVersion": "2022-07-01",
              "name": "[format('{0}/{1}', parameters('keyVaultName'), 'keyEncryptionKey')]",
              "properties": {
                "kty": "RSA"
              },
              "dependsOn": [
                "[resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName'))]"
              ]
            },
            {
              "type": "Microsoft.KeyVault/vaults/keys",
              "apiVersion": "2022-07-01",
              "name": "[format('{0}/{1}', parameters('keyVaultDiskName'), 'keyEncryptionKeyDisk')]",
              "properties": {
                "kty": "RSA"
              },
              "dependsOn": [
                "[resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultDiskName'))]"
              ]
            },
            {
              "type": "Microsoft.Network/privateDnsZones/virtualNetworkLinks",
              "apiVersion": "2020-06-01",
              "name": "[format('{0}/{1}', 'privatelink.azuredatabricks.net', format('{0}-vnetlink', parameters('virtualNetworkName')))]",
              "location": "global",
              "properties": {
                "virtualNetwork": {
                  "id": "[resourceId('Microsoft.Network/virtualNetworks', parameters('virtualNetworkName'))]"
                },
                "registrationEnabled": false
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/privateDnsZones', 'privatelink.azuredatabricks.net')]",
                "[resourceId('Microsoft.Network/virtualNetworks', parameters('virtualNetworkName'))]"
              ]
            },
            {
              "type": "Microsoft.ManagedIdentity/userAssignedIdentities",
              "apiVersion": "2018-11-30",
              "name": "[parameters('managedIdentityName')]",
              "location": "[parameters('location')]"
            },
            {
              "type": "Microsoft.KeyVault/vaults",
              "apiVersion": "2023-07-01",
              "name": "[parameters('keyVaultName')]",
              "location": "[parameters('location')]",
              "properties": {
                "sku": {
                  "family": "A",
                  "name": "standard"
                },
                "tenantId": "[tenant().tenantId]",
                "enablePurgeProtection": true,
                "softDeleteRetentionInDays": 7,
                "enabledForTemplateDeployment": true,
                "enabledForDiskEncryption": true,
                "enabledForDeployment": true,
                "enableRbacAuthorization": true,
                "accessPolicies": []
              }
            },
            {
              "type": "Microsoft.KeyVault/vaults",
              "apiVersion": "2023-07-01",
              "name": "[parameters('keyVaultDiskName')]",
              "location": "[parameters('location')]",
              "properties": {
                "sku": {
                  "family": "A",
                  "name": "standard"
                },
                "tenantId": "[tenant().tenantId]",
                "enablePurgeProtection": true,
                "softDeleteRetentionInDays": 7,
                "enabledForTemplateDeployment": true,
                "enabledForDiskEncryption": true,
                "enabledForDeployment": true,
                "enableRbacAuthorization": true,
                "accessPolicies": []
              }
            },
            {
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.KeyVault/vaults/{0}/keys/{1}', parameters('keyVaultName'), 'keyEncryptionKey')]",
              "name": "[guid(format('msi-{0}-{1}-{2}-Key-Key-Vault-Crypto-User-RoleAssignment', resourceId('Microsoft.KeyVault/vaults/keys', parameters('keyVaultName'), 'keyEncryptionKey'), parameters('location'), resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('managedIdentityName'))))]",
              "properties": {
                "principalId": "[parameters('databricksApplicationObjectId')]",
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '12338af0-0e69-4776-bea7-57ae8d297424')]",
                "principalType": "ServicePrincipal"
              },
              "dependsOn": [
                "[resourceId('Microsoft.KeyVault/vaults/keys', parameters('keyVaultName'), 'keyEncryptionKey')]",
                "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('managedIdentityName'))]"
              ]
            },
            {
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.KeyVault/vaults/{0}', parameters('keyVaultName'))]",
              "name": "[guid(format('msi-{0}-{1}-{2}-Key-Vault-Contributor', resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName')), parameters('location'), resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('managedIdentityName'))))]",
              "properties": {
                "principalId": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('managedIdentityName')), '2018-11-30').principalId]",
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                "principalType": "ServicePrincipal"
              },
              "dependsOn": [
                "[resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName'))]",
                "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('managedIdentityName'))]"
              ]
            },
            {
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.Storage/storageAccounts/{0}', parameters('storageAccountName'))]",
              "name": "[guid(format('msi-{0}-{1}-{2}-UserAssignedIdentity-Contributor', resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName')), parameters('location'), resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('managedIdentityName'))))]",
              "properties": {
                "principalId": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('managedIdentityName')), '2018-11-30').principalId]",
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                "principalType": "ServicePrincipal"
              },
              "dependsOn": [
                "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('managedIdentityName'))]",
                "[resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName'))]"
              ]
            },
            {
              "type": "Microsoft.Storage/storageAccounts",
              "apiVersion": "2023-01-01",
              "name": "[parameters('storageAccountName')]",
              "location": "[parameters('location')]",
              "sku": {
                "name": "Standard_ZRS"
              },
              "kind": "StorageV2",
              "properties": {}
            },
            {
              "type": "Microsoft.OperationalInsights/workspaces",
              "apiVersion": "2022-10-01",
              "name": "[parameters('logAnalyticsWorkspaceName')]",
              "location": "[parameters('location')]"
            },
            {
              "type": "Microsoft.Insights/components",
              "apiVersion": "2020-02-02",
              "name": "[parameters('applicationInsightsName')]",
              "location": "[parameters('location')]",
              "kind": "web",
              "properties": {
                "Application_Type": "web",
                "WorkspaceResourceId": "[resourceId('Microsoft.OperationalInsights/workspaces', parameters('logAnalyticsWorkspaceName'))]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.OperationalInsights/workspaces', parameters('logAnalyticsWorkspaceName'))]"
              ]
            },
            {
              "type": "Microsoft.MachineLearningServices/workspaces",
              "apiVersion": "2023-10-01",
              "name": "[parameters('amlWorkspaceName')]",
              "location": "[parameters('location')]",
              "identity": {
                "type": "UserAssigned",
                "userAssignedIdentities": {
                  "[format('{0}', resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('managedIdentityName')))]": {}
                }
              },
              "properties": {
                "storageAccount": "[resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName'))]",
                "keyVault": "[resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName'))]",
                "applicationInsights": "[resourceId('Microsoft.Insights/components', parameters('applicationInsightsName'))]",
                "primaryUserAssignedIdentity": "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('managedIdentityName'))]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Insights/components', parameters('applicationInsightsName'))]",
                "[resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName'))]",
                "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('managedIdentityName'))]",
                "[resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName'))]"
              ]
            },
            {
              "type": "Microsoft.Network/loadBalancers",
              "apiVersion": "2023-11-01",
              "name": "[parameters('loadBalancerName')]",
              "location": "[parameters('location')]",
              "properties": {
                "backendAddressPools": [
                  {
                    "name": "default"
                  }
                ],
                "frontendIPConfigurations": [
                  {
                    "name": "privateIPConfig1",
                    "properties": {
                      "subnet": {
                        "id": "[reference(resourceId('Microsoft.Network/virtualNetworks', parameters('virtualNetworkName')), '2023-11-01').subnets[0].id]"
                      }
                    }
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/virtualNetworks', parameters('virtualNetworkName'))]"
              ]
            },
            {
              "type": "Microsoft.Network/networkSecurityGroups",
              "apiVersion": "2023-11-01",
              "name": "[parameters('networkSecurityGroupName')]",
              "location": "[parameters('location')]",
              "properties": {
                "securityRules": [
                  {
                    "name": "Microsoft.Databricks-workspaces_UseOnly_databricks-worker-to-worker-inbound",
                    "properties": {
                      "description": "Required for worker nodes communication within a cluster.",
                      "protocol": "*",
                      "sourcePortRange": "*",
                      "destinationPortRange": "*",
                      "sourceAddressPrefix": "VirtualNetwork",
                      "destinationAddressPrefix": "VirtualNetwork",
                      "access": "Allow",
                      "priority": 100,
                      "direction": "Inbound"
                    }
                  },
                  {
                    "name": "Microsoft.Databricks-workspaces_UseOnly_databricks-worker-to-databricks-webapp",
                    "properties": {
                      "description": "Required for workers communication with Databricks Webapp.",
                      "protocol": "Tcp",
                      "sourcePortRange": "*",
                      "destinationPortRange": "443",
                      "sourceAddressPrefix": "VirtualNetwork",
                      "destinationAddressPrefix": "AzureDatabricks",
                      "access": "Allow",
                      "priority": 100,
                      "direction": "Outbound"
                    }
                  },
                  {
                    "name": "Microsoft.Databricks-workspaces_UseOnly_databricks-worker-to-sql",
                    "properties": {
                      "description": "Required for workers communication with Azure SQL services.",
                      "protocol": "Tcp",
                      "sourcePortRange": "*",
                      "destinationPortRange": "3306",
                      "sourceAddressPrefix": "VirtualNetwork",
                      "destinationAddressPrefix": "Sql",
                      "access": "Allow",
                      "priority": 101,
                      "direction": "Outbound"
                    }
                  },
                  {
                    "name": "Microsoft.Databricks-workspaces_UseOnly_databricks-worker-to-storage",
                    "properties": {
                      "description": "Required for workers communication with Azure Storage services.",
                      "protocol": "Tcp",
                      "sourcePortRange": "*",
                      "destinationPortRange": "443",
                      "sourceAddressPrefix": "VirtualNetwork",
                      "destinationAddressPrefix": "Storage",
                      "access": "Allow",
                      "priority": 102,
                      "direction": "Outbound"
                    }
                  },
                  {
                    "name": "Microsoft.Databricks-workspaces_UseOnly_databricks-worker-to-worker-outbound",
                    "properties": {
                      "description": "Required for worker nodes communication within a cluster.",
                      "protocol": "*",
                      "sourcePortRange": "*",
                      "destinationPortRange": "*",
                      "sourceAddressPrefix": "VirtualNetwork",
                      "destinationAddressPrefix": "VirtualNetwork",
                      "access": "Allow",
                      "priority": 103,
                      "direction": "Outbound"
                    }
                  },
                  {
                    "name": "Microsoft.Databricks-workspaces_UseOnly_databricks-worker-to-eventhub",
                    "properties": {
                      "description": "Required for worker communication with Azure Eventhub services.",
                      "protocol": "Tcp",
                      "sourcePortRange": "*",
                      "destinationPortRange": "9093",
                      "sourceAddressPrefix": "VirtualNetwork",
                      "destinationAddressPrefix": "EventHub",
                      "access": "Allow",
                      "priority": 104,
                      "direction": "Outbound"
                    }
                  }
                ]
              }
            },
            {
              "type": "Microsoft.Network/virtualNetworks",
              "apiVersion": "2023-11-01",
              "name": "[parameters('virtualNetworkName')]",
              "location": "[parameters('location')]",
              "properties": {
                "addressSpace": {
                  "addressPrefixes": [
                    "[variables('addressPrefix')]"
                  ]
                },
                "subnets": [
                  {
                    "name": "pimarySubnet",
                    "properties": {
                      "addressPrefix": "[cidrSubnet(variables('addressPrefix'), 20, 0)]"
                    }
                  },
                  {
                    "name": "secondarySubnet",
                    "properties": {
                      "addressPrefix": "[cidrSubnet(variables('addressPrefix'), 20, 1)]"
                    }
                  },
                  {
                    "name": "publicSubnet",
                    "properties": {
                      "addressPrefix": "[cidrSubnet(variables('addressPrefix'), 20, 2)]",
                      "networkSecurityGroup": {
                        "id": "[resourceId('Microsoft.Network/networkSecurityGroups', parameters('networkSecurityGroupName'))]"
                      },
                      "delegations": [
                        {
                          "name": "databricksDelegation",
                          "properties": {
                            "serviceName": "Microsoft.Databricks/workspaces"
                          }
                        }
                      ]
                    }
                  },
                  {
                    "name": "privateSubnet",
                    "properties": {
                      "addressPrefix": "[cidrSubnet(variables('addressPrefix'), 20, 3)]",
                      "networkSecurityGroup": {
                        "id": "[resourceId('Microsoft.Network/networkSecurityGroups', parameters('networkSecurityGroupName'))]"
                      },
                      "delegations": [
                        {
                          "name": "databricksDelegation",
                          "properties": {
                            "serviceName": "Microsoft.Databricks/workspaces"
                          }
                        }
                      ]
                    }
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/networkSecurityGroups', parameters('networkSecurityGroupName'))]"
              ]
            },
            {
              "type": "Microsoft.Network/privateDnsZones",
              "apiVersion": "2020-06-01",
              "name": "privatelink.azuredatabricks.net",
              "location": "global"
            }
          ],
          "outputs": {
            "primarySubnetResourceId": {
              "type": "string",
              "metadata": {
                "description": "The resource ID of the created Virtual Network Primary Subnet."
              },
              "value": "[reference(resourceId('Microsoft.Network/virtualNetworks', parameters('virtualNetworkName')), '2023-11-01').subnets[0].id]"
            },
            "secondarySubnetResourceId": {
              "type": "string",
              "metadata": {
                "description": "The resource ID of the created Virtual Network Secondary Subnet."
              },
              "value": "[reference(resourceId('Microsoft.Network/virtualNetworks', parameters('virtualNetworkName')), '2023-11-01').subnets[1].id]"
            },
            "customPublicSubnetName": {
              "type": "string",
              "metadata": {
                "description": "The name of the 2nd created Virtual Network Public Subnet."
              },
              "value": "[reference(resourceId('Microsoft.Network/virtualNetworks', parameters('virtualNetworkName')), '2023-11-01').subnets[2].name]"
            },
            "customPrivateSubnetName": {
              "type": "string",
              "metadata": {
                "description": "The name of the 3rd created Virtual Network Private Subnet."
              },
              "value": "[reference(resourceId('Microsoft.Network/virtualNetworks', parameters('virtualNetworkName')), '2023-11-01').subnets[3].name]"
            },
            "virtualNetworkResourceId": {
              "type": "string",
              "metadata": {
                "description": "The resource ID of the created Virtual Network."
              },
              "value": "[resourceId('Microsoft.Network/virtualNetworks', parameters('virtualNetworkName'))]"
            },
            "privateDNSZoneResourceId": {
              "type": "string",
              "metadata": {
                "description": "The resource ID of the created Private DNS Zone."
              },
              "value": "[resourceId('Microsoft.Network/privateDnsZones', 'privatelink.azuredatabricks.net')]"
            },
            "machineLearningWorkspaceResourceId": {
              "type": "string",
              "metadata": {
                "description": "The resource ID of the created Azure Machine Learning Workspace."
              },
              "value": "[resourceId('Microsoft.MachineLearningServices/workspaces', parameters('amlWorkspaceName'))]"
            },
            "keyVaultResourceId": {
              "type": "string",
              "metadata": {
                "description": "The resource ID of the created Key Vault."
              },
              "value": "[resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName'))]"
            },
            "keyVaultDiskResourceId": {
              "type": "string",
              "metadata": {
                "description": "The resource ID of the created Disk Key Vault."
              },
              "value": "[resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultDiskName'))]"
            },
            "loadBalancerResourceId": {
              "type": "string",
              "metadata": {
                "description": "The resource ID of the created Load Balancer."
              },
              "value": "[resourceId('Microsoft.Network/loadBalancers', parameters('loadBalancerName'))]"
            },
            "loadBalancerBackendPoolName": {
              "type": "string",
              "metadata": {
                "description": "The name of the created Load Balancer Backend Pool."
              },
              "value": "[reference(resourceId('Microsoft.Network/loadBalancers', parameters('loadBalancerName')), '2023-11-01').backendAddressPools[0].name]"
            },
            "keyVaultKeyName": {
              "type": "string",
              "metadata": {
                "description": "The name of the created Key Vault encryption key."
              },
              "value": "keyEncryptionKey"
            },
            "keyVaultDiskKeyName": {
              "type": "string",
              "metadata": {
                "description": "The name of the created Key Vault Disk encryption key."
              },
              "value": "keyEncryptionKeyDisk"
            },
            "managedIdentityPrincipalId": {
              "type": "string",
              "metadata": {
                "description": "The principal ID of the created Managed Identity."
              },
              "value": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('managedIdentityName')), '2018-11-30').principalId]"
            },
            "logAnalyticsWorkspaceName": {
              "type": "string",
              "metadata": {
                "description": "The name of the created Log Analytics Workspace."
              },
              "value": "[parameters('logAnalyticsWorkspaceName')]"
            }
          }
        }
      },
      "dependsOn": [
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', parameters('resourceGroupName'))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('{0}-diagnosticDependencies', uniqueString(deployment().name, parameters('resourceLocation')))]",
      "resourceGroup": "[parameters('resourceGroupName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "storageAccountName": {
            "value": "[format('dep{0}diasa{1}', parameters('namePrefix'), parameters('serviceShort'))]"
          },
          "logAnalyticsWorkspaceName": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('{0}-nestedDependencies', uniqueString(deployment().name, parameters('resourceLocation')))), '2022-09-01').outputs.logAnalyticsWorkspaceName.value]"
          },
          "eventHubNamespaceEventHubName": {
            "value": "[format('dep-{0}-evh-{1}', parameters('namePrefix'), parameters('serviceShort'))]"
          },
          "eventHubNamespaceName": {
            "value": "[format('dep-{0}-evhns-{1}', parameters('namePrefix'), parameters('serviceShort'))]"
          },
          "location": {
            "value": "[parameters('resourceLocation')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.29.47.4906",
              "templateHash": "9339346494012745347"
            }
          },
          "parameters": {
            "storageAccountName": {
              "type": "string",
              "maxLength": 24,
              "metadata": {
                "description": "Required. The name of the storage account to create."
              }
            },
            "logAnalyticsWorkspaceName": {
              "type": "string",
              "metadata": {
                "description": "Required. The name of the log analytics workspace to create."
              }
            },
            "eventHubNamespaceName": {
              "type": "string",
              "metadata": {
                "description": "Required. The name of the event hub namespace to create."
              }
            },
            "eventHubNamespaceEventHubName": {
              "type": "string",
              "metadata": {
                "description": "Required. The name of the event hub to create inside the event hub namespace."
              }
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]",
              "metadata": {
                "description": "Optional. The location to deploy resources to."
              }
            }
          },
          "resources": [
            {
              "type": "Microsoft.EventHub/namespaces/eventhubs",
              "apiVersion": "2021-11-01",
              "name": "[format('{0}/{1}', parameters('eventHubNamespaceName'), parameters('eventHubNamespaceEventHubName'))]",
              "dependsOn": [
                "[resourceId('Microsoft.EventHub/namespaces', parameters('eventHubNamespaceName'))]"
              ]
            },
            {
              "type": "Microsoft.EventHub/namespaces/authorizationRules",
              "apiVersion": "2021-06-01-preview",
              "name": "[format('{0}/{1}', parameters('eventHubNamespaceName'), 'RootManageSharedAccessKey')]",
              "properties": {
                "rights": [
                  "Listen",
                  "Manage",
                  "Send"
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.EventHub/namespaces', parameters('eventHubNamespaceName'))]"
              ]
            },
            {
              "type": "Microsoft.Storage/storageAccounts",
              "apiVersion": "2021-08-01",
              "name": "[parameters('storageAccountName')]",
              "location": "[parameters('location')]",
              "kind": "StorageV2",
              "sku": {
                "name": "Standard_LRS"
              },
              "properties": {
                "allowBlobPublicAccess": false
              }
            },
            {
              "type": "Microsoft.OperationalInsights/workspaces",
              "apiVersion": "2021-12-01-preview",
              "name": "[parameters('logAnalyticsWorkspaceName')]",
              "location": "[parameters('location')]"
            },
            {
              "type": "Microsoft.EventHub/namespaces",
              "apiVersion": "2021-11-01",
              "name": "[parameters('eventHubNamespaceName')]",
              "location": "[parameters('location')]"
            }
          ],
          "outputs": {
            "storageAccountResourceId": {
              "type": "string",
              "metadata": {
                "description": "The resource ID of the created Storage Account."
              },
              "value": "[resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName'))]"
            },
            "logAnalyticsWorkspaceResourceId": {
              "type": "string",
              "metadata": {
                "description": "The resource ID of the created Log Analytics Workspace."
              },
              "value": "[resourceId('Microsoft.OperationalInsights/workspaces', parameters('logAnalyticsWorkspaceName'))]"
            },
            "eventHubNamespaceResourceId": {
              "type": "string",
              "metadata": {
                "description": "The resource ID of the created Event Hub Namespace."
              },
              "value": "[resourceId('Microsoft.EventHub/namespaces', parameters('eventHubNamespaceName'))]"
            },
            "eventHubAuthorizationRuleId": {
              "type": "string",
              "metadata": {
                "description": "The resource ID of the created Event Hub Namespace Authorization Rule."
              },
              "value": "[resourceId('Microsoft.EventHub/namespaces/authorizationRules', parameters('eventHubNamespaceName'), 'RootManageSharedAccessKey')]"
            },
            "eventHubNamespaceEventHubName": {
              "type": "string",
              "metadata": {
                "description": "The name of the created Event Hub Namespace Event Hub."
              },
              "value": "[parameters('eventHubNamespaceEventHubName')]"
            }
          }
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('{0}-nestedDependencies', uniqueString(deployment().name, parameters('resourceLocation'))))]",
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', parameters('resourceGroupName'))]"
      ]
    },
    {
      "copy": {
        "name": "testDeployment",
        "count": "[length(createArray('init', 'idem'))]",
        "mode": "serial",
        "batchSize": 1
      },
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('{0}-test-{1}-{2}', uniqueString(deployment().name, parameters('resourceLocation')), parameters('serviceShort'), createArray('init', 'idem')[copyIndex()])]",
      "resourceGroup": "[parameters('resourceGroupName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "name": {
            "value": "[format('{0}{1}002', parameters('namePrefix'), parameters('serviceShort'))]"
          },
          "location": {
            "value": "[parameters('resourceLocation')]"
          },
          "diagnosticSettings": {
            "value": [
              {
                "name": "customSetting",
                "eventHubName": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('{0}-diagnosticDependencies', uniqueString(deployment().name, parameters('resourceLocation')))), '2022-09-01').outputs.eventHubNamespaceEventHubName.value]",
                "eventHubAuthorizationRuleResourceId": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('{0}-diagnosticDependencies', uniqueString(deployment().name, parameters('resourceLocation')))), '2022-09-01').outputs.eventHubAuthorizationRuleId.value]",
                "storageAccountResourceId": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('{0}-diagnosticDependencies', uniqueString(deployment().name, parameters('resourceLocation')))), '2022-09-01').outputs.storageAccountResourceId.value]",
                "workspaceResourceId": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('{0}-diagnosticDependencies', uniqueString(deployment().name, parameters('resourceLocation')))), '2022-09-01').outputs.logAnalyticsWorkspaceResourceId.value]",
                "logCategoriesAndGroups": [
                  {
                    "category": "jobs"
                  },
                  {
                    "category": "notebook"
                  }
                ]
              }
            ]
          },
          "lock": {
            "value": {
              "kind": "CanNotDelete",
              "name": "myCustomLockName"
            }
          },
          "roleAssignments": {
            "value": [
              {
                "name": "2754e64b-b96e-44bc-9cb2-6e39b057f515",
                "roleDefinitionIdOrName": "Owner",
                "principalId": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('{0}-nestedDependencies', uniqueString(deployment().name, parameters('resourceLocation')))), '2022-09-01').outputs.managedIdentityPrincipalId.value]",
                "principalType": "ServicePrincipal"
              },
              {
                "name": "[guid(format('Custom seed {0}{1}', parameters('namePrefix'), parameters('serviceShort')))]",
                "roleDefinitionIdOrName": "b24988ac-6180-42a0-ab88-20f7382dd24c",
                "principalId": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('{0}-nestedDependencies', uniqueString(deployment().name, parameters('resourceLocation')))), '2022-09-01').outputs.managedIdentityPrincipalId.value]",
                "principalType": "ServicePrincipal"
              },
              {
                "roleDefinitionIdOrName": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                "principalId": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('{0}-nestedDependencies', uniqueString(deployment().name, parameters('resourceLocation')))), '2022-09-01').outputs.managedIdentityPrincipalId.value]",
                "principalType": "ServicePrincipal"
              }
            ]
          },
          "tags": {
            "value": {
              "hidden-title": "This is visible in the resource name",
              "Environment": "Non-Prod",
              "Role": "DeploymentValidation"
            }
          },
          "customerManagedKey": {
            "value": {
              "keyName": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('{0}-nestedDependencies', uniqueString(deployment().name, parameters('resourceLocation')))), '2022-09-01').outputs.keyVaultKeyName.value]",
              "keyVaultResourceId": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('{0}-nestedDependencies', uniqueString(deployment().name, parameters('resourceLocation')))), '2022-09-01').outputs.keyVaultResourceId.value]"
            }
          },
          "customerManagedKeyManagedDisk": {
            "value": {
              "keyName": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('{0}-nestedDependencies', uniqueString(deployment().name, parameters('resourceLocation')))), '2022-09-01').outputs.keyVaultDiskKeyName.value]",
              "keyVaultResourceId": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('{0}-nestedDependencies', uniqueString(deployment().name, parameters('resourceLocation')))), '2022-09-01').outputs.keyVaultDiskResourceId.value]",
              "rotationToLatestKeyVersionEnabled": true
            }
          },
          "storageAccountName": {
            "value": "[format('sa{0}{1}001', parameters('namePrefix'), parameters('serviceShort'))]"
          },
          "storageAccountSkuName": {
            "value": "Standard_ZRS"
          },
          "publicIpName": {
            "value": "nat-gw-public-ip"
          },
          "natGatewayName": {
            "value": "nat-gateway"
          },
          "prepareEncryption": {
            "value": true
          },
          "requiredNsgRules": {
            "value": "NoAzureDatabricksRules"
          },
          "skuName": {
            "value": "premium"
          },
          "amlWorkspaceResourceId": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('{0}-nestedDependencies', uniqueString(deployment().name, parameters('resourceLocation')))), '2022-09-01').outputs.machineLearningWorkspaceResourceId.value]"
          },
          "customPrivateSubnetName": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('{0}-nestedDependencies', uniqueString(deployment().name, parameters('resourceLocation')))), '2022-09-01').outputs.customPrivateSubnetName.value]"
          },
          "customPublicSubnetName": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('{0}-nestedDependencies', uniqueString(deployment().name, parameters('resourceLocation')))), '2022-09-01').outputs.customPublicSubnetName.value]"
          },
          "publicNetworkAccess": {
            "value": "Disabled"
          },
          "disablePublicIp": {
            "value": true
          },
          "loadBalancerResourceId": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('{0}-nestedDependencies', uniqueString(deployment().name, parameters('resourceLocation')))), '2022-09-01').outputs.loadBalancerResourceId.value]"
          },
          "loadBalancerBackendPoolName": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('{0}-nestedDependencies', uniqueString(deployment().name, parameters('resourceLocation')))), '2022-09-01').outputs.loadBalancerBackendPoolName.value]"
          },
          "customVirtualNetworkResourceId": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('{0}-nestedDependencies', uniqueString(deployment().name, parameters('resourceLocation')))), '2022-09-01').outputs.virtualNetworkResourceId.value]"
          },
          "privateEndpoints": {
            "value": [
              {
                "privateDnsZoneResourceIds": [
                  "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('{0}-nestedDependencies', uniqueString(deployment().name, parameters('resourceLocation')))), '2022-09-01').outputs.privateDNSZoneResourceId.value]"
                ],
                "service": "databricks_ui_api",
                "subnetResourceId": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('{0}-nestedDependencies', uniqueString(deployment().name, parameters('resourceLocation')))), '2022-09-01').outputs.primarySubnetResourceId.value]",
                "tags": {
                  "Environment": "Non-Prod",
                  "Role": "DeploymentValidation"
                }
              },
              {
                "privateDnsZoneResourceIds": [
                  "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('{0}-nestedDependencies', uniqueString(deployment().name, parameters('resourceLocation')))), '2022-09-01').outputs.privateDNSZoneResourceId.value]"
                ],
                "subnetResourceId": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('{0}-nestedDependencies', uniqueString(deployment().name, parameters('resourceLocation')))), '2022-09-01').outputs.secondarySubnetResourceId.value]",
                "service": "browser_authentication"
              }
            ]
          },
          "managedResourceGroupResourceId": {
            "value": "[format('{0}/resourceGroups/rg-{1}-managed', subscription().id, parameters('resourceGroupName'))]"
          },
          "requireInfrastructureEncryption": {
            "value": true
          },
          "vnetAddressPrefix": {
            "value": "10.100"
          },
          "defaultCatalog": {
            "value": {
              "initialName": "defaultCatalog",
              "initialType": "UnityCatalog"
            }
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "languageVersion": "2.0",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.29.47.4906",
              "templateHash": "17719835263871245235"
            },
            "name": "Azure Databricks Workspaces",
            "description": "This module deploys an Azure Databricks Workspace.",
            "owner": "Azure/module-maintainers"
          },
          "definitions": {
            "defaultCatalogType": {
              "type": "object",
              "properties": {
                "initialName": {
                  "type": "string"
                },
                "initialType": {
                  "type": "string",
                  "allowedValues": [
                    "HiveMetastore",
                    "UnityCatalog"
                  ]
                }
              }
            },
            "lockType": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Specify the name of lock."
                  }
                },
                "kind": {
                  "type": "string",
                  "allowedValues": [
                    "CanNotDelete",
                    "None",
                    "ReadOnly"
                  ],
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Specify the type of lock."
                  }
                }
              },
              "nullable": true
            },
            "privateEndpointType": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. The name of the private endpoint."
                    }
                  },
                  "location": {
                    "type": "string",
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. The location to deploy the private endpoint to."
                    }
                  },
                  "privateLinkServiceConnectionName": {
                    "type": "string",
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. The name of the private link connection to create."
                    }
                  },
                  "service": {
                    "type": "string",
                    "metadata": {
                      "description": "Required. The subresource to deploy the private endpoint for. For example \"blob\", \"table\", \"queue\" or \"file\"."
                    }
                  },
                  "subnetResourceId": {
                    "type": "string",
                    "metadata": {
                      "description": "Required. Resource ID of the subnet where the endpoint needs to be created."
                    }
                  },
                  "privateDnsZoneGroupName": {
                    "type": "string",
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. The name of the private DNS zone group to create if `privateDnsZoneResourceIds` were provided."
                    }
                  },
                  "privateDnsZoneResourceIds": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. The private DNS zone groups to associate the private endpoint with. A DNS zone group can support up to 5 DNS zones."
                    }
                  },
                  "isManualConnection": {
                    "type": "bool",
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. If Manual Private Link Connection is required."
                    }
                  },
                  "manualConnectionRequestMessage": {
                    "type": "string",
                    "nullable": true,
                    "maxLength": 140,
                    "metadata": {
                      "description": "Optional. A message passed to the owner of the remote resource with the manual connection request."
                    }
                  },
                  "customDnsConfigs": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "fqdn": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Required. Fqdn that resolves to private endpoint IP address."
                          }
                        },
                        "ipAddresses": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "metadata": {
                            "description": "Required. A list of private IP addresses of the private endpoint."
                          }
                        }
                      }
                    },
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. Custom DNS configurations."
                    }
                  },
                  "ipConfigurations": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. The name of the resource that is unique within a resource group."
                          }
                        },
                        "properties": {
                          "type": "object",
                          "properties": {
                            "groupId": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The ID of a group obtained from the remote resource that this private endpoint should connect to."
                              }
                            },
                            "memberName": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The member name of a group obtained from the remote resource that this private endpoint should connect to."
                              }
                            },
                            "privateIPAddress": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. A private IP address obtained from the private endpoint's subnet."
                              }
                            }
                          },
                          "metadata": {
                            "description": "Required. Properties of private endpoint IP configurations."
                          }
                        }
                      }
                    },
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. A list of IP configurations of the private endpoint. This will be used to map to the First Party Service endpoints."
                    }
                  },
                  "applicationSecurityGroupResourceIds": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. Application security groups in which the private endpoint IP configuration is included."
                    }
                  },
                  "customNetworkInterfaceName": {
                    "type": "string",
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. The custom name of the network interface attached to the private endpoint."
                    }
                  },
                  "lock": {
                    "$ref": "#/definitions/lockType",
                    "metadata": {
                      "description": "Optional. Specify the type of lock."
                    }
                  },
                  "roleAssignments": {
                    "$ref": "#/definitions/roleAssignmentType",
                    "metadata": {
                      "description": "Optional. Array of role assignments to create."
                    }
                  },
                  "tags": {
                    "type": "object",
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. Tags to be applied on all resources/resource groups in this deployment."
                    }
                  },
                  "enableTelemetry": {
                    "type": "bool",
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. Enable/Disable usage telemetry for module."
                    }
                  },
                  "resourceGroupName": {
                    "type": "string",
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. Specify if you want to deploy the Private Endpoint into a different resource group than the main resource."
                    }
                  }
                }
              },
              "nullable": true
            },
            "customerManagedKeyType": {
              "type": "object",
              "properties": {
                "keyVaultResourceId": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. The resource ID of a key vault to reference a customer managed key for encryption from."
                  }
                },
                "keyName": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. The name of the customer managed key to use for encryption."
                  }
                },
                "keyVersion": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The version of the customer managed key to reference for encryption. If not provided, using 'latest'."
                  }
                },
                "userAssignedIdentityResourceId": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. User assigned identity to use when fetching the customer managed key. Required if no system assigned identity is available for use."
                  }
                }
              },
              "nullable": true
            },
            "customerManagedKeyManagedDiskType": {
              "type": "object",
              "properties": {
                "keyVaultResourceId": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. The resource ID of a key vault to reference a customer managed key for encryption from."
                  }
                },
                "keyName": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. The name of the customer managed key to use for encryption."
                  }
                },
                "keyVersion": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The version of the customer managed key to reference for encryption. If not provided, using 'latest'."
                  }
                },
                "userAssignedIdentityResourceId": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. User assigned identity to use when fetching the customer managed key. Required if no system assigned identity is available for use."
                  }
                },
                "rotationToLatestKeyVersionEnabled": {
                  "type": "bool",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Indicate whether the latest key version should be automatically used for Managed Disk Encryption. Enabled by default."
                  }
                }
              },
              "nullable": true
            },
            "roleAssignmentType": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. The name (as GUID) of the role assignment. If not provided, a GUID will be generated."
                    }
                  },
                  "roleDefinitionIdOrName": {
                    "type": "string",
                    "metadata": {
                      "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                    }
                  },
                  "principalId": {
                    "type": "string",
                    "metadata": {
                      "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                    }
                  },
                  "principalType": {
                    "type": "string",
                    "allowedValues": [
                      "Device",
                      "ForeignGroup",
                      "Group",
                      "ServicePrincipal",
                      "User"
                    ],
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. The principal type of the assigned principal ID."
                    }
                  },
                  "description": {
                    "type": "string",
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. The description of the role assignment."
                    }
                  },
                  "condition": {
                    "type": "string",
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                    }
                  },
                  "conditionVersion": {
                    "type": "string",
                    "allowedValues": [
                      "2.0"
                    ],
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. Version of the condition."
                    }
                  },
                  "delegatedManagedIdentityResourceId": {
                    "type": "string",
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. The Resource Id of the delegated managed identity resource."
                    }
                  }
                }
              },
              "nullable": true
            },
            "diagnosticSettingType": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. The name of diagnostic setting."
                    }
                  },
                  "logCategoriesAndGroups": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "category": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Name of a Diagnostic Log category for a resource type this setting is applied to. Set the specific logs to collect here."
                          }
                        },
                        "categoryGroup": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Name of a Diagnostic Log category group for a resource type this setting is applied to. Set to `allLogs` to collect all logs."
                          }
                        },
                        "enabled": {
                          "type": "bool",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Enable or disable the category explicitly. Default is `true`."
                          }
                        }
                      }
                    },
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. The name of logs that will be streamed. \"allLogs\" includes all possible logs for the resource. Set to `[]` to disable log collection."
                    }
                  },
                  "logAnalyticsDestinationType": {
                    "type": "string",
                    "allowedValues": [
                      "AzureDiagnostics",
                      "Dedicated"
                    ],
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. A string indicating whether the export to Log Analytics should use the default destination type, i.e. AzureDiagnostics, or use a destination type."
                    }
                  },
                  "workspaceResourceId": {
                    "type": "string",
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. Resource ID of the diagnostic log analytics workspace. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                    }
                  },
                  "storageAccountResourceId": {
                    "type": "string",
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. Resource ID of the diagnostic storage account. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                    }
                  },
                  "eventHubAuthorizationRuleResourceId": {
                    "type": "string",
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. Resource ID of the diagnostic event hub authorization rule for the Event Hubs namespace in which the event hub should be created or streamed to."
                    }
                  },
                  "eventHubName": {
                    "type": "string",
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. Name of the diagnostic event hub within the namespace to which logs are streamed. Without this, an event hub is created for each log category. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                    }
                  },
                  "marketplacePartnerResourceId": {
                    "type": "string",
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. The full ARM resource ID of the Marketplace resource to which you would like to send Diagnostic Logs."
                    }
                  }
                }
              },
              "nullable": true
            }
          },
          "parameters": {
            "name": {
              "type": "string",
              "metadata": {
                "description": "Required. The name of the Azure Databricks workspace to create."
              }
            },
            "managedResourceGroupResourceId": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. The managed resource group ID. It is created by the module as per the to-be resource ID you provide."
              }
            },
            "skuName": {
              "type": "string",
              "defaultValue": "premium",
              "allowedValues": [
                "trial",
                "standard",
                "premium"
              ],
              "metadata": {
                "description": "Optional. The pricing tier of workspace."
              }
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]",
              "metadata": {
                "description": "Optional. Location for all Resources."
              }
            },
            "roleAssignments": {
              "$ref": "#/definitions/roleAssignmentType",
              "metadata": {
                "description": "Optional. Array of role assignments to create."
              }
            },
            "diagnosticSettings": {
              "$ref": "#/definitions/diagnosticSettingType",
              "metadata": {
                "description": "Optional. The diagnostic settings of the service."
              }
            },
            "lock": {
              "$ref": "#/definitions/lockType",
              "metadata": {
                "description": "Optional. The lock settings of the service."
              }
            },
            "tags": {
              "type": "object",
              "nullable": true,
              "metadata": {
                "description": "Optional. Tags of the resource."
              }
            },
            "enableTelemetry": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Optional. Enable/Disable usage telemetry for module."
              }
            },
            "customVirtualNetworkResourceId": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. The resource ID of a Virtual Network where this Databricks Cluster should be created."
              }
            },
            "amlWorkspaceResourceId": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. The resource ID of a Azure Machine Learning workspace to link with Databricks workspace."
              }
            },
            "customPrivateSubnetName": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. The name of the Private Subnet within the Virtual Network."
              }
            },
            "customPublicSubnetName": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. The name of a Public Subnet within the Virtual Network."
              }
            },
            "disablePublicIp": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Optional. Disable Public IP."
              }
            },
            "customerManagedKey": {
              "$ref": "#/definitions/customerManagedKeyType",
              "metadata": {
                "description": "Optional. The customer managed key definition to use for the managed service."
              }
            },
            "customerManagedKeyManagedDisk": {
              "$ref": "#/definitions/customerManagedKeyManagedDiskType",
              "metadata": {
                "description": "Optional. The customer managed key definition to use for the managed disk."
              }
            },
            "loadBalancerBackendPoolName": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. Name of the outbound Load Balancer Backend Pool for Secure Cluster Connectivity (No Public IP)."
              }
            },
            "loadBalancerResourceId": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. Resource URI of Outbound Load balancer for Secure Cluster Connectivity (No Public IP) workspace."
              }
            },
            "natGatewayName": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. Name of the NAT gateway for Secure Cluster Connectivity (No Public IP) workspace subnets."
              }
            },
            "prepareEncryption": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Optional. Prepare the workspace for encryption. Enables the Managed Identity for managed storage account."
              }
            },
            "publicIpName": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. Name of the Public IP for No Public IP workspace with managed vNet."
              }
            },
            "requireInfrastructureEncryption": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Optional. A boolean indicating whether or not the DBFS root file system will be enabled with secondary layer of encryption with platform managed keys for data at rest."
              }
            },
            "storageAccountName": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. Default DBFS storage account name."
              }
            },
            "storageAccountSkuName": {
              "type": "string",
              "defaultValue": "Standard_GRS",
              "metadata": {
                "description": "Optional. Storage account SKU name."
              }
            },
            "vnetAddressPrefix": {
              "type": "string",
              "defaultValue": "10.139",
              "metadata": {
                "description": "Optional. Address prefix for Managed virtual network."
              }
            },
            "publicNetworkAccess": {
              "type": "string",
              "defaultValue": "Enabled",
              "allowedValues": [
                "Disabled",
                "Enabled"
              ],
              "metadata": {
                "description": "Optional. The network access type for accessing workspace. Set value to disabled to access workspace only via private link."
              }
            },
            "requiredNsgRules": {
              "type": "string",
              "defaultValue": "AllRules",
              "allowedValues": [
                "AllRules",
                "NoAzureDatabricksRules"
              ],
              "metadata": {
                "description": "Optional. Gets or sets a value indicating whether data plane (clusters) to control plane communication happen over private endpoint."
              }
            },
            "privateStorageAccount": {
              "type": "string",
              "defaultValue": "",
              "allowedValues": [
                "Enabled",
                "Disabled",
                ""
              ],
              "metadata": {
                "description": "Optional. Determines whether the managed storage account should be private or public. For best security practices, it is recommended to set it to Enabled."
              }
            },
            "privateEndpoints": {
              "$ref": "#/definitions/privateEndpointType",
              "metadata": {
                "description": "Optional. Configuration details for private endpoints. For security reasons, it is recommended to use private endpoints whenever possible."
              }
            },
            "storageAccountPrivateEndpoints": {
              "$ref": "#/definitions/privateEndpointType",
              "metadata": {
                "description": "Optional. Configuration details for private endpoints for the managed workspace storage account, required when privateStorageAccount is set to Enabled. For security reasons, it is recommended to use private endpoints whenever possible."
              }
            },
            "accessConnectorResourceId": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Conditional. The resource ID of the associated access connector for private access to the managed workspace storage account. Required if privateStorageAccount is enabled."
              }
            },
            "defaultCatalog": {
              "$ref": "#/definitions/defaultCatalogType",
              "nullable": true,
              "metadata": {
                "description": "Optional. The default catalog configuration for the Databricks workspace."
              }
            }
          },
          "variables": {
            "copy": [
              {
                "name": "formattedRoleAssignments",
                "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]",
                "input": "[union(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')], createObject('roleDefinitionId', coalesce(tryGet(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName), if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName)))))]"
              }
            ],
            "builtInRoleNames": {
              "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
              "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
              "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
              "Role Based Access Control Administrator (Preview)": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]",
              "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]"
            }
          },
          "resources": {
            "cMKKeyVault::cMKKey": {
              "condition": "[and(not(empty(tryGet(parameters('customerManagedKey'), 'keyVaultResourceId'))), and(not(empty(tryGet(parameters('customerManagedKey'), 'keyVaultResourceId'))), not(empty(tryGet(parameters('customerManagedKey'), 'keyName')))))]",
              "existing": true,
              "type": "Microsoft.KeyVault/vaults/keys",
              "apiVersion": "2023-02-01",
              "subscriptionId": "[split(coalesce(tryGet(parameters('customerManagedKey'), 'keyVaultResourceId'), '//'), '/')[2]]",
              "resourceGroup": "[split(coalesce(tryGet(parameters('customerManagedKey'), 'keyVaultResourceId'), '////'), '/')[4]]",
              "name": "[format('{0}/{1}', last(split(coalesce(tryGet(parameters('customerManagedKey'), 'keyVaultResourceId'), 'dummyVault'), '/')), coalesce(tryGet(parameters('customerManagedKey'), 'keyName'), 'dummyKey'))]",
              "dependsOn": [
                "cMKKeyVault"
              ]
            },
            "cMKManagedDiskKeyVault::cMKKey": {
              "condition": "[and(not(empty(tryGet(parameters('customerManagedKeyManagedDisk'), 'keyVaultResourceId'))), and(not(empty(tryGet(parameters('customerManagedKeyManagedDisk'), 'keyVaultResourceId'))), not(empty(tryGet(parameters('customerManagedKeyManagedDisk'), 'keyName')))))]",
              "existing": true,
              "type": "Microsoft.KeyVault/vaults/keys",
              "apiVersion": "2023-02-01",
              "subscriptionId": "[split(coalesce(tryGet(parameters('customerManagedKeyManagedDisk'), 'keyVaultResourceId'), '//'), '/')[2]]",
              "resourceGroup": "[split(coalesce(tryGet(parameters('customerManagedKeyManagedDisk'), 'keyVaultResourceId'), '////'), '/')[4]]",
              "name": "[format('{0}/{1}', last(split(coalesce(tryGet(parameters('customerManagedKeyManagedDisk'), 'keyVaultResourceId'), 'dummyVault'), '/')), coalesce(tryGet(parameters('customerManagedKeyManagedDisk'), 'keyName'), 'dummyKey'))]",
              "dependsOn": [
                "cMKManagedDiskKeyVault"
              ]
            },
            "avmTelemetry": {
              "condition": "[parameters('enableTelemetry')]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2024-03-01",
              "name": "[format('46d3xbcp.res.databricks-workspace.{0}.{1}', replace('-..--..-', '.', '-'), substring(uniqueString(deployment().name, parameters('location')), 0, 4))]",
              "properties": {
                "mode": "Incremental",
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "resources": [],
                  "outputs": {
                    "telemetry": {
                      "type": "String",
                      "value": "For more information, see https://aka.ms/avm/TelemetryInfo"
                    }
                  }
                }
              }
            },
            "cMKKeyVault": {
              "condition": "[not(empty(tryGet(parameters('customerManagedKey'), 'keyVaultResourceId')))]",
              "existing": true,
              "type": "Microsoft.KeyVault/vaults",
              "apiVersion": "2023-07-01",
              "subscriptionId": "[split(coalesce(tryGet(parameters('customerManagedKey'), 'keyVaultResourceId'), '//'), '/')[2]]",
              "resourceGroup": "[split(coalesce(tryGet(parameters('customerManagedKey'), 'keyVaultResourceId'), '////'), '/')[4]]",
              "name": "[last(split(coalesce(tryGet(parameters('customerManagedKey'), 'keyVaultResourceId'), 'dummyVault'), '/'))]"
            },
            "cMKManagedDiskKeyVault": {
              "condition": "[not(empty(tryGet(parameters('customerManagedKeyManagedDisk'), 'keyVaultResourceId')))]",
              "existing": true,
              "type": "Microsoft.KeyVault/vaults",
              "apiVersion": "2023-07-01",
              "subscriptionId": "[split(coalesce(tryGet(parameters('customerManagedKeyManagedDisk'), 'keyVaultResourceId'), '//'), '/')[2]]",
              "resourceGroup": "[split(coalesce(tryGet(parameters('customerManagedKeyManagedDisk'), 'keyVaultResourceId'), '////'), '/')[4]]",
              "name": "[last(split(coalesce(tryGet(parameters('customerManagedKeyManagedDisk'), 'keyVaultResourceId'), 'dummyVault'), '/'))]"
            },
            "workspace": {
              "type": "Microsoft.Databricks/workspaces",
              "apiVersion": "2024-05-01",
              "name": "[parameters('name')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "sku": {
                "name": "[parameters('skuName')]"
              },
              "properties": "[union(createObject('managedResourceGroupId', if(not(empty(parameters('managedResourceGroupResourceId'))), parameters('managedResourceGroupResourceId'), format('{0}/resourceGroups/rg-{1}-managed', subscription().id, parameters('name'))), 'parameters', union(createObject('enableNoPublicIp', createObject('value', parameters('disablePublicIp')), 'prepareEncryption', createObject('value', parameters('prepareEncryption')), 'vnetAddressPrefix', createObject('value', parameters('vnetAddressPrefix')), 'requireInfrastructureEncryption', createObject('value', parameters('requireInfrastructureEncryption'))), if(not(empty(parameters('defaultCatalog'))), createObject('defaultCatalog', createObject('initialName', createObject('value', parameters('defaultCatalog').initialName), 'initialType', createObject('value', parameters('defaultCatalog').initialType))), createObject()), if(not(empty(parameters('customVirtualNetworkResourceId'))), createObject('customVirtualNetworkId', createObject('value', parameters('customVirtualNetworkResourceId'))), createObject()), if(not(empty(parameters('amlWorkspaceResourceId'))), createObject('amlWorkspaceId', createObject('value', parameters('amlWorkspaceResourceId'))), createObject()), if(not(empty(parameters('customPrivateSubnetName'))), createObject('customPrivateSubnetName', createObject('value', parameters('customPrivateSubnetName'))), createObject()), if(not(empty(parameters('customPublicSubnetName'))), createObject('customPublicSubnetName', createObject('value', parameters('customPublicSubnetName'))), createObject()), if(not(empty(parameters('loadBalancerBackendPoolName'))), createObject('loadBalancerBackendPoolName', createObject('value', parameters('loadBalancerBackendPoolName'))), createObject()), if(not(empty(parameters('loadBalancerResourceId'))), createObject('loadBalancerId', createObject('value', parameters('loadBalancerResourceId'))), createObject()), if(not(empty(parameters('natGatewayName'))), createObject('natGatewayName', createObject('value', parameters('natGatewayName'))), createObject()), if(not(empty(parameters('publicIpName'))), createObject('publicIpName', createObject('value', parameters('publicIpName'))), createObject()), if(not(empty(parameters('storageAccountName'))), createObject('storageAccountName', createObject('value', parameters('storageAccountName'))), createObject()), if(not(empty(parameters('storageAccountSkuName'))), createObject('storageAccountSkuName', createObject('value', parameters('storageAccountSkuName'))), createObject())), 'publicNetworkAccess', parameters('publicNetworkAccess'), 'requiredNsgRules', parameters('requiredNsgRules'), 'encryption', if(or(not(empty(parameters('customerManagedKey'))), not(empty(parameters('customerManagedKeyManagedDisk')))), createObject('entities', createObject('managedServices', if(not(empty(parameters('customerManagedKey'))), createObject('keySource', 'Microsoft.Keyvault', 'keyVaultProperties', createObject('keyVaultUri', reference('cMKKeyVault').vaultUri, 'keyName', parameters('customerManagedKey').keyName, 'keyVersion', if(not(empty(coalesce(tryGet(parameters('customerManagedKey'), 'keyVersion'), ''))), parameters('customerManagedKey').keyVersion, last(split(reference('cMKKeyVault::cMKKey').keyUriWithVersion, '/'))))), null()), 'managedDisk', if(not(empty(parameters('customerManagedKeyManagedDisk'))), createObject('keySource', 'Microsoft.Keyvault', 'keyVaultProperties', createObject('keyVaultUri', reference('cMKManagedDiskKeyVault').vaultUri, 'keyName', parameters('customerManagedKeyManagedDisk').keyName, 'keyVersion', if(not(empty(coalesce(tryGet(parameters('customerManagedKeyManagedDisk'), 'keyVersion'), ''))), parameters('customerManagedKeyManagedDisk').keyVersion, last(split(reference('cMKManagedDiskKeyVault::cMKKey').keyUriWithVersion, '/')))), 'rotationToLatestKeyVersionEnabled', coalesce(tryGet(parameters('customerManagedKeyManagedDisk'), 'rotationToLatestKeyVersionEnabled'), true())), null()))), null())), if(not(empty(parameters('privateStorageAccount'))), createObject('defaultStorageFirewall', parameters('privateStorageAccount'), 'accessConnector', createObject('id', parameters('accessConnectorResourceId'), 'identityType', 'SystemAssigned')), createObject()))]",
              "dependsOn": [
                "cMKKeyVault",
                "cMKManagedDiskKeyVault"
              ]
            },
            "workspace_lock": {
              "condition": "[and(not(empty(coalesce(parameters('lock'), createObject()))), not(equals(tryGet(parameters('lock'), 'kind'), 'None')))]",
              "type": "Microsoft.Authorization/locks",
              "apiVersion": "2020-05-01",
              "scope": "[format('Microsoft.Databricks/workspaces/{0}', parameters('name'))]",
              "name": "[coalesce(tryGet(parameters('lock'), 'name'), format('lock-{0}', parameters('name')))]",
              "properties": {
                "level": "[coalesce(tryGet(parameters('lock'), 'kind'), '')]",
                "notes": "[if(equals(tryGet(parameters('lock'), 'kind'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot delete or modify the resource or child resources.')]"
              },
              "dependsOn": [
                "workspace"
              ]
            },
            "workspace_diagnosticSettings": {
              "copy": {
                "name": "workspace_diagnosticSettings",
                "count": "[length(coalesce(parameters('diagnosticSettings'), createArray()))]"
              },
              "type": "Microsoft.Insights/diagnosticSettings",
              "apiVersion": "2021-05-01-preview",
              "scope": "[format('Microsoft.Databricks/workspaces/{0}', parameters('name'))]",
              "name": "[coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'name'), format('{0}-diagnosticSettings', parameters('name')))]",
              "properties": {
                "copy": [
                  {
                    "name": "logs",
                    "count": "[length(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs'))))]",
                    "input": {
                      "categoryGroup": "[tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'categoryGroup')]",
                      "category": "[tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'category')]",
                      "enabled": "[coalesce(tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'enabled'), true())]"
                    }
                  }
                ],
                "storageAccountId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'storageAccountResourceId')]",
                "workspaceId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'workspaceResourceId')]",
                "eventHubAuthorizationRuleId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'eventHubAuthorizationRuleResourceId')]",
                "eventHubName": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'eventHubName')]",
                "marketplacePartnerId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'marketplacePartnerResourceId')]",
                "logAnalyticsDestinationType": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logAnalyticsDestinationType')]"
              },
              "dependsOn": [
                "workspace"
              ]
            },
            "workspace_roleAssignments": {
              "copy": {
                "name": "workspace_roleAssignments",
                "count": "[length(coalesce(variables('formattedRoleAssignments'), createArray()))]"
              },
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.Databricks/workspaces/{0}', parameters('name'))]",
              "name": "[coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'name'), guid(resourceId('Microsoft.Databricks/workspaces', parameters('name')), coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId, coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId))]",
              "properties": {
                "roleDefinitionId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId]",
                "principalId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId]",
                "description": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'description')]",
                "principalType": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'principalType')]",
                "condition": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition')]",
                "conditionVersion": "[if(not(empty(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                "delegatedManagedIdentityResourceId": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
              },
              "dependsOn": [
                "workspace"
              ]
            },
            "workspace_privateEndpoints": {
              "copy": {
                "name": "workspace_privateEndpoints",
                "count": "[length(coalesce(parameters('privateEndpoints'), createArray()))]",
                "mode": "serial",
                "batchSize": 1
              },
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('{0}-workspace-PrivateEndpoint-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
              "resourceGroup": "[coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'resourceGroupName'), '')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "name": {
                    "value": "[coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'name'), format('pep-{0}-{1}-{2}', last(split(resourceId('Microsoft.Databricks/workspaces', parameters('name')), '/')), coalesce(parameters('privateEndpoints'), createArray())[copyIndex()].service, copyIndex()))]"
                  },
                  "privateLinkServiceConnections": "[if(not(equals(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'isManualConnection'), true())), createObject('value', createArray(createObject('name', coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'privateLinkServiceConnectionName'), format('{0}-{1}-{2}', last(split(resourceId('Microsoft.Databricks/workspaces', parameters('name')), '/')), coalesce(parameters('privateEndpoints'), createArray())[copyIndex()].service, copyIndex())), 'properties', createObject('privateLinkServiceId', resourceId('Microsoft.Databricks/workspaces', parameters('name')), 'groupIds', createArray(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()].service))))), createObject('value', null()))]",
                  "manualPrivateLinkServiceConnections": "[if(equals(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'isManualConnection'), true()), createObject('value', createArray(createObject('name', coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'privateLinkServiceConnectionName'), format('{0}-{1}-{2}', last(split(resourceId('Microsoft.Databricks/workspaces', parameters('name')), '/')), coalesce(parameters('privateEndpoints'), createArray())[copyIndex()].service, copyIndex())), 'properties', createObject('privateLinkServiceId', resourceId('Microsoft.Databricks/workspaces', parameters('name')), 'groupIds', createArray(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()].service), 'requestMessage', coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'manualConnectionRequestMessage'), 'Manual approval required.'))))), createObject('value', null()))]",
                  "subnetResourceId": {
                    "value": "[coalesce(parameters('privateEndpoints'), createArray())[copyIndex()].subnetResourceId]"
                  },
                  "enableTelemetry": {
                    "value": "[coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'enableTelemetry'), parameters('enableTelemetry'))]"
                  },
                  "location": {
                    "value": "[coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'location'), reference(split(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()].subnetResourceId, '/subnets/')[0], '2020-06-01', 'Full').location)]"
                  },
                  "lock": {
                    "value": "[coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'lock'), parameters('lock'))]"
                  },
                  "privateDnsZoneGroupName": {
                    "value": "[tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'privateDnsZoneGroupName')]"
                  },
                  "privateDnsZoneResourceIds": {
                    "value": "[tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'privateDnsZoneResourceIds')]"
                  },
                  "roleAssignments": {
                    "value": "[tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'roleAssignments')]"
                  },
                  "tags": {
                    "value": "[coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'tags'), parameters('tags'))]"
                  },
                  "customDnsConfigs": {
                    "value": "[tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'customDnsConfigs')]"
                  },
                  "ipConfigurations": {
                    "value": "[tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'ipConfigurations')]"
                  },
                  "applicationSecurityGroupResourceIds": {
                    "value": "[tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'applicationSecurityGroupResourceIds')]"
                  },
                  "customNetworkInterfaceName": {
                    "value": "[tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'customNetworkInterfaceName')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "languageVersion": "2.0",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.29.47.4906",
                      "templateHash": "13720311665093076615"
                    },
                    "name": "Private Endpoints",
                    "description": "This module deploys a Private Endpoint.",
                    "owner": "Azure/module-maintainers"
                  },
                  "definitions": {
                    "roleAssignmentType": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "name": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The name (as GUID) of the role assignment. If not provided, a GUID will be generated."
                            }
                          },
                          "roleDefinitionIdOrName": {
                            "type": "string",
                            "metadata": {
                              "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                            }
                          },
                          "principalId": {
                            "type": "string",
                            "metadata": {
                              "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                            }
                          },
                          "principalType": {
                            "type": "string",
                            "allowedValues": [
                              "Device",
                              "ForeignGroup",
                              "Group",
                              "ServicePrincipal",
                              "User"
                            ],
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The principal type of the assigned principal ID."
                            }
                          },
                          "description": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The description of the role assignment."
                            }
                          },
                          "condition": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                            }
                          },
                          "conditionVersion": {
                            "type": "string",
                            "allowedValues": [
                              "2.0"
                            ],
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. Version of the condition."
                            }
                          },
                          "delegatedManagedIdentityResourceId": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The Resource Id of the delegated managed identity resource."
                            }
                          }
                        }
                      },
                      "nullable": true
                    },
                    "lockType": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Specify the name of lock."
                          }
                        },
                        "kind": {
                          "type": "string",
                          "allowedValues": [
                            "CanNotDelete",
                            "None",
                            "ReadOnly"
                          ],
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Specify the type of lock."
                          }
                        }
                      },
                      "nullable": true
                    },
                    "ipConfigurationsType": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "name": {
                            "type": "string",
                            "metadata": {
                              "description": "Required. The name of the resource that is unique within a resource group."
                            }
                          },
                          "properties": {
                            "type": "object",
                            "properties": {
                              "groupId": {
                                "type": "string",
                                "metadata": {
                                  "description": "Required. The ID of a group obtained from the remote resource that this private endpoint should connect to. If used with private link service connection, this property must be defined as empty string."
                                }
                              },
                              "memberName": {
                                "type": "string",
                                "metadata": {
                                  "description": "Required. The member name of a group obtained from the remote resource that this private endpoint should connect to. If used with private link service connection, this property must be defined as empty string."
                                }
                              },
                              "privateIPAddress": {
                                "type": "string",
                                "metadata": {
                                  "description": "Required. A private IP address obtained from the private endpoint's subnet."
                                }
                              }
                            },
                            "metadata": {
                              "description": "Required. Properties of private endpoint IP configurations."
                            }
                          }
                        }
                      },
                      "nullable": true
                    },
                    "manualPrivateLinkServiceConnectionsType": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "name": {
                            "type": "string",
                            "metadata": {
                              "description": "Required. The name of the private link service connection."
                            }
                          },
                          "properties": {
                            "type": "object",
                            "properties": {
                              "groupIds": {
                                "type": "array",
                                "items": {
                                  "type": "string"
                                },
                                "metadata": {
                                  "description": "Required. The ID of a group obtained from the remote resource that this private endpoint should connect to. If used with private link service connection, this property must be defined as empty string array `[]`."
                                }
                              },
                              "privateLinkServiceId": {
                                "type": "string",
                                "metadata": {
                                  "description": "Required. The resource id of private link service."
                                }
                              },
                              "requestMessage": {
                                "type": "string",
                                "metadata": {
                                  "description": "Optional. A message passed to the owner of the remote resource with this connection request. Restricted to 140 chars."
                                }
                              }
                            },
                            "metadata": {
                              "description": "Required. Properties of private link service connection."
                            }
                          }
                        }
                      },
                      "nullable": true
                    },
                    "privateLinkServiceConnectionsType": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "name": {
                            "type": "string",
                            "metadata": {
                              "description": "Required. The name of the private link service connection."
                            }
                          },
                          "properties": {
                            "type": "object",
                            "properties": {
                              "groupIds": {
                                "type": "array",
                                "items": {
                                  "type": "string"
                                },
                                "metadata": {
                                  "description": "Required. The ID of a group obtained from the remote resource that this private endpoint should connect to. If used with private link service connection, this property must be defined as empty string array `[]`."
                                }
                              },
                              "privateLinkServiceId": {
                                "type": "string",
                                "metadata": {
                                  "description": "Required. The resource id of private link service."
                                }
                              },
                              "requestMessage": {
                                "type": "string",
                                "nullable": true,
                                "metadata": {
                                  "description": "Optional. A message passed to the owner of the remote resource with this connection request. Restricted to 140 chars."
                                }
                              }
                            },
                            "metadata": {
                              "description": "Required. Properties of private link service connection."
                            }
                          }
                        }
                      },
                      "nullable": true
                    },
                    "customDnsConfigType": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "fqdn": {
                            "type": "string",
                            "metadata": {
                              "description": "Required. Fqdn that resolves to private endpoint IP address."
                            }
                          },
                          "ipAddresses": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            },
                            "metadata": {
                              "description": "Required. A list of private IP addresses of the private endpoint."
                            }
                          }
                        }
                      },
                      "nullable": true
                    }
                  },
                  "parameters": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Name of the private endpoint resource to create."
                      }
                    },
                    "subnetResourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Resource ID of the subnet where the endpoint needs to be created."
                      }
                    },
                    "applicationSecurityGroupResourceIds": {
                      "type": "array",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Application security groups in which the private endpoint IP configuration is included."
                      }
                    },
                    "customNetworkInterfaceName": {
                      "type": "string",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The custom name of the network interface attached to the private endpoint."
                      }
                    },
                    "ipConfigurations": {
                      "$ref": "#/definitions/ipConfigurationsType",
                      "metadata": {
                        "description": "Optional. A list of IP configurations of the private endpoint. This will be used to map to the First Party Service endpoints."
                      }
                    },
                    "privateDnsZoneGroupName": {
                      "type": "string",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The name of the private DNS zone group to create if `privateDnsZoneResourceIds` were provided."
                      }
                    },
                    "privateDnsZoneResourceIds": {
                      "type": "array",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The private DNS zone groups to associate the private endpoint. A DNS zone group can support up to 5 DNS zones."
                      }
                    },
                    "location": {
                      "type": "string",
                      "defaultValue": "[resourceGroup().location]",
                      "metadata": {
                        "description": "Optional. Location for all Resources."
                      }
                    },
                    "lock": {
                      "$ref": "#/definitions/lockType",
                      "metadata": {
                        "description": "Optional. The lock settings of the service."
                      }
                    },
                    "roleAssignments": {
                      "$ref": "#/definitions/roleAssignmentType",
                      "metadata": {
                        "description": "Optional. Array of role assignments to create."
                      }
                    },
                    "tags": {
                      "type": "object",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Tags to be applied on all resources/resource groups in this deployment."
                      }
                    },
                    "customDnsConfigs": {
                      "$ref": "#/definitions/customDnsConfigType",
                      "metadata": {
                        "description": "Optional. Custom DNS configurations."
                      }
                    },
                    "manualPrivateLinkServiceConnections": {
                      "$ref": "#/definitions/manualPrivateLinkServiceConnectionsType",
                      "metadata": {
                        "description": "Optional. A grouping of information about the connection to the remote resource. Used when the network admin does not have access to approve connections to the remote resource."
                      }
                    },
                    "privateLinkServiceConnections": {
                      "$ref": "#/definitions/privateLinkServiceConnectionsType",
                      "metadata": {
                        "description": "Optional. A grouping of information about the connection to the remote resource."
                      }
                    },
                    "enableTelemetry": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "Optional. Enable/Disable usage telemetry for module."
                      }
                    }
                  },
                  "variables": {
                    "copy": [
                      {
                        "name": "formattedRoleAssignments",
                        "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]",
                        "input": "[union(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')], createObject('roleDefinitionId', coalesce(tryGet(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName), if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName)))))]"
                      }
                    ],
                    "builtInRoleNames": {
                      "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                      "DNS Resolver Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '0f2ebee7-ffd4-4fc0-b3b7-664099fdad5d')]",
                      "DNS Zone Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'befefa01-2a29-4197-83a8-272ff33ce314')]",
                      "Domain Services Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'eeaeda52-9324-47f6-8069-5d5bade478b2')]",
                      "Domain Services Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '361898ef-9ed1-48c2-849c-a832951106bb')]",
                      "Network Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4d97b98b-1d4f-4787-a291-c67834d212e7')]",
                      "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                      "Private DNS Zone Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b12aa53e-6015-4669-85d0-8515ebb3ae7f')]",
                      "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                      "Role Based Access Control Administrator (Preview)": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]"
                    }
                  },
                  "resources": {
                    "avmTelemetry": {
                      "condition": "[parameters('enableTelemetry')]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2024-03-01",
                      "name": "[format('46d3xbcp.res.network-privateendpoint.{0}.{1}', replace('0.6.1', '.', '-'), substring(uniqueString(deployment().name, parameters('location')), 0, 4))]",
                      "properties": {
                        "mode": "Incremental",
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "resources": [],
                          "outputs": {
                            "telemetry": {
                              "type": "String",
                              "value": "For more information, see https://aka.ms/avm/TelemetryInfo"
                            }
                          }
                        }
                      }
                    },
                    "privateEndpoint": {
                      "type": "Microsoft.Network/privateEndpoints",
                      "apiVersion": "2023-11-01",
                      "name": "[parameters('name')]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]",
                      "properties": {
                        "copy": [
                          {
                            "name": "applicationSecurityGroups",
                            "count": "[length(coalesce(parameters('applicationSecurityGroupResourceIds'), createArray()))]",
                            "input": {
                              "id": "[coalesce(parameters('applicationSecurityGroupResourceIds'), createArray())[copyIndex('applicationSecurityGroups')]]"
                            }
                          }
                        ],
                        "customDnsConfigs": "[coalesce(parameters('customDnsConfigs'), createArray())]",
                        "customNetworkInterfaceName": "[coalesce(parameters('customNetworkInterfaceName'), '')]",
                        "ipConfigurations": "[coalesce(parameters('ipConfigurations'), createArray())]",
                        "manualPrivateLinkServiceConnections": "[coalesce(parameters('manualPrivateLinkServiceConnections'), createArray())]",
                        "privateLinkServiceConnections": "[coalesce(parameters('privateLinkServiceConnections'), createArray())]",
                        "subnet": {
                          "id": "[parameters('subnetResourceId')]"
                        }
                      }
                    },
                    "privateEndpoint_lock": {
                      "condition": "[and(not(empty(coalesce(parameters('lock'), createObject()))), not(equals(tryGet(parameters('lock'), 'kind'), 'None')))]",
                      "type": "Microsoft.Authorization/locks",
                      "apiVersion": "2020-05-01",
                      "scope": "[format('Microsoft.Network/privateEndpoints/{0}', parameters('name'))]",
                      "name": "[coalesce(tryGet(parameters('lock'), 'name'), format('lock-{0}', parameters('name')))]",
                      "properties": {
                        "level": "[coalesce(tryGet(parameters('lock'), 'kind'), '')]",
                        "notes": "[if(equals(tryGet(parameters('lock'), 'kind'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot delete or modify the resource or child resources.')]"
                      },
                      "dependsOn": [
                        "privateEndpoint"
                      ]
                    },
                    "privateEndpoint_roleAssignments": {
                      "copy": {
                        "name": "privateEndpoint_roleAssignments",
                        "count": "[length(coalesce(variables('formattedRoleAssignments'), createArray()))]"
                      },
                      "type": "Microsoft.Authorization/roleAssignments",
                      "apiVersion": "2022-04-01",
                      "scope": "[format('Microsoft.Network/privateEndpoints/{0}', parameters('name'))]",
                      "name": "[coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'name'), guid(resourceId('Microsoft.Network/privateEndpoints', parameters('name')), coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId, coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId))]",
                      "properties": {
                        "roleDefinitionId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId]",
                        "principalId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId]",
                        "description": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'description')]",
                        "principalType": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'principalType')]",
                        "condition": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition')]",
                        "conditionVersion": "[if(not(empty(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                        "delegatedManagedIdentityResourceId": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
                      },
                      "dependsOn": [
                        "privateEndpoint"
                      ]
                    },
                    "privateEndpoint_privateDnsZoneGroup": {
                      "condition": "[not(empty(parameters('privateDnsZoneResourceIds')))]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('{0}-PrivateEndpoint-PrivateDnsZoneGroup', uniqueString(deployment().name))]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "name": {
                            "value": "[coalesce(parameters('privateDnsZoneGroupName'), 'default')]"
                          },
                          "privateDNSResourceIds": {
                            "value": "[coalesce(parameters('privateDnsZoneResourceIds'), createArray())]"
                          },
                          "privateEndpointName": {
                            "value": "[parameters('name')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.29.47.4906",
                              "templateHash": "15263454436186512874"
                            },
                            "name": "Private Endpoint Private DNS Zone Groups",
                            "description": "This module deploys a Private Endpoint Private DNS Zone Group.",
                            "owner": "Azure/module-maintainers"
                          },
                          "parameters": {
                            "privateEndpointName": {
                              "type": "string",
                              "metadata": {
                                "description": "Conditional. The name of the parent private endpoint. Required if the template is used in a standalone deployment."
                              }
                            },
                            "privateDNSResourceIds": {
                              "type": "array",
                              "minLength": 1,
                              "maxLength": 5,
                              "metadata": {
                                "description": "Required. Array of private DNS zone resource IDs. A DNS zone group can support up to 5 DNS zones."
                              }
                            },
                            "name": {
                              "type": "string",
                              "defaultValue": "default",
                              "metadata": {
                                "description": "Optional. The name of the private DNS zone group."
                              }
                            }
                          },
                          "variables": {
                            "copy": [
                              {
                                "name": "privateDnsZoneConfigs",
                                "count": "[length(parameters('privateDNSResourceIds'))]",
                                "input": {
                                  "name": "[last(split(parameters('privateDNSResourceIds')[copyIndex('privateDnsZoneConfigs')], '/'))]",
                                  "properties": {
                                    "privateDnsZoneId": "[parameters('privateDNSResourceIds')[copyIndex('privateDnsZoneConfigs')]]"
                                  }
                                }
                              }
                            ]
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
                              "apiVersion": "2023-11-01",
                              "name": "[format('{0}/{1}', parameters('privateEndpointName'), parameters('name'))]",
                              "properties": {
                                "privateDnsZoneConfigs": "[variables('privateDnsZoneConfigs')]"
                              }
                            }
                          ],
                          "outputs": {
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "The name of the private endpoint DNS zone group."
                              },
                              "value": "[parameters('name')]"
                            },
                            "resourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource ID of the private endpoint DNS zone group."
                              },
                              "value": "[resourceId('Microsoft.Network/privateEndpoints/privateDnsZoneGroups', parameters('privateEndpointName'), parameters('name'))]"
                            },
                            "resourceGroupName": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource group the private endpoint DNS zone group was deployed into."
                              },
                              "value": "[resourceGroup().name]"
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "privateEndpoint"
                      ]
                    }
                  },
                  "outputs": {
                    "resourceGroupName": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource group the private endpoint was deployed into."
                      },
                      "value": "[resourceGroup().name]"
                    },
                    "resourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the private endpoint."
                      },
                      "value": "[resourceId('Microsoft.Network/privateEndpoints', parameters('name'))]"
                    },
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the private endpoint."
                      },
                      "value": "[parameters('name')]"
                    },
                    "location": {
                      "type": "string",
                      "metadata": {
                        "description": "The location the resource was deployed into."
                      },
                      "value": "[reference('privateEndpoint', '2023-11-01', 'full').location]"
                    },
                    "customDnsConfig": {
                      "$ref": "#/definitions/customDnsConfigType",
                      "metadata": {
                        "description": "The custom DNS configurations of the private endpoint."
                      },
                      "value": "[reference('privateEndpoint').customDnsConfigs]"
                    },
                    "groupId": {
                      "type": "string",
                      "metadata": {
                        "description": "The group Id for the private endpoint Group."
                      },
                      "value": "[if(and(not(empty(reference('privateEndpoint').manualPrivateLinkServiceConnections)), greater(length(tryGet(reference('privateEndpoint').manualPrivateLinkServiceConnections[0].properties, 'groupIds')), 0)), coalesce(tryGet(reference('privateEndpoint').manualPrivateLinkServiceConnections[0].properties, 'groupIds', 0), ''), if(and(not(empty(reference('privateEndpoint').privateLinkServiceConnections)), greater(length(tryGet(reference('privateEndpoint').privateLinkServiceConnections[0].properties, 'groupIds')), 0)), coalesce(tryGet(reference('privateEndpoint').privateLinkServiceConnections[0].properties, 'groupIds', 0), ''), ''))]"
                    }
                  }
                }
              },
              "dependsOn": [
                "workspace"
              ]
            },
            "storageAccount_privateEndpoints": {
              "copy": {
                "name": "storageAccount_privateEndpoints",
                "count": "[length(coalesce(parameters('storageAccountPrivateEndpoints'), createArray()))]",
                "mode": "serial",
                "batchSize": 1
              },
              "condition": "[equals(parameters('privateStorageAccount'), 'Enabled')]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('{0}-workspacestorage-PrivateEndpoint-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
              "resourceGroup": "[coalesce(tryGet(coalesce(parameters('storageAccountPrivateEndpoints'), createArray())[copyIndex()], 'resourceGroupName'), '')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "name": {
                    "value": "[coalesce(tryGet(coalesce(parameters('storageAccountPrivateEndpoints'), createArray())[copyIndex()], 'name'), format('pep-{0}-{1}-{2}', reference('workspace').parameters.storageAccountName.value, coalesce(parameters('storageAccountPrivateEndpoints'), createArray())[copyIndex()].service, copyIndex()))]"
                  },
                  "privateLinkServiceConnections": "[if(not(equals(tryGet(coalesce(parameters('storageAccountPrivateEndpoints'), createArray())[copyIndex()], 'isManualConnection'), true())), createObject('value', createArray(createObject('name', coalesce(tryGet(coalesce(parameters('storageAccountPrivateEndpoints'), createArray())[copyIndex()], 'privateLinkServiceConnectionName'), format('{0}-{1}-{2}', reference('workspace').parameters.storageAccountName.value, coalesce(parameters('storageAccountPrivateEndpoints'), createArray())[copyIndex()].service, copyIndex())), 'properties', createObject('privateLinkServiceId', resourceId(last(split(reference('workspace').managedResourceGroupId, '/')), 'microsoft.storage/storageAccounts', reference('workspace').parameters.storageAccountName.value), 'groupIds', createArray(coalesce(parameters('storageAccountPrivateEndpoints'), createArray())[copyIndex()].service))))), createObject('value', null()))]",
                  "manualPrivateLinkServiceConnections": "[if(equals(tryGet(coalesce(parameters('storageAccountPrivateEndpoints'), createArray())[copyIndex()], 'isManualConnection'), true()), createObject('value', createArray(createObject('name', coalesce(tryGet(coalesce(parameters('storageAccountPrivateEndpoints'), createArray())[copyIndex()], 'privateLinkServiceConnectionName'), format('{0}-{1}-{2}', reference('workspace').parameters.storageAccountName.value, coalesce(parameters('storageAccountPrivateEndpoints'), createArray())[copyIndex()].service, copyIndex())), 'properties', createObject('privateLinkServiceId', resourceId(last(split(reference('workspace').managedResourceGroupId, '/')), 'microsoft.storage/storageAccounts', reference('workspace').parameters.storageAccountName.value), 'groupIds', createArray(coalesce(parameters('storageAccountPrivateEndpoints'), createArray())[copyIndex()].service), 'requestMessage', coalesce(tryGet(coalesce(parameters('storageAccountPrivateEndpoints'), createArray())[copyIndex()], 'manualConnectionRequestMessage'), 'Manual approval required.'))))), createObject('value', null()))]",
                  "subnetResourceId": {
                    "value": "[coalesce(parameters('storageAccountPrivateEndpoints'), createArray())[copyIndex()].subnetResourceId]"
                  },
                  "enableTelemetry": {
                    "value": "[coalesce(tryGet(coalesce(parameters('storageAccountPrivateEndpoints'), createArray())[copyIndex()], 'enableTelemetry'), parameters('enableTelemetry'))]"
                  },
                  "location": {
                    "value": "[coalesce(tryGet(coalesce(parameters('storageAccountPrivateEndpoints'), createArray())[copyIndex()], 'location'), reference(split(coalesce(parameters('storageAccountPrivateEndpoints'), createArray())[copyIndex()].subnetResourceId, '/subnets/')[0], '2020-06-01', 'Full').location)]"
                  },
                  "lock": {
                    "value": "[coalesce(tryGet(coalesce(parameters('storageAccountPrivateEndpoints'), createArray())[copyIndex()], 'lock'), parameters('lock'))]"
                  },
                  "privateDnsZoneGroupName": {
                    "value": "[tryGet(coalesce(parameters('storageAccountPrivateEndpoints'), createArray())[copyIndex()], 'privateDnsZoneGroupName')]"
                  },
                  "privateDnsZoneResourceIds": {
                    "value": "[tryGet(coalesce(parameters('storageAccountPrivateEndpoints'), createArray())[copyIndex()], 'privateDnsZoneResourceIds')]"
                  },
                  "roleAssignments": {
                    "value": "[tryGet(coalesce(parameters('storageAccountPrivateEndpoints'), createArray())[copyIndex()], 'roleAssignments')]"
                  },
                  "tags": {
                    "value": "[coalesce(tryGet(coalesce(parameters('storageAccountPrivateEndpoints'), createArray())[copyIndex()], 'tags'), parameters('tags'))]"
                  },
                  "customDnsConfigs": {
                    "value": "[tryGet(coalesce(parameters('storageAccountPrivateEndpoints'), createArray())[copyIndex()], 'customDnsConfigs')]"
                  },
                  "ipConfigurations": {
                    "value": "[tryGet(coalesce(parameters('storageAccountPrivateEndpoints'), createArray())[copyIndex()], 'ipConfigurations')]"
                  },
                  "applicationSecurityGroupResourceIds": {
                    "value": "[tryGet(coalesce(parameters('storageAccountPrivateEndpoints'), createArray())[copyIndex()], 'applicationSecurityGroupResourceIds')]"
                  },
                  "customNetworkInterfaceName": {
                    "value": "[tryGet(coalesce(parameters('storageAccountPrivateEndpoints'), createArray())[copyIndex()], 'customNetworkInterfaceName')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "languageVersion": "2.0",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.29.47.4906",
                      "templateHash": "13720311665093076615"
                    },
                    "name": "Private Endpoints",
                    "description": "This module deploys a Private Endpoint.",
                    "owner": "Azure/module-maintainers"
                  },
                  "definitions": {
                    "roleAssignmentType": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "name": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The name (as GUID) of the role assignment. If not provided, a GUID will be generated."
                            }
                          },
                          "roleDefinitionIdOrName": {
                            "type": "string",
                            "metadata": {
                              "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                            }
                          },
                          "principalId": {
                            "type": "string",
                            "metadata": {
                              "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                            }
                          },
                          "principalType": {
                            "type": "string",
                            "allowedValues": [
                              "Device",
                              "ForeignGroup",
                              "Group",
                              "ServicePrincipal",
                              "User"
                            ],
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The principal type of the assigned principal ID."
                            }
                          },
                          "description": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The description of the role assignment."
                            }
                          },
                          "condition": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                            }
                          },
                          "conditionVersion": {
                            "type": "string",
                            "allowedValues": [
                              "2.0"
                            ],
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. Version of the condition."
                            }
                          },
                          "delegatedManagedIdentityResourceId": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The Resource Id of the delegated managed identity resource."
                            }
                          }
                        }
                      },
                      "nullable": true
                    },
                    "lockType": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Specify the name of lock."
                          }
                        },
                        "kind": {
                          "type": "string",
                          "allowedValues": [
                            "CanNotDelete",
                            "None",
                            "ReadOnly"
                          ],
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Specify the type of lock."
                          }
                        }
                      },
                      "nullable": true
                    },
                    "ipConfigurationsType": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "name": {
                            "type": "string",
                            "metadata": {
                              "description": "Required. The name of the resource that is unique within a resource group."
                            }
                          },
                          "properties": {
                            "type": "object",
                            "properties": {
                              "groupId": {
                                "type": "string",
                                "metadata": {
                                  "description": "Required. The ID of a group obtained from the remote resource that this private endpoint should connect to. If used with private link service connection, this property must be defined as empty string."
                                }
                              },
                              "memberName": {
                                "type": "string",
                                "metadata": {
                                  "description": "Required. The member name of a group obtained from the remote resource that this private endpoint should connect to. If used with private link service connection, this property must be defined as empty string."
                                }
                              },
                              "privateIPAddress": {
                                "type": "string",
                                "metadata": {
                                  "description": "Required. A private IP address obtained from the private endpoint's subnet."
                                }
                              }
                            },
                            "metadata": {
                              "description": "Required. Properties of private endpoint IP configurations."
                            }
                          }
                        }
                      },
                      "nullable": true
                    },
                    "manualPrivateLinkServiceConnectionsType": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "name": {
                            "type": "string",
                            "metadata": {
                              "description": "Required. The name of the private link service connection."
                            }
                          },
                          "properties": {
                            "type": "object",
                            "properties": {
                              "groupIds": {
                                "type": "array",
                                "items": {
                                  "type": "string"
                                },
                                "metadata": {
                                  "description": "Required. The ID of a group obtained from the remote resource that this private endpoint should connect to. If used with private link service connection, this property must be defined as empty string array `[]`."
                                }
                              },
                              "privateLinkServiceId": {
                                "type": "string",
                                "metadata": {
                                  "description": "Required. The resource id of private link service."
                                }
                              },
                              "requestMessage": {
                                "type": "string",
                                "metadata": {
                                  "description": "Optional. A message passed to the owner of the remote resource with this connection request. Restricted to 140 chars."
                                }
                              }
                            },
                            "metadata": {
                              "description": "Required. Properties of private link service connection."
                            }
                          }
                        }
                      },
                      "nullable": true
                    },
                    "privateLinkServiceConnectionsType": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "name": {
                            "type": "string",
                            "metadata": {
                              "description": "Required. The name of the private link service connection."
                            }
                          },
                          "properties": {
                            "type": "object",
                            "properties": {
                              "groupIds": {
                                "type": "array",
                                "items": {
                                  "type": "string"
                                },
                                "metadata": {
                                  "description": "Required. The ID of a group obtained from the remote resource that this private endpoint should connect to. If used with private link service connection, this property must be defined as empty string array `[]`."
                                }
                              },
                              "privateLinkServiceId": {
                                "type": "string",
                                "metadata": {
                                  "description": "Required. The resource id of private link service."
                                }
                              },
                              "requestMessage": {
                                "type": "string",
                                "nullable": true,
                                "metadata": {
                                  "description": "Optional. A message passed to the owner of the remote resource with this connection request. Restricted to 140 chars."
                                }
                              }
                            },
                            "metadata": {
                              "description": "Required. Properties of private link service connection."
                            }
                          }
                        }
                      },
                      "nullable": true
                    },
                    "customDnsConfigType": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "fqdn": {
                            "type": "string",
                            "metadata": {
                              "description": "Required. Fqdn that resolves to private endpoint IP address."
                            }
                          },
                          "ipAddresses": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            },
                            "metadata": {
                              "description": "Required. A list of private IP addresses of the private endpoint."
                            }
                          }
                        }
                      },
                      "nullable": true
                    }
                  },
                  "parameters": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Name of the private endpoint resource to create."
                      }
                    },
                    "subnetResourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Resource ID of the subnet where the endpoint needs to be created."
                      }
                    },
                    "applicationSecurityGroupResourceIds": {
                      "type": "array",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Application security groups in which the private endpoint IP configuration is included."
                      }
                    },
                    "customNetworkInterfaceName": {
                      "type": "string",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The custom name of the network interface attached to the private endpoint."
                      }
                    },
                    "ipConfigurations": {
                      "$ref": "#/definitions/ipConfigurationsType",
                      "metadata": {
                        "description": "Optional. A list of IP configurations of the private endpoint. This will be used to map to the First Party Service endpoints."
                      }
                    },
                    "privateDnsZoneGroupName": {
                      "type": "string",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The name of the private DNS zone group to create if `privateDnsZoneResourceIds` were provided."
                      }
                    },
                    "privateDnsZoneResourceIds": {
                      "type": "array",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The private DNS zone groups to associate the private endpoint. A DNS zone group can support up to 5 DNS zones."
                      }
                    },
                    "location": {
                      "type": "string",
                      "defaultValue": "[resourceGroup().location]",
                      "metadata": {
                        "description": "Optional. Location for all Resources."
                      }
                    },
                    "lock": {
                      "$ref": "#/definitions/lockType",
                      "metadata": {
                        "description": "Optional. The lock settings of the service."
                      }
                    },
                    "roleAssignments": {
                      "$ref": "#/definitions/roleAssignmentType",
                      "metadata": {
                        "description": "Optional. Array of role assignments to create."
                      }
                    },
                    "tags": {
                      "type": "object",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Tags to be applied on all resources/resource groups in this deployment."
                      }
                    },
                    "customDnsConfigs": {
                      "$ref": "#/definitions/customDnsConfigType",
                      "metadata": {
                        "description": "Optional. Custom DNS configurations."
                      }
                    },
                    "manualPrivateLinkServiceConnections": {
                      "$ref": "#/definitions/manualPrivateLinkServiceConnectionsType",
                      "metadata": {
                        "description": "Optional. A grouping of information about the connection to the remote resource. Used when the network admin does not have access to approve connections to the remote resource."
                      }
                    },
                    "privateLinkServiceConnections": {
                      "$ref": "#/definitions/privateLinkServiceConnectionsType",
                      "metadata": {
                        "description": "Optional. A grouping of information about the connection to the remote resource."
                      }
                    },
                    "enableTelemetry": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "Optional. Enable/Disable usage telemetry for module."
                      }
                    }
                  },
                  "variables": {
                    "copy": [
                      {
                        "name": "formattedRoleAssignments",
                        "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]",
                        "input": "[union(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')], createObject('roleDefinitionId', coalesce(tryGet(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName), if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName)))))]"
                      }
                    ],
                    "builtInRoleNames": {
                      "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                      "DNS Resolver Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '0f2ebee7-ffd4-4fc0-b3b7-664099fdad5d')]",
                      "DNS Zone Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'befefa01-2a29-4197-83a8-272ff33ce314')]",
                      "Domain Services Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'eeaeda52-9324-47f6-8069-5d5bade478b2')]",
                      "Domain Services Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '361898ef-9ed1-48c2-849c-a832951106bb')]",
                      "Network Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4d97b98b-1d4f-4787-a291-c67834d212e7')]",
                      "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                      "Private DNS Zone Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b12aa53e-6015-4669-85d0-8515ebb3ae7f')]",
                      "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                      "Role Based Access Control Administrator (Preview)": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]"
                    }
                  },
                  "resources": {
                    "avmTelemetry": {
                      "condition": "[parameters('enableTelemetry')]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2024-03-01",
                      "name": "[format('46d3xbcp.res.network-privateendpoint.{0}.{1}', replace('0.6.1', '.', '-'), substring(uniqueString(deployment().name, parameters('location')), 0, 4))]",
                      "properties": {
                        "mode": "Incremental",
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "resources": [],
                          "outputs": {
                            "telemetry": {
                              "type": "String",
                              "value": "For more information, see https://aka.ms/avm/TelemetryInfo"
                            }
                          }
                        }
                      }
                    },
                    "privateEndpoint": {
                      "type": "Microsoft.Network/privateEndpoints",
                      "apiVersion": "2023-11-01",
                      "name": "[parameters('name')]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]",
                      "properties": {
                        "copy": [
                          {
                            "name": "applicationSecurityGroups",
                            "count": "[length(coalesce(parameters('applicationSecurityGroupResourceIds'), createArray()))]",
                            "input": {
                              "id": "[coalesce(parameters('applicationSecurityGroupResourceIds'), createArray())[copyIndex('applicationSecurityGroups')]]"
                            }
                          }
                        ],
                        "customDnsConfigs": "[coalesce(parameters('customDnsConfigs'), createArray())]",
                        "customNetworkInterfaceName": "[coalesce(parameters('customNetworkInterfaceName'), '')]",
                        "ipConfigurations": "[coalesce(parameters('ipConfigurations'), createArray())]",
                        "manualPrivateLinkServiceConnections": "[coalesce(parameters('manualPrivateLinkServiceConnections'), createArray())]",
                        "privateLinkServiceConnections": "[coalesce(parameters('privateLinkServiceConnections'), createArray())]",
                        "subnet": {
                          "id": "[parameters('subnetResourceId')]"
                        }
                      }
                    },
                    "privateEndpoint_lock": {
                      "condition": "[and(not(empty(coalesce(parameters('lock'), createObject()))), not(equals(tryGet(parameters('lock'), 'kind'), 'None')))]",
                      "type": "Microsoft.Authorization/locks",
                      "apiVersion": "2020-05-01",
                      "scope": "[format('Microsoft.Network/privateEndpoints/{0}', parameters('name'))]",
                      "name": "[coalesce(tryGet(parameters('lock'), 'name'), format('lock-{0}', parameters('name')))]",
                      "properties": {
                        "level": "[coalesce(tryGet(parameters('lock'), 'kind'), '')]",
                        "notes": "[if(equals(tryGet(parameters('lock'), 'kind'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot delete or modify the resource or child resources.')]"
                      },
                      "dependsOn": [
                        "privateEndpoint"
                      ]
                    },
                    "privateEndpoint_roleAssignments": {
                      "copy": {
                        "name": "privateEndpoint_roleAssignments",
                        "count": "[length(coalesce(variables('formattedRoleAssignments'), createArray()))]"
                      },
                      "type": "Microsoft.Authorization/roleAssignments",
                      "apiVersion": "2022-04-01",
                      "scope": "[format('Microsoft.Network/privateEndpoints/{0}', parameters('name'))]",
                      "name": "[coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'name'), guid(resourceId('Microsoft.Network/privateEndpoints', parameters('name')), coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId, coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId))]",
                      "properties": {
                        "roleDefinitionId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId]",
                        "principalId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId]",
                        "description": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'description')]",
                        "principalType": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'principalType')]",
                        "condition": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition')]",
                        "conditionVersion": "[if(not(empty(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                        "delegatedManagedIdentityResourceId": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
                      },
                      "dependsOn": [
                        "privateEndpoint"
                      ]
                    },
                    "privateEndpoint_privateDnsZoneGroup": {
                      "condition": "[not(empty(parameters('privateDnsZoneResourceIds')))]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('{0}-PrivateEndpoint-PrivateDnsZoneGroup', uniqueString(deployment().name))]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "name": {
                            "value": "[coalesce(parameters('privateDnsZoneGroupName'), 'default')]"
                          },
                          "privateDNSResourceIds": {
                            "value": "[coalesce(parameters('privateDnsZoneResourceIds'), createArray())]"
                          },
                          "privateEndpointName": {
                            "value": "[parameters('name')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.29.47.4906",
                              "templateHash": "15263454436186512874"
                            },
                            "name": "Private Endpoint Private DNS Zone Groups",
                            "description": "This module deploys a Private Endpoint Private DNS Zone Group.",
                            "owner": "Azure/module-maintainers"
                          },
                          "parameters": {
                            "privateEndpointName": {
                              "type": "string",
                              "metadata": {
                                "description": "Conditional. The name of the parent private endpoint. Required if the template is used in a standalone deployment."
                              }
                            },
                            "privateDNSResourceIds": {
                              "type": "array",
                              "minLength": 1,
                              "maxLength": 5,
                              "metadata": {
                                "description": "Required. Array of private DNS zone resource IDs. A DNS zone group can support up to 5 DNS zones."
                              }
                            },
                            "name": {
                              "type": "string",
                              "defaultValue": "default",
                              "metadata": {
                                "description": "Optional. The name of the private DNS zone group."
                              }
                            }
                          },
                          "variables": {
                            "copy": [
                              {
                                "name": "privateDnsZoneConfigs",
                                "count": "[length(parameters('privateDNSResourceIds'))]",
                                "input": {
                                  "name": "[last(split(parameters('privateDNSResourceIds')[copyIndex('privateDnsZoneConfigs')], '/'))]",
                                  "properties": {
                                    "privateDnsZoneId": "[parameters('privateDNSResourceIds')[copyIndex('privateDnsZoneConfigs')]]"
                                  }
                                }
                              }
                            ]
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
                              "apiVersion": "2023-11-01",
                              "name": "[format('{0}/{1}', parameters('privateEndpointName'), parameters('name'))]",
                              "properties": {
                                "privateDnsZoneConfigs": "[variables('privateDnsZoneConfigs')]"
                              }
                            }
                          ],
                          "outputs": {
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "The name of the private endpoint DNS zone group."
                              },
                              "value": "[parameters('name')]"
                            },
                            "resourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource ID of the private endpoint DNS zone group."
                              },
                              "value": "[resourceId('Microsoft.Network/privateEndpoints/privateDnsZoneGroups', parameters('privateEndpointName'), parameters('name'))]"
                            },
                            "resourceGroupName": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource group the private endpoint DNS zone group was deployed into."
                              },
                              "value": "[resourceGroup().name]"
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "privateEndpoint"
                      ]
                    }
                  },
                  "outputs": {
                    "resourceGroupName": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource group the private endpoint was deployed into."
                      },
                      "value": "[resourceGroup().name]"
                    },
                    "resourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the private endpoint."
                      },
                      "value": "[resourceId('Microsoft.Network/privateEndpoints', parameters('name'))]"
                    },
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the private endpoint."
                      },
                      "value": "[parameters('name')]"
                    },
                    "location": {
                      "type": "string",
                      "metadata": {
                        "description": "The location the resource was deployed into."
                      },
                      "value": "[reference('privateEndpoint', '2023-11-01', 'full').location]"
                    },
                    "customDnsConfig": {
                      "$ref": "#/definitions/customDnsConfigType",
                      "metadata": {
                        "description": "The custom DNS configurations of the private endpoint."
                      },
                      "value": "[reference('privateEndpoint').customDnsConfigs]"
                    },
                    "groupId": {
                      "type": "string",
                      "metadata": {
                        "description": "The group Id for the private endpoint Group."
                      },
                      "value": "[if(and(not(empty(reference('privateEndpoint').manualPrivateLinkServiceConnections)), greater(length(tryGet(reference('privateEndpoint').manualPrivateLinkServiceConnections[0].properties, 'groupIds')), 0)), coalesce(tryGet(reference('privateEndpoint').manualPrivateLinkServiceConnections[0].properties, 'groupIds', 0), ''), if(and(not(empty(reference('privateEndpoint').privateLinkServiceConnections)), greater(length(tryGet(reference('privateEndpoint').privateLinkServiceConnections[0].properties, 'groupIds')), 0)), coalesce(tryGet(reference('privateEndpoint').privateLinkServiceConnections[0].properties, 'groupIds', 0), ''), ''))]"
                    }
                  }
                }
              },
              "dependsOn": [
                "workspace"
              ]
            }
          },
          "outputs": {
            "name": {
              "type": "string",
              "metadata": {
                "description": "The name of the deployed databricks workspace."
              },
              "value": "[parameters('name')]"
            },
            "resourceId": {
              "type": "string",
              "metadata": {
                "description": "The resource ID of the deployed databricks workspace."
              },
              "value": "[resourceId('Microsoft.Databricks/workspaces', parameters('name'))]"
            },
            "resourceGroupName": {
              "type": "string",
              "metadata": {
                "description": "The resource group of the deployed databricks workspace."
              },
              "value": "[resourceGroup().name]"
            },
            "location": {
              "type": "string",
              "metadata": {
                "description": "The location the resource was deployed into."
              },
              "value": "[reference('workspace', '2024-05-01', 'full').location]"
            },
            "managedResourceGroupId": {
              "type": "string",
              "metadata": {
                "description": "The resource ID of the managed resource group."
              },
              "value": "[reference('workspace').managedResourceGroupId]"
            },
            "managedResourceGroupName": {
              "type": "string",
              "metadata": {
                "description": "The name of the managed resource group."
              },
              "value": "[last(split(reference('workspace').managedResourceGroupId, '/'))]"
            },
            "storageAccountName": {
              "type": "string",
              "metadata": {
                "description": "The name of the DBFS storage account."
              },
              "value": "[reference('workspace').parameters.storageAccountName.value]"
            },
            "storageAccountId": {
              "type": "string",
              "metadata": {
                "description": "The resource ID of the DBFS storage account."
              },
              "value": "[resourceId(last(split(reference('workspace').managedResourceGroupId, '/')), 'microsoft.storage/storageAccounts', reference('workspace').parameters.storageAccountName.value)]"
            },
            "workspaceUrl": {
              "type": "string",
              "metadata": {
                "description": "The workspace URL which is of the format 'adb-{workspaceId}.{random}.azuredatabricks.net'."
              },
              "value": "[reference('workspace').workspaceUrl]"
            },
            "workspaceId": {
              "type": "string",
              "metadata": {
                "description": "The unique identifier of the databricks workspace in databricks control plane."
              },
              "value": "[reference('workspace').workspaceId]"
            },
            "privateEndpoints": {
              "type": "array",
              "metadata": {
                "description": "The private endpoints for the Databricks Workspace."
              },
              "copy": {
                "count": "[length(if(not(empty(parameters('privateEndpoints'))), array(parameters('privateEndpoints')), createArray()))]",
                "input": {
                  "name": "[reference(format('workspace_privateEndpoints[{0}]', copyIndex())).outputs.name.value]",
                  "resourceId": "[reference(format('workspace_privateEndpoints[{0}]', copyIndex())).outputs.resourceId.value]"
                }
              }
            }
          }
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('{0}-diagnosticDependencies', uniqueString(deployment().name, parameters('resourceLocation'))))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('{0}-nestedDependencies', uniqueString(deployment().name, parameters('resourceLocation'))))]",
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', parameters('resourceGroupName'))]"
      ]
    }
  ]
}