{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "languageVersion": "2.0",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "_generator": {
      "name": "bicep",
      "version": "0.23.1.45101",
      "templateHash": "10277577540639461484"
    },
    "name": "Virtual Machine Image Templates",
    "description": "This module deploys a Virtual Machine Image Template that can be consumed by Azure Image Builder (AIB).",
    "owner": "Azure/module-maintainers"
  },
  "definitions": {
    "lockType": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "Optional. Specify the name of lock."
          }
        },
        "kind": {
          "type": "string",
          "allowedValues": [
            "CanNotDelete",
            "None",
            "ReadOnly"
          ],
          "nullable": true,
          "metadata": {
            "description": "Optional. Specify the type of lock."
          }
        }
      },
      "nullable": true
    },
    "roleAssignmentType": {
      "type": "array",
      "items": {
        "type": "object",
        "properties": {
          "roleDefinitionIdOrName": {
            "type": "string",
            "metadata": {
              "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
            }
          },
          "principalId": {
            "type": "string",
            "metadata": {
              "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
            }
          },
          "principalType": {
            "type": "string",
            "allowedValues": [
              "Device",
              "ForeignGroup",
              "Group",
              "ServicePrincipal",
              "User"
            ],
            "nullable": true,
            "metadata": {
              "description": "Optional. The principal type of the assigned principal ID."
            }
          },
          "description": {
            "type": "string",
            "nullable": true,
            "metadata": {
              "description": "Optional. The description of the role assignment."
            }
          },
          "condition": {
            "type": "string",
            "nullable": true,
            "metadata": {
              "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\""
            }
          },
          "conditionVersion": {
            "type": "string",
            "allowedValues": [
              "2.0"
            ],
            "nullable": true,
            "metadata": {
              "description": "Optional. Version of the condition."
            }
          },
          "delegatedManagedIdentityResourceId": {
            "type": "string",
            "nullable": true,
            "metadata": {
              "description": "Optional. The Resource Id of the delegated managed identity resource."
            }
          }
        }
      },
      "nullable": true
    }
  },
  "parameters": {
    "name": {
      "type": "string",
      "metadata": {
        "description": "Required. Name prefix of the Image Template to be built by the Azure Image Builder service."
      }
    },
    "userMsiName": {
      "type": "string",
      "metadata": {
        "description": "Required. Name of the User Assigned Identity to be used to deploy Image Templates in Azure Image Builder."
      }
    },
    "userMsiResourceGroup": {
      "type": "string",
      "defaultValue": "[resourceGroup().name]",
      "metadata": {
        "description": "Optional. Resource group of the user assigned identity."
      }
    },
    "location": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "Optional. Location for all resources."
      }
    },
    "buildTimeoutInMinutes": {
      "type": "int",
      "defaultValue": 0,
      "minValue": 0,
      "maxValue": 960,
      "metadata": {
        "description": "Optional. Image build timeout in minutes. Allowed values: 0-960. 0 means the default 240 minutes."
      }
    },
    "vmSize": {
      "type": "string",
      "defaultValue": "Standard_D2s_v3",
      "metadata": {
        "description": "Optional. Specifies the size for the VM."
      }
    },
    "osDiskSizeGB": {
      "type": "int",
      "defaultValue": 128,
      "metadata": {
        "description": "Optional. Specifies the size of OS disk."
      }
    },
    "subnetId": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Optional. Resource ID of an already existing subnet, e.g.: /subscriptions/<subscriptionId>/resourceGroups/<resourceGroupName>/providers/Microsoft.Network/virtualNetworks/<vnetName>/subnets/<subnetName>.</p>If no value is provided, a new temporary VNET and subnet will be created in the staging resource group and will be deleted along with the remaining temporary resources."
      }
    },
    "userAssignedIdentities": {
      "type": "array",
      "defaultValue": [],
      "metadata": {
        "description": "Optional. List of User-Assigned Identities associated to the Build VM for accessing Azure resources such as Key Vaults from your customizer scripts.</p>Be aware, the user assigned identity specified in the 'userMsiName' parameter must have the 'Managed Identity Operator' role assignment on all the user assigned identities specified in this parameter for Azure Image Builder to be able to associate them to the build VM."
      }
    },
    "imageSource": {
      "type": "object",
      "metadata": {
        "description": "Required. Image source definition in object format."
      }
    },
    "customizationSteps": {
      "type": "array",
      "metadata": {
        "description": "Required. Customization steps to be run when building the VM image."
      }
    },
    "managedImageName": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Optional. Name of the managed image that will be created in the AIB resourcegroup."
      }
    },
    "unManagedImageName": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Optional. Name of the unmanaged image that will be created in the AIB resourcegroup."
      }
    },
    "sigImageDefinitionId": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Optional. Resource ID of Shared Image Gallery to distribute image to, e.g.: /subscriptions/<subscriptionID>/resourceGroups/<SIG resourcegroup>/providers/Microsoft.Compute/galleries/<SIG name>/images/<image definition>."
      }
    },
    "sigImageVersion": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Optional. Version of the Shared Image Gallery Image. Supports the following Version Syntax: Major.Minor.Build (i.e., '1.1.1' or '10.1.2')."
      }
    },
    "excludeFromLatest": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Optional. Exclude the created Azure Compute Gallery image version from the latest."
      }
    },
    "imageReplicationRegions": {
      "type": "array",
      "defaultValue": [],
      "metadata": {
        "description": "Optional. List of the regions the image produced by this solution should be stored in the Shared Image Gallery. When left empty, the deployment's location will be taken as a default value."
      }
    },
    "storageAccountType": {
      "type": "string",
      "defaultValue": "Standard_LRS",
      "allowedValues": [
        "Standard_LRS",
        "Standard_ZRS"
      ],
      "metadata": {
        "description": "Optional. Storage account type to be used to store the image in the Azure Compute Gallery."
      }
    },
    "stagingResourceGroup": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Optional. Resource ID of the staging resource group in the same subscription and location as the image template that will be used to build the image.</p>If this field is empty, a resource group with a random name will be created.</p>If the resource group specified in this field doesn't exist, it will be created with the same name.</p>If the resource group specified exists, it must be empty and in the same region as the image template.</p>The resource group created will be deleted during template deletion if this field is empty or the resource group specified doesn't exist,</p>but if the resource group specified exists the resources created in the resource group will be deleted during template deletion and the resource group itself will remain."
      }
    },
    "lock": {
      "$ref": "#/definitions/lockType",
      "metadata": {
        "description": "Optional. The lock settings of the service."
      }
    },
    "tags": {
      "type": "object",
      "nullable": true,
      "metadata": {
        "description": "Optional. Tags of the resource."
      }
    },
    "baseTime": {
      "type": "string",
      "defaultValue": "[utcNow('yyyy-MM-dd-HH-mm-ss')]",
      "metadata": {
        "description": "Generated. Do not provide a value! This date value is used to generate a unique image template name."
      }
    },
    "enableDefaultTelemetry": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Optional. Enable telemetry via a Globally Unique Identifier (GUID)."
      }
    },
    "roleAssignments": {
      "$ref": "#/definitions/roleAssignmentType",
      "metadata": {
        "description": "Optional. Array of role assignments to create."
      }
    }
  },
  "variables": {
    "managedImageNameVar": "[format('{0}-{1}', parameters('managedImageName'), parameters('baseTime'))]",
    "managedImageId": "[format('/subscriptions/{0}/resourceGroups/{1}/providers/Microsoft.Compute/images/{2}', subscription().subscriptionId, resourceGroup().name, variables('managedImageNameVar'))]",
    "imageReplicationRegionsVar": "[if(empty(parameters('imageReplicationRegions')), array(parameters('location')), parameters('imageReplicationRegions'))]",
    "managedImage": {
      "type": "ManagedImage",
      "imageId": "[variables('managedImageId')]",
      "location": "[parameters('location')]",
      "runOutputName": "[format('{0}-ManagedImage', variables('managedImageNameVar'))]",
      "artifactTags": {
        "sourceType": "[parameters('imageSource').type]",
        "sourcePublisher": "[if(contains(parameters('imageSource'), 'publisher'), parameters('imageSource').publisher, null())]",
        "sourceOffer": "[if(contains(parameters('imageSource'), 'offer'), parameters('imageSource').offer, null())]",
        "sourceSku": "[if(contains(parameters('imageSource'), 'sku'), parameters('imageSource').sku, null())]",
        "sourceVersion": "[if(contains(parameters('imageSource'), 'version'), parameters('imageSource').version, null())]",
        "sourceImageId": "[if(contains(parameters('imageSource'), 'imageId'), parameters('imageSource').imageId, null())]",
        "sourceImageVersionID": "[if(contains(parameters('imageSource'), 'imageVersionID'), parameters('imageSource').imageVersionID, null())]",
        "creationTime": "[parameters('baseTime')]"
      }
    },
    "conditionalManagedImage": "[if(empty(parameters('managedImageName')), createArray(), array(variables('managedImage')))]",
    "sharedImage": {
      "type": "SharedImage",
      "galleryImageId": "[if(empty(parameters('sigImageVersion')), parameters('sigImageDefinitionId'), format('{0}/versions/{1}', parameters('sigImageDefinitionId'), parameters('sigImageVersion')))]",
      "excludeFromLatest": "[parameters('excludeFromLatest')]",
      "replicationRegions": "[variables('imageReplicationRegionsVar')]",
      "storageAccountType": "[parameters('storageAccountType')]",
      "runOutputName": "[if(not(empty(parameters('sigImageDefinitionId'))), format('{0}-SharedImage', last(split(parameters('sigImageDefinitionId'), '/'))), 'SharedImage')]",
      "artifactTags": {
        "sourceType": "[parameters('imageSource').type]",
        "sourcePublisher": "[if(contains(parameters('imageSource'), 'publisher'), parameters('imageSource').publisher, null())]",
        "sourceOffer": "[if(contains(parameters('imageSource'), 'offer'), parameters('imageSource').offer, null())]",
        "sourceSku": "[if(contains(parameters('imageSource'), 'sku'), parameters('imageSource').sku, null())]",
        "sourceVersion": "[if(contains(parameters('imageSource'), 'version'), parameters('imageSource').version, null())]",
        "sourceImageId": "[if(contains(parameters('imageSource'), 'imageId'), parameters('imageSource').imageId, null())]",
        "sourceImageVersionID": "[if(contains(parameters('imageSource'), 'imageVersionID'), parameters('imageSource').imageVersionID, null())]",
        "creationTime": "[parameters('baseTime')]"
      }
    },
    "conditionalSharedImage": "[if(empty(parameters('sigImageDefinitionId')), createArray(), array(variables('sharedImage')))]",
    "unManagedImage": {
      "type": "VHD",
      "runOutputName": "[format('{0}-VHD', parameters('unManagedImageName'))]",
      "artifactTags": {
        "sourceType": "[parameters('imageSource').type]",
        "sourcePublisher": "[if(contains(parameters('imageSource'), 'publisher'), parameters('imageSource').publisher, null())]",
        "sourceOffer": "[if(contains(parameters('imageSource'), 'offer'), parameters('imageSource').offer, null())]",
        "sourceSku": "[if(contains(parameters('imageSource'), 'sku'), parameters('imageSource').sku, null())]",
        "sourceVersion": "[if(contains(parameters('imageSource'), 'version'), parameters('imageSource').version, null())]",
        "sourceImageId": "[if(contains(parameters('imageSource'), 'imageId'), parameters('imageSource').imageId, null())]",
        "sourceImageVersionID": "[if(contains(parameters('imageSource'), 'imageVersionID'), parameters('imageSource').imageVersionID, null())]",
        "creationTime": "[parameters('baseTime')]"
      }
    },
    "conditionalUnManagedImage": "[if(empty(parameters('unManagedImageName')), createArray(), array(variables('unManagedImage')))]",
    "distribute": "[concat(variables('conditionalManagedImage'), variables('conditionalSharedImage'), variables('conditionalUnManagedImage'))]",
    "vnetConfig": {
      "subnetId": "[parameters('subnetId')]"
    },
    "builtInRoleNames": {
      "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
      "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
      "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
      "Role Based Access Control Administrator (Preview)": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]",
      "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]"
    }
  },
  "resources": {
    "defaultTelemetry": {
      "condition": "[parameters('enableDefaultTelemetry')]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2021-04-01",
      "name": "[format('pid-47ed15a6-730a-4827-bcb4-0fd963ffbd82-{0}', uniqueString(deployment().name, parameters('location')))]",
      "properties": {
        "mode": "Incremental",
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "resources": []
        }
      }
    },
    "imageTemplate": {
      "type": "Microsoft.VirtualMachineImages/imageTemplates",
      "apiVersion": "2022-02-14",
      "name": "[format('{0}-{1}', parameters('name'), parameters('baseTime'))]",
      "location": "[parameters('location')]",
      "tags": "[parameters('tags')]",
      "identity": {
        "type": "UserAssigned",
        "userAssignedIdentities": {
          "[format('{0}', resourceId(parameters('userMsiResourceGroup'), 'Microsoft.ManagedIdentity/userAssignedIdentities', parameters('userMsiName')))]": {}
        }
      },
      "properties": {
        "buildTimeoutInMinutes": "[parameters('buildTimeoutInMinutes')]",
        "vmProfile": {
          "vmSize": "[parameters('vmSize')]",
          "osDiskSizeGB": "[parameters('osDiskSizeGB')]",
          "userAssignedIdentities": "[parameters('userAssignedIdentities')]",
          "vnetConfig": "[if(not(empty(parameters('subnetId'))), variables('vnetConfig'), null())]"
        },
        "source": "[parameters('imageSource')]",
        "customize": "[parameters('customizationSteps')]",
        "distribute": "[variables('distribute')]",
        "stagingResourceGroup": "[parameters('stagingResourceGroup')]"
      }
    },
    "imageTemplate_lock": {
      "condition": "[and(not(empty(coalesce(parameters('lock'), createObject()))), not(equals(tryGet(parameters('lock'), 'kind'), 'None')))]",
      "type": "Microsoft.Authorization/locks",
      "apiVersion": "2020-05-01",
      "scope": "[format('Microsoft.VirtualMachineImages/imageTemplates/{0}', format('{0}-{1}', parameters('name'), parameters('baseTime')))]",
      "name": "[coalesce(tryGet(parameters('lock'), 'name'), format('lock-{0}', parameters('name')))]",
      "properties": {
        "level": "[coalesce(tryGet(parameters('lock'), 'kind'), '')]",
        "notes": "[if(equals(tryGet(parameters('lock'), 'kind'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot delete or modify the resource or child resources.')]"
      },
      "dependsOn": [
        "imageTemplate"
      ]
    },
    "imageTemplate_roleAssignments": {
      "copy": {
        "name": "imageTemplate_roleAssignments",
        "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]"
      },
      "type": "Microsoft.Authorization/roleAssignments",
      "apiVersion": "2022-04-01",
      "scope": "[format('Microsoft.VirtualMachineImages/imageTemplates/{0}', format('{0}-{1}', parameters('name'), parameters('baseTime')))]",
      "name": "[guid(resourceId('Microsoft.VirtualMachineImages/imageTemplates', format('{0}-{1}', parameters('name'), parameters('baseTime'))), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].principalId, coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName)]",
      "properties": {
        "roleDefinitionId": "[if(contains(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName), variables('builtInRoleNames')[coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName], if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName)))]",
        "principalId": "[coalesce(parameters('roleAssignments'), createArray())[copyIndex()].principalId]",
        "description": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'description')]",
        "principalType": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'principalType')]",
        "condition": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'condition')]",
        "conditionVersion": "[if(not(empty(tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
        "delegatedManagedIdentityResourceId": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
      },
      "dependsOn": [
        "imageTemplate"
      ]
    }
  },
  "outputs": {
    "resourceId": {
      "type": "string",
      "metadata": {
        "description": "The resource ID of the image template."
      },
      "value": "[resourceId('Microsoft.VirtualMachineImages/imageTemplates', format('{0}-{1}', parameters('name'), parameters('baseTime')))]"
    },
    "resourceGroupName": {
      "type": "string",
      "metadata": {
        "description": "The resource group the image template was deployed into."
      },
      "value": "[resourceGroup().name]"
    },
    "name": {
      "type": "string",
      "metadata": {
        "description": "The full name of the deployed image template."
      },
      "value": "[format('{0}-{1}', parameters('name'), parameters('baseTime'))]"
    },
    "namePrefix": {
      "type": "string",
      "metadata": {
        "description": "The prefix of the image template name provided as input."
      },
      "value": "[parameters('name')]"
    },
    "runThisCommand": {
      "type": "string",
      "metadata": {
        "description": "The command to run in order to trigger the image build."
      },
      "value": "[format('Invoke-AzResourceAction -ResourceName {0} -ResourceGroupName {1} -ResourceType Microsoft.VirtualMachineImages/imageTemplates -Action Run -Force', format('{0}-{1}', parameters('name'), parameters('baseTime')), resourceGroup().name)]"
    },
    "location": {
      "type": "string",
      "metadata": {
        "description": "The location the resource was deployed into."
      },
      "value": "[reference('imageTemplate', '2022-02-14', 'full').location]"
    }
  }
}