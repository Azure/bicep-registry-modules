{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "languageVersion": "2.0",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "_generator": {
      "name": "bicep",
      "version": "0.35.1.17967",
      "templateHash": "6357625137770875927"
    },
    "name": "Azure Cosmos DB for MongoDB RU database",
    "description": "This module deploys an Azure Cosmos DB for MongoDB RU database within an account."
  },
  "definitions": {
    "mongodbCollectionType": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "metadata": {
            "description": "Required. The name of the collection."
          }
        },
        "tags": {
          "type": "object",
          "nullable": true,
          "metadata": {
            "description": "Optional. Tags for the resource."
          }
        },
        "manualThroughput": {
          "type": "int",
          "nullable": true,
          "metadata": {
            "description": "Optional. The provisioned standard throughput assigned to the collection."
          }
        },
        "autoscaleMaxThroughput": {
          "type": "int",
          "nullable": true,
          "metadata": {
            "description": "Optional. The maximum throughput for the collection when using autoscale."
          }
        },
        "shardKeys": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/shardKeyType"
          },
          "nullable": true,
          "metadata": {
            "description": "Optional. The set of shard keys to use for the collection."
          }
        },
        "indexes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/indexType"
          },
          "nullable": true,
          "metadata": {
            "description": "Optional. The indexes to create for the collection."
          }
        }
      },
      "metadata": {
        "__bicep_export!": true,
        "description": "A collection within the database."
      }
    },
    "indexType": {
      "type": "object",
      "properties": {
        "keys": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "metadata": {
            "description": "Required. The fields to use for the index."
          }
        },
        "unique": {
          "type": "bool",
          "nullable": true,
          "metadata": {
            "description": "Optional. Indicator for whether the index is unique."
          }
        },
        "ttl": {
          "type": "int",
          "nullable": true,
          "metadata": {
            "description": "Optional. The time-to-live (TTL) for documents in the index, in seconds."
          }
        }
      },
      "metadata": {
        "description": "An index specification for the collection.",
        "__bicep_imported_from!": {
          "sourceTemplate": "collection/main.bicep"
        }
      }
    },
    "shardKeyType": {
      "type": "object",
      "properties": {
        "field": {
          "type": "string",
          "metadata": {
            "description": "Required. The field to use for the shard key."
          }
        },
        "type": {
          "type": "string",
          "allowedValues": [
            "Hash"
          ],
          "metadata": {
            "description": "Required. The type of the shard key. Defaults to \"Hash\". Note that \"Hash\" is the only supported type at this time."
          }
        }
      },
      "metadata": {
        "description": "A shard key specification for the collection.",
        "__bicep_imported_from!": {
          "sourceTemplate": "collection/main.bicep"
        }
      }
    }
  },
  "parameters": {
    "parentAccountName": {
      "type": "string",
      "metadata": {
        "description": "Conditional. The name of the parent Azure Cosmos DB for MongoDB RU account. Required if the template is used in a standalone deployment."
      }
    },
    "name": {
      "type": "string",
      "metadata": {
        "description": "Required. The name of the database."
      }
    },
    "tags": {
      "type": "object",
      "metadata": {
        "__bicep_resource_derived_type!": {
          "source": "Microsoft.DocumentDB/databaseAccounts/mongodbDatabases@2024-11-15#properties/tags"
        },
        "description": "Optional. Tags for the resource."
      },
      "nullable": true
    },
    "manualThroughput": {
      "type": "int",
      "nullable": true,
      "metadata": {
        "description": "Optional. The provisioned standard throughput assigned to the database."
      }
    },
    "autoscaleMaxThroughput": {
      "type": "int",
      "nullable": true,
      "metadata": {
        "description": "Optional. The maximum throughput for the database when using autoscale."
      }
    },
    "collections": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/mongodbCollectionType"
      },
      "nullable": true,
      "metadata": {
        "description": "Optional. The set of collections within the database."
      }
    }
  },
  "resources": {
    "account": {
      "existing": true,
      "type": "Microsoft.DocumentDB/databaseAccounts",
      "apiVersion": "2024-11-15",
      "name": "[parameters('parentAccountName')]"
    },
    "database": {
      "type": "Microsoft.DocumentDB/databaseAccounts/mongodbDatabases",
      "apiVersion": "2024-11-15",
      "name": "[format('{0}/{1}', parameters('parentAccountName'), parameters('name'))]",
      "tags": "[parameters('tags')]",
      "properties": {
        "resource": {
          "id": "[parameters('name')]"
        },
        "options": "[if(contains(reference('account').capabilities, createObject('name', 'EnableServerless')), null(), createObject('throughput', if(equals(parameters('autoscaleMaxThroughput'), null()), parameters('manualThroughput'), null()), 'autoscaleSettings', if(not(equals(parameters('autoscaleMaxThroughput'), null())), createObject('maxThroughput', parameters('autoscaleMaxThroughput')), null())))]"
      },
      "dependsOn": [
        "account"
      ]
    },
    "mongodbDatabase_collections": {
      "copy": {
        "name": "mongodbDatabase_collections",
        "count": "[length(coalesce(parameters('collections'), createArray()))]"
      },
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('{0}-collection-{1}', uniqueString(deployment().name, parameters('name')), coalesce(parameters('collections'), createArray())[copyIndex()].name)]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "ancestorAccountName": {
            "value": "[parameters('parentAccountName')]"
          },
          "parentDatabaseName": {
            "value": "[parameters('name')]"
          },
          "name": {
            "value": "[coalesce(parameters('collections'), createArray())[copyIndex()].name]"
          },
          "tags": {
            "value": "[coalesce(tryGet(coalesce(parameters('collections'), createArray())[copyIndex()], 'tags'), parameters('tags'))]"
          },
          "manualThroughput": {
            "value": "[coalesce(parameters('collections'), createArray())[copyIndex()].manualThroughput]"
          },
          "autoscaleMaxThroughput": {
            "value": "[coalesce(parameters('collections'), createArray())[copyIndex()].autoscaleMaxThroughput]"
          },
          "shardKeys": {
            "value": "[coalesce(parameters('collections'), createArray())[copyIndex()].shardKeys]"
          },
          "indexes": {
            "value": "[coalesce(parameters('collections'), createArray())[copyIndex()].indexes]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "languageVersion": "2.0",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.35.1.17967",
              "templateHash": "5004608617425238159"
            },
            "name": "Azure Cosmos DB for MongoDB RU collection",
            "description": "This module deploys an Azure Cosmos DB for MongoDB RU collection within a database."
          },
          "definitions": {
            "shardKeyType": {
              "type": "object",
              "properties": {
                "field": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. The field to use for the shard key."
                  }
                },
                "type": {
                  "type": "string",
                  "allowedValues": [
                    "Hash"
                  ],
                  "metadata": {
                    "description": "Required. The type of the shard key. Defaults to \"Hash\". Note that \"Hash\" is the only supported type at this time."
                  }
                }
              },
              "metadata": {
                "__bicep_export!": true,
                "description": "A shard key specification for the collection."
              }
            },
            "indexType": {
              "type": "object",
              "properties": {
                "keys": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "metadata": {
                    "description": "Required. The fields to use for the index."
                  }
                },
                "unique": {
                  "type": "bool",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Indicator for whether the index is unique."
                  }
                },
                "ttl": {
                  "type": "int",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The time-to-live (TTL) for documents in the index, in seconds."
                  }
                }
              },
              "metadata": {
                "__bicep_export!": true,
                "description": "An index specification for the collection."
              }
            }
          },
          "parameters": {
            "ancestorAccountName": {
              "type": "string",
              "metadata": {
                "description": "Conditional. The name of the parent Azure Cosmos DB for MongoDB RU account. Required if the template is used in a standalone deployment."
              }
            },
            "parentDatabaseName": {
              "type": "string",
              "metadata": {
                "description": "Conditional. The name of the parent database. Required if the template is used in a standalone deployment."
              }
            },
            "name": {
              "type": "string",
              "metadata": {
                "description": "Required. The name of the collection."
              }
            },
            "tags": {
              "type": "object",
              "metadata": {
                "__bicep_resource_derived_type!": {
                  "source": "Microsoft.DocumentDB/databaseAccounts/mongodbDatabases/collections@2024-11-15#properties/tags"
                },
                "description": "Optional. Tags for the resource."
              },
              "nullable": true
            },
            "manualThroughput": {
              "type": "int",
              "nullable": true,
              "metadata": {
                "description": "Optional. The provisioned standard throughput assigned to the collection."
              }
            },
            "autoscaleMaxThroughput": {
              "type": "int",
              "nullable": true,
              "metadata": {
                "description": "Optional. The maximum throughput for the collection when using autoscale."
              }
            },
            "shardKeys": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/shardKeyType"
              },
              "nullable": true,
              "metadata": {
                "description": "Optional. The set of shard keys to use for the collection."
              }
            },
            "indexes": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/indexType"
              },
              "nullable": true,
              "metadata": {
                "description": "Optional. The indexes to create for the collection."
              }
            }
          },
          "resources": {
            "account": {
              "existing": true,
              "type": "Microsoft.DocumentDB/databaseAccounts",
              "apiVersion": "2024-11-15",
              "name": "[parameters('ancestorAccountName')]"
            },
            "database": {
              "existing": true,
              "type": "Microsoft.DocumentDB/databaseAccounts/mongodbDatabases",
              "apiVersion": "2024-11-15",
              "name": "[parameters('parentDatabaseName')]"
            },
            "collection": {
              "type": "Microsoft.DocumentDB/databaseAccounts/mongodbDatabases/collections",
              "apiVersion": "2024-11-15",
              "name": "[format('{0}/{1}/{2}', split(parameters('parentDatabaseName'), '/')[0], split(parameters('parentDatabaseName'), '/')[1], parameters('name'))]",
              "tags": "[parameters('tags')]",
              "properties": {
                "options": "[if(contains(reference('account').capabilities, createObject('name', 'EnableServerless')), null(), if(and(and(and(equals(parameters('autoscaleMaxThroughput'), null()), equals(parameters('manualThroughput'), null())), equals(reference('database').options.autoscaleSettings, null())), equals(reference('database').options.throughput, null())), createObject('autoscaleSettings', createObject('maxThroughput', 1000)), createObject('throughput', if(equals(parameters('autoscaleMaxThroughput'), null()), parameters('manualThroughput'), null()), 'autoscaleSettings', if(not(equals(parameters('autoscaleMaxThroughput'), null())), createObject('maxThroughput', parameters('autoscaleMaxThroughput')), null()))))]",
                "resource": {
                  "id": "[parameters('name')]",
                  "indexes": "[if(not(equals(parameters('indexes'), null())), map(coalesce(parameters('indexes'), createArray()), lambda('index', createObject('key', createObject('keys', lambdaVariables('index').keys), 'options', createObject('expireAfterSeconds', lambdaVariables('index').ttl, 'unique', lambdaVariables('index').unique)))), null())]",
                  "shardKey": "[if(not(equals(parameters('shardKeys'), null())), reduce(coalesce(parameters('shardKeys'), createArray()), createObject(), lambda('current', 'next', union(lambdaVariables('current'), createObject(format('{0}', lambdaVariables('next').field), lambdaVariables('next').type)))), null())]"
                }
              },
              "dependsOn": [
                "account",
                "database"
              ]
            }
          },
          "outputs": {
            "name": {
              "type": "string",
              "metadata": {
                "description": "The name of the mongodb database collection."
              },
              "value": "[parameters('name')]"
            },
            "resourceId": {
              "type": "string",
              "metadata": {
                "description": "The resource ID of the mongodb database collection."
              },
              "value": "[resourceId('Microsoft.DocumentDB/databaseAccounts/mongodbDatabases/collections', split(parameters('parentDatabaseName'), '/')[0], split(parameters('parentDatabaseName'), '/')[1], parameters('name'))]"
            },
            "resourceGroupName": {
              "type": "string",
              "metadata": {
                "description": "The name of the resource group the mongodb database collection was created in."
              },
              "value": "[resourceGroup().name]"
            }
          }
        }
      },
      "dependsOn": [
        "database"
      ]
    }
  },
  "outputs": {
    "name": {
      "type": "string",
      "metadata": {
        "description": "The name of the MongoDB database."
      },
      "value": "[parameters('name')]"
    },
    "resourceId": {
      "type": "string",
      "metadata": {
        "description": "The resource ID of the MongoDB database."
      },
      "value": "[resourceId('Microsoft.DocumentDB/databaseAccounts/mongodbDatabases', parameters('parentAccountName'), parameters('name'))]"
    },
    "resourceGroupName": {
      "type": "string",
      "metadata": {
        "description": "The name of the resource group the MongoDB database was created in."
      },
      "value": "[resourceGroup().name]"
    }
  }
}