{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "languageVersion": "2.0",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "_generator": {
      "name": "bicep",
      "version": "0.25.53.49325",
      "templateHash": "8733005894926174924"
    },
    "name": "DocumentDB Database Accounts",
    "description": "This module deploys a DocumentDB Database Account.",
    "owner": "Azure/module-maintainers"
  },
  "definitions": {
    "managedIdentitiesType": {
      "type": "object",
      "properties": {
        "systemAssigned": {
          "type": "bool",
          "nullable": true,
          "metadata": {
            "description": "Optional. Enables system assigned managed identity on the resource."
          }
        },
        "userAssignedResourceIds": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "nullable": true,
          "metadata": {
            "description": "Optional. The resource ID(s) to assign to the resource."
          }
        }
      },
      "nullable": true
    },
    "lockType": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "Optional. Specify the name of lock."
          }
        },
        "kind": {
          "type": "string",
          "allowedValues": [
            "CanNotDelete",
            "None",
            "ReadOnly"
          ],
          "nullable": true,
          "metadata": {
            "description": "Optional. Specify the type of lock."
          }
        }
      },
      "nullable": true
    },
    "roleAssignmentType": {
      "type": "array",
      "items": {
        "type": "object",
        "properties": {
          "roleDefinitionIdOrName": {
            "type": "string",
            "metadata": {
              "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
            }
          },
          "principalId": {
            "type": "string",
            "metadata": {
              "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
            }
          },
          "principalType": {
            "type": "string",
            "allowedValues": [
              "Device",
              "ForeignGroup",
              "Group",
              "ServicePrincipal",
              "User"
            ],
            "nullable": true,
            "metadata": {
              "description": "Optional. The principal type of the assigned principal ID."
            }
          },
          "description": {
            "type": "string",
            "nullable": true,
            "metadata": {
              "description": "Optional. The description of the role assignment."
            }
          },
          "condition": {
            "type": "string",
            "nullable": true,
            "metadata": {
              "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
            }
          },
          "conditionVersion": {
            "type": "string",
            "allowedValues": [
              "2.0"
            ],
            "nullable": true,
            "metadata": {
              "description": "Optional. Version of the condition."
            }
          },
          "delegatedManagedIdentityResourceId": {
            "type": "string",
            "nullable": true,
            "metadata": {
              "description": "Optional. The Resource Id of the delegated managed identity resource."
            }
          }
        }
      },
      "nullable": true
    },
    "privateEndpointType": {
      "type": "array",
      "items": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true,
            "metadata": {
              "description": "Optional. The name of the private endpoint."
            }
          },
          "location": {
            "type": "string",
            "nullable": true,
            "metadata": {
              "description": "Optional. The location to deploy the private endpoint to."
            }
          },
          "service": {
            "type": "string",
            "metadata": {
              "description": "Required. The subresource to deploy the private endpoint for. For example \"blob\", \"table\", \"queue\" or \"file\"."
            }
          },
          "subnetResourceId": {
            "type": "string",
            "metadata": {
              "description": "Required. Resource ID of the subnet where the endpoint needs to be created."
            }
          },
          "privateDnsZoneGroupName": {
            "type": "string",
            "nullable": true,
            "metadata": {
              "description": "Optional. The name of the private DNS zone group to create if privateDnsZoneResourceIds were provided."
            }
          },
          "privateDnsZoneResourceIds": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true,
            "metadata": {
              "description": "Optional. The private DNS zone groups to associate the private endpoint with. A DNS zone group can support up to 5 DNS zones."
            }
          },
          "isManualConnection": {
            "type": "bool",
            "nullable": true,
            "metadata": {
              "description": "Optional. If Manual Private Link Connection is required."
            }
          },
          "manualConnectionRequestMessage": {
            "type": "string",
            "nullable": true,
            "maxLength": 140,
            "metadata": {
              "description": "Optional. A message passed to the owner of the remote resource with the manual connection request."
            }
          },
          "customDnsConfigs": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "fqdn": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Required. Fqdn that resolves to private endpoint ip address."
                  }
                },
                "ipAddresses": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "metadata": {
                    "description": "Required. A list of private ip addresses of the private endpoint."
                  }
                }
              }
            },
            "nullable": true,
            "metadata": {
              "description": "Optional. Custom DNS configurations."
            }
          },
          "ipConfigurations": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. The name of the resource that is unique within a resource group."
                  }
                },
                "properties": {
                  "type": "object",
                  "properties": {
                    "groupId": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The ID of a group obtained from the remote resource that this private endpoint should connect to."
                      }
                    },
                    "memberName": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The member name of a group obtained from the remote resource that this private endpoint should connect to."
                      }
                    },
                    "privateIPAddress": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. A private ip address obtained from the private endpoint's subnet."
                      }
                    }
                  },
                  "metadata": {
                    "description": "Required. Properties of private endpoint IP configurations."
                  }
                }
              }
            },
            "nullable": true,
            "metadata": {
              "description": "Optional. A list of IP configurations of the private endpoint. This will be used to map to the First Party Service endpoints."
            }
          },
          "applicationSecurityGroupResourceIds": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true,
            "metadata": {
              "description": "Optional. Application security groups in which the private endpoint IP configuration is included."
            }
          },
          "customNetworkInterfaceName": {
            "type": "string",
            "nullable": true,
            "metadata": {
              "description": "Optional. The custom name of the network interface attached to the private endpoint."
            }
          },
          "lock": {
            "$ref": "#/definitions/lockType",
            "metadata": {
              "description": "Optional. Specify the type of lock."
            }
          },
          "roleAssignments": {
            "$ref": "#/definitions/roleAssignmentType",
            "metadata": {
              "description": "Optional. Array of role assignments to create."
            }
          },
          "tags": {
            "type": "object",
            "nullable": true,
            "metadata": {
              "description": "Optional. Tags to be applied on all resources/resource groups in this deployment."
            }
          },
          "enableTelemetry": {
            "type": "bool",
            "nullable": true,
            "metadata": {
              "description": "Optional. Enable/Disable usage telemetry for module."
            }
          }
        }
      },
      "nullable": true
    },
    "diagnosticSettingType": {
      "type": "array",
      "items": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true,
            "metadata": {
              "description": "Optional. The name of diagnostic setting."
            }
          },
          "logCategoriesAndGroups": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "category": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Name of a Diagnostic Log category for a resource type this setting is applied to. Set the specific logs to collect here."
                  }
                },
                "categoryGroup": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Name of a Diagnostic Log category group for a resource type this setting is applied to. Set to `allLogs` to collect all logs."
                  }
                },
                "enabled": {
                  "type": "bool",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Enable or disable the category explicitly. Default is `true`."
                  }
                }
              }
            },
            "nullable": true,
            "metadata": {
              "description": "Optional. The name of logs that will be streamed. \"allLogs\" includes all possible logs for the resource. Set to `[]` to disable log collection."
            }
          },
          "metricCategories": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "category": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. Name of a Diagnostic Metric category for a resource type this setting is applied to. Set to `AllMetrics` to collect all metrics."
                  }
                },
                "enabled": {
                  "type": "bool",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Enable or disable the category explicitly. Default is `true`."
                  }
                }
              }
            },
            "nullable": true,
            "metadata": {
              "description": "Optional. The name of metrics that will be streamed. \"allMetrics\" includes all possible metrics for the resource. Set to `[]` to disable metric collection."
            }
          },
          "logAnalyticsDestinationType": {
            "type": "string",
            "allowedValues": [
              "AzureDiagnostics",
              "Dedicated"
            ],
            "nullable": true,
            "metadata": {
              "description": "Optional. A string indicating whether the export to Log Analytics should use the default destination type, i.e. AzureDiagnostics, or use a destination type."
            }
          },
          "workspaceResourceId": {
            "type": "string",
            "nullable": true,
            "metadata": {
              "description": "Optional. Resource ID of the diagnostic log analytics workspace. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
            }
          },
          "storageAccountResourceId": {
            "type": "string",
            "nullable": true,
            "metadata": {
              "description": "Optional. Resource ID of the diagnostic storage account. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
            }
          },
          "eventHubAuthorizationRuleResourceId": {
            "type": "string",
            "nullable": true,
            "metadata": {
              "description": "Optional. Resource ID of the diagnostic event hub authorization rule for the Event Hubs namespace in which the event hub should be created or streamed to."
            }
          },
          "eventHubName": {
            "type": "string",
            "nullable": true,
            "metadata": {
              "description": "Optional. Name of the diagnostic event hub within the namespace to which logs are streamed. Without this, an event hub is created for each log category. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
            }
          },
          "marketplacePartnerResourceId": {
            "type": "string",
            "nullable": true,
            "metadata": {
              "description": "Optional. The full ARM resource ID of the Marketplace resource to which you would like to send Diagnostic Logs."
            }
          }
        }
      },
      "nullable": true
    },
    "failoverLocations": {
      "type": "object",
      "properties": {
        "failoverPriority": {
          "type": "int",
          "metadata": {
            "description": "Required. The failover priority of the region. A failover priority of 0 indicates a write region. The maximum value for a failover priority = (total number of regions - 1). Failover priority values must be unique for each of the regions in which the database account exists."
          }
        },
        "isZoneRedundant": {
          "type": "bool",
          "metadata": {
            "description": "Required. Flag to indicate whether or not this region is an AvailabilityZone region"
          }
        },
        "locationName": {
          "type": "string",
          "metadata": {
            "description": "Required. The name of the region."
          }
        }
      }
    },
    "sqlDatabase": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "metadata": {
            "description": "Required. Name of the SQL database ."
          }
        },
        "throughput": {
          "type": "int",
          "nullable": true,
          "metadata": {
            "description": "Optional. Default to 400. Request units per second. Will be ignored if autoscaleSettingsMaxThroughput is used."
          }
        },
        "autoscaleSettingsMaxThroughput": {
          "type": "int",
          "nullable": true,
          "metadata": {
            "description": "Optional. Specifies the Autoscale settings and represents maximum throughput, the resource can scale up to.  The autoscale throughput should have valid throughput values between 1000 and 1000000 inclusive in increments of 1000. If value is set to null, then autoscale will be disabled."
          }
        },
        "containers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/sqlDatabaseContainer"
          },
          "nullable": true,
          "metadata": {
            "description": "Optional. Array of containers to deploy in the SQL database."
          }
        }
      }
    },
    "sqlDatabaseContainer": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "metadata": {
            "description": "Required. Name of the container."
          }
        },
        "paths": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "minLength": 1,
          "maxLength": 3,
          "metadata": {
            "description": "Required. List of paths using which data within the container can be partitioned. For kind=MultiHash it can be up to 3. For anything else it needs to be exactly 1."
          }
        },
        "analyticalStorageTtl": {
          "type": "int",
          "nullable": true,
          "metadata": {
            "description": "Optional. Default to 0. Indicates how long data should be retained in the analytical store, for a container. Analytical store is enabled when ATTL is set with a value other than 0. If the value is set to -1, the analytical store retains all historical data, irrespective of the retention of the data in the transactional store."
          }
        },
        "autoscaleSettingsMaxThroughput": {
          "type": "int",
          "nullable": true,
          "maxValue": 1000000,
          "metadata": {
            "description": "Optional. Specifies the Autoscale settings and represents maximum throughput, the resource can scale up to. The autoscale throughput should have valid throughput values between 1000 and 1000000 inclusive in increments of 1000. If value is set to null, then autoscale will be disabled."
          }
        },
        "conflictResolutionPolicy": {
          "type": "object",
          "properties": {
            "conflictResolutionPath": {
              "type": "string",
              "nullable": true,
              "metadata": {
                "description": "Required if mode=LastWriterWins. The conflict resolution path in the case of LastWriterWins mode."
              }
            },
            "conflictResolutionProcedure": {
              "type": "string",
              "nullable": true,
              "metadata": {
                "description": "Required if mode=Custom. The procedure to resolve conflicts in the case of custom mode."
              }
            },
            "mode": {
              "type": "string",
              "allowedValues": [
                "Custom",
                "LastWriterWins"
              ],
              "metadata": {
                "description": "Required. Indicates the conflict resolution mode."
              }
            }
          },
          "nullable": true,
          "metadata": {
            "description": "Optional. The conflict resolution policy for the container. Conflicts and conflict resolution policies are applicable if the Azure Cosmos DB account is configured with multiple write regions."
          }
        },
        "defaultTtl": {
          "type": "int",
          "nullable": true,
          "minValue": -1,
          "maxValue": 2147483647,
          "metadata": {
            "description": "Optional. Default to -1. Default time to live (in seconds). With Time to Live or TTL, Azure Cosmos DB provides the ability to delete items automatically from a container after a certain time period. If the value is set to \"-1\", it is equal to infinity, and items don't expire by default."
          }
        },
        "indexingPolicy": {
          "type": "object",
          "nullable": true,
          "metadata": {
            "description": "Optional. Indexing policy of the container."
          }
        },
        "kind": {
          "type": "string",
          "allowedValues": [
            "Hash",
            "MultiHash",
            "Range"
          ],
          "nullable": true,
          "metadata": {
            "description": "Optional. Default to Hash. Indicates the kind of algorithm used for partitioning."
          }
        },
        "throughput": {
          "type": "int",
          "nullable": true,
          "metadata": {
            "description": "Optional. Default to 400. Request Units per second. Will be ignored if autoscaleSettingsMaxThroughput is used."
          }
        },
        "uniqueKeyPolicyKeys": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "paths": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "metadata": {
                  "description": "List of paths must be unique for each document in the Azure Cosmos DB service"
                }
              }
            }
          },
          "nullable": true,
          "metadata": {
            "description": "Optional. The unique key policy configuration containing a list of unique keys that enforces uniqueness constraint on documents in the collection in the Azure Cosmos DB service."
          }
        }
      }
    }
  },
  "parameters": {
    "name": {
      "type": "string",
      "metadata": {
        "description": "Required. Name of the Database Account."
      }
    },
    "location": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "Optional. Default to current resource group scope location. Location for all resources."
      }
    },
    "tags": {
      "type": "object",
      "nullable": true,
      "metadata": {
        "description": "Optional. Tags of the Database Account resource."
      }
    },
    "managedIdentities": {
      "$ref": "#/definitions/managedIdentitiesType",
      "metadata": {
        "description": "Optional. The managed identity definition for this resource."
      }
    },
    "databaseAccountOfferType": {
      "type": "string",
      "defaultValue": "Standard",
      "allowedValues": [
        "Standard"
      ],
      "metadata": {
        "description": "Optional. Default to Standard. The offer type for the Cosmos DB database account."
      }
    },
    "locations": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/failoverLocations"
      },
      "metadata": {
        "description": "Required. Locations enabled for the Cosmos DB account."
      }
    },
    "defaultConsistencyLevel": {
      "type": "string",
      "defaultValue": "Session",
      "allowedValues": [
        "Eventual",
        "ConsistentPrefix",
        "Session",
        "BoundedStaleness",
        "Strong"
      ],
      "metadata": {
        "description": "Optional. Default to Session. The default consistency level of the Cosmos DB account."
      }
    },
    "disableLocalAuth": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Optional. Default to false. Opt-out of local authentication and ensure only MSI and AAD can be used exclusively for authentication."
      }
    },
    "enableAnalyticalStorage": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Optional. Default to false. Flag to indicate whether to enable storage analytics."
      }
    },
    "automaticFailover": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Optional. Default to true. Enable automatic failover for regions."
      }
    },
    "enableFreeTier": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Optional. Default to false. Flag to indicate whether Free Tier is enabled."
      }
    },
    "maxStalenessPrefix": {
      "type": "int",
      "defaultValue": 100000,
      "minValue": 1,
      "maxValue": 2147483647,
      "metadata": {
        "description": "Optional. Default to 100000. Max stale requests. Required for BoundedStaleness. Valid ranges, Single Region: 10 to 1000000. Multi Region: 100000 to 1000000."
      }
    },
    "maxIntervalInSeconds": {
      "type": "int",
      "defaultValue": 300,
      "minValue": 5,
      "maxValue": 86400,
      "metadata": {
        "description": "Optional. Default to 300. Max lag time (minutes). Required for BoundedStaleness. Valid ranges, Single Region: 5 to 84600. Multi Region: 300 to 86400."
      }
    },
    "serverVersion": {
      "type": "string",
      "defaultValue": "4.2",
      "allowedValues": [
        "3.2",
        "3.6",
        "4.0",
        "4.2"
      ],
      "metadata": {
        "description": "Optional. Default to 4.2. Specifies the MongoDB server version to use."
      }
    },
    "sqlDatabases": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/sqlDatabase"
      },
      "defaultValue": [],
      "metadata": {
        "description": "Optional. SQL Databases configurations."
      }
    },
    "mongodbDatabases": {
      "type": "array",
      "defaultValue": [],
      "metadata": {
        "description": "Optional. MongoDB Databases configurations."
      }
    },
    "gremlinDatabases": {
      "type": "array",
      "defaultValue": [],
      "metadata": {
        "description": "Optional. Gremlin Databases configurations."
      }
    },
    "enableTelemetry": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Optional. Enable/Disable usage telemetry for module."
      }
    },
    "lock": {
      "$ref": "#/definitions/lockType",
      "metadata": {
        "description": "Optional. The lock settings of the service."
      }
    },
    "roleAssignments": {
      "$ref": "#/definitions/roleAssignmentType",
      "metadata": {
        "description": "Optional. Array of role assignment objects that contain the 'roleDefinitionIdOrName' and 'principalIds' to define RBAC role assignments on this resource. In the roleDefinitionIdOrName attribute, you can provide either the display name of the role definition, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
      }
    },
    "diagnosticSettings": {
      "$ref": "#/definitions/diagnosticSettingType",
      "metadata": {
        "description": "Optional. The diagnostic settings of the service."
      }
    },
    "capabilitiesToAdd": {
      "type": "array",
      "items": {
        "type": "string"
      },
      "defaultValue": [],
      "allowedValues": [
        "EnableCassandra",
        "EnableTable",
        "EnableGremlin",
        "EnableMongo",
        "DisableRateLimitingResponses",
        "EnableServerless"
      ],
      "metadata": {
        "description": "Optional. List of Cosmos DB capabilities for the account."
      }
    },
    "backupPolicyType": {
      "type": "string",
      "defaultValue": "Continuous",
      "allowedValues": [
        "Periodic",
        "Continuous"
      ],
      "metadata": {
        "description": "Optional. Default to Continuous. Describes the mode of backups."
      }
    },
    "backupPolicyContinuousTier": {
      "type": "string",
      "defaultValue": "Continuous30Days",
      "allowedValues": [
        "Continuous30Days",
        "Continuous7Days"
      ],
      "metadata": {
        "description": "Optional. Default to Continuous30Days. Configuration values for continuous mode backup."
      }
    },
    "backupIntervalInMinutes": {
      "type": "int",
      "defaultValue": 240,
      "minValue": 60,
      "maxValue": 1440,
      "metadata": {
        "description": "Optional. Default to 240. An integer representing the interval in minutes between two backups. Only applies to periodic backup type."
      }
    },
    "backupRetentionIntervalInHours": {
      "type": "int",
      "defaultValue": 8,
      "minValue": 2,
      "maxValue": 720,
      "metadata": {
        "description": "Optional. Default to 8. An integer representing the time (in hours) that each backup is retained. Only applies to periodic backup type."
      }
    },
    "backupStorageRedundancy": {
      "type": "string",
      "defaultValue": "Local",
      "allowedValues": [
        "Geo",
        "Local",
        "Zone"
      ],
      "metadata": {
        "description": "Optional. Default to Local. Enum to indicate type of backup residency. Only applies to periodic backup type."
      }
    },
    "privateEndpoints": {
      "$ref": "#/definitions/privateEndpointType",
      "metadata": {
        "description": "Optional. Configuration details for private endpoints. For security reasons, it is recommended to use private endpoints whenever possible."
      }
    }
  },
  "variables": {
    "copy": [
      {
        "name": "databaseAccount_locations",
        "count": "[length(parameters('locations'))]",
        "input": {
          "failoverPriority": "[parameters('locations')[copyIndex('databaseAccount_locations')].failoverPriority]",
          "isZoneRedundant": "[parameters('locations')[copyIndex('databaseAccount_locations')].isZoneRedundant]",
          "locationName": "[parameters('locations')[copyIndex('databaseAccount_locations')].locationName]"
        }
      },
      {
        "name": "capabilities",
        "count": "[length(parameters('capabilitiesToAdd'))]",
        "input": {
          "name": "[parameters('capabilitiesToAdd')[copyIndex('capabilities')]]"
        }
      }
    ],
    "formattedUserAssignedIdentities": "[reduce(map(coalesce(tryGet(parameters('managedIdentities'), 'userAssignedResourceIds'), createArray()), lambda('id', createObject(format('{0}', lambdaVariables('id')), createObject()))), createObject(), lambda('cur', 'next', union(lambdaVariables('cur'), lambdaVariables('next'))))]",
    "identity": "[if(not(empty(parameters('managedIdentities'))), createObject('type', if(coalesce(tryGet(parameters('managedIdentities'), 'systemAssigned'), false()), if(not(empty(coalesce(tryGet(parameters('managedIdentities'), 'userAssignedResourceIds'), createObject()))), 'SystemAssigned,UserAssigned', 'SystemAssigned'), if(not(empty(coalesce(tryGet(parameters('managedIdentities'), 'userAssignedResourceIds'), createObject()))), 'UserAssigned', null())), 'userAssignedIdentities', if(not(empty(variables('formattedUserAssignedIdentities'))), variables('formattedUserAssignedIdentities'), null())), null())]",
    "consistencyPolicy": {
      "Eventual": {
        "defaultConsistencyLevel": "Eventual"
      },
      "ConsistentPrefix": {
        "defaultConsistencyLevel": "ConsistentPrefix"
      },
      "Session": {
        "defaultConsistencyLevel": "Session"
      },
      "BoundedStaleness": {
        "defaultConsistencyLevel": "BoundedStaleness",
        "maxStalenessPrefix": "[parameters('maxStalenessPrefix')]",
        "maxIntervalInSeconds": "[parameters('maxIntervalInSeconds')]"
      },
      "Strong": {
        "defaultConsistencyLevel": "Strong"
      }
    },
    "kind": "[if(or(not(empty(parameters('sqlDatabases'))), not(empty(parameters('gremlinDatabases')))), 'GlobalDocumentDB', if(not(empty(parameters('mongodbDatabases'))), 'MongoDB', 'Parse'))]",
    "backupPolicy": "[if(equals(parameters('backupPolicyType'), 'Continuous'), createObject('type', parameters('backupPolicyType'), 'continuousModeProperties', createObject('tier', parameters('backupPolicyContinuousTier'))), createObject('type', parameters('backupPolicyType'), 'periodicModeProperties', createObject('backupIntervalInMinutes', parameters('backupIntervalInMinutes'), 'backupRetentionIntervalInHours', parameters('backupRetentionIntervalInHours'), 'backupStorageRedundancy', parameters('backupStorageRedundancy'))))]",
    "databaseAccount_properties": "[union(createObject('databaseAccountOfferType', parameters('databaseAccountOfferType')), if(or(or(not(empty(parameters('sqlDatabases'))), not(empty(parameters('mongodbDatabases')))), not(empty(parameters('gremlinDatabases')))), createObject('consistencyPolicy', variables('consistencyPolicy')[parameters('defaultConsistencyLevel')], 'locations', variables('databaseAccount_locations'), 'capabilities', variables('capabilities'), 'enableFreeTier', parameters('enableFreeTier'), 'backupPolicy', variables('backupPolicy'), 'enableAutomaticFailover', parameters('automaticFailover'), 'enableAnalyticalStorage', parameters('enableAnalyticalStorage')), createObject()), if(not(empty(parameters('sqlDatabases'))), createObject('disableLocalAuth', parameters('disableLocalAuth')), createObject()), if(not(empty(parameters('mongodbDatabases'))), createObject('apiProperties', createObject('serverVersion', parameters('serverVersion'))), createObject()))]",
    "builtInRoleNames": {
      "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
      "Cosmos DB Account Reader Role": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'fbdf93bf-df7d-467e-a4d2-9458aa1360c8')]",
      "Cosmos DB Operator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '230815da-be43-4aae-9cb4-875f7bd000aa')]",
      "CosmosBackupOperator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'db7b14f2-5adf-42da-9f96-f2ee17bab5cb')]",
      "CosmosRestoreOperator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '5432c526-bc82-444a-b7ba-57c5b0b5b34f')]",
      "DocumentDB Account Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '5bd9cd88-fe45-4216-938b-f97437e15450')]",
      "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
      "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
      "Role Based Access Control Administrator (Preview)": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]",
      "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]"
    }
  },
  "resources": {
    "avmTelemetry": {
      "condition": "[parameters('enableTelemetry')]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2023-07-01",
      "name": "[format('46d3xbcp.res.documentdb-databaseaccount.{0}.{1}', replace('-..--..-', '.', '-'), substring(uniqueString(deployment().name, parameters('location')), 0, 4))]",
      "properties": {
        "mode": "Incremental",
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "resources": [],
          "outputs": {
            "telemetry": {
              "type": "String",
              "value": "For more information, see https://aka.ms/avm/TelemetryInfo"
            }
          }
        }
      }
    },
    "databaseAccount": {
      "type": "Microsoft.DocumentDB/databaseAccounts",
      "apiVersion": "2023-04-15",
      "name": "[parameters('name')]",
      "location": "[parameters('location')]",
      "tags": "[parameters('tags')]",
      "identity": "[variables('identity')]",
      "kind": "[variables('kind')]",
      "properties": "[variables('databaseAccount_properties')]"
    },
    "databaseAccount_lock": {
      "condition": "[and(not(empty(coalesce(parameters('lock'), createObject()))), not(equals(tryGet(parameters('lock'), 'kind'), 'None')))]",
      "type": "Microsoft.Authorization/locks",
      "apiVersion": "2020-05-01",
      "scope": "[format('Microsoft.DocumentDB/databaseAccounts/{0}', parameters('name'))]",
      "name": "[coalesce(tryGet(parameters('lock'), 'name'), format('lock-{0}', parameters('name')))]",
      "properties": {
        "level": "[coalesce(tryGet(parameters('lock'), 'kind'), '')]",
        "notes": "[if(equals(tryGet(parameters('lock'), 'kind'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot delete or modify the resource or child resources.')]"
      },
      "dependsOn": [
        "databaseAccount"
      ]
    },
    "databaseAccount_diagnosticSettings": {
      "copy": {
        "name": "databaseAccount_diagnosticSettings",
        "count": "[length(coalesce(parameters('diagnosticSettings'), createArray()))]"
      },
      "type": "Microsoft.Insights/diagnosticSettings",
      "apiVersion": "2021-05-01-preview",
      "scope": "[format('Microsoft.DocumentDB/databaseAccounts/{0}', parameters('name'))]",
      "name": "[coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'name'), format('{0}-diagnosticSettings', parameters('name')))]",
      "properties": {
        "copy": [
          {
            "name": "metrics",
            "count": "[length(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics'))))]",
            "input": {
              "category": "[coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics')))[copyIndex('metrics')].category]",
              "enabled": "[coalesce(tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics')))[copyIndex('metrics')], 'enabled'), true())]",
              "timeGrain": null
            }
          },
          {
            "name": "logs",
            "count": "[length(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs'))))]",
            "input": {
              "categoryGroup": "[tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'categoryGroup')]",
              "category": "[tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'category')]",
              "enabled": "[coalesce(tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'enabled'), true())]"
            }
          }
        ],
        "storageAccountId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'storageAccountResourceId')]",
        "workspaceId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'workspaceResourceId')]",
        "eventHubAuthorizationRuleId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'eventHubAuthorizationRuleResourceId')]",
        "eventHubName": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'eventHubName')]",
        "marketplacePartnerId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'marketplacePartnerResourceId')]",
        "logAnalyticsDestinationType": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logAnalyticsDestinationType')]"
      },
      "dependsOn": [
        "databaseAccount"
      ]
    },
    "databaseAccount_roleAssignments": {
      "copy": {
        "name": "databaseAccount_roleAssignments",
        "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]"
      },
      "type": "Microsoft.Authorization/roleAssignments",
      "apiVersion": "2022-04-01",
      "scope": "[format('Microsoft.DocumentDB/databaseAccounts/{0}', parameters('name'))]",
      "name": "[guid(resourceId('Microsoft.DocumentDB/databaseAccounts', parameters('name')), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].principalId, coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName)]",
      "properties": {
        "roleDefinitionId": "[if(contains(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName), variables('builtInRoleNames')[coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName], if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName)))]",
        "principalId": "[coalesce(parameters('roleAssignments'), createArray())[copyIndex()].principalId]",
        "description": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'description')]",
        "principalType": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'principalType')]",
        "condition": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'condition')]",
        "conditionVersion": "[if(not(empty(tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
        "delegatedManagedIdentityResourceId": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
      },
      "dependsOn": [
        "databaseAccount"
      ]
    },
    "databaseAccount_sqlDatabases": {
      "copy": {
        "name": "databaseAccount_sqlDatabases",
        "count": "[length(parameters('sqlDatabases'))]"
      },
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('{0}-sqldb-{1}', uniqueString(deployment().name, parameters('location')), parameters('sqlDatabases')[copyIndex()].name)]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "name": {
            "value": "[parameters('sqlDatabases')[copyIndex()].name]"
          },
          "containers": {
            "value": "[tryGet(parameters('sqlDatabases')[copyIndex()], 'containers')]"
          },
          "throughput": {
            "value": "[tryGet(parameters('sqlDatabases')[copyIndex()], 'throughput')]"
          },
          "databaseAccountName": {
            "value": "[parameters('name')]"
          },
          "autoscaleSettingsMaxThroughput": {
            "value": "[tryGet(parameters('sqlDatabases')[copyIndex()], 'autoscaleSettingsMaxThroughput')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "languageVersion": "2.0",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.25.53.49325",
              "templateHash": "1307928694299767068"
            },
            "name": "DocumentDB Database Account SQL Databases",
            "description": "This module deploys a SQL Database in a CosmosDB Account.",
            "owner": "Azure/module-maintainers"
          },
          "parameters": {
            "databaseAccountName": {
              "type": "string",
              "metadata": {
                "description": "Conditional. The name of the parent Database Account. Required if the template is used in a standalone deployment."
              }
            },
            "name": {
              "type": "string",
              "metadata": {
                "description": "Required. Name of the SQL database ."
              }
            },
            "containers": {
              "type": "array",
              "items": {
                "type": "object"
              },
              "defaultValue": [],
              "metadata": {
                "description": "Optional. Array of containers to deploy in the SQL database."
              }
            },
            "throughput": {
              "type": "int",
              "nullable": true,
              "metadata": {
                "description": "Optional. Request units per second. Will be ignored if autoscaleSettingsMaxThroughput is used."
              }
            },
            "autoscaleSettingsMaxThroughput": {
              "type": "int",
              "nullable": true,
              "metadata": {
                "description": "Optional. Specifies the Autoscale settings and represents maximum throughput, the resource can scale up to.  The autoscale throughput should have valid throughput values between 1000 and 1000000 inclusive in increments of 1000. If value is set to null, then autoscale will be disabled."
              }
            },
            "tags": {
              "type": "object",
              "nullable": true,
              "metadata": {
                "description": "Optional. Tags of the SQL database resource."
              }
            }
          },
          "resources": {
            "databaseAccount": {
              "existing": true,
              "type": "Microsoft.DocumentDB/databaseAccounts",
              "apiVersion": "2023-04-15",
              "name": "[parameters('databaseAccountName')]"
            },
            "sqlDatabase": {
              "type": "Microsoft.DocumentDB/databaseAccounts/sqlDatabases",
              "apiVersion": "2023-04-15",
              "name": "[format('{0}/{1}', parameters('databaseAccountName'), parameters('name'))]",
              "tags": "[parameters('tags')]",
              "properties": {
                "resource": {
                  "id": "[parameters('name')]"
                },
                "options": "[if(contains(reference('databaseAccount').capabilities, createObject('name', 'EnableServerless')), null(), createObject('throughput', if(equals(parameters('autoscaleSettingsMaxThroughput'), null()), parameters('throughput'), null()), 'autoscaleSettings', if(not(equals(parameters('autoscaleSettingsMaxThroughput'), null())), createObject('maxThroughput', parameters('autoscaleSettingsMaxThroughput')), null())))]"
              },
              "dependsOn": [
                "databaseAccount"
              ]
            },
            "container": {
              "copy": {
                "name": "container",
                "count": "[length(parameters('containers'))]"
              },
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('{0}-sqldb-{1}', uniqueString(deployment().name, parameters('name')), parameters('containers')[copyIndex()].name)]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "databaseAccountName": {
                    "value": "[parameters('databaseAccountName')]"
                  },
                  "sqlDatabaseName": {
                    "value": "[parameters('name')]"
                  },
                  "name": {
                    "value": "[parameters('containers')[copyIndex()].name]"
                  },
                  "analyticalStorageTtl": {
                    "value": "[tryGet(parameters('containers')[copyIndex()], 'analyticalStorageTtl')]"
                  },
                  "autoscaleSettingsMaxThroughput": {
                    "value": "[tryGet(parameters('containers')[copyIndex()], 'autoscaleSettingsMaxThroughput')]"
                  },
                  "conflictResolutionPolicy": {
                    "value": "[tryGet(parameters('containers')[copyIndex()], 'conflictResolutionPolicy')]"
                  },
                  "defaultTtl": {
                    "value": "[tryGet(parameters('containers')[copyIndex()], 'defaultTtl')]"
                  },
                  "indexingPolicy": {
                    "value": "[tryGet(parameters('containers')[copyIndex()], 'indexingPolicy')]"
                  },
                  "kind": {
                    "value": "[tryGet(parameters('containers')[copyIndex()], 'kind')]"
                  },
                  "paths": {
                    "value": "[tryGet(parameters('containers')[copyIndex()], 'paths')]"
                  },
                  "throughput": "[if(and(or(not(equals(parameters('throughput'), null())), not(equals(parameters('autoscaleSettingsMaxThroughput'), null()))), equals(tryGet(parameters('containers')[copyIndex()], 'throughput'), null())), createObject('value', -1), createObject('value', tryGet(parameters('containers')[copyIndex()], 'throughput')))]",
                  "uniqueKeyPolicyKeys": {
                    "value": "[tryGet(parameters('containers')[copyIndex()], 'uniqueKeyPolicyKeys')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "languageVersion": "2.0",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.25.53.49325",
                      "templateHash": "8159752253553558916"
                    },
                    "name": "DocumentDB Database Account SQL Database Containers",
                    "description": "This module deploys a SQL Database Container in a CosmosDB Account.",
                    "owner": "Azure/module-maintainers"
                  },
                  "parameters": {
                    "databaseAccountName": {
                      "type": "string",
                      "metadata": {
                        "description": "Conditional. The name of the parent Database Account. Required if the template is used in a standalone deployment."
                      }
                    },
                    "sqlDatabaseName": {
                      "type": "string",
                      "metadata": {
                        "description": "Conditional. The name of the parent SQL Database. Required if the template is used in a standalone deployment."
                      }
                    },
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Name of the container."
                      }
                    },
                    "analyticalStorageTtl": {
                      "type": "int",
                      "defaultValue": 0,
                      "metadata": {
                        "description": "Optional. Default to 0. Indicates how long data should be retained in the analytical store, for a container. Analytical store is enabled when ATTL is set with a value other than 0. If the value is set to -1, the analytical store retains all historical data, irrespective of the retention of the data in the transactional store."
                      }
                    },
                    "conflictResolutionPolicy": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. The conflict resolution policy for the container. Conflicts and conflict resolution policies are applicable if the Azure Cosmos DB account is configured with multiple write regions."
                      }
                    },
                    "defaultTtl": {
                      "type": "int",
                      "defaultValue": -1,
                      "minValue": -1,
                      "maxValue": 2147483647,
                      "metadata": {
                        "description": "Optional. Default to -1. Default time to live (in seconds). With Time to Live or TTL, Azure Cosmos DB provides the ability to delete items automatically from a container after a certain time period. If the value is set to \"-1\", it is equal to infinity, and items don't expire by default."
                      }
                    },
                    "throughput": {
                      "type": "int",
                      "defaultValue": 400,
                      "metadata": {
                        "description": "Optional. Default to 400. Request Units per second. Will be ignored if autoscaleSettingsMaxThroughput is used."
                      }
                    },
                    "autoscaleSettingsMaxThroughput": {
                      "type": "int",
                      "nullable": true,
                      "maxValue": 1000000,
                      "metadata": {
                        "description": "Optional. Specifies the Autoscale settings and represents maximum throughput, the resource can scale up to. The autoscale throughput should have valid throughput values between 1000 and 1000000 inclusive in increments of 1000. If value is set to null, then autoscale will be disabled."
                      }
                    },
                    "tags": {
                      "type": "object",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Tags of the SQL Database resource."
                      }
                    },
                    "paths": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "minLength": 1,
                      "maxLength": 3,
                      "metadata": {
                        "description": "Required. List of paths using which data within the container can be partitioned. For kind=MultiHash it can be up to 3. For anything else it needs to be exactly 1."
                      }
                    },
                    "indexingPolicy": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. Indexing policy of the container."
                      }
                    },
                    "uniqueKeyPolicyKeys": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. The unique key policy configuration containing a list of unique keys that enforces uniqueness constraint on documents in the collection in the Azure Cosmos DB service."
                      }
                    },
                    "kind": {
                      "type": "string",
                      "defaultValue": "Hash",
                      "allowedValues": [
                        "Hash",
                        "MultiHash",
                        "Range"
                      ],
                      "metadata": {
                        "description": "Optional. Default to Hash. Indicates the kind of algorithm used for partitioning."
                      }
                    }
                  },
                  "resources": {
                    "databaseAccount::sqlDatabase": {
                      "existing": true,
                      "type": "Microsoft.DocumentDB/databaseAccounts/sqlDatabases",
                      "apiVersion": "2023-04-15",
                      "name": "[format('{0}/{1}', parameters('databaseAccountName'), parameters('sqlDatabaseName'))]",
                      "dependsOn": [
                        "databaseAccount"
                      ]
                    },
                    "databaseAccount": {
                      "existing": true,
                      "type": "Microsoft.DocumentDB/databaseAccounts",
                      "apiVersion": "2023-04-15",
                      "name": "[parameters('databaseAccountName')]"
                    },
                    "container": {
                      "type": "Microsoft.DocumentDB/databaseAccounts/sqlDatabases/containers",
                      "apiVersion": "2023-04-15",
                      "name": "[format('{0}/{1}/{2}', parameters('databaseAccountName'), parameters('sqlDatabaseName'), parameters('name'))]",
                      "tags": "[parameters('tags')]",
                      "properties": {
                        "resource": {
                          "analyticalStorageTtl": "[parameters('analyticalStorageTtl')]",
                          "conflictResolutionPolicy": "[parameters('conflictResolutionPolicy')]",
                          "defaultTtl": "[parameters('defaultTtl')]",
                          "id": "[parameters('name')]",
                          "indexingPolicy": "[if(not(empty(parameters('indexingPolicy'))), parameters('indexingPolicy'), null())]",
                          "partitionKey": {
                            "copy": [
                              {
                                "name": "paths",
                                "count": "[length(parameters('paths'))]",
                                "input": "[if(startsWith(parameters('paths')[copyIndex('paths')], '/'), parameters('paths')[copyIndex('paths')], format('/{0}', parameters('paths')[copyIndex('paths')]))]"
                              }
                            ],
                            "kind": "[parameters('kind')]",
                            "version": "[if(equals(parameters('kind'), 'MultiHash'), 2, 1)]"
                          },
                          "uniqueKeyPolicy": "[if(not(empty(parameters('uniqueKeyPolicyKeys'))), createObject('uniqueKeys', parameters('uniqueKeyPolicyKeys')), null())]"
                        },
                        "options": "[if(contains(reference('databaseAccount').capabilities, createObject('name', 'EnableServerless')), null(), createObject('throughput', if(and(equals(parameters('autoscaleSettingsMaxThroughput'), null()), not(equals(parameters('throughput'), -1))), parameters('throughput'), null()), 'autoscaleSettings', if(not(equals(parameters('autoscaleSettingsMaxThroughput'), null())), createObject('maxThroughput', parameters('autoscaleSettingsMaxThroughput')), null())))]"
                      },
                      "dependsOn": [
                        "databaseAccount::sqlDatabase"
                      ]
                    }
                  },
                  "outputs": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the container."
                      },
                      "value": "[parameters('name')]"
                    },
                    "resourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the container."
                      },
                      "value": "[resourceId('Microsoft.DocumentDB/databaseAccounts/sqlDatabases/containers', parameters('databaseAccountName'), parameters('sqlDatabaseName'), parameters('name'))]"
                    },
                    "resourceGroupName": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the resource group the container was created in."
                      },
                      "value": "[resourceGroup().name]"
                    }
                  }
                }
              },
              "dependsOn": [
                "sqlDatabase"
              ]
            }
          },
          "outputs": {
            "name": {
              "type": "string",
              "metadata": {
                "description": "The name of the SQL database."
              },
              "value": "[parameters('name')]"
            },
            "resourceId": {
              "type": "string",
              "metadata": {
                "description": "The resource ID of the SQL database."
              },
              "value": "[resourceId('Microsoft.DocumentDB/databaseAccounts/sqlDatabases', parameters('databaseAccountName'), parameters('name'))]"
            },
            "resourceGroupName": {
              "type": "string",
              "metadata": {
                "description": "The name of the resource group the SQL database was created in."
              },
              "value": "[resourceGroup().name]"
            }
          }
        }
      },
      "dependsOn": [
        "databaseAccount"
      ]
    },
    "databaseAccount_mongodbDatabases": {
      "copy": {
        "name": "databaseAccount_mongodbDatabases",
        "count": "[length(parameters('mongodbDatabases'))]"
      },
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('{0}-mongodb-{1}', uniqueString(deployment().name, parameters('location')), parameters('mongodbDatabases')[copyIndex()].name)]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "databaseAccountName": {
            "value": "[parameters('name')]"
          },
          "name": {
            "value": "[parameters('mongodbDatabases')[copyIndex()].name]"
          },
          "tags": {
            "value": "[coalesce(tryGet(parameters('mongodbDatabases')[copyIndex()], 'tags'), parameters('tags'))]"
          },
          "collections": "[if(contains(parameters('mongodbDatabases')[copyIndex()], 'collections'), createObject('value', parameters('mongodbDatabases')[copyIndex()].collections), createObject('value', createArray()))]",
          "throughput": {
            "value": "[tryGet(parameters('mongodbDatabases')[copyIndex()], 'throughput')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "languageVersion": "2.0",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.25.53.49325",
              "templateHash": "5538920636867167805"
            },
            "name": "DocumentDB Database Account MongoDB Databases",
            "description": "This module deploys a MongoDB Database within a CosmosDB Account.",
            "owner": "Azure/module-maintainers"
          },
          "parameters": {
            "databaseAccountName": {
              "type": "string",
              "metadata": {
                "description": "Conditional. The name of the parent Cosmos DB database account. Required if the template is used in a standalone deployment."
              }
            },
            "name": {
              "type": "string",
              "metadata": {
                "description": "Required. Name of the mongodb database."
              }
            },
            "throughput": {
              "type": "int",
              "defaultValue": 400,
              "metadata": {
                "description": "Optional. Request Units per second."
              }
            },
            "collections": {
              "type": "array",
              "defaultValue": [],
              "metadata": {
                "description": "Optional. Collections in the mongodb database."
              }
            },
            "tags": {
              "type": "object",
              "nullable": true,
              "metadata": {
                "description": "Optional. Tags of the resource."
              }
            }
          },
          "resources": {
            "databaseAccount": {
              "existing": true,
              "type": "Microsoft.DocumentDB/databaseAccounts",
              "apiVersion": "2023-04-15",
              "name": "[parameters('databaseAccountName')]"
            },
            "mongodbDatabase": {
              "type": "Microsoft.DocumentDB/databaseAccounts/mongodbDatabases",
              "apiVersion": "2023-04-15",
              "name": "[format('{0}/{1}', parameters('databaseAccountName'), parameters('name'))]",
              "tags": "[parameters('tags')]",
              "properties": {
                "resource": {
                  "id": "[parameters('name')]"
                },
                "options": "[if(contains(reference('databaseAccount').capabilities, createObject('name', 'EnableServerless')), null(), createObject('throughput', parameters('throughput')))]"
              },
              "dependsOn": [
                "databaseAccount"
              ]
            },
            "mongodbDatabase_collections": {
              "copy": {
                "name": "mongodbDatabase_collections",
                "count": "[length(parameters('collections'))]"
              },
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('{0}-collection-{1}', uniqueString(deployment().name, parameters('name')), parameters('collections')[copyIndex()].name)]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "databaseAccountName": {
                    "value": "[parameters('databaseAccountName')]"
                  },
                  "mongodbDatabaseName": {
                    "value": "[parameters('name')]"
                  },
                  "name": {
                    "value": "[parameters('collections')[copyIndex()].name]"
                  },
                  "indexes": {
                    "value": "[parameters('collections')[copyIndex()].indexes]"
                  },
                  "shardKey": {
                    "value": "[parameters('collections')[copyIndex()].shardKey]"
                  },
                  "throughput": {
                    "value": "[tryGet(parameters('collections')[copyIndex()], 'throughput')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.25.53.49325",
                      "templateHash": "12727124123085683569"
                    },
                    "name": "DocumentDB Database Account MongoDB Database Collections",
                    "description": "This module deploys a MongoDB Database Collection.",
                    "owner": "Azure/module-maintainers"
                  },
                  "parameters": {
                    "databaseAccountName": {
                      "type": "string",
                      "metadata": {
                        "description": "Conditional. The name of the parent Cosmos DB database account. Required if the template is used in a standalone deployment."
                      }
                    },
                    "mongodbDatabaseName": {
                      "type": "string",
                      "metadata": {
                        "description": "Conditional. The name of the parent mongodb database. Required if the template is used in a standalone deployment."
                      }
                    },
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Name of the collection."
                      }
                    },
                    "throughput": {
                      "type": "int",
                      "defaultValue": 400,
                      "metadata": {
                        "description": "Optional. Request Units per second."
                      }
                    },
                    "indexes": {
                      "type": "array",
                      "metadata": {
                        "description": "Required. Indexes for the collection."
                      }
                    },
                    "shardKey": {
                      "type": "object",
                      "metadata": {
                        "description": "Required. ShardKey for the collection."
                      }
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.DocumentDB/databaseAccounts/mongodbDatabases/collections",
                      "apiVersion": "2023-04-15",
                      "name": "[format('{0}/{1}/{2}', parameters('databaseAccountName'), parameters('mongodbDatabaseName'), parameters('name'))]",
                      "properties": {
                        "options": "[if(contains(reference(resourceId('Microsoft.DocumentDB/databaseAccounts', parameters('databaseAccountName')), '2023-04-15').capabilities, createObject('name', 'EnableServerless')), null(), createObject('throughput', parameters('throughput')))]",
                        "resource": {
                          "id": "[parameters('name')]",
                          "indexes": "[parameters('indexes')]",
                          "shardKey": "[parameters('shardKey')]"
                        }
                      }
                    }
                  ],
                  "outputs": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the mongodb database collection."
                      },
                      "value": "[parameters('name')]"
                    },
                    "resourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the mongodb database collection."
                      },
                      "value": "[resourceId('Microsoft.DocumentDB/databaseAccounts/mongodbDatabases/collections', parameters('databaseAccountName'), parameters('mongodbDatabaseName'), parameters('name'))]"
                    },
                    "resourceGroupName": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the resource group the mongodb database collection was created in."
                      },
                      "value": "[resourceGroup().name]"
                    }
                  }
                }
              },
              "dependsOn": [
                "mongodbDatabase"
              ]
            }
          },
          "outputs": {
            "name": {
              "type": "string",
              "metadata": {
                "description": "The name of the mongodb database."
              },
              "value": "[parameters('name')]"
            },
            "resourceId": {
              "type": "string",
              "metadata": {
                "description": "The resource ID of the mongodb database."
              },
              "value": "[resourceId('Microsoft.DocumentDB/databaseAccounts/mongodbDatabases', parameters('databaseAccountName'), parameters('name'))]"
            },
            "resourceGroupName": {
              "type": "string",
              "metadata": {
                "description": "The name of the resource group the mongodb database was created in."
              },
              "value": "[resourceGroup().name]"
            }
          }
        }
      },
      "dependsOn": [
        "databaseAccount"
      ]
    },
    "databaseAccount_gremlinDatabases": {
      "copy": {
        "name": "databaseAccount_gremlinDatabases",
        "count": "[length(parameters('gremlinDatabases'))]"
      },
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('{0}-gremlin-{1}', uniqueString(deployment().name, parameters('location')), parameters('gremlinDatabases')[copyIndex()].name)]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "databaseAccountName": {
            "value": "[parameters('name')]"
          },
          "name": {
            "value": "[parameters('gremlinDatabases')[copyIndex()].name]"
          },
          "tags": {
            "value": "[coalesce(tryGet(parameters('gremlinDatabases')[copyIndex()], 'tags'), parameters('tags'))]"
          },
          "graphs": "[if(contains(parameters('gremlinDatabases')[copyIndex()], 'graphs'), createObject('value', parameters('gremlinDatabases')[copyIndex()].graphs), createObject('value', createArray()))]",
          "maxThroughput": "[if(contains(parameters('gremlinDatabases')[copyIndex()], 'maxThroughput'), createObject('value', parameters('gremlinDatabases')[copyIndex()].maxThroughput), createObject('value', 4000))]",
          "throughput": {
            "value": "[tryGet(parameters('gremlinDatabases')[copyIndex()], 'throughput')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "languageVersion": "2.0",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.25.53.49325",
              "templateHash": "5227237801347888732"
            },
            "name": "DocumentDB Database Account Gremlin Databases",
            "description": "This module deploys a Gremlin Database within a CosmosDB Account.",
            "owner": "Azure/module-maintainers"
          },
          "parameters": {
            "name": {
              "type": "string",
              "metadata": {
                "description": "Required. Name of the Gremlin database."
              }
            },
            "tags": {
              "type": "object",
              "nullable": true,
              "metadata": {
                "description": "Optional. Tags of the Gremlin database resource."
              }
            },
            "databaseAccountName": {
              "type": "string",
              "metadata": {
                "description": "Conditional. The name of the parent Gremlin database. Required if the template is used in a standalone deployment."
              }
            },
            "graphs": {
              "type": "array",
              "defaultValue": [],
              "metadata": {
                "description": "Optional. Array of graphs to deploy in the Gremlin database."
              }
            },
            "maxThroughput": {
              "type": "int",
              "defaultValue": 4000,
              "metadata": {
                "description": "Optional. Represents maximum throughput, the resource can scale up to. Cannot be set together with `throughput`. If `throughput` is set to something else than -1, this autoscale setting is ignored."
              }
            },
            "throughput": {
              "type": "int",
              "nullable": true,
              "metadata": {
                "description": "Optional. Request Units per second (for example 10000). Cannot be set together with `maxThroughput`."
              }
            }
          },
          "resources": {
            "databaseAccount": {
              "existing": true,
              "type": "Microsoft.DocumentDB/databaseAccounts",
              "apiVersion": "2023-04-15",
              "name": "[parameters('databaseAccountName')]"
            },
            "gremlinDatabase": {
              "type": "Microsoft.DocumentDB/databaseAccounts/gremlinDatabases",
              "apiVersion": "2023-04-15",
              "name": "[format('{0}/{1}', parameters('databaseAccountName'), parameters('name'))]",
              "tags": "[parameters('tags')]",
              "properties": {
                "options": "[if(contains(reference('databaseAccount').capabilities, createObject('name', 'EnableServerless')), createObject(), createObject('autoscaleSettings', if(equals(parameters('throughput'), null()), createObject('maxThroughput', parameters('maxThroughput')), null()), 'throughput', parameters('throughput')))]",
                "resource": {
                  "id": "[parameters('name')]"
                }
              },
              "dependsOn": [
                "databaseAccount"
              ]
            },
            "gremlinDatabase_gremlinGraphs": {
              "copy": {
                "name": "gremlinDatabase_gremlinGraphs",
                "count": "[length(parameters('graphs'))]"
              },
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('{0}-gremlindb-{1}', uniqueString(deployment().name, parameters('name')), parameters('graphs')[copyIndex()].name)]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "name": {
                    "value": "[parameters('graphs')[copyIndex()].name]"
                  },
                  "gremlinDatabaseName": {
                    "value": "[parameters('name')]"
                  },
                  "databaseAccountName": {
                    "value": "[parameters('databaseAccountName')]"
                  },
                  "indexingPolicy": "[if(contains(parameters('graphs')[copyIndex()], 'indexingPolicy'), createObject('value', parameters('graphs')[copyIndex()].indexingPolicy), createObject('value', true()))]",
                  "partitionKeyPaths": "[if(not(empty(parameters('graphs')[copyIndex()].partitionKeyPaths)), createObject('value', parameters('graphs')[copyIndex()].partitionKeyPaths), createObject('value', createArray()))]"
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "languageVersion": "2.0",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.25.53.49325",
                      "templateHash": "4078462189838201163"
                    },
                    "name": "DocumentDB Database Accounts Gremlin Databases Graphs",
                    "description": "This module deploys a DocumentDB Database Accounts Gremlin Database Graph.",
                    "owner": "Azure/module-maintainers"
                  },
                  "parameters": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Name of the graph."
                      }
                    },
                    "tags": {
                      "type": "object",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Tags of the Gremlin graph resource."
                      }
                    },
                    "databaseAccountName": {
                      "type": "string",
                      "metadata": {
                        "description": "Conditional. The name of the parent Database Account. Required if the template is used in a standalone deployment."
                      }
                    },
                    "gremlinDatabaseName": {
                      "type": "string",
                      "metadata": {
                        "description": "Conditional. The name of the parent Gremlin Database. Required if the template is used in a standalone deployment."
                      }
                    },
                    "indexingPolicy": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. Indexing policy of the graph."
                      }
                    },
                    "partitionKeyPaths": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. List of paths using which data within the container can be partitioned."
                      }
                    }
                  },
                  "resources": {
                    "databaseAccount::gremlinDatabase": {
                      "existing": true,
                      "type": "Microsoft.DocumentDB/databaseAccounts/gremlinDatabases",
                      "apiVersion": "2023-04-15",
                      "name": "[format('{0}/{1}', parameters('databaseAccountName'), parameters('gremlinDatabaseName'))]",
                      "dependsOn": [
                        "databaseAccount"
                      ]
                    },
                    "databaseAccount": {
                      "existing": true,
                      "type": "Microsoft.DocumentDB/databaseAccounts",
                      "apiVersion": "2023-04-15",
                      "name": "[parameters('databaseAccountName')]"
                    },
                    "gremlinGraph": {
                      "type": "Microsoft.DocumentDB/databaseAccounts/gremlinDatabases/graphs",
                      "apiVersion": "2023-04-15",
                      "name": "[format('{0}/{1}/{2}', parameters('databaseAccountName'), parameters('gremlinDatabaseName'), parameters('name'))]",
                      "tags": "[parameters('tags')]",
                      "properties": {
                        "resource": {
                          "id": "[parameters('name')]",
                          "indexingPolicy": "[if(not(empty(parameters('indexingPolicy'))), parameters('indexingPolicy'), null())]",
                          "partitionKey": {
                            "paths": "[if(not(empty(parameters('partitionKeyPaths'))), parameters('partitionKeyPaths'), null())]"
                          }
                        }
                      },
                      "dependsOn": [
                        "databaseAccount::gremlinDatabase"
                      ]
                    }
                  },
                  "outputs": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the graph."
                      },
                      "value": "[parameters('name')]"
                    },
                    "resourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the graph."
                      },
                      "value": "[resourceId('Microsoft.DocumentDB/databaseAccounts/gremlinDatabases/graphs', parameters('databaseAccountName'), parameters('gremlinDatabaseName'), parameters('name'))]"
                    },
                    "resourceGroupName": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the resource group the graph was created in."
                      },
                      "value": "[resourceGroup().name]"
                    }
                  }
                }
              },
              "dependsOn": [
                "gremlinDatabase"
              ]
            }
          },
          "outputs": {
            "name": {
              "type": "string",
              "metadata": {
                "description": "The name of the Gremlin database."
              },
              "value": "[parameters('name')]"
            },
            "resourceId": {
              "type": "string",
              "metadata": {
                "description": "The resource ID of the Gremlin database."
              },
              "value": "[resourceId('Microsoft.DocumentDB/databaseAccounts/gremlinDatabases', parameters('databaseAccountName'), parameters('name'))]"
            },
            "resourceGroupName": {
              "type": "string",
              "metadata": {
                "description": "The name of the resource group the Gremlin database was created in."
              },
              "value": "[resourceGroup().name]"
            }
          }
        }
      },
      "dependsOn": [
        "databaseAccount"
      ]
    },
    "databaseAccount_privateEndpoints": {
      "copy": {
        "name": "databaseAccount_privateEndpoints",
        "count": "[length(coalesce(parameters('privateEndpoints'), createArray()))]"
      },
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('{0}-databaseAccount-PrivateEndpoint-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "name": {
            "value": "[coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'name'), format('pep-{0}-{1}-{2}', last(split(resourceId('Microsoft.DocumentDB/databaseAccounts', parameters('name')), '/')), coalesce(parameters('privateEndpoints'), createArray())[copyIndex()].service, copyIndex()))]"
          },
          "privateLinkServiceConnections": "[if(not(equals(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'manualPrivateLinkServiceConnections'), true())), createObject('value', createArray(createObject('name', coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'privateLinkServiceConnectionName'), format('{0}-{1}-{2}', last(split(resourceId('Microsoft.DocumentDB/databaseAccounts', parameters('name')), '/')), coalesce(parameters('privateEndpoints'), createArray())[copyIndex()].service, copyIndex())), 'properties', createObject('privateLinkServiceId', resourceId('Microsoft.DocumentDB/databaseAccounts', parameters('name')), 'groupIds', createArray(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()].service))))), createObject('value', null()))]",
          "manualPrivateLinkServiceConnections": "[if(equals(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'manualPrivateLinkServiceConnections'), true()), createObject('value', createArray(createObject('name', coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'privateLinkServiceConnectionName'), format('{0}-{1}-{2}', last(split(resourceId('Microsoft.DocumentDB/databaseAccounts', parameters('name')), '/')), coalesce(parameters('privateEndpoints'), createArray())[copyIndex()].service, copyIndex())), 'properties', createObject('privateLinkServiceId', resourceId('Microsoft.DocumentDB/databaseAccounts', parameters('name')), 'groupIds', createArray(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()].service), 'requestMessage', coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'manualConnectionRequestMessage'), 'Manual approval required.'))))), createObject('value', null()))]",
          "subnetResourceId": {
            "value": "[coalesce(parameters('privateEndpoints'), createArray())[copyIndex()].subnetResourceId]"
          },
          "enableTelemetry": {
            "value": "[coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'enableTelemetry'), parameters('enableTelemetry'))]"
          },
          "location": {
            "value": "[coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'location'), reference(split(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()].subnetResourceId, '/subnets/')[0], '2020-06-01', 'Full').location)]"
          },
          "lock": {
            "value": "[coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'lock'), parameters('lock'))]"
          },
          "privateDnsZoneGroupName": {
            "value": "[tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'privateDnsZoneGroupName')]"
          },
          "privateDnsZoneResourceIds": {
            "value": "[tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'privateDnsZoneResourceIds')]"
          },
          "roleAssignments": {
            "value": "[tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'roleAssignments')]"
          },
          "tags": {
            "value": "[coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'tags'), parameters('tags'))]"
          },
          "customDnsConfigs": {
            "value": "[tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'customDnsConfigs')]"
          },
          "ipConfigurations": {
            "value": "[tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'ipConfigurations')]"
          },
          "applicationSecurityGroupResourceIds": {
            "value": "[tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'applicationSecurityGroupResourceIds')]"
          },
          "customNetworkInterfaceName": {
            "value": "[tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'customNetworkInterfaceName')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "languageVersion": "2.0",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.24.24.22086",
              "templateHash": "2592884001616184297"
            },
            "name": "Private Endpoints",
            "description": "This module deploys a Private Endpoint.",
            "owner": "Azure/module-maintainers"
          },
          "definitions": {
            "roleAssignmentType": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "roleDefinitionIdOrName": {
                    "type": "string",
                    "metadata": {
                      "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                    }
                  },
                  "principalId": {
                    "type": "string",
                    "metadata": {
                      "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                    }
                  },
                  "principalType": {
                    "type": "string",
                    "allowedValues": [
                      "Device",
                      "ForeignGroup",
                      "Group",
                      "ServicePrincipal",
                      "User"
                    ],
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. The principal type of the assigned principal ID."
                    }
                  },
                  "description": {
                    "type": "string",
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. The description of the role assignment."
                    }
                  },
                  "condition": {
                    "type": "string",
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                    }
                  },
                  "conditionVersion": {
                    "type": "string",
                    "allowedValues": [
                      "2.0"
                    ],
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. Version of the condition."
                    }
                  },
                  "delegatedManagedIdentityResourceId": {
                    "type": "string",
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. The Resource Id of the delegated managed identity resource."
                    }
                  }
                }
              },
              "nullable": true
            },
            "lockType": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Specify the name of lock."
                  }
                },
                "kind": {
                  "type": "string",
                  "allowedValues": [
                    "CanNotDelete",
                    "None",
                    "ReadOnly"
                  ],
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Specify the type of lock."
                  }
                }
              },
              "nullable": true
            },
            "ipConfigurationsType": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "metadata": {
                      "description": "Required. The name of the resource that is unique within a resource group."
                    }
                  },
                  "properties": {
                    "type": "object",
                    "properties": {
                      "groupId": {
                        "type": "string",
                        "metadata": {
                          "description": "Required. The ID of a group obtained from the remote resource that this private endpoint should connect to."
                        }
                      },
                      "memberName": {
                        "type": "string",
                        "metadata": {
                          "description": "Required. The member name of a group obtained from the remote resource that this private endpoint should connect to."
                        }
                      },
                      "privateIPAddress": {
                        "type": "string",
                        "metadata": {
                          "description": "Required. A private IP address obtained from the private endpoint's subnet."
                        }
                      }
                    },
                    "metadata": {
                      "description": "Required. Properties of private endpoint IP configurations."
                    }
                  }
                }
              },
              "nullable": true
            },
            "manualPrivateLinkServiceConnectionsType": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "metadata": {
                      "description": "Required. The name of the private link service connection."
                    }
                  },
                  "properties": {
                    "type": "object",
                    "properties": {
                      "groupIds": {
                        "type": "array",
                        "metadata": {
                          "description": "Required. The ID of a group obtained from the remote resource that this private endpoint should connect to."
                        }
                      },
                      "privateLinkServiceId": {
                        "type": "string",
                        "metadata": {
                          "description": "Required. The resource id of private link service."
                        }
                      },
                      "requestMessage": {
                        "type": "string",
                        "metadata": {
                          "description": "Optional. A message passed to the owner of the remote resource with this connection request. Restricted to 140 chars."
                        }
                      }
                    },
                    "metadata": {
                      "description": "Required. Properties of private link service connection."
                    }
                  }
                }
              },
              "nullable": true
            },
            "privateLinkServiceConnectionsType": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "metadata": {
                      "description": "Required. The name of the private link service connection."
                    }
                  },
                  "properties": {
                    "type": "object",
                    "properties": {
                      "groupIds": {
                        "type": "array",
                        "metadata": {
                          "description": "Required. The ID of a group obtained from the remote resource that this private endpoint should connect to."
                        }
                      },
                      "privateLinkServiceId": {
                        "type": "string",
                        "metadata": {
                          "description": "Required. The resource id of private link service."
                        }
                      },
                      "requestMessage": {
                        "type": "string",
                        "nullable": true,
                        "metadata": {
                          "description": "Optional. A message passed to the owner of the remote resource with this connection request. Restricted to 140 chars."
                        }
                      }
                    },
                    "metadata": {
                      "description": "Required. Properties of private link service connection."
                    }
                  }
                }
              },
              "nullable": true
            },
            "customDnsConfigType": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "fqdn": {
                    "type": "string",
                    "metadata": {
                      "description": "Required. Fqdn that resolves to private endpoint IP address."
                    }
                  },
                  "ipAddresses": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "metadata": {
                      "description": "Required. A list of private IP addresses of the private endpoint."
                    }
                  }
                }
              },
              "nullable": true
            }
          },
          "parameters": {
            "name": {
              "type": "string",
              "metadata": {
                "description": "Required. Name of the private endpoint resource to create."
              }
            },
            "subnetResourceId": {
              "type": "string",
              "metadata": {
                "description": "Required. Resource ID of the subnet where the endpoint needs to be created."
              }
            },
            "applicationSecurityGroupResourceIds": {
              "type": "array",
              "nullable": true,
              "metadata": {
                "description": "Optional. Application security groups in which the private endpoint IP configuration is included."
              }
            },
            "customNetworkInterfaceName": {
              "type": "string",
              "nullable": true,
              "metadata": {
                "description": "Optional. The custom name of the network interface attached to the private endpoint."
              }
            },
            "ipConfigurations": {
              "$ref": "#/definitions/ipConfigurationsType",
              "metadata": {
                "description": "Optional. A list of IP configurations of the private endpoint. This will be used to map to the First Party Service endpoints."
              }
            },
            "privateDnsZoneGroupName": {
              "type": "string",
              "nullable": true,
              "metadata": {
                "description": "Optional. The name of the private DNS zone group to create if `privateDnsZoneResourceIds` were provided."
              }
            },
            "privateDnsZoneResourceIds": {
              "type": "array",
              "nullable": true,
              "metadata": {
                "description": "Optional. The private DNS zone groups to associate the private endpoint. A DNS zone group can support up to 5 DNS zones."
              }
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]",
              "metadata": {
                "description": "Optional. Location for all Resources."
              }
            },
            "lock": {
              "$ref": "#/definitions/lockType",
              "metadata": {
                "description": "Optional. The lock settings of the service."
              }
            },
            "roleAssignments": {
              "$ref": "#/definitions/roleAssignmentType",
              "metadata": {
                "description": "Optional. Array of role assignments to create."
              }
            },
            "tags": {
              "type": "object",
              "nullable": true,
              "metadata": {
                "description": "Optional. Tags to be applied on all resources/resource groups in this deployment."
              }
            },
            "customDnsConfigs": {
              "$ref": "#/definitions/customDnsConfigType",
              "metadata": {
                "description": "Optional. Custom DNS configurations."
              }
            },
            "manualPrivateLinkServiceConnections": {
              "$ref": "#/definitions/manualPrivateLinkServiceConnectionsType",
              "metadata": {
                "description": "Optional. A grouping of information about the connection to the remote resource. Used when the network admin does not have access to approve connections to the remote resource."
              }
            },
            "privateLinkServiceConnections": {
              "$ref": "#/definitions/privateLinkServiceConnectionsType",
              "metadata": {
                "description": "Optional. A grouping of information about the connection to the remote resource."
              }
            },
            "enableTelemetry": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Optional. Enable/Disable usage telemetry for module."
              }
            }
          },
          "variables": {
            "builtInRoleNames": {
              "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
              "DNS Resolver Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '0f2ebee7-ffd4-4fc0-b3b7-664099fdad5d')]",
              "DNS Zone Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'befefa01-2a29-4197-83a8-272ff33ce314')]",
              "Domain Services Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'eeaeda52-9324-47f6-8069-5d5bade478b2')]",
              "Domain Services Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '361898ef-9ed1-48c2-849c-a832951106bb')]",
              "Network Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4d97b98b-1d4f-4787-a291-c67834d212e7')]",
              "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
              "Private DNS Zone Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b12aa53e-6015-4669-85d0-8515ebb3ae7f')]",
              "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
              "Role Based Access Control Administrator (Preview)": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]"
            }
          },
          "resources": {
            "avmTelemetry": {
              "condition": "[parameters('enableTelemetry')]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2023-07-01",
              "name": "[format('46d3xbcp.res.network-privateendpoint.{0}.{1}', replace('0.4.0', '.', '-'), substring(uniqueString(deployment().name, parameters('location')), 0, 4))]",
              "properties": {
                "mode": "Incremental",
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "resources": [],
                  "outputs": {
                    "telemetry": {
                      "type": "String",
                      "value": "For more information, see https://aka.ms/avm/TelemetryInfo"
                    }
                  }
                }
              }
            },
            "privateEndpoint": {
              "type": "Microsoft.Network/privateEndpoints",
              "apiVersion": "2023-04-01",
              "name": "[parameters('name')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "properties": {
                "copy": [
                  {
                    "name": "applicationSecurityGroups",
                    "count": "[length(coalesce(parameters('applicationSecurityGroupResourceIds'), createArray()))]",
                    "input": {
                      "id": "[coalesce(parameters('applicationSecurityGroupResourceIds'), createArray())[copyIndex('applicationSecurityGroups')]]"
                    }
                  }
                ],
                "customDnsConfigs": "[coalesce(parameters('customDnsConfigs'), createArray())]",
                "customNetworkInterfaceName": "[coalesce(parameters('customNetworkInterfaceName'), '')]",
                "ipConfigurations": "[coalesce(parameters('ipConfigurations'), createArray())]",
                "manualPrivateLinkServiceConnections": "[coalesce(parameters('manualPrivateLinkServiceConnections'), createArray())]",
                "privateLinkServiceConnections": "[coalesce(parameters('privateLinkServiceConnections'), createArray())]",
                "subnet": {
                  "id": "[parameters('subnetResourceId')]"
                }
              }
            },
            "privateEndpoint_lock": {
              "condition": "[and(not(empty(coalesce(parameters('lock'), createObject()))), not(equals(tryGet(parameters('lock'), 'kind'), 'None')))]",
              "type": "Microsoft.Authorization/locks",
              "apiVersion": "2020-05-01",
              "scope": "[format('Microsoft.Network/privateEndpoints/{0}', parameters('name'))]",
              "name": "[coalesce(tryGet(parameters('lock'), 'name'), format('lock-{0}', parameters('name')))]",
              "properties": {
                "level": "[coalesce(tryGet(parameters('lock'), 'kind'), '')]",
                "notes": "[if(equals(tryGet(parameters('lock'), 'kind'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot delete or modify the resource or child resources.')]"
              },
              "dependsOn": [
                "privateEndpoint"
              ]
            },
            "privateEndpoint_roleAssignments": {
              "copy": {
                "name": "privateEndpoint_roleAssignments",
                "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]"
              },
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.Network/privateEndpoints/{0}', parameters('name'))]",
              "name": "[guid(resourceId('Microsoft.Network/privateEndpoints', parameters('name')), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].principalId, coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName)]",
              "properties": {
                "roleDefinitionId": "[if(contains(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName), variables('builtInRoleNames')[coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName], if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName)))]",
                "principalId": "[coalesce(parameters('roleAssignments'), createArray())[copyIndex()].principalId]",
                "description": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'description')]",
                "principalType": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'principalType')]",
                "condition": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'condition')]",
                "conditionVersion": "[if(not(empty(tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                "delegatedManagedIdentityResourceId": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
              },
              "dependsOn": [
                "privateEndpoint"
              ]
            },
            "privateEndpoint_privateDnsZoneGroup": {
              "condition": "[not(empty(parameters('privateDnsZoneResourceIds')))]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('{0}-PrivateEndpoint-PrivateDnsZoneGroup', uniqueString(deployment().name))]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "name": {
                    "value": "[coalesce(parameters('privateDnsZoneGroupName'), 'default')]"
                  },
                  "privateDNSResourceIds": {
                    "value": "[coalesce(parameters('privateDnsZoneResourceIds'), createArray())]"
                  },
                  "privateEndpointName": {
                    "value": "[parameters('name')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.24.24.22086",
                      "templateHash": "9321937464667207030"
                    },
                    "name": "Private Endpoint Private DNS Zone Groups",
                    "description": "This module deploys a Private Endpoint Private DNS Zone Group.",
                    "owner": "Azure/module-maintainers"
                  },
                  "parameters": {
                    "privateEndpointName": {
                      "type": "string",
                      "metadata": {
                        "description": "Conditional. The name of the parent private endpoint. Required if the template is used in a standalone deployment."
                      }
                    },
                    "privateDNSResourceIds": {
                      "type": "array",
                      "minLength": 1,
                      "maxLength": 5,
                      "metadata": {
                        "description": "Required. Array of private DNS zone resource IDs. A DNS zone group can support up to 5 DNS zones."
                      }
                    },
                    "name": {
                      "type": "string",
                      "defaultValue": "default",
                      "metadata": {
                        "description": "Optional. The name of the private DNS zone group."
                      }
                    }
                  },
                  "variables": {
                    "copy": [
                      {
                        "name": "privateDnsZoneConfigs",
                        "count": "[length(parameters('privateDNSResourceIds'))]",
                        "input": {
                          "name": "[last(split(parameters('privateDNSResourceIds')[copyIndex('privateDnsZoneConfigs')], '/'))]",
                          "properties": {
                            "privateDnsZoneId": "[parameters('privateDNSResourceIds')[copyIndex('privateDnsZoneConfigs')]]"
                          }
                        }
                      }
                    ]
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
                      "apiVersion": "2023-04-01",
                      "name": "[format('{0}/{1}', parameters('privateEndpointName'), parameters('name'))]",
                      "properties": {
                        "privateDnsZoneConfigs": "[variables('privateDnsZoneConfigs')]"
                      }
                    }
                  ],
                  "outputs": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the private endpoint DNS zone group."
                      },
                      "value": "[parameters('name')]"
                    },
                    "resourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the private endpoint DNS zone group."
                      },
                      "value": "[resourceId('Microsoft.Network/privateEndpoints/privateDnsZoneGroups', parameters('privateEndpointName'), parameters('name'))]"
                    },
                    "resourceGroupName": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource group the private endpoint DNS zone group was deployed into."
                      },
                      "value": "[resourceGroup().name]"
                    }
                  }
                }
              },
              "dependsOn": [
                "privateEndpoint"
              ]
            }
          },
          "outputs": {
            "resourceGroupName": {
              "type": "string",
              "metadata": {
                "description": "The resource group the private endpoint was deployed into."
              },
              "value": "[resourceGroup().name]"
            },
            "resourceId": {
              "type": "string",
              "metadata": {
                "description": "The resource ID of the private endpoint."
              },
              "value": "[resourceId('Microsoft.Network/privateEndpoints', parameters('name'))]"
            },
            "name": {
              "type": "string",
              "metadata": {
                "description": "The name of the private endpoint."
              },
              "value": "[parameters('name')]"
            },
            "location": {
              "type": "string",
              "metadata": {
                "description": "The location the resource was deployed into."
              },
              "value": "[reference('privateEndpoint', '2023-04-01', 'full').location]"
            },
            "groupId": {
              "type": "string",
              "metadata": {
                "description": "The group Id for the private endpoint Group."
              },
              "value": "[if(not(empty(reference('privateEndpoint').manualPrivateLinkServiceConnections)), reference('privateEndpoint').manualPrivateLinkServiceConnections[0].properties.groupIds[0], reference('privateEndpoint').privateLinkServiceConnections[0].properties.groupIds[0])]"
            }
          }
        }
      },
      "dependsOn": [
        "databaseAccount"
      ]
    }
  },
  "outputs": {
    "name": {
      "type": "string",
      "metadata": {
        "description": "The name of the database account."
      },
      "value": "[parameters('name')]"
    },
    "resourceId": {
      "type": "string",
      "metadata": {
        "description": "The resource ID of the database account."
      },
      "value": "[resourceId('Microsoft.DocumentDB/databaseAccounts', parameters('name'))]"
    },
    "resourceGroupName": {
      "type": "string",
      "metadata": {
        "description": "The name of the resource group the database account was created in."
      },
      "value": "[resourceGroup().name]"
    },
    "systemAssignedMIPrincipalId": {
      "type": "string",
      "metadata": {
        "description": "The principal ID of the system assigned identity."
      },
      "value": "[coalesce(tryGet(tryGet(reference('databaseAccount', '2023-04-15', 'full'), 'identity'), 'principalId'), '')]"
    },
    "location": {
      "type": "string",
      "metadata": {
        "description": "The location the resource was deployed into."
      },
      "value": "[reference('databaseAccount', '2023-04-15', 'full').location]"
    }
  }
}