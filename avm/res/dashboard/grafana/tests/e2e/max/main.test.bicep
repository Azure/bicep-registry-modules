targetScope = 'subscription'

// import
import * as inbuiltRole from '../../../roles/builtInRoles.bicep'

metadata name = 'Using large parameter set'
metadata description = 'This instance deploys the module with most of its features enabled.'

// ========== //
// Parameters //
// ========== //

@description('Optional. The name of the resource group to deploy for testing purposes.')
@maxLength(90)
param resourceGroupName string = 'dep-${namePrefix}-dashboard.grafana-${serviceShort}-rg'

@description('Optional. A short identifier for the kind of deployment. Should be kept short to not run into resource-name length-constraints.')
param serviceShort string = 'crmax'

@description('Optional. A token to inject into the name of each resource.')
param namePrefix string = '#_namePrefix_#'

// Pipeline is selecting random regions which dont support all cosmos features and have constraints when creating new cosmos
#disable-next-line no-hardcoded-location
var enforcedLocation = 'northeurope'

// ============ //
// Dependencies //
// ============ //

// General resources
// =================
resource resourceGroup 'Microsoft.Resources/resourceGroups@2021-04-01' = {
  name: resourceGroupName
  location: enforcedLocation
}

module nestedDependencies 'dependencies.bicep' = {
  scope: resourceGroup
  name: '${uniqueString(deployment().name, enforcedLocation)}-nestedDependencies'
  params: {
    managedIdentityName: 'dep-${namePrefix}-msi-${serviceShort}'
    location: enforcedLocation
    virtualNetworkName: 'dep-${namePrefix}-vnet-${serviceShort}'
  }
}

// ============== //
// Test Execution //
// ============== //

@batchSize(1)
module testDeployment '../../../main.bicep' = [
  for iteration in ['init', 'idem']: {
    scope: resourceGroup
    name: '${uniqueString(deployment().name, enforcedLocation)}-test-${serviceShort}-${iteration}'
    dependsOn: [
      nestedDependencies
    ]
    params: {
      name: '${namePrefix}${serviceShort}001'
      location: enforcedLocation

      tags: {
        test: 'large-parameter-set'
      }
      apiKey: 'Enabled'
      autoGeneratedDomainNameLabelScope: 'TenantReuse'
      deterministicOutboundIP: 'Enabled'
      enableTelemetry: true
      enterpriseConfigurations: {}
      grafanaConfigurations: {
        smtp: {
          enabled: false
          fromAddress: '0.0.0.0'
          fromName: 'learn.microsoft.com'
          host: 'learn.microsoft.com'
          password: 'Learn@123Micro'
          skipVerify: false
          user: 'admin'
          startTLSPolicy: 'MandatoryStartTLS'
        }
      }
      skuName: 'Standard'
      lock: {
        kind: 'None'
        name: 'locknone'
      }
      publicNetworkAccess: 'Enabled'
      privateEndpoints: [
        {
          privateDnsZoneResourceIds: [
            nestedDependencies.outputs.privateDNSZoneResourceId
          ]
          subnetResourceId: nestedDependencies.outputs.subnetResourceId
          roleAssignments: [
            {
              roleDefinitionIdOrName: inbuiltRole.builtInRoleNames['Grafana Admin']
              principalId: nestedDependencies.outputs.managedIdentityPrincipalId
              principalType: 'ServicePrincipal'
            }
            {
              roleDefinitionIdOrName: inbuiltRole.builtInRoleNames['Grafana Editor']
              principalId: nestedDependencies.outputs.managedIdentityPrincipalId
              principalType: 'ServicePrincipal'
            }
            {
              roleDefinitionIdOrName: inbuiltRole.builtInRoleNames['Grafana Viewer']
              principalId: nestedDependencies.outputs.managedIdentityPrincipalId
              principalType: 'ServicePrincipal'
            }
          ]
          tags: {
            'hidden-title': 'This is visible in the resource name'
            Environment: 'Non-Prod'
            Role: 'DeploymentValidation'
          }
        }
        {
          privateDnsZoneResourceIds: [
            nestedDependencies.outputs.privateDNSZoneResourceId
          ]
          subnetResourceId: nestedDependencies.outputs.subnetResourceId
        }
      ]
      zoneRedundancy: 'Enabled'
    }
  }
]
