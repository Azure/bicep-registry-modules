metadata name = 'Azure Managed Grafana'
metadata description = 'This module deploys an Azure Managed Grafana(Grafana).'
metadata owner = 'Azure/module-maintainers'

// imports
import * as grafanaTypes from 'types/grafana.type.bicep'

@description('Required. Name of your Azure Managed Grafana.')
@minLength(2)
@maxLength(23)
param name string

@description('Specifies the resource tags for the Azure Monitor managed service for Prometheus resource.')
param tags object

@description('Optional. Location for all resources.')
param location string = resourceGroup().location

@description('Optional. Enable/Disable usage telemetry for module.')
param enableTelemetry bool = true

@description('Specifies the api key setting of the Azure Managed Grafana resource.')
@allowed([
  'Disabled'
  'Enabled'
])
param apiKey string = 'Disabled'

@allowed([
  'Essential'
  'Standard'
])
@description('Specifies the sku of the Azure Managed Grafana resource.')
param skuName string = 'Standard'

@allowed([
  'TenantReuse'
])
param autoGeneratedDomainNameLabelScope string = 'TenantReuse'
param deterministicOutboundIP string = 'Disabled'
param enterpriseConfigurations grafanaTypes.enterpriseConfigurationsType = {}
param grafanaIntegrations grafanaTypes.grafanaIntegrationsType = {}

param grafanaPlugins object = {}

param grafanaMajorVersion string = '10'

@description('Optional. Specifies the the state for enable or disable traffic over the public interface for the the Azure Managed Grafana resource.')
@allowed([
  'Disabled'
  'Enabled'
])
param publicNetworkAccess string = 'Disabled'

@description('Optional. The zone redundancy setting of the Azure Managed Grafana resource.')
@allowed([
  'Disabled'
  'Enabled'
])
param zoneRedundancy string = 'Disabled'

@description('Optional. Configuration details for private endpoints. For security reasons, it is recommended to use private endpoints whenever possible.')
param privateEndpoints grafanaTypes.privateEndpointType

resource avmTelemetry 'Microsoft.Resources/deployments@2023-07-01' =
  if (enableTelemetry) {
    name: '46d3xbcp.res.bashboard.grafana.${replace('-..--..-', '.', '-')}.${substring(uniqueString(deployment().name, location), 0, 4)}'
    properties: {
      mode: 'Incremental'
      template: {
        '$schema': 'https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#'
        contentVersion: '1.0.0.0'
        resources: []
        outputs: {
          telemetry: {
            type: 'String'
            value: 'For more information, see https://aka.ms/avm/TelemetryInfo'
          }
        }
      }
    }
  }

param grafanaConfigurations grafanaTypes.grafanaConfigurationsType = {}

@description('Optional. The managed identity definition for this resource.')
param managedIdentities grafanaTypes.managedIdentitiesType

@description('Optional. The lock settings of the service.')
param lock grafanaTypes.lockType

var formattedUserAssignedIdentities = reduce(
  map((managedIdentities.?userAssignedResourcesIds ?? []), (id) => { '${id}': {} }),
  {},
  (cur, next) => union(cur, next)
) // Converts the flat array to an object like { '${id1}': {}, '${id2}': {} }

var identity = !empty(managedIdentities)
  ? {
      type: (managedIdentities.?systemAssigned ?? false)
        ? (!empty(managedIdentities.?userAssignedResourcesIds ?? {}) ? 'SystemAssigned,UserAssigned' : 'SystemAssigned')
        : (!empty(managedIdentities.?userAssignedResourcesIds ?? {}) ? 'UserAssigned' : '')
      userAssignedIdentities: !empty(formattedUserAssignedIdentities) ? formattedUserAssignedIdentities : null
    }
  : null

resource grafana 'Microsoft.Dashboard/grafana@2023-09-01' = {
  name: name
  location: location
  sku: {
    name: skuName
  }
  identity: identity
  tags: tags
  properties: {
    apiKey: apiKey
    autoGeneratedDomainNameLabelScope: autoGeneratedDomainNameLabelScope
    deterministicOutboundIP: deterministicOutboundIP
    enterpriseConfigurations: empty(enterpriseConfigurations) ? null : enterpriseConfigurations
    grafanaConfigurations: grafanaConfigurations
    grafanaIntegrations: grafanaIntegrations
    grafanaMajorVersion: grafanaMajorVersion
    grafanaPlugins: grafanaPlugins
    publicNetworkAccess: publicNetworkAccess
    zoneRedundancy: zoneRedundancy
  }
}

module namespace_privateEndpoints 'br/public:avm/res/network/private-endpoint:0.4.1' = [
  for (privateEndpoint, index) in (privateEndpoints ?? []): {
    name: '${uniqueString(deployment().name, location)}-grafana-PrivateEndpoint-${index}'
    scope: resourceGroup(privateEndpoint.?resourceGroupName ?? '')
    params: {
      name: privateEndpoint.?name ?? 'pep-${last(split(grafana.id, '/'))}-${privateEndpoint.?service ?? 'grafana'}-${index}'
      privateLinkServiceConnections: privateEndpoint.?isManualConnection != true
        ? [
            {
              name: privateEndpoint.?privateLinkServiceConnectionName ?? '${last(split(grafana.id, '/'))}-${privateEndpoint.?service ?? 'grafana'}-${index}'
              properties: {
                privateLinkServiceId: grafana.id
                groupIds: [
                  privateEndpoint.?service ?? 'grafana'
                ]
              }
            }
          ]
        : null
      manualPrivateLinkServiceConnections: privateEndpoint.?isManualConnection == true
        ? [
            {
              name: privateEndpoint.?privateLinkServiceConnectionName ?? '${last(split(grafana.id, '/'))}-${privateEndpoint.?service ?? 'grafana'}-${index}'
              properties: {
                privateLinkServiceId: grafana.id
                groupIds: [
                  privateEndpoint.?service ?? 'grafana'
                ]
                requestMessage: privateEndpoint.?manualConnectionRequestMessage ?? 'Manual approval required.'
              }
            }
          ]
        : null
      subnetResourceId: privateEndpoint.subnetResourceId
      enableTelemetry: privateEndpoint.?enableTelemetry ?? enableTelemetry
      location: privateEndpoint.?location ?? reference(
        split(privateEndpoint.subnetResourceId, '/subnets/')[0],
        '2020-06-01',
        'Full'
      ).location
      lock: privateEndpoint.?lock ?? lock
      privateDnsZoneGroupName: privateEndpoint.?privateDnsZoneGroupName
      privateDnsZoneResourceIds: privateEndpoint.?privateDnsZoneResourceIds
      roleAssignments: privateEndpoint.?roleAssignments
      tags: privateEndpoint.?tags ?? tags
      customDnsConfigs: privateEndpoint.?customDnsConfigs
      ipConfigurations: privateEndpoint.?ipConfigurations
      applicationSecurityGroupResourceIds: privateEndpoint.?applicationSecurityGroupResourceIds
      customNetworkInterfaceName: privateEndpoint.?customNetworkInterfaceName
    }
  }
]

// Outputs
output id string = grafana.id
output name string = grafana.name
