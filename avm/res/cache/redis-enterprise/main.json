{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "languageVersion": "2.0",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "_generator": {
      "name": "bicep",
      "version": "0.33.93.31351",
      "templateHash": "14334908869749651566"
    },
    "name": "Redis Enterprise and Azure Managed Redis (Preview)",
    "description": "This module deploys a Redis Enterprise or Azure Managed Redis (Preview) cache.",
    "owner": "Azure/module-maintainers"
  },
  "definitions": {
    "databaseType": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "allowedValues": [
            "default"
          ],
          "nullable": true,
          "metadata": {
            "description": "Optional. Name of the database."
          }
        },
        "accessKeysAuthentication": {
          "type": "string",
          "allowedValues": [
            "Disabled",
            "Enabled"
          ],
          "nullable": true,
          "metadata": {
            "description": "Optional. Allow authentication via access keys. Only supported on Azure Managed Redis (Preview) SKUs: Balanced, ComputeOptimized, FlashOptimized, and MemoryOptimized. THIS IS A PARAMETER USED FOR A PREVIEW SERVICE/FEATURE, MICROSOFT MAY NOT PROVIDE SUPPORT FOR THIS, PLEASE CHECK THE [PRODUCT DOCS](https://learn.microsoft.com/azure/azure-cache-for-redis/managed-redis/managed-redis-entra-for-authentication#disable-access-key-authentication-on-your-cache) FOR CLARIFICATION."
          }
        },
        "clientProtocol": {
          "type": "string",
          "allowedValues": [
            "Encrypted",
            "Plaintext"
          ],
          "nullable": true,
          "metadata": {
            "description": "Optional. Specifies whether Redis clients can connect using TLS-encrypted or plaintext Redis protocols."
          }
        },
        "clusteringPolicy": {
          "type": "string",
          "allowedValues": [
            "EnterpriseCluster",
            "OSSCluster"
          ],
          "nullable": true,
          "metadata": {
            "description": "Optional. Redis clustering policy. [Learn more](https://aka.ms/redis/enterprise/clustering)."
          }
        },
        "deferUpgrade": {
          "type": "string",
          "allowedValues": [
            "Deferred",
            "NotDeferred"
          ],
          "nullable": true,
          "metadata": {
            "description": "Optional. Specifies whether to defer future Redis major version upgrades by up to 90 days. [Learn more](https://aka.ms/redisversionupgrade#defer-upgrades)."
          }
        },
        "evictionPolicy": {
          "type": "string",
          "allowedValues": [
            "AllKeysLFU",
            "AllKeysLRU",
            "AllKeysRandom",
            "NoEviction",
            "VolatileLFU",
            "VolatileLRU",
            "VolatileRandom",
            "VolatileTTL"
          ],
          "nullable": true,
          "metadata": {
            "description": "Optional. Specifies the eviction policy for the Redis resource."
          }
        },
        "geoReplication": {
          "$ref": "#/definitions/geoReplicationType",
          "nullable": true,
          "metadata": {
            "description": "Optional. The active geo-replication settings of the service. All caches within a geo-replication group must have the same configuration."
          }
        },
        "modules": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/moduleType"
          },
          "nullable": true,
          "metadata": {
            "description": "Optional. Redis modules to enable. Restrictions may apply based on SKU and configuration. [Learn more](https://aka.ms/redis/enterprise/modules)."
          }
        },
        "port": {
          "type": "int",
          "nullable": true,
          "minValue": 10000,
          "maxValue": 10000,
          "metadata": {
            "description": "Optional. TCP port of the database endpoint."
          }
        },
        "persistence": {
          "$ref": "#/definitions/persistenceType",
          "nullable": true,
          "metadata": {
            "description": "Optional. The persistence settings of the service."
          }
        },
        "accessPolicyAssignments": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/accessPolicyAssignmentType"
          },
          "nullable": true,
          "metadata": {
            "description": "Optional. Access policy assignments for Microsoft Entra authentication. Only supported on Azure Managed Redis (Preview) SKUs: Balanced, ComputeOptimized, FlashOptimized, and MemoryOptimized. THIS IS A PARAMETER USED FOR A PREVIEW SERVICE/FEATURE, MICROSOFT MAY NOT PROVIDE SUPPORT FOR THIS, PLEASE CHECK THE [PRODUCT DOCS](https://learn.microsoft.com/azure/azure-cache-for-redis/managed-redis/managed-redis-entra-for-authentication) FOR CLARIFICATION."
          }
        },
        "secretsExportConfiguration": {
          "$ref": "#/definitions/secretsExportConfigurationType",
          "nullable": true,
          "metadata": {
            "description": "Optional. Key vault reference and secret settings for the module's secrets export."
          }
        },
        "diagnosticSettings": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/diagnosticSettingLogsOnlyType"
          },
          "nullable": true,
          "metadata": {
            "description": "Optional. The database-level diagnostic settings of the service."
          }
        }
      },
      "metadata": {
        "__bicep_export!": true
      }
    },
    "privateEndpointOutputType": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "metadata": {
            "description": "The name of the private endpoint."
          }
        },
        "resourceId": {
          "type": "string",
          "metadata": {
            "description": "The resource ID of the private endpoint."
          }
        },
        "groupId": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "The group Id for the private endpoint Group."
          }
        },
        "customDnsConfigs": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "fqdn": {
                "type": "string",
                "nullable": true,
                "metadata": {
                  "description": "FQDN that resolves to private endpoint IP address."
                }
              },
              "ipAddresses": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "metadata": {
                  "description": "A list of private IP addresses of the private endpoint."
                }
              }
            }
          },
          "metadata": {
            "description": "The custom DNS configurations of the private endpoint."
          }
        },
        "networkInterfaceResourceIds": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "metadata": {
            "description": "The IDs of the network interfaces associated with the private endpoint."
          }
        }
      },
      "metadata": {
        "__bicep_export!": true
      }
    },
    "_1.privateEndpointCustomDnsConfigType": {
      "type": "object",
      "properties": {
        "fqdn": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "Optional. FQDN that resolves to private endpoint IP address."
          }
        },
        "ipAddresses": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "metadata": {
            "description": "Required. A list of private IP addresses of the private endpoint."
          }
        }
      },
      "metadata": {
        "__bicep_imported_from!": {
          "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.5.1"
        }
      }
    },
    "_1.privateEndpointIpConfigurationType": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "metadata": {
            "description": "Required. The name of the resource that is unique within a resource group."
          }
        },
        "properties": {
          "type": "object",
          "properties": {
            "groupId": {
              "type": "string",
              "metadata": {
                "description": "Required. The ID of a group obtained from the remote resource that this private endpoint should connect to."
              }
            },
            "memberName": {
              "type": "string",
              "metadata": {
                "description": "Required. The member name of a group obtained from the remote resource that this private endpoint should connect to."
              }
            },
            "privateIPAddress": {
              "type": "string",
              "metadata": {
                "description": "Required. A private IP address obtained from the private endpoint's subnet."
              }
            }
          },
          "metadata": {
            "description": "Required. Properties of private endpoint IP configurations."
          }
        }
      },
      "metadata": {
        "__bicep_imported_from!": {
          "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.5.1"
        }
      }
    },
    "_1.privateEndpointPrivateDnsZoneGroupType": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "Optional. The name of the Private DNS Zone Group."
          }
        },
        "privateDnsZoneGroupConfigs": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string",
                "nullable": true,
                "metadata": {
                  "description": "Optional. The name of the private DNS Zone Group config."
                }
              },
              "privateDnsZoneResourceId": {
                "type": "string",
                "metadata": {
                  "description": "Required. The resource id of the private DNS zone."
                }
              }
            }
          },
          "metadata": {
            "description": "Required. The private DNS Zone Groups to associate the Private Endpoint. A DNS Zone Group can support up to 5 DNS zones."
          }
        }
      },
      "metadata": {
        "__bicep_imported_from!": {
          "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.5.1"
        }
      }
    },
    "_1.secretSetOutputType": {
      "type": "object",
      "properties": {
        "secretResourceId": {
          "type": "string",
          "metadata": {
            "description": "The resourceId of the exported secret."
          }
        },
        "secretUri": {
          "type": "string",
          "metadata": {
            "description": "The secret URI of the exported secret."
          }
        },
        "secretUriWithVersion": {
          "type": "string",
          "metadata": {
            "description": "The secret URI with version of the exported secret."
          }
        }
      },
      "metadata": {
        "description": "An AVM-aligned type for the output of the secret set via the secrets export feature.",
        "__bicep_imported_from!": {
          "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.5.1"
        }
      }
    },
    "_2.aofPersistenceType": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "allowedValues": [
            "aof"
          ],
          "metadata": {
            "description": "Required. AOF persistence type."
          }
        },
        "frequency": {
          "type": "string",
          "allowedValues": [
            "1s"
          ],
          "metadata": {
            "description": "Required. The frequency at which data is written to disk."
          }
        }
      },
      "metadata": {
        "__bicep_imported_from!": {
          "sourceTemplate": "database/main.bicep"
        }
      }
    },
    "_2.disabledPersistenceType": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "allowedValues": [
            "disabled"
          ],
          "metadata": {
            "description": "Required. Disabled persistence type."
          }
        }
      },
      "metadata": {
        "__bicep_imported_from!": {
          "sourceTemplate": "database/main.bicep"
        }
      }
    },
    "_2.linkedDatabaseType": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "metadata": {
            "description": "Required. Resource ID of linked database. Should be in the form: `/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Cache/redisEnterprise/{redisName}/databases/default`."
          }
        }
      },
      "metadata": {
        "__bicep_imported_from!": {
          "sourceTemplate": "database/main.bicep"
        }
      }
    },
    "_2.rdbPersistenceType": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "allowedValues": [
            "rdb"
          ],
          "metadata": {
            "description": "Required. RDB persistence type."
          }
        },
        "frequency": {
          "type": "string",
          "allowedValues": [
            "12h",
            "1h",
            "6h"
          ],
          "metadata": {
            "description": "Required. The frequency at which an RDB snapshot of the database is created."
          }
        }
      },
      "metadata": {
        "__bicep_imported_from!": {
          "sourceTemplate": "database/main.bicep"
        }
      }
    },
    "accessPolicyAssignmentType": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "Optional. Name of the access policy assignment."
          }
        },
        "userObjectId": {
          "type": "string",
          "metadata": {
            "description": "Required. Object ID to which the access policy will be assigned."
          }
        },
        "accessPolicyName": {
          "type": "string",
          "allowedValues": [
            "default"
          ],
          "nullable": true,
          "metadata": {
            "description": "Optional. Name of the access policy to be assigned. The current only allowed name is 'default'."
          }
        }
      },
      "metadata": {
        "__bicep_imported_from!": {
          "sourceTemplate": "database/main.bicep"
        }
      }
    },
    "customerManagedKeyType": {
      "type": "object",
      "properties": {
        "keyVaultResourceId": {
          "type": "string",
          "metadata": {
            "description": "Required. The resource ID of a key vault to reference a customer managed key for encryption from."
          }
        },
        "keyName": {
          "type": "string",
          "metadata": {
            "description": "Required. The name of the customer managed key to use for encryption."
          }
        },
        "keyVersion": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "Optional. The version of the customer managed key to reference for encryption. If not provided, the deployment will use the latest version available at deployment time."
          }
        },
        "userAssignedIdentityResourceId": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "Optional. User assigned identity to use when fetching the customer managed key. Required if no system assigned identity is available for use."
          }
        }
      },
      "metadata": {
        "description": "An AVM-aligned type for a customer-managed key. To be used if the resource type does not support auto-rotation of the customer-managed key.",
        "__bicep_imported_from!": {
          "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.5.1"
        }
      }
    },
    "diagnosticSettingLogsOnlyType": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "Optional. The name of diagnostic setting."
          }
        },
        "logCategoriesAndGroups": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "category": {
                "type": "string",
                "nullable": true,
                "metadata": {
                  "description": "Optional. Name of a Diagnostic Log category for a resource type this setting is applied to. Set the specific logs to collect here."
                }
              },
              "categoryGroup": {
                "type": "string",
                "nullable": true,
                "metadata": {
                  "description": "Optional. Name of a Diagnostic Log category group for a resource type this setting is applied to. Set to `allLogs` to collect all logs."
                }
              },
              "enabled": {
                "type": "bool",
                "nullable": true,
                "metadata": {
                  "description": "Optional. Enable or disable the category explicitly. Default is `true`."
                }
              }
            }
          },
          "nullable": true,
          "metadata": {
            "description": "Optional. The name of logs that will be streamed. \"allLogs\" includes all possible logs for the resource. Set to `[]` to disable log collection."
          }
        },
        "logAnalyticsDestinationType": {
          "type": "string",
          "allowedValues": [
            "AzureDiagnostics",
            "Dedicated"
          ],
          "nullable": true,
          "metadata": {
            "description": "Optional. A string indicating whether the export to Log Analytics should use the default destination type, i.e. AzureDiagnostics, or use a destination type."
          }
        },
        "workspaceResourceId": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "Optional. Resource ID of the diagnostic log analytics workspace. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
          }
        },
        "storageAccountResourceId": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "Optional. Resource ID of the diagnostic storage account. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
          }
        },
        "eventHubAuthorizationRuleResourceId": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "Optional. Resource ID of the diagnostic event hub authorization rule for the Event Hubs namespace in which the event hub should be created or streamed to."
          }
        },
        "eventHubName": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "Optional. Name of the diagnostic event hub within the namespace to which logs are streamed. Without this, an event hub is created for each log category. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
          }
        },
        "marketplacePartnerResourceId": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "Optional. The full ARM resource ID of the Marketplace resource to which you would like to send Diagnostic Logs."
          }
        }
      },
      "metadata": {
        "description": "An AVM-aligned type for a diagnostic setting. To be used if only logs are supported by the resource provider.",
        "__bicep_imported_from!": {
          "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.5.1"
        }
      }
    },
    "diagnosticSettingMetricsOnlyType": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "Optional. The name of diagnostic setting."
          }
        },
        "metricCategories": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "category": {
                "type": "string",
                "metadata": {
                  "description": "Required. Name of a Diagnostic Metric category for a resource type this setting is applied to. Set to `AllMetrics` to collect all metrics."
                }
              },
              "enabled": {
                "type": "bool",
                "nullable": true,
                "metadata": {
                  "description": "Optional. Enable or disable the category explicitly. Default is `true`."
                }
              }
            }
          },
          "nullable": true,
          "metadata": {
            "description": "Optional. The name of metrics that will be streamed. \"allMetrics\" includes all possible metrics for the resource. Set to `[]` to disable metric collection."
          }
        },
        "logAnalyticsDestinationType": {
          "type": "string",
          "allowedValues": [
            "AzureDiagnostics",
            "Dedicated"
          ],
          "nullable": true,
          "metadata": {
            "description": "Optional. A string indicating whether the export to Log Analytics should use the default destination type, i.e. AzureDiagnostics, or use a destination type."
          }
        },
        "workspaceResourceId": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "Optional. Resource ID of the diagnostic log analytics workspace. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
          }
        },
        "storageAccountResourceId": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "Optional. Resource ID of the diagnostic storage account. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
          }
        },
        "eventHubAuthorizationRuleResourceId": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "Optional. Resource ID of the diagnostic event hub authorization rule for the Event Hubs namespace in which the event hub should be created or streamed to."
          }
        },
        "eventHubName": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "Optional. Name of the diagnostic event hub within the namespace to which logs are streamed. Without this, an event hub is created for each log category. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
          }
        },
        "marketplacePartnerResourceId": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "Optional. The full ARM resource ID of the Marketplace resource to which you would like to send Diagnostic Logs."
          }
        }
      },
      "metadata": {
        "description": "An AVM-aligned type for a diagnostic setting. To be used if only metrics are supported by the resource provider.",
        "__bicep_imported_from!": {
          "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.5.1"
        }
      }
    },
    "geoReplicationType": {
      "type": "object",
      "properties": {
        "groupNickname": {
          "type": "string",
          "metadata": {
            "description": "Required. The name of the geo-replication group."
          }
        },
        "linkedDatabases": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/_2.linkedDatabaseType"
          },
          "metadata": {
            "description": "Required. List of database resources to link with this database, including itself."
          }
        }
      },
      "metadata": {
        "__bicep_imported_from!": {
          "sourceTemplate": "database/main.bicep"
        }
      }
    },
    "lockType": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "Optional. Specify the name of lock."
          }
        },
        "kind": {
          "type": "string",
          "allowedValues": [
            "CanNotDelete",
            "None",
            "ReadOnly"
          ],
          "nullable": true,
          "metadata": {
            "description": "Optional. Specify the type of lock."
          }
        }
      },
      "metadata": {
        "description": "An AVM-aligned type for a lock.",
        "__bicep_imported_from!": {
          "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.5.1"
        }
      }
    },
    "managedIdentityOnlyUserAssignedType": {
      "type": "object",
      "properties": {
        "userAssignedResourceIds": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "nullable": true,
          "metadata": {
            "description": "Optional. The resource ID(s) to assign to the resource. Required if a user assigned identity is used for encryption."
          }
        }
      },
      "metadata": {
        "description": "An AVM-aligned type for a managed identity configuration. To be used if only user-assigned identities are supported by the resource provider.",
        "__bicep_imported_from!": {
          "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.5.1"
        }
      }
    },
    "moduleType": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "allowedValues": [
            "RediSearch",
            "RedisBloom",
            "RedisJSON",
            "RedisTimeSeries"
          ],
          "metadata": {
            "description": "Required. The name of the module."
          }
        },
        "args": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "Optional. Additional module arguments."
          }
        }
      },
      "metadata": {
        "__bicep_imported_from!": {
          "sourceTemplate": "database/main.bicep"
        }
      }
    },
    "persistenceType": {
      "type": "object",
      "discriminator": {
        "propertyName": "type",
        "mapping": {
          "disabled": {
            "$ref": "#/definitions/_2.disabledPersistenceType"
          },
          "aof": {
            "$ref": "#/definitions/_2.aofPersistenceType"
          },
          "rdb": {
            "$ref": "#/definitions/_2.rdbPersistenceType"
          }
        }
      },
      "metadata": {
        "__bicep_imported_from!": {
          "sourceTemplate": "database/main.bicep"
        }
      }
    },
    "privateEndpointSingleServiceType": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "Optional. The name of the Private Endpoint."
          }
        },
        "location": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "Optional. The location to deploy the Private Endpoint to."
          }
        },
        "privateLinkServiceConnectionName": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "Optional. The name of the private link connection to create."
          }
        },
        "service": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "Optional. The subresource to deploy the Private Endpoint for. For example \"vault\" for a Key Vault Private Endpoint."
          }
        },
        "subnetResourceId": {
          "type": "string",
          "metadata": {
            "description": "Required. Resource ID of the subnet where the endpoint needs to be created."
          }
        },
        "resourceGroupResourceId": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "Optional. The resource ID of the Resource Group the Private Endpoint will be created in. If not specified, the Resource Group of the provided Virtual Network Subnet is used."
          }
        },
        "privateDnsZoneGroup": {
          "$ref": "#/definitions/_1.privateEndpointPrivateDnsZoneGroupType",
          "nullable": true,
          "metadata": {
            "description": "Optional. The private DNS Zone Group to configure for the Private Endpoint."
          }
        },
        "isManualConnection": {
          "type": "bool",
          "nullable": true,
          "metadata": {
            "description": "Optional. If Manual Private Link Connection is required."
          }
        },
        "manualConnectionRequestMessage": {
          "type": "string",
          "nullable": true,
          "maxLength": 140,
          "metadata": {
            "description": "Optional. A message passed to the owner of the remote resource with the manual connection request."
          }
        },
        "customDnsConfigs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/_1.privateEndpointCustomDnsConfigType"
          },
          "nullable": true,
          "metadata": {
            "description": "Optional. Custom DNS configurations."
          }
        },
        "ipConfigurations": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/_1.privateEndpointIpConfigurationType"
          },
          "nullable": true,
          "metadata": {
            "description": "Optional. A list of IP configurations of the Private Endpoint. This will be used to map to the first-party Service endpoints."
          }
        },
        "applicationSecurityGroupResourceIds": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "nullable": true,
          "metadata": {
            "description": "Optional. Application security groups in which the Private Endpoint IP configuration is included."
          }
        },
        "customNetworkInterfaceName": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "Optional. The custom name of the network interface attached to the Private Endpoint."
          }
        },
        "lock": {
          "$ref": "#/definitions/lockType",
          "nullable": true,
          "metadata": {
            "description": "Optional. Specify the type of lock."
          }
        },
        "roleAssignments": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/roleAssignmentType"
          },
          "nullable": true,
          "metadata": {
            "description": "Optional. Array of role assignments to create."
          }
        },
        "tags": {
          "type": "object",
          "nullable": true,
          "metadata": {
            "description": "Optional. Tags to be applied on all resources/Resource Groups in this deployment."
          }
        },
        "enableTelemetry": {
          "type": "bool",
          "nullable": true,
          "metadata": {
            "description": "Optional. Enable/Disable usage telemetry for module."
          }
        }
      },
      "metadata": {
        "description": "An AVM-aligned type for a private endpoint. To be used if the private endpoint's default service / groupId can be assumed (i.e., for services that only have one Private Endpoint type like 'vault' for key vault).",
        "__bicep_imported_from!": {
          "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.5.1"
        }
      }
    },
    "roleAssignmentType": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "Optional. The name (as GUID) of the role assignment. If not provided, a GUID will be generated."
          }
        },
        "roleDefinitionIdOrName": {
          "type": "string",
          "metadata": {
            "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
          }
        },
        "principalId": {
          "type": "string",
          "metadata": {
            "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
          }
        },
        "principalType": {
          "type": "string",
          "allowedValues": [
            "Device",
            "ForeignGroup",
            "Group",
            "ServicePrincipal",
            "User"
          ],
          "nullable": true,
          "metadata": {
            "description": "Optional. The principal type of the assigned principal ID."
          }
        },
        "description": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "Optional. The description of the role assignment."
          }
        },
        "condition": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
          }
        },
        "conditionVersion": {
          "type": "string",
          "allowedValues": [
            "2.0"
          ],
          "nullable": true,
          "metadata": {
            "description": "Optional. Version of the condition."
          }
        },
        "delegatedManagedIdentityResourceId": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "Optional. The Resource Id of the delegated managed identity resource."
          }
        }
      },
      "metadata": {
        "description": "An AVM-aligned type for a role assignment.",
        "__bicep_imported_from!": {
          "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.5.1"
        }
      }
    },
    "secretsExportConfigurationType": {
      "type": "object",
      "properties": {
        "keyVaultResourceId": {
          "type": "string",
          "metadata": {
            "description": "Required. The resource ID of the key vault where to store the secrets of this module."
          }
        },
        "primaryAccessKeyName": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "Optional. The primaryAccessKey secret name to create."
          }
        },
        "primaryConnectionStringName": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "Optional. The primaryConnectionString secret name to create."
          }
        },
        "primaryStackExchangeRedisConnectionStringName": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "Optional. The primaryStackExchangeRedisConnectionString secret name to create."
          }
        },
        "secondaryAccessKeyName": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "Optional. The secondaryAccessKey secret name to create."
          }
        },
        "secondaryConnectionStringName": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "Optional. The secondaryConnectionString secret name to create."
          }
        },
        "secondaryStackExchangeRedisConnectionStringName": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "Optional. The secondaryStackExchangeRedisConnectionString secret name to create."
          }
        }
      },
      "metadata": {
        "__bicep_imported_from!": {
          "sourceTemplate": "database/main.bicep"
        }
      }
    },
    "secretsOutputType": {
      "type": "object",
      "properties": {},
      "additionalProperties": {
        "$ref": "#/definitions/_1.secretSetOutputType",
        "metadata": {
          "description": "An exported secret's references."
        }
      },
      "metadata": {
        "description": "A map of the exported secrets",
        "__bicep_imported_from!": {
          "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.5.1"
        }
      }
    }
  },
  "parameters": {
    "location": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "Optional. Location for all resources."
      }
    },
    "name": {
      "type": "string",
      "metadata": {
        "description": "Required. The name of the cache resource."
      }
    },
    "lock": {
      "$ref": "#/definitions/lockType",
      "nullable": true,
      "metadata": {
        "description": "Optional. The lock settings of the service."
      }
    },
    "roleAssignments": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/roleAssignmentType"
      },
      "nullable": true,
      "metadata": {
        "description": "Optional. Array of role assignments to create."
      }
    },
    "tags": {
      "type": "object",
      "nullable": true,
      "metadata": {
        "description": "Optional. Tags of the resource."
      }
    },
    "managedIdentities": {
      "$ref": "#/definitions/managedIdentityOnlyUserAssignedType",
      "nullable": true,
      "metadata": {
        "description": "Conditional. The managed identity definition for this resource. Required if 'customerManagedKey' is not empty."
      }
    },
    "customerManagedKey": {
      "$ref": "#/definitions/customerManagedKeyType",
      "nullable": true,
      "metadata": {
        "description": "Optional. The customer managed key definition to use for the managed service."
      }
    },
    "highAvailability": {
      "type": "string",
      "defaultValue": "Enabled",
      "allowedValues": [
        "Enabled",
        "Disabled"
      ],
      "metadata": {
        "description": "Optional. Specifies whether to enable data replication for high availability. Used only with Azure Managed Redis (Preview) SKUs: Balanced, ComputeOptimized, FlashOptimized, and MemoryOptimized. HIGH AVAILABILITY IS A PARAMETER USED FOR A PREVIEW FEATURE, MICROSOFT MAY NOT PROVIDE SUPPORT FOR THIS, PLEASE CHECK THE [PRODUCT DOCS](https://learn.microsoft.com/azure/azure-cache-for-redis/managed-redis/managed-redis-high-availability) FOR CLARIFICATION."
      }
    },
    "minimumTlsVersion": {
      "type": "string",
      "defaultValue": "1.2",
      "allowedValues": [
        "1.2"
      ],
      "metadata": {
        "description": "Optional. The minimum TLS version for the Redis cluster to support."
      }
    },
    "capacity": {
      "type": "int",
      "defaultValue": 2,
      "allowedValues": [
        2,
        3,
        4,
        6,
        8,
        9,
        10
      ],
      "metadata": {
        "description": "Optional. The size of the cluster. Only supported on Redis Enterprise SKUs: Enterprise, EnterpriseFlash. Valid values are (2, 4, 6, 8, 10) for Enterprise SKUs and (3, 9) for EnterpriseFlash SKUs. [Learn more](https://learn.microsoft.com/azure/azure-cache-for-redis/cache-best-practices-enterprise-tiers#sharding-and-cpu-utilization)."
      }
    },
    "skuName": {
      "type": "string",
      "defaultValue": "Enterprise_E5",
      "allowedValues": [
        "Balanced_B0",
        "Balanced_B1",
        "Balanced_B3",
        "Balanced_B5",
        "Balanced_B10",
        "Balanced_B20",
        "Balanced_B50",
        "Balanced_B100",
        "Balanced_B150",
        "Balanced_B250",
        "Balanced_B350",
        "Balanced_B500",
        "Balanced_B700",
        "Balanced_B1000",
        "ComputeOptimized_X3",
        "ComputeOptimized_X5",
        "ComputeOptimized_X10",
        "ComputeOptimized_X20",
        "ComputeOptimized_X50",
        "ComputeOptimized_X100",
        "ComputeOptimized_X150",
        "ComputeOptimized_X250",
        "ComputeOptimized_X350",
        "ComputeOptimized_X500",
        "ComputeOptimized_X700",
        "Enterprise_E1",
        "Enterprise_E5",
        "Enterprise_E10",
        "Enterprise_E20",
        "Enterprise_E50",
        "Enterprise_E100",
        "Enterprise_E200",
        "Enterprise_E400",
        "EnterpriseFlash_F300",
        "EnterpriseFlash_F700",
        "EnterpriseFlash_F1500",
        "FlashOptimized_A250",
        "FlashOptimized_A500",
        "FlashOptimized_A700",
        "FlashOptimized_A1000",
        "FlashOptimized_A1500",
        "FlashOptimized_A2000",
        "FlashOptimized_A4500",
        "MemoryOptimized_M10",
        "MemoryOptimized_M20",
        "MemoryOptimized_M50",
        "MemoryOptimized_M100",
        "MemoryOptimized_M150",
        "MemoryOptimized_M250",
        "MemoryOptimized_M350",
        "MemoryOptimized_M500",
        "MemoryOptimized_M700",
        "MemoryOptimized_M1000",
        "MemoryOptimized_M1500",
        "MemoryOptimized_M2000"
      ],
      "metadata": {
        "description": "Optional. The type of cluster to deploy. Azure Managed Redis (Preview) SKUs: Balanced, ComputeOptimized, FlashOptimized, and MemoryOptimized ARE IN PREVIEW, MICROSOFT MAY NOT PROVIDE SUPPORT FOR THIS, PLEASE CHECK THE [PRODUCT DOCS](https://learn.microsoft.com/azure/azure-cache-for-redis/managed-redis/managed-redis-overview#tiers-and-skus-at-a-glance) FOR CLARIFICATION."
      }
    },
    "zones": {
      "type": "array",
      "items": {
        "type": "int"
      },
      "defaultValue": [
        1,
        2,
        3
      ],
      "allowedValues": [
        1,
        2,
        3
      ],
      "metadata": {
        "description": "Optional. The Availability Zones to place the resources in. Currently only supported on Enterprise and EnterpriseFlash SKUs."
      }
    },
    "database": {
      "$ref": "#/definitions/databaseType",
      "nullable": true,
      "metadata": {
        "description": "Optional. Database configuration."
      }
    },
    "privateEndpoints": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/privateEndpointSingleServiceType"
      },
      "nullable": true,
      "metadata": {
        "description": "Optional. Configuration details for private endpoints. For security reasons, it is recommended to use private endpoints whenever possible."
      }
    },
    "diagnosticSettings": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/diagnosticSettingMetricsOnlyType"
      },
      "nullable": true,
      "metadata": {
        "description": "Optional. The cluster-level diagnostic settings of the service."
      }
    },
    "enableTelemetry": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Optional. Enable/Disable usage telemetry for module."
      }
    }
  },
  "variables": {
    "copy": [
      {
        "name": "formattedRoleAssignments",
        "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]",
        "input": "[union(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')], createObject('roleDefinitionId', coalesce(tryGet(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName), if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName)))))]"
      }
    ],
    "enableReferencedModulesTelemetry": false,
    "isAmr": "[or(or(or(startsWith(parameters('skuName'), 'Balanced'), startsWith(parameters('skuName'), 'ComputeOptimized')), startsWith(parameters('skuName'), 'FlashOptimized')), startsWith(parameters('skuName'), 'MemoryOptimized'))]",
    "isEnterprise": "[or(startsWith(parameters('skuName'), 'Enterprise'), startsWith(parameters('skuName'), 'EnterpriseFlash'))]",
    "availabilityZones": "[if(variables('isEnterprise'), map(parameters('zones'), lambda('zone', string(lambdaVariables('zone')))), createArray())]",
    "formattedUserAssignedIdentities": "[reduce(map(coalesce(tryGet(parameters('managedIdentities'), 'userAssignedResourceIds'), createArray()), lambda('id', createObject(format('{0}', lambdaVariables('id')), createObject()))), createObject(), lambda('cur', 'next', union(lambdaVariables('cur'), lambdaVariables('next'))))]",
    "identity": "[if(not(empty(parameters('managedIdentities'))), createObject('type', if(not(empty(coalesce(tryGet(parameters('managedIdentities'), 'userAssignedResourceIds'), createObject()))), 'UserAssigned', 'None'), 'userAssignedIdentities', if(not(empty(variables('formattedUserAssignedIdentities'))), variables('formattedUserAssignedIdentities'), null())), null())]",
    "builtInRoleNames": {
      "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
      "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
      "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
      "Redis Cache Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'e0f68234-74aa-48ed-b826-c38b57376e17')]",
      "Role Based Access Control Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]",
      "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]"
    }
  },
  "resources": {
    "cMKKeyVault::cMKKey": {
      "condition": "[and(not(empty(tryGet(parameters('customerManagedKey'), 'keyVaultResourceId'))), and(not(empty(tryGet(parameters('customerManagedKey'), 'keyVaultResourceId'))), not(empty(tryGet(parameters('customerManagedKey'), 'keyName')))))]",
      "existing": true,
      "type": "Microsoft.KeyVault/vaults/keys",
      "apiVersion": "2023-02-01",
      "subscriptionId": "[split(tryGet(parameters('customerManagedKey'), 'keyVaultResourceId'), '/')[2]]",
      "resourceGroup": "[split(tryGet(parameters('customerManagedKey'), 'keyVaultResourceId'), '/')[4]]",
      "name": "[format('{0}/{1}', last(split(tryGet(parameters('customerManagedKey'), 'keyVaultResourceId'), '/')), tryGet(parameters('customerManagedKey'), 'keyName'))]"
    },
    "avmTelemetry": {
      "condition": "[parameters('enableTelemetry')]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2024-03-01",
      "name": "[format('46d3xbcp.res.cache-redisenterprise.{0}.{1}', replace('-..--..-', '.', '-'), substring(uniqueString(deployment().name, parameters('location')), 0, 4))]",
      "properties": {
        "mode": "Incremental",
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "resources": [],
          "outputs": {
            "telemetry": {
              "type": "String",
              "value": "For more information, see https://aka.ms/avm/TelemetryInfo"
            }
          }
        }
      }
    },
    "cMKKeyVault": {
      "condition": "[not(empty(tryGet(parameters('customerManagedKey'), 'keyVaultResourceId')))]",
      "existing": true,
      "type": "Microsoft.KeyVault/vaults",
      "apiVersion": "2023-02-01",
      "subscriptionId": "[split(tryGet(parameters('customerManagedKey'), 'keyVaultResourceId'), '/')[2]]",
      "resourceGroup": "[split(tryGet(parameters('customerManagedKey'), 'keyVaultResourceId'), '/')[4]]",
      "name": "[last(split(tryGet(parameters('customerManagedKey'), 'keyVaultResourceId'), '/'))]"
    },
    "cMKUserAssignedIdentity": {
      "condition": "[not(empty(tryGet(parameters('customerManagedKey'), 'userAssignedIdentityResourceId')))]",
      "existing": true,
      "type": "Microsoft.ManagedIdentity/userAssignedIdentities",
      "apiVersion": "2023-01-31",
      "subscriptionId": "[split(tryGet(parameters('customerManagedKey'), 'userAssignedIdentityResourceId'), '/')[2]]",
      "resourceGroup": "[split(tryGet(parameters('customerManagedKey'), 'userAssignedIdentityResourceId'), '/')[4]]",
      "name": "[last(split(tryGet(parameters('customerManagedKey'), 'userAssignedIdentityResourceId'), '/'))]"
    },
    "redisCluster": {
      "type": "Microsoft.Cache/redisEnterprise",
      "apiVersion": "2024-09-01-preview",
      "name": "[parameters('name')]",
      "location": "[parameters('location')]",
      "tags": "[parameters('tags')]",
      "identity": "[variables('identity')]",
      "properties": {
        "encryption": "[if(not(empty(parameters('customerManagedKey'))), createObject('customerManagedKeyEncryption', createObject('keyEncryptionKeyIdentity', if(not(empty(tryGet(parameters('customerManagedKey'), 'userAssignedIdentityResourceId'))), createObject('identityType', 'userAssignedIdentity', 'userAssignedIdentityResourceId', extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(tryGet(parameters('customerManagedKey'), 'userAssignedIdentityResourceId'), '/')[2], split(tryGet(parameters('customerManagedKey'), 'userAssignedIdentityResourceId'), '/')[4]), 'Microsoft.ManagedIdentity/userAssignedIdentities', last(split(tryGet(parameters('customerManagedKey'), 'userAssignedIdentityResourceId'), '/')))), null()), 'keyEncryptionKeyUrl', if(not(empty(coalesce(tryGet(parameters('customerManagedKey'), 'keyVersion'), ''))), format('{0}/{1}', reference('cMKKeyVault::cMKKey').keyUri, tryGet(parameters('customerManagedKey'), 'keyVersion')), reference('cMKKeyVault::cMKKey').keyUriWithVersion))), null())]",
        "highAvailability": "[if(variables('isAmr'), parameters('highAvailability'), null())]",
        "minimumTlsVersion": "[parameters('minimumTlsVersion')]"
      },
      "sku": {
        "capacity": "[if(variables('isEnterprise'), parameters('capacity'), null())]",
        "name": "[parameters('skuName')]"
      },
      "zones": "[if(not(empty(variables('availabilityZones'))), variables('availabilityZones'), null())]",
      "dependsOn": [
        "cMKKeyVault::cMKKey"
      ]
    },
    "redisCluster_lock": {
      "condition": "[and(not(empty(coalesce(parameters('lock'), createObject()))), not(equals(tryGet(parameters('lock'), 'kind'), 'None')))]",
      "type": "Microsoft.Authorization/locks",
      "apiVersion": "2020-05-01",
      "scope": "[format('Microsoft.Cache/redisEnterprise/{0}', parameters('name'))]",
      "name": "[coalesce(tryGet(parameters('lock'), 'name'), format('lock-{0}', parameters('name')))]",
      "properties": {
        "level": "[coalesce(tryGet(parameters('lock'), 'kind'), '')]",
        "notes": "[if(equals(tryGet(parameters('lock'), 'kind'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot delete or modify the resource or child resources.')]"
      },
      "dependsOn": [
        "redisCluster"
      ]
    },
    "redisCluster_diagnosticSettings": {
      "copy": {
        "name": "redisCluster_diagnosticSettings",
        "count": "[length(coalesce(parameters('diagnosticSettings'), createArray()))]"
      },
      "type": "Microsoft.Insights/diagnosticSettings",
      "apiVersion": "2021-05-01-preview",
      "scope": "[format('Microsoft.Cache/redisEnterprise/{0}', parameters('name'))]",
      "name": "[coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'name'), format('{0}-diagnosticSettings', parameters('name')))]",
      "properties": {
        "copy": [
          {
            "name": "metrics",
            "count": "[length(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics'))))]",
            "input": {
              "category": "[coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics')))[copyIndex('metrics')].category]",
              "enabled": "[coalesce(tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics')))[copyIndex('metrics')], 'enabled'), true())]",
              "timeGrain": null
            }
          }
        ],
        "storageAccountId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'storageAccountResourceId')]",
        "workspaceId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'workspaceResourceId')]",
        "eventHubAuthorizationRuleId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'eventHubAuthorizationRuleResourceId')]",
        "eventHubName": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'eventHubName')]",
        "marketplacePartnerId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'marketplacePartnerResourceId')]",
        "logAnalyticsDestinationType": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logAnalyticsDestinationType')]"
      },
      "dependsOn": [
        "redisCluster"
      ]
    },
    "redisCluster_roleAssignments": {
      "copy": {
        "name": "redisCluster_roleAssignments",
        "count": "[length(coalesce(variables('formattedRoleAssignments'), createArray()))]"
      },
      "type": "Microsoft.Authorization/roleAssignments",
      "apiVersion": "2022-04-01",
      "scope": "[format('Microsoft.Cache/redisEnterprise/{0}', parameters('name'))]",
      "name": "[coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'name'), guid(resourceId('Microsoft.Cache/redisEnterprise', parameters('name')), coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId, coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId))]",
      "properties": {
        "roleDefinitionId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId]",
        "principalId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId]",
        "description": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'description')]",
        "principalType": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'principalType')]",
        "condition": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition')]",
        "conditionVersion": "[if(not(empty(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
        "delegatedManagedIdentityResourceId": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
      },
      "dependsOn": [
        "redisCluster"
      ]
    },
    "redisCluster_database": {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('{0}-redis-database', uniqueString(deployment().name, parameters('location')))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "name": {
            "value": "[tryGet(parameters('database'), 'name')]"
          },
          "redisClusterName": {
            "value": "[parameters('name')]"
          },
          "accessKeysAuthentication": "[if(variables('isAmr'), createObject('value', tryGet(parameters('database'), 'accessKeysAuthentication')), createObject('value', null()))]",
          "accessPolicyAssignments": "[if(variables('isAmr'), createObject('value', tryGet(parameters('database'), 'accessPolicyAssignments')), createObject('value', null()))]",
          "clientProtocol": {
            "value": "[tryGet(parameters('database'), 'clientProtocol')]"
          },
          "clusteringPolicy": {
            "value": "[tryGet(parameters('database'), 'clusteringPolicy')]"
          },
          "deferUpgrade": {
            "value": "[tryGet(parameters('database'), 'deferUpgrade')]"
          },
          "evictionPolicy": {
            "value": "[tryGet(parameters('database'), 'evictionPolicy')]"
          },
          "geoReplication": {
            "value": "[tryGet(parameters('database'), 'geoReplication')]"
          },
          "modules": {
            "value": "[tryGet(parameters('database'), 'modules')]"
          },
          "port": {
            "value": "[tryGet(parameters('database'), 'port')]"
          },
          "persistence": {
            "value": "[tryGet(parameters('database'), 'persistence')]"
          },
          "secretsExportConfiguration": {
            "value": "[tryGet(parameters('database'), 'secretsExportConfiguration')]"
          },
          "diagnosticSettings": {
            "value": "[tryGet(parameters('database'), 'diagnosticSettings')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "languageVersion": "2.0",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.33.93.31351",
              "templateHash": "12094637252334328193"
            },
            "name": "Redis database",
            "description": "This module deploys a Redis database in a Redis Enterprise or Azure Managed Redis (Preview) cluster."
          },
          "definitions": {
            "secretsExportConfigurationType": {
              "type": "object",
              "properties": {
                "keyVaultResourceId": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. The resource ID of the key vault where to store the secrets of this module."
                  }
                },
                "primaryAccessKeyName": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The primaryAccessKey secret name to create."
                  }
                },
                "primaryConnectionStringName": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The primaryConnectionString secret name to create."
                  }
                },
                "primaryStackExchangeRedisConnectionStringName": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The primaryStackExchangeRedisConnectionString secret name to create."
                  }
                },
                "secondaryAccessKeyName": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The secondaryAccessKey secret name to create."
                  }
                },
                "secondaryConnectionStringName": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The secondaryConnectionString secret name to create."
                  }
                },
                "secondaryStackExchangeRedisConnectionStringName": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The secondaryStackExchangeRedisConnectionString secret name to create."
                  }
                }
              },
              "metadata": {
                "__bicep_export!": true
              }
            },
            "disabledPersistenceType": {
              "type": "object",
              "properties": {
                "type": {
                  "type": "string",
                  "allowedValues": [
                    "disabled"
                  ],
                  "metadata": {
                    "description": "Required. Disabled persistence type."
                  }
                }
              },
              "metadata": {
                "__bicep_export!": true
              }
            },
            "aofPersistenceType": {
              "type": "object",
              "properties": {
                "type": {
                  "type": "string",
                  "allowedValues": [
                    "aof"
                  ],
                  "metadata": {
                    "description": "Required. AOF persistence type."
                  }
                },
                "frequency": {
                  "type": "string",
                  "allowedValues": [
                    "1s"
                  ],
                  "metadata": {
                    "description": "Required. The frequency at which data is written to disk."
                  }
                }
              },
              "metadata": {
                "__bicep_export!": true
              }
            },
            "rdbPersistenceType": {
              "type": "object",
              "properties": {
                "type": {
                  "type": "string",
                  "allowedValues": [
                    "rdb"
                  ],
                  "metadata": {
                    "description": "Required. RDB persistence type."
                  }
                },
                "frequency": {
                  "type": "string",
                  "allowedValues": [
                    "12h",
                    "1h",
                    "6h"
                  ],
                  "metadata": {
                    "description": "Required. The frequency at which an RDB snapshot of the database is created."
                  }
                }
              },
              "metadata": {
                "__bicep_export!": true
              }
            },
            "persistenceType": {
              "type": "object",
              "discriminator": {
                "propertyName": "type",
                "mapping": {
                  "disabled": {
                    "$ref": "#/definitions/disabledPersistenceType"
                  },
                  "aof": {
                    "$ref": "#/definitions/aofPersistenceType"
                  },
                  "rdb": {
                    "$ref": "#/definitions/rdbPersistenceType"
                  }
                }
              },
              "metadata": {
                "__bicep_export!": true
              }
            },
            "moduleType": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "allowedValues": [
                    "RediSearch",
                    "RedisBloom",
                    "RedisJSON",
                    "RedisTimeSeries"
                  ],
                  "metadata": {
                    "description": "Required. The name of the module."
                  }
                },
                "args": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Additional module arguments."
                  }
                }
              },
              "metadata": {
                "__bicep_export!": true
              }
            },
            "geoReplicationType": {
              "type": "object",
              "properties": {
                "groupNickname": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. The name of the geo-replication group."
                  }
                },
                "linkedDatabases": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/linkedDatabaseType"
                  },
                  "metadata": {
                    "description": "Required. List of database resources to link with this database, including itself."
                  }
                }
              },
              "metadata": {
                "__bicep_export!": true
              }
            },
            "linkedDatabaseType": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. Resource ID of linked database. Should be in the form: `/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Cache/redisEnterprise/{redisName}/databases/default`."
                  }
                }
              },
              "metadata": {
                "__bicep_export!": true
              }
            },
            "accessPolicyAssignmentType": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Name of the access policy assignment."
                  }
                },
                "userObjectId": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. Object ID to which the access policy will be assigned."
                  }
                },
                "accessPolicyName": {
                  "type": "string",
                  "allowedValues": [
                    "default"
                  ],
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Name of the access policy to be assigned. The current only allowed name is 'default'."
                  }
                }
              },
              "metadata": {
                "__bicep_export!": true
              }
            },
            "_1.secretSetOutputType": {
              "type": "object",
              "properties": {
                "secretResourceId": {
                  "type": "string",
                  "metadata": {
                    "description": "The resourceId of the exported secret."
                  }
                },
                "secretUri": {
                  "type": "string",
                  "metadata": {
                    "description": "The secret URI of the exported secret."
                  }
                },
                "secretUriWithVersion": {
                  "type": "string",
                  "metadata": {
                    "description": "The secret URI with version of the exported secret."
                  }
                }
              },
              "metadata": {
                "description": "An AVM-aligned type for the output of the secret set via the secrets export feature.",
                "__bicep_imported_from!": {
                  "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.5.1"
                }
              }
            },
            "diagnosticSettingLogsOnlyType": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The name of diagnostic setting."
                  }
                },
                "logCategoriesAndGroups": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "category": {
                        "type": "string",
                        "nullable": true,
                        "metadata": {
                          "description": "Optional. Name of a Diagnostic Log category for a resource type this setting is applied to. Set the specific logs to collect here."
                        }
                      },
                      "categoryGroup": {
                        "type": "string",
                        "nullable": true,
                        "metadata": {
                          "description": "Optional. Name of a Diagnostic Log category group for a resource type this setting is applied to. Set to `allLogs` to collect all logs."
                        }
                      },
                      "enabled": {
                        "type": "bool",
                        "nullable": true,
                        "metadata": {
                          "description": "Optional. Enable or disable the category explicitly. Default is `true`."
                        }
                      }
                    }
                  },
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The name of logs that will be streamed. \"allLogs\" includes all possible logs for the resource. Set to `[]` to disable log collection."
                  }
                },
                "logAnalyticsDestinationType": {
                  "type": "string",
                  "allowedValues": [
                    "AzureDiagnostics",
                    "Dedicated"
                  ],
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. A string indicating whether the export to Log Analytics should use the default destination type, i.e. AzureDiagnostics, or use a destination type."
                  }
                },
                "workspaceResourceId": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Resource ID of the diagnostic log analytics workspace. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                  }
                },
                "storageAccountResourceId": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Resource ID of the diagnostic storage account. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                  }
                },
                "eventHubAuthorizationRuleResourceId": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Resource ID of the diagnostic event hub authorization rule for the Event Hubs namespace in which the event hub should be created or streamed to."
                  }
                },
                "eventHubName": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Name of the diagnostic event hub within the namespace to which logs are streamed. Without this, an event hub is created for each log category. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                  }
                },
                "marketplacePartnerResourceId": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The full ARM resource ID of the Marketplace resource to which you would like to send Diagnostic Logs."
                  }
                }
              },
              "metadata": {
                "description": "An AVM-aligned type for a diagnostic setting. To be used if only logs are supported by the resource provider.",
                "__bicep_imported_from!": {
                  "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.5.1"
                }
              }
            },
            "secretsOutputType": {
              "type": "object",
              "properties": {},
              "additionalProperties": {
                "$ref": "#/definitions/_1.secretSetOutputType",
                "metadata": {
                  "description": "An exported secret's references."
                }
              },
              "metadata": {
                "description": "A map of the exported secrets",
                "__bicep_imported_from!": {
                  "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.5.1"
                }
              }
            }
          },
          "parameters": {
            "redisClusterName": {
              "type": "string",
              "metadata": {
                "description": "Conditional. The name of the parent Redis Enterprise or Azure Managed Redis (Preview) resource. Required if the template is used in a standalone deployment."
              }
            },
            "name": {
              "type": "string",
              "defaultValue": "default",
              "allowedValues": [
                "default"
              ],
              "metadata": {
                "description": "Optional. Name of the database."
              }
            },
            "accessKeysAuthentication": {
              "type": "string",
              "defaultValue": "Enabled",
              "allowedValues": [
                "Enabled",
                "Disabled"
              ],
              "metadata": {
                "description": "Optional. Allow authentication via access keys. Only supported on Azure Managed Redis (Preview) SKUs: Balanced, ComputeOptimized, FlashOptimized, and MemoryOptimized. THIS IS A PARAMETER USED FOR A PREVIEW SERVICE/FEATURE, MICROSOFT MAY NOT PROVIDE SUPPORT FOR THIS, PLEASE CHECK THE [PRODUCT DOCS](https://learn.microsoft.com/azure/azure-cache-for-redis/managed-redis/managed-redis-entra-for-authentication#disable-access-key-authentication-on-your-cache) FOR CLARIFICATION."
              }
            },
            "clientProtocol": {
              "type": "string",
              "defaultValue": "Encrypted",
              "allowedValues": [
                "Encrypted",
                "Plaintext"
              ],
              "metadata": {
                "description": "Optional. Specifies whether Redis clients can connect using TLS-encrypted or plaintext Redis protocols."
              }
            },
            "clusteringPolicy": {
              "type": "string",
              "defaultValue": "OSSCluster",
              "allowedValues": [
                "EnterpriseCluster",
                "OSSCluster"
              ],
              "metadata": {
                "description": "Optional. Redis clustering policy. [Learn more](https://aka.ms/redis/enterprise/clustering)."
              }
            },
            "deferUpgrade": {
              "type": "string",
              "defaultValue": "NotDeferred",
              "allowedValues": [
                "Deferred",
                "NotDeferred"
              ],
              "metadata": {
                "description": "Optional. Specifies whether to defer future Redis major version upgrades by up to 90 days. [Learn more](https://aka.ms/redisversionupgrade#defer-upgrades)."
              }
            },
            "evictionPolicy": {
              "type": "string",
              "defaultValue": "VolatileLRU",
              "allowedValues": [
                "AllKeysLFU",
                "AllKeysLRU",
                "AllKeysRandom",
                "NoEviction",
                "VolatileLFU",
                "VolatileLRU",
                "VolatileRandom",
                "VolatileTTL"
              ],
              "metadata": {
                "description": "Optional. Specifies the eviction policy for the Redis resource."
              }
            },
            "geoReplication": {
              "$ref": "#/definitions/geoReplicationType",
              "nullable": true,
              "metadata": {
                "description": "Optional. The active geo-replication settings of the service. All caches within a geo-replication group must have the same configuration."
              }
            },
            "modules": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/moduleType"
              },
              "defaultValue": [],
              "metadata": {
                "description": "Optional. Redis modules to enable. Restrictions may apply based on SKU and configuration. [Learn more](https://aka.ms/redis/enterprise/modules)."
              }
            },
            "port": {
              "type": "int",
              "defaultValue": 10000,
              "minValue": 10000,
              "maxValue": 10000,
              "metadata": {
                "description": "Optional. TCP port of the database endpoint."
              }
            },
            "persistence": {
              "$ref": "#/definitions/persistenceType",
              "defaultValue": {
                "type": "disabled"
              },
              "metadata": {
                "description": "Optional. The persistence settings of the service."
              }
            },
            "accessPolicyAssignments": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/accessPolicyAssignmentType"
              },
              "nullable": true,
              "metadata": {
                "description": "Optional. Access policy assignments for Microsoft Entra authentication. Only supported on Azure Managed Redis (Preview) SKUs: Balanced, ComputeOptimized, FlashOptimized, and MemoryOptimized. THIS IS A PARAMETER USED FOR A PREVIEW SERVICE/FEATURE, MICROSOFT MAY NOT PROVIDE SUPPORT FOR THIS, PLEASE CHECK THE [PRODUCT DOCS](https://learn.microsoft.com/azure/azure-cache-for-redis/managed-redis/managed-redis-entra-for-authentication) FOR CLARIFICATION."
              }
            },
            "secretsExportConfiguration": {
              "$ref": "#/definitions/secretsExportConfigurationType",
              "nullable": true,
              "metadata": {
                "description": "Optional. Key vault reference and secret settings for the module's secrets export."
              }
            },
            "diagnosticSettings": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/diagnosticSettingLogsOnlyType"
              },
              "nullable": true,
              "metadata": {
                "description": "Optional. The database-level diagnostic settings of the service."
              }
            }
          },
          "resources": {
            "redisCluster": {
              "existing": true,
              "type": "Microsoft.Cache/redisEnterprise",
              "apiVersion": "2024-09-01-preview",
              "name": "[parameters('redisClusterName')]"
            },
            "redisDatabase": {
              "type": "Microsoft.Cache/redisEnterprise/databases",
              "apiVersion": "2024-09-01-preview",
              "name": "[format('{0}/{1}', parameters('redisClusterName'), parameters('name'))]",
              "properties": {
                "accessKeysAuthentication": "[if(or(or(or(startsWith(reference('redisCluster', '2024-09-01-preview', 'full').sku.name, 'Balanced'), startsWith(reference('redisCluster', '2024-09-01-preview', 'full').sku.name, 'ComputeOptimized')), startsWith(reference('redisCluster', '2024-09-01-preview', 'full').sku.name, 'FlashOptimized')), startsWith(reference('redisCluster', '2024-09-01-preview', 'full').sku.name, 'MemoryOptimized')), parameters('accessKeysAuthentication'), null())]",
                "clientProtocol": "[parameters('clientProtocol')]",
                "clusteringPolicy": "[parameters('clusteringPolicy')]",
                "deferUpgrade": "[parameters('deferUpgrade')]",
                "evictionPolicy": "[parameters('evictionPolicy')]",
                "geoReplication": "[if(not(empty(parameters('geoReplication'))), parameters('geoReplication'), null())]",
                "modules": "[parameters('modules')]",
                "port": "[parameters('port')]",
                "persistence": "[if(not(equals(parameters('persistence').type, 'disabled')), createObject('aofEnabled', equals(parameters('persistence').type, 'aof'), 'rdbEnabled', equals(parameters('persistence').type, 'rdb'), 'aofFrequency', if(equals(parameters('persistence').type, 'aof'), parameters('persistence').frequency, null()), 'rdbFrequency', if(equals(parameters('persistence').type, 'rdb'), parameters('persistence').frequency, null())), null())]"
              },
              "dependsOn": [
                "redisCluster"
              ]
            },
            "database_diagnosticSettings": {
              "copy": {
                "name": "database_diagnosticSettings",
                "count": "[length(coalesce(parameters('diagnosticSettings'), createArray()))]"
              },
              "type": "Microsoft.Insights/diagnosticSettings",
              "apiVersion": "2021-05-01-preview",
              "scope": "[format('Microsoft.Cache/redisEnterprise/{0}/databases/{1}', parameters('redisClusterName'), parameters('name'))]",
              "name": "[coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'name'), format('{0}-diagnosticSettings', parameters('name')))]",
              "properties": {
                "copy": [
                  {
                    "name": "logs",
                    "count": "[length(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs'))))]",
                    "input": {
                      "categoryGroup": "[tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'categoryGroup')]",
                      "category": "[tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'category')]",
                      "enabled": "[coalesce(tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'enabled'), true())]"
                    }
                  }
                ],
                "storageAccountId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'storageAccountResourceId')]",
                "workspaceId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'workspaceResourceId')]",
                "eventHubAuthorizationRuleId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'eventHubAuthorizationRuleResourceId')]",
                "eventHubName": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'eventHubName')]",
                "marketplacePartnerId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'marketplacePartnerResourceId')]",
                "logAnalyticsDestinationType": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logAnalyticsDestinationType')]"
              },
              "dependsOn": [
                "redisDatabase"
              ]
            },
            "database_accessPolicyAssignments": {
              "copy": {
                "name": "database_accessPolicyAssignments",
                "count": "[length(coalesce(parameters('accessPolicyAssignments'), createArray()))]"
              },
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('{0}-redis-apa-{1}', uniqueString(deployment().name), copyIndex())]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "name": {
                    "value": "[coalesce(parameters('accessPolicyAssignments'), createArray())[copyIndex()].name]"
                  },
                  "clusterName": {
                    "value": "[parameters('redisClusterName')]"
                  },
                  "databaseName": {
                    "value": "[parameters('name')]"
                  },
                  "accessPolicyName": {
                    "value": "[tryGet(coalesce(parameters('accessPolicyAssignments'), createArray())[copyIndex()], 'accessPolicyName')]"
                  },
                  "userObjectId": {
                    "value": "[coalesce(parameters('accessPolicyAssignments'), createArray())[copyIndex()].userObjectId]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "languageVersion": "2.0",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.33.93.31351",
                      "templateHash": "6473026260124919331"
                    },
                    "name": "Azure Managed Redis (Preview) Database Access Policy Assignment",
                    "description": "This module deploys an access policy assignment for an Azure Managed Redis (Preview) database."
                  },
                  "parameters": {
                    "name": {
                      "type": "string",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Name of the access policy assignment."
                      }
                    },
                    "userObjectId": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Object ID to which the access policy will be assigned."
                      }
                    },
                    "clusterName": {
                      "type": "string",
                      "metadata": {
                        "description": "Conditional. The name of the grandparent Azure Managed Redis (Preview) cluster. Required if the template is used in a standalone deployment."
                      }
                    },
                    "databaseName": {
                      "type": "string",
                      "metadata": {
                        "description": "Conditional. The name of the parent Azure Managed Redis (Preview) database. Required if the template is used in a standalone deployment."
                      }
                    },
                    "accessPolicyName": {
                      "type": "string",
                      "defaultValue": "default",
                      "allowedValues": [
                        "default"
                      ],
                      "metadata": {
                        "description": "Optional. Name of the access policy to be assigned."
                      }
                    }
                  },
                  "resources": {
                    "redisCluster::database": {
                      "existing": true,
                      "type": "Microsoft.Cache/redisEnterprise/databases",
                      "apiVersion": "2024-09-01-preview",
                      "name": "[format('{0}/{1}', parameters('clusterName'), parameters('databaseName'))]"
                    },
                    "redisCluster": {
                      "existing": true,
                      "type": "Microsoft.Cache/redisEnterprise",
                      "apiVersion": "2024-09-01-preview",
                      "name": "[parameters('clusterName')]"
                    },
                    "accessPolicyAssignment": {
                      "type": "Microsoft.Cache/redisEnterprise/databases/accessPolicyAssignments",
                      "apiVersion": "2024-09-01-preview",
                      "name": "[format('{0}/{1}/{2}', parameters('clusterName'), parameters('databaseName'), coalesce(parameters('name'), parameters('userObjectId')))]",
                      "properties": {
                        "accessPolicyName": "[parameters('accessPolicyName')]",
                        "user": {
                          "objectId": "[parameters('userObjectId')]"
                        }
                      }
                    }
                  },
                  "outputs": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the access policy assignment."
                      },
                      "value": "[coalesce(parameters('name'), parameters('userObjectId'))]"
                    },
                    "resourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the access policy assignment."
                      },
                      "value": "[resourceId('Microsoft.Cache/redisEnterprise/databases/accessPolicyAssignments', parameters('clusterName'), parameters('databaseName'), coalesce(parameters('name'), parameters('userObjectId')))]"
                    },
                    "resourceGroupName": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource group the access policy assignment was deployed into."
                      },
                      "value": "[resourceGroup().name]"
                    },
                    "userObjectId": {
                      "type": "string",
                      "metadata": {
                        "description": "The object ID of the user associated with the access policy."
                      },
                      "value": "[reference('accessPolicyAssignment').user.objectId]"
                    }
                  }
                }
              },
              "dependsOn": [
                "redisDatabase"
              ]
            },
            "secretsExport": {
              "condition": "[not(equals(parameters('secretsExportConfiguration'), null()))]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('{0}-secrets-kv', uniqueString(deployment().name))]",
              "subscriptionId": "[split(tryGet(parameters('secretsExportConfiguration'), 'keyVaultResourceId'), '/')[2]]",
              "resourceGroup": "[split(tryGet(parameters('secretsExportConfiguration'), 'keyVaultResourceId'), '/')[4]]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "keyVaultName": {
                    "value": "[last(split(tryGet(parameters('secretsExportConfiguration'), 'keyVaultResourceId'), '/'))]"
                  },
                  "secretsToSet": {
                    "value": "[union(createArray(), if(contains(parameters('secretsExportConfiguration'), 'primaryAccessKeyName'), createArray(createObject('name', tryGet(parameters('secretsExportConfiguration'), 'primaryAccessKeyName'), 'value', listKeys(resourceId('Microsoft.Cache/redisEnterprise/databases', parameters('redisClusterName'), parameters('name')), '2024-09-01-preview').primaryKey)), createArray()), if(contains(parameters('secretsExportConfiguration'), 'primaryConnectionStringName'), createArray(createObject('name', tryGet(parameters('secretsExportConfiguration'), 'primaryConnectionStringName'), 'value', format('{0}:{1}@{2}:{3}', if(equals(reference('redisDatabase').clientProtocol, 'Plaintext'), 'redis://', 'rediss://'), listKeys(resourceId('Microsoft.Cache/redisEnterprise/databases', parameters('redisClusterName'), parameters('name')), '2024-09-01-preview').primaryKey, reference('redisCluster').hostName, reference('redisDatabase').port))), createArray()), if(contains(parameters('secretsExportConfiguration'), 'primaryStackExchangeRedisConnectionStringName'), createArray(createObject('name', tryGet(parameters('secretsExportConfiguration'), 'primaryStackExchangeRedisConnectionStringName'), 'value', format('{0}:{1},password={2},ssl={3},abortConnect=False', reference('redisCluster').hostName, reference('redisDatabase').port, listKeys(resourceId('Microsoft.Cache/redisEnterprise/databases', parameters('redisClusterName'), parameters('name')), '2024-09-01-preview').primaryKey, if(equals(reference('redisDatabase').clientProtocol, 'Plaintext'), 'False', 'True')))), createArray()), if(contains(parameters('secretsExportConfiguration'), 'secondaryAccessKeyName'), createArray(createObject('name', tryGet(parameters('secretsExportConfiguration'), 'secondaryAccessKeyName'), 'value', listKeys(resourceId('Microsoft.Cache/redisEnterprise/databases', parameters('redisClusterName'), parameters('name')), '2024-09-01-preview').secondaryKey)), createArray()), if(contains(parameters('secretsExportConfiguration'), 'secondaryConnectionStringName'), createArray(createObject('name', tryGet(parameters('secretsExportConfiguration'), 'secondaryConnectionStringName'), 'value', format('{0}:{1}@{2}:{3}', if(equals(reference('redisDatabase').clientProtocol, 'Plaintext'), 'redis://', 'rediss://'), listKeys(resourceId('Microsoft.Cache/redisEnterprise/databases', parameters('redisClusterName'), parameters('name')), '2024-09-01-preview').secondaryKey, reference('redisCluster').hostName, reference('redisDatabase').port))), createArray()), if(contains(parameters('secretsExportConfiguration'), 'secondaryStackExchangeRedisConnectionStringName'), createArray(createObject('name', tryGet(parameters('secretsExportConfiguration'), 'secondaryStackExchangeRedisConnectionStringName'), 'value', format('{0}:{1},password={2},ssl={3},abortConnect=False', reference('redisCluster').hostName, reference('redisDatabase').port, listKeys(resourceId('Microsoft.Cache/redisEnterprise/databases', parameters('redisClusterName'), parameters('name')), '2024-09-01-preview').secondaryKey, if(equals(reference('redisDatabase').clientProtocol, 'Plaintext'), 'False', 'True')))), createArray()))]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "languageVersion": "2.0",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.33.93.31351",
                      "templateHash": "8063348652715653257"
                    }
                  },
                  "definitions": {
                    "secretSetOutputType": {
                      "type": "object",
                      "properties": {
                        "secretResourceId": {
                          "type": "string",
                          "metadata": {
                            "description": "The resourceId of the exported secret."
                          }
                        },
                        "secretUri": {
                          "type": "string",
                          "metadata": {
                            "description": "The secret URI of the exported secret."
                          }
                        },
                        "secretUriWithVersion": {
                          "type": "string",
                          "metadata": {
                            "description": "The secret URI with version of the exported secret."
                          }
                        }
                      },
                      "metadata": {
                        "description": "An AVM-aligned type for the output of the secret set via the secrets export feature.",
                        "__bicep_imported_from!": {
                          "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.5.1"
                        }
                      }
                    },
                    "secretToSetType": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. The name of the secret to set."
                          }
                        },
                        "value": {
                          "type": "securestring",
                          "metadata": {
                            "description": "Required. The value of the secret to set."
                          }
                        }
                      },
                      "metadata": {
                        "description": "An AVM-aligned type for the secret to set via the secrets export feature.",
                        "__bicep_imported_from!": {
                          "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.5.1"
                        }
                      }
                    }
                  },
                  "parameters": {
                    "keyVaultName": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The name of the Key Vault to set the secrets in."
                      }
                    },
                    "secretsToSet": {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/secretToSetType"
                      },
                      "metadata": {
                        "description": "Required. The secrets to set in the Key Vault."
                      }
                    }
                  },
                  "resources": {
                    "keyVault": {
                      "existing": true,
                      "type": "Microsoft.KeyVault/vaults",
                      "apiVersion": "2022-07-01",
                      "name": "[parameters('keyVaultName')]"
                    },
                    "secrets": {
                      "copy": {
                        "name": "secrets",
                        "count": "[length(parameters('secretsToSet'))]"
                      },
                      "type": "Microsoft.KeyVault/vaults/secrets",
                      "apiVersion": "2023-07-01",
                      "name": "[format('{0}/{1}', parameters('keyVaultName'), parameters('secretsToSet')[copyIndex()].name)]",
                      "properties": {
                        "value": "[parameters('secretsToSet')[copyIndex()].value]"
                      }
                    }
                  },
                  "outputs": {
                    "secretsSet": {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/secretSetOutputType"
                      },
                      "metadata": {
                        "description": "The references to the secrets exported to the provided Key Vault."
                      },
                      "copy": {
                        "count": "[length(range(0, length(coalesce(parameters('secretsToSet'), createArray()))))]",
                        "input": {
                          "secretResourceId": "[resourceId('Microsoft.KeyVault/vaults/secrets', parameters('keyVaultName'), parameters('secretsToSet')[range(0, length(coalesce(parameters('secretsToSet'), createArray())))[copyIndex()]].name)]",
                          "secretUri": "[reference(format('secrets[{0}]', range(0, length(coalesce(parameters('secretsToSet'), createArray())))[copyIndex()])).secretUri]",
                          "secretUriWithVersion": "[reference(format('secrets[{0}]', range(0, length(coalesce(parameters('secretsToSet'), createArray())))[copyIndex()])).secretUriWithVersion]"
                        }
                      }
                    }
                  }
                }
              },
              "dependsOn": [
                "redisCluster",
                "redisDatabase"
              ]
            }
          },
          "outputs": {
            "name": {
              "type": "string",
              "metadata": {
                "description": "The name of the Redis database."
              },
              "value": "[parameters('name')]"
            },
            "resourceId": {
              "type": "string",
              "metadata": {
                "description": "The resource ID of the database."
              },
              "value": "[resourceId('Microsoft.Cache/redisEnterprise/databases', parameters('redisClusterName'), parameters('name'))]"
            },
            "resourceGroupName": {
              "type": "string",
              "metadata": {
                "description": "The name of the resource group the Redis resource was created in."
              },
              "value": "[resourceGroup().name]"
            },
            "port": {
              "type": "int",
              "metadata": {
                "description": "The Redis database port."
              },
              "value": "[reference('redisDatabase').port]"
            },
            "endpoint": {
              "type": "string",
              "metadata": {
                "description": "The Redis endpoint."
              },
              "value": "[format('{0}:{1}', reference('redisCluster').hostName, reference('redisDatabase').port)]"
            },
            "exportedSecrets": {
              "$ref": "#/definitions/secretsOutputType",
              "metadata": {
                "description": "A hashtable of references to the secrets exported to the provided Key Vault. The key of each reference is each secret's name."
              },
              "value": "[if(not(equals(parameters('secretsExportConfiguration'), null())), toObject(reference('secretsExport').outputs.secretsSet.value, lambda('secret', last(split(lambdaVariables('secret').secretResourceId, '/'))), lambda('secret', lambdaVariables('secret'))), createObject())]"
            }
          }
        }
      },
      "dependsOn": [
        "redisCluster"
      ]
    },
    "redisEnterprise_privateEndpoints": {
      "copy": {
        "name": "redisEnterprise_privateEndpoints",
        "count": "[length(coalesce(parameters('privateEndpoints'), createArray()))]"
      },
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('{0}-redisEnterprise-PrivateEndpoint-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
      "subscriptionId": "[split(coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'resourceGroupResourceId'), resourceGroup().id), '/')[2]]",
      "resourceGroup": "[split(coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'resourceGroupResourceId'), resourceGroup().id), '/')[4]]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "name": {
            "value": "[coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'name'), format('pep-{0}-{1}-{2}', last(split(resourceId('Microsoft.Cache/redisEnterprise', parameters('name')), '/')), coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'service'), 'redisEnterprise'), copyIndex()))]"
          },
          "privateLinkServiceConnections": "[if(not(equals(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'isManualConnection'), true())), createObject('value', createArray(createObject('name', coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'privateLinkServiceConnectionName'), format('{0}-{1}-{2}', last(split(resourceId('Microsoft.Cache/redisEnterprise', parameters('name')), '/')), coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'service'), 'redisEnterprise'), copyIndex())), 'properties', createObject('privateLinkServiceId', resourceId('Microsoft.Cache/redisEnterprise', parameters('name')), 'groupIds', createArray(coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'service'), 'redisEnterprise')))))), createObject('value', null()))]",
          "manualPrivateLinkServiceConnections": "[if(equals(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'isManualConnection'), true()), createObject('value', createArray(createObject('name', coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'privateLinkServiceConnectionName'), format('{0}-{1}-{2}', last(split(resourceId('Microsoft.Cache/redisEnterprise', parameters('name')), '/')), coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'service'), 'redisEnterprise'), copyIndex())), 'properties', createObject('privateLinkServiceId', resourceId('Microsoft.Cache/redisEnterprise', parameters('name')), 'groupIds', createArray(coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'service'), 'redisEnterprise')), 'requestMessage', coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'manualConnectionRequestMessage'), 'Manual approval required.'))))), createObject('value', null()))]",
          "subnetResourceId": {
            "value": "[coalesce(parameters('privateEndpoints'), createArray())[copyIndex()].subnetResourceId]"
          },
          "enableTelemetry": {
            "value": "[variables('enableReferencedModulesTelemetry')]"
          },
          "location": {
            "value": "[coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'location'), reference(split(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()].subnetResourceId, '/subnets/')[0], '2020-06-01', 'Full').location)]"
          },
          "lock": {
            "value": "[coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'lock'), parameters('lock'))]"
          },
          "privateDnsZoneGroup": {
            "value": "[tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'privateDnsZoneGroup')]"
          },
          "roleAssignments": {
            "value": "[tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'roleAssignments')]"
          },
          "tags": {
            "value": "[coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'tags'), parameters('tags'))]"
          },
          "customDnsConfigs": {
            "value": "[tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'customDnsConfigs')]"
          },
          "ipConfigurations": {
            "value": "[tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'ipConfigurations')]"
          },
          "applicationSecurityGroupResourceIds": {
            "value": "[tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'applicationSecurityGroupResourceIds')]"
          },
          "customNetworkInterfaceName": {
            "value": "[tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'customNetworkInterfaceName')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "languageVersion": "2.0",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.33.13.18514",
              "templateHash": "15954548978129725136"
            },
            "name": "Private Endpoints",
            "description": "This module deploys a Private Endpoint."
          },
          "definitions": {
            "privateDnsZoneGroupType": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The name of the Private DNS Zone Group."
                  }
                },
                "privateDnsZoneGroupConfigs": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/privateDnsZoneGroupConfigType"
                  },
                  "metadata": {
                    "description": "Required. The private DNS zone groups to associate the private endpoint. A DNS zone group can support up to 5 DNS zones."
                  }
                }
              },
              "metadata": {
                "__bicep_export!": true
              }
            },
            "ipConfigurationType": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. The name of the resource that is unique within a resource group."
                  }
                },
                "properties": {
                  "type": "object",
                  "properties": {
                    "groupId": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The ID of a group obtained from the remote resource that this private endpoint should connect to. If used with private link service connection, this property must be defined as empty string."
                      }
                    },
                    "memberName": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The member name of a group obtained from the remote resource that this private endpoint should connect to. If used with private link service connection, this property must be defined as empty string."
                      }
                    },
                    "privateIPAddress": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. A private IP address obtained from the private endpoint's subnet."
                      }
                    }
                  },
                  "metadata": {
                    "description": "Required. Properties of private endpoint IP configurations."
                  }
                }
              },
              "metadata": {
                "__bicep_export!": true
              }
            },
            "privateLinkServiceConnectionType": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. The name of the private link service connection."
                  }
                },
                "properties": {
                  "type": "object",
                  "properties": {
                    "groupIds": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "metadata": {
                        "description": "Required. The ID of a group obtained from the remote resource that this private endpoint should connect to. If used with private link service connection, this property must be defined as empty string array `[]`."
                      }
                    },
                    "privateLinkServiceId": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The resource id of private link service."
                      }
                    },
                    "requestMessage": {
                      "type": "string",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. A message passed to the owner of the remote resource with this connection request. Restricted to 140 chars."
                      }
                    }
                  },
                  "metadata": {
                    "description": "Required. Properties of private link service connection."
                  }
                }
              },
              "metadata": {
                "__bicep_export!": true
              }
            },
            "customDnsConfigType": {
              "type": "object",
              "properties": {
                "fqdn": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. FQDN that resolves to private endpoint IP address."
                  }
                },
                "ipAddresses": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "metadata": {
                    "description": "Required. A list of private IP addresses of the private endpoint."
                  }
                }
              },
              "metadata": {
                "__bicep_export!": true
              }
            },
            "lockType": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Specify the name of lock."
                  }
                },
                "kind": {
                  "type": "string",
                  "allowedValues": [
                    "CanNotDelete",
                    "None",
                    "ReadOnly"
                  ],
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Specify the type of lock."
                  }
                }
              },
              "metadata": {
                "description": "An AVM-aligned type for a lock.",
                "__bicep_imported_from!": {
                  "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.5.1"
                }
              }
            },
            "privateDnsZoneGroupConfigType": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The name of the private DNS zone group config."
                  }
                },
                "privateDnsZoneResourceId": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. The resource id of the private DNS zone."
                  }
                }
              },
              "metadata": {
                "__bicep_imported_from!": {
                  "sourceTemplate": "private-dns-zone-group/main.bicep"
                }
              }
            },
            "roleAssignmentType": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The name (as GUID) of the role assignment. If not provided, a GUID will be generated."
                  }
                },
                "roleDefinitionIdOrName": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                  }
                },
                "principalId": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                  }
                },
                "principalType": {
                  "type": "string",
                  "allowedValues": [
                    "Device",
                    "ForeignGroup",
                    "Group",
                    "ServicePrincipal",
                    "User"
                  ],
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The principal type of the assigned principal ID."
                  }
                },
                "description": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The description of the role assignment."
                  }
                },
                "condition": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                  }
                },
                "conditionVersion": {
                  "type": "string",
                  "allowedValues": [
                    "2.0"
                  ],
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Version of the condition."
                  }
                },
                "delegatedManagedIdentityResourceId": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The Resource Id of the delegated managed identity resource."
                  }
                }
              },
              "metadata": {
                "description": "An AVM-aligned type for a role assignment.",
                "__bicep_imported_from!": {
                  "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.5.1"
                }
              }
            }
          },
          "parameters": {
            "name": {
              "type": "string",
              "metadata": {
                "description": "Required. Name of the private endpoint resource to create."
              }
            },
            "subnetResourceId": {
              "type": "string",
              "metadata": {
                "description": "Required. Resource ID of the subnet where the endpoint needs to be created."
              }
            },
            "applicationSecurityGroupResourceIds": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "nullable": true,
              "metadata": {
                "description": "Optional. Application security groups in which the private endpoint IP configuration is included."
              }
            },
            "customNetworkInterfaceName": {
              "type": "string",
              "nullable": true,
              "metadata": {
                "description": "Optional. The custom name of the network interface attached to the private endpoint."
              }
            },
            "ipConfigurations": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ipConfigurationType"
              },
              "nullable": true,
              "metadata": {
                "description": "Optional. A list of IP configurations of the private endpoint. This will be used to map to the First Party Service endpoints."
              }
            },
            "privateDnsZoneGroup": {
              "$ref": "#/definitions/privateDnsZoneGroupType",
              "nullable": true,
              "metadata": {
                "description": "Optional. The private DNS zone group to configure for the private endpoint."
              }
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]",
              "metadata": {
                "description": "Optional. Location for all Resources."
              }
            },
            "lock": {
              "$ref": "#/definitions/lockType",
              "nullable": true,
              "metadata": {
                "description": "Optional. The lock settings of the service."
              }
            },
            "roleAssignments": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/roleAssignmentType"
              },
              "nullable": true,
              "metadata": {
                "description": "Optional. Array of role assignments to create."
              }
            },
            "tags": {
              "type": "object",
              "nullable": true,
              "metadata": {
                "description": "Optional. Tags to be applied on all resources/resource groups in this deployment."
              }
            },
            "customDnsConfigs": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/customDnsConfigType"
              },
              "nullable": true,
              "metadata": {
                "description": "Optional. Custom DNS configurations."
              }
            },
            "manualPrivateLinkServiceConnections": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/privateLinkServiceConnectionType"
              },
              "nullable": true,
              "metadata": {
                "description": "Conditional. A grouping of information about the connection to the remote resource. Used when the network admin does not have access to approve connections to the remote resource. Required if `privateLinkServiceConnections` is empty."
              }
            },
            "privateLinkServiceConnections": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/privateLinkServiceConnectionType"
              },
              "nullable": true,
              "metadata": {
                "description": "Conditional. A grouping of information about the connection to the remote resource. Required if `manualPrivateLinkServiceConnections` is empty."
              }
            },
            "enableTelemetry": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Optional. Enable/Disable usage telemetry for module."
              }
            }
          },
          "variables": {
            "copy": [
              {
                "name": "formattedRoleAssignments",
                "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]",
                "input": "[union(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')], createObject('roleDefinitionId', coalesce(tryGet(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName), if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName)))))]"
              }
            ],
            "builtInRoleNames": {
              "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
              "DNS Resolver Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '0f2ebee7-ffd4-4fc0-b3b7-664099fdad5d')]",
              "DNS Zone Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'befefa01-2a29-4197-83a8-272ff33ce314')]",
              "Domain Services Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'eeaeda52-9324-47f6-8069-5d5bade478b2')]",
              "Domain Services Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '361898ef-9ed1-48c2-849c-a832951106bb')]",
              "Network Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4d97b98b-1d4f-4787-a291-c67834d212e7')]",
              "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
              "Private DNS Zone Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b12aa53e-6015-4669-85d0-8515ebb3ae7f')]",
              "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
              "Role Based Access Control Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]"
            }
          },
          "resources": {
            "avmTelemetry": {
              "condition": "[parameters('enableTelemetry')]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2024-03-01",
              "name": "[format('46d3xbcp.res.network-privateendpoint.{0}.{1}', replace('0.10.1', '.', '-'), substring(uniqueString(deployment().name, parameters('location')), 0, 4))]",
              "properties": {
                "mode": "Incremental",
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "resources": [],
                  "outputs": {
                    "telemetry": {
                      "type": "String",
                      "value": "For more information, see https://aka.ms/avm/TelemetryInfo"
                    }
                  }
                }
              }
            },
            "privateEndpoint": {
              "type": "Microsoft.Network/privateEndpoints",
              "apiVersion": "2023-11-01",
              "name": "[parameters('name')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "properties": {
                "copy": [
                  {
                    "name": "applicationSecurityGroups",
                    "count": "[length(coalesce(parameters('applicationSecurityGroupResourceIds'), createArray()))]",
                    "input": {
                      "id": "[coalesce(parameters('applicationSecurityGroupResourceIds'), createArray())[copyIndex('applicationSecurityGroups')]]"
                    }
                  }
                ],
                "customDnsConfigs": "[coalesce(parameters('customDnsConfigs'), createArray())]",
                "customNetworkInterfaceName": "[coalesce(parameters('customNetworkInterfaceName'), '')]",
                "ipConfigurations": "[coalesce(parameters('ipConfigurations'), createArray())]",
                "manualPrivateLinkServiceConnections": "[coalesce(parameters('manualPrivateLinkServiceConnections'), createArray())]",
                "privateLinkServiceConnections": "[coalesce(parameters('privateLinkServiceConnections'), createArray())]",
                "subnet": {
                  "id": "[parameters('subnetResourceId')]"
                }
              }
            },
            "privateEndpoint_lock": {
              "condition": "[and(not(empty(coalesce(parameters('lock'), createObject()))), not(equals(tryGet(parameters('lock'), 'kind'), 'None')))]",
              "type": "Microsoft.Authorization/locks",
              "apiVersion": "2020-05-01",
              "scope": "[format('Microsoft.Network/privateEndpoints/{0}', parameters('name'))]",
              "name": "[coalesce(tryGet(parameters('lock'), 'name'), format('lock-{0}', parameters('name')))]",
              "properties": {
                "level": "[coalesce(tryGet(parameters('lock'), 'kind'), '')]",
                "notes": "[if(equals(tryGet(parameters('lock'), 'kind'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot delete or modify the resource or child resources.')]"
              },
              "dependsOn": [
                "privateEndpoint"
              ]
            },
            "privateEndpoint_roleAssignments": {
              "copy": {
                "name": "privateEndpoint_roleAssignments",
                "count": "[length(coalesce(variables('formattedRoleAssignments'), createArray()))]"
              },
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.Network/privateEndpoints/{0}', parameters('name'))]",
              "name": "[coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'name'), guid(resourceId('Microsoft.Network/privateEndpoints', parameters('name')), coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId, coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId))]",
              "properties": {
                "roleDefinitionId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId]",
                "principalId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId]",
                "description": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'description')]",
                "principalType": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'principalType')]",
                "condition": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition')]",
                "conditionVersion": "[if(not(empty(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                "delegatedManagedIdentityResourceId": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
              },
              "dependsOn": [
                "privateEndpoint"
              ]
            },
            "privateEndpoint_privateDnsZoneGroup": {
              "condition": "[not(empty(parameters('privateDnsZoneGroup')))]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('{0}-PrivateEndpoint-PrivateDnsZoneGroup', uniqueString(deployment().name))]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "name": {
                    "value": "[tryGet(parameters('privateDnsZoneGroup'), 'name')]"
                  },
                  "privateEndpointName": {
                    "value": "[parameters('name')]"
                  },
                  "privateDnsZoneConfigs": {
                    "value": "[parameters('privateDnsZoneGroup').privateDnsZoneGroupConfigs]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "languageVersion": "2.0",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.33.13.18514",
                      "templateHash": "5440815542537978381"
                    },
                    "name": "Private Endpoint Private DNS Zone Groups",
                    "description": "This module deploys a Private Endpoint Private DNS Zone Group."
                  },
                  "definitions": {
                    "privateDnsZoneGroupConfigType": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The name of the private DNS zone group config."
                          }
                        },
                        "privateDnsZoneResourceId": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. The resource id of the private DNS zone."
                          }
                        }
                      },
                      "metadata": {
                        "__bicep_export!": true
                      }
                    }
                  },
                  "parameters": {
                    "privateEndpointName": {
                      "type": "string",
                      "metadata": {
                        "description": "Conditional. The name of the parent private endpoint. Required if the template is used in a standalone deployment."
                      }
                    },
                    "privateDnsZoneConfigs": {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/privateDnsZoneGroupConfigType"
                      },
                      "minLength": 1,
                      "maxLength": 5,
                      "metadata": {
                        "description": "Required. Array of private DNS zone configurations of the private DNS zone group. A DNS zone group can support up to 5 DNS zones."
                      }
                    },
                    "name": {
                      "type": "string",
                      "defaultValue": "default",
                      "metadata": {
                        "description": "Optional. The name of the private DNS zone group."
                      }
                    }
                  },
                  "variables": {
                    "copy": [
                      {
                        "name": "privateDnsZoneConfigsVar",
                        "count": "[length(parameters('privateDnsZoneConfigs'))]",
                        "input": {
                          "name": "[coalesce(tryGet(parameters('privateDnsZoneConfigs')[copyIndex('privateDnsZoneConfigsVar')], 'name'), last(split(parameters('privateDnsZoneConfigs')[copyIndex('privateDnsZoneConfigsVar')].privateDnsZoneResourceId, '/')))]",
                          "properties": {
                            "privateDnsZoneId": "[parameters('privateDnsZoneConfigs')[copyIndex('privateDnsZoneConfigsVar')].privateDnsZoneResourceId]"
                          }
                        }
                      }
                    ]
                  },
                  "resources": {
                    "privateEndpoint": {
                      "existing": true,
                      "type": "Microsoft.Network/privateEndpoints",
                      "apiVersion": "2023-11-01",
                      "name": "[parameters('privateEndpointName')]"
                    },
                    "privateDnsZoneGroup": {
                      "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
                      "apiVersion": "2023-11-01",
                      "name": "[format('{0}/{1}', parameters('privateEndpointName'), parameters('name'))]",
                      "properties": {
                        "privateDnsZoneConfigs": "[variables('privateDnsZoneConfigsVar')]"
                      }
                    }
                  },
                  "outputs": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the private endpoint DNS zone group."
                      },
                      "value": "[parameters('name')]"
                    },
                    "resourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the private endpoint DNS zone group."
                      },
                      "value": "[resourceId('Microsoft.Network/privateEndpoints/privateDnsZoneGroups', parameters('privateEndpointName'), parameters('name'))]"
                    },
                    "resourceGroupName": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource group the private endpoint DNS zone group was deployed into."
                      },
                      "value": "[resourceGroup().name]"
                    }
                  }
                }
              },
              "dependsOn": [
                "privateEndpoint"
              ]
            }
          },
          "outputs": {
            "resourceGroupName": {
              "type": "string",
              "metadata": {
                "description": "The resource group the private endpoint was deployed into."
              },
              "value": "[resourceGroup().name]"
            },
            "resourceId": {
              "type": "string",
              "metadata": {
                "description": "The resource ID of the private endpoint."
              },
              "value": "[resourceId('Microsoft.Network/privateEndpoints', parameters('name'))]"
            },
            "name": {
              "type": "string",
              "metadata": {
                "description": "The name of the private endpoint."
              },
              "value": "[parameters('name')]"
            },
            "location": {
              "type": "string",
              "metadata": {
                "description": "The location the resource was deployed into."
              },
              "value": "[reference('privateEndpoint', '2023-11-01', 'full').location]"
            },
            "customDnsConfigs": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/customDnsConfigType"
              },
              "metadata": {
                "description": "The custom DNS configurations of the private endpoint."
              },
              "value": "[reference('privateEndpoint').customDnsConfigs]"
            },
            "networkInterfaceResourceIds": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "metadata": {
                "description": "The resource IDs of the network interfaces associated with the private endpoint."
              },
              "value": "[map(reference('privateEndpoint').networkInterfaces, lambda('nic', lambdaVariables('nic').id))]"
            },
            "groupId": {
              "type": "string",
              "nullable": true,
              "metadata": {
                "description": "The group Id for the private endpoint Group."
              },
              "value": "[coalesce(tryGet(tryGet(tryGet(tryGet(reference('privateEndpoint'), 'manualPrivateLinkServiceConnections'), 0, 'properties'), 'groupIds'), 0), tryGet(tryGet(tryGet(tryGet(reference('privateEndpoint'), 'privateLinkServiceConnections'), 0, 'properties'), 'groupIds'), 0))]"
            }
          }
        }
      },
      "dependsOn": [
        "redisCluster"
      ]
    }
  },
  "outputs": {
    "name": {
      "type": "string",
      "metadata": {
        "description": "The name of the Redis cluster."
      },
      "value": "[parameters('name')]"
    },
    "resourceId": {
      "type": "string",
      "metadata": {
        "description": "The resource ID of the Redis cluster."
      },
      "value": "[resourceId('Microsoft.Cache/redisEnterprise', parameters('name'))]"
    },
    "databaseName": {
      "type": "string",
      "metadata": {
        "description": "The name of the Redis database."
      },
      "value": "[reference('redisCluster_database').outputs.name.value]"
    },
    "databaseResourceId": {
      "type": "string",
      "metadata": {
        "description": "The resource ID of the database."
      },
      "value": "[reference('redisCluster_database').outputs.resourceId.value]"
    },
    "resourceGroupName": {
      "type": "string",
      "metadata": {
        "description": "The name of the resource group the Redis resource was created in."
      },
      "value": "[resourceGroup().name]"
    },
    "endpoint": {
      "type": "string",
      "metadata": {
        "description": "The Redis endpoint."
      },
      "value": "[reference('redisCluster_database').outputs.endpoint.value]"
    },
    "location": {
      "type": "string",
      "metadata": {
        "description": "The location the resource was deployed into."
      },
      "value": "[reference('redisCluster', '2024-09-01-preview', 'full').location]"
    },
    "privateEndpoints": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/privateEndpointOutputType"
      },
      "metadata": {
        "description": "The private endpoints of the Redis resource."
      },
      "copy": {
        "count": "[length(coalesce(parameters('privateEndpoints'), createArray()))]",
        "input": {
          "name": "[reference(format('redisEnterprise_privateEndpoints[{0}]', copyIndex())).outputs.name.value]",
          "resourceId": "[reference(format('redisEnterprise_privateEndpoints[{0}]', copyIndex())).outputs.resourceId.value]",
          "groupId": "[tryGet(tryGet(reference(format('redisEnterprise_privateEndpoints[{0}]', copyIndex())).outputs, 'groupId'), 'value')]",
          "customDnsConfigs": "[reference(format('redisEnterprise_privateEndpoints[{0}]', copyIndex())).outputs.customDnsConfigs.value]",
          "networkInterfaceResourceIds": "[reference(format('redisEnterprise_privateEndpoints[{0}]', copyIndex())).outputs.networkInterfaceResourceIds.value]"
        }
      }
    },
    "exportedSecrets": {
      "$ref": "#/definitions/secretsOutputType",
      "metadata": {
        "description": "A hashtable of references to the secrets exported to the provided Key Vault. The key of each reference is each secret's name."
      },
      "value": "[reference('redisCluster_database').outputs.exportedSecrets.value]"
    }
  }
}
