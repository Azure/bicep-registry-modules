{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "languageVersion": "2.0",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "_generator": {
      "name": "bicep",
      "version": "0.36.1.42791",
      "templateHash": "14802204470909553902"
    },
    "name": "Event Grid System Topics",
    "description": "This module deploys an Event Grid System Topic."
  },
  "definitions": {
    "eventSubscriptionType": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "metadata": {
            "description": "Required. The name of the event subscription."
          }
        },
        "deadLetterDestination": {
          "type": "object",
          "metadata": {
            "__bicep_resource_derived_type!": {
              "source": "Microsoft.EventGrid/systemTopics/eventSubscriptions@2025-02-15#properties/properties/properties/deadLetterDestination"
            },
            "description": "Optional. Dead Letter Destination."
          },
          "nullable": true
        },
        "deadLetterWithResourceIdentity": {
          "type": "object",
          "metadata": {
            "__bicep_resource_derived_type!": {
              "source": "Microsoft.EventGrid/systemTopics/eventSubscriptions@2025-02-15#properties/properties/properties/deadLetterWithResourceIdentity"
            },
            "description": "Optional. Dead Letter with Resource Identity Configuration."
          },
          "nullable": true
        },
        "deliveryWithResourceIdentity": {
          "type": "object",
          "metadata": {
            "__bicep_resource_derived_type!": {
              "source": "Microsoft.EventGrid/systemTopics/eventSubscriptions@2025-02-15#properties/properties/properties/deliveryWithResourceIdentity"
            },
            "description": "Optional. Delivery with Resource Identity Configuration."
          },
          "nullable": true
        },
        "destination": {
          "type": "object",
          "metadata": {
            "__bicep_resource_derived_type!": {
              "source": "Microsoft.EventGrid/systemTopics/eventSubscriptions@2025-02-15#properties/properties/properties/destination"
            },
            "description": "Conditional. Required if deliveryWithResourceIdentity is not provided. The destination for the event subscription."
          },
          "nullable": true
        },
        "eventDeliverySchema": {
          "type": "string",
          "allowedValues": [
            "CloudEventSchemaV1_0",
            "CustomInputSchema",
            "EventGridEvent",
            "EventGridSchema"
          ],
          "nullable": true,
          "metadata": {
            "description": "Optional. The event delivery schema for the event subscription."
          }
        },
        "expirationTimeUtc": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "Optional. The expiration time for the event subscription. Format is ISO-8601 (yyyy-MM-ddTHH:mm:ssZ)."
          }
        },
        "filter": {
          "type": "object",
          "metadata": {
            "__bicep_resource_derived_type!": {
              "source": "Microsoft.EventGrid/systemTopics/eventSubscriptions@2025-02-15#properties/properties/properties/filter"
            },
            "description": "Optional. The filter for the event subscription."
          },
          "nullable": true
        },
        "labels": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "nullable": true,
          "metadata": {
            "description": "Optional. The list of user defined labels."
          }
        },
        "retryPolicy": {
          "type": "object",
          "metadata": {
            "__bicep_resource_derived_type!": {
              "source": "Microsoft.EventGrid/systemTopics/eventSubscriptions@2025-02-15#properties/properties/properties/retryPolicy"
            },
            "description": "Optional. The retry policy for events."
          },
          "nullable": true
        }
      },
      "metadata": {
        "description": "Event subscription configuration."
      }
    },
    "externalResourceRoleAssignmentType": {
      "type": "object",
      "properties": {
        "resourceId": {
          "type": "string",
          "metadata": {
            "description": "Required. The resource ID of the target resource to assign permissions to."
          }
        },
        "roleDefinitionId": {
          "type": "string",
          "metadata": {
            "description": "Required. The role definition ID (GUID) or full role definition resource ID. Example: \"ba92f5b4-2d11-453d-a403-e96b0029c9fe\" or \"/subscriptions/{sub}/providers/Microsoft.Authorization/roleDefinitions/ba92f5b4-2d11-453d-a403-e96b0029c9fe\"."
          }
        },
        "description": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "Optional. Description of the role assignment."
          }
        },
        "roleName": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "Optional. Name of the role for logging purposes."
          }
        }
      },
      "metadata": {
        "description": "External resource role assignment configuration."
      }
    },
    "diagnosticSettingFullType": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "Optional. The name of the diagnostic setting."
          }
        },
        "logCategoriesAndGroups": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "category": {
                "type": "string",
                "nullable": true,
                "metadata": {
                  "description": "Optional. Name of a Diagnostic Log category for a resource type this setting is applied to. Set the specific logs to collect here."
                }
              },
              "categoryGroup": {
                "type": "string",
                "nullable": true,
                "metadata": {
                  "description": "Optional. Name of a Diagnostic Log category group for a resource type this setting is applied to. Set to `allLogs` to collect all logs."
                }
              },
              "enabled": {
                "type": "bool",
                "nullable": true,
                "metadata": {
                  "description": "Optional. Enable or disable the category explicitly. Default is `true`."
                }
              }
            }
          },
          "nullable": true,
          "metadata": {
            "description": "Optional. The name of logs that will be streamed. \"allLogs\" includes all possible logs for the resource. Set to `[]` to disable log collection."
          }
        },
        "metricCategories": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "category": {
                "type": "string",
                "metadata": {
                  "description": "Required. Name of a Diagnostic Metric category for a resource type this setting is applied to. Set to `AllMetrics` to collect all metrics."
                }
              },
              "enabled": {
                "type": "bool",
                "nullable": true,
                "metadata": {
                  "description": "Optional. Enable or disable the category explicitly. Default is `true`."
                }
              }
            }
          },
          "nullable": true,
          "metadata": {
            "description": "Optional. The name of metrics that will be streamed. \"allMetrics\" includes all possible metrics for the resource. Set to `[]` to disable metric collection."
          }
        },
        "logAnalyticsDestinationType": {
          "type": "string",
          "allowedValues": [
            "AzureDiagnostics",
            "Dedicated"
          ],
          "nullable": true,
          "metadata": {
            "description": "Optional. A string indicating whether the export to Log Analytics should use the default destination type, i.e. AzureDiagnostics, or use a destination type."
          }
        },
        "workspaceResourceId": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "Optional. Resource ID of the diagnostic log analytics workspace. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
          }
        },
        "storageAccountResourceId": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "Optional. Resource ID of the diagnostic storage account. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
          }
        },
        "eventHubAuthorizationRuleResourceId": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "Optional. Resource ID of the diagnostic event hub authorization rule for the Event Hubs namespace in which the event hub should be created or streamed to."
          }
        },
        "eventHubName": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "Optional. Name of the diagnostic event hub within the namespace to which logs are streamed. Without this, an event hub is created for each log category. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
          }
        },
        "marketplacePartnerResourceId": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "Optional. The full ARM resource ID of the Marketplace resource to which you would like to send Diagnostic Logs."
          }
        }
      },
      "metadata": {
        "description": "An AVM-aligned type for a diagnostic setting. To be used if both logs & metrics are supported by the resource provider.",
        "__bicep_imported_from!": {
          "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.5.1"
        }
      }
    },
    "lockType": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "Optional. Specify the name of lock."
          }
        },
        "kind": {
          "type": "string",
          "allowedValues": [
            "CanNotDelete",
            "None",
            "ReadOnly"
          ],
          "nullable": true,
          "metadata": {
            "description": "Optional. Specify the type of lock."
          }
        }
      },
      "metadata": {
        "description": "An AVM-aligned type for a lock.",
        "__bicep_imported_from!": {
          "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.5.1"
        }
      }
    },
    "managedIdentityAllType": {
      "type": "object",
      "properties": {
        "systemAssigned": {
          "type": "bool",
          "nullable": true,
          "metadata": {
            "description": "Optional. Enables system assigned managed identity on the resource."
          }
        },
        "userAssignedResourceIds": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "nullable": true,
          "metadata": {
            "description": "Optional. The resource ID(s) to assign to the resource. Required if a user assigned identity is used for encryption."
          }
        }
      },
      "metadata": {
        "description": "An AVM-aligned type for a managed identity configuration. To be used if both a system-assigned & user-assigned identities are supported by the resource provider.",
        "__bicep_imported_from!": {
          "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.5.1"
        }
      }
    },
    "roleAssignmentType": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "Optional. The name (as GUID) of the role assignment. If not provided, a GUID will be generated."
          }
        },
        "roleDefinitionIdOrName": {
          "type": "string",
          "metadata": {
            "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
          }
        },
        "principalId": {
          "type": "string",
          "metadata": {
            "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
          }
        },
        "principalType": {
          "type": "string",
          "allowedValues": [
            "Device",
            "ForeignGroup",
            "Group",
            "ServicePrincipal",
            "User"
          ],
          "nullable": true,
          "metadata": {
            "description": "Optional. The principal type of the assigned principal ID."
          }
        },
        "description": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "Optional. The description of the role assignment."
          }
        },
        "condition": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
          }
        },
        "conditionVersion": {
          "type": "string",
          "allowedValues": [
            "2.0"
          ],
          "nullable": true,
          "metadata": {
            "description": "Optional. Version of the condition."
          }
        },
        "delegatedManagedIdentityResourceId": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "Optional. The Resource Id of the delegated managed identity resource."
          }
        }
      },
      "metadata": {
        "description": "An AVM-aligned type for a role assignment.",
        "__bicep_imported_from!": {
          "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.5.1"
        }
      }
    }
  },
  "parameters": {
    "name": {
      "type": "string",
      "metadata": {
        "description": "Required. The name of the Event Grid Topic."
      }
    },
    "location": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "Optional. Location for all Resources."
      }
    },
    "source": {
      "type": "string",
      "metadata": {
        "description": "Required. Source for the system topic."
      }
    },
    "topicType": {
      "type": "string",
      "metadata": {
        "description": "Required. TopicType for the system topic."
      }
    },
    "eventSubscriptions": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/eventSubscriptionType"
      },
      "nullable": true,
      "metadata": {
        "description": "Optional. Event subscriptions to deploy."
      }
    },
    "diagnosticSettings": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/diagnosticSettingFullType"
      },
      "nullable": true,
      "metadata": {
        "description": "Optional. The diagnostic settings of the service."
      }
    },
    "roleAssignments": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/roleAssignmentType"
      },
      "nullable": true,
      "metadata": {
        "description": "Optional. Array of role assignments to create."
      }
    },
    "externalResourceRoleAssignments": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/externalResourceRoleAssignmentType"
      },
      "defaultValue": [],
      "metadata": {
        "description": "Optional. Array of role assignments to create on external resources. This is useful for scenarios where the system topic needs permissions on delivery or dead letter destinations (e.g., Storage Account, Service Bus). Each assignment specifies the target resource ID and role definition ID (GUID)."
      }
    },
    "lock": {
      "$ref": "#/definitions/lockType",
      "nullable": true,
      "metadata": {
        "description": "Optional. The lock settings of the service."
      }
    },
    "managedIdentities": {
      "$ref": "#/definitions/managedIdentityAllType",
      "nullable": true,
      "metadata": {
        "description": "Optional. The managed identity definition for this resource."
      }
    },
    "tags": {
      "type": "object",
      "metadata": {
        "__bicep_resource_derived_type!": {
          "source": "Microsoft.EventGrid/systemTopics@2025-02-15#properties/tags"
        },
        "description": "Optional. Tags of the resource."
      },
      "nullable": true
    },
    "enableTelemetry": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Optional. Enable/Disable usage telemetry for module."
      }
    }
  },
  "variables": {
    "copy": [
      {
        "name": "formattedRoleAssignments",
        "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]",
        "input": "[union(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')], createObject('roleDefinitionId', coalesce(tryGet(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName), if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName)))))]"
      },
      {
        "name": "formattedExternalResourceRoleAssignments",
        "count": "[length(coalesce(parameters('externalResourceRoleAssignments'), createArray()))]",
        "input": "[union(coalesce(parameters('externalResourceRoleAssignments'), createArray())[copyIndex('formattedExternalResourceRoleAssignments')], createObject('roleDefinitionId', if(contains(coalesce(parameters('externalResourceRoleAssignments'), createArray())[copyIndex('formattedExternalResourceRoleAssignments')].roleDefinitionId, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('externalResourceRoleAssignments'), createArray())[copyIndex('formattedExternalResourceRoleAssignments')].roleDefinitionId, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('externalResourceRoleAssignments'), createArray())[copyIndex('formattedExternalResourceRoleAssignments')].roleDefinitionId))))]"
      }
    ],
    "formattedUserAssignedIdentities": "[reduce(map(coalesce(tryGet(parameters('managedIdentities'), 'userAssignedResourceIds'), createArray()), lambda('id', createObject(format('{0}', lambdaVariables('id')), createObject()))), createObject(), lambda('cur', 'next', union(lambdaVariables('cur'), lambdaVariables('next'))))]",
    "identity": "[if(not(empty(parameters('managedIdentities'))), createObject('type', if(coalesce(tryGet(parameters('managedIdentities'), 'systemAssigned'), false()), if(not(empty(coalesce(tryGet(parameters('managedIdentities'), 'userAssignedResourceIds'), createObject()))), 'SystemAssigned,UserAssigned', 'SystemAssigned'), if(not(empty(coalesce(tryGet(parameters('managedIdentities'), 'userAssignedResourceIds'), createObject()))), 'UserAssigned', null())), 'userAssignedIdentities', if(not(empty(variables('formattedUserAssignedIdentities'))), variables('formattedUserAssignedIdentities'), null())), null())]",
    "builtInRoleNames": {
      "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
      "EventGrid Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '1e241071-0855-49ea-94dc-649edcd759de')]",
      "EventGrid Data Sender": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'd5a91429-5739-47e2-a06b-3470a27159e7')]",
      "EventGrid EventSubscription Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '428e0ff0-5e57-4d9c-a221-2c70d0e0a443')]",
      "EventGrid EventSubscription Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '2414bbcf-6497-4faf-8c65-045460748405')]",
      "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
      "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
      "Role Based Access Control Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]",
      "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]"
    },
    "enableReferencedModulesTelemetry": false
  },
  "resources": {
    "avmTelemetry": {
      "condition": "[parameters('enableTelemetry')]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2024-03-01",
      "name": "[take(format('46d3xbcp.res.eventgrid-systemtopic.{0}.{1}', replace('-..--..-', '.', '-'), substring(uniqueString(deployment().name, parameters('location')), 0, 4)), 64)]",
      "properties": {
        "mode": "Incremental",
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "resources": [],
          "outputs": {
            "telemetry": {
              "type": "String",
              "value": "For more information, see https://aka.ms/avm/TelemetryInfo"
            }
          }
        }
      }
    },
    "systemTopic": {
      "type": "Microsoft.EventGrid/systemTopics",
      "apiVersion": "2025-02-15",
      "name": "[parameters('name')]",
      "location": "[parameters('location')]",
      "identity": "[variables('identity')]",
      "tags": "[parameters('tags')]",
      "properties": {
        "source": "[parameters('source')]",
        "topicType": "[parameters('topicType')]"
      }
    },
    "systemTopic_lock": {
      "condition": "[and(not(empty(coalesce(parameters('lock'), createObject()))), not(equals(tryGet(parameters('lock'), 'kind'), 'None')))]",
      "type": "Microsoft.Authorization/locks",
      "apiVersion": "2020-05-01",
      "scope": "[format('Microsoft.EventGrid/systemTopics/{0}', parameters('name'))]",
      "name": "[coalesce(tryGet(parameters('lock'), 'name'), format('lock-{0}', parameters('name')))]",
      "properties": {
        "level": "[coalesce(tryGet(parameters('lock'), 'kind'), '')]",
        "notes": "[if(equals(tryGet(parameters('lock'), 'kind'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot delete or modify the resource or child resources.')]"
      },
      "dependsOn": [
        "systemTopic"
      ]
    },
    "systemTopic_diagnosticSettings": {
      "copy": {
        "name": "systemTopic_diagnosticSettings",
        "count": "[length(coalesce(parameters('diagnosticSettings'), createArray()))]"
      },
      "type": "Microsoft.Insights/diagnosticSettings",
      "apiVersion": "2021-05-01-preview",
      "scope": "[format('Microsoft.EventGrid/systemTopics/{0}', parameters('name'))]",
      "name": "[coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'name'), format('{0}-diagnosticSettings', parameters('name')))]",
      "properties": {
        "copy": [
          {
            "name": "metrics",
            "count": "[length(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics'))))]",
            "input": {
              "category": "[coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics')))[copyIndex('metrics')].category]",
              "enabled": "[coalesce(tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics')))[copyIndex('metrics')], 'enabled'), true())]",
              "timeGrain": null
            }
          },
          {
            "name": "logs",
            "count": "[length(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs'))))]",
            "input": {
              "categoryGroup": "[tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'categoryGroup')]",
              "category": "[tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'category')]",
              "enabled": "[coalesce(tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'enabled'), true())]"
            }
          }
        ],
        "storageAccountId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'storageAccountResourceId')]",
        "workspaceId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'workspaceResourceId')]",
        "eventHubAuthorizationRuleId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'eventHubAuthorizationRuleResourceId')]",
        "eventHubName": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'eventHubName')]",
        "marketplacePartnerId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'marketplacePartnerResourceId')]",
        "logAnalyticsDestinationType": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logAnalyticsDestinationType')]"
      },
      "dependsOn": [
        "systemTopic"
      ]
    },
    "systemTopic_roleAssignments": {
      "copy": {
        "name": "systemTopic_roleAssignments",
        "count": "[length(coalesce(variables('formattedRoleAssignments'), createArray()))]"
      },
      "type": "Microsoft.Authorization/roleAssignments",
      "apiVersion": "2022-04-01",
      "scope": "[format('Microsoft.EventGrid/systemTopics/{0}', parameters('name'))]",
      "name": "[coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'name'), guid(resourceId('Microsoft.EventGrid/systemTopics', parameters('name')), coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId, coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId))]",
      "properties": {
        "roleDefinitionId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId]",
        "principalId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId]",
        "description": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'description')]",
        "principalType": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'principalType')]",
        "condition": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition')]",
        "conditionVersion": "[if(not(empty(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
        "delegatedManagedIdentityResourceId": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
      },
      "dependsOn": [
        "systemTopic"
      ]
    },
    "systemTopics_eventSubscriptions": {
      "copy": {
        "name": "systemTopics_eventSubscriptions",
        "count": "[length(coalesce(parameters('eventSubscriptions'), createArray()))]"
      },
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('{0}-EventGrid-SysTopics-EventSubs-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "destination": "[if(empty(tryGet(coalesce(parameters('eventSubscriptions'), createArray())[copyIndex()], 'deliveryWithResourceIdentity')), createObject('value', tryGet(coalesce(parameters('eventSubscriptions'), createArray())[copyIndex()], 'destination')), createObject('value', null()))]",
          "systemTopicName": {
            "value": "[parameters('name')]"
          },
          "name": {
            "value": "[coalesce(parameters('eventSubscriptions'), createArray())[copyIndex()].name]"
          },
          "deadLetterDestination": {
            "value": "[tryGet(coalesce(parameters('eventSubscriptions'), createArray())[copyIndex()], 'deadLetterDestination')]"
          },
          "deadLetterWithResourceIdentity": {
            "value": "[tryGet(coalesce(parameters('eventSubscriptions'), createArray())[copyIndex()], 'deadLetterWithResourceIdentity')]"
          },
          "deliveryWithResourceIdentity": {
            "value": "[tryGet(coalesce(parameters('eventSubscriptions'), createArray())[copyIndex()], 'deliveryWithResourceIdentity')]"
          },
          "eventDeliverySchema": {
            "value": "[tryGet(coalesce(parameters('eventSubscriptions'), createArray())[copyIndex()], 'eventDeliverySchema')]"
          },
          "expirationTimeUtc": {
            "value": "[tryGet(coalesce(parameters('eventSubscriptions'), createArray())[copyIndex()], 'expirationTimeUtc')]"
          },
          "filter": {
            "value": "[tryGet(coalesce(parameters('eventSubscriptions'), createArray())[copyIndex()], 'filter')]"
          },
          "labels": {
            "value": "[tryGet(coalesce(parameters('eventSubscriptions'), createArray())[copyIndex()], 'labels')]"
          },
          "retryPolicy": {
            "value": "[tryGet(coalesce(parameters('eventSubscriptions'), createArray())[copyIndex()], 'retryPolicy')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "languageVersion": "2.0",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.36.1.42791",
              "templateHash": "5286684288587619638"
            },
            "name": "Event Grid System Topic Event Subscriptions",
            "description": "This module deploys an Event Grid System Topic Event Subscription."
          },
          "parameters": {
            "name": {
              "type": "string",
              "metadata": {
                "description": "Required. The name of the Event Subscription."
              }
            },
            "systemTopicName": {
              "type": "string",
              "metadata": {
                "description": "Required. Name of the Event Grid System Topic."
              }
            },
            "deadLetterDestination": {
              "type": "object",
              "metadata": {
                "__bicep_resource_derived_type!": {
                  "source": "Microsoft.EventGrid/systemTopics/eventSubscriptions@2025-02-15#properties/properties/properties/deadLetterDestination"
                },
                "description": "Optional. Dead Letter Destination."
              },
              "nullable": true
            },
            "deadLetterWithResourceIdentity": {
              "type": "object",
              "metadata": {
                "__bicep_resource_derived_type!": {
                  "source": "Microsoft.EventGrid/systemTopics/eventSubscriptions@2025-02-15#properties/properties/properties/deadLetterWithResourceIdentity"
                },
                "description": "Optional. Dead Letter with Resource Identity Configuration."
              },
              "nullable": true
            },
            "deliveryWithResourceIdentity": {
              "type": "object",
              "metadata": {
                "__bicep_resource_derived_type!": {
                  "source": "Microsoft.EventGrid/systemTopics/eventSubscriptions@2025-02-15#properties/properties/properties/deliveryWithResourceIdentity"
                },
                "description": "Optional. Delivery with Resource Identity Configuration."
              },
              "nullable": true
            },
            "destination": {
              "type": "object",
              "metadata": {
                "__bicep_resource_derived_type!": {
                  "source": "Microsoft.EventGrid/systemTopics/eventSubscriptions@2025-02-15#properties/properties/properties/destination"
                },
                "description": "Conditional. Required if deliveryWithResourceIdentity is not provided. The destination for the event subscription."
              },
              "nullable": true
            },
            "eventDeliverySchema": {
              "type": "string",
              "defaultValue": "EventGridSchema",
              "allowedValues": [
                "CloudEventSchemaV1_0",
                "CustomInputSchema",
                "EventGridSchema",
                "EventGridEvent"
              ],
              "metadata": {
                "description": "Optional. The event delivery schema for the event subscription."
              }
            },
            "expirationTimeUtc": {
              "type": "string",
              "nullable": true,
              "metadata": {
                "description": "Optional. The expiration time for the event subscription. Format is ISO-8601 (yyyy-MM-ddTHH:mm:ssZ)."
              }
            },
            "filter": {
              "type": "object",
              "metadata": {
                "__bicep_resource_derived_type!": {
                  "source": "Microsoft.EventGrid/systemTopics/eventSubscriptions@2025-02-15#properties/properties/properties/filter"
                },
                "description": "Optional. The filter for the event subscription."
              },
              "nullable": true
            },
            "labels": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "nullable": true,
              "metadata": {
                "description": "Optional. The list of user defined labels."
              }
            },
            "retryPolicy": {
              "type": "object",
              "metadata": {
                "__bicep_resource_derived_type!": {
                  "source": "Microsoft.EventGrid/systemTopics/eventSubscriptions@2025-02-15#properties/properties/properties/retryPolicy"
                },
                "description": "Optional. The retry policy for events."
              },
              "nullable": true
            }
          },
          "resources": {
            "systemTopic": {
              "existing": true,
              "type": "Microsoft.EventGrid/systemTopics",
              "apiVersion": "2025-02-15",
              "name": "[parameters('systemTopicName')]"
            },
            "eventSubscription": {
              "type": "Microsoft.EventGrid/systemTopics/eventSubscriptions",
              "apiVersion": "2025-02-15",
              "name": "[format('{0}/{1}', parameters('systemTopicName'), parameters('name'))]",
              "properties": {
                "deadLetterDestination": "[parameters('deadLetterDestination')]",
                "deadLetterWithResourceIdentity": "[parameters('deadLetterWithResourceIdentity')]",
                "deliveryWithResourceIdentity": "[parameters('deliveryWithResourceIdentity')]",
                "destination": "[if(empty(parameters('deliveryWithResourceIdentity')), parameters('destination'), null())]",
                "eventDeliverySchema": "[parameters('eventDeliverySchema')]",
                "expirationTimeUtc": "[coalesce(parameters('expirationTimeUtc'), '')]",
                "filter": "[coalesce(parameters('filter'), createObject())]",
                "labels": "[coalesce(parameters('labels'), createArray())]",
                "retryPolicy": "[parameters('retryPolicy')]"
              }
            }
          },
          "outputs": {
            "name": {
              "type": "string",
              "metadata": {
                "description": "The name of the event subscription."
              },
              "value": "[parameters('name')]"
            },
            "resourceId": {
              "type": "string",
              "metadata": {
                "description": "The resource ID of the event subscription."
              },
              "value": "[resourceId('Microsoft.EventGrid/systemTopics/eventSubscriptions', parameters('systemTopicName'), parameters('name'))]"
            },
            "resourceGroupName": {
              "type": "string",
              "metadata": {
                "description": "The name of the resource group the event subscription was deployed into."
              },
              "value": "[resourceGroup().name]"
            },
            "location": {
              "type": "string",
              "metadata": {
                "description": "The location the resource was deployed into."
              },
              "value": "[reference('systemTopic', '2025-02-15', 'full').location]"
            }
          }
        }
      },
      "dependsOn": [
        "systemTopic",
        "systemTopic_externalResourceRoleAssignments"
      ]
    },
    "systemTopic_externalResourceRoleAssignments": {
      "copy": {
        "name": "systemTopic_externalResourceRoleAssignments",
        "count": "[length(variables('formattedExternalResourceRoleAssignments'))]"
      },
      "condition": "[coalesce(tryGet(parameters('managedIdentities'), 'systemAssigned'), false())]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('{0}-EventGrid-SysTopic-ExtRoleAssign-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "resourceId": {
            "value": "[variables('formattedExternalResourceRoleAssignments')[copyIndex()].resourceId]"
          },
          "roleDefinitionId": {
            "value": "[variables('formattedExternalResourceRoleAssignments')[copyIndex()].roleDefinitionId]"
          },
          "principalId": {
            "value": "[reference('systemTopic', '2025-02-15', 'full').identity.principalId]"
          },
          "principalType": {
            "value": "ServicePrincipal"
          },
          "description": {
            "value": "[coalesce(tryGet(variables('formattedExternalResourceRoleAssignments')[copyIndex()], 'description'), format('Role assignment for Event Grid System Topic {0}', parameters('name')))]"
          },
          "roleName": {
            "value": "[coalesce(tryGet(variables('formattedExternalResourceRoleAssignments')[copyIndex()], 'roleName'), variables('formattedExternalResourceRoleAssignments')[copyIndex()].roleDefinitionId)]"
          },
          "enableTelemetry": {
            "value": "[variables('enableReferencedModulesTelemetry')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.32.4.45862",
              "templateHash": "14634305923902101494"
            },
            "name": "Resource-scoped role assignment",
            "description": "This module deploys a Role Assignment for a specific resource."
          },
          "parameters": {
            "resourceId": {
              "type": "string",
              "metadata": {
                "description": "Required. The scope for the role assignment, fully qualified resourceId."
              }
            },
            "name": {
              "type": "string",
              "defaultValue": "[guid(parameters('resourceId'), parameters('principalId'), if(contains(parameters('roleDefinitionId'), '/providers/Microsoft.Authorization/roleDefinitions/'), parameters('roleDefinitionId'), subscriptionResourceId('Microsoft.Authorization/roleDefinitions', parameters('roleDefinitionId'))))]",
              "metadata": {
                "description": "Optional. The unique guid name for the role assignment."
              }
            },
            "roleDefinitionId": {
              "type": "string",
              "metadata": {
                "description": "Required. The role definition ID for the role assignment."
              }
            },
            "roleName": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. The name for the role, used for logging."
              }
            },
            "principalId": {
              "type": "string",
              "metadata": {
                "description": "Required. The Principal or Object ID of the Security Principal (User, Group, Service Principal, Managed Identity)."
              }
            },
            "principalType": {
              "type": "string",
              "defaultValue": "",
              "allowedValues": [
                "ServicePrincipal",
                "Group",
                "User",
                "ForeignGroup",
                "Device",
                ""
              ],
              "metadata": {
                "description": "Optional. The principal type of the assigned principal ID."
              }
            },
            "description": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. The description of role assignment."
              }
            },
            "enableTelemetry": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Optional. Enable/Disable usage telemetry for module."
              }
            }
          },
          "variables": {
            "$fxv#0": {
              "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
              "contentVersion": "1.0.0.0",
              "parameters": {
                "scope": {
                  "type": "string"
                },
                "name": {
                  "type": "string"
                },
                "roleDefinitionId": {
                  "type": "string"
                },
                "principalId": {
                  "type": "string"
                },
                "principalType": {
                  "type": "string",
                  "allowedValues": [
                    "Device",
                    "ForeignGroup",
                    "Group",
                    "ServicePrincipal",
                    "User",
                    ""
                  ],
                  "defaultValue": "",
                  "metadata": {
                    "description": "Optional. The principal type of the assigned principal ID."
                  }
                },
                "description": {
                  "type": "string"
                }
              },
              "resources": [
                {
                  "type": "Microsoft.Authorization/roleAssignments",
                  "apiVersion": "2022-04-01",
                  "scope": "[[parameters('scope')]",
                  "name": "[[parameters('name')]",
                  "properties": {
                    "roleDefinitionId": "[[parameters('roleDefinitionId')]",
                    "principalId": "[[parameters('principalId')]",
                    "principalType": "[[parameters('principalType')]",
                    "description": "[[parameters('description')]"
                  }
                }
              ],
              "outputs": {
                "roleAssignmentId": {
                  "type": "string",
                  "value": "[[extensionResourceId(parameters('scope'), 'Microsoft.Authorization/roleAssignments', parameters('name'))]"
                }
              }
            }
          },
          "resources": [
            {
              "condition": "[parameters('enableTelemetry')]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2024-03-01",
              "name": "[format('46d3xbcp.ptn.authorization-resourceroleassignment.{0}.{1}', replace('0.1.2', '.', '-'), substring(uniqueString(deployment().name), 0, 4))]",
              "properties": {
                "mode": "Incremental",
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "resources": [],
                  "outputs": {
                    "telemetry": {
                      "type": "String",
                      "value": "For more information, see https://aka.ms/avm/TelemetryInfo"
                    }
                  }
                }
              }
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2023-07-01",
              "name": "[format('{0}-ResourceRoleAssignment', guid(parameters('resourceId'), parameters('principalId'), parameters('roleDefinitionId')))]",
              "properties": {
                "mode": "Incremental",
                "expressionEvaluationOptions": {
                  "scope": "Outer"
                },
                "template": "[variables('$fxv#0')]",
                "parameters": {
                  "scope": {
                    "value": "[parameters('resourceId')]"
                  },
                  "name": {
                    "value": "[parameters('name')]"
                  },
                  "roleDefinitionId": {
                    "value": "[if(contains(parameters('roleDefinitionId'), '/providers/Microsoft.Authorization/roleDefinitions/'), parameters('roleDefinitionId'), subscriptionResourceId('Microsoft.Authorization/roleDefinitions', parameters('roleDefinitionId')))]"
                  },
                  "principalId": {
                    "value": "[parameters('principalId')]"
                  },
                  "principalType": {
                    "value": "[parameters('principalType')]"
                  },
                  "description": {
                    "value": "[parameters('description')]"
                  }
                }
              }
            }
          ],
          "outputs": {
            "name": {
              "type": "string",
              "metadata": {
                "description": "The GUID of the Role Assignment."
              },
              "value": "[parameters('name')]"
            },
            "roleName": {
              "type": "string",
              "metadata": {
                "description": "The name for the role, used for logging."
              },
              "value": "[parameters('roleName')]"
            },
            "resourceId": {
              "type": "string",
              "metadata": {
                "description": "The resource ID of the Role Assignment."
              },
              "value": "[reference(resourceId('Microsoft.Resources/deployments', format('{0}-ResourceRoleAssignment', guid(parameters('resourceId'), parameters('principalId'), parameters('roleDefinitionId')))), '2023-07-01').outputs.roleAssignmentId.value]"
            },
            "resourceGroupName": {
              "type": "string",
              "metadata": {
                "description": "The name of the resource group the role assignment was applied at."
              },
              "value": "[resourceGroup().name]"
            }
          }
        }
      },
      "dependsOn": [
        "systemTopic"
      ]
    }
  },
  "outputs": {
    "name": {
      "type": "string",
      "metadata": {
        "description": "The name of the event grid system topic."
      },
      "value": "[parameters('name')]"
    },
    "resourceId": {
      "type": "string",
      "metadata": {
        "description": "The resource ID of the event grid system topic."
      },
      "value": "[resourceId('Microsoft.EventGrid/systemTopics', parameters('name'))]"
    },
    "resourceGroupName": {
      "type": "string",
      "metadata": {
        "description": "The name of the resource group the event grid system topic was deployed into."
      },
      "value": "[resourceGroup().name]"
    },
    "systemAssignedMIPrincipalId": {
      "type": "string",
      "nullable": true,
      "metadata": {
        "description": "The principal ID of the system assigned identity."
      },
      "value": "[if(coalesce(tryGet(parameters('managedIdentities'), 'systemAssigned'), false()), reference('systemTopic', '2025-02-15', 'full').identity.principalId, null())]"
    },
    "location": {
      "type": "string",
      "metadata": {
        "description": "The location the resource was deployed into."
      },
      "value": "[reference('systemTopic', '2025-02-15', 'full').location]"
    }
  }
}