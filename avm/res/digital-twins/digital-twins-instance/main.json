{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "languageVersion": "2.0",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "_generator": {
      "name": "bicep",
      "version": "0.30.23.60470",
      "templateHash": "11503001274179673847"
    },
    "name": "Digital Twins Instances",
    "description": "This module deploys an Azure Digital Twins Instance.",
    "owner": "Azure/module-maintainers"
  },
  "definitions": {
    "managedIdentitiesType": {
      "type": "object",
      "properties": {
        "systemAssigned": {
          "type": "bool",
          "nullable": true,
          "metadata": {
            "description": "Optional. Enables system assigned managed identity on the resource."
          }
        },
        "userAssignedResourceIds": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "nullable": true,
          "metadata": {
            "description": "Optional. The resource ID(s) to assign to the resource."
          }
        }
      },
      "nullable": true
    },
    "lockType": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "Optional. Specify the name of lock."
          }
        },
        "kind": {
          "type": "string",
          "allowedValues": [
            "CanNotDelete",
            "None",
            "ReadOnly"
          ],
          "nullable": true,
          "metadata": {
            "description": "Optional. Specify the type of lock."
          }
        }
      },
      "nullable": true
    },
    "roleAssignmentType": {
      "type": "array",
      "items": {
        "type": "object",
        "properties": {
          "roleDefinitionIdOrName": {
            "type": "string",
            "metadata": {
              "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
            }
          },
          "principalId": {
            "type": "string",
            "metadata": {
              "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
            }
          },
          "principalType": {
            "type": "string",
            "allowedValues": [
              "Device",
              "ForeignGroup",
              "Group",
              "ServicePrincipal",
              "User"
            ],
            "nullable": true,
            "metadata": {
              "description": "Optional. The principal type of the assigned principal ID."
            }
          },
          "description": {
            "type": "string",
            "nullable": true,
            "metadata": {
              "description": "Optional. The description of the role assignment."
            }
          },
          "condition": {
            "type": "string",
            "nullable": true,
            "metadata": {
              "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
            }
          },
          "conditionVersion": {
            "type": "string",
            "allowedValues": [
              "2.0"
            ],
            "nullable": true,
            "metadata": {
              "description": "Optional. Version of the condition."
            }
          },
          "delegatedManagedIdentityResourceId": {
            "type": "string",
            "nullable": true,
            "metadata": {
              "description": "Optional. The Resource Id of the delegated managed identity resource."
            }
          }
        }
      },
      "nullable": true
    },
    "privateEndpointType": {
      "type": "array",
      "items": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true,
            "metadata": {
              "description": "Optional. The name of the private endpoint."
            }
          },
          "location": {
            "type": "string",
            "nullable": true,
            "metadata": {
              "description": "Optional. The location to deploy the private endpoint to."
            }
          },
          "privateLinkServiceConnectionName": {
            "type": "string",
            "nullable": true,
            "metadata": {
              "description": "Optional. The name of the private link connection to create."
            }
          },
          "service": {
            "type": "string",
            "nullable": true,
            "metadata": {
              "description": "Optional. The subresource to deploy the private endpoint for. For example \"vault\", \"mysqlServer\" or \"dataFactory\"."
            }
          },
          "subnetResourceId": {
            "type": "string",
            "metadata": {
              "description": "Required. Resource ID of the subnet where the endpoint needs to be created."
            }
          },
          "privateDnsZoneGroupName": {
            "type": "string",
            "nullable": true,
            "metadata": {
              "description": "Optional. The name of the private DNS zone group to create if `privateDnsZoneResourceIds` were provided."
            }
          },
          "privateDnsZoneResourceIds": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true,
            "metadata": {
              "description": "Optional. The private DNS zone groups to associate the private endpoint with. A DNS zone group can support up to 5 DNS zones."
            }
          },
          "isManualConnection": {
            "type": "bool",
            "nullable": true,
            "metadata": {
              "description": "Optional. If Manual Private Link Connection is required."
            }
          },
          "manualConnectionRequestMessage": {
            "type": "string",
            "nullable": true,
            "maxLength": 140,
            "metadata": {
              "description": "Optional. A message passed to the owner of the remote resource with the manual connection request."
            }
          },
          "customDnsConfigs": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "fqdn": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. FQDN that resolves to private endpoint IP address."
                  }
                },
                "ipAddresses": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "metadata": {
                    "description": "Required. A list of private IP addresses of the private endpoint."
                  }
                }
              }
            },
            "nullable": true,
            "metadata": {
              "description": "Optional. Custom DNS configurations."
            }
          },
          "ipConfigurations": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. The name of the resource that is unique within a resource group."
                  }
                },
                "properties": {
                  "type": "object",
                  "properties": {
                    "groupId": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The ID of a group obtained from the remote resource that this private endpoint should connect to."
                      }
                    },
                    "memberName": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The member name of a group obtained from the remote resource that this private endpoint should connect to."
                      }
                    },
                    "privateIPAddress": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. A private IP address obtained from the private endpoint's subnet."
                      }
                    }
                  },
                  "metadata": {
                    "description": "Required. Properties of private endpoint IP configurations."
                  }
                }
              }
            },
            "nullable": true,
            "metadata": {
              "description": "Optional. A list of IP configurations of the private endpoint. This will be used to map to the First Party Service endpoints."
            }
          },
          "applicationSecurityGroupResourceIds": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true,
            "metadata": {
              "description": "Optional. Application security groups in which the private endpoint IP configuration is included."
            }
          },
          "customNetworkInterfaceName": {
            "type": "string",
            "nullable": true,
            "metadata": {
              "description": "Optional. The custom name of the network interface attached to the private endpoint."
            }
          },
          "lock": {
            "$ref": "#/definitions/lockType",
            "metadata": {
              "description": "Optional. Specify the type of lock."
            }
          },
          "roleAssignments": {
            "$ref": "#/definitions/roleAssignmentType",
            "metadata": {
              "description": "Optional. Array of role assignments to create."
            }
          },
          "tags": {
            "type": "object",
            "nullable": true,
            "metadata": {
              "description": "Optional. Tags to be applied on all resources/resource groups in this deployment."
            }
          },
          "enableTelemetry": {
            "type": "bool",
            "nullable": true,
            "metadata": {
              "description": "Optional. Enable/Disable usage telemetry for module."
            }
          },
          "resourceGroupName": {
            "type": "string",
            "nullable": true,
            "metadata": {
              "description": "Optional. Specify if you want to deploy the Privte Endpoint into a different resource group than the main resource."
            }
          }
        }
      },
      "nullable": true
    },
    "diagnosticSettingType": {
      "type": "array",
      "items": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true,
            "metadata": {
              "description": "Optional. The name of diagnostic setting."
            }
          },
          "logCategoriesAndGroups": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "category": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Name of a Diagnostic Log category for a resource type this setting is applied to. Set the specific logs to collect here."
                  }
                },
                "categoryGroup": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Name of a Diagnostic Log category group for a resource type this setting is applied to. Set to `allLogs` to collect all logs."
                  }
                },
                "enabled": {
                  "type": "bool",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Enable or disable the category explicitly. Default is `true`."
                  }
                }
              }
            },
            "nullable": true,
            "metadata": {
              "description": "Optional. The name of logs that will be streamed. \"allLogs\" includes all possible logs for the resource. Set to `[]` to disable log collection."
            }
          },
          "metricCategories": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "category": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. Name of a Diagnostic Metric category for a resource type this setting is applied to. Set to `AllMetrics` to collect all metrics."
                  }
                },
                "enabled": {
                  "type": "bool",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Enable or disable the category explicitly. Default is `true`."
                  }
                }
              }
            },
            "nullable": true,
            "metadata": {
              "description": "Optional. The name of metrics that will be streamed. \"allMetrics\" includes all possible metrics for the resource. Set to `[]` to disable metric collection."
            }
          },
          "logAnalyticsDestinationType": {
            "type": "string",
            "allowedValues": [
              "AzureDiagnostics",
              "Dedicated"
            ],
            "nullable": true,
            "metadata": {
              "description": "Optional. A string indicating whether the export to Log Analytics should use the default destination type, i.e. AzureDiagnostics, or use a destination type."
            }
          },
          "workspaceResourceId": {
            "type": "string",
            "nullable": true,
            "metadata": {
              "description": "Optional. Resource ID of the diagnostic log analytics workspace. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
            }
          },
          "storageAccountResourceId": {
            "type": "string",
            "nullable": true,
            "metadata": {
              "description": "Optional. Resource ID of the diagnostic storage account. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
            }
          },
          "eventHubAuthorizationRuleResourceId": {
            "type": "string",
            "nullable": true,
            "metadata": {
              "description": "Optional. Resource ID of the diagnostic event hub authorization rule for the Event Hubs namespace in which the event hub should be created or streamed to."
            }
          },
          "eventHubName": {
            "type": "string",
            "nullable": true,
            "metadata": {
              "description": "Optional. Name of the diagnostic event hub within the namespace to which logs are streamed. Without this, an event hub is created for each log category. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
            }
          },
          "marketplacePartnerResourceId": {
            "type": "string",
            "nullable": true,
            "metadata": {
              "description": "Optional. The full ARM resource ID of the Marketplace resource to which you would like to send Diagnostic Logs."
            }
          }
        }
      },
      "nullable": true
    }
  },
  "parameters": {
    "name": {
      "type": "string",
      "minLength": 3,
      "maxLength": 63,
      "metadata": {
        "description": "Required. The name of the Digital Twin Instance."
      }
    },
    "location": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "Optional. Location for all resources."
      }
    },
    "tags": {
      "type": "object",
      "nullable": true,
      "metadata": {
        "description": "Optional. Resource tags."
      }
    },
    "lock": {
      "$ref": "#/definitions/lockType",
      "metadata": {
        "description": "Optional. The lock settings of the service."
      }
    },
    "managedIdentities": {
      "$ref": "#/definitions/managedIdentitiesType",
      "metadata": {
        "description": "Optional. The managed identity definition for this resource."
      }
    },
    "eventHubEndpoints": {
      "type": "array",
      "nullable": true,
      "metadata": {
        "description": "Optional. Event Hub Endpoint."
      }
    },
    "eventGridEndpoints": {
      "type": "array",
      "nullable": true,
      "metadata": {
        "description": "Optional. Event Grid Endpoint."
      }
    },
    "serviceBusEndpoints": {
      "type": "array",
      "nullable": true,
      "metadata": {
        "description": "Optional. Service Bus Endpoint."
      }
    },
    "privateEndpoints": {
      "$ref": "#/definitions/privateEndpointType",
      "metadata": {
        "description": "Optional. Configuration details for private endpoints. For security reasons, it is recommended to use private endpoints whenever possible."
      }
    },
    "publicNetworkAccess": {
      "type": "string",
      "defaultValue": "",
      "allowedValues": [
        "",
        "Enabled",
        "Disabled"
      ],
      "metadata": {
        "description": "Optional. Whether or not public network access is allowed for this resource. For security reasons it should be disabled. If not specified, it will be disabled by default if private endpoints are set."
      }
    },
    "diagnosticSettings": {
      "$ref": "#/definitions/diagnosticSettingType",
      "metadata": {
        "description": "Optional. The diagnostic settings of the service."
      }
    },
    "enableTelemetry": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Optional. Enable/Disable usage telemetry for module."
      }
    },
    "roleAssignments": {
      "$ref": "#/definitions/roleAssignmentType",
      "metadata": {
        "description": "Optional. Array of role assignment objects that contain the 'roleDefinitionIdOrName' and 'principalIds' to define RBAC role assignments on this resource. In the roleDefinitionIdOrName attribute, you can provide either the display name of the role definition, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
      }
    }
  },
  "variables": {
    "formattedUserAssignedIdentities": "[reduce(map(coalesce(tryGet(parameters('managedIdentities'), 'userAssignedResourceIds'), createArray()), lambda('id', createObject(format('{0}', lambdaVariables('id')), createObject()))), createObject(), lambda('cur', 'next', union(lambdaVariables('cur'), lambdaVariables('next'))))]",
    "identity": "[if(not(empty(parameters('managedIdentities'))), createObject('type', if(coalesce(tryGet(parameters('managedIdentities'), 'systemAssigned'), false()), if(not(empty(coalesce(tryGet(parameters('managedIdentities'), 'userAssignedResourceIds'), createObject()))), 'SystemAssigned,UserAssigned', 'SystemAssigned'), if(not(empty(coalesce(tryGet(parameters('managedIdentities'), 'userAssignedResourceIds'), createObject()))), 'UserAssigned', 'None')), 'userAssignedIdentities', if(not(empty(variables('formattedUserAssignedIdentities'))), variables('formattedUserAssignedIdentities'), null())), null())]",
    "builtInRoleNames": {
      "Azure Digital Twins Data Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'bcd981a7-7f74-457b-83e1-cceb9e632ffe')]",
      "Azure Digital Twins Data Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'd57506d4-4c8d-48b1-8587-93c323f6a5a3')]",
      "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
      "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
      "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
      "Role Based Access Control Administrator (Preview)": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]",
      "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]"
    }
  },
  "resources": {
    "avmTelemetry": {
      "condition": "[parameters('enableTelemetry')]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2024-03-01",
      "name": "[format('46d3xbcp.res.digitaltwins-digitaltwinsinstance.{0}.{1}', replace('-..--..-', '.', '-'), substring(uniqueString(deployment().name, parameters('location')), 0, 4))]",
      "properties": {
        "mode": "Incremental",
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "resources": [],
          "outputs": {
            "telemetry": {
              "type": "String",
              "value": "For more information, see https://aka.ms/avm/TelemetryInfo"
            }
          }
        }
      }
    },
    "digitalTwinsInstance": {
      "type": "Microsoft.DigitalTwins/digitalTwinsInstances",
      "apiVersion": "2023-01-31",
      "name": "[parameters('name')]",
      "location": "[parameters('location')]",
      "identity": "[variables('identity')]",
      "tags": "[parameters('tags')]",
      "properties": {
        "publicNetworkAccess": "[if(not(empty(parameters('publicNetworkAccess'))), parameters('publicNetworkAccess'), if(not(empty(parameters('privateEndpoints'))), 'Disabled', 'Enabled'))]"
      }
    },
    "digitalTwinsInstance_lock": {
      "condition": "[and(not(empty(coalesce(parameters('lock'), createObject()))), not(equals(tryGet(parameters('lock'), 'kind'), 'None')))]",
      "type": "Microsoft.Authorization/locks",
      "apiVersion": "2020-05-01",
      "scope": "[format('Microsoft.DigitalTwins/digitalTwinsInstances/{0}', parameters('name'))]",
      "name": "[coalesce(tryGet(parameters('lock'), 'name'), format('lock-{0}', parameters('name')))]",
      "properties": {
        "level": "[coalesce(tryGet(parameters('lock'), 'kind'), '')]",
        "notes": "[if(equals(tryGet(parameters('lock'), 'kind'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot delete or modify the resource or child resources.')]"
      },
      "dependsOn": [
        "digitalTwinsInstance"
      ]
    },
    "digitalTwinsInstance_diagnosticSettings": {
      "copy": {
        "name": "digitalTwinsInstance_diagnosticSettings",
        "count": "[length(coalesce(parameters('diagnosticSettings'), createArray()))]"
      },
      "type": "Microsoft.Insights/diagnosticSettings",
      "apiVersion": "2021-05-01-preview",
      "scope": "[format('Microsoft.DigitalTwins/digitalTwinsInstances/{0}', parameters('name'))]",
      "name": "[coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'name'), format('{0}-diagnosticSettings', parameters('name')))]",
      "properties": {
        "copy": [
          {
            "name": "metrics",
            "count": "[length(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics'))))]",
            "input": {
              "category": "[coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics')))[copyIndex('metrics')].category]",
              "enabled": "[coalesce(tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics')))[copyIndex('metrics')], 'enabled'), true())]",
              "timeGrain": null
            }
          },
          {
            "name": "logs",
            "count": "[length(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs'))))]",
            "input": {
              "categoryGroup": "[tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'categoryGroup')]",
              "category": "[tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'category')]",
              "enabled": "[coalesce(tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'enabled'), true())]"
            }
          }
        ],
        "storageAccountId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'storageAccountResourceId')]",
        "workspaceId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'workspaceResourceId')]",
        "eventHubAuthorizationRuleId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'eventHubAuthorizationRuleResourceId')]",
        "eventHubName": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'eventHubName')]",
        "marketplacePartnerId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'marketplacePartnerResourceId')]",
        "logAnalyticsDestinationType": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logAnalyticsDestinationType')]"
      },
      "dependsOn": [
        "digitalTwinsInstance"
      ]
    },
    "digitalTwinsInstance_roleAssignments": {
      "copy": {
        "name": "digitalTwinsInstance_roleAssignments",
        "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]"
      },
      "type": "Microsoft.Authorization/roleAssignments",
      "apiVersion": "2022-04-01",
      "scope": "[format('Microsoft.DigitalTwins/digitalTwinsInstances/{0}', parameters('name'))]",
      "name": "[guid(resourceId('Microsoft.DigitalTwins/digitalTwinsInstances', parameters('name')), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].principalId, coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName)]",
      "properties": {
        "roleDefinitionId": "[if(contains(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName), variables('builtInRoleNames')[coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName], if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName)))]",
        "principalId": "[coalesce(parameters('roleAssignments'), createArray())[copyIndex()].principalId]",
        "description": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'description')]",
        "principalType": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'principalType')]",
        "condition": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'condition')]",
        "conditionVersion": "[if(not(empty(tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
        "delegatedManagedIdentityResourceId": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
      },
      "dependsOn": [
        "digitalTwinsInstance"
      ]
    },
    "digitalTwinsInstance_eventHubEndpoints": {
      "copy": {
        "name": "digitalTwinsInstance_eventHubEndpoints",
        "count": "[length(coalesce(parameters('eventHubEndpoints'), createArray()))]"
      },
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('{0}-DigitalTwinsInstance-Endpoints-EventHub-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "digitalTwinInstanceName": {
            "value": "[parameters('name')]"
          },
          "name": "[if(contains(coalesce(parameters('eventHubEndpoints'), createArray())[copyIndex()], 'name'), createObject('value', coalesce(parameters('eventHubEndpoints'), createArray())[copyIndex()].name), createObject('value', 'EventHubEndpoint'))]",
          "authenticationType": "[if(contains(coalesce(parameters('eventHubEndpoints'), createArray())[copyIndex()], 'authenticationType'), createObject('value', coalesce(parameters('eventHubEndpoints'), createArray())[copyIndex()].authenticationType), createObject('value', 'KeyBased'))]",
          "connectionStringPrimaryKey": "[if(contains(coalesce(parameters('eventHubEndpoints'), createArray())[copyIndex()], 'connectionStringPrimaryKey'), createObject('value', coalesce(parameters('eventHubEndpoints'), createArray())[copyIndex()].connectionStringPrimaryKey), createObject('value', ''))]",
          "connectionStringSecondaryKey": "[if(contains(coalesce(parameters('eventHubEndpoints'), createArray())[copyIndex()], 'connectionStringSecondaryKey'), createObject('value', coalesce(parameters('eventHubEndpoints'), createArray())[copyIndex()].connectionStringSecondaryKey), createObject('value', ''))]",
          "deadLetterSecret": "[if(contains(coalesce(parameters('eventHubEndpoints'), createArray())[copyIndex()], 'deadLetterSecret'), createObject('value', coalesce(parameters('eventHubEndpoints'), createArray())[copyIndex()].deadLetterSecret), createObject('value', ''))]",
          "deadLetterUri": "[if(contains(coalesce(parameters('eventHubEndpoints'), createArray())[copyIndex()], 'deadLetterUri'), createObject('value', coalesce(parameters('eventHubEndpoints'), createArray())[copyIndex()].deadLetterUri), createObject('value', ''))]",
          "endpointUri": "[if(contains(coalesce(parameters('eventHubEndpoints'), createArray())[copyIndex()], 'endpointUri'), createObject('value', coalesce(parameters('eventHubEndpoints'), createArray())[copyIndex()].endpointUri), createObject('value', ''))]",
          "entityPath": "[if(contains(coalesce(parameters('eventHubEndpoints'), createArray())[copyIndex()], 'entityPath'), createObject('value', coalesce(parameters('eventHubEndpoints'), createArray())[copyIndex()].entityPath), createObject('value', ''))]",
          "managedIdentities": "[if(contains(coalesce(parameters('eventHubEndpoints'), createArray())[copyIndex()], 'managedIdentities'), createObject('value', coalesce(parameters('eventHubEndpoints'), createArray())[copyIndex()].managedIdentities), createObject('value', createObject()))]"
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "languageVersion": "2.0",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.30.23.60470",
              "templateHash": "16914787878954195877"
            },
            "name": "Digital Twins Instance EventHub Endpoint",
            "description": "This module deploys a Digital Twins Instance EventHub Endpoint.",
            "owner": "Azure/module-maintainers"
          },
          "definitions": {
            "managedIdentitiesType": {
              "type": "object",
              "properties": {
                "systemAssigned": {
                  "type": "bool",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Enables system assigned managed identity on the resource."
                  }
                },
                "userAssignedResourceId": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The resource ID(s) to assign to the resource."
                  }
                }
              },
              "nullable": true
            }
          },
          "parameters": {
            "name": {
              "type": "string",
              "defaultValue": "EventHubEndpoint",
              "metadata": {
                "description": "Optional. The name of the Digital Twin Endpoint."
              }
            },
            "digitalTwinInstanceName": {
              "type": "string",
              "metadata": {
                "description": "Conditional. The name of the parent Digital Twin Instance resource. Required if the template is used in a standalone deployment."
              }
            },
            "authenticationType": {
              "type": "string",
              "defaultValue": "IdentityBased",
              "allowedValues": [
                "IdentityBased",
                "KeyBased"
              ],
              "metadata": {
                "description": "Optional. Specifies the authentication type being used for connecting to the endpoint. If 'KeyBased' is selected, a connection string must be specified (at least the primary connection string). If 'IdentityBased' is selected, the endpointUri and entityPath properties must be specified."
              }
            },
            "deadLetterSecret": {
              "type": "securestring",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. Dead letter storage secret for key-based authentication. Will be obfuscated during read."
              }
            },
            "deadLetterUri": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. Dead letter storage URL for identity-based authentication."
              }
            },
            "connectionStringPrimaryKey": {
              "type": "securestring",
              "defaultValue": "",
              "metadata": {
                "description": "Conditional. PrimaryConnectionString of the endpoint for key-based authentication. Will be obfuscated during read. Required if the `authenticationType` is \"KeyBased\"."
              }
            },
            "connectionStringSecondaryKey": {
              "type": "securestring",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. SecondaryConnectionString of the endpoint for key-based authentication. Will be obfuscated during read. Only used if the `authenticationType` is \"KeyBased\"."
              }
            },
            "entityPath": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. The EventHub name in the EventHub namespace for identity-based authentication."
              }
            },
            "endpointUri": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. The URL of the EventHub namespace for identity-based authentication. It must include the protocol 'sb://' (i.e. sb://xyz.servicebus.windows.net)."
              }
            },
            "managedIdentities": {
              "$ref": "#/definitions/managedIdentitiesType",
              "metadata": {
                "description": "Optional. The managed identity definition for this resource.  Only one type of identity is supported: system-assigned or user-assigned, but not both."
              }
            }
          },
          "variables": {
            "identity": "[if(not(empty(parameters('managedIdentities'))), createObject('type', if(coalesce(tryGet(parameters('managedIdentities'), 'systemAssigned'), false()), 'SystemAssigned', if(not(empty(coalesce(tryGet(parameters('managedIdentities'), 'userAssignedResourceId'), ''))), 'UserAssigned', null())), 'userAssignedIdentity', tryGet(parameters('managedIdentities'), 'userAssignedResourceId')), null())]"
          },
          "resources": {
            "digitalTwinsInstance": {
              "existing": true,
              "type": "Microsoft.DigitalTwins/digitalTwinsInstances",
              "apiVersion": "2023-01-31",
              "name": "[parameters('digitalTwinInstanceName')]"
            },
            "endpoint": {
              "type": "Microsoft.DigitalTwins/digitalTwinsInstances/endpoints",
              "apiVersion": "2023-01-31",
              "name": "[format('{0}/{1}', parameters('digitalTwinInstanceName'), parameters('name'))]",
              "properties": {
                "endpointType": "EventHub",
                "authenticationType": "[parameters('authenticationType')]",
                "connectionStringPrimaryKey": "[parameters('connectionStringPrimaryKey')]",
                "connectionStringSecondaryKey": "[parameters('connectionStringSecondaryKey')]",
                "deadLetterSecret": "[parameters('deadLetterSecret')]",
                "deadLetterUri": "[parameters('deadLetterUri')]",
                "endpointUri": "[parameters('endpointUri')]",
                "entityPath": "[parameters('entityPath')]",
                "identity": "[variables('identity')]"
              },
              "dependsOn": [
                "digitalTwinsInstance"
              ]
            }
          },
          "outputs": {
            "resourceId": {
              "type": "string",
              "metadata": {
                "description": "The resource ID of the Endpoint."
              },
              "value": "[resourceId('Microsoft.DigitalTwins/digitalTwinsInstances/endpoints', parameters('digitalTwinInstanceName'), parameters('name'))]"
            },
            "resourceGroupName": {
              "type": "string",
              "metadata": {
                "description": "The name of the resource group the resource was created in."
              },
              "value": "[resourceGroup().name]"
            },
            "name": {
              "type": "string",
              "metadata": {
                "description": "The name of the Endpoint."
              },
              "value": "[parameters('name')]"
            },
            "systemAssignedMIPrincipalId": {
              "type": "string",
              "metadata": {
                "description": "The principal ID of the system assigned identity. Note: As of 2024-03 is not exported by API."
              },
              "value": "[coalesce(tryGet(tryGet(reference('endpoint', '2023-01-31', 'full'), 'identity'), 'principalId'), '')]"
            }
          }
        }
      },
      "dependsOn": [
        "digitalTwinsInstance"
      ]
    },
    "digitalTwinsInstance_eventGridEndpoints": {
      "copy": {
        "name": "digitalTwinsInstance_eventGridEndpoints",
        "count": "[length(coalesce(parameters('eventGridEndpoints'), createArray()))]"
      },
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('{0}-DigitalTwinsInstance-Endpoints-EventGrid-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "digitalTwinInstanceName": {
            "value": "[parameters('name')]"
          },
          "name": "[if(contains(coalesce(parameters('eventGridEndpoints'), createArray())[copyIndex()], 'name'), createObject('value', coalesce(parameters('eventGridEndpoints'), createArray())[copyIndex()].name), createObject('value', 'EventGridEndpoint'))]",
          "topicEndpoint": "[if(contains(coalesce(parameters('eventGridEndpoints'), createArray())[copyIndex()], 'topicEndpoint'), createObject('value', coalesce(parameters('eventGridEndpoints'), createArray())[copyIndex()].topicEndpoint), createObject('value', ''))]",
          "deadLetterSecret": "[if(contains(coalesce(parameters('eventGridEndpoints'), createArray())[copyIndex()], 'deadLetterSecret'), createObject('value', coalesce(parameters('eventGridEndpoints'), createArray())[copyIndex()].deadLetterSecret), createObject('value', ''))]",
          "deadLetterUri": "[if(contains(coalesce(parameters('eventGridEndpoints'), createArray())[copyIndex()], 'deadLetterUri'), createObject('value', coalesce(parameters('eventGridEndpoints'), createArray())[copyIndex()].deadLetterUri), createObject('value', ''))]",
          "eventGridDomainResourceId": "[if(contains(coalesce(parameters('eventGridEndpoints'), createArray())[copyIndex()], 'eventGridDomainId'), createObject('value', coalesce(parameters('eventGridEndpoints'), createArray())[copyIndex()].eventGridDomainId), createObject('value', ''))]"
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.30.23.60470",
              "templateHash": "17261842587165157796"
            },
            "name": "Digital Twins Instance Event Grid Endpoints",
            "description": "This module deploys a Digital Twins Instance Event Grid Endpoint.",
            "owner": "Azure/module-maintainers"
          },
          "parameters": {
            "name": {
              "type": "string",
              "defaultValue": "EventGridEndpoint",
              "metadata": {
                "description": "Optional. The name of the Digital Twin Endpoint."
              }
            },
            "digitalTwinInstanceName": {
              "type": "string",
              "metadata": {
                "description": "Conditional. The name of the parent Digital Twin Instance resource. Required if the template is used in a standalone deployment."
              }
            },
            "topicEndpoint": {
              "type": "string",
              "metadata": {
                "description": "Required. EventGrid Topic Endpoint."
              }
            },
            "eventGridDomainResourceId": {
              "type": "string",
              "metadata": {
                "description": "Required. The resource ID of the Event Grid to get access keys from."
              }
            },
            "deadLetterSecret": {
              "type": "securestring",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. Dead letter storage secret for key-based authentication. Will be obfuscated during read."
              }
            },
            "deadLetterUri": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. Dead letter storage URL for identity-based authentication."
              }
            }
          },
          "resources": [
            {
              "type": "Microsoft.DigitalTwins/digitalTwinsInstances/endpoints",
              "apiVersion": "2023-01-31",
              "name": "[format('{0}/{1}', parameters('digitalTwinInstanceName'), parameters('name'))]",
              "properties": {
                "endpointType": "EventGrid",
                "authenticationType": "KeyBased",
                "TopicEndpoint": "[parameters('topicEndpoint')]",
                "accessKey1": "[listkeys(parameters('eventGridDomainResourceId'), '2022-06-15').key1]",
                "accessKey2": "[listkeys(parameters('eventGridDomainResourceId'), '2022-06-15').key2]",
                "deadLetterSecret": "[parameters('deadLetterSecret')]",
                "deadLetterUri": "[parameters('deadLetterUri')]"
              }
            }
          ],
          "outputs": {
            "resourceId": {
              "type": "string",
              "metadata": {
                "description": "The resource ID of the Endpoint."
              },
              "value": "[resourceId('Microsoft.DigitalTwins/digitalTwinsInstances/endpoints', parameters('digitalTwinInstanceName'), parameters('name'))]"
            },
            "resourceGroupName": {
              "type": "string",
              "metadata": {
                "description": "The name of the resource group the resource was created in."
              },
              "value": "[resourceGroup().name]"
            },
            "name": {
              "type": "string",
              "metadata": {
                "description": "The name of the Endpoint."
              },
              "value": "[parameters('name')]"
            }
          }
        }
      },
      "dependsOn": [
        "digitalTwinsInstance"
      ]
    },
    "digitalTwinsInstance_serviceBusEndpoints": {
      "copy": {
        "name": "digitalTwinsInstance_serviceBusEndpoints",
        "count": "[length(coalesce(parameters('serviceBusEndpoints'), createArray()))]"
      },
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('{0}-DigitalTwinsInstance-Endpoints-ServiceBus-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "digitalTwinInstanceName": {
            "value": "[parameters('name')]"
          },
          "name": "[if(contains(coalesce(parameters('serviceBusEndpoints'), createArray())[copyIndex()], 'name'), createObject('value', coalesce(parameters('serviceBusEndpoints'), createArray())[copyIndex()].name), createObject('value', 'ServiceBusEndpoint'))]",
          "authenticationType": "[if(contains(coalesce(parameters('serviceBusEndpoints'), createArray())[copyIndex()], 'authenticationType'), createObject('value', coalesce(parameters('serviceBusEndpoints'), createArray())[copyIndex()].authenticationType), createObject('value', ''))]",
          "deadLetterSecret": "[if(contains(coalesce(parameters('serviceBusEndpoints'), createArray())[copyIndex()], 'deadLetterSecret'), createObject('value', coalesce(parameters('serviceBusEndpoints'), createArray())[copyIndex()].deadLetterSecret), createObject('value', ''))]",
          "deadLetterUri": "[if(contains(coalesce(parameters('serviceBusEndpoints'), createArray())[copyIndex()], 'deadLetterUri'), createObject('value', coalesce(parameters('serviceBusEndpoints'), createArray())[copyIndex()].deadLetterUri), createObject('value', ''))]",
          "endpointUri": "[if(contains(coalesce(parameters('serviceBusEndpoints'), createArray())[copyIndex()], 'endpointUri'), createObject('value', coalesce(parameters('serviceBusEndpoints'), createArray())[copyIndex()].endpointUri), createObject('value', ''))]",
          "entityPath": "[if(contains(coalesce(parameters('serviceBusEndpoints'), createArray())[copyIndex()], 'entityPath'), createObject('value', coalesce(parameters('serviceBusEndpoints'), createArray())[copyIndex()].entityPath), createObject('value', ''))]",
          "primaryConnectionString": "[if(contains(coalesce(parameters('serviceBusEndpoints'), createArray())[copyIndex()], 'primaryConnectionString'), createObject('value', coalesce(parameters('serviceBusEndpoints'), createArray())[copyIndex()].primaryConnectionString), createObject('value', ''))]",
          "secondaryConnectionString": "[if(contains(coalesce(parameters('serviceBusEndpoints'), createArray())[copyIndex()], 'secondaryConnectionString'), createObject('value', coalesce(parameters('serviceBusEndpoints'), createArray())[copyIndex()].secondaryConnectionString), createObject('value', ''))]",
          "managedIdentities": "[if(contains(coalesce(parameters('serviceBusEndpoints'), createArray())[copyIndex()], 'managedIdentities'), createObject('value', coalesce(parameters('serviceBusEndpoints'), createArray())[copyIndex()].managedIdentities), createObject('value', createObject()))]"
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "languageVersion": "2.0",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.30.23.60470",
              "templateHash": "843606537345038481"
            },
            "name": "Digital Twins Instance ServiceBus Endpoint",
            "description": "This module deploys a Digital Twins Instance ServiceBus Endpoint.",
            "owner": "Azure/module-maintainers"
          },
          "definitions": {
            "managedIdentitiesType": {
              "type": "object",
              "properties": {
                "systemAssigned": {
                  "type": "bool",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Enables system assigned managed identity on the resource."
                  }
                },
                "userAssignedResourceId": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The resource ID(s) to assign to the resource."
                  }
                }
              },
              "nullable": true
            }
          },
          "parameters": {
            "name": {
              "type": "string",
              "defaultValue": "ServiceBusEndpoint",
              "metadata": {
                "description": "Optional. The name of the Digital Twin Endpoint."
              }
            },
            "digitalTwinInstanceName": {
              "type": "string",
              "metadata": {
                "description": "Conditional. The name of the parent Digital Twin Instance resource. Required if the template is used in a standalone deployment."
              }
            },
            "authenticationType": {
              "type": "string",
              "defaultValue": "IdentityBased",
              "allowedValues": [
                "IdentityBased",
                "KeyBased"
              ],
              "metadata": {
                "description": "Optional. Specifies the authentication type being used for connecting to the endpoint. If 'KeyBased' is selected, a connection string must be specified (at least the primary connection string). If 'IdentityBased' is selected, the endpointUri and entityPath properties must be specified."
              }
            },
            "deadLetterSecret": {
              "type": "securestring",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. Dead letter storage secret for key-based authentication. Will be obfuscated during read."
              }
            },
            "deadLetterUri": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. Dead letter storage URL for identity-based authentication."
              }
            },
            "endpointUri": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. The URL of the ServiceBus namespace for identity-based authentication. It must include the protocol 'sb://' (e.g. sb://xyz.servicebus.windows.net)."
              }
            },
            "entityPath": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. The ServiceBus Topic name for identity-based authentication."
              }
            },
            "primaryConnectionString": {
              "type": "securestring",
              "defaultValue": "",
              "metadata": {
                "description": "Conditional. PrimaryConnectionString of the endpoint for key-based authentication. Will be obfuscated during read. Required if the `authenticationType` is \"KeyBased\"."
              }
            },
            "secondaryConnectionString": {
              "type": "securestring",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. SecondaryConnectionString of the endpoint for key-based authentication. Will be obfuscated during read. Only used if the `authenticationType` is \"KeyBased\"."
              }
            },
            "managedIdentities": {
              "$ref": "#/definitions/managedIdentitiesType",
              "metadata": {
                "description": "Optional. The managed identity definition for this resource. Only one type of identity is supported: system-assigned or user-assigned, but not both."
              }
            }
          },
          "variables": {
            "identity": "[if(not(empty(parameters('managedIdentities'))), createObject('type', if(coalesce(tryGet(parameters('managedIdentities'), 'systemAssigned'), false()), 'SystemAssigned', if(not(empty(coalesce(tryGet(parameters('managedIdentities'), 'userAssignedResourceId'), ''))), 'UserAssigned', null())), 'userAssignedIdentity', tryGet(parameters('managedIdentities'), 'userAssignedResourceId')), null())]"
          },
          "resources": {
            "digitalTwinsInstance": {
              "existing": true,
              "type": "Microsoft.DigitalTwins/digitalTwinsInstances",
              "apiVersion": "2023-01-31",
              "name": "[parameters('digitalTwinInstanceName')]"
            },
            "endpoint": {
              "type": "Microsoft.DigitalTwins/digitalTwinsInstances/endpoints",
              "apiVersion": "2023-01-31",
              "name": "[format('{0}/{1}', parameters('digitalTwinInstanceName'), parameters('name'))]",
              "properties": {
                "endpointType": "ServiceBus",
                "authenticationType": "[parameters('authenticationType')]",
                "deadLetterSecret": "[parameters('deadLetterSecret')]",
                "deadLetterUri": "[parameters('deadLetterUri')]",
                "endpointUri": "[parameters('endpointUri')]",
                "entityPath": "[parameters('entityPath')]",
                "primaryConnectionString": "[parameters('primaryConnectionString')]",
                "secondaryConnectionString": "[parameters('secondaryConnectionString')]",
                "identity": "[variables('identity')]"
              },
              "dependsOn": [
                "digitalTwinsInstance"
              ]
            }
          },
          "outputs": {
            "resourceId": {
              "type": "string",
              "metadata": {
                "description": "The resource ID of the Endpoint."
              },
              "value": "[resourceId('Microsoft.DigitalTwins/digitalTwinsInstances/endpoints', parameters('digitalTwinInstanceName'), parameters('name'))]"
            },
            "resourceGroupName": {
              "type": "string",
              "metadata": {
                "description": "The name of the resource group the resource was created in."
              },
              "value": "[resourceGroup().name]"
            },
            "name": {
              "type": "string",
              "metadata": {
                "description": "The name of the Endpoint."
              },
              "value": "[parameters('name')]"
            },
            "systemAssignedMIPrincipalId": {
              "type": "string",
              "metadata": {
                "description": "The principal ID of the system assigned identity. Note: As of 2024-03 is not exported by API."
              },
              "value": "[coalesce(tryGet(tryGet(reference('endpoint', '2023-01-31', 'full'), 'identity'), 'principalId'), '')]"
            }
          }
        }
      },
      "dependsOn": [
        "digitalTwinsInstance"
      ]
    },
    "digitalTwinsInstance_privateEndpoints": {
      "copy": {
        "name": "digitalTwinsInstance_privateEndpoints",
        "count": "[length(coalesce(parameters('privateEndpoints'), createArray()))]"
      },
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('{0}-digitalTwinsInstance-PrivateEndpoint-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
      "resourceGroup": "[coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'resourceGroupName'), '')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "name": {
            "value": "[coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'name'), format('pep-{0}-{1}-{2}', last(split(resourceId('Microsoft.DigitalTwins/digitalTwinsInstances', parameters('name')), '/')), coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'service'), 'API'), copyIndex()))]"
          },
          "privateLinkServiceConnections": "[if(not(equals(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'isManualConnection'), true())), createObject('value', createArray(createObject('name', coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'privateLinkServiceConnectionName'), format('{0}-{1}-{2}', last(split(resourceId('Microsoft.DigitalTwins/digitalTwinsInstances', parameters('name')), '/')), coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'service'), 'API'), copyIndex())), 'properties', createObject('privateLinkServiceId', resourceId('Microsoft.DigitalTwins/digitalTwinsInstances', parameters('name')), 'groupIds', createArray(coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'service'), 'API')))))), createObject('value', null()))]",
          "manualPrivateLinkServiceConnections": "[if(equals(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'isManualConnection'), true()), createObject('value', createArray(createObject('name', coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'privateLinkServiceConnectionName'), format('{0}-{1}-{2}', last(split(resourceId('Microsoft.DigitalTwins/digitalTwinsInstances', parameters('name')), '/')), coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'service'), 'API'), copyIndex())), 'properties', createObject('privateLinkServiceId', resourceId('Microsoft.DigitalTwins/digitalTwinsInstances', parameters('name')), 'groupIds', createArray(coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'service'), 'API')), 'requestMessage', coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'manualConnectionRequestMessage'), 'Manual approval required.'))))), createObject('value', null()))]",
          "subnetResourceId": {
            "value": "[coalesce(parameters('privateEndpoints'), createArray())[copyIndex()].subnetResourceId]"
          },
          "enableTelemetry": {
            "value": "[coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'enableTelemetry'), parameters('enableTelemetry'))]"
          },
          "location": {
            "value": "[coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'location'), reference(split(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()].subnetResourceId, '/subnets/')[0], '2020-06-01', 'Full').location)]"
          },
          "lock": {
            "value": "[coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'lock'), parameters('lock'))]"
          },
          "privateDnsZoneGroupName": {
            "value": "[tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'privateDnsZoneGroupName')]"
          },
          "privateDnsZoneResourceIds": {
            "value": "[tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'privateDnsZoneResourceIds')]"
          },
          "roleAssignments": {
            "value": "[tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'roleAssignments')]"
          },
          "tags": {
            "value": "[coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'tags'), parameters('tags'))]"
          },
          "customDnsConfigs": {
            "value": "[tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'customDnsConfigs')]"
          },
          "ipConfigurations": {
            "value": "[tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'ipConfigurations')]"
          },
          "applicationSecurityGroupResourceIds": {
            "value": "[tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'applicationSecurityGroupResourceIds')]"
          },
          "customNetworkInterfaceName": {
            "value": "[tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'customNetworkInterfaceName')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "languageVersion": "2.0",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.25.53.49325",
              "templateHash": "4120048060064073955"
            },
            "name": "Private Endpoints",
            "description": "This module deploys a Private Endpoint.",
            "owner": "Azure/module-maintainers"
          },
          "definitions": {
            "roleAssignmentType": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "roleDefinitionIdOrName": {
                    "type": "string",
                    "metadata": {
                      "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                    }
                  },
                  "principalId": {
                    "type": "string",
                    "metadata": {
                      "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                    }
                  },
                  "principalType": {
                    "type": "string",
                    "allowedValues": [
                      "Device",
                      "ForeignGroup",
                      "Group",
                      "ServicePrincipal",
                      "User"
                    ],
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. The principal type of the assigned principal ID."
                    }
                  },
                  "description": {
                    "type": "string",
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. The description of the role assignment."
                    }
                  },
                  "condition": {
                    "type": "string",
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                    }
                  },
                  "conditionVersion": {
                    "type": "string",
                    "allowedValues": [
                      "2.0"
                    ],
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. Version of the condition."
                    }
                  },
                  "delegatedManagedIdentityResourceId": {
                    "type": "string",
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. The Resource Id of the delegated managed identity resource."
                    }
                  }
                }
              },
              "nullable": true
            },
            "lockType": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Specify the name of lock."
                  }
                },
                "kind": {
                  "type": "string",
                  "allowedValues": [
                    "CanNotDelete",
                    "None",
                    "ReadOnly"
                  ],
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Specify the type of lock."
                  }
                }
              },
              "nullable": true
            },
            "ipConfigurationsType": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "metadata": {
                      "description": "Required. The name of the resource that is unique within a resource group."
                    }
                  },
                  "properties": {
                    "type": "object",
                    "properties": {
                      "groupId": {
                        "type": "string",
                        "metadata": {
                          "description": "Required. The ID of a group obtained from the remote resource that this private endpoint should connect to."
                        }
                      },
                      "memberName": {
                        "type": "string",
                        "metadata": {
                          "description": "Required. The member name of a group obtained from the remote resource that this private endpoint should connect to."
                        }
                      },
                      "privateIPAddress": {
                        "type": "string",
                        "metadata": {
                          "description": "Required. A private IP address obtained from the private endpoint's subnet."
                        }
                      }
                    },
                    "metadata": {
                      "description": "Required. Properties of private endpoint IP configurations."
                    }
                  }
                }
              },
              "nullable": true
            },
            "manualPrivateLinkServiceConnectionsType": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "metadata": {
                      "description": "Required. The name of the private link service connection."
                    }
                  },
                  "properties": {
                    "type": "object",
                    "properties": {
                      "groupIds": {
                        "type": "array",
                        "metadata": {
                          "description": "Required. The ID of a group obtained from the remote resource that this private endpoint should connect to."
                        }
                      },
                      "privateLinkServiceId": {
                        "type": "string",
                        "metadata": {
                          "description": "Required. The resource id of private link service."
                        }
                      },
                      "requestMessage": {
                        "type": "string",
                        "metadata": {
                          "description": "Optional. A message passed to the owner of the remote resource with this connection request. Restricted to 140 chars."
                        }
                      }
                    },
                    "metadata": {
                      "description": "Required. Properties of private link service connection."
                    }
                  }
                }
              },
              "nullable": true
            },
            "privateLinkServiceConnectionsType": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "metadata": {
                      "description": "Required. The name of the private link service connection."
                    }
                  },
                  "properties": {
                    "type": "object",
                    "properties": {
                      "groupIds": {
                        "type": "array",
                        "metadata": {
                          "description": "Required. The ID of a group obtained from the remote resource that this private endpoint should connect to."
                        }
                      },
                      "privateLinkServiceId": {
                        "type": "string",
                        "metadata": {
                          "description": "Required. The resource id of private link service."
                        }
                      },
                      "requestMessage": {
                        "type": "string",
                        "nullable": true,
                        "metadata": {
                          "description": "Optional. A message passed to the owner of the remote resource with this connection request. Restricted to 140 chars."
                        }
                      }
                    },
                    "metadata": {
                      "description": "Required. Properties of private link service connection."
                    }
                  }
                }
              },
              "nullable": true
            },
            "customDnsConfigType": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "fqdn": {
                    "type": "string",
                    "metadata": {
                      "description": "Required. Fqdn that resolves to private endpoint IP address."
                    }
                  },
                  "ipAddresses": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "metadata": {
                      "description": "Required. A list of private IP addresses of the private endpoint."
                    }
                  }
                }
              },
              "nullable": true
            }
          },
          "parameters": {
            "name": {
              "type": "string",
              "metadata": {
                "description": "Required. Name of the private endpoint resource to create."
              }
            },
            "subnetResourceId": {
              "type": "string",
              "metadata": {
                "description": "Required. Resource ID of the subnet where the endpoint needs to be created."
              }
            },
            "applicationSecurityGroupResourceIds": {
              "type": "array",
              "nullable": true,
              "metadata": {
                "description": "Optional. Application security groups in which the private endpoint IP configuration is included."
              }
            },
            "customNetworkInterfaceName": {
              "type": "string",
              "nullable": true,
              "metadata": {
                "description": "Optional. The custom name of the network interface attached to the private endpoint."
              }
            },
            "ipConfigurations": {
              "$ref": "#/definitions/ipConfigurationsType",
              "metadata": {
                "description": "Optional. A list of IP configurations of the private endpoint. This will be used to map to the First Party Service endpoints."
              }
            },
            "privateDnsZoneGroupName": {
              "type": "string",
              "nullable": true,
              "metadata": {
                "description": "Optional. The name of the private DNS zone group to create if `privateDnsZoneResourceIds` were provided."
              }
            },
            "privateDnsZoneResourceIds": {
              "type": "array",
              "nullable": true,
              "metadata": {
                "description": "Optional. The private DNS zone groups to associate the private endpoint. A DNS zone group can support up to 5 DNS zones."
              }
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]",
              "metadata": {
                "description": "Optional. Location for all Resources."
              }
            },
            "lock": {
              "$ref": "#/definitions/lockType",
              "metadata": {
                "description": "Optional. The lock settings of the service."
              }
            },
            "roleAssignments": {
              "$ref": "#/definitions/roleAssignmentType",
              "metadata": {
                "description": "Optional. Array of role assignments to create."
              }
            },
            "tags": {
              "type": "object",
              "nullable": true,
              "metadata": {
                "description": "Optional. Tags to be applied on all resources/resource groups in this deployment."
              }
            },
            "customDnsConfigs": {
              "$ref": "#/definitions/customDnsConfigType",
              "metadata": {
                "description": "Optional. Custom DNS configurations."
              }
            },
            "manualPrivateLinkServiceConnections": {
              "$ref": "#/definitions/manualPrivateLinkServiceConnectionsType",
              "metadata": {
                "description": "Optional. A grouping of information about the connection to the remote resource. Used when the network admin does not have access to approve connections to the remote resource."
              }
            },
            "privateLinkServiceConnections": {
              "$ref": "#/definitions/privateLinkServiceConnectionsType",
              "metadata": {
                "description": "Optional. A grouping of information about the connection to the remote resource."
              }
            },
            "enableTelemetry": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Optional. Enable/Disable usage telemetry for module."
              }
            }
          },
          "variables": {
            "builtInRoleNames": {
              "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
              "DNS Resolver Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '0f2ebee7-ffd4-4fc0-b3b7-664099fdad5d')]",
              "DNS Zone Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'befefa01-2a29-4197-83a8-272ff33ce314')]",
              "Domain Services Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'eeaeda52-9324-47f6-8069-5d5bade478b2')]",
              "Domain Services Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '361898ef-9ed1-48c2-849c-a832951106bb')]",
              "Network Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4d97b98b-1d4f-4787-a291-c67834d212e7')]",
              "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
              "Private DNS Zone Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b12aa53e-6015-4669-85d0-8515ebb3ae7f')]",
              "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
              "Role Based Access Control Administrator (Preview)": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]"
            }
          },
          "resources": {
            "avmTelemetry": {
              "condition": "[parameters('enableTelemetry')]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2023-07-01",
              "name": "[format('46d3xbcp.res.network-privateendpoint.{0}.{1}', replace('0.4.1', '.', '-'), substring(uniqueString(deployment().name, parameters('location')), 0, 4))]",
              "properties": {
                "mode": "Incremental",
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "resources": [],
                  "outputs": {
                    "telemetry": {
                      "type": "String",
                      "value": "For more information, see https://aka.ms/avm/TelemetryInfo"
                    }
                  }
                }
              }
            },
            "privateEndpoint": {
              "type": "Microsoft.Network/privateEndpoints",
              "apiVersion": "2023-04-01",
              "name": "[parameters('name')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "properties": {
                "copy": [
                  {
                    "name": "applicationSecurityGroups",
                    "count": "[length(coalesce(parameters('applicationSecurityGroupResourceIds'), createArray()))]",
                    "input": {
                      "id": "[coalesce(parameters('applicationSecurityGroupResourceIds'), createArray())[copyIndex('applicationSecurityGroups')]]"
                    }
                  }
                ],
                "customDnsConfigs": "[coalesce(parameters('customDnsConfigs'), createArray())]",
                "customNetworkInterfaceName": "[coalesce(parameters('customNetworkInterfaceName'), '')]",
                "ipConfigurations": "[coalesce(parameters('ipConfigurations'), createArray())]",
                "manualPrivateLinkServiceConnections": "[coalesce(parameters('manualPrivateLinkServiceConnections'), createArray())]",
                "privateLinkServiceConnections": "[coalesce(parameters('privateLinkServiceConnections'), createArray())]",
                "subnet": {
                  "id": "[parameters('subnetResourceId')]"
                }
              }
            },
            "privateEndpoint_lock": {
              "condition": "[and(not(empty(coalesce(parameters('lock'), createObject()))), not(equals(tryGet(parameters('lock'), 'kind'), 'None')))]",
              "type": "Microsoft.Authorization/locks",
              "apiVersion": "2020-05-01",
              "scope": "[format('Microsoft.Network/privateEndpoints/{0}', parameters('name'))]",
              "name": "[coalesce(tryGet(parameters('lock'), 'name'), format('lock-{0}', parameters('name')))]",
              "properties": {
                "level": "[coalesce(tryGet(parameters('lock'), 'kind'), '')]",
                "notes": "[if(equals(tryGet(parameters('lock'), 'kind'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot delete or modify the resource or child resources.')]"
              },
              "dependsOn": [
                "privateEndpoint"
              ]
            },
            "privateEndpoint_roleAssignments": {
              "copy": {
                "name": "privateEndpoint_roleAssignments",
                "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]"
              },
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.Network/privateEndpoints/{0}', parameters('name'))]",
              "name": "[guid(resourceId('Microsoft.Network/privateEndpoints', parameters('name')), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].principalId, coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName)]",
              "properties": {
                "roleDefinitionId": "[if(contains(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName), variables('builtInRoleNames')[coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName], if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName)))]",
                "principalId": "[coalesce(parameters('roleAssignments'), createArray())[copyIndex()].principalId]",
                "description": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'description')]",
                "principalType": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'principalType')]",
                "condition": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'condition')]",
                "conditionVersion": "[if(not(empty(tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                "delegatedManagedIdentityResourceId": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
              },
              "dependsOn": [
                "privateEndpoint"
              ]
            },
            "privateEndpoint_privateDnsZoneGroup": {
              "condition": "[not(empty(parameters('privateDnsZoneResourceIds')))]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('{0}-PrivateEndpoint-PrivateDnsZoneGroup', uniqueString(deployment().name))]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "name": {
                    "value": "[coalesce(parameters('privateDnsZoneGroupName'), 'default')]"
                  },
                  "privateDNSResourceIds": {
                    "value": "[coalesce(parameters('privateDnsZoneResourceIds'), createArray())]"
                  },
                  "privateEndpointName": {
                    "value": "[parameters('name')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.25.53.49325",
                      "templateHash": "11244630631275470040"
                    },
                    "name": "Private Endpoint Private DNS Zone Groups",
                    "description": "This module deploys a Private Endpoint Private DNS Zone Group.",
                    "owner": "Azure/module-maintainers"
                  },
                  "parameters": {
                    "privateEndpointName": {
                      "type": "string",
                      "metadata": {
                        "description": "Conditional. The name of the parent private endpoint. Required if the template is used in a standalone deployment."
                      }
                    },
                    "privateDNSResourceIds": {
                      "type": "array",
                      "minLength": 1,
                      "maxLength": 5,
                      "metadata": {
                        "description": "Required. Array of private DNS zone resource IDs. A DNS zone group can support up to 5 DNS zones."
                      }
                    },
                    "name": {
                      "type": "string",
                      "defaultValue": "default",
                      "metadata": {
                        "description": "Optional. The name of the private DNS zone group."
                      }
                    }
                  },
                  "variables": {
                    "copy": [
                      {
                        "name": "privateDnsZoneConfigs",
                        "count": "[length(parameters('privateDNSResourceIds'))]",
                        "input": {
                          "name": "[last(split(parameters('privateDNSResourceIds')[copyIndex('privateDnsZoneConfigs')], '/'))]",
                          "properties": {
                            "privateDnsZoneId": "[parameters('privateDNSResourceIds')[copyIndex('privateDnsZoneConfigs')]]"
                          }
                        }
                      }
                    ]
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
                      "apiVersion": "2023-04-01",
                      "name": "[format('{0}/{1}', parameters('privateEndpointName'), parameters('name'))]",
                      "properties": {
                        "privateDnsZoneConfigs": "[variables('privateDnsZoneConfigs')]"
                      }
                    }
                  ],
                  "outputs": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the private endpoint DNS zone group."
                      },
                      "value": "[parameters('name')]"
                    },
                    "resourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the private endpoint DNS zone group."
                      },
                      "value": "[resourceId('Microsoft.Network/privateEndpoints/privateDnsZoneGroups', parameters('privateEndpointName'), parameters('name'))]"
                    },
                    "resourceGroupName": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource group the private endpoint DNS zone group was deployed into."
                      },
                      "value": "[resourceGroup().name]"
                    }
                  }
                }
              },
              "dependsOn": [
                "privateEndpoint"
              ]
            }
          },
          "outputs": {
            "resourceGroupName": {
              "type": "string",
              "metadata": {
                "description": "The resource group the private endpoint was deployed into."
              },
              "value": "[resourceGroup().name]"
            },
            "resourceId": {
              "type": "string",
              "metadata": {
                "description": "The resource ID of the private endpoint."
              },
              "value": "[resourceId('Microsoft.Network/privateEndpoints', parameters('name'))]"
            },
            "name": {
              "type": "string",
              "metadata": {
                "description": "The name of the private endpoint."
              },
              "value": "[parameters('name')]"
            },
            "location": {
              "type": "string",
              "metadata": {
                "description": "The location the resource was deployed into."
              },
              "value": "[reference('privateEndpoint', '2023-04-01', 'full').location]"
            },
            "groupId": {
              "type": "string",
              "metadata": {
                "description": "The group Id for the private endpoint Group."
              },
              "value": "[if(not(empty(reference('privateEndpoint').manualPrivateLinkServiceConnections)), reference('privateEndpoint').manualPrivateLinkServiceConnections[0].properties.groupIds[0], reference('privateEndpoint').privateLinkServiceConnections[0].properties.groupIds[0])]"
            }
          }
        }
      },
      "dependsOn": [
        "digitalTwinsInstance"
      ]
    }
  },
  "outputs": {
    "resourceId": {
      "type": "string",
      "metadata": {
        "description": "The resource ID of the Digital Twins Instance."
      },
      "value": "[resourceId('Microsoft.DigitalTwins/digitalTwinsInstances', parameters('name'))]"
    },
    "resourceGroupName": {
      "type": "string",
      "metadata": {
        "description": "The name of the resource group the resource was created in."
      },
      "value": "[resourceGroup().name]"
    },
    "name": {
      "type": "string",
      "metadata": {
        "description": "The name of the Digital Twins Instance."
      },
      "value": "[parameters('name')]"
    },
    "hostname": {
      "type": "string",
      "metadata": {
        "description": "The hostname of the Digital Twins Instance."
      },
      "value": "[reference('digitalTwinsInstance').hostName]"
    },
    "location": {
      "type": "string",
      "metadata": {
        "description": "The location the resource was deployed into."
      },
      "value": "[reference('digitalTwinsInstance', '2023-01-31', 'full').location]"
    },
    "systemAssignedMIPrincipalId": {
      "type": "string",
      "metadata": {
        "description": "The principal ID of the system assigned identity."
      },
      "value": "[coalesce(tryGet(tryGet(reference('digitalTwinsInstance', '2023-01-31', 'full'), 'identity'), 'principalId'), '')]"
    }
  }
}