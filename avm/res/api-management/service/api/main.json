{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "languageVersion": "2.0",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "_generator": {
      "name": "bicep",
      "version": "0.31.34.60546",
      "templateHash": "79502668979653596"
    },
    "name": "API Management Service APIs",
    "description": "This module deploys an API Management Service API.",
    "owner": "Azure/module-maintainers"
  },
  "parameters": {
    "name": {
      "type": "string",
      "metadata": {
        "description": "Required. API revision identifier. Must be unique in the current API Management service instance. Non-current revision has ;rev=n as a suffix where n is the revision number."
      }
    },
    "policies": {
      "type": "array",
      "nullable": true,
      "metadata": {
        "description": "Optional. Array of Policies to apply to the Service API."
      }
    },
    "diagnostics": {
      "type": "array",
      "nullable": true,
      "metadata": {
        "description": "Optional. Array of diagnostics to apply to the Service API."
      }
    },
    "apiManagementServiceName": {
      "type": "string",
      "metadata": {
        "description": "Conditional. The name of the parent API Management service. Required if the template is used in a standalone deployment."
      }
    },
    "apiRevision": {
      "type": "string",
      "nullable": true,
      "metadata": {
        "description": "Optional. Describes the Revision of the API. If no value is provided, default revision 1 is created."
      }
    },
    "apiRevisionDescription": {
      "type": "string",
      "nullable": true,
      "metadata": {
        "description": "Optional. Description of the API Revision."
      }
    },
    "apiType": {
      "type": "string",
      "defaultValue": "http",
      "allowedValues": [
        "graphql",
        "http",
        "soap",
        "websocket"
      ],
      "metadata": {
        "description": "Optional. Type of API to create. * http creates a REST API * soap creates a SOAP pass-through API * websocket creates websocket API * graphql creates GraphQL API."
      }
    },
    "apiVersion": {
      "type": "string",
      "nullable": true,
      "metadata": {
        "description": "Optional. Indicates the Version identifier of the API if the API is versioned."
      }
    },
    "apiVersionSetId": {
      "type": "string",
      "nullable": true,
      "metadata": {
        "description": "Optional. Indicates the Version identifier of the API version set."
      }
    },
    "apiVersionDescription": {
      "type": "string",
      "nullable": true,
      "metadata": {
        "description": "Optional. Description of the API Version."
      }
    },
    "authenticationSettings": {
      "type": "object",
      "nullable": true,
      "metadata": {
        "description": "Optional. Collection of authentication settings included into this API."
      }
    },
    "apiDescription": {
      "type": "string",
      "nullable": true,
      "metadata": {
        "description": "Optional. Description of the API. May include HTML formatting tags."
      }
    },
    "displayName": {
      "type": "string",
      "maxLength": 300,
      "metadata": {
        "description": "Required. API name. Must be 1 to 300 characters long."
      }
    },
    "format": {
      "type": "string",
      "defaultValue": "openapi",
      "allowedValues": [
        "wadl-xml",
        "wadl-link-json",
        "swagger-json",
        "swagger-link-json",
        "wsdl",
        "wsdl-link",
        "openapi",
        "openapi+json",
        "openapi-link",
        "openapi+json-link"
      ],
      "metadata": {
        "description": "Optional. Format of the Content in which the API is getting imported."
      }
    },
    "isCurrent": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Optional. Indicates if API revision is current API revision."
      }
    },
    "loggerName": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Conditional. The name of the API management service logger. Required if using api/diagnostics."
      }
    },
    "path": {
      "type": "string",
      "metadata": {
        "description": "Required. Relative URL uniquely identifying this API and all of its resource paths within the API Management service instance. It is appended to the API endpoint base URL specified during the service instance creation to form a public URL for this API."
      }
    },
    "protocols": {
      "type": "array",
      "defaultValue": [
        "https"
      ],
      "metadata": {
        "description": "Optional. Describes on which protocols the operations in this API can be invoked. - HTTP or HTTPS."
      }
    },
    "serviceUrl": {
      "type": "string",
      "nullable": true,
      "maxLength": 2000,
      "metadata": {
        "description": "Optional. Absolute URL of the backend service implementing this API. Cannot be more than 2000 characters long."
      }
    },
    "sourceApiId": {
      "type": "string",
      "nullable": true,
      "metadata": {
        "description": "Optional. API identifier of the source API."
      }
    },
    "subscriptionKeyParameterNames": {
      "type": "object",
      "nullable": true,
      "metadata": {
        "description": "Optional. Protocols over which API is made available."
      }
    },
    "subscriptionRequired": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Optional. Specifies whether an API or Product subscription is required for accessing the API."
      }
    },
    "type": {
      "type": "string",
      "defaultValue": "http",
      "allowedValues": [
        "graphql",
        "http",
        "soap",
        "websocket"
      ],
      "metadata": {
        "description": "Optional. Type of API."
      }
    },
    "value": {
      "type": "string",
      "nullable": true,
      "metadata": {
        "description": "Optional. Content value when Importing an API."
      }
    },
    "wsdlSelector": {
      "type": "object",
      "nullable": true,
      "metadata": {
        "description": "Optional. Criteria to limit import of WSDL to a subset of the document."
      }
    }
  },
  "resources": {
    "service": {
      "existing": true,
      "type": "Microsoft.ApiManagement/service",
      "apiVersion": "2023-05-01-preview",
      "name": "[parameters('apiManagementServiceName')]"
    },
    "api": {
      "type": "Microsoft.ApiManagement/service/apis",
      "apiVersion": "2022-08-01",
      "name": "[format('{0}/{1}', parameters('apiManagementServiceName'), parameters('name'))]",
      "properties": {
        "apiRevision": "[parameters('apiRevision')]",
        "apiRevisionDescription": "[parameters('apiRevisionDescription')]",
        "apiType": "[parameters('apiType')]",
        "apiVersion": "[parameters('apiVersion')]",
        "apiVersionDescription": "[parameters('apiVersionDescription')]",
        "apiVersionSetId": "[parameters('apiVersionSetId')]",
        "authenticationSettings": "[coalesce(parameters('authenticationSettings'), createObject())]",
        "description": "[coalesce(parameters('apiDescription'), '')]",
        "displayName": "[parameters('displayName')]",
        "format": "[if(not(empty(parameters('value'))), parameters('format'), null())]",
        "isCurrent": "[parameters('isCurrent')]",
        "path": "[parameters('path')]",
        "protocols": "[parameters('protocols')]",
        "serviceUrl": "[parameters('serviceUrl')]",
        "sourceApiId": "[parameters('sourceApiId')]",
        "subscriptionKeyParameterNames": "[parameters('subscriptionKeyParameterNames')]",
        "subscriptionRequired": "[parameters('subscriptionRequired')]",
        "type": "[parameters('type')]",
        "value": "[parameters('value')]",
        "wsdlSelector": "[coalesce(parameters('wsdlSelector'), createObject())]"
      }
    },
    "policy": {
      "copy": {
        "name": "policy",
        "count": "[length(coalesce(parameters('policies'), createArray()))]"
      },
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('{0}-Policy-{1}', deployment().name, copyIndex())]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "apiManagementServiceName": {
            "value": "[parameters('apiManagementServiceName')]"
          },
          "apiName": {
            "value": "[parameters('name')]"
          },
          "format": {
            "value": "[coalesce(tryGet(coalesce(parameters('policies'), createArray())[copyIndex()], 'format'), 'xml')]"
          },
          "value": {
            "value": "[coalesce(parameters('policies'), createArray())[copyIndex()].value]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.31.34.60546",
              "templateHash": "7084313641171504315"
            },
            "name": "API Management Service APIs Policies",
            "description": "This module deploys an API Management Service API Policy.",
            "owner": "Azure/module-maintainers"
          },
          "parameters": {
            "apiManagementServiceName": {
              "type": "string",
              "metadata": {
                "description": "Conditional. The name of the parent API Management service. Required if the template is used in a standalone deployment."
              }
            },
            "apiName": {
              "type": "string",
              "metadata": {
                "description": "Conditional. The name of the parent API. Required if the template is used in a standalone deployment."
              }
            },
            "name": {
              "type": "string",
              "defaultValue": "policy",
              "metadata": {
                "description": "Optional. The name of the policy."
              }
            },
            "format": {
              "type": "string",
              "defaultValue": "xml",
              "allowedValues": [
                "rawxml",
                "rawxml-link",
                "xml",
                "xml-link"
              ],
              "metadata": {
                "description": "Optional. Format of the policyContent."
              }
            },
            "value": {
              "type": "string",
              "metadata": {
                "description": "Required. Contents of the Policy as defined by the format."
              }
            }
          },
          "resources": [
            {
              "type": "Microsoft.ApiManagement/service/apis/policies",
              "apiVersion": "2022-08-01",
              "name": "[format('{0}/{1}/{2}', parameters('apiManagementServiceName'), parameters('apiName'), parameters('name'))]",
              "properties": {
                "format": "[parameters('format')]",
                "value": "[parameters('value')]"
              }
            }
          ],
          "outputs": {
            "resourceId": {
              "type": "string",
              "metadata": {
                "description": "The resource ID of the API policy."
              },
              "value": "[resourceId('Microsoft.ApiManagement/service/apis/policies', parameters('apiManagementServiceName'), parameters('apiName'), parameters('name'))]"
            },
            "name": {
              "type": "string",
              "metadata": {
                "description": "The name of the API policy."
              },
              "value": "[parameters('name')]"
            },
            "resourceGroupName": {
              "type": "string",
              "metadata": {
                "description": "The resource group the API policy was deployed into."
              },
              "value": "[resourceGroup().name]"
            }
          }
        }
      },
      "dependsOn": [
        "api"
      ]
    },
    "diagnostic": {
      "copy": {
        "name": "diagnostic",
        "count": "[length(coalesce(parameters('diagnostics'), createArray()))]"
      },
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('{0}-diagnostics-{1}', deployment().name, copyIndex())]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "name": {
            "value": "[tryGet(coalesce(parameters('diagnostics'), createArray())[copyIndex()], 'name')]"
          },
          "apiManagementServiceName": {
            "value": "[parameters('apiManagementServiceName')]"
          },
          "apiName": {
            "value": "[parameters('name')]"
          },
          "loggerName": {
            "value": "[parameters('loggerName')]"
          },
          "alwaysLog": {
            "value": "[tryGet(coalesce(parameters('diagnostics'), createArray())[copyIndex()], 'alwaysLog')]"
          },
          "backend": {
            "value": "[tryGet(coalesce(parameters('diagnostics'), createArray())[copyIndex()], 'backend')]"
          },
          "frontend": {
            "value": "[tryGet(coalesce(parameters('diagnostics'), createArray())[copyIndex()], 'frontend')]"
          },
          "httpCorrelationProtocol": {
            "value": "[tryGet(coalesce(parameters('diagnostics'), createArray())[copyIndex()], 'httpCorrelationProtocol')]"
          },
          "logClientIp": {
            "value": "[tryGet(coalesce(parameters('diagnostics'), createArray())[copyIndex()], 'logClientIp')]"
          },
          "metrics": {
            "value": "[tryGet(coalesce(parameters('diagnostics'), createArray())[copyIndex()], 'metrics')]"
          },
          "operationNameFormat": {
            "value": "[tryGet(coalesce(parameters('diagnostics'), createArray())[copyIndex()], 'operationNameFormat')]"
          },
          "samplingPercentage": {
            "value": "[tryGet(coalesce(parameters('diagnostics'), createArray())[copyIndex()], 'samplingPercentage')]"
          },
          "verbosity": {
            "value": "[tryGet(coalesce(parameters('diagnostics'), createArray())[copyIndex()], 'verbosity')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.31.34.60546",
              "templateHash": "5353729184860596208"
            },
            "name": "API Management Service APIs Diagnostics.",
            "description": "This module deploys an API Management Service API Diagnostics.",
            "owner": "Azure/module-maintainers"
          },
          "parameters": {
            "apiManagementServiceName": {
              "type": "string",
              "metadata": {
                "description": "Required. The name of the parent API Management service."
              }
            },
            "apiName": {
              "type": "string",
              "metadata": {
                "description": "Required. The name of the parent API."
              }
            },
            "loggerName": {
              "type": "string",
              "metadata": {
                "description": "Required. The name of the logger."
              }
            },
            "name": {
              "type": "string",
              "defaultValue": "local",
              "allowedValues": [
                "azuremonitor",
                "applicationinsights",
                "local"
              ],
              "metadata": {
                "description": "Optional. Type of diagnostic resource."
              }
            },
            "alwaysLog": {
              "type": "string",
              "defaultValue": "allErrors",
              "metadata": {
                "description": "Optional. Specifies for what type of messages sampling settings should not apply."
              }
            },
            "backend": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "Optional. Diagnostic settings for incoming/outgoing HTTP messages to the Backend."
              }
            },
            "frontend": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "Optional. Diagnostic settings for incoming/outgoing HTTP messages to the Gateway."
              }
            },
            "httpCorrelationProtocol": {
              "type": "string",
              "defaultValue": "Legacy",
              "allowedValues": [
                "Legacy",
                "None",
                "W3C"
              ],
              "metadata": {
                "description": "Conditional. Sets correlation protocol to use for Application Insights diagnostics. Required if using Application Insights."
              }
            },
            "logClientIp": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Optional. Log the ClientIP."
              }
            },
            "metrics": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Conditional. Emit custom metrics via emit-metric policy. Required if using Application Insights."
              }
            },
            "operationNameFormat": {
              "type": "string",
              "defaultValue": "Name",
              "allowedValues": [
                "Name",
                "URI"
              ],
              "metadata": {
                "description": "Conditional. The format of the Operation Name for Application Insights telemetries. Required if using Application Insights."
              }
            },
            "samplingPercentage": {
              "type": "int",
              "defaultValue": 100,
              "metadata": {
                "description": "Optional. Rate of sampling for fixed-rate sampling. Specifies the percentage of requests that are logged. 0% sampling means zero requests logged, while 100% sampling means all requests logged."
              }
            },
            "verbosity": {
              "type": "string",
              "defaultValue": "error",
              "allowedValues": [
                "error",
                "information",
                "verbose"
              ],
              "metadata": {
                "description": "Optional. The verbosity level applied to traces emitted by trace policies."
              }
            }
          },
          "resources": [
            {
              "type": "Microsoft.ApiManagement/service/apis/diagnostics",
              "apiVersion": "2022-08-01",
              "name": "[format('{0}/{1}/{2}', parameters('apiManagementServiceName'), parameters('apiName'), parameters('name'))]",
              "properties": {
                "alwaysLog": "[parameters('alwaysLog')]",
                "backend": "[parameters('backend')]",
                "frontend": "[parameters('frontend')]",
                "httpCorrelationProtocol": "[parameters('httpCorrelationProtocol')]",
                "logClientIp": "[parameters('logClientIp')]",
                "loggerId": "[resourceId('Microsoft.ApiManagement/service/loggers', parameters('apiManagementServiceName'), parameters('loggerName'))]",
                "metrics": "[parameters('metrics')]",
                "operationNameFormat": "[parameters('operationNameFormat')]",
                "sampling": {
                  "percentage": "[parameters('samplingPercentage')]",
                  "samplingType": "fixed"
                },
                "verbosity": "[parameters('verbosity')]"
              }
            }
          ],
          "outputs": {
            "resourceId": {
              "type": "string",
              "metadata": {
                "description": "The resource ID of the API diagnostic."
              },
              "value": "[resourceId('Microsoft.ApiManagement/service/apis/diagnostics', parameters('apiManagementServiceName'), parameters('apiName'), parameters('name'))]"
            },
            "name": {
              "type": "string",
              "metadata": {
                "description": "The name of the API diagnostic."
              },
              "value": "[parameters('name')]"
            },
            "resourceGroupName": {
              "type": "string",
              "metadata": {
                "description": "The resource group the API diagnostic was deployed into."
              },
              "value": "[resourceGroup().name]"
            }
          }
        }
      },
      "dependsOn": [
        "api"
      ]
    }
  },
  "outputs": {
    "name": {
      "type": "string",
      "metadata": {
        "description": "The name of the API management service API."
      },
      "value": "[parameters('name')]"
    },
    "resourceId": {
      "type": "string",
      "metadata": {
        "description": "The resource ID of the API management service API."
      },
      "value": "[resourceId('Microsoft.ApiManagement/service/apis', parameters('apiManagementServiceName'), parameters('name'))]"
    },
    "resourceGroupName": {
      "type": "string",
      "metadata": {
        "description": "The resource group the API management service API was deployed to."
      },
      "value": "[resourceGroup().name]"
    }
  }
}