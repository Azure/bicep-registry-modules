{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "languageVersion": "2.0",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "_generator": {
      "name": "bicep",
      "version": "0.29.47.4906",
      "templateHash": "18098024822158530053"
    },
    "name": "Azure NetApp Files Capacity Pool Volumes",
    "description": "This module deploys an Azure NetApp Files Capacity Pool Volume.",
    "owner": "Azure/module-maintainers"
  },
  "definitions": {
    "roleAssignmentType": {
      "type": "array",
      "items": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true,
            "metadata": {
              "description": "Optional. The name (as GUID) of the role assignment. If not provided, a GUID will be generated."
            }
          },
          "roleDefinitionIdOrName": {
            "type": "string",
            "metadata": {
              "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
            }
          },
          "principalId": {
            "type": "string",
            "metadata": {
              "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
            }
          },
          "principalType": {
            "type": "string",
            "allowedValues": [
              "Device",
              "ForeignGroup",
              "Group",
              "ServicePrincipal",
              "User"
            ],
            "nullable": true,
            "metadata": {
              "description": "Optional. The principal type of the assigned principal ID."
            }
          },
          "description": {
            "type": "string",
            "nullable": true,
            "metadata": {
              "description": "Optional. The description of the role assignment."
            }
          },
          "condition": {
            "type": "string",
            "nullable": true,
            "metadata": {
              "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
            }
          },
          "conditionVersion": {
            "type": "string",
            "allowedValues": [
              "2.0"
            ],
            "nullable": true,
            "metadata": {
              "description": "Optional. Version of the condition."
            }
          },
          "delegatedManagedIdentityResourceId": {
            "type": "string",
            "nullable": true,
            "metadata": {
              "description": "Optional. The Resource Id of the delegated managed identity resource."
            }
          }
        }
      },
      "nullable": true
    }
  },
  "parameters": {
    "netAppAccountName": {
      "type": "string",
      "metadata": {
        "description": "Conditional. The name of the parent NetApp account. Required if the template is used in a standalone deployment."
      }
    },
    "capacityPoolName": {
      "type": "string",
      "metadata": {
        "description": "Conditional. The name of the parent capacity pool. Required if the template is used in a standalone deployment."
      }
    },
    "coolAccess": {
      "type": "bool",
      "metadata": {
        "description": "Optional. If enabled (true) the pool can contain cool Access enabled volumes."
      }
    },
    "coolnessPeriod": {
      "type": "int",
      "metadata": {
        "description": "Optional. Specifies the number of days after which data that is not accessed by clients will be tiered."
      }
    },
    "coolAccessRetrievalPolicy": {
      "type": "string",
      "defaultValue": "Default",
      "metadata": {
        "description": "Optional. determines the data retrieval behavior from the cool tier to standard storage based on the read pattern for cool access enabled volumes (Default/Never/Read)."
      }
    },
    "encryptionKeySource": {
      "type": "string",
      "metadata": {
        "description": "Optional. The source of the encryption key."
      }
    },
    "keyVaultPrivateEndpointResourceId": {
      "type": "string",
      "metadata": {
        "description": "Optional. The resource ID of the key vault private endpoint."
      }
    },
    "endpointType": {
      "type": "string",
      "metadata": {
        "description": "Optional. Indicates whether the local volume is the source or destination for the Volume Replication (src/dst)."
      }
    },
    "remoteVolumeRegion": {
      "type": "string",
      "metadata": {
        "description": "Optional. The remote region for the other end of the Volume Replication."
      }
    },
    "remoteVolumeResourceId": {
      "type": "string",
      "metadata": {
        "description": "Optional. The resource ID of the remote volume."
      }
    },
    "replicationSchedule": {
      "type": "string",
      "metadata": {
        "description": "Optional. The replication schedule for the volume."
      }
    },
    "backupEnabled": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Optional. Indicates whether the backup policy is enabled."
      }
    },
    "backupPolicyName": {
      "type": "string",
      "defaultValue": "backupPolicy",
      "metadata": {
        "description": "Optional. The name of the backup policy."
      }
    },
    "backupPolicyLocation": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "Optional. The location of the backup policy."
      }
    },
    "dailyBackupsToKeep": {
      "type": "int",
      "metadata": {
        "description": "Optional. The daily backups to keep."
      }
    },
    "monthlyBackupsToKeep": {
      "type": "int",
      "metadata": {
        "description": "Optional. The monthly backups to keep."
      }
    },
    "weeklyBackupsToKeep": {
      "type": "int",
      "metadata": {
        "description": "Optional. The weekly backups to keep."
      }
    },
    "backupVaultName": {
      "type": "string",
      "defaultValue": "vault",
      "metadata": {
        "description": "Optional. The name of the backup vault."
      }
    },
    "backupVaultLocation": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "Optional. The location of the backup vault."
      }
    },
    "backupName": {
      "type": "string",
      "metadata": {
        "description": "Optional. The name of the backup."
      }
    },
    "backupLabel": {
      "type": "string",
      "metadata": {
        "description": "Optional. The label of the backup."
      }
    },
    "useExistingSnapshot": {
      "type": "bool",
      "metadata": {
        "description": "Optional. Indicates whether to use an existing snapshot."
      }
    },
    "snapshotName": {
      "type": "string",
      "metadata": {
        "description": "Optional. The name of the snapshot."
      }
    },
    "snapshotPolicyId": {
      "type": "string",
      "metadata": {
        "description": "Optional. Snapshot Policy ResourceId."
      }
    },
    "snapshotPolicyName": {
      "type": "string",
      "metadata": {
        "description": "Optional. The name of the snapshot policy."
      }
    },
    "snapshotPolicyLocation": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "Optional. The location of the snapshot policy."
      }
    },
    "dailyHour": {
      "type": "int",
      "metadata": {
        "description": "Optional. The daily snapshot hour."
      }
    },
    "dailyMinute": {
      "type": "int",
      "metadata": {
        "description": "Optional. The daily snapshot minute."
      }
    },
    "dailySnapshotsToKeep": {
      "type": "int",
      "metadata": {
        "description": "Optional. Daily snapshot count to keep."
      }
    },
    "dailyUsedBytes": {
      "type": "int",
      "metadata": {
        "description": "Optional. Daily snapshot used bytes."
      }
    },
    "hourlyMinute": {
      "type": "int",
      "metadata": {
        "description": "Optional. The hourly snapshot minute."
      }
    },
    "hourlySnapshotsToKeep": {
      "type": "int",
      "metadata": {
        "description": "Optional. Hourly snapshot count to keep."
      }
    },
    "hourlyUsedBytes": {
      "type": "int",
      "metadata": {
        "description": "Optional. Hourly snapshot used bytes."
      }
    },
    "daysOfMonth": {
      "type": "string",
      "metadata": {
        "description": "Optional. The monthly snapshot day."
      }
    },
    "monthlyHour": {
      "type": "int",
      "metadata": {
        "description": "Optional. The monthly snapshot hour."
      }
    },
    "monthlyMinute": {
      "type": "int",
      "metadata": {
        "description": "Optional. The monthly snapshot minute."
      }
    },
    "monthlySnapshotsToKeep": {
      "type": "int",
      "metadata": {
        "description": "Optional. Monthly snapshot count to keep."
      }
    },
    "monthlyUsedBytes": {
      "type": "int",
      "metadata": {
        "description": "Optional. Monthly snapshot used bytes."
      }
    },
    "weeklyDay": {
      "type": "string",
      "metadata": {
        "description": "Optional. The weekly snapshot day."
      }
    },
    "weeklyHour": {
      "type": "int",
      "metadata": {
        "description": "Optional. The weekly snapshot hour."
      }
    },
    "weeklyMinute": {
      "type": "int",
      "metadata": {
        "description": "Optional. The weekly snapshot minute."
      }
    },
    "weeklySnapshotsToKeep": {
      "type": "int",
      "metadata": {
        "description": "Optional. Weekly snapshot count to keep."
      }
    },
    "weeklyUsedBytes": {
      "type": "int",
      "metadata": {
        "description": "Optional. Weekly snapshot used bytes."
      }
    },
    "snapEnabled": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Optional. Indicates whether the snapshot policy is enabled."
      }
    },
    "volumeResourceId": {
      "type": "string",
      "metadata": {
        "description": "Optional. The resource ID of the volume."
      }
    },
    "volumeType": {
      "type": "string",
      "metadata": {
        "description": "Optional. The type of the volume. DataProtection volumes are used for replication."
      }
    },
    "name": {
      "type": "string",
      "metadata": {
        "description": "Required. The name of the pool volume."
      }
    },
    "location": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "Optional. Location of the pool volume."
      }
    },
    "zones": {
      "type": "array",
      "defaultValue": [
        "1"
      ],
      "metadata": {
        "description": "Optional. Zone where the volume will be placed."
      }
    },
    "serviceLevel": {
      "type": "string",
      "defaultValue": "Standard",
      "allowedValues": [
        "Premium",
        "Standard",
        "StandardZRS",
        "Ultra"
      ],
      "metadata": {
        "description": "Optional. The pool service level. Must match the one of the parent capacity pool."
      }
    },
    "networkFeatures": {
      "type": "string",
      "defaultValue": "Standard",
      "allowedValues": [
        "Basic",
        "Basic_Standard",
        "Standard",
        "Standard_Basic"
      ],
      "metadata": {
        "description": "Optional. Network feature for the volume."
      }
    },
    "creationToken": {
      "type": "string",
      "defaultValue": "[parameters('name')]",
      "metadata": {
        "description": "Optional. A unique file path for the volume. This is the name of the volume export. A volume is mounted using the export path. File path must start with an alphabetical character and be unique within the subscription."
      }
    },
    "usageThreshold": {
      "type": "int",
      "metadata": {
        "description": "Required. Maximum storage quota allowed for a file system in bytes."
      }
    },
    "protocolTypes": {
      "type": "array",
      "defaultValue": [],
      "metadata": {
        "description": "Optional. Set of protocol types."
      }
    },
    "subnetResourceId": {
      "type": "string",
      "metadata": {
        "description": "Required. The Azure Resource URI for a delegated subnet. Must have the delegation Microsoft.NetApp/volumes."
      }
    },
    "exportPolicyRules": {
      "type": "array",
      "defaultValue": [],
      "metadata": {
        "description": "Optional. Export policy rules."
      }
    },
    "roleAssignments": {
      "$ref": "#/definitions/roleAssignmentType",
      "metadata": {
        "description": "Optional. Array of role assignments to create."
      }
    }
  },
  "variables": {
    "copy": [
      {
        "name": "formattedRoleAssignments",
        "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]",
        "input": "[union(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')], createObject('roleDefinitionId', coalesce(tryGet(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName), if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName)))))]"
      }
    ],
    "builtInRoleNames": {
      "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
      "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
      "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
      "Role Based Access Control Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]",
      "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]"
    }
  },
  "resources": {
    "netAppAccount::capacityPool": {
      "existing": true,
      "type": "Microsoft.NetApp/netAppAccounts/capacityPools",
      "apiVersion": "2024-03-01",
      "name": "[format('{0}/{1}', parameters('netAppAccountName'), parameters('capacityPoolName'))]",
      "dependsOn": [
        "netAppAccount"
      ]
    },
    "netAppAccount": {
      "existing": true,
      "type": "Microsoft.NetApp/netAppAccounts",
      "apiVersion": "2024-03-01",
      "name": "[parameters('netAppAccountName')]"
    },
    "volume": {
      "type": "Microsoft.NetApp/netAppAccounts/capacityPools/volumes",
      "apiVersion": "2024-03-01",
      "name": "[format('{0}/{1}/{2}', parameters('netAppAccountName'), parameters('capacityPoolName'), parameters('name'))]",
      "location": "[parameters('location')]",
      "properties": "[shallowMerge(createArray(createObject('coolAccess', parameters('coolAccess'), 'coolAccessRetrievalPolicy', parameters('coolAccessRetrievalPolicy'), 'coolnessPeriod', parameters('coolnessPeriod'), 'encryptionKeySource', parameters('encryptionKeySource')), if(not(equals(parameters('encryptionKeySource'), 'Microsoft.NetApp')), createObject('keyVaultPrivateEndpointResourceId', parameters('keyVaultPrivateEndpointResourceId')), createObject()), if(not(equals(parameters('volumeType'), '')), createObject('volumeType', parameters('volumeType'), 'dataProtection', createObject('replication', createObject('endpointType', parameters('endpointType'), 'remoteVolumeRegion', parameters('remoteVolumeRegion'), 'remoteVolumeResourceId', parameters('remoteVolumeResourceId'), 'replicationSchedule', parameters('replicationSchedule')), 'snapshot', createObject('snapshotPolicyId', parameters('snapshotPolicyId')))), createObject()), createObject('networkFeatures', parameters('networkFeatures'), 'serviceLevel', parameters('serviceLevel'), 'creationToken', parameters('creationToken'), 'usageThreshold', parameters('usageThreshold'), 'protocolTypes', parameters('protocolTypes'), 'subnetId', parameters('subnetResourceId'), 'exportPolicy', if(not(empty(parameters('exportPolicyRules'))), createObject('rules', parameters('exportPolicyRules')), null()))))]",
      "zones": "[parameters('zones')]",
      "dependsOn": [
        "netAppAccount::capacityPool"
      ]
    },
    "snapshotPolicies": {
      "condition": "[parameters('snapEnabled')]",
      "type": "Microsoft.NetApp/netAppAccounts/snapshotPolicies",
      "apiVersion": "2024-03-01",
      "name": "[format('{0}/{1}', parameters('netAppAccountName'), parameters('snapshotPolicyName'))]",
      "location": "[parameters('snapshotPolicyLocation')]",
      "properties": {
        "enabled": "[parameters('snapEnabled')]",
        "dailySchedule": {
          "hour": "[parameters('dailyHour')]",
          "minute": "[parameters('dailyMinute')]",
          "snapshotsToKeep": "[parameters('dailySnapshotsToKeep')]",
          "usedBytes": "[parameters('dailyUsedBytes')]"
        },
        "hourlySchedule": {
          "minute": "[parameters('hourlyMinute')]",
          "snapshotsToKeep": "[parameters('hourlySnapshotsToKeep')]",
          "usedBytes": "[parameters('hourlyUsedBytes')]"
        },
        "monthlySchedule": {
          "daysOfMonth": "[parameters('daysOfMonth')]",
          "hour": "[parameters('monthlyHour')]",
          "minute": "[parameters('monthlyMinute')]",
          "snapshotsToKeep": "[parameters('monthlySnapshotsToKeep')]",
          "usedBytes": "[parameters('monthlyUsedBytes')]"
        },
        "weeklySchedule": {
          "day": "[parameters('weeklyDay')]",
          "hour": "[parameters('weeklyHour')]",
          "minute": "[parameters('weeklyMinute')]",
          "snapshotsToKeep": "[parameters('weeklySnapshotsToKeep')]",
          "usedBytes": "[parameters('weeklyUsedBytes')]"
        }
      },
      "dependsOn": [
        "netAppAccount"
      ]
    },
    "backupPolicies": {
      "condition": "[parameters('backupEnabled')]",
      "type": "Microsoft.NetApp/netAppAccounts/backupPolicies",
      "apiVersion": "2024-03-01",
      "name": "[format('{0}/{1}', parameters('netAppAccountName'), parameters('backupPolicyName'))]",
      "location": "[parameters('backupPolicyLocation')]",
      "properties": {
        "dailyBackupsToKeep": "[parameters('dailyBackupsToKeep')]",
        "enabled": "[parameters('backupEnabled')]",
        "monthlyBackupsToKeep": "[parameters('monthlyBackupsToKeep')]",
        "weeklyBackupsToKeep": "[parameters('weeklyBackupsToKeep')]"
      },
      "dependsOn": [
        "netAppAccount"
      ]
    },
    "backupVaults": {
      "condition": "[parameters('backupEnabled')]",
      "type": "Microsoft.NetApp/netAppAccounts/backupVaults",
      "apiVersion": "2024-03-01",
      "name": "[format('{0}/{1}', parameters('netAppAccountName'), parameters('backupVaultName'))]",
      "location": "[parameters('backupVaultLocation')]",
      "properties": {},
      "dependsOn": [
        "netAppAccount"
      ]
    },
    "backups": {
      "condition": "[parameters('backupEnabled')]",
      "type": "Microsoft.NetApp/netAppAccounts/backupVaults/backups",
      "apiVersion": "2024-03-01",
      "name": "[format('{0}/{1}/{2}', parameters('netAppAccountName'), parameters('backupVaultName'), parameters('backupName'))]",
      "properties": "[if(parameters('backupEnabled'), createObject('label', parameters('backupLabel'), 'snapshotName', parameters('snapshotName'), 'useExistingSnapshot', parameters('useExistingSnapshot'), 'volumeResourceId', parameters('volumeResourceId')), createObject())]",
      "dependsOn": [
        "backupVaults"
      ]
    },
    "volume_roleAssignments": {
      "copy": {
        "name": "volume_roleAssignments",
        "count": "[length(coalesce(variables('formattedRoleAssignments'), createArray()))]"
      },
      "type": "Microsoft.Authorization/roleAssignments",
      "apiVersion": "2022-04-01",
      "scope": "[format('Microsoft.NetApp/netAppAccounts/{0}/capacityPools/{1}/volumes/{2}', parameters('netAppAccountName'), parameters('capacityPoolName'), parameters('name'))]",
      "name": "[coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'name'), guid(resourceId('Microsoft.NetApp/netAppAccounts/capacityPools/volumes', parameters('netAppAccountName'), parameters('capacityPoolName'), parameters('name')), coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId, coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId))]",
      "properties": {
        "roleDefinitionId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId]",
        "principalId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId]",
        "description": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'description')]",
        "principalType": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'principalType')]",
        "condition": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition')]",
        "conditionVersion": "[if(not(empty(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
        "delegatedManagedIdentityResourceId": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
      },
      "dependsOn": [
        "volume"
      ]
    }
  },
  "outputs": {
    "name": {
      "type": "string",
      "metadata": {
        "description": "The name of the Volume."
      },
      "value": "[parameters('name')]"
    },
    "resourceId": {
      "type": "string",
      "metadata": {
        "description": "The Resource ID of the Volume."
      },
      "value": "[resourceId('Microsoft.NetApp/netAppAccounts/capacityPools/volumes', parameters('netAppAccountName'), parameters('capacityPoolName'), parameters('name'))]"
    },
    "resourceGroupName": {
      "type": "string",
      "metadata": {
        "description": "The name of the Resource Group the Volume was created in."
      },
      "value": "[resourceGroup().name]"
    },
    "location": {
      "type": "string",
      "metadata": {
        "description": "The location the resource was deployed into."
      },
      "value": "[reference('volume', '2024-03-01', 'full').location]"
    }
  }
}