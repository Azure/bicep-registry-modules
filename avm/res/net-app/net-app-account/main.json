{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "languageVersion": "2.0",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "_generator": {
      "name": "bicep",
      "version": "0.33.13.18514",
      "templateHash": "6509519164461633683"
    },
    "name": "Azure NetApp Files",
    "description": "This module deploys an Azure NetApp File."
  },
  "definitions": {
    "backupVaultType": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "Optional. The name of the backup vault."
          }
        },
        "backups": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/backupType"
          },
          "nullable": true,
          "metadata": {
            "description": "Optional. The list of backups to create."
          }
        },
        "location": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "Optional. Location of the backup vault."
          }
        }
      },
      "metadata": {
        "__bicep_export!": true,
        "description": "The type for a backup vault."
      }
    },
    "capacityPoolType": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "metadata": {
            "description": "Required. The name of the capacity pool."
          }
        },
        "location": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "Optional. Location of the pool volume."
          }
        },
        "tags": {
          "type": "object",
          "nullable": true,
          "metadata": {
            "description": "Optional. Tags for the capcity pool."
          }
        },
        "serviceLevel": {
          "type": "string",
          "allowedValues": [
            "Premium",
            "Standard",
            "StandardZRS",
            "Ultra"
          ],
          "nullable": true,
          "metadata": {
            "description": "Optional. The pool service level."
          }
        },
        "size": {
          "type": "int",
          "metadata": {
            "description": "Required. Provisioned size of the pool (in bytes). Allowed values are in 4TiB chunks (value must be multiply of 4398046511104)."
          }
        },
        "qosType": {
          "type": "string",
          "allowedValues": [
            "Auto",
            "Manual"
          ],
          "nullable": true,
          "metadata": {
            "description": "Optional. The qos type of the pool."
          }
        },
        "volumes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/volumeType"
          },
          "nullable": true,
          "metadata": {
            "description": "Optional. List of volumes to create in the capacity pool."
          }
        },
        "coolAccess": {
          "type": "bool",
          "nullable": true,
          "metadata": {
            "description": "Optional. If enabled (true) the pool can contain cool Access enabled volumes."
          }
        },
        "roleAssignments": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/roleAssignmentType"
          },
          "nullable": true,
          "metadata": {
            "description": "Optional. Array of role assignments to create."
          }
        },
        "encryptionType": {
          "type": "string",
          "allowedValues": [
            "Double",
            "Single"
          ],
          "nullable": true,
          "metadata": {
            "description": "Optional. Encryption type of the capacity pool, set encryption type for data at rest for this pool and all volumes in it. This value can only be set when creating new pool."
          }
        }
      },
      "metadata": {
        "__bicep_export!": true,
        "description": "The type for a capacity pool."
      }
    },
    "snapshotPolicyType": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "metadata": {
            "description": "Required. The name of the snapshot policy."
          }
        },
        "location": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "Optional. Location of the snapshot policy."
          }
        },
        "dailySchedule": {
          "$ref": "#/definitions/dailyScheduleType",
          "nullable": true,
          "metadata": {
            "description": "Optional. Daily schedule for the snapshot policy."
          }
        },
        "hourlySchedule": {
          "$ref": "#/definitions/hourlyScheduleType",
          "nullable": true,
          "metadata": {
            "description": "Optional. Hourly schedule for the snapshot policy."
          }
        },
        "monthlySchedule": {
          "$ref": "#/definitions/monthlyScheduleType",
          "nullable": true,
          "metadata": {
            "description": "Optional. Monthly schedule for the snapshot policy."
          }
        },
        "weeklySchedule": {
          "$ref": "#/definitions/weeklyScheduleType",
          "nullable": true,
          "metadata": {
            "description": "Optional. Weekly schedule for the snapshot policy."
          }
        }
      },
      "metadata": {
        "__bicep_export!": true,
        "description": "The type for a snapshot policy."
      }
    },
    "backupPolicyType": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "Optional. The name of the backup policy."
          }
        },
        "location": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "Optional. The location of the backup policy."
          }
        },
        "dailyBackupsToKeep": {
          "type": "int",
          "nullable": true,
          "minValue": 2,
          "maxValue": 1019,
          "metadata": {
            "description": "Optional. The daily backups to keep."
          }
        },
        "monthlyBackupsToKeep": {
          "type": "int",
          "nullable": true,
          "metadata": {
            "description": "Optional. The monthly backups to keep."
          }
        },
        "weeklyBackupsToKeep": {
          "type": "int",
          "nullable": true,
          "metadata": {
            "description": "Optional. The weekly backups to keep."
          }
        },
        "enabled": {
          "type": "bool",
          "nullable": true,
          "metadata": {
            "description": "Optional. Indicates whether the backup policy is enabled."
          }
        }
      },
      "metadata": {
        "__bicep_export!": true,
        "description": "The type for a backup policy."
      }
    },
    "_1.backupType": {
      "type": "object",
      "properties": {
        "backupPolicyName": {
          "type": "string",
          "metadata": {
            "description": "Required. The name of the backup policy to link."
          }
        },
        "policyEnforced": {
          "type": "bool",
          "metadata": {
            "description": "Required. Enable to enforce the policy."
          }
        },
        "backupVaultName": {
          "type": "string",
          "metadata": {
            "description": "Required. The name of the Backup Vault."
          }
        }
      },
      "metadata": {
        "description": "The type for the backup properties.",
        "__bicep_imported_from!": {
          "sourceTemplate": "capacity-pool/volume/main.bicep"
        }
      }
    },
    "_1.dataProtectionType": {
      "type": "object",
      "properties": {
        "replication": {
          "$ref": "#/definitions/_1.replicationType",
          "nullable": true,
          "metadata": {
            "description": "Optional. Replication properties."
          }
        },
        "backup": {
          "$ref": "#/definitions/_1.backupType",
          "nullable": true,
          "metadata": {
            "description": "Optional. Backup properties."
          }
        },
        "snapshot": {
          "$ref": "#/definitions/_1.snapshotType",
          "nullable": true,
          "metadata": {
            "description": "Optional. Snapshot properties."
          }
        }
      },
      "metadata": {
        "description": "The type for the data protection properties.",
        "__bicep_imported_from!": {
          "sourceTemplate": "capacity-pool/volume/main.bicep"
        }
      }
    },
    "_1.exportPolicyType": {
      "type": "object",
      "properties": {
        "rules": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "ruleIndex": {
                "type": "int",
                "metadata": {
                  "description": "Required. Order index."
                }
              },
              "allowedClients": {
                "type": "string",
                "nullable": true,
                "metadata": {
                  "description": "Optional. Client ingress specification as comma separated string with IPv4 CIDRs, IPv4 host addresses and host names."
                }
              },
              "chownMode": {
                "type": "string",
                "allowedValues": [
                  "Restricted",
                  "Unrestricted"
                ],
                "nullable": true,
                "metadata": {
                  "description": "Optional. This parameter specifies who is authorized to change the ownership of a file. restricted - Only root user can change the ownership of the file. unrestricted - Non-root users can change ownership of files that they own."
                }
              },
              "cifs": {
                "type": "bool",
                "nullable": true,
                "metadata": {
                  "description": "Optional. Allows CIFS protocol."
                }
              },
              "hasRootAccess": {
                "type": "bool",
                "nullable": true,
                "metadata": {
                  "description": "Optional. Has root access to volume."
                }
              },
              "kerberos5ReadOnly": {
                "type": "bool",
                "metadata": {
                  "description": "Required. Kerberos5 Read only access."
                }
              },
              "kerberos5ReadWrite": {
                "type": "bool",
                "metadata": {
                  "description": "Required. Kerberos5 Read and write access."
                }
              },
              "kerberos5iReadOnly": {
                "type": "bool",
                "metadata": {
                  "description": "Required. Kerberos5i Read only access."
                }
              },
              "kerberos5iReadWrite": {
                "type": "bool",
                "metadata": {
                  "description": "Required. Kerberos5i Read and write access."
                }
              },
              "kerberos5pReadOnly": {
                "type": "bool",
                "metadata": {
                  "description": "Required. Kerberos5p Read only access."
                }
              },
              "kerberos5pReadWrite": {
                "type": "bool",
                "metadata": {
                  "description": "Required. Kerberos5p Read and write access."
                }
              },
              "nfsv3": {
                "type": "bool",
                "metadata": {
                  "description": "Required. Allows NFSv3 protocol. Enable only for NFSv3 type volumes."
                }
              },
              "nfsv41": {
                "type": "bool",
                "metadata": {
                  "description": "Required. Allows NFSv4.1 protocol. Enable only for NFSv4.1 type volumes."
                }
              },
              "unixReadOnly": {
                "type": "bool",
                "metadata": {
                  "description": "Required. Read only access."
                }
              },
              "unixReadWrite": {
                "type": "bool",
                "metadata": {
                  "description": "Required. Read and write access."
                }
              }
            }
          },
          "metadata": {
            "description": "Required. The Export policy rules."
          }
        }
      },
      "metadata": {
        "description": "The type for export policy rules.",
        "__bicep_imported_from!": {
          "sourceTemplate": "capacity-pool/volume/main.bicep"
        }
      }
    },
    "_1.replicationType": {
      "type": "object",
      "properties": {
        "endpointType": {
          "type": "string",
          "allowedValues": [
            "dst",
            "src"
          ],
          "metadata": {
            "description": "Required. Indicates whether the local volume is the source or destination for the Volume Replication."
          }
        },
        "remoteVolumeRegion": {
          "type": "string",
          "metadata": {
            "description": "Required. The remote region for the other end of the Volume Replication."
          }
        },
        "remoteVolumeResourceId": {
          "type": "string",
          "metadata": {
            "description": "Required. The resource ID of the remote volume."
          }
        },
        "replicationSchedule": {
          "type": "string",
          "allowedValues": [
            "_10minutely",
            "daily",
            "hourly"
          ],
          "metadata": {
            "description": "Required. The replication schedule for the volume."
          }
        }
      },
      "metadata": {
        "description": "The type for the replication properties.",
        "__bicep_imported_from!": {
          "sourceTemplate": "capacity-pool/volume/main.bicep"
        }
      }
    },
    "_1.snapshotType": {
      "type": "object",
      "properties": {
        "snapshotPolicyName": {
          "type": "string",
          "metadata": {
            "description": "Required. The name of the snapshot policy to link."
          }
        }
      },
      "metadata": {
        "description": "The type for the snapshot properties.",
        "__bicep_imported_from!": {
          "sourceTemplate": "capacity-pool/volume/main.bicep"
        }
      }
    },
    "backupType": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "Optional. The name of the backup."
          }
        },
        "label": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "Optional. Label for backup."
          }
        },
        "snapshotName": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "Optional. The name of the snapshot."
          }
        },
        "volumeName": {
          "type": "string",
          "metadata": {
            "description": "Required. The name of the volume to backup."
          }
        },
        "capacityPoolName": {
          "type": "string",
          "metadata": {
            "description": "Required. The name of the capacity pool containing the volume."
          }
        }
      },
      "metadata": {
        "description": "The type for a backup.",
        "__bicep_imported_from!": {
          "sourceTemplate": "backup-vault/main.bicep"
        }
      }
    },
    "customerManagedKeyType": {
      "type": "object",
      "properties": {
        "keyVaultResourceId": {
          "type": "string",
          "metadata": {
            "description": "Required. The resource ID of a key vault to reference a customer managed key for encryption from."
          }
        },
        "keyName": {
          "type": "string",
          "metadata": {
            "description": "Required. The name of the customer managed key to use for encryption."
          }
        },
        "keyVersion": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "Optional. The version of the customer managed key to reference for encryption. If not provided, the deployment will use the latest version available at deployment time."
          }
        },
        "userAssignedIdentityResourceId": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "Optional. User assigned identity to use when fetching the customer managed key. Required if no system assigned identity is available for use."
          }
        }
      },
      "metadata": {
        "description": "An AVM-aligned type for a customer-managed key. To be used if the resource type does not support auto-rotation of the customer-managed key.",
        "__bicep_imported_from!": {
          "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.4.0"
        }
      }
    },
    "dailyScheduleType": {
      "type": "object",
      "properties": {
        "hour": {
          "type": "int",
          "minValue": 0,
          "maxValue": 23,
          "metadata": {
            "description": "Required. The daily snapshot hour."
          }
        },
        "minute": {
          "type": "int",
          "minValue": 0,
          "maxValue": 59,
          "metadata": {
            "description": "Required. The daily snapshot minute."
          }
        },
        "snapshotsToKeep": {
          "type": "int",
          "minValue": 1,
          "maxValue": 255,
          "metadata": {
            "description": "Required. Daily snapshot count to keep."
          }
        },
        "usedBytes": {
          "type": "int",
          "nullable": true,
          "metadata": {
            "description": "Optional. Resource size in bytes, current storage usage for the volume in bytes."
          }
        }
      },
      "metadata": {
        "description": "The type for a daily schedule for the snapshot policy.",
        "__bicep_imported_from!": {
          "sourceTemplate": "snapshot-policies/main.bicep"
        }
      }
    },
    "hourlyScheduleType": {
      "type": "object",
      "properties": {
        "minute": {
          "type": "int",
          "minValue": 0,
          "maxValue": 59,
          "metadata": {
            "description": "Required. The hourly snapshot minute."
          }
        },
        "snapshotsToKeep": {
          "type": "int",
          "minValue": 1,
          "maxValue": 255,
          "metadata": {
            "description": "Required. Hourly snapshot count to keep."
          }
        },
        "usedBytes": {
          "type": "int",
          "nullable": true,
          "metadata": {
            "description": "Optional. Resource size in bytes, current storage usage for the volume in bytes."
          }
        }
      },
      "metadata": {
        "description": "The type for an hourly schedule for the snapshot policy.",
        "__bicep_imported_from!": {
          "sourceTemplate": "snapshot-policies/main.bicep"
        }
      }
    },
    "lockType": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "Optional. Specify the name of lock."
          }
        },
        "kind": {
          "type": "string",
          "allowedValues": [
            "CanNotDelete",
            "None",
            "ReadOnly"
          ],
          "nullable": true,
          "metadata": {
            "description": "Optional. Specify the type of lock."
          }
        }
      },
      "metadata": {
        "description": "An AVM-aligned type for a lock.",
        "__bicep_imported_from!": {
          "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.4.0"
        }
      }
    },
    "managedIdentityOnlyUserAssignedType": {
      "type": "object",
      "properties": {
        "userAssignedResourceIds": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "nullable": true,
          "metadata": {
            "description": "Optional. The resource ID(s) to assign to the resource. Required if a user assigned identity is used for encryption."
          }
        }
      },
      "metadata": {
        "description": "An AVM-aligned type for a managed identity configuration. To be used if only user-assigned identities are supported by the resource provider.",
        "__bicep_imported_from!": {
          "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.4.0"
        }
      }
    },
    "monthlyScheduleType": {
      "type": "object",
      "properties": {
        "daysOfMonth": {
          "type": "string",
          "metadata": {
            "description": "Required. Indicates which days of the month snapshot should be taken. A comma delimited string. E.g., '10,11,12'."
          }
        },
        "hour": {
          "type": "int",
          "minValue": 0,
          "maxValue": 23,
          "metadata": {
            "description": "Required. The monthly snapshot hour."
          }
        },
        "minute": {
          "type": "int",
          "minValue": 0,
          "maxValue": 59,
          "metadata": {
            "description": "Required. The monthly snapshot minute."
          }
        },
        "snapshotsToKeep": {
          "type": "int",
          "minValue": 1,
          "maxValue": 255,
          "metadata": {
            "description": "Required. Monthly snapshot count to keep."
          }
        },
        "usedBytes": {
          "type": "int",
          "nullable": true,
          "metadata": {
            "description": "Optional. Resource size in bytes, current storage usage for the volume in bytes."
          }
        }
      },
      "metadata": {
        "description": "The type for a monthly schedule for the snapshot policy.",
        "__bicep_imported_from!": {
          "sourceTemplate": "snapshot-policies/main.bicep"
        }
      }
    },
    "roleAssignmentType": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "Optional. The name (as GUID) of the role assignment. If not provided, a GUID will be generated."
          }
        },
        "roleDefinitionIdOrName": {
          "type": "string",
          "metadata": {
            "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
          }
        },
        "principalId": {
          "type": "string",
          "metadata": {
            "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
          }
        },
        "principalType": {
          "type": "string",
          "allowedValues": [
            "Device",
            "ForeignGroup",
            "Group",
            "ServicePrincipal",
            "User"
          ],
          "nullable": true,
          "metadata": {
            "description": "Optional. The principal type of the assigned principal ID."
          }
        },
        "description": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "Optional. The description of the role assignment."
          }
        },
        "condition": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
          }
        },
        "conditionVersion": {
          "type": "string",
          "allowedValues": [
            "2.0"
          ],
          "nullable": true,
          "metadata": {
            "description": "Optional. Version of the condition."
          }
        },
        "delegatedManagedIdentityResourceId": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "Optional. The Resource Id of the delegated managed identity resource."
          }
        }
      },
      "metadata": {
        "description": "An AVM-aligned type for a role assignment.",
        "__bicep_imported_from!": {
          "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.4.0"
        }
      }
    },
    "volumeType": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "metadata": {
            "description": "Required. The name of the pool volume."
          }
        },
        "coolAccess": {
          "type": "bool",
          "nullable": true,
          "metadata": {
            "description": "Optional. If enabled (true) the pool can contain cool Access enabled volumes."
          }
        },
        "coolnessPeriod": {
          "type": "int",
          "nullable": true,
          "metadata": {
            "description": "Optional. Specifies the number of days after which data that is not accessed by clients will be tiered."
          }
        },
        "coolAccessRetrievalPolicy": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "Optional. Determines the data retrieval behavior from the cool tier to standard storage based on the read pattern for cool access enabled volumes (Default/Never/Read)."
          }
        },
        "encryptionKeySource": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "Optional. The source of the encryption key."
          }
        },
        "keyVaultPrivateEndpointResourceId": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "Optional. The resource ID of the key vault private endpoint."
          }
        },
        "dataProtection": {
          "$ref": "#/definitions/_1.dataProtectionType",
          "nullable": true,
          "metadata": {
            "description": "Optional. DataProtection type volumes include an object containing details of the replication."
          }
        },
        "location": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "Optional. Location of the pool volume."
          }
        },
        "zones": {
          "type": "array",
          "items": {
            "type": "int"
          },
          "nullable": true,
          "metadata": {
            "description": "Optional. Zone where the volume will be placed."
          }
        },
        "serviceLevel": {
          "type": "string",
          "allowedValues": [
            "Premium",
            "Standard",
            "StandardZRS",
            "Ultra"
          ],
          "nullable": true,
          "metadata": {
            "description": "Optional. The pool service level. Must match the one of the parent capacity pool."
          }
        },
        "networkFeatures": {
          "type": "string",
          "allowedValues": [
            "Basic",
            "Basic_Standard",
            "Standard",
            "Standard_Basic"
          ],
          "nullable": true,
          "metadata": {
            "description": "Optional. Network feature for the volume."
          }
        },
        "creationToken": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "Optional. A unique file path for the volume. This is the name of the volume export. A volume is mounted using the export path. File path must start with an alphabetical character and be unique within the subscription."
          }
        },
        "usageThreshold": {
          "type": "int",
          "metadata": {
            "description": "Required. Maximum storage quota allowed for a file system in bytes."
          }
        },
        "protocolTypes": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "nullable": true,
          "metadata": {
            "description": "Optional. Set of protocol types."
          }
        },
        "subnetResourceId": {
          "type": "string",
          "metadata": {
            "description": "Required. The Azure Resource URI for a delegated subnet. Must have the delegation Microsoft.NetApp/volumes."
          }
        },
        "exportPolicy": {
          "$ref": "#/definitions/_1.exportPolicyType",
          "nullable": true,
          "metadata": {
            "description": "Optional. Export policy rules."
          }
        },
        "roleAssignments": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/roleAssignmentType"
          },
          "nullable": true,
          "metadata": {
            "description": "Optional. Array of role assignments to create."
          }
        },
        "smbEncryption": {
          "type": "bool",
          "nullable": true,
          "metadata": {
            "description": "Optional. Enables SMB encryption. Only applicable for SMB/DualProtocol volume."
          }
        },
        "smbContinuouslyAvailable": {
          "type": "bool",
          "nullable": true,
          "metadata": {
            "description": "Optional. Enables continuously available share property for SMB volume. Only applicable for SMB volume."
          }
        },
        "smbNonBrowsable": {
          "type": "string",
          "allowedValues": [
            "Disabled",
            "Enabled"
          ],
          "nullable": true,
          "metadata": {
            "description": "Optional. Enables non-browsable property for SMB Shares. Only applicable for SMB/DualProtocol volume."
          }
        },
        "kerberosEnabled": {
          "type": "bool",
          "nullable": true,
          "metadata": {
            "description": "Optional. Define if a volume is KerberosEnabled."
          }
        }
      },
      "metadata": {
        "description": "The type for a volume in the capacity pool.",
        "__bicep_imported_from!": {
          "sourceTemplate": "capacity-pool/main.bicep"
        }
      }
    },
    "weeklyScheduleType": {
      "type": "object",
      "properties": {
        "day": {
          "type": "string",
          "allowedValues": [
            "Friday",
            "Monday",
            "Saturday",
            "Sunday",
            "Thursday",
            "Tuesday",
            "Wednesday"
          ],
          "metadata": {
            "description": "Required. The weekly snapshot day."
          }
        },
        "hour": {
          "type": "int",
          "minValue": 0,
          "maxValue": 23,
          "metadata": {
            "description": "Required. The weekly snapshot hour."
          }
        },
        "minute": {
          "type": "int",
          "minValue": 0,
          "maxValue": 59,
          "metadata": {
            "description": "Required. The weekly snapshot minute."
          }
        },
        "snapshotsToKeep": {
          "type": "int",
          "minValue": 1,
          "maxValue": 255,
          "metadata": {
            "description": "Required. Weekly snapshot count to keep."
          }
        },
        "usedBytes": {
          "type": "int",
          "nullable": true,
          "metadata": {
            "description": "Optional. Resource size in bytes, current storage usage for the volume in bytes."
          }
        }
      },
      "metadata": {
        "description": "The type for a weekly schedule for the snapshot policy.",
        "__bicep_imported_from!": {
          "sourceTemplate": "snapshot-policies/main.bicep"
        }
      }
    }
  },
  "parameters": {
    "name": {
      "type": "string",
      "metadata": {
        "description": "Required. The name of the NetApp account."
      }
    },
    "adName": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Optional. Name of the active directory host as part of Kerberos Realm used for Kerberos authentication."
      }
    },
    "aesEncryption": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Optional. Enable AES encryption on the SMB Server."
      }
    },
    "customerManagedKey": {
      "$ref": "#/definitions/customerManagedKeyType",
      "nullable": true,
      "metadata": {
        "description": "Optional. The customer managed key definition."
      }
    },
    "domainName": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Optional. Fully Qualified Active Directory DNS Domain Name (e.g. 'contoso.com')."
      }
    },
    "domainJoinUser": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Optional. Required if domainName is specified. Username of Active Directory domain administrator, with permissions to create SMB server machine account in the AD domain."
      }
    },
    "domainJoinPassword": {
      "type": "securestring",
      "defaultValue": "",
      "metadata": {
        "description": "Optional. Required if domainName is specified. Password of the user specified in domainJoinUser parameter."
      }
    },
    "domainJoinOU": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Optional. Used only if domainName is specified. LDAP Path for the Organization Unit (OU) where SMB Server machine accounts will be created (i.e. 'OU=SecondLevel,OU=FirstLevel')."
      }
    },
    "dnsServers": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Optional. Required if domainName is specified. Comma separated list of DNS server IP addresses (IPv4 only) required for the Active Directory (AD) domain join and SMB authentication operations to succeed."
      }
    },
    "encryptDCConnections": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Optional. Specifies whether encryption should be used for communication between SMB server and domain controller (DC). SMB3 only."
      }
    },
    "smbServerNamePrefix": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Optional. Required if domainName is specified. NetBIOS name of the SMB server. A computer account with this prefix will be registered in the AD and used to mount volumes."
      }
    },
    "capacityPools": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/capacityPoolType"
      },
      "nullable": true,
      "metadata": {
        "description": "Optional. Capacity pools to create."
      }
    },
    "managedIdentities": {
      "$ref": "#/definitions/managedIdentityOnlyUserAssignedType",
      "nullable": true,
      "metadata": {
        "description": "Optional. The managed identity definition for this resource."
      }
    },
    "roleAssignments": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/roleAssignmentType"
      },
      "nullable": true,
      "metadata": {
        "description": "Optional. Array of role assignments to create."
      }
    },
    "kdcIP": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Optional. Kerberos Key Distribution Center (KDC) as part of Kerberos Realm used for Kerberos authentication."
      }
    },
    "ldapOverTLS": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Optional. Specifies whether to use TLS when NFS (with/without Kerberos) and SMB volumes communicate with an LDAP server. A server root CA certificate must be uploaded if enabled (serverRootCACertificate)."
      }
    },
    "ldapSigning": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Optional. Specifies whether or not the LDAP traffic needs to be signed."
      }
    },
    "location": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "Optional. Location for all resources."
      }
    },
    "lock": {
      "$ref": "#/definitions/lockType",
      "nullable": true,
      "metadata": {
        "description": "Optional. The lock settings of the service."
      }
    },
    "serverRootCACertificate": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Optional. A server Root certificate is required of ldapOverTLS is enabled."
      }
    },
    "tags": {
      "type": "object",
      "nullable": true,
      "metadata": {
        "description": "Optional. Tags for all resources."
      }
    },
    "enableTelemetry": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Optional. Enable/Disable usage telemetry for module."
      }
    },
    "backupVault": {
      "$ref": "#/definitions/backupVaultType",
      "nullable": true,
      "metadata": {
        "description": "Optional. The netapp backup vault to create & configure."
      }
    },
    "snapshotPolicies": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/snapshotPolicyType"
      },
      "nullable": true,
      "metadata": {
        "description": "Optional. The snapshot policies to create."
      }
    },
    "backupPolicies": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/backupPolicyType"
      },
      "nullable": true,
      "metadata": {
        "description": "Optional. The backup policies to create."
      }
    }
  },
  "variables": {
    "copy": [
      {
        "name": "formattedRoleAssignments",
        "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]",
        "input": "[union(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')], createObject('roleDefinitionId', coalesce(tryGet(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName), if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName)))))]"
      }
    ],
    "activeDirectoryConnectionProperties": [
      {
        "adName": "[if(not(empty(parameters('domainName'))), parameters('adName'), null())]",
        "aesEncryption": "[if(not(empty(parameters('domainName'))), parameters('aesEncryption'), false())]",
        "username": "[if(not(empty(parameters('domainName'))), parameters('domainJoinUser'), null())]",
        "password": "[if(not(empty(parameters('domainName'))), parameters('domainJoinPassword'), null())]",
        "domain": "[if(not(empty(parameters('domainName'))), parameters('domainName'), null())]",
        "dns": "[if(not(empty(parameters('domainName'))), parameters('dnsServers'), null())]",
        "encryptDCConnections": "[if(not(empty(parameters('domainName'))), parameters('encryptDCConnections'), false())]",
        "kdcIP": "[if(not(empty(parameters('domainName'))), parameters('kdcIP'), null())]",
        "ldapOverTLS": "[if(not(empty(parameters('domainName'))), parameters('ldapOverTLS'), false())]",
        "ldapSigning": "[if(not(empty(parameters('domainName'))), parameters('ldapSigning'), false())]",
        "serverRootCACertificate": "[if(not(empty(parameters('domainName'))), parameters('serverRootCACertificate'), null())]",
        "smbServerName": "[if(not(empty(parameters('domainName'))), parameters('smbServerNamePrefix'), null())]",
        "organizationalUnit": "[if(not(empty(parameters('domainJoinOU'))), parameters('domainJoinOU'), null())]"
      }
    ],
    "formattedUserAssignedIdentities": "[reduce(map(coalesce(tryGet(parameters('managedIdentities'), 'userAssignedResourceIds'), createArray()), lambda('id', createObject(format('{0}', lambdaVariables('id')), createObject()))), createObject(), lambda('cur', 'next', union(lambdaVariables('cur'), lambdaVariables('next'))))]",
    "identity": "[if(not(empty(parameters('managedIdentities'))), createObject('type', if(not(empty(coalesce(tryGet(parameters('managedIdentities'), 'userAssignedResourceIds'), createObject()))), 'UserAssigned', 'None'), 'userAssignedIdentities', if(not(empty(variables('formattedUserAssignedIdentities'))), variables('formattedUserAssignedIdentities'), null())), null())]",
    "builtInRoleNames": {
      "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
      "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
      "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
      "Role Based Access Control Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]",
      "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]"
    }
  },
  "resources": {
    "cMKKeyVault::cMKKey": {
      "condition": "[and(not(empty(tryGet(parameters('customerManagedKey'), 'keyVaultResourceId'))), and(not(empty(tryGet(parameters('customerManagedKey'), 'keyVaultResourceId'))), not(empty(tryGet(parameters('customerManagedKey'), 'keyName')))))]",
      "existing": true,
      "type": "Microsoft.KeyVault/vaults/keys",
      "apiVersion": "2023-02-01",
      "subscriptionId": "[split(coalesce(tryGet(parameters('customerManagedKey'), 'keyVaultResourceId'), '//'), '/')[2]]",
      "resourceGroup": "[split(coalesce(tryGet(parameters('customerManagedKey'), 'keyVaultResourceId'), '////'), '/')[4]]",
      "name": "[format('{0}/{1}', last(split(coalesce(tryGet(parameters('customerManagedKey'), 'keyVaultResourceId'), 'dummyVault'), '/')), coalesce(tryGet(parameters('customerManagedKey'), 'keyName'), 'dummyKey'))]"
    },
    "avmTelemetry": {
      "condition": "[parameters('enableTelemetry')]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2023-07-01",
      "name": "[format('46d3xbcp.res.netapp-netappaccount.{0}.{1}', replace('-..--..-', '.', '-'), substring(uniqueString(deployment().name, parameters('location')), 0, 4))]",
      "properties": {
        "mode": "Incremental",
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "resources": [],
          "outputs": {
            "telemetry": {
              "type": "String",
              "value": "For more information, see https://aka.ms/avm/TelemetryInfo"
            }
          }
        }
      }
    },
    "cMKKeyVault": {
      "condition": "[not(empty(tryGet(parameters('customerManagedKey'), 'keyVaultResourceId')))]",
      "existing": true,
      "type": "Microsoft.KeyVault/vaults",
      "apiVersion": "2023-02-01",
      "subscriptionId": "[split(coalesce(tryGet(parameters('customerManagedKey'), 'keyVaultResourceId'), '//'), '/')[2]]",
      "resourceGroup": "[split(coalesce(tryGet(parameters('customerManagedKey'), 'keyVaultResourceId'), '////'), '/')[4]]",
      "name": "[last(split(coalesce(tryGet(parameters('customerManagedKey'), 'keyVaultResourceId'), 'dummyVault'), '/'))]"
    },
    "cMKUserAssignedIdentity": {
      "condition": "[not(empty(tryGet(parameters('customerManagedKey'), 'userAssignedIdentityResourceId')))]",
      "existing": true,
      "type": "Microsoft.ManagedIdentity/userAssignedIdentities",
      "apiVersion": "2023-01-31",
      "subscriptionId": "[split(coalesce(tryGet(parameters('customerManagedKey'), 'userAssignedIdentityResourceId'), '//'), '/')[2]]",
      "resourceGroup": "[split(coalesce(tryGet(parameters('customerManagedKey'), 'userAssignedIdentityResourceId'), '////'), '/')[4]]",
      "name": "[last(split(coalesce(tryGet(parameters('customerManagedKey'), 'userAssignedIdentityResourceId'), 'dummyMsi'), '/'))]"
    },
    "netAppAccount": {
      "type": "Microsoft.NetApp/netAppAccounts",
      "apiVersion": "2024-03-01",
      "name": "[parameters('name')]",
      "tags": "[parameters('tags')]",
      "identity": "[variables('identity')]",
      "location": "[parameters('location')]",
      "properties": {
        "activeDirectories": "[if(not(empty(parameters('domainName'))), variables('activeDirectoryConnectionProperties'), null())]",
        "encryption": "[if(not(empty(parameters('customerManagedKey'))), createObject('identity', if(not(empty(tryGet(parameters('customerManagedKey'), 'userAssignedIdentityResourceId'))), createObject('userAssignedIdentity', extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(coalesce(tryGet(parameters('customerManagedKey'), 'userAssignedIdentityResourceId'), '//'), '/')[2], split(coalesce(tryGet(parameters('customerManagedKey'), 'userAssignedIdentityResourceId'), '////'), '/')[4]), 'Microsoft.ManagedIdentity/userAssignedIdentities', last(split(coalesce(tryGet(parameters('customerManagedKey'), 'userAssignedIdentityResourceId'), 'dummyMsi'), '/')))), null()), 'keySource', 'Microsoft.KeyVault', 'keyVaultProperties', createObject('keyName', parameters('customerManagedKey').keyName, 'keyVaultResourceId', extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(coalesce(tryGet(parameters('customerManagedKey'), 'keyVaultResourceId'), '//'), '/')[2], split(coalesce(tryGet(parameters('customerManagedKey'), 'keyVaultResourceId'), '////'), '/')[4]), 'Microsoft.KeyVault/vaults', last(split(coalesce(tryGet(parameters('customerManagedKey'), 'keyVaultResourceId'), 'dummyVault'), '/'))), 'keyVaultUri', reference('cMKKeyVault').vaultUri)), null())]"
      },
      "dependsOn": [
        "cMKKeyVault"
      ]
    },
    "netAppAccount_lock": {
      "condition": "[and(not(empty(coalesce(parameters('lock'), createObject()))), not(equals(tryGet(parameters('lock'), 'kind'), 'None')))]",
      "type": "Microsoft.Authorization/locks",
      "apiVersion": "2020-05-01",
      "scope": "[format('Microsoft.NetApp/netAppAccounts/{0}', parameters('name'))]",
      "name": "[coalesce(tryGet(parameters('lock'), 'name'), format('lock-{0}', parameters('name')))]",
      "properties": {
        "level": "[coalesce(tryGet(parameters('lock'), 'kind'), '')]",
        "notes": "[if(equals(tryGet(parameters('lock'), 'kind'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot delete or modify the resource or child resources.')]"
      },
      "dependsOn": [
        "netAppAccount"
      ]
    },
    "netAppAccount_roleAssignments": {
      "copy": {
        "name": "netAppAccount_roleAssignments",
        "count": "[length(coalesce(variables('formattedRoleAssignments'), createArray()))]"
      },
      "type": "Microsoft.Authorization/roleAssignments",
      "apiVersion": "2022-04-01",
      "scope": "[format('Microsoft.NetApp/netAppAccounts/{0}', parameters('name'))]",
      "name": "[coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'name'), guid(resourceId('Microsoft.NetApp/netAppAccounts', parameters('name')), coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId, coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId))]",
      "properties": {
        "roleDefinitionId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId]",
        "principalId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId]",
        "description": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'description')]",
        "principalType": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'principalType')]",
        "condition": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition')]",
        "conditionVersion": "[if(not(empty(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
        "delegatedManagedIdentityResourceId": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
      },
      "dependsOn": [
        "netAppAccount"
      ]
    },
    "netAppAccount_backupPolicies": {
      "copy": {
        "name": "netAppAccount_backupPolicies",
        "count": "[length(coalesce(parameters('backupPolicies'), createArray()))]"
      },
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('{0}-ANFAccount-backupPolicy-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "netAppAccountName": {
            "value": "[parameters('name')]"
          },
          "name": {
            "value": "[tryGet(coalesce(parameters('backupPolicies'), createArray())[copyIndex()], 'name')]"
          },
          "dailyBackupsToKeep": {
            "value": "[tryGet(coalesce(parameters('backupPolicies'), createArray())[copyIndex()], 'dailyBackupsToKeep')]"
          },
          "monthlyBackupsToKeep": {
            "value": "[tryGet(coalesce(parameters('backupPolicies'), createArray())[copyIndex()], 'monthlyBackupsToKeep')]"
          },
          "weeklyBackupsToKeep": {
            "value": "[tryGet(coalesce(parameters('backupPolicies'), createArray())[copyIndex()], 'weeklyBackupsToKeep')]"
          },
          "enabled": {
            "value": "[tryGet(coalesce(parameters('backupPolicies'), createArray())[copyIndex()], 'enabled')]"
          },
          "location": {
            "value": "[coalesce(tryGet(coalesce(parameters('backupPolicies'), createArray())[copyIndex()], 'location'), parameters('location'))]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.33.13.18514",
              "templateHash": "1799863578493793686"
            },
            "name": "Azure NetApp Files Backup Policy",
            "description": "This module deploys a Backup Policy for Azure NetApp File."
          },
          "parameters": {
            "netAppAccountName": {
              "type": "string",
              "metadata": {
                "description": "Conditional. The name of the parent NetApp account. Required if the template is used in a standalone deployment."
              }
            },
            "name": {
              "type": "string",
              "defaultValue": "backupPolicy",
              "metadata": {
                "description": "Optional. The name of the backup policy."
              }
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]",
              "metadata": {
                "description": "Optional. The location of the backup policy."
              }
            },
            "dailyBackupsToKeep": {
              "type": "int",
              "defaultValue": 2,
              "minValue": 2,
              "maxValue": 1019,
              "metadata": {
                "description": "Optional. The daily backups to keep."
              }
            },
            "monthlyBackupsToKeep": {
              "type": "int",
              "defaultValue": 0,
              "metadata": {
                "description": "Optional. The monthly backups to keep."
              }
            },
            "weeklyBackupsToKeep": {
              "type": "int",
              "defaultValue": 0,
              "metadata": {
                "description": "Optional. The weekly backups to keep."
              }
            },
            "enabled": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Optional. Indicates whether the backup policy is enabled."
              }
            }
          },
          "resources": [
            {
              "type": "Microsoft.NetApp/netAppAccounts/backupPolicies",
              "apiVersion": "2024-03-01",
              "name": "[format('{0}/{1}', parameters('netAppAccountName'), parameters('name'))]",
              "location": "[parameters('location')]",
              "properties": {
                "enabled": "[parameters('enabled')]",
                "dailyBackupsToKeep": "[parameters('dailyBackupsToKeep')]",
                "weeklyBackupsToKeep": "[parameters('weeklyBackupsToKeep')]",
                "monthlyBackupsToKeep": "[parameters('monthlyBackupsToKeep')]"
              }
            }
          ],
          "outputs": {
            "resourceId": {
              "type": "string",
              "metadata": {
                "description": "The resource IDs of the backup Policy created within volume."
              },
              "value": "[resourceId('Microsoft.NetApp/netAppAccounts/backupPolicies', parameters('netAppAccountName'), parameters('name'))]"
            },
            "name": {
              "type": "string",
              "metadata": {
                "description": "The name of the Backup Policy."
              },
              "value": "[parameters('name')]"
            },
            "resourceGroupName": {
              "type": "string",
              "metadata": {
                "description": "The name of the Resource Group the Backup Policy was created in."
              },
              "value": "[resourceGroup().name]"
            }
          }
        }
      },
      "dependsOn": [
        "netAppAccount"
      ]
    },
    "netAppAccount_snapshotPolicies": {
      "copy": {
        "name": "netAppAccount_snapshotPolicies",
        "count": "[length(coalesce(parameters('snapshotPolicies'), createArray()))]"
      },
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('{0}-ANFAccount-snapshotPolicy-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "netAppAccountName": {
            "value": "[parameters('name')]"
          },
          "name": {
            "value": "[tryGet(coalesce(parameters('snapshotPolicies'), createArray())[copyIndex()], 'name')]"
          },
          "location": {
            "value": "[coalesce(tryGet(coalesce(parameters('snapshotPolicies'), createArray())[copyIndex()], 'location'), parameters('location'))]"
          },
          "snapEnabled": {
            "value": "[tryGet(coalesce(parameters('snapshotPolicies'), createArray())[copyIndex()], 'snapEnabled')]"
          },
          "dailySchedule": {
            "value": "[tryGet(coalesce(parameters('snapshotPolicies'), createArray())[copyIndex()], 'dailySchedule')]"
          },
          "hourlySchedule": {
            "value": "[tryGet(coalesce(parameters('snapshotPolicies'), createArray())[copyIndex()], 'hourlySchedule')]"
          },
          "monthlySchedule": {
            "value": "[tryGet(coalesce(parameters('snapshotPolicies'), createArray())[copyIndex()], 'monthlySchedule')]"
          },
          "weeklySchedule": {
            "value": "[tryGet(coalesce(parameters('snapshotPolicies'), createArray())[copyIndex()], 'weeklySchedule')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "languageVersion": "2.0",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.33.13.18514",
              "templateHash": "14119927784920096194"
            },
            "name": "Azure NetApp Files Snapshot Policy",
            "description": "This module deploys a Snapshot Policy for an Azure NetApp File."
          },
          "definitions": {
            "dailyScheduleType": {
              "type": "object",
              "properties": {
                "hour": {
                  "type": "int",
                  "minValue": 0,
                  "maxValue": 23,
                  "metadata": {
                    "description": "Required. The daily snapshot hour."
                  }
                },
                "minute": {
                  "type": "int",
                  "minValue": 0,
                  "maxValue": 59,
                  "metadata": {
                    "description": "Required. The daily snapshot minute."
                  }
                },
                "snapshotsToKeep": {
                  "type": "int",
                  "minValue": 1,
                  "maxValue": 255,
                  "metadata": {
                    "description": "Required. Daily snapshot count to keep."
                  }
                },
                "usedBytes": {
                  "type": "int",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Resource size in bytes, current storage usage for the volume in bytes."
                  }
                }
              },
              "metadata": {
                "__bicep_export!": true,
                "description": "The type for a daily schedule for the snapshot policy."
              }
            },
            "hourlyScheduleType": {
              "type": "object",
              "properties": {
                "minute": {
                  "type": "int",
                  "minValue": 0,
                  "maxValue": 59,
                  "metadata": {
                    "description": "Required. The hourly snapshot minute."
                  }
                },
                "snapshotsToKeep": {
                  "type": "int",
                  "minValue": 1,
                  "maxValue": 255,
                  "metadata": {
                    "description": "Required. Hourly snapshot count to keep."
                  }
                },
                "usedBytes": {
                  "type": "int",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Resource size in bytes, current storage usage for the volume in bytes."
                  }
                }
              },
              "metadata": {
                "__bicep_export!": true,
                "description": "The type for an hourly schedule for the snapshot policy."
              }
            },
            "weeklyScheduleType": {
              "type": "object",
              "properties": {
                "day": {
                  "type": "string",
                  "allowedValues": [
                    "Friday",
                    "Monday",
                    "Saturday",
                    "Sunday",
                    "Thursday",
                    "Tuesday",
                    "Wednesday"
                  ],
                  "metadata": {
                    "description": "Required. The weekly snapshot day."
                  }
                },
                "hour": {
                  "type": "int",
                  "minValue": 0,
                  "maxValue": 23,
                  "metadata": {
                    "description": "Required. The weekly snapshot hour."
                  }
                },
                "minute": {
                  "type": "int",
                  "minValue": 0,
                  "maxValue": 59,
                  "metadata": {
                    "description": "Required. The weekly snapshot minute."
                  }
                },
                "snapshotsToKeep": {
                  "type": "int",
                  "minValue": 1,
                  "maxValue": 255,
                  "metadata": {
                    "description": "Required. Weekly snapshot count to keep."
                  }
                },
                "usedBytes": {
                  "type": "int",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Resource size in bytes, current storage usage for the volume in bytes."
                  }
                }
              },
              "metadata": {
                "__bicep_export!": true,
                "description": "The type for a weekly schedule for the snapshot policy."
              }
            },
            "monthlyScheduleType": {
              "type": "object",
              "properties": {
                "daysOfMonth": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. Indicates which days of the month snapshot should be taken. A comma delimited string. E.g., '10,11,12'."
                  }
                },
                "hour": {
                  "type": "int",
                  "minValue": 0,
                  "maxValue": 23,
                  "metadata": {
                    "description": "Required. The monthly snapshot hour."
                  }
                },
                "minute": {
                  "type": "int",
                  "minValue": 0,
                  "maxValue": 59,
                  "metadata": {
                    "description": "Required. The monthly snapshot minute."
                  }
                },
                "snapshotsToKeep": {
                  "type": "int",
                  "minValue": 1,
                  "maxValue": 255,
                  "metadata": {
                    "description": "Required. Monthly snapshot count to keep."
                  }
                },
                "usedBytes": {
                  "type": "int",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Resource size in bytes, current storage usage for the volume in bytes."
                  }
                }
              },
              "metadata": {
                "__bicep_export!": true,
                "description": "The type for a monthly schedule for the snapshot policy."
              }
            }
          },
          "parameters": {
            "netAppAccountName": {
              "type": "string",
              "metadata": {
                "description": "Conditional. The name of the parent NetApp account. Required if the template is used in a standalone deployment."
              }
            },
            "name": {
              "type": "string",
              "defaultValue": "snapshotPolicy",
              "metadata": {
                "description": "Optional. The name of the snapshot policy."
              }
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]",
              "metadata": {
                "description": "Optional. The location of the snapshot policy."
              }
            },
            "hourlySchedule": {
              "$ref": "#/definitions/hourlyScheduleType",
              "nullable": true,
              "metadata": {
                "description": "Optional. Schedule for hourly snapshots."
              }
            },
            "dailySchedule": {
              "$ref": "#/definitions/dailyScheduleType",
              "nullable": true,
              "metadata": {
                "description": "Optional. Schedule for daily snapshots."
              }
            },
            "monthlySchedule": {
              "$ref": "#/definitions/monthlyScheduleType",
              "nullable": true,
              "metadata": {
                "description": "Optional. Schedule for monthly snapshots."
              }
            },
            "weeklySchedule": {
              "$ref": "#/definitions/weeklyScheduleType",
              "nullable": true,
              "metadata": {
                "description": "Optional. Schedule for weekly snapshots."
              }
            },
            "snapEnabled": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Optional. Indicates whether the snapshot policy is enabled."
              }
            }
          },
          "resources": {
            "netAppAccount": {
              "existing": true,
              "type": "Microsoft.NetApp/netAppAccounts",
              "apiVersion": "2024-03-01",
              "name": "[parameters('netAppAccountName')]"
            },
            "snapshotPolicies": {
              "type": "Microsoft.NetApp/netAppAccounts/snapshotPolicies",
              "apiVersion": "2024-03-01",
              "name": "[format('{0}/{1}', parameters('netAppAccountName'), parameters('name'))]",
              "location": "[parameters('location')]",
              "properties": {
                "enabled": "[parameters('snapEnabled')]",
                "dailySchedule": "[parameters('dailySchedule')]",
                "hourlySchedule": "[parameters('hourlySchedule')]",
                "monthlySchedule": "[parameters('monthlySchedule')]",
                "weeklySchedule": "[parameters('weeklySchedule')]"
              }
            }
          },
          "outputs": {
            "resourceId": {
              "type": "string",
              "metadata": {
                "description": "The resource IDs of the snapshot Policy created within volume."
              },
              "value": "[resourceId('Microsoft.NetApp/netAppAccounts/snapshotPolicies', parameters('netAppAccountName'), parameters('name'))]"
            },
            "name": {
              "type": "string",
              "metadata": {
                "description": "The name of the Backup Policy."
              },
              "value": "[parameters('name')]"
            },
            "resourceGroupName": {
              "type": "string",
              "metadata": {
                "description": "The name of the Resource Group the Snapshot was created in."
              },
              "value": "[resourceGroup().name]"
            }
          }
        }
      },
      "dependsOn": [
        "netAppAccount"
      ]
    },
    "netAppAccount_backupVault": {
      "condition": "[not(empty(parameters('backupVault')))]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('{0}-ANFAccount-BackupVault', uniqueString(deployment().name, parameters('location')))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "netAppAccountName": {
            "value": "[parameters('name')]"
          },
          "name": {
            "value": "[tryGet(parameters('backupVault'), 'name')]"
          },
          "location": {
            "value": "[coalesce(tryGet(parameters('backupVault'), 'location'), parameters('location'))]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "languageVersion": "2.0",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.33.13.18514",
              "templateHash": "1432647773332765235"
            },
            "name": "Azure NetApp Files Volume Backup Vault",
            "description": "This module deploys a NetApp Files Backup Vault."
          },
          "definitions": {
            "backupType": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The name of the backup."
                  }
                },
                "label": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Label for backup."
                  }
                },
                "snapshotName": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The name of the snapshot."
                  }
                },
                "volumeName": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. The name of the volume to backup."
                  }
                },
                "capacityPoolName": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. The name of the capacity pool containing the volume."
                  }
                }
              },
              "metadata": {
                "__bicep_export!": true,
                "description": "The type for a backup."
              }
            }
          },
          "parameters": {
            "name": {
              "type": "string",
              "defaultValue": "vault",
              "metadata": {
                "description": "Optional. The name of the backup vault."
              }
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]",
              "metadata": {
                "description": "Optional. Location of the backup vault."
              }
            },
            "netAppAccountName": {
              "type": "string",
              "metadata": {
                "description": "Conditional. The name of the parent NetApp account. Required if the template is used in a standalone deployment."
              }
            },
            "backups": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/backupType"
              },
              "nullable": true,
              "metadata": {
                "description": "Optional. The list of backups to create."
              }
            }
          },
          "resources": {
            "netAppAccount": {
              "existing": true,
              "type": "Microsoft.NetApp/netAppAccounts",
              "apiVersion": "2024-03-01",
              "name": "[parameters('netAppAccountName')]"
            },
            "backupVault": {
              "type": "Microsoft.NetApp/netAppAccounts/backupVaults",
              "apiVersion": "2024-03-01",
              "name": "[format('{0}/{1}', parameters('netAppAccountName'), parameters('name'))]",
              "location": "[parameters('location')]",
              "properties": {}
            },
            "backupVault_backups": {
              "copy": {
                "name": "backupVault_backups",
                "count": "[length(coalesce(parameters('backups'), createArray()))]"
              },
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('{0}-ANF-Backup-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "netAppAccountName": {
                    "value": "[parameters('netAppAccountName')]"
                  },
                  "backupVaultName": {
                    "value": "[parameters('name')]"
                  },
                  "name": {
                    "value": "[tryGet(coalesce(parameters('backups'), createArray())[copyIndex()], 'name')]"
                  },
                  "label": {
                    "value": "[tryGet(coalesce(parameters('backups'), createArray())[copyIndex()], 'label')]"
                  },
                  "snapshotName": {
                    "value": "[tryGet(coalesce(parameters('backups'), createArray())[copyIndex()], 'snapshotName')]"
                  },
                  "volumeName": {
                    "value": "[coalesce(parameters('backups'), createArray())[copyIndex()].volumeName]"
                  },
                  "capacityPoolName": {
                    "value": "[coalesce(parameters('backups'), createArray())[copyIndex()].capacityPoolName]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "languageVersion": "2.0",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.33.13.18514",
                      "templateHash": "10519572323483923146"
                    },
                    "name": "Azure NetApp Files Volume Backup",
                    "description": "This module deploys a backup of a NetApp Files Volume."
                  },
                  "parameters": {
                    "name": {
                      "type": "string",
                      "defaultValue": "backup",
                      "metadata": {
                        "description": "Optional. The name of the backup."
                      }
                    },
                    "backupVaultName": {
                      "type": "string",
                      "metadata": {
                        "description": "Conditional. The name of the parent backup vault. Required if the template is used in a standalone deployment."
                      }
                    },
                    "netAppAccountName": {
                      "type": "string",
                      "metadata": {
                        "description": "Conditional. The name of the parent NetApp account. Required if the template is used in a standalone deployment."
                      }
                    },
                    "label": {
                      "type": "string",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Label for backup."
                      }
                    },
                    "snapshotName": {
                      "type": "string",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The name of the snapshot."
                      }
                    },
                    "volumeName": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The name of the volume to backup."
                      }
                    },
                    "capacityPoolName": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The name of the capacity pool containing the volume."
                      }
                    }
                  },
                  "resources": {
                    "netAppAccount::remoteCapacityPool::volume": {
                      "existing": true,
                      "type": "Microsoft.NetApp/netAppAccounts/capacityPools/volumes",
                      "apiVersion": "2024-07-01",
                      "name": "[format('{0}/{1}/{2}', parameters('netAppAccountName'), parameters('capacityPoolName'), parameters('volumeName'))]"
                    },
                    "netAppAccount::backupVault": {
                      "existing": true,
                      "type": "Microsoft.NetApp/netAppAccounts/backupVaults",
                      "apiVersion": "2024-03-01",
                      "name": "[format('{0}/{1}', parameters('netAppAccountName'), parameters('backupVaultName'))]"
                    },
                    "netAppAccount::remoteCapacityPool": {
                      "existing": true,
                      "type": "Microsoft.NetApp/netAppAccounts/capacityPools",
                      "apiVersion": "2024-03-01",
                      "name": "[format('{0}/{1}', parameters('netAppAccountName'), parameters('capacityPoolName'))]"
                    },
                    "netAppAccount": {
                      "existing": true,
                      "type": "Microsoft.NetApp/netAppAccounts",
                      "apiVersion": "2024-03-01",
                      "name": "[parameters('netAppAccountName')]"
                    },
                    "backup": {
                      "type": "Microsoft.NetApp/netAppAccounts/backupVaults/backups",
                      "apiVersion": "2024-03-01",
                      "name": "[format('{0}/{1}/{2}', parameters('netAppAccountName'), parameters('backupVaultName'), parameters('name'))]",
                      "properties": {
                        "label": "[parameters('label')]",
                        "snapshotName": "[parameters('snapshotName')]",
                        "volumeResourceId": "[resourceId('Microsoft.NetApp/netAppAccounts/capacityPools/volumes', parameters('netAppAccountName'), parameters('capacityPoolName'), parameters('volumeName'))]"
                      }
                    }
                  },
                  "outputs": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the backup."
                      },
                      "value": "[parameters('name')]"
                    },
                    "resourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "The Resource ID of the backup."
                      },
                      "value": "[resourceId('Microsoft.NetApp/netAppAccounts/backupVaults/backups', parameters('netAppAccountName'), parameters('backupVaultName'), parameters('name'))]"
                    },
                    "resourceGroupName": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the Resource Group the backup was created in."
                      },
                      "value": "[resourceGroup().name]"
                    }
                  }
                }
              },
              "dependsOn": [
                "backupVault"
              ]
            }
          },
          "outputs": {
            "name": {
              "type": "string",
              "metadata": {
                "description": "The name of the backup vault."
              },
              "value": "[parameters('name')]"
            },
            "resourceId": {
              "type": "string",
              "metadata": {
                "description": "The Resource ID of the backup vault."
              },
              "value": "[resourceId('Microsoft.NetApp/netAppAccounts/backupVaults', parameters('netAppAccountName'), parameters('name'))]"
            },
            "resourceGroupName": {
              "type": "string",
              "metadata": {
                "description": "The name of the Resource Group the backup vault was created in."
              },
              "value": "[resourceGroup().name]"
            },
            "location": {
              "type": "string",
              "metadata": {
                "description": "The location the resource was deployed into."
              },
              "value": "[reference('backupVault', '2024-03-01', 'full').location]"
            }
          }
        }
      },
      "dependsOn": [
        "netAppAccount"
      ]
    },
    "netAppAccount_capacityPools": {
      "copy": {
        "name": "netAppAccount_capacityPools",
        "count": "[length(coalesce(parameters('capacityPools'), createArray()))]"
      },
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('{0}-ANFAccount-CapPool-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "netAppAccountName": {
            "value": "[parameters('name')]"
          },
          "name": {
            "value": "[coalesce(parameters('capacityPools'), createArray())[copyIndex()].name]"
          },
          "size": {
            "value": "[coalesce(parameters('capacityPools'), createArray())[copyIndex()].size]"
          },
          "location": {
            "value": "[coalesce(tryGet(coalesce(parameters('capacityPools'), createArray())[copyIndex()], 'location'), parameters('location'))]"
          },
          "serviceLevel": {
            "value": "[coalesce(tryGet(coalesce(parameters('capacityPools'), createArray())[copyIndex()], 'serviceLevel'), 'Standard')]"
          },
          "qosType": {
            "value": "[coalesce(tryGet(coalesce(parameters('capacityPools'), createArray())[copyIndex()], 'qosType'), 'Auto')]"
          },
          "volumes": {
            "value": "[coalesce(tryGet(coalesce(parameters('capacityPools'), createArray())[copyIndex()], 'volumes'), createArray())]"
          },
          "coolAccess": {
            "value": "[coalesce(tryGet(coalesce(parameters('capacityPools'), createArray())[copyIndex()], 'coolAccess'), false())]"
          },
          "roleAssignments": {
            "value": "[coalesce(tryGet(coalesce(parameters('capacityPools'), createArray())[copyIndex()], 'roleAssignments'), createArray())]"
          },
          "encryptionType": {
            "value": "[coalesce(tryGet(coalesce(parameters('capacityPools'), createArray())[copyIndex()], 'encryptionType'), 'Single')]"
          },
          "tags": {
            "value": "[coalesce(tryGet(coalesce(parameters('capacityPools'), createArray())[copyIndex()], 'tags'), parameters('tags'))]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "languageVersion": "2.0",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.33.13.18514",
              "templateHash": "2539920372355196545"
            },
            "name": "Azure NetApp Files Capacity Pools",
            "description": "This module deploys an Azure NetApp Files Capacity Pool."
          },
          "definitions": {
            "volumeType": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. The name of the pool volume."
                  }
                },
                "coolAccess": {
                  "type": "bool",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. If enabled (true) the pool can contain cool Access enabled volumes."
                  }
                },
                "coolnessPeriod": {
                  "type": "int",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Specifies the number of days after which data that is not accessed by clients will be tiered."
                  }
                },
                "coolAccessRetrievalPolicy": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Determines the data retrieval behavior from the cool tier to standard storage based on the read pattern for cool access enabled volumes (Default/Never/Read)."
                  }
                },
                "encryptionKeySource": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The source of the encryption key."
                  }
                },
                "keyVaultPrivateEndpointResourceId": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The resource ID of the key vault private endpoint."
                  }
                },
                "dataProtection": {
                  "$ref": "#/definitions/dataProtectionType",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. DataProtection type volumes include an object containing details of the replication."
                  }
                },
                "location": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Location of the pool volume."
                  }
                },
                "zones": {
                  "type": "array",
                  "items": {
                    "type": "int"
                  },
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Zone where the volume will be placed."
                  }
                },
                "serviceLevel": {
                  "type": "string",
                  "allowedValues": [
                    "Premium",
                    "Standard",
                    "StandardZRS",
                    "Ultra"
                  ],
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The pool service level. Must match the one of the parent capacity pool."
                  }
                },
                "networkFeatures": {
                  "type": "string",
                  "allowedValues": [
                    "Basic",
                    "Basic_Standard",
                    "Standard",
                    "Standard_Basic"
                  ],
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Network feature for the volume."
                  }
                },
                "creationToken": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. A unique file path for the volume. This is the name of the volume export. A volume is mounted using the export path. File path must start with an alphabetical character and be unique within the subscription."
                  }
                },
                "usageThreshold": {
                  "type": "int",
                  "metadata": {
                    "description": "Required. Maximum storage quota allowed for a file system in bytes."
                  }
                },
                "protocolTypes": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Set of protocol types."
                  }
                },
                "subnetResourceId": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. The Azure Resource URI for a delegated subnet. Must have the delegation Microsoft.NetApp/volumes."
                  }
                },
                "exportPolicy": {
                  "$ref": "#/definitions/exportPolicyType",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Export policy rules."
                  }
                },
                "roleAssignments": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/roleAssignmentType"
                  },
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Array of role assignments to create."
                  }
                },
                "smbEncryption": {
                  "type": "bool",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Enables SMB encryption. Only applicable for SMB/DualProtocol volume."
                  }
                },
                "smbContinuouslyAvailable": {
                  "type": "bool",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Enables continuously available share property for SMB volume. Only applicable for SMB volume."
                  }
                },
                "smbNonBrowsable": {
                  "type": "string",
                  "allowedValues": [
                    "Disabled",
                    "Enabled"
                  ],
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Enables non-browsable property for SMB Shares. Only applicable for SMB/DualProtocol volume."
                  }
                },
                "kerberosEnabled": {
                  "type": "bool",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Define if a volume is KerberosEnabled."
                  }
                }
              },
              "metadata": {
                "__bicep_export!": true,
                "description": "The type for a volume in the capacity pool."
              }
            },
            "_1.backupType": {
              "type": "object",
              "properties": {
                "backupPolicyName": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. The name of the backup policy to link."
                  }
                },
                "policyEnforced": {
                  "type": "bool",
                  "metadata": {
                    "description": "Required. Enable to enforce the policy."
                  }
                },
                "backupVaultName": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. The name of the Backup Vault."
                  }
                }
              },
              "metadata": {
                "description": "The type for the backup properties.",
                "__bicep_imported_from!": {
                  "sourceTemplate": "volume/main.bicep"
                }
              }
            },
            "_1.replicationType": {
              "type": "object",
              "properties": {
                "endpointType": {
                  "type": "string",
                  "allowedValues": [
                    "dst",
                    "src"
                  ],
                  "metadata": {
                    "description": "Required. Indicates whether the local volume is the source or destination for the Volume Replication."
                  }
                },
                "remoteVolumeRegion": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. The remote region for the other end of the Volume Replication."
                  }
                },
                "remoteVolumeResourceId": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. The resource ID of the remote volume."
                  }
                },
                "replicationSchedule": {
                  "type": "string",
                  "allowedValues": [
                    "_10minutely",
                    "daily",
                    "hourly"
                  ],
                  "metadata": {
                    "description": "Required. The replication schedule for the volume."
                  }
                }
              },
              "metadata": {
                "description": "The type for the replication properties.",
                "__bicep_imported_from!": {
                  "sourceTemplate": "volume/main.bicep"
                }
              }
            },
            "_1.snapshotType": {
              "type": "object",
              "properties": {
                "snapshotPolicyName": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. The name of the snapshot policy to link."
                  }
                }
              },
              "metadata": {
                "description": "The type for the snapshot properties.",
                "__bicep_imported_from!": {
                  "sourceTemplate": "volume/main.bicep"
                }
              }
            },
            "dataProtectionType": {
              "type": "object",
              "properties": {
                "replication": {
                  "$ref": "#/definitions/_1.replicationType",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Replication properties."
                  }
                },
                "backup": {
                  "$ref": "#/definitions/_1.backupType",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Backup properties."
                  }
                },
                "snapshot": {
                  "$ref": "#/definitions/_1.snapshotType",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Snapshot properties."
                  }
                }
              },
              "metadata": {
                "description": "The type for the data protection properties.",
                "__bicep_imported_from!": {
                  "sourceTemplate": "volume/main.bicep"
                }
              }
            },
            "exportPolicyType": {
              "type": "object",
              "properties": {
                "rules": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "ruleIndex": {
                        "type": "int",
                        "metadata": {
                          "description": "Required. Order index."
                        }
                      },
                      "allowedClients": {
                        "type": "string",
                        "nullable": true,
                        "metadata": {
                          "description": "Optional. Client ingress specification as comma separated string with IPv4 CIDRs, IPv4 host addresses and host names."
                        }
                      },
                      "chownMode": {
                        "type": "string",
                        "allowedValues": [
                          "Restricted",
                          "Unrestricted"
                        ],
                        "nullable": true,
                        "metadata": {
                          "description": "Optional. This parameter specifies who is authorized to change the ownership of a file. restricted - Only root user can change the ownership of the file. unrestricted - Non-root users can change ownership of files that they own."
                        }
                      },
                      "cifs": {
                        "type": "bool",
                        "nullable": true,
                        "metadata": {
                          "description": "Optional. Allows CIFS protocol."
                        }
                      },
                      "hasRootAccess": {
                        "type": "bool",
                        "nullable": true,
                        "metadata": {
                          "description": "Optional. Has root access to volume."
                        }
                      },
                      "kerberos5ReadOnly": {
                        "type": "bool",
                        "metadata": {
                          "description": "Required. Kerberos5 Read only access."
                        }
                      },
                      "kerberos5ReadWrite": {
                        "type": "bool",
                        "metadata": {
                          "description": "Required. Kerberos5 Read and write access."
                        }
                      },
                      "kerberos5iReadOnly": {
                        "type": "bool",
                        "metadata": {
                          "description": "Required. Kerberos5i Read only access."
                        }
                      },
                      "kerberos5iReadWrite": {
                        "type": "bool",
                        "metadata": {
                          "description": "Required. Kerberos5i Read and write access."
                        }
                      },
                      "kerberos5pReadOnly": {
                        "type": "bool",
                        "metadata": {
                          "description": "Required. Kerberos5p Read only access."
                        }
                      },
                      "kerberos5pReadWrite": {
                        "type": "bool",
                        "metadata": {
                          "description": "Required. Kerberos5p Read and write access."
                        }
                      },
                      "nfsv3": {
                        "type": "bool",
                        "metadata": {
                          "description": "Required. Allows NFSv3 protocol. Enable only for NFSv3 type volumes."
                        }
                      },
                      "nfsv41": {
                        "type": "bool",
                        "metadata": {
                          "description": "Required. Allows NFSv4.1 protocol. Enable only for NFSv4.1 type volumes."
                        }
                      },
                      "unixReadOnly": {
                        "type": "bool",
                        "metadata": {
                          "description": "Required. Read only access."
                        }
                      },
                      "unixReadWrite": {
                        "type": "bool",
                        "metadata": {
                          "description": "Required. Read and write access."
                        }
                      }
                    }
                  },
                  "metadata": {
                    "description": "Required. The Export policy rules."
                  }
                }
              },
              "metadata": {
                "description": "The type for export policy rules.",
                "__bicep_imported_from!": {
                  "sourceTemplate": "volume/main.bicep"
                }
              }
            },
            "roleAssignmentType": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The name (as GUID) of the role assignment. If not provided, a GUID will be generated."
                  }
                },
                "roleDefinitionIdOrName": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                  }
                },
                "principalId": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                  }
                },
                "principalType": {
                  "type": "string",
                  "allowedValues": [
                    "Device",
                    "ForeignGroup",
                    "Group",
                    "ServicePrincipal",
                    "User"
                  ],
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The principal type of the assigned principal ID."
                  }
                },
                "description": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The description of the role assignment."
                  }
                },
                "condition": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                  }
                },
                "conditionVersion": {
                  "type": "string",
                  "allowedValues": [
                    "2.0"
                  ],
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Version of the condition."
                  }
                },
                "delegatedManagedIdentityResourceId": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The Resource Id of the delegated managed identity resource."
                  }
                }
              },
              "metadata": {
                "description": "An AVM-aligned type for a role assignment.",
                "__bicep_imported_from!": {
                  "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.4.0"
                }
              }
            }
          },
          "parameters": {
            "netAppAccountName": {
              "type": "string",
              "metadata": {
                "description": "Conditional. The name of the parent NetApp account. Required if the template is used in a standalone deployment."
              }
            },
            "name": {
              "type": "string",
              "metadata": {
                "description": "Required. The name of the capacity pool."
              }
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]",
              "metadata": {
                "description": "Optional. Location of the pool volume."
              }
            },
            "tags": {
              "type": "object",
              "nullable": true,
              "metadata": {
                "description": "Optional. Tags for all resources."
              }
            },
            "serviceLevel": {
              "type": "string",
              "defaultValue": "Standard",
              "allowedValues": [
                "Premium",
                "Standard",
                "StandardZRS",
                "Ultra"
              ],
              "metadata": {
                "description": "Optional. The pool service level."
              }
            },
            "size": {
              "type": "int",
              "metadata": {
                "description": "Required. Provisioned size of the pool (in bytes). Allowed values are in 4TiB chunks (value must be multiply of 4398046511104)."
              }
            },
            "qosType": {
              "type": "string",
              "defaultValue": "Auto",
              "allowedValues": [
                "Auto",
                "Manual"
              ],
              "metadata": {
                "description": "Optional. The qos type of the pool."
              }
            },
            "volumes": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/volumeType"
              },
              "nullable": true,
              "metadata": {
                "description": "Optional. List of volumes to create in the capacity pool."
              }
            },
            "coolAccess": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Optional. If enabled (true) the pool can contain cool Access enabled volumes."
              }
            },
            "roleAssignments": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/roleAssignmentType"
              },
              "nullable": true,
              "metadata": {
                "description": "Optional. Array of role assignments to create."
              }
            },
            "encryptionType": {
              "type": "string",
              "defaultValue": "Single",
              "allowedValues": [
                "Double",
                "Single"
              ],
              "metadata": {
                "description": "Optional. Encryption type of the capacity pool, set encryption type for data at rest for this pool and all volumes in it. This value can only be set when creating new pool."
              }
            }
          },
          "variables": {
            "copy": [
              {
                "name": "formattedRoleAssignments",
                "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]",
                "input": "[union(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')], createObject('roleDefinitionId', coalesce(tryGet(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName), if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName)))))]"
              }
            ],
            "builtInRoleNames": {
              "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
              "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
              "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
              "Role Based Access Control Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]",
              "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]"
            }
          },
          "resources": {
            "netAppAccount": {
              "existing": true,
              "type": "Microsoft.NetApp/netAppAccounts",
              "apiVersion": "2024-03-01",
              "name": "[parameters('netAppAccountName')]"
            },
            "capacityPool": {
              "type": "Microsoft.NetApp/netAppAccounts/capacityPools",
              "apiVersion": "2024-03-01",
              "name": "[format('{0}/{1}', parameters('netAppAccountName'), parameters('name'))]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "properties": {
                "serviceLevel": "[parameters('serviceLevel')]",
                "size": "[parameters('size')]",
                "qosType": "[parameters('qosType')]",
                "coolAccess": "[parameters('coolAccess')]",
                "encryptionType": "[parameters('encryptionType')]"
              }
            },
            "capacityPool_roleAssignments": {
              "copy": {
                "name": "capacityPool_roleAssignments",
                "count": "[length(coalesce(variables('formattedRoleAssignments'), createArray()))]"
              },
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.NetApp/netAppAccounts/{0}/capacityPools/{1}', parameters('netAppAccountName'), parameters('name'))]",
              "name": "[coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'name'), guid(resourceId('Microsoft.NetApp/netAppAccounts/capacityPools', parameters('netAppAccountName'), parameters('name')), coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId, coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId))]",
              "properties": {
                "roleDefinitionId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId]",
                "principalId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId]",
                "description": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'description')]",
                "principalType": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'principalType')]",
                "condition": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition')]",
                "conditionVersion": "[if(not(empty(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                "delegatedManagedIdentityResourceId": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
              },
              "dependsOn": [
                "capacityPool"
              ]
            },
            "capacityPool_volumes": {
              "copy": {
                "name": "capacityPool_volumes",
                "count": "[length(coalesce(parameters('volumes'), createArray()))]",
                "mode": "serial",
                "batchSize": 1
              },
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('{0}-Vol-{1}', deployment().name, copyIndex())]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "netAppAccountName": {
                    "value": "[parameters('netAppAccountName')]"
                  },
                  "capacityPoolName": {
                    "value": "[parameters('name')]"
                  },
                  "name": {
                    "value": "[coalesce(parameters('volumes'), createArray())[copyIndex()].name]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "serviceLevel": {
                    "value": "[parameters('serviceLevel')]"
                  },
                  "creationToken": {
                    "value": "[coalesce(tryGet(coalesce(parameters('volumes'), createArray())[copyIndex()], 'creationToken'), coalesce(parameters('volumes'), createArray())[copyIndex()].name)]"
                  },
                  "usageThreshold": {
                    "value": "[coalesce(parameters('volumes'), createArray())[copyIndex()].usageThreshold]"
                  },
                  "protocolTypes": {
                    "value": "[tryGet(coalesce(parameters('volumes'), createArray())[copyIndex()], 'protocolTypes')]"
                  },
                  "subnetResourceId": {
                    "value": "[coalesce(parameters('volumes'), createArray())[copyIndex()].subnetResourceId]"
                  },
                  "exportPolicy": {
                    "value": "[tryGet(coalesce(parameters('volumes'), createArray())[copyIndex()], 'exportPolicy')]"
                  },
                  "roleAssignments": {
                    "value": "[tryGet(coalesce(parameters('volumes'), createArray())[copyIndex()], 'roleAssignments')]"
                  },
                  "networkFeatures": {
                    "value": "[tryGet(coalesce(parameters('volumes'), createArray())[copyIndex()], 'networkFeatures')]"
                  },
                  "zones": {
                    "value": "[tryGet(coalesce(parameters('volumes'), createArray())[copyIndex()], 'zones')]"
                  },
                  "coolAccess": {
                    "value": "[coalesce(tryGet(coalesce(parameters('volumes'), createArray())[copyIndex()], 'coolAccess'), false())]"
                  },
                  "coolAccessRetrievalPolicy": {
                    "value": "[tryGet(coalesce(parameters('volumes'), createArray())[copyIndex()], 'coolAccessRetrievalPolicy')]"
                  },
                  "coolnessPeriod": {
                    "value": "[coalesce(tryGet(coalesce(parameters('volumes'), createArray())[copyIndex()], 'coolnessPeriod'), 0)]"
                  },
                  "encryptionKeySource": {
                    "value": "[coalesce(tryGet(coalesce(parameters('volumes'), createArray())[copyIndex()], 'encryptionKeySource'), 'Microsoft.NetApp')]"
                  },
                  "keyVaultPrivateEndpointResourceId": {
                    "value": "[tryGet(coalesce(parameters('volumes'), createArray())[copyIndex()], 'keyVaultPrivateEndpointResourceId')]"
                  },
                  "dataProtection": {
                    "value": "[tryGet(coalesce(parameters('volumes'), createArray())[copyIndex()], 'dataProtection')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "languageVersion": "2.0",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.33.13.18514",
                      "templateHash": "8045934107791458590"
                    },
                    "name": "Azure NetApp Files Capacity Pool Volumes",
                    "description": "This module deploys an Azure NetApp Files Capacity Pool Volume."
                  },
                  "definitions": {
                    "dataProtectionType": {
                      "type": "object",
                      "properties": {
                        "replication": {
                          "$ref": "#/definitions/replicationType",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Replication properties."
                          }
                        },
                        "backup": {
                          "$ref": "#/definitions/backupType",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Backup properties."
                          }
                        },
                        "snapshot": {
                          "$ref": "#/definitions/snapshotType",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Snapshot properties."
                          }
                        }
                      },
                      "metadata": {
                        "__bicep_export!": true,
                        "description": "The type for the data protection properties."
                      }
                    },
                    "replicationType": {
                      "type": "object",
                      "properties": {
                        "endpointType": {
                          "type": "string",
                          "allowedValues": [
                            "dst",
                            "src"
                          ],
                          "metadata": {
                            "description": "Required. Indicates whether the local volume is the source or destination for the Volume Replication."
                          }
                        },
                        "remoteVolumeRegion": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. The remote region for the other end of the Volume Replication."
                          }
                        },
                        "remoteVolumeResourceId": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. The resource ID of the remote volume."
                          }
                        },
                        "replicationSchedule": {
                          "type": "string",
                          "allowedValues": [
                            "_10minutely",
                            "daily",
                            "hourly"
                          ],
                          "metadata": {
                            "description": "Required. The replication schedule for the volume."
                          }
                        }
                      },
                      "metadata": {
                        "description": "The type for the replication properties."
                      }
                    },
                    "backupType": {
                      "type": "object",
                      "properties": {
                        "backupPolicyName": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. The name of the backup policy to link."
                          }
                        },
                        "policyEnforced": {
                          "type": "bool",
                          "metadata": {
                            "description": "Required. Enable to enforce the policy."
                          }
                        },
                        "backupVaultName": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. The name of the Backup Vault."
                          }
                        }
                      },
                      "metadata": {
                        "description": "The type for the backup properties."
                      }
                    },
                    "snapshotType": {
                      "type": "object",
                      "properties": {
                        "snapshotPolicyName": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. The name of the snapshot policy to link."
                          }
                        }
                      },
                      "metadata": {
                        "description": "The type for the snapshot properties."
                      }
                    },
                    "exportPolicyType": {
                      "type": "object",
                      "properties": {
                        "rules": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "ruleIndex": {
                                "type": "int",
                                "metadata": {
                                  "description": "Required. Order index."
                                }
                              },
                              "allowedClients": {
                                "type": "string",
                                "nullable": true,
                                "metadata": {
                                  "description": "Optional. Client ingress specification as comma separated string with IPv4 CIDRs, IPv4 host addresses and host names."
                                }
                              },
                              "chownMode": {
                                "type": "string",
                                "allowedValues": [
                                  "Restricted",
                                  "Unrestricted"
                                ],
                                "nullable": true,
                                "metadata": {
                                  "description": "Optional. This parameter specifies who is authorized to change the ownership of a file. restricted - Only root user can change the ownership of the file. unrestricted - Non-root users can change ownership of files that they own."
                                }
                              },
                              "cifs": {
                                "type": "bool",
                                "nullable": true,
                                "metadata": {
                                  "description": "Optional. Allows CIFS protocol."
                                }
                              },
                              "hasRootAccess": {
                                "type": "bool",
                                "nullable": true,
                                "metadata": {
                                  "description": "Optional. Has root access to volume."
                                }
                              },
                              "kerberos5ReadOnly": {
                                "type": "bool",
                                "metadata": {
                                  "description": "Required. Kerberos5 Read only access."
                                }
                              },
                              "kerberos5ReadWrite": {
                                "type": "bool",
                                "metadata": {
                                  "description": "Required. Kerberos5 Read and write access."
                                }
                              },
                              "kerberos5iReadOnly": {
                                "type": "bool",
                                "metadata": {
                                  "description": "Required. Kerberos5i Read only access."
                                }
                              },
                              "kerberos5iReadWrite": {
                                "type": "bool",
                                "metadata": {
                                  "description": "Required. Kerberos5i Read and write access."
                                }
                              },
                              "kerberos5pReadOnly": {
                                "type": "bool",
                                "metadata": {
                                  "description": "Required. Kerberos5p Read only access."
                                }
                              },
                              "kerberos5pReadWrite": {
                                "type": "bool",
                                "metadata": {
                                  "description": "Required. Kerberos5p Read and write access."
                                }
                              },
                              "nfsv3": {
                                "type": "bool",
                                "metadata": {
                                  "description": "Required. Allows NFSv3 protocol. Enable only for NFSv3 type volumes."
                                }
                              },
                              "nfsv41": {
                                "type": "bool",
                                "metadata": {
                                  "description": "Required. Allows NFSv4.1 protocol. Enable only for NFSv4.1 type volumes."
                                }
                              },
                              "unixReadOnly": {
                                "type": "bool",
                                "metadata": {
                                  "description": "Required. Read only access."
                                }
                              },
                              "unixReadWrite": {
                                "type": "bool",
                                "metadata": {
                                  "description": "Required. Read and write access."
                                }
                              }
                            }
                          },
                          "metadata": {
                            "description": "Required. The Export policy rules."
                          }
                        }
                      },
                      "metadata": {
                        "__bicep_export!": true,
                        "description": "The type for export policy rules."
                      }
                    },
                    "roleAssignmentType": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The name (as GUID) of the role assignment. If not provided, a GUID will be generated."
                          }
                        },
                        "roleDefinitionIdOrName": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                          }
                        },
                        "principalId": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                          }
                        },
                        "principalType": {
                          "type": "string",
                          "allowedValues": [
                            "Device",
                            "ForeignGroup",
                            "Group",
                            "ServicePrincipal",
                            "User"
                          ],
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The principal type of the assigned principal ID."
                          }
                        },
                        "description": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The description of the role assignment."
                          }
                        },
                        "condition": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                          }
                        },
                        "conditionVersion": {
                          "type": "string",
                          "allowedValues": [
                            "2.0"
                          ],
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Version of the condition."
                          }
                        },
                        "delegatedManagedIdentityResourceId": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The Resource Id of the delegated managed identity resource."
                          }
                        }
                      },
                      "metadata": {
                        "description": "An AVM-aligned type for a role assignment.",
                        "__bicep_imported_from!": {
                          "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.4.0"
                        }
                      }
                    }
                  },
                  "parameters": {
                    "netAppAccountName": {
                      "type": "string",
                      "metadata": {
                        "description": "Conditional. The name of the parent NetApp account. Required if the template is used in a standalone deployment."
                      }
                    },
                    "capacityPoolName": {
                      "type": "string",
                      "metadata": {
                        "description": "Conditional. The name of the parent capacity pool. Required if the template is used in a standalone deployment."
                      }
                    },
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The name of the pool volume."
                      }
                    },
                    "location": {
                      "type": "string",
                      "defaultValue": "[resourceGroup().location]",
                      "metadata": {
                        "description": "Optional. Location of the pool volume."
                      }
                    },
                    "coolAccess": {
                      "type": "bool",
                      "metadata": {
                        "description": "Required. If enabled (true) the pool can contain cool Access enabled volumes."
                      }
                    },
                    "coolnessPeriod": {
                      "type": "int",
                      "metadata": {
                        "description": "Required. Specifies the number of days after which data that is not accessed by clients will be tiered."
                      }
                    },
                    "coolAccessRetrievalPolicy": {
                      "type": "string",
                      "defaultValue": "Default",
                      "metadata": {
                        "description": "Optional. Determines the data retrieval behavior from the cool tier to standard storage based on the read pattern for cool access enabled volumes (Default/Never/Read)."
                      }
                    },
                    "encryptionKeySource": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The source of the encryption key."
                      }
                    },
                    "keyVaultPrivateEndpointResourceId": {
                      "type": "string",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The resource ID of the key vault private endpoint."
                      }
                    },
                    "volumeType": {
                      "type": "string",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The type of the volume. DataProtection volumes are used for replication."
                      }
                    },
                    "zones": {
                      "type": "array",
                      "items": {
                        "type": "int"
                      },
                      "defaultValue": [
                        1,
                        2,
                        3
                      ],
                      "metadata": {
                        "description": "Optional. Zone where the volume will be placed."
                      }
                    },
                    "serviceLevel": {
                      "type": "string",
                      "defaultValue": "Standard",
                      "allowedValues": [
                        "Premium",
                        "Standard",
                        "StandardZRS",
                        "Ultra"
                      ],
                      "metadata": {
                        "description": "Optional. The pool service level. Must match the one of the parent capacity pool."
                      }
                    },
                    "networkFeatures": {
                      "type": "string",
                      "defaultValue": "Standard",
                      "allowedValues": [
                        "Basic",
                        "Basic_Standard",
                        "Standard",
                        "Standard_Basic"
                      ],
                      "metadata": {
                        "description": "Optional. Network feature for the volume."
                      }
                    },
                    "creationToken": {
                      "type": "string",
                      "defaultValue": "[parameters('name')]",
                      "metadata": {
                        "description": "Optional. A unique file path for the volume. This is the name of the volume export. A volume is mounted using the export path. File path must start with an alphabetical character and be unique within the subscription."
                      }
                    },
                    "usageThreshold": {
                      "type": "int",
                      "metadata": {
                        "description": "Required. Maximum storage quota allowed for a file system in bytes."
                      }
                    },
                    "protocolTypes": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. Set of protocol types."
                      }
                    },
                    "subnetResourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The Azure Resource URI for a delegated subnet. Must have the delegation Microsoft.NetApp/volumes."
                      }
                    },
                    "exportPolicy": {
                      "$ref": "#/definitions/exportPolicyType",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The export policy rules."
                      }
                    },
                    "roleAssignments": {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/roleAssignmentType"
                      },
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Array of role assignments to create."
                      }
                    },
                    "dataProtection": {
                      "$ref": "#/definitions/dataProtectionType",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. DataProtection type volumes include an object containing details of the replication."
                      }
                    },
                    "smbEncryption": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "Optional. Enables SMB encryption. Only applicable for SMB/DualProtocol volume."
                      }
                    },
                    "smbContinuouslyAvailable": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "Optional. Enables continuously available share property for SMB volume. Only applicable for SMB volume."
                      }
                    },
                    "smbNonBrowsable": {
                      "type": "string",
                      "defaultValue": "Disabled",
                      "allowedValues": [
                        "Enabled",
                        "Disabled"
                      ],
                      "metadata": {
                        "description": "Optional. Enables non-browsable property for SMB Shares. Only applicable for SMB/DualProtocol volume."
                      }
                    },
                    "kerberosEnabled": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "Optional. Define if a volume is KerberosEnabled."
                      }
                    }
                  },
                  "variables": {
                    "copy": [
                      {
                        "name": "formattedRoleAssignments",
                        "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]",
                        "input": "[union(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')], createObject('roleDefinitionId', coalesce(tryGet(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName), if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName)))))]"
                      }
                    ],
                    "builtInRoleNames": {
                      "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                      "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                      "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                      "Role Based Access Control Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]",
                      "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]"
                    }
                  },
                  "resources": {
                    "netAppAccount::capacityPool": {
                      "existing": true,
                      "type": "Microsoft.NetApp/netAppAccounts/capacityPools",
                      "apiVersion": "2024-03-01",
                      "name": "[format('{0}/{1}', parameters('netAppAccountName'), parameters('capacityPoolName'))]"
                    },
                    "netAppAccount::backupVault": {
                      "condition": "[not(empty(tryGet(parameters('dataProtection'), 'backup')))]",
                      "existing": true,
                      "type": "Microsoft.NetApp/netAppAccounts/backupVaults",
                      "apiVersion": "2024-07-01",
                      "name": "[format('{0}/{1}', parameters('netAppAccountName'), tryGet(parameters('dataProtection'), 'backup', 'backupVaultName'))]"
                    },
                    "netAppAccount::backupPolicy": {
                      "condition": "[not(empty(tryGet(parameters('dataProtection'), 'backup')))]",
                      "existing": true,
                      "type": "Microsoft.NetApp/netAppAccounts/backupPolicies",
                      "apiVersion": "2024-03-01",
                      "name": "[format('{0}/{1}', parameters('netAppAccountName'), tryGet(parameters('dataProtection'), 'backup', 'backupPolicyName'))]"
                    },
                    "netAppAccount::snapshotPolicy": {
                      "condition": "[not(empty(tryGet(parameters('dataProtection'), 'snapshot')))]",
                      "existing": true,
                      "type": "Microsoft.NetApp/netAppAccounts/snapshotPolicies",
                      "apiVersion": "2024-03-01",
                      "name": "[format('{0}/{1}', parameters('netAppAccountName'), tryGet(parameters('dataProtection'), 'snapshot', 'snapshotPolicyName'))]"
                    },
                    "remoteNetAppAccount::remoteCapacityPool::remoteVolume": {
                      "condition": "[and(and(not(empty(tryGet(parameters('dataProtection'), 'replication'))), not(empty(tryGet(parameters('dataProtection'), 'replication')))), not(empty(tryGet(parameters('dataProtection'), 'replication'))))]",
                      "existing": true,
                      "type": "Microsoft.NetApp/netAppAccounts/capacityPools/volumes",
                      "apiVersion": "2024-07-01",
                      "subscriptionId": "[split(coalesce(tryGet(tryGet(parameters('dataProtection'), 'replication'), 'remoteVolumeResourceId'), '//'), '/')[2]]",
                      "resourceGroup": "[split(coalesce(tryGet(tryGet(parameters('dataProtection'), 'replication'), 'remoteVolumeResourceId'), '////'), '/')[4]]",
                      "name": "[format('{0}/{1}/{2}', split(coalesce(tryGet(tryGet(parameters('dataProtection'), 'replication'), 'remoteVolumeResourceId'), '//'), '/')[8], split(coalesce(tryGet(tryGet(parameters('dataProtection'), 'replication'), 'remoteVolumeResourceId'), '//'), '/')[10], last(split(coalesce(tryGet(tryGet(parameters('dataProtection'), 'replication'), 'remoteVolumeResourceId'), 'dummyvolume'), '/')))]"
                    },
                    "remoteNetAppAccount::remoteCapacityPool": {
                      "condition": "[and(not(empty(tryGet(parameters('dataProtection'), 'replication'))), not(empty(tryGet(parameters('dataProtection'), 'replication'))))]",
                      "existing": true,
                      "type": "Microsoft.NetApp/netAppAccounts/capacityPools",
                      "apiVersion": "2024-03-01",
                      "subscriptionId": "[split(coalesce(tryGet(tryGet(parameters('dataProtection'), 'replication'), 'remoteVolumeResourceId'), '//'), '/')[2]]",
                      "resourceGroup": "[split(coalesce(tryGet(tryGet(parameters('dataProtection'), 'replication'), 'remoteVolumeResourceId'), '////'), '/')[4]]",
                      "name": "[format('{0}/{1}', split(coalesce(tryGet(tryGet(parameters('dataProtection'), 'replication'), 'remoteVolumeResourceId'), '//'), '/')[8], split(coalesce(tryGet(tryGet(parameters('dataProtection'), 'replication'), 'remoteVolumeResourceId'), '//'), '/')[10])]"
                    },
                    "vnet::subnet": {
                      "existing": true,
                      "type": "Microsoft.Network/virtualNetworks/subnets",
                      "apiVersion": "2024-03-01",
                      "subscriptionId": "[split(parameters('subnetResourceId'), '/')[2]]",
                      "resourceGroup": "[split(parameters('subnetResourceId'), '/')[4]]",
                      "name": "[format('{0}/{1}', split(parameters('subnetResourceId'), '/')[8], last(split(parameters('subnetResourceId'), '/')))]"
                    },
                    "netAppAccount": {
                      "existing": true,
                      "type": "Microsoft.NetApp/netAppAccounts",
                      "apiVersion": "2024-03-01",
                      "name": "[parameters('netAppAccountName')]"
                    },
                    "keyVaultPrivateEndpoint": {
                      "condition": "[not(equals(parameters('encryptionKeySource'), 'Microsoft.NetApp'))]",
                      "existing": true,
                      "type": "Microsoft.Network/privateEndpoints",
                      "apiVersion": "2024-03-01",
                      "subscriptionId": "[split(coalesce(parameters('keyVaultPrivateEndpointResourceId'), '//'), '/')[2]]",
                      "resourceGroup": "[split(coalesce(parameters('keyVaultPrivateEndpointResourceId'), '////'), '/')[4]]",
                      "name": "[last(split(coalesce(parameters('keyVaultPrivateEndpointResourceId'), 'dummyVault'), '/'))]"
                    },
                    "remoteNetAppAccount": {
                      "condition": "[not(empty(tryGet(parameters('dataProtection'), 'replication')))]",
                      "existing": true,
                      "type": "Microsoft.NetApp/netAppAccounts",
                      "apiVersion": "2024-03-01",
                      "subscriptionId": "[split(coalesce(tryGet(tryGet(parameters('dataProtection'), 'replication'), 'remoteVolumeResourceId'), '//'), '/')[2]]",
                      "resourceGroup": "[split(coalesce(tryGet(tryGet(parameters('dataProtection'), 'replication'), 'remoteVolumeResourceId'), '////'), '/')[4]]",
                      "name": "[split(coalesce(tryGet(tryGet(parameters('dataProtection'), 'replication'), 'remoteVolumeResourceId'), '//'), '/')[8]]"
                    },
                    "vnet": {
                      "existing": true,
                      "type": "Microsoft.Network/virtualNetworks",
                      "apiVersion": "2024-03-01",
                      "subscriptionId": "[split(parameters('subnetResourceId'), '/')[2]]",
                      "resourceGroup": "[split(parameters('subnetResourceId'), '/')[4]]",
                      "name": "[split(parameters('subnetResourceId'), '/')[8]]"
                    },
                    "volume": {
                      "type": "Microsoft.NetApp/netAppAccounts/capacityPools/volumes",
                      "apiVersion": "2024-03-01",
                      "name": "[format('{0}/{1}/{2}', parameters('netAppAccountName'), parameters('capacityPoolName'), parameters('name'))]",
                      "location": "[parameters('location')]",
                      "properties": "[shallowMerge(createArray(createObject('coolAccess', parameters('coolAccess'), 'coolAccessRetrievalPolicy', parameters('coolAccessRetrievalPolicy'), 'coolnessPeriod', parameters('coolnessPeriod'), 'encryptionKeySource', parameters('encryptionKeySource')), if(not(equals(parameters('encryptionKeySource'), 'Microsoft.NetApp')), createObject('keyVaultPrivateEndpointResourceId', extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(coalesce(parameters('keyVaultPrivateEndpointResourceId'), '//'), '/')[2], split(coalesce(parameters('keyVaultPrivateEndpointResourceId'), '////'), '/')[4]), 'Microsoft.Network/privateEndpoints', last(split(coalesce(parameters('keyVaultPrivateEndpointResourceId'), 'dummyVault'), '/')))), createObject()), if(not(empty(parameters('volumeType'))), createObject('volumeType', parameters('volumeType')), createObject()), createObject('dataProtection', if(not(empty(parameters('dataProtection'))), createObject('replication', if(not(empty(tryGet(parameters('dataProtection'), 'replication'))), createObject('endpointType', tryGet(parameters('dataProtection'), 'replication', 'endpointType'), 'remoteVolumeRegion', extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(coalesce(tryGet(tryGet(parameters('dataProtection'), 'replication'), 'remoteVolumeResourceId'), '//'), '/')[2], split(coalesce(tryGet(tryGet(parameters('dataProtection'), 'replication'), 'remoteVolumeResourceId'), '////'), '/')[4]), 'Microsoft.NetApp/netAppAccounts/capacityPools/volumes', split(coalesce(tryGet(tryGet(parameters('dataProtection'), 'replication'), 'remoteVolumeResourceId'), '//'), '/')[8], split(coalesce(tryGet(tryGet(parameters('dataProtection'), 'replication'), 'remoteVolumeResourceId'), '//'), '/')[10], last(split(coalesce(tryGet(tryGet(parameters('dataProtection'), 'replication'), 'remoteVolumeResourceId'), 'dummyvolume'), '/'))), 'remoteVolumeResourceId', tryGet(parameters('dataProtection'), 'replication', 'remoteVolumeResourceId'), 'replicationSchedule', tryGet(parameters('dataProtection'), 'replication', 'replicationSchedule')), createObject()), 'backup', if(not(empty(tryGet(parameters('dataProtection'), 'backup'))), createObject('backupPolicyId', resourceId('Microsoft.NetApp/netAppAccounts/backupPolicies', parameters('netAppAccountName'), tryGet(parameters('dataProtection'), 'backup', 'backupPolicyName')), 'policyEnforced', coalesce(tryGet(parameters('dataProtection'), 'backup', 'policyEnforced'), false()), 'backupVaultId', resourceId('Microsoft.NetApp/netAppAccounts/backupVaults', parameters('netAppAccountName'), tryGet(parameters('dataProtection'), 'backup', 'backupVaultName'))), createObject()), 'snapshot', if(not(empty(tryGet(parameters('dataProtection'), 'snapshot'))), createObject('snapshotPolicyId', resourceId('Microsoft.NetApp/netAppAccounts/snapshotPolicies', parameters('netAppAccountName'), tryGet(parameters('dataProtection'), 'snapshot', 'snapshotPolicyName'))), createObject())), null()), 'networkFeatures', parameters('networkFeatures'), 'serviceLevel', parameters('serviceLevel'), 'creationToken', parameters('creationToken'), 'usageThreshold', parameters('usageThreshold'), 'protocolTypes', parameters('protocolTypes'), 'subnetId', extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('subnetResourceId'), '/')[2], split(parameters('subnetResourceId'), '/')[4]), 'Microsoft.Network/virtualNetworks/subnets', split(parameters('subnetResourceId'), '/')[8], last(split(parameters('subnetResourceId'), '/'))), 'exportPolicy', parameters('exportPolicy'), 'smbContinuouslyAvailable', parameters('smbContinuouslyAvailable'), 'smbEncryption', parameters('smbEncryption'), 'smbNonBrowsable', parameters('smbNonBrowsable'), 'kerberosEnabled', parameters('kerberosEnabled'))))]",
                      "zones": "[map(parameters('zones'), lambda('zone', format('{0}', lambdaVariables('zone'))))]"
                    },
                    "volume_roleAssignments": {
                      "copy": {
                        "name": "volume_roleAssignments",
                        "count": "[length(coalesce(variables('formattedRoleAssignments'), createArray()))]"
                      },
                      "type": "Microsoft.Authorization/roleAssignments",
                      "apiVersion": "2022-04-01",
                      "scope": "[format('Microsoft.NetApp/netAppAccounts/{0}/capacityPools/{1}/volumes/{2}', parameters('netAppAccountName'), parameters('capacityPoolName'), parameters('name'))]",
                      "name": "[coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'name'), guid(resourceId('Microsoft.NetApp/netAppAccounts/capacityPools/volumes', parameters('netAppAccountName'), parameters('capacityPoolName'), parameters('name')), coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId, coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId))]",
                      "properties": {
                        "roleDefinitionId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId]",
                        "principalId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId]",
                        "description": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'description')]",
                        "principalType": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'principalType')]",
                        "condition": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition')]",
                        "conditionVersion": "[if(not(empty(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                        "delegatedManagedIdentityResourceId": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
                      },
                      "dependsOn": [
                        "volume"
                      ]
                    }
                  },
                  "outputs": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the Volume."
                      },
                      "value": "[parameters('name')]"
                    },
                    "resourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "The Resource ID of the Volume."
                      },
                      "value": "[resourceId('Microsoft.NetApp/netAppAccounts/capacityPools/volumes', parameters('netAppAccountName'), parameters('capacityPoolName'), parameters('name'))]"
                    },
                    "resourceGroupName": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the Resource Group the Volume was created in."
                      },
                      "value": "[resourceGroup().name]"
                    },
                    "location": {
                      "type": "string",
                      "metadata": {
                        "description": "The location the resource was deployed into."
                      },
                      "value": "[reference('volume', '2024-03-01', 'full').location]"
                    }
                  }
                }
              },
              "dependsOn": [
                "capacityPool"
              ]
            }
          },
          "outputs": {
            "name": {
              "type": "string",
              "metadata": {
                "description": "The name of the Capacity Pool."
              },
              "value": "[parameters('name')]"
            },
            "resourceId": {
              "type": "string",
              "metadata": {
                "description": "The resource ID of the Capacity Pool."
              },
              "value": "[resourceId('Microsoft.NetApp/netAppAccounts/capacityPools', parameters('netAppAccountName'), parameters('name'))]"
            },
            "resourceGroupName": {
              "type": "string",
              "metadata": {
                "description": "The name of the Resource Group the Capacity Pool was created in."
              },
              "value": "[resourceGroup().name]"
            },
            "location": {
              "type": "string",
              "metadata": {
                "description": "The location the resource was deployed into."
              },
              "value": "[reference('capacityPool', '2024-03-01', 'full').location]"
            },
            "volumeResourceIds": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "metadata": {
                "description": "The resource IDs of the volume created in the capacity pool."
              },
              "copy": {
                "count": "[length(coalesce(parameters('volumes'), createArray()))]",
                "input": "[reference(format('capacityPool_volumes[{0}]', copyIndex())).outputs.resourceId.value]"
              }
            }
          }
        }
      },
      "dependsOn": [
        "netAppAccount",
        "netAppAccount_backupPolicies",
        "netAppAccount_backupVault",
        "netAppAccount_snapshotPolicies"
      ]
    },
    "netAppAccount_backupVaultBackups": {
      "condition": "[not(empty(tryGet(parameters('backupVault'), 'backups')))]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('{0}-ANFAccount-BackupVault-Backups', uniqueString(deployment().name, parameters('location')))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "netAppAccountName": {
            "value": "[parameters('name')]"
          },
          "name": {
            "value": "[tryGet(parameters('backupVault'), 'name')]"
          },
          "backups": {
            "value": "[tryGet(parameters('backupVault'), 'backups')]"
          },
          "location": {
            "value": "[coalesce(tryGet(parameters('backupVault'), 'location'), parameters('location'))]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "languageVersion": "2.0",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.33.13.18514",
              "templateHash": "1432647773332765235"
            },
            "name": "Azure NetApp Files Volume Backup Vault",
            "description": "This module deploys a NetApp Files Backup Vault."
          },
          "definitions": {
            "backupType": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The name of the backup."
                  }
                },
                "label": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Label for backup."
                  }
                },
                "snapshotName": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The name of the snapshot."
                  }
                },
                "volumeName": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. The name of the volume to backup."
                  }
                },
                "capacityPoolName": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. The name of the capacity pool containing the volume."
                  }
                }
              },
              "metadata": {
                "__bicep_export!": true,
                "description": "The type for a backup."
              }
            }
          },
          "parameters": {
            "name": {
              "type": "string",
              "defaultValue": "vault",
              "metadata": {
                "description": "Optional. The name of the backup vault."
              }
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]",
              "metadata": {
                "description": "Optional. Location of the backup vault."
              }
            },
            "netAppAccountName": {
              "type": "string",
              "metadata": {
                "description": "Conditional. The name of the parent NetApp account. Required if the template is used in a standalone deployment."
              }
            },
            "backups": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/backupType"
              },
              "nullable": true,
              "metadata": {
                "description": "Optional. The list of backups to create."
              }
            }
          },
          "resources": {
            "netAppAccount": {
              "existing": true,
              "type": "Microsoft.NetApp/netAppAccounts",
              "apiVersion": "2024-03-01",
              "name": "[parameters('netAppAccountName')]"
            },
            "backupVault": {
              "type": "Microsoft.NetApp/netAppAccounts/backupVaults",
              "apiVersion": "2024-03-01",
              "name": "[format('{0}/{1}', parameters('netAppAccountName'), parameters('name'))]",
              "location": "[parameters('location')]",
              "properties": {}
            },
            "backupVault_backups": {
              "copy": {
                "name": "backupVault_backups",
                "count": "[length(coalesce(parameters('backups'), createArray()))]"
              },
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('{0}-ANF-Backup-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "netAppAccountName": {
                    "value": "[parameters('netAppAccountName')]"
                  },
                  "backupVaultName": {
                    "value": "[parameters('name')]"
                  },
                  "name": {
                    "value": "[tryGet(coalesce(parameters('backups'), createArray())[copyIndex()], 'name')]"
                  },
                  "label": {
                    "value": "[tryGet(coalesce(parameters('backups'), createArray())[copyIndex()], 'label')]"
                  },
                  "snapshotName": {
                    "value": "[tryGet(coalesce(parameters('backups'), createArray())[copyIndex()], 'snapshotName')]"
                  },
                  "volumeName": {
                    "value": "[coalesce(parameters('backups'), createArray())[copyIndex()].volumeName]"
                  },
                  "capacityPoolName": {
                    "value": "[coalesce(parameters('backups'), createArray())[copyIndex()].capacityPoolName]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "languageVersion": "2.0",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.33.13.18514",
                      "templateHash": "10519572323483923146"
                    },
                    "name": "Azure NetApp Files Volume Backup",
                    "description": "This module deploys a backup of a NetApp Files Volume."
                  },
                  "parameters": {
                    "name": {
                      "type": "string",
                      "defaultValue": "backup",
                      "metadata": {
                        "description": "Optional. The name of the backup."
                      }
                    },
                    "backupVaultName": {
                      "type": "string",
                      "metadata": {
                        "description": "Conditional. The name of the parent backup vault. Required if the template is used in a standalone deployment."
                      }
                    },
                    "netAppAccountName": {
                      "type": "string",
                      "metadata": {
                        "description": "Conditional. The name of the parent NetApp account. Required if the template is used in a standalone deployment."
                      }
                    },
                    "label": {
                      "type": "string",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Label for backup."
                      }
                    },
                    "snapshotName": {
                      "type": "string",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The name of the snapshot."
                      }
                    },
                    "volumeName": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The name of the volume to backup."
                      }
                    },
                    "capacityPoolName": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The name of the capacity pool containing the volume."
                      }
                    }
                  },
                  "resources": {
                    "netAppAccount::remoteCapacityPool::volume": {
                      "existing": true,
                      "type": "Microsoft.NetApp/netAppAccounts/capacityPools/volumes",
                      "apiVersion": "2024-07-01",
                      "name": "[format('{0}/{1}/{2}', parameters('netAppAccountName'), parameters('capacityPoolName'), parameters('volumeName'))]"
                    },
                    "netAppAccount::backupVault": {
                      "existing": true,
                      "type": "Microsoft.NetApp/netAppAccounts/backupVaults",
                      "apiVersion": "2024-03-01",
                      "name": "[format('{0}/{1}', parameters('netAppAccountName'), parameters('backupVaultName'))]"
                    },
                    "netAppAccount::remoteCapacityPool": {
                      "existing": true,
                      "type": "Microsoft.NetApp/netAppAccounts/capacityPools",
                      "apiVersion": "2024-03-01",
                      "name": "[format('{0}/{1}', parameters('netAppAccountName'), parameters('capacityPoolName'))]"
                    },
                    "netAppAccount": {
                      "existing": true,
                      "type": "Microsoft.NetApp/netAppAccounts",
                      "apiVersion": "2024-03-01",
                      "name": "[parameters('netAppAccountName')]"
                    },
                    "backup": {
                      "type": "Microsoft.NetApp/netAppAccounts/backupVaults/backups",
                      "apiVersion": "2024-03-01",
                      "name": "[format('{0}/{1}/{2}', parameters('netAppAccountName'), parameters('backupVaultName'), parameters('name'))]",
                      "properties": {
                        "label": "[parameters('label')]",
                        "snapshotName": "[parameters('snapshotName')]",
                        "volumeResourceId": "[resourceId('Microsoft.NetApp/netAppAccounts/capacityPools/volumes', parameters('netAppAccountName'), parameters('capacityPoolName'), parameters('volumeName'))]"
                      }
                    }
                  },
                  "outputs": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the backup."
                      },
                      "value": "[parameters('name')]"
                    },
                    "resourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "The Resource ID of the backup."
                      },
                      "value": "[resourceId('Microsoft.NetApp/netAppAccounts/backupVaults/backups', parameters('netAppAccountName'), parameters('backupVaultName'), parameters('name'))]"
                    },
                    "resourceGroupName": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the Resource Group the backup was created in."
                      },
                      "value": "[resourceGroup().name]"
                    }
                  }
                }
              },
              "dependsOn": [
                "backupVault"
              ]
            }
          },
          "outputs": {
            "name": {
              "type": "string",
              "metadata": {
                "description": "The name of the backup vault."
              },
              "value": "[parameters('name')]"
            },
            "resourceId": {
              "type": "string",
              "metadata": {
                "description": "The Resource ID of the backup vault."
              },
              "value": "[resourceId('Microsoft.NetApp/netAppAccounts/backupVaults', parameters('netAppAccountName'), parameters('name'))]"
            },
            "resourceGroupName": {
              "type": "string",
              "metadata": {
                "description": "The name of the Resource Group the backup vault was created in."
              },
              "value": "[resourceGroup().name]"
            },
            "location": {
              "type": "string",
              "metadata": {
                "description": "The location the resource was deployed into."
              },
              "value": "[reference('backupVault', '2024-03-01', 'full').location]"
            }
          }
        }
      },
      "dependsOn": [
        "netAppAccount",
        "netAppAccount_capacityPools"
      ]
    }
  },
  "outputs": {
    "name": {
      "type": "string",
      "metadata": {
        "description": "The name of the NetApp account."
      },
      "value": "[parameters('name')]"
    },
    "resourceId": {
      "type": "string",
      "metadata": {
        "description": "The Resource ID of the NetApp account."
      },
      "value": "[resourceId('Microsoft.NetApp/netAppAccounts', parameters('name'))]"
    },
    "resourceGroupName": {
      "type": "string",
      "metadata": {
        "description": "The name of the Resource Group the NetApp account was created in."
      },
      "value": "[resourceGroup().name]"
    },
    "location": {
      "type": "string",
      "metadata": {
        "description": "The location the resource was deployed into."
      },
      "value": "[reference('netAppAccount', '2024-03-01', 'full').location]"
    },
    "capacityPoolResourceIds": {
      "type": "array",
      "items": {
        "type": "object",
        "properties": {
          "resourceId": {
            "type": "string"
          },
          "volumeResourceIds": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "metadata": {
        "description": "The resource IDs of the created capacity pools & their volumes."
      },
      "copy": {
        "count": "[length(coalesce(parameters('capacityPools'), createArray()))]",
        "input": {
          "resourceId": "[reference(format('netAppAccount_capacityPools[{0}]', copyIndex())).outputs.resourceId.value]",
          "volumeResourceIds": "[reference(format('netAppAccount_capacityPools[{0}]', copyIndex())).outputs.volumeResourceIds.value]"
        }
      }
    }
  }
}