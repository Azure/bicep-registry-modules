{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "languageVersion": "2.0",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "_generator": {
      "name": "bicep",
      "version": "0.31.92.45157",
      "templateHash": "13069593327789090653"
    },
    "name": "Azure Compute Galleries",
    "description": "This module deploys an Azure Compute Gallery (formerly known as Shared Image Gallery).",
    "owner": "Azure/module-maintainers"
  },
  "definitions": {
    "imageType": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "minLength": 1,
          "maxLength": 80,
          "metadata": {
            "description": "Required. Name of the image definition."
          }
        },
        "description": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "Optional. The description of this gallery image definition resource. This property is updatable."
          }
        },
        "osType": {
          "type": "string",
          "allowedValues": [
            "Linux",
            "Windows"
          ],
          "metadata": {
            "description": "Required. This property allows you to specify the type of the OS that is included in the disk when creating a VM from a managed image."
          }
        },
        "osState": {
          "type": "string",
          "allowedValues": [
            "Generalized",
            "Specialized"
          ],
          "metadata": {
            "description": "Required. This property allows the user to specify the state of the OS of the image."
          }
        },
        "identifier": {
          "$ref": "#/definitions/identifierType",
          "metadata": {
            "description": "Required. This is the gallery image definition identifier."
          }
        },
        "vCPUs": {
          "$ref": "#/definitions/resourceRangeType",
          "nullable": true,
          "metadata": {
            "description": "Optional. Describes the resource range (1-128 CPU cores). Defaults to min=1, max=4."
          }
        },
        "memory": {
          "$ref": "#/definitions/resourceRangeType",
          "nullable": true,
          "metadata": {
            "description": "Optional. Describes the resource range (1-4000 GB RAM). Defaults to min=4, max=16."
          }
        },
        "hyperVGeneration": {
          "type": "string",
          "allowedValues": [
            "V1",
            "V2"
          ],
          "nullable": true,
          "metadata": {
            "description": "Optional. The hypervisor generation of the Virtual Machine. If this value is not specified, then it is determined by the securityType parameter. If the securityType parameter is specified, then the value of hyperVGeneration will be V2, else V1."
          }
        },
        "securityType": {
          "type": "string",
          "allowedValues": [
            "ConfidentialVM",
            "ConfidentialVMSupported",
            "Standard",
            "TrustedLaunch",
            "TrustedLaunchAndConfidentialVmSupported",
            "TrustedLaunchSupported"
          ],
          "nullable": true,
          "metadata": {
            "description": "Optional. The security type of the image. Requires a hyperVGeneration V2. Defaults to `Standard`."
          }
        },
        "isAcceleratedNetworkSupported": {
          "type": "bool",
          "nullable": true,
          "metadata": {
            "description": "Optional. Specify if the image supports accelerated networking. Defaults to true."
          }
        },
        "isHibernateSupported": {
          "type": "bool",
          "nullable": true,
          "metadata": {
            "description": "Optional. Specify if the image supports hibernation."
          }
        },
        "architecture": {
          "type": "string",
          "allowedValues": [
            "Arm64",
            "x64"
          ],
          "nullable": true,
          "metadata": {
            "description": "Optional. The architecture of the image. Applicable to OS disks only."
          }
        },
        "eula": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "Optional. The Eula agreement for the gallery image definition."
          }
        },
        "privacyStatementUri": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "Optional. The privacy statement uri."
          }
        },
        "releaseNoteUri": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "Optional. The release note uri. Has to be a valid URL."
          }
        },
        "purchasePlan": {
          "$ref": "#/definitions/purchasePlanType",
          "nullable": true,
          "metadata": {
            "description": "Optional. Describes the gallery image definition purchase plan. This is used by marketplace images."
          }
        },
        "endOfLife": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "Optional. The end of life date of the gallery image definition. This property can be used for decommissioning purposes. This property is updatable."
          }
        },
        "excludedDiskTypes": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "nullable": true,
          "metadata": {
            "description": "Optional. Describes the disallowed disk types."
          }
        }
      },
      "metadata": {
        "__bicep_export!": true
      }
    },
    "applicationsType": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "minLength": 1,
          "maxLength": 80,
          "metadata": {
            "description": "Required. Name of the application definition."
          }
        },
        "supportedOSType": {
          "type": "string",
          "allowedValues": [
            "Linux",
            "Windows"
          ],
          "metadata": {
            "description": "Required. The OS type of the application."
          }
        },
        "description": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "Optional. The description of this gallery application definition resource. This property is updatable."
          }
        },
        "eula": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "Optional. The Eula agreement for the gallery application definition."
          }
        },
        "privacyStatementUri": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "Optional. The privacy statement uri."
          }
        },
        "releaseNoteUri": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "Optional. The release note uri. Has to be a valid URL."
          }
        },
        "endOfLifeDate": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "Optional. The end of life date of the gallery application definition. This property can be used for decommissioning purposes. This property is updatable."
          }
        },
        "roleAssignments": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/roleAssignmentType"
          },
          "nullable": true,
          "metadata": {
            "description": "Optional. Array of role assignments to create."
          }
        },
        "customActions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/customActionType"
          },
          "nullable": true,
          "metadata": {
            "description": "Optional. A list of custom actions that can be performed with all of the Gallery Application Versions within this Gallery Application."
          }
        },
        "tags": {
          "type": "object",
          "nullable": true,
          "metadata": {
            "description": "Optional. Tags for all resources."
          }
        }
      }
    },
    "customActionType": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "metadata": {
            "description": "Required. The name of the custom action. Must be unique within the Gallery Application Version."
          }
        },
        "script": {
          "type": "string",
          "metadata": {
            "description": "Required. The script to run when executing this custom action."
          }
        },
        "description": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "Optional. Description to help the users understand what this custom action does."
          }
        },
        "parameters": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string",
                "metadata": {
                  "description": "Required. The name of the parameter."
                }
              },
              "type": {
                "type": "string",
                "allowedValues": [
                  "ConfigurationDataBlob",
                  "LogOutputBlob",
                  "String"
                ],
                "nullable": true,
                "metadata": {
                  "description": "Optional. Specifies the type of the custom action parameter."
                }
              },
              "description": {
                "type": "string",
                "nullable": true,
                "metadata": {
                  "description": "Optional. A description to help users understand what this parameter means."
                }
              },
              "defaultValue": {
                "type": "string",
                "nullable": true,
                "metadata": {
                  "description": "Optional. The default value of the parameter. Only applies to string types."
                }
              },
              "required": {
                "type": "bool",
                "nullable": true,
                "metadata": {
                  "description": "Optional. Indicates whether this parameter must be passed when running the custom action."
                }
              }
            }
          },
          "nullable": true,
          "metadata": {
            "description": "Optional. The parameters that this custom action uses."
          }
        }
      },
      "metadata": {
        "__bicep_imported_from!": {
          "sourceTemplate": "application/main.bicep"
        }
      }
    },
    "identifierType": {
      "type": "object",
      "properties": {
        "publisher": {
          "type": "string",
          "metadata": {
            "description": "Required. The name of the gallery image definition publisher."
          }
        },
        "offer": {
          "type": "string",
          "metadata": {
            "description": "Required. The name of the gallery image definition offer."
          }
        },
        "sku": {
          "type": "string",
          "metadata": {
            "description": "Required. The name of the gallery image definition SKU."
          }
        }
      },
      "metadata": {
        "__bicep_imported_from!": {
          "sourceTemplate": "image/main.bicep"
        }
      }
    },
    "lockType": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "Optional. Specify the name of lock."
          }
        },
        "kind": {
          "type": "string",
          "allowedValues": [
            "CanNotDelete",
            "None",
            "ReadOnly"
          ],
          "nullable": true,
          "metadata": {
            "description": "Optional. Specify the type of lock."
          }
        }
      },
      "metadata": {
        "description": "An AVM-aligned type for a lock.",
        "__bicep_imported_from!": {
          "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.3.0"
        }
      }
    },
    "purchasePlanType": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "metadata": {
            "description": "Required. The plan ID."
          }
        },
        "product": {
          "type": "string",
          "metadata": {
            "description": "Required. The product ID."
          }
        },
        "publisher": {
          "type": "string",
          "metadata": {
            "description": "Required. The publisher ID."
          }
        }
      },
      "nullable": true,
      "metadata": {
        "__bicep_imported_from!": {
          "sourceTemplate": "image/main.bicep"
        }
      }
    },
    "resourceRangeType": {
      "type": "object",
      "properties": {
        "min": {
          "type": "int",
          "nullable": true,
          "minValue": 1,
          "metadata": {
            "description": "Optional. The minimum number of the resource."
          }
        },
        "max": {
          "type": "int",
          "nullable": true,
          "metadata": {
            "description": "Optional. The minimum number of the resource."
          }
        }
      },
      "metadata": {
        "__bicep_imported_from!": {
          "sourceTemplate": "image/main.bicep"
        }
      }
    },
    "roleAssignmentType": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "Optional. The name (as GUID) of the role assignment. If not provided, a GUID will be generated."
          }
        },
        "roleDefinitionIdOrName": {
          "type": "string",
          "metadata": {
            "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
          }
        },
        "principalId": {
          "type": "string",
          "metadata": {
            "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
          }
        },
        "principalType": {
          "type": "string",
          "allowedValues": [
            "Device",
            "ForeignGroup",
            "Group",
            "ServicePrincipal",
            "User"
          ],
          "nullable": true,
          "metadata": {
            "description": "Optional. The principal type of the assigned principal ID."
          }
        },
        "description": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "Optional. The description of the role assignment."
          }
        },
        "condition": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
          }
        },
        "conditionVersion": {
          "type": "string",
          "allowedValues": [
            "2.0"
          ],
          "nullable": true,
          "metadata": {
            "description": "Optional. Version of the condition."
          }
        },
        "delegatedManagedIdentityResourceId": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "Optional. The Resource Id of the delegated managed identity resource."
          }
        }
      },
      "metadata": {
        "description": "An AVM-aligned type for a role assignment.",
        "__bicep_imported_from!": {
          "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.3.0"
        }
      }
    }
  },
  "parameters": {
    "name": {
      "type": "string",
      "minLength": 1,
      "metadata": {
        "description": "Required. Name of the Azure Compute Gallery."
      }
    },
    "location": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "Optional. Location for all resources."
      }
    },
    "enableTelemetry": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Optional. Enable/Disable usage telemetry for module."
      }
    },
    "description": {
      "type": "string",
      "nullable": true,
      "metadata": {
        "description": "Optional. Description of the Azure Shared Image Gallery."
      }
    },
    "applications": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/applicationsType"
      },
      "nullable": true,
      "metadata": {
        "description": "Optional. Applications to create."
      }
    },
    "images": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/imageType"
      },
      "nullable": true,
      "metadata": {
        "description": "Optional. Images to create."
      }
    },
    "lock": {
      "$ref": "#/definitions/lockType",
      "nullable": true,
      "metadata": {
        "description": "Optional. The lock settings of the service."
      }
    },
    "roleAssignments": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/roleAssignmentType"
      },
      "nullable": true,
      "metadata": {
        "description": "Optional. Array of role assignments to create."
      }
    },
    "tags": {
      "type": "object",
      "nullable": true,
      "metadata": {
        "example": "  {\n      key1: 'value1'\n      key2: 'value2'\n  }\n  ",
        "description": "Optional. Tags for all resources."
      }
    },
    "sharingProfile": {
      "type": "object",
      "nullable": true,
      "metadata": {
        "description": "Optional. Profile for gallery sharing to subscription or tenant."
      }
    },
    "softDeletePolicy": {
      "type": "object",
      "nullable": true,
      "metadata": {
        "description": "Optional. Soft deletion policy of the gallery."
      }
    }
  },
  "variables": {
    "copy": [
      {
        "name": "formattedRoleAssignments",
        "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]",
        "input": "[union(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')], createObject('roleDefinitionId', coalesce(tryGet(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName), if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName)))))]"
      }
    ],
    "builtInRoleNames": {
      "Compute Gallery Sharing Admin": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '1ef6a3be-d0ac-425d-8c01-acb62866290b')]",
      "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
      "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
      "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
      "Role Based Access Control Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]",
      "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]"
    }
  },
  "resources": {
    "avmTelemetry": {
      "condition": "[parameters('enableTelemetry')]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2024-03-01",
      "name": "[format('46d3xbcp.res.compute-gallery.{0}.{1}', replace('-..--..-', '.', '-'), substring(uniqueString(deployment().name, parameters('location')), 0, 4))]",
      "properties": {
        "mode": "Incremental",
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "resources": [],
          "outputs": {
            "telemetry": {
              "type": "String",
              "value": "For more information, see https://aka.ms/avm/TelemetryInfo"
            }
          }
        }
      }
    },
    "gallery": {
      "type": "Microsoft.Compute/galleries",
      "apiVersion": "2023-07-03",
      "name": "[parameters('name')]",
      "location": "[parameters('location')]",
      "tags": "[parameters('tags')]",
      "properties": {
        "description": "[parameters('description')]",
        "sharingProfile": "[parameters('sharingProfile')]",
        "softDeletePolicy": "[parameters('softDeletePolicy')]"
      }
    },
    "gallery_lock": {
      "condition": "[and(not(empty(coalesce(parameters('lock'), createObject()))), not(equals(tryGet(parameters('lock'), 'kind'), 'None')))]",
      "type": "Microsoft.Authorization/locks",
      "apiVersion": "2020-05-01",
      "scope": "[format('Microsoft.Compute/galleries/{0}', parameters('name'))]",
      "name": "[coalesce(tryGet(parameters('lock'), 'name'), format('lock-{0}', parameters('name')))]",
      "properties": {
        "level": "[coalesce(tryGet(parameters('lock'), 'kind'), '')]",
        "notes": "[if(equals(tryGet(parameters('lock'), 'kind'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot delete or modify the resource or child resources.')]"
      },
      "dependsOn": [
        "gallery"
      ]
    },
    "gallery_roleAssignments": {
      "copy": {
        "name": "gallery_roleAssignments",
        "count": "[length(coalesce(variables('formattedRoleAssignments'), createArray()))]"
      },
      "type": "Microsoft.Authorization/roleAssignments",
      "apiVersion": "2022-04-01",
      "scope": "[format('Microsoft.Compute/galleries/{0}', parameters('name'))]",
      "name": "[coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'name'), guid(resourceId('Microsoft.Compute/galleries', parameters('name')), coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId, coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId))]",
      "properties": {
        "roleDefinitionId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId]",
        "principalId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId]",
        "description": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'description')]",
        "principalType": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'principalType')]",
        "condition": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition')]",
        "conditionVersion": "[if(not(empty(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
        "delegatedManagedIdentityResourceId": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
      },
      "dependsOn": [
        "gallery"
      ]
    },
    "galleries_applications": {
      "copy": {
        "name": "galleries_applications",
        "count": "[length(coalesce(parameters('applications'), createArray()))]"
      },
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('{0}-Gallery-Application-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "location": {
            "value": "[parameters('location')]"
          },
          "name": {
            "value": "[coalesce(parameters('applications'), createArray())[copyIndex()].name]"
          },
          "galleryName": {
            "value": "[parameters('name')]"
          },
          "supportedOSType": {
            "value": "[coalesce(parameters('applications'), createArray())[copyIndex()].supportedOSType]"
          },
          "description": {
            "value": "[tryGet(coalesce(parameters('applications'), createArray())[copyIndex()], 'description')]"
          },
          "eula": {
            "value": "[tryGet(coalesce(parameters('applications'), createArray())[copyIndex()], 'eula')]"
          },
          "privacyStatementUri": {
            "value": "[tryGet(coalesce(parameters('applications'), createArray())[copyIndex()], 'privacyStatementUri')]"
          },
          "releaseNoteUri": {
            "value": "[tryGet(coalesce(parameters('applications'), createArray())[copyIndex()], 'releaseNoteUri')]"
          },
          "endOfLifeDate": {
            "value": "[tryGet(coalesce(parameters('applications'), createArray())[copyIndex()], 'endOfLifeDate')]"
          },
          "roleAssignments": {
            "value": "[tryGet(coalesce(parameters('applications'), createArray())[copyIndex()], 'roleAssignments')]"
          },
          "customActions": {
            "value": "[tryGet(coalesce(parameters('applications'), createArray())[copyIndex()], 'customActions')]"
          },
          "tags": {
            "value": "[coalesce(tryGet(coalesce(parameters('applications'), createArray())[copyIndex()], 'tags'), parameters('tags'))]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "languageVersion": "2.0",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.31.92.45157",
              "templateHash": "11162019331609283814"
            },
            "name": "Compute Galleries Applications",
            "description": "This module deploys an Azure Compute Gallery Application.",
            "owner": "Azure/module-maintainers"
          },
          "definitions": {
            "customActionType": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. The name of the custom action. Must be unique within the Gallery Application Version."
                  }
                },
                "script": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. The script to run when executing this custom action."
                  }
                },
                "description": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Description to help the users understand what this custom action does."
                  }
                },
                "parameters": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "name": {
                        "type": "string",
                        "metadata": {
                          "description": "Required. The name of the parameter."
                        }
                      },
                      "type": {
                        "type": "string",
                        "allowedValues": [
                          "ConfigurationDataBlob",
                          "LogOutputBlob",
                          "String"
                        ],
                        "nullable": true,
                        "metadata": {
                          "description": "Optional. Specifies the type of the custom action parameter."
                        }
                      },
                      "description": {
                        "type": "string",
                        "nullable": true,
                        "metadata": {
                          "description": "Optional. A description to help users understand what this parameter means."
                        }
                      },
                      "defaultValue": {
                        "type": "string",
                        "nullable": true,
                        "metadata": {
                          "description": "Optional. The default value of the parameter. Only applies to string types."
                        }
                      },
                      "required": {
                        "type": "bool",
                        "nullable": true,
                        "metadata": {
                          "description": "Optional. Indicates whether this parameter must be passed when running the custom action."
                        }
                      }
                    }
                  },
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The parameters that this custom action uses."
                  }
                }
              },
              "metadata": {
                "__bicep_export!": true
              }
            },
            "roleAssignmentType": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The name (as GUID) of the role assignment. If not provided, a GUID will be generated."
                  }
                },
                "roleDefinitionIdOrName": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                  }
                },
                "principalId": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                  }
                },
                "principalType": {
                  "type": "string",
                  "allowedValues": [
                    "Device",
                    "ForeignGroup",
                    "Group",
                    "ServicePrincipal",
                    "User"
                  ],
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The principal type of the assigned principal ID."
                  }
                },
                "description": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The description of the role assignment."
                  }
                },
                "condition": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                  }
                },
                "conditionVersion": {
                  "type": "string",
                  "allowedValues": [
                    "2.0"
                  ],
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Version of the condition."
                  }
                },
                "delegatedManagedIdentityResourceId": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The Resource Id of the delegated managed identity resource."
                  }
                }
              },
              "metadata": {
                "description": "An AVM-aligned type for a role assignment.",
                "__bicep_imported_from!": {
                  "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.3.0"
                }
              }
            }
          },
          "parameters": {
            "name": {
              "type": "string",
              "metadata": {
                "description": "Required. Name of the application definition."
              }
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]",
              "metadata": {
                "description": "Optional. Location for all resources."
              }
            },
            "galleryName": {
              "type": "string",
              "minLength": 1,
              "metadata": {
                "description": "Conditional. The name of the parent Azure Compute Gallery. Required if the template is used in a standalone deployment."
              }
            },
            "description": {
              "type": "string",
              "nullable": true,
              "metadata": {
                "description": "Optional. The description of this gallery Application Definition resource. This property is updatable."
              }
            },
            "eula": {
              "type": "string",
              "nullable": true,
              "metadata": {
                "description": "Optional. The Eula agreement for the gallery Application Definition. Has to be a valid URL."
              }
            },
            "privacyStatementUri": {
              "type": "string",
              "nullable": true,
              "metadata": {
                "description": "Optional. The privacy statement uri. Has to be a valid URL."
              }
            },
            "releaseNoteUri": {
              "type": "string",
              "nullable": true,
              "metadata": {
                "description": "Optional. The release note uri. Has to be a valid URL."
              }
            },
            "supportedOSType": {
              "type": "string",
              "allowedValues": [
                "Windows",
                "Linux"
              ],
              "metadata": {
                "description": "Required. This property allows you to specify the supported type of the OS that application is built for."
              }
            },
            "endOfLifeDate": {
              "type": "string",
              "nullable": true,
              "metadata": {
                "description": "Optional. The end of life date of the gallery Image Definition. This property can be used for decommissioning purposes. This property is updatable. Allowed format: 2020-01-10T23:00:00.000Z."
              }
            },
            "roleAssignments": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/roleAssignmentType"
              },
              "nullable": true,
              "metadata": {
                "description": "Optional. Array of role assignments to create."
              }
            },
            "tags": {
              "type": "object",
              "nullable": true,
              "metadata": {
                "description": "Optional. Tags for all resources."
              }
            },
            "customActions": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/customActionType"
              },
              "nullable": true,
              "metadata": {
                "description": "Optional. A list of custom actions that can be performed with all of the Gallery Application Versions within this Gallery Application."
              }
            }
          },
          "variables": {
            "copy": [
              {
                "name": "formattedRoleAssignments",
                "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]",
                "input": "[union(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')], createObject('roleDefinitionId', coalesce(tryGet(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName), if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName)))))]"
              }
            ],
            "builtInRoleNames": {
              "Compute Gallery Sharing Admin": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '1ef6a3be-d0ac-425d-8c01-acb62866290b')]",
              "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
              "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
              "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
              "Role Based Access Control Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]",
              "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]"
            }
          },
          "resources": {
            "gallery": {
              "existing": true,
              "type": "Microsoft.Compute/galleries",
              "apiVersion": "2022-03-03",
              "name": "[parameters('galleryName')]"
            },
            "application": {
              "type": "Microsoft.Compute/galleries/applications",
              "apiVersion": "2022-03-03",
              "name": "[format('{0}/{1}', parameters('galleryName'), parameters('name'))]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "properties": {
                "customActions": "[parameters('customActions')]",
                "description": "[parameters('description')]",
                "endOfLifeDate": "[parameters('endOfLifeDate')]",
                "eula": "[parameters('eula')]",
                "privacyStatementUri": "[parameters('privacyStatementUri')]",
                "releaseNoteUri": "[parameters('releaseNoteUri')]",
                "supportedOSType": "[parameters('supportedOSType')]"
              },
              "dependsOn": [
                "gallery"
              ]
            },
            "application_roleAssignments": {
              "copy": {
                "name": "application_roleAssignments",
                "count": "[length(coalesce(variables('formattedRoleAssignments'), createArray()))]"
              },
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.Compute/galleries/{0}/applications/{1}', parameters('galleryName'), parameters('name'))]",
              "name": "[coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'name'), guid(resourceId('Microsoft.Compute/galleries/applications', parameters('galleryName'), parameters('name')), coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId, coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId))]",
              "properties": {
                "roleDefinitionId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId]",
                "principalId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId]",
                "description": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'description')]",
                "principalType": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'principalType')]",
                "condition": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition')]",
                "conditionVersion": "[if(not(empty(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                "delegatedManagedIdentityResourceId": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
              },
              "dependsOn": [
                "application"
              ]
            }
          },
          "outputs": {
            "resourceGroupName": {
              "type": "string",
              "metadata": {
                "description": "The resource group the image was deployed into."
              },
              "value": "[resourceGroup().name]"
            },
            "resourceId": {
              "type": "string",
              "metadata": {
                "description": "The resource ID of the image."
              },
              "value": "[resourceId('Microsoft.Compute/galleries/applications', parameters('galleryName'), parameters('name'))]"
            },
            "name": {
              "type": "string",
              "metadata": {
                "description": "The name of the image."
              },
              "value": "[parameters('name')]"
            },
            "location": {
              "type": "string",
              "metadata": {
                "description": "The location the resource was deployed into."
              },
              "value": "[reference('application', '2022-03-03', 'full').location]"
            }
          }
        }
      },
      "dependsOn": [
        "gallery"
      ]
    },
    "galleries_images": {
      "copy": {
        "name": "galleries_images",
        "count": "[length(coalesce(parameters('images'), createArray()))]"
      },
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('{0}-Gallery-Image-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "name": {
            "value": "[coalesce(parameters('images'), createArray())[copyIndex()].name]"
          },
          "location": {
            "value": "[coalesce(tryGet(coalesce(parameters('images'), createArray())[copyIndex()], 'location'), parameters('location'))]"
          },
          "galleryName": {
            "value": "[parameters('name')]"
          },
          "description": {
            "value": "[tryGet(coalesce(parameters('images'), createArray())[copyIndex()], 'description')]"
          },
          "osType": {
            "value": "[coalesce(parameters('images'), createArray())[copyIndex()].osType]"
          },
          "osState": {
            "value": "[coalesce(parameters('images'), createArray())[copyIndex()].osState]"
          },
          "identifier": {
            "value": "[coalesce(parameters('images'), createArray())[copyIndex()].identifier]"
          },
          "vCPUs": {
            "value": "[tryGet(coalesce(parameters('images'), createArray())[copyIndex()], 'vCPUs')]"
          },
          "memory": {
            "value": "[tryGet(coalesce(parameters('images'), createArray())[copyIndex()], 'memory')]"
          },
          "hyperVGeneration": {
            "value": "[tryGet(coalesce(parameters('images'), createArray())[copyIndex()], 'hyperVGeneration')]"
          },
          "securityType": {
            "value": "[tryGet(coalesce(parameters('images'), createArray())[copyIndex()], 'securityType')]"
          },
          "isAcceleratedNetworkSupported": {
            "value": "[tryGet(coalesce(parameters('images'), createArray())[copyIndex()], 'isAcceleratedNetworkSupported')]"
          },
          "isHibernateSupported": {
            "value": "[tryGet(coalesce(parameters('images'), createArray())[copyIndex()], 'isHibernateSupported')]"
          },
          "architecture": {
            "value": "[tryGet(coalesce(parameters('images'), createArray())[copyIndex()], 'architecture')]"
          },
          "eula": {
            "value": "[tryGet(coalesce(parameters('images'), createArray())[copyIndex()], 'eula')]"
          },
          "privacyStatementUri": {
            "value": "[tryGet(coalesce(parameters('images'), createArray())[copyIndex()], 'privacyStatementUri')]"
          },
          "releaseNoteUri": {
            "value": "[tryGet(coalesce(parameters('images'), createArray())[copyIndex()], 'releaseNoteUri')]"
          },
          "purchasePlan": {
            "value": "[tryGet(coalesce(parameters('images'), createArray())[copyIndex()], 'purchasePlan')]"
          },
          "endOfLifeDate": {
            "value": "[tryGet(coalesce(parameters('images'), createArray())[copyIndex()], 'endOfLife')]"
          },
          "disallowed": {
            "value": {
              "diskTypes": "[coalesce(tryGet(coalesce(parameters('images'), createArray())[copyIndex()], 'excludedDiskTypes'), createArray())]"
            }
          },
          "roleAssignments": {
            "value": "[tryGet(coalesce(parameters('images'), createArray())[copyIndex()], 'roleAssignments')]"
          },
          "tags": {
            "value": "[coalesce(tryGet(coalesce(parameters('images'), createArray())[copyIndex()], 'tags'), parameters('tags'))]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "languageVersion": "2.0",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.31.92.45157",
              "templateHash": "14463616698185324661"
            },
            "name": "Compute Galleries Image Definitions",
            "description": "This module deploys an Azure Compute Gallery Image Definition.",
            "owner": "Azure/module-maintainers"
          },
          "definitions": {
            "roleAssignmentType": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. The name (as GUID) of the role assignment. If not provided, a GUID will be generated."
                    }
                  },
                  "roleDefinitionIdOrName": {
                    "type": "string",
                    "metadata": {
                      "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                    }
                  },
                  "principalId": {
                    "type": "string",
                    "metadata": {
                      "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                    }
                  },
                  "principalType": {
                    "type": "string",
                    "allowedValues": [
                      "Device",
                      "ForeignGroup",
                      "Group",
                      "ServicePrincipal",
                      "User"
                    ],
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. The principal type of the assigned principal ID."
                    }
                  },
                  "description": {
                    "type": "string",
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. The description of the role assignment."
                    }
                  },
                  "condition": {
                    "type": "string",
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                    }
                  },
                  "conditionVersion": {
                    "type": "string",
                    "allowedValues": [
                      "2.0"
                    ],
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. Version of the condition."
                    }
                  },
                  "delegatedManagedIdentityResourceId": {
                    "type": "string",
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. The Resource Id of the delegated managed identity resource."
                    }
                  }
                }
              },
              "nullable": true
            },
            "resourceRangeType": {
              "type": "object",
              "properties": {
                "min": {
                  "type": "int",
                  "nullable": true,
                  "minValue": 1,
                  "metadata": {
                    "description": "Optional. The minimum number of the resource."
                  }
                },
                "max": {
                  "type": "int",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The minimum number of the resource."
                  }
                }
              },
              "metadata": {
                "__bicep_export!": true
              }
            },
            "disallowedType": {
              "type": "object",
              "properties": {
                "diskTypes": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "metadata": {
                    "example": "  [\n    'Standard_LRS'\n  ]",
                    "description": "Required. A list of disk types."
                  }
                }
              },
              "nullable": true
            },
            "identifierType": {
              "type": "object",
              "properties": {
                "publisher": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. The name of the gallery image definition publisher."
                  }
                },
                "offer": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. The name of the gallery image definition offer."
                  }
                },
                "sku": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. The name of the gallery image definition SKU."
                  }
                }
              },
              "metadata": {
                "__bicep_export!": true
              }
            },
            "purchasePlanType": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. The plan ID."
                  }
                },
                "product": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. The product ID."
                  }
                },
                "publisher": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. The publisher ID."
                  }
                }
              },
              "nullable": true,
              "metadata": {
                "__bicep_export!": true
              }
            }
          },
          "parameters": {
            "name": {
              "type": "string",
              "minLength": 1,
              "maxLength": 80,
              "metadata": {
                "description": "Required. Name of the image definition."
              }
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]",
              "metadata": {
                "description": "Optional. Location for all resources."
              }
            },
            "galleryName": {
              "type": "string",
              "minLength": 1,
              "metadata": {
                "description": "Conditional. The name of the parent Azure Shared Image Gallery. Required if the template is used in a standalone deployment."
              }
            },
            "identifier": {
              "$ref": "#/definitions/identifierType",
              "metadata": {
                "description": "Required. This is the gallery image definition identifier."
              }
            },
            "osState": {
              "type": "string",
              "allowedValues": [
                "Generalized",
                "Specialized"
              ],
              "metadata": {
                "description": "Required. This property allows the user to specify the state of the OS of the image."
              }
            },
            "osType": {
              "type": "string",
              "allowedValues": [
                "Linux",
                "Windows"
              ],
              "metadata": {
                "description": "Required. This property allows you to specify the type of the OS that is included in the disk when creating a VM from a managed image."
              }
            },
            "privacyStatementUri": {
              "type": "string",
              "nullable": true,
              "metadata": {
                "description": "Optional. The privacy statement uri."
              }
            },
            "purchasePlan": {
              "$ref": "#/definitions/purchasePlanType",
              "nullable": true,
              "metadata": {
                "description": "Optional. Describes the gallery image definition purchase plan. This is used by marketplace images."
              }
            },
            "vCPUs": {
              "$ref": "#/definitions/resourceRangeType",
              "defaultValue": {
                "min": 1,
                "max": 4
              },
              "metadata": {
                "description": "Optional. Describes the resource range (1-128 CPU cores)."
              }
            },
            "memory": {
              "$ref": "#/definitions/resourceRangeType",
              "defaultValue": {
                "min": 4,
                "max": 16
              },
              "metadata": {
                "description": "Optional. Describes the resource range (1-4000 GB RAM)."
              }
            },
            "releaseNoteUri": {
              "type": "string",
              "nullable": true,
              "metadata": {
                "description": "Optional. The release note uri. Has to be a valid URL."
              }
            },
            "securityType": {
              "type": "string",
              "allowedValues": [
                "ConfidentialVM",
                "ConfidentialVMSupported",
                "Standard",
                "TrustedLaunch",
                "TrustedLaunchAndConfidentialVmSupported",
                "TrustedLaunchSupported"
              ],
              "nullable": true,
              "metadata": {
                "description": "Optional. The security type of the image. Requires a hyperVGeneration V2."
              }
            },
            "isAcceleratedNetworkSupported": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Optional. Specify if the image supports accelerated networking."
              }
            },
            "isHibernateSupported": {
              "type": "bool",
              "nullable": true,
              "metadata": {
                "description": "Optional. Specifiy if the image supports hibernation."
              }
            },
            "architecture": {
              "type": "string",
              "allowedValues": [
                "Arm64",
                "x64"
              ],
              "nullable": true,
              "metadata": {
                "description": "Optional. The architecture of the image. Applicable to OS disks only."
              }
            },
            "description": {
              "type": "string",
              "nullable": true,
              "metadata": {
                "description": "Optional. The description of this gallery image definition resource. This property is updatable."
              }
            },
            "disallowed": {
              "$ref": "#/definitions/disallowedType",
              "nullable": true,
              "metadata": {
                "description": "Optional. Describes the disallowed disk types."
              }
            },
            "endOfLifeDate": {
              "type": "string",
              "nullable": true,
              "metadata": {
                "description": "Optional. The end of life date of the gallery image definition. This property can be used for decommissioning purposes. This property is updatable."
              }
            },
            "eula": {
              "type": "string",
              "nullable": true,
              "metadata": {
                "description": "Optional. The Eula agreement for the gallery image definition."
              }
            },
            "hyperVGeneration": {
              "type": "string",
              "allowedValues": [
                "V1",
                "V2"
              ],
              "nullable": true,
              "metadata": {
                "description": "Optional. The hypervisor generation of the Virtual Machine. If this value is not specified, then it is determined by the securityType parameter. If the securityType parameter is specified, then the value of hyperVGeneration will be V2, else V1."
              }
            },
            "roleAssignments": {
              "$ref": "#/definitions/roleAssignmentType",
              "metadata": {
                "description": "Optional. Array of role assignments to create."
              }
            },
            "tags": {
              "type": "object",
              "nullable": true,
              "metadata": {
                "example": "{\n    key1: 'value1'\n    key2: 'value2'\n}\n",
                "description": "Optional. Tags for all the image."
              }
            }
          },
          "variables": {
            "copy": [
              {
                "name": "formattedRoleAssignments",
                "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]",
                "input": "[union(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')], createObject('roleDefinitionId', coalesce(tryGet(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName), if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName)))))]"
              }
            ],
            "builtInRoleNames": {
              "Compute Gallery Sharing Admin": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '1ef6a3be-d0ac-425d-8c01-acb62866290b')]",
              "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
              "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
              "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
              "Role Based Access Control Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]",
              "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]"
            }
          },
          "resources": {
            "gallery": {
              "existing": true,
              "type": "Microsoft.Compute/galleries",
              "apiVersion": "2023-07-03",
              "name": "[parameters('galleryName')]"
            },
            "image": {
              "type": "Microsoft.Compute/galleries/images",
              "apiVersion": "2023-07-03",
              "name": "[format('{0}/{1}', parameters('galleryName'), parameters('name'))]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "properties": {
                "architecture": "[parameters('architecture')]",
                "description": "[parameters('description')]",
                "disallowed": {
                  "diskTypes": "[coalesce(tryGet(parameters('disallowed'), 'diskTypes'), createArray())]"
                },
                "endOfLifeDate": "[parameters('endOfLifeDate')]",
                "eula": "[parameters('eula')]",
                "features": "[union(createArray(createObject('name', 'IsAcceleratedNetworkSupported', 'value', format('{0}', parameters('isAcceleratedNetworkSupported')))), if(and(not(equals(parameters('securityType'), null())), not(equals(parameters('securityType'), 'Standard'))), createArray(createObject('name', 'SecurityType', 'value', format('{0}', parameters('securityType')))), createArray()), if(not(equals(parameters('isHibernateSupported'), null())), createArray(createObject('name', 'IsHibernateSupported', 'value', format('{0}', parameters('isHibernateSupported')))), createArray()))]",
                "hyperVGeneration": "[coalesce(parameters('hyperVGeneration'), if(not(empty(coalesce(parameters('securityType'), ''))), 'V2', 'V1'))]",
                "identifier": {
                  "publisher": "[parameters('identifier').publisher]",
                  "offer": "[parameters('identifier').offer]",
                  "sku": "[parameters('identifier').sku]"
                },
                "osState": "[parameters('osState')]",
                "osType": "[parameters('osType')]",
                "privacyStatementUri": "[parameters('privacyStatementUri')]",
                "purchasePlan": "[coalesce(parameters('purchasePlan'), null())]",
                "recommended": {
                  "vCPUs": "[parameters('vCPUs')]",
                  "memory": "[parameters('memory')]"
                },
                "releaseNoteUri": "[parameters('releaseNoteUri')]"
              },
              "dependsOn": [
                "gallery"
              ]
            },
            "image_roleAssignments": {
              "copy": {
                "name": "image_roleAssignments",
                "count": "[length(coalesce(variables('formattedRoleAssignments'), createArray()))]"
              },
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.Compute/galleries/{0}/images/{1}', parameters('galleryName'), parameters('name'))]",
              "name": "[coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'name'), guid(resourceId('Microsoft.Compute/galleries/images', parameters('galleryName'), parameters('name')), coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId, coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId))]",
              "properties": {
                "roleDefinitionId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId]",
                "principalId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId]",
                "description": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'description')]",
                "principalType": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'principalType')]",
                "condition": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition')]",
                "conditionVersion": "[if(not(empty(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                "delegatedManagedIdentityResourceId": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
              },
              "dependsOn": [
                "image"
              ]
            }
          },
          "outputs": {
            "resourceGroupName": {
              "type": "string",
              "metadata": {
                "description": "The resource group the image was deployed into."
              },
              "value": "[resourceGroup().name]"
            },
            "resourceId": {
              "type": "string",
              "metadata": {
                "description": "The resource ID of the image."
              },
              "value": "[resourceId('Microsoft.Compute/galleries/images', parameters('galleryName'), parameters('name'))]"
            },
            "name": {
              "type": "string",
              "metadata": {
                "description": "The name of the image."
              },
              "value": "[parameters('name')]"
            },
            "location": {
              "type": "string",
              "metadata": {
                "description": "The location the resource was deployed into."
              },
              "value": "[reference('image', '2023-07-03', 'full').location]"
            }
          }
        }
      },
      "dependsOn": [
        "gallery"
      ]
    }
  },
  "outputs": {
    "resourceId": {
      "type": "string",
      "metadata": {
        "description": "The resource ID of the deployed image gallery."
      },
      "value": "[resourceId('Microsoft.Compute/galleries', parameters('name'))]"
    },
    "resourceGroupName": {
      "type": "string",
      "metadata": {
        "description": "The resource group of the deployed image gallery."
      },
      "value": "[resourceGroup().name]"
    },
    "name": {
      "type": "string",
      "metadata": {
        "description": "The name of the deployed image gallery."
      },
      "value": "[parameters('name')]"
    },
    "location": {
      "type": "string",
      "metadata": {
        "description": "The location the resource was deployed into."
      },
      "value": "[reference('gallery', '2023-07-03', 'full').location]"
    },
    "imageResourceIds": {
      "type": "array",
      "metadata": {
        "description": "The resource ids of the deployed images."
      },
      "copy": {
        "count": "[length(range(0, length(coalesce(parameters('images'), createArray()))))]",
        "input": "[reference(format('galleries_images[{0}]', range(0, length(coalesce(parameters('images'), createArray())))[copyIndex()])).outputs.resourceId.value]"
      }
    }
  }
}