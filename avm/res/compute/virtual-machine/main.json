{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "languageVersion": "2.0",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "_generator": {
      "name": "bicep",
      "version": "0.34.44.8038",
      "templateHash": "7550018186284349950"
    },
    "name": "Virtual Machines",
    "description": "This module deploys a Virtual Machine with one or multiple NICs and optionally one or multiple public IPs."
  },
  "definitions": {
    "osDiskType": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "Optional. The disk name."
          }
        },
        "diskSizeGB": {
          "type": "int",
          "nullable": true,
          "metadata": {
            "description": "Optional. Specifies the size of an empty data disk in gigabytes."
          }
        },
        "createOption": {
          "type": "string",
          "allowedValues": [
            "Attach",
            "Empty",
            "FromImage"
          ],
          "nullable": true,
          "metadata": {
            "description": "Optional. Specifies how the virtual machine should be created."
          }
        },
        "deleteOption": {
          "type": "string",
          "allowedValues": [
            "Delete",
            "Detach"
          ],
          "nullable": true,
          "metadata": {
            "description": "Optional. Specifies whether data disk should be deleted or detached upon VM deletion."
          }
        },
        "caching": {
          "type": "string",
          "allowedValues": [
            "None",
            "ReadOnly",
            "ReadWrite"
          ],
          "nullable": true,
          "metadata": {
            "description": "Optional. Specifies the caching requirements."
          }
        },
        "diffDiskSettings": {
          "type": "object",
          "properties": {
            "placement": {
              "type": "string",
              "allowedValues": [
                "CacheDisk",
                "NvmeDisk",
                "ResourceDisk"
              ],
              "metadata": {
                "description": "Required. Specifies the ephemeral disk placement for the operating system disk."
              }
            }
          },
          "nullable": true,
          "metadata": {
            "description": "Optional. Specifies the ephemeral Disk Settings for the operating system disk."
          }
        },
        "managedDisk": {
          "type": "object",
          "properties": {
            "storageAccountType": {
              "type": "string",
              "allowedValues": [
                "PremiumV2_LRS",
                "Premium_LRS",
                "Premium_ZRS",
                "StandardSSD_LRS",
                "StandardSSD_ZRS",
                "Standard_LRS",
                "UltraSSD_LRS"
              ],
              "nullable": true,
              "metadata": {
                "description": "Optional. Specifies the storage account type for the managed disk."
              }
            },
            "diskEncryptionSetResourceId": {
              "type": "string",
              "nullable": true,
              "metadata": {
                "description": "Optional. Specifies the customer managed disk encryption set resource id for the managed disk."
              }
            }
          },
          "metadata": {
            "description": "Required. The managed disk parameters."
          }
        }
      },
      "metadata": {
        "__bicep_export!": true,
        "description": "The type describing an OS disk."
      }
    },
    "dataDiskType": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "Optional. The disk name. When attaching a pre-existing disk, this name is ignored and the name of the existing disk is used."
          }
        },
        "lun": {
          "type": "int",
          "nullable": true,
          "metadata": {
            "description": "Optional. Specifies the logical unit number of the data disk."
          }
        },
        "diskSizeGB": {
          "type": "int",
          "nullable": true,
          "metadata": {
            "description": "Optional. Specifies the size of an empty data disk in gigabytes. This property is ignored when attaching a pre-existing disk."
          }
        },
        "createOption": {
          "type": "string",
          "allowedValues": [
            "Attach",
            "Empty",
            "FromImage"
          ],
          "nullable": true,
          "metadata": {
            "description": "Optional. Specifies how the virtual machine should be created. This property is automatically set to 'Attach' when attaching a pre-existing disk."
          }
        },
        "deleteOption": {
          "type": "string",
          "allowedValues": [
            "Delete",
            "Detach"
          ],
          "nullable": true,
          "metadata": {
            "description": "Optional. Specifies whether data disk should be deleted or detached upon VM deletion. This property is automatically set to 'Detach' when attaching a pre-existing disk."
          }
        },
        "caching": {
          "type": "string",
          "allowedValues": [
            "None",
            "ReadOnly",
            "ReadWrite"
          ],
          "nullable": true,
          "metadata": {
            "description": "Optional. Specifies the caching requirements. This property is automatically set to 'None' when attaching a pre-existing disk."
          }
        },
        "diskIOPSReadWrite": {
          "type": "int",
          "nullable": true,
          "metadata": {
            "description": "Optional. The number of IOPS allowed for this disk; only settable for UltraSSD disks. One operation can transfer between 4k and 256k bytes. Ignored when attaching a pre-existing disk."
          }
        },
        "diskMBpsReadWrite": {
          "type": "int",
          "nullable": true,
          "metadata": {
            "description": "Optional. The bandwidth allowed for this disk; only settable for UltraSSD disks. MBps means millions of bytes per second - MB here uses the ISO notation, of powers of 10. Ignored when attaching a pre-existing disk."
          }
        },
        "managedDisk": {
          "type": "object",
          "properties": {
            "storageAccountType": {
              "type": "string",
              "allowedValues": [
                "PremiumV2_LRS",
                "Premium_LRS",
                "Premium_ZRS",
                "StandardSSD_LRS",
                "StandardSSD_ZRS",
                "Standard_LRS",
                "UltraSSD_LRS"
              ],
              "nullable": true,
              "metadata": {
                "description": "Optional. Specifies the storage account type for the managed disk. Ignored when attaching a pre-existing disk."
              }
            },
            "diskEncryptionSetResourceId": {
              "type": "string",
              "nullable": true,
              "metadata": {
                "description": "Optional. Specifies the customer managed disk encryption set resource id for the managed disk."
              }
            },
            "id": {
              "type": "string",
              "nullable": true,
              "metadata": {
                "description": "Optional. Specifies the resource id of a pre-existing managed disk. If the disk should be created, this property should be empty."
              }
            }
          },
          "metadata": {
            "description": "Required. The managed disk parameters."
          }
        },
        "tags": {
          "type": "object",
          "nullable": true,
          "metadata": {
            "description": "Optional. The tags of the public IP address. Valid only when creating a new managed disk."
          }
        }
      },
      "metadata": {
        "__bicep_export!": true,
        "description": "The type describing a data disk."
      }
    },
    "publicKeyType": {
      "type": "object",
      "properties": {
        "keyData": {
          "type": "string",
          "metadata": {
            "description": "Required. Specifies the SSH public key data used to authenticate through ssh."
          }
        },
        "path": {
          "type": "string",
          "metadata": {
            "description": "Required. Specifies the full path on the created VM where ssh public key is stored. If the file already exists, the specified key is appended to the file."
          }
        }
      }
    },
    "nicConfigurationType": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "Optional. The name of the NIC configuration."
          }
        },
        "nicSuffix": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "Optional. The suffix to append to the NIC name."
          }
        },
        "enableIPForwarding": {
          "type": "bool",
          "nullable": true,
          "metadata": {
            "description": "Optional. Indicates whether IP forwarding is enabled on this network interface."
          }
        },
        "enableAcceleratedNetworking": {
          "type": "bool",
          "nullable": true,
          "metadata": {
            "description": "Optional. If the network interface is accelerated networking enabled."
          }
        },
        "deleteOption": {
          "type": "string",
          "allowedValues": [
            "Delete",
            "Detach"
          ],
          "nullable": true,
          "metadata": {
            "description": "Optional. Specify what happens to the network interface when the VM is deleted."
          }
        },
        "dnsServers": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "nullable": true,
          "metadata": {
            "description": "Optional. List of DNS servers IP addresses. Use 'AzureProvidedDNS' to switch to azure provided DNS resolution. 'AzureProvidedDNS' value cannot be combined with other IPs, it must be the only value in dnsServers collection."
          }
        },
        "networkSecurityGroupResourceId": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "Optional. The network security group (NSG) to attach to the network interface."
          }
        },
        "ipConfigurations": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ipConfigurationType"
          },
          "metadata": {
            "description": "Required. The IP configurations of the network interface."
          }
        },
        "lock": {
          "$ref": "#/definitions/lockType",
          "nullable": true,
          "metadata": {
            "description": "Optional. The lock settings of the service."
          }
        },
        "tags": {
          "type": "object",
          "nullable": true,
          "metadata": {
            "description": "Optional. The tags of the public IP address."
          }
        },
        "enableTelemetry": {
          "type": "bool",
          "nullable": true,
          "metadata": {
            "description": "Optional. Enable/Disable usage telemetry for the module."
          }
        },
        "diagnosticSettings": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/diagnosticSettingFullType"
          },
          "nullable": true,
          "metadata": {
            "description": "Optional. The diagnostic settings of the IP configuration."
          }
        },
        "roleAssignments": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/roleAssignmentType"
          },
          "nullable": true,
          "metadata": {
            "description": "Optional. Array of role assignments to create."
          }
        }
      },
      "metadata": {
        "__bicep_export!": true,
        "description": "The type for the NIC configuration."
      }
    },
    "imageReferenceType": {
      "type": "object",
      "properties": {
        "communityGalleryImageId": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "Optional. Specified the community gallery image unique id for vm deployment. This can be fetched from community gallery image GET call."
          }
        },
        "id": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "Optional. The resource Id of the image reference."
          }
        },
        "offer": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "Optional. Specifies the offer of the platform image or marketplace image used to create the virtual machine."
          }
        },
        "publisher": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "Optional. The image publisher."
          }
        },
        "sku": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "Optional. The SKU of the image."
          }
        },
        "version": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "Optional. Specifies the version of the platform image or marketplace image used to create the virtual machine. The allowed formats are Major.Minor.Build or 'latest'. Even if you use 'latest', the VM image will not automatically update after deploy time even if a new version becomes available."
          }
        },
        "sharedGalleryImageId": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "Optional. Specified the shared gallery image unique id for vm deployment. This can be fetched from shared gallery image GET call."
          }
        }
      },
      "metadata": {
        "__bicep_export!": true,
        "description": "The type describing the image reference."
      }
    },
    "planType": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "Optional. The name of the plan."
          }
        },
        "product": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "Optional. Specifies the product of the image from the marketplace."
          }
        },
        "publisher": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "Optional. The publisher ID."
          }
        },
        "promotionCode": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "Optional. The promotion code."
          }
        }
      },
      "metadata": {
        "__bicep_export!": true,
        "description": "Specifies information about the marketplace image used to create the virtual machine."
      }
    },
    "autoShutDownConfigType": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string",
          "allowedValues": [
            "Disabled",
            "Enabled"
          ],
          "nullable": true,
          "metadata": {
            "description": "Optional. The status of the auto shutdown configuration."
          }
        },
        "timeZone": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "Optional. The time zone ID (e.g. China Standard Time, Greenland Standard Time, Pacific Standard time, etc.)."
          }
        },
        "dailyRecurrenceTime": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "Optional. The time of day the schedule will occur."
          }
        },
        "notificationSettings": {
          "type": "object",
          "properties": {
            "status": {
              "type": "string",
              "allowedValues": [
                "Disabled",
                "Enabled"
              ],
              "nullable": true,
              "metadata": {
                "description": "Optional. The status of the notification settings."
              }
            },
            "emailRecipient": {
              "type": "string",
              "nullable": true,
              "metadata": {
                "description": "Optional. The email address to send notifications to (can be a list of semi-colon separated email addresses)."
              }
            },
            "notificationLocale": {
              "type": "string",
              "nullable": true,
              "metadata": {
                "description": "Optional. The locale to use when sending a notification (fallback for unsupported languages is EN)."
              }
            },
            "webhookUrl": {
              "type": "string",
              "nullable": true,
              "metadata": {
                "description": "Optional. The webhook URL to which the notification will be sent."
              }
            },
            "timeInMinutes": {
              "type": "int",
              "nullable": true,
              "metadata": {
                "description": "Optional. The time in minutes before shutdown to send notifications."
              }
            }
          },
          "nullable": true,
          "metadata": {
            "description": "Optional. The resource ID of the schedule."
          }
        }
      },
      "metadata": {
        "__bicep_export!": true,
        "description": "The type describing the configuration profile."
      }
    },
    "vaultSecretGroupType": {
      "type": "object",
      "properties": {
        "sourceVault": {
          "$ref": "#/definitions/subResourceType",
          "nullable": true,
          "metadata": {
            "description": "Optional. The relative URL of the Key Vault containing all of the certificates in VaultCertificates."
          }
        },
        "vaultCertificates": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "certificateStore": {
                "type": "string",
                "nullable": true,
                "metadata": {
                  "description": "Optional. For Windows VMs, specifies the certificate store on the Virtual Machine to which the certificate should be added. The specified certificate store is implicitly in the LocalMachine account. For Linux VMs, the certificate file is placed under the /var/lib/waagent directory, with the file name <UppercaseThumbprint>.crt for the X509 certificate file and <UppercaseThumbprint>.prv for private key. Both of these files are .pem formatted."
                }
              },
              "certificateUrl": {
                "type": "string",
                "nullable": true,
                "metadata": {
                  "description": "Optional. This is the URL of a certificate that has been uploaded to Key Vault as a secret."
                }
              }
            }
          },
          "nullable": true,
          "metadata": {
            "description": "Optional. The list of key vault references in SourceVault which contain certificates."
          }
        }
      },
      "metadata": {
        "__bicep_export!": true,
        "description": "The type describing the set of certificates that should be installed onto the virtual machine."
      }
    },
    "vmGalleryApplicationType": {
      "type": "object",
      "properties": {
        "packageReferenceId": {
          "type": "string",
          "metadata": {
            "description": "Required. Specifies the GalleryApplicationVersion resource id on the form of /subscriptions/{SubscriptionId}/resourceGroups/{ResourceGroupName}/providers/Microsoft.Compute/galleries/{galleryName}/applications/{application}/versions/{version}."
          }
        },
        "configurationReference": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "Optional. Specifies the uri to an azure blob that will replace the default configuration for the package if provided."
          }
        },
        "enableAutomaticUpgrade": {
          "type": "bool",
          "nullable": true,
          "metadata": {
            "description": "Optional. If set to true, when a new Gallery Application version is available in PIR/SIG, it will be automatically updated for the VM/VMSS."
          }
        },
        "order": {
          "type": "int",
          "nullable": true,
          "metadata": {
            "description": "Optional. Specifies the order in which the packages have to be installed."
          }
        },
        "tags": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "Optional. Specifies a passthrough value for more generic context."
          }
        },
        "treatFailureAsDeploymentFailure": {
          "type": "bool",
          "nullable": true,
          "metadata": {
            "description": "Optional. If true, any failure for any operation in the VmApplication will fail the deployment."
          }
        }
      },
      "metadata": {
        "__bicep_export!": true,
        "description": "The type describing the gallery application that should be made available to the VM/VMSS."
      }
    },
    "additionalUnattendContentType": {
      "type": "object",
      "properties": {
        "settingName": {
          "type": "string",
          "allowedValues": [
            "AutoLogon",
            "FirstLogonCommands"
          ],
          "nullable": true,
          "metadata": {
            "description": "Optional. Specifies the name of the setting to which the content applies."
          }
        },
        "content": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "Optional. Specifies the XML formatted content that is added to the unattend.xml file for the specified path and component. The XML must be less than 4KB and must include the root element for the setting or feature that is being inserted."
          }
        }
      },
      "metadata": {
        "__bicep_export!": true,
        "description": "The type describing additional base-64 encoded XML formatted information that can be included in the Unattend.xml file, which is used by Windows Setup."
      }
    },
    "winRMListenerType": {
      "type": "object",
      "properties": {
        "certificateUrl": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "Optional. The URL of a certificate that has been uploaded to Key Vault as a secret."
          }
        },
        "protocol": {
          "type": "string",
          "allowedValues": [
            "Http",
            "Https"
          ],
          "nullable": true,
          "metadata": {
            "description": "Optional. Specifies the protocol of WinRM listener."
          }
        }
      },
      "metadata": {
        "__bicep_export!": true,
        "description": "The type describing a Windows Remote Management listener."
      }
    },
    "nicConfigurationOutputType": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "metadata": {
            "description": "Required. The name of the NIC configuration."
          }
        },
        "ipConfigurations": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/networkInterfaceIPConfigurationOutputType"
          },
          "metadata": {
            "description": "Required. List of IP configurations of the NIC configuration."
          }
        }
      },
      "metadata": {
        "__bicep_export!": true,
        "description": "The type describing the network interface configuration output."
      }
    },
    "_1.applicationGatewayBackendAddressPoolsType": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "Optional. Resource ID of the backend address pool."
          }
        },
        "name": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "Optional. Name of the backend address pool that is unique within an Application Gateway."
          }
        },
        "properties": {
          "type": "object",
          "properties": {
            "backendAddresses": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "ipAddress": {
                    "type": "string",
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. IP address of the backend address."
                    }
                  },
                  "fqdn": {
                    "type": "string",
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. FQDN of the backend address."
                    }
                  }
                }
              },
              "nullable": true,
              "metadata": {
                "description": "Optional. Backend addresses."
              }
            }
          },
          "nullable": true,
          "metadata": {
            "description": "Optional. Properties of the application gateway backend address pool."
          }
        }
      },
      "metadata": {
        "description": "The type for the application gateway backend address pool.",
        "__bicep_imported_from!": {
          "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/res/network/network-interface:0.5.1"
        }
      }
    },
    "_1.applicationSecurityGroupType": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "Optional. Resource ID of the application security group."
          }
        },
        "location": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "Optional. Location of the application security group."
          }
        },
        "properties": {
          "type": "object",
          "nullable": true,
          "metadata": {
            "description": "Optional. Properties of the application security group."
          }
        },
        "tags": {
          "type": "object",
          "nullable": true,
          "metadata": {
            "description": "Optional. Tags of the application security group."
          }
        }
      },
      "metadata": {
        "description": "The type for the application security group.",
        "__bicep_imported_from!": {
          "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/res/network/network-interface:0.5.1"
        }
      }
    },
    "_1.backendAddressPoolType": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "Optional. The resource ID of the backend address pool."
          }
        },
        "name": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "Optional. The name of the backend address pool."
          }
        },
        "properties": {
          "type": "object",
          "nullable": true,
          "metadata": {
            "description": "Optional. The properties of the backend address pool."
          }
        }
      },
      "metadata": {
        "description": "The type for a backend address pool.",
        "__bicep_imported_from!": {
          "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/res/network/network-interface:0.5.1"
        }
      }
    },
    "_1.inboundNatRuleType": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "Optional. Resource ID of the inbound NAT rule."
          }
        },
        "name": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "Optional. Name of the resource that is unique within the set of inbound NAT rules used by the load balancer. This name can be used to access the resource."
          }
        },
        "properties": {
          "type": "object",
          "properties": {
            "backendAddressPool": {
              "$ref": "#/definitions/subResourceType",
              "nullable": true,
              "metadata": {
                "description": "Optional. A reference to backendAddressPool resource."
              }
            },
            "backendPort": {
              "type": "int",
              "nullable": true,
              "metadata": {
                "description": "Optional. The port used for the internal endpoint. Acceptable values range from 1 to 65535."
              }
            },
            "enableFloatingIP": {
              "type": "bool",
              "nullable": true,
              "metadata": {
                "description": "Optional. Configures a virtual machine's endpoint for the floating IP capability required to configure a SQL AlwaysOn Availability Group. This setting is required when using the SQL AlwaysOn Availability Groups in SQL server. This setting can't be changed after you create the endpoint."
              }
            },
            "enableTcpReset": {
              "type": "bool",
              "nullable": true,
              "metadata": {
                "description": "Optional. Receive bidirectional TCP Reset on TCP flow idle timeout or unexpected connection termination. This element is only used when the protocol is set to TCP."
              }
            },
            "frontendIPConfiguration": {
              "$ref": "#/definitions/subResourceType",
              "nullable": true,
              "metadata": {
                "description": "Optional. A reference to frontend IP addresses."
              }
            },
            "frontendPort": {
              "type": "int",
              "nullable": true,
              "metadata": {
                "description": "Optional. The port for the external endpoint. Port numbers for each rule must be unique within the Load Balancer. Acceptable values range from 1 to 65534."
              }
            },
            "frontendPortRangeStart": {
              "type": "int",
              "nullable": true,
              "metadata": {
                "description": "Optional. The port range start for the external endpoint. This property is used together with BackendAddressPool and FrontendPortRangeEnd. Individual inbound NAT rule port mappings will be created for each backend address from BackendAddressPool. Acceptable values range from 1 to 65534."
              }
            },
            "frontendPortRangeEnd": {
              "type": "int",
              "nullable": true,
              "metadata": {
                "description": "Optional. The port range end for the external endpoint. This property is used together with BackendAddressPool and FrontendPortRangeStart. Individual inbound NAT rule port mappings will be created for each backend address from BackendAddressPool. Acceptable values range from 1 to 65534."
              }
            },
            "protocol": {
              "type": "string",
              "allowedValues": [
                "All",
                "Tcp",
                "Udp"
              ],
              "nullable": true,
              "metadata": {
                "description": "Optional. The reference to the transport protocol used by the load balancing rule."
              }
            }
          },
          "nullable": true,
          "metadata": {
            "description": "Optional. Properties of the inbound NAT rule."
          }
        }
      },
      "metadata": {
        "description": "The type for the inbound NAT rule.",
        "__bicep_imported_from!": {
          "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/res/network/network-interface:0.5.1"
        }
      }
    },
    "_1.virtualNetworkTapType": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "Optional. Resource ID of the virtual network tap."
          }
        },
        "location": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "Optional. Location of the virtual network tap."
          }
        },
        "properties": {
          "type": "object",
          "nullable": true,
          "metadata": {
            "description": "Optional. Properties of the virtual network tap."
          }
        },
        "tags": {
          "type": "object",
          "nullable": true,
          "metadata": {
            "description": "Optional. Tags of the virtual network tap."
          }
        }
      },
      "metadata": {
        "description": "The type for the virtual network tap.",
        "__bicep_imported_from!": {
          "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/res/network/network-interface:0.5.1"
        }
      }
    },
    "_2.ddosSettingsType": {
      "type": "object",
      "properties": {
        "ddosProtectionPlan": {
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "metadata": {
                "description": "Required. The resource ID of the DDOS protection plan associated with the public IP address."
              }
            }
          },
          "nullable": true,
          "metadata": {
            "description": "Optional. The DDoS protection plan associated with the public IP address."
          }
        },
        "protectionMode": {
          "type": "string",
          "allowedValues": [
            "Enabled"
          ],
          "metadata": {
            "description": "Required. The DDoS protection policy customizations."
          }
        }
      },
      "metadata": {
        "__bicep_imported_from!": {
          "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/res/network/public-ip-address:0.8.0"
        }
      }
    },
    "_2.dnsSettingsType": {
      "type": "object",
      "properties": {
        "domainNameLabel": {
          "type": "string",
          "metadata": {
            "description": "Required. The domain name label. The concatenation of the domain name label and the regionalized DNS zone make up the fully qualified domain name associated with the public IP address. If a domain name label is specified, an A DNS record is created for the public IP in the Microsoft Azure DNS system."
          }
        },
        "domainNameLabelScope": {
          "type": "string",
          "allowedValues": [
            "NoReuse",
            "ResourceGroupReuse",
            "SubscriptionReuse",
            "TenantReuse"
          ],
          "nullable": true,
          "metadata": {
            "description": "Optional. The domain name label scope. If a domain name label and a domain name label scope are specified, an A DNS record is created for the public IP in the Microsoft Azure DNS system with a hashed value includes in FQDN."
          }
        },
        "fqdn": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "Optional. The Fully Qualified Domain Name of the A DNS record associated with the public IP. This is the concatenation of the domainNameLabel and the regionalized DNS zone."
          }
        },
        "reverseFqdn": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "Optional. The reverse FQDN. A user-visible, fully qualified domain name that resolves to this public IP address. If the reverseFqdn is specified, then a PTR DNS record is created pointing from the IP address in the in-addr.arpa domain to the reverse FQDN."
          }
        }
      },
      "metadata": {
        "__bicep_imported_from!": {
          "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/res/network/public-ip-address:0.8.0"
        }
      }
    },
    "_3.publicIPConfigurationType": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "Optional. The name of the Public IP Address."
          }
        },
        "publicIPAddressResourceId": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "Optional. The resource ID of the public IP address."
          }
        },
        "diagnosticSettings": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/diagnosticSettingFullType"
          },
          "nullable": true,
          "metadata": {
            "description": "Optional. Diagnostic settings for the public IP address."
          }
        },
        "location": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "Optional. The idle timeout in minutes."
          }
        },
        "lock": {
          "$ref": "#/definitions/lockType",
          "nullable": true,
          "metadata": {
            "description": "Optional. The lock settings of the public IP address."
          }
        },
        "idleTimeoutInMinutes": {
          "type": "int",
          "nullable": true,
          "metadata": {
            "description": "Optional. The idle timeout of the public IP address."
          }
        },
        "ddosSettings": {
          "$ref": "#/definitions/_2.ddosSettingsType",
          "nullable": true,
          "metadata": {
            "description": "Optional. The DDoS protection plan configuration associated with the public IP address."
          }
        },
        "dnsSettings": {
          "$ref": "#/definitions/_2.dnsSettingsType",
          "nullable": true,
          "metadata": {
            "description": "Optional. The DNS settings of the public IP address."
          }
        },
        "publicIPAddressVersion": {
          "type": "string",
          "allowedValues": [
            "IPv4",
            "IPv6"
          ],
          "nullable": true,
          "metadata": {
            "description": "Optional. The public IP address version."
          }
        },
        "publicIPAllocationMethod": {
          "type": "string",
          "allowedValues": [
            "Dynamic",
            "Static"
          ],
          "nullable": true,
          "metadata": {
            "description": "Optional. The public IP address allocation method."
          }
        },
        "publicIpPrefixResourceId": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "Optional. Resource ID of the Public IP Prefix object. This is only needed if you want your Public IPs created in a PIP Prefix."
          }
        },
        "publicIpNameSuffix": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "Optional. The name suffix of the public IP address resource."
          }
        },
        "roleAssignments": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/roleAssignmentType"
          },
          "nullable": true,
          "metadata": {
            "description": "Optional. Array of role assignments to create."
          }
        },
        "skuName": {
          "type": "string",
          "allowedValues": [
            "Basic",
            "Standard"
          ],
          "nullable": true,
          "metadata": {
            "description": "Optional. The SKU name of the public IP address."
          }
        },
        "skuTier": {
          "type": "string",
          "allowedValues": [
            "Global",
            "Regional"
          ],
          "nullable": true,
          "metadata": {
            "description": "Optional. The SKU tier of the public IP address."
          }
        },
        "tags": {
          "type": "object",
          "nullable": true,
          "metadata": {
            "description": "Optional. The tags of the public IP address."
          }
        },
        "zones": {
          "type": "array",
          "allowedValues": [
            1,
            2,
            3
          ],
          "nullable": true,
          "metadata": {
            "description": "Optional. The zones of the public IP address."
          }
        },
        "enableTelemetry": {
          "type": "bool",
          "nullable": true,
          "metadata": {
            "description": "Optional. Enable/Disable usage telemetry for the module."
          }
        }
      },
      "metadata": {
        "description": "The type for the public IP address configuration.",
        "__bicep_imported_from!": {
          "sourceTemplate": "modules/nic-configuration.bicep"
        }
      }
    },
    "diagnosticSettingFullType": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "Optional. The name of the diagnostic setting."
          }
        },
        "logCategoriesAndGroups": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "category": {
                "type": "string",
                "nullable": true,
                "metadata": {
                  "description": "Optional. Name of a Diagnostic Log category for a resource type this setting is applied to. Set the specific logs to collect here."
                }
              },
              "categoryGroup": {
                "type": "string",
                "nullable": true,
                "metadata": {
                  "description": "Optional. Name of a Diagnostic Log category group for a resource type this setting is applied to. Set to `allLogs` to collect all logs."
                }
              },
              "enabled": {
                "type": "bool",
                "nullable": true,
                "metadata": {
                  "description": "Optional. Enable or disable the category explicitly. Default is `true`."
                }
              }
            }
          },
          "nullable": true,
          "metadata": {
            "description": "Optional. The name of logs that will be streamed. \"allLogs\" includes all possible logs for the resource. Set to `[]` to disable log collection."
          }
        },
        "metricCategories": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "category": {
                "type": "string",
                "metadata": {
                  "description": "Required. Name of a Diagnostic Metric category for a resource type this setting is applied to. Set to `AllMetrics` to collect all metrics."
                }
              },
              "enabled": {
                "type": "bool",
                "nullable": true,
                "metadata": {
                  "description": "Optional. Enable or disable the category explicitly. Default is `true`."
                }
              }
            }
          },
          "nullable": true,
          "metadata": {
            "description": "Optional. The name of metrics that will be streamed. \"allMetrics\" includes all possible metrics for the resource. Set to `[]` to disable metric collection."
          }
        },
        "logAnalyticsDestinationType": {
          "type": "string",
          "allowedValues": [
            "AzureDiagnostics",
            "Dedicated"
          ],
          "nullable": true,
          "metadata": {
            "description": "Optional. A string indicating whether the export to Log Analytics should use the default destination type, i.e. AzureDiagnostics, or use a destination type."
          }
        },
        "workspaceResourceId": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "Optional. Resource ID of the diagnostic log analytics workspace. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
          }
        },
        "storageAccountResourceId": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "Optional. Resource ID of the diagnostic storage account. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
          }
        },
        "eventHubAuthorizationRuleResourceId": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "Optional. Resource ID of the diagnostic event hub authorization rule for the Event Hubs namespace in which the event hub should be created or streamed to."
          }
        },
        "eventHubName": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "Optional. Name of the diagnostic event hub within the namespace to which logs are streamed. Without this, an event hub is created for each log category. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
          }
        },
        "marketplacePartnerResourceId": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "Optional. The full ARM resource ID of the Marketplace resource to which you would like to send Diagnostic Logs."
          }
        }
      },
      "metadata": {
        "description": "An AVM-aligned type for a diagnostic setting. To be used if both logs & metrics are supported by the resource provider.",
        "__bicep_imported_from!": {
          "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.5.1"
        }
      }
    },
    "ipConfigurationType": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "Optional. The name of the IP configuration."
          }
        },
        "privateIPAllocationMethod": {
          "type": "string",
          "allowedValues": [
            "Dynamic",
            "Static"
          ],
          "nullable": true,
          "metadata": {
            "description": "Optional. The private IP address allocation method."
          }
        },
        "privateIPAddress": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "Optional. The private IP address."
          }
        },
        "subnetResourceId": {
          "type": "string",
          "metadata": {
            "description": "Required. The resource ID of the subnet."
          }
        },
        "loadBalancerBackendAddressPools": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/_1.backendAddressPoolType"
          },
          "nullable": true,
          "metadata": {
            "description": "Optional. The load balancer backend address pools."
          }
        },
        "applicationSecurityGroups": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/_1.applicationSecurityGroupType"
          },
          "nullable": true,
          "metadata": {
            "description": "Optional. The application security groups."
          }
        },
        "applicationGatewayBackendAddressPools": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/_1.applicationGatewayBackendAddressPoolsType"
          },
          "nullable": true,
          "metadata": {
            "description": "Optional. The application gateway backend address pools."
          }
        },
        "gatewayLoadBalancer": {
          "$ref": "#/definitions/subResourceType",
          "nullable": true,
          "metadata": {
            "description": "Optional. The gateway load balancer settings."
          }
        },
        "loadBalancerInboundNatRules": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/_1.inboundNatRuleType"
          },
          "nullable": true,
          "metadata": {
            "description": "Optional. The load balancer inbound NAT rules."
          }
        },
        "privateIPAddressVersion": {
          "type": "string",
          "allowedValues": [
            "IPv4",
            "IPv6"
          ],
          "nullable": true,
          "metadata": {
            "description": "Optional. The private IP address version."
          }
        },
        "virtualNetworkTaps": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/_1.virtualNetworkTapType"
          },
          "nullable": true,
          "metadata": {
            "description": "Optional. The virtual network taps."
          }
        },
        "pipConfiguration": {
          "$ref": "#/definitions/_3.publicIPConfigurationType",
          "nullable": true,
          "metadata": {
            "description": "Optional. The public IP address configuration."
          }
        },
        "diagnosticSettings": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/diagnosticSettingFullType"
          },
          "nullable": true,
          "metadata": {
            "description": "Optional. The diagnostic settings of the IP configuration."
          }
        },
        "tags": {
          "type": "object",
          "nullable": true,
          "metadata": {
            "description": "Optional. The tags of the public IP address."
          }
        },
        "enableTelemetry": {
          "type": "bool",
          "nullable": true,
          "metadata": {
            "description": "Optional. Enable/Disable usage telemetry for the module."
          }
        }
      },
      "metadata": {
        "description": "The type for the IP configuration.",
        "__bicep_imported_from!": {
          "sourceTemplate": "modules/nic-configuration.bicep"
        }
      }
    },
    "lockType": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "Optional. Specify the name of lock."
          }
        },
        "kind": {
          "type": "string",
          "allowedValues": [
            "CanNotDelete",
            "None",
            "ReadOnly"
          ],
          "nullable": true,
          "metadata": {
            "description": "Optional. Specify the type of lock."
          }
        }
      },
      "metadata": {
        "description": "An AVM-aligned type for a lock.",
        "__bicep_imported_from!": {
          "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.5.1"
        }
      }
    },
    "managedIdentityAllType": {
      "type": "object",
      "properties": {
        "systemAssigned": {
          "type": "bool",
          "nullable": true,
          "metadata": {
            "description": "Optional. Enables system assigned managed identity on the resource."
          }
        },
        "userAssignedResourceIds": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "nullable": true,
          "metadata": {
            "description": "Optional. The resource ID(s) to assign to the resource. Required if a user assigned identity is used for encryption."
          }
        }
      },
      "metadata": {
        "description": "An AVM-aligned type for a managed identity configuration. To be used if both a system-assigned & user-assigned identities are supported by the resource provider.",
        "__bicep_imported_from!": {
          "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.5.1"
        }
      }
    },
    "networkInterfaceIPConfigurationOutputType": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "metadata": {
            "description": "The name of the IP configuration."
          }
        },
        "privateIP": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "The private IP address."
          }
        },
        "publicIP": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "The public IP address."
          }
        }
      },
      "metadata": {
        "__bicep_imported_from!": {
          "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/res/network/network-interface:0.5.1"
        }
      }
    },
    "roleAssignmentType": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "Optional. The name (as GUID) of the role assignment. If not provided, a GUID will be generated."
          }
        },
        "roleDefinitionIdOrName": {
          "type": "string",
          "metadata": {
            "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
          }
        },
        "principalId": {
          "type": "string",
          "metadata": {
            "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
          }
        },
        "principalType": {
          "type": "string",
          "allowedValues": [
            "Device",
            "ForeignGroup",
            "Group",
            "ServicePrincipal",
            "User"
          ],
          "nullable": true,
          "metadata": {
            "description": "Optional. The principal type of the assigned principal ID."
          }
        },
        "description": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "Optional. The description of the role assignment."
          }
        },
        "condition": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
          }
        },
        "conditionVersion": {
          "type": "string",
          "allowedValues": [
            "2.0"
          ],
          "nullable": true,
          "metadata": {
            "description": "Optional. Version of the condition."
          }
        },
        "delegatedManagedIdentityResourceId": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "Optional. The Resource Id of the delegated managed identity resource."
          }
        }
      },
      "metadata": {
        "description": "An AVM-aligned type for a role assignment.",
        "__bicep_imported_from!": {
          "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.5.1"
        }
      }
    },
    "subResourceType": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "Optional. Resource ID of the sub resource."
          }
        }
      },
      "metadata": {
        "description": "The type for the sub resource.",
        "__bicep_imported_from!": {
          "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/res/network/network-interface:0.5.1"
        }
      }
    }
  },
  "parameters": {
    "name": {
      "type": "string",
      "metadata": {
        "description": "Required. The name of the virtual machine to be created. You should use a unique prefix to reduce name collisions in Active Directory."
      }
    },
    "computerName": {
      "type": "string",
      "defaultValue": "[parameters('name')]",
      "metadata": {
        "description": "Optional. Can be used if the computer name needs to be different from the Azure VM resource name. If not used, the resource name will be used as computer name."
      }
    },
    "vmSize": {
      "type": "string",
      "metadata": {
        "description": "Required. Specifies the size for the VMs."
      }
    },
    "encryptionAtHost": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Optional. This property can be used by user in the request to enable or disable the Host Encryption for the virtual machine. This will enable the encryption for all the disks including Resource/Temp disk at host itself. For security reasons, it is recommended to set encryptionAtHost to True. Restrictions: Cannot be enabled if Azure Disk Encryption (guest-VM encryption using bitlocker/DM-Crypt) is enabled on your VMs."
      }
    },
    "securityType": {
      "type": "string",
      "defaultValue": "",
      "allowedValues": [
        "",
        "ConfidentialVM",
        "TrustedLaunch"
      ],
      "metadata": {
        "description": "Optional. Specifies the SecurityType of the virtual machine. It has to be set to any specified value to enable UefiSettings. The default behavior is: UefiSettings will not be enabled unless this property is set."
      }
    },
    "secureBootEnabled": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Optional. Specifies whether secure boot should be enabled on the virtual machine. This parameter is part of the UefiSettings. SecurityType should be set to TrustedLaunch to enable UefiSettings."
      }
    },
    "vTpmEnabled": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Optional. Specifies whether vTPM should be enabled on the virtual machine. This parameter is part of the UefiSettings.  SecurityType should be set to TrustedLaunch to enable UefiSettings."
      }
    },
    "imageReference": {
      "$ref": "#/definitions/imageReferenceType",
      "metadata": {
        "description": "Required. OS image reference. In case of marketplace images, it's the combination of the publisher, offer, sku, version attributes. In case of custom images it's the resource ID of the custom image."
      }
    },
    "plan": {
      "$ref": "#/definitions/planType",
      "nullable": true,
      "metadata": {
        "description": "Optional. Specifies information about the marketplace image used to create the virtual machine. This element is only used for marketplace images. Before you can use a marketplace image from an API, you must enable the image for programmatic use."
      }
    },
    "osDisk": {
      "$ref": "#/definitions/osDiskType",
      "metadata": {
        "description": "Required. Specifies the OS disk. For security reasons, it is recommended to specify DiskEncryptionSet into the osDisk object.  Restrictions: DiskEncryptionSet cannot be enabled if Azure Disk Encryption (guest-VM encryption using bitlocker/DM-Crypt) is enabled on your VMs."
      }
    },
    "dataDisks": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/dataDiskType"
      },
      "nullable": true,
      "metadata": {
        "description": "Optional. Specifies the data disks. For security reasons, it is recommended to specify DiskEncryptionSet into the dataDisk object. Restrictions: DiskEncryptionSet cannot be enabled if Azure Disk Encryption (guest-VM encryption using bitlocker/DM-Crypt) is enabled on your VMs."
      }
    },
    "ultraSSDEnabled": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Optional. The flag that enables or disables a capability to have one or more managed data disks with UltraSSD_LRS storage account type on the VM or VMSS. Managed disks with storage account type UltraSSD_LRS can be added to a virtual machine or virtual machine scale set only if this property is enabled."
      }
    },
    "hibernationEnabled": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Optional. The flag that enables or disables hibernation capability on the VM."
      }
    },
    "adminUsername": {
      "type": "securestring",
      "metadata": {
        "description": "Required. Administrator username."
      }
    },
    "adminPassword": {
      "type": "securestring",
      "defaultValue": "",
      "metadata": {
        "description": "Optional. When specifying a Windows Virtual Machine, this value should be passed."
      }
    },
    "userData": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Optional. UserData for the VM, which must be base-64 encoded. Customer should not pass any secrets in here."
      }
    },
    "customData": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Optional. Custom data associated to the VM, this value will be automatically converted into base64 to account for the expected VM format."
      }
    },
    "certificatesToBeInstalled": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/vaultSecretGroupType"
      },
      "nullable": true,
      "metadata": {
        "description": "Optional. Specifies set of certificates that should be installed onto the virtual machine."
      }
    },
    "priority": {
      "type": "string",
      "nullable": true,
      "allowedValues": [
        "Regular",
        "Low",
        "Spot"
      ],
      "metadata": {
        "description": "Optional. Specifies the priority for the virtual machine."
      }
    },
    "evictionPolicy": {
      "type": "string",
      "defaultValue": "Deallocate",
      "allowedValues": [
        "Deallocate",
        "Delete"
      ],
      "metadata": {
        "description": "Optional. Specifies the eviction policy for the low priority virtual machine."
      }
    },
    "maxPriceForLowPriorityVm": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Optional. Specifies the maximum price you are willing to pay for a low priority VM/VMSS. This price is in US Dollars."
      }
    },
    "dedicatedHostId": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Optional. Specifies resource ID about the dedicated host that the virtual machine resides in."
      }
    },
    "licenseType": {
      "type": "string",
      "defaultValue": "",
      "allowedValues": [
        "RHEL_BYOS",
        "SLES_BYOS",
        "Windows_Client",
        "Windows_Server",
        ""
      ],
      "metadata": {
        "description": "Optional. Specifies that the image or disk that is being used was licensed on-premises."
      }
    },
    "publicKeys": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/publicKeyType"
      },
      "defaultValue": [],
      "metadata": {
        "description": "Optional. The list of SSH public keys used to authenticate with linux based VMs."
      }
    },
    "managedIdentities": {
      "$ref": "#/definitions/managedIdentityAllType",
      "nullable": true,
      "metadata": {
        "description": "Optional. The managed identity definition for this resource. The system-assigned managed identity will automatically be enabled if extensionAadJoinConfig.enabled = \"True\"."
      }
    },
    "bootDiagnostics": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Optional. Whether boot diagnostics should be enabled on the Virtual Machine. Boot diagnostics will be enabled with a managed storage account if no bootDiagnosticsStorageAccountName value is provided. If bootDiagnostics and bootDiagnosticsStorageAccountName values are not provided, boot diagnostics will be disabled."
      }
    },
    "bootDiagnosticStorageAccountName": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Optional. Custom storage account used to store boot diagnostic information. Boot diagnostics will be enabled with a custom storage account if a value is provided."
      }
    },
    "bootDiagnosticStorageAccountUri": {
      "type": "string",
      "defaultValue": "[format('.blob.{0}/', environment().suffixes.storage)]",
      "metadata": {
        "description": "Optional. Storage account boot diagnostic base URI."
      }
    },
    "proximityPlacementGroupResourceId": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Optional. Resource ID of a proximity placement group."
      }
    },
    "virtualMachineScaleSetResourceId": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Optional. Resource ID of a virtual machine scale set, where the VM should be added."
      }
    },
    "availabilitySetResourceId": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Optional. Resource ID of an availability set. Cannot be used in combination with availability zone nor scale set."
      }
    },
    "galleryApplications": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/vmGalleryApplicationType"
      },
      "nullable": true,
      "metadata": {
        "description": "Optional. Specifies the gallery applications that should be made available to the VM/VMSS."
      }
    },
    "zone": {
      "type": "int",
      "allowedValues": [
        0,
        1,
        2,
        3
      ],
      "metadata": {
        "description": "Required. If set to 1, 2 or 3, the availability zone for all VMs is hardcoded to that value. If zero, then availability zones is not used. Cannot be used in combination with availability set nor scale set."
      }
    },
    "nicConfigurations": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/nicConfigurationType"
      },
      "metadata": {
        "description": "Required. Configures NICs and PIPs."
      }
    },
    "backupVaultName": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Optional. Recovery service vault name to add VMs to backup."
      }
    },
    "backupVaultResourceGroup": {
      "type": "string",
      "defaultValue": "[resourceGroup().name]",
      "metadata": {
        "description": "Optional. Resource group of the backup recovery service vault. If not provided the current resource group name is considered by default."
      }
    },
    "backupPolicyName": {
      "type": "string",
      "defaultValue": "DefaultPolicy",
      "metadata": {
        "description": "Optional. Backup policy the VMs should be using for backup. If not provided, it will use the DefaultPolicy from the backup recovery service vault."
      }
    },
    "autoShutdownConfig": {
      "$ref": "#/definitions/autoShutDownConfigType",
      "defaultValue": {},
      "metadata": {
        "description": "Optional. The configuration for auto-shutdown."
      }
    },
    "maintenanceConfigurationResourceId": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Optional. The resource Id of a maintenance configuration for this VM."
      }
    },
    "allowExtensionOperations": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Optional. Specifies whether extension operations should be allowed on the virtual machine. This may only be set to False when no extensions are present on the virtual machine."
      }
    },
    "extensionDomainJoinPassword": {
      "type": "securestring",
      "defaultValue": "",
      "metadata": {
        "description": "Optional. Required if name is specified. Password of the user specified in user parameter."
      }
    },
    "extensionDomainJoinConfig": {
      "type": "secureObject",
      "defaultValue": {},
      "metadata": {
        "description": "Optional. The configuration for the [Domain Join] extension. Must at least contain the [\"enabled\": true] property to be executed."
      }
    },
    "extensionAadJoinConfig": {
      "type": "object",
      "defaultValue": {
        "enabled": false
      },
      "metadata": {
        "description": "Optional. The configuration for the [AAD Join] extension. Must at least contain the [\"enabled\": true] property to be executed. To enroll in Intune, add the setting mdmId: \"0000000a-0000-0000-c000-000000000000\"."
      }
    },
    "extensionAntiMalwareConfig": {
      "type": "object",
      "defaultValue": "[if(equals(parameters('osType'), 'Windows'), createObject('enabled', true()), createObject('enabled', false()))]",
      "metadata": {
        "description": "Optional. The configuration for the [Anti Malware] extension. Must at least contain the [\"enabled\": true] property to be executed."
      }
    },
    "extensionMonitoringAgentConfig": {
      "type": "object",
      "defaultValue": {
        "enabled": false,
        "dataCollectionRuleAssociations": []
      },
      "metadata": {
        "description": "Optional. The configuration for the [Monitoring Agent] extension. Must at least contain the [\"enabled\": true] property to be executed."
      }
    },
    "extensionDependencyAgentConfig": {
      "type": "object",
      "defaultValue": {
        "enabled": false
      },
      "metadata": {
        "description": "Optional. The configuration for the [Dependency Agent] extension. Must at least contain the [\"enabled\": true] property to be executed."
      }
    },
    "extensionNetworkWatcherAgentConfig": {
      "type": "object",
      "defaultValue": {
        "enabled": false
      },
      "metadata": {
        "description": "Optional. The configuration for the [Network Watcher Agent] extension. Must at least contain the [\"enabled\": true] property to be executed."
      }
    },
    "extensionAzureDiskEncryptionConfig": {
      "type": "object",
      "defaultValue": {
        "enabled": false
      },
      "metadata": {
        "description": "Optional. The configuration for the [Azure Disk Encryption] extension. Must at least contain the [\"enabled\": true] property to be executed. Restrictions: Cannot be enabled on disks that have encryption at host enabled. Managed disks encrypted using Azure Disk Encryption cannot be encrypted using customer-managed keys."
      }
    },
    "extensionDSCConfig": {
      "type": "object",
      "defaultValue": {
        "enabled": false
      },
      "metadata": {
        "description": "Optional. The configuration for the [Desired State Configuration] extension. Must at least contain the [\"enabled\": true] property to be executed."
      }
    },
    "extensionCustomScriptConfig": {
      "type": "object",
      "defaultValue": {
        "enabled": false,
        "fileData": []
      },
      "metadata": {
        "description": "Optional. The configuration for the [Custom Script] extension. Must at least contain the [\"enabled\": true] property to be executed."
      }
    },
    "extensionNvidiaGpuDriverWindows": {
      "type": "object",
      "defaultValue": {
        "enabled": false
      },
      "metadata": {
        "description": "Optional. The configuration for the [Nvidia Gpu Driver Windows] extension. Must at least contain the [\"enabled\": true] property to be executed."
      }
    },
    "extensionHostPoolRegistration": {
      "type": "object",
      "defaultValue": {
        "enabled": false
      },
      "metadata": {
        "description": "Optional. The configuration for the [Host Pool Registration] extension. Must at least contain the [\"enabled\": true] property to be executed. Needs a managed identy."
      }
    },
    "extensionGuestConfigurationExtension": {
      "type": "object",
      "defaultValue": {
        "enabled": false
      },
      "metadata": {
        "description": "Optional. The configuration for the [Guest Configuration] extension. Must at least contain the [\"enabled\": true] property to be executed. Needs a managed identy."
      }
    },
    "guestConfiguration": {
      "type": "object",
      "defaultValue": {},
      "metadata": {
        "description": "Optional. The guest configuration for the virtual machine. Needs the Guest Configuration extension to be enabled."
      }
    },
    "extensionCustomScriptProtectedSetting": {
      "type": "secureObject",
      "defaultValue": {},
      "metadata": {
        "description": "Optional. An object that contains the extension specific protected settings."
      }
    },
    "extensionGuestConfigurationExtensionProtectedSettings": {
      "type": "secureObject",
      "defaultValue": {},
      "metadata": {
        "description": "Optional. An object that contains the extension specific protected settings."
      }
    },
    "location": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "Optional. Location for all resources."
      }
    },
    "lock": {
      "$ref": "#/definitions/lockType",
      "nullable": true,
      "metadata": {
        "description": "Optional. The lock settings of the service."
      }
    },
    "roleAssignments": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/roleAssignmentType"
      },
      "nullable": true,
      "metadata": {
        "description": "Optional. Array of role assignments to create."
      }
    },
    "tags": {
      "type": "object",
      "nullable": true,
      "metadata": {
        "description": "Optional. Tags of the resource."
      }
    },
    "enableTelemetry": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Optional. Enable/Disable usage telemetry for module."
      }
    },
    "baseTime": {
      "type": "string",
      "defaultValue": "[utcNow('u')]",
      "metadata": {
        "description": "Generated. Do not provide a value! This date value is used to generate a registration token."
      }
    },
    "sasTokenValidityLength": {
      "type": "string",
      "defaultValue": "PT8H",
      "metadata": {
        "description": "Optional. SAS token validity length to use to download files from storage accounts. Usage: 'PT8H' - valid for 8 hours; 'P5D' - valid for 5 days; 'P1Y' - valid for 1 year. When not provided, the SAS token will be valid for 8 hours."
      }
    },
    "osType": {
      "type": "string",
      "allowedValues": [
        "Windows",
        "Linux"
      ],
      "metadata": {
        "description": "Required. The chosen OS type."
      }
    },
    "disablePasswordAuthentication": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Optional. Specifies whether password authentication should be disabled."
      }
    },
    "provisionVMAgent": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Optional. Indicates whether virtual machine agent should be provisioned on the virtual machine. When this property is not specified in the request body, default behavior is to set it to true. This will ensure that VM Agent is installed on the VM so that extensions can be added to the VM later."
      }
    },
    "enableAutomaticUpdates": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Optional. Indicates whether Automatic Updates is enabled for the Windows virtual machine. Default value is true. When patchMode is set to Manual, this parameter must be set to false. For virtual machine scale sets, this property can be updated and updates will take effect on OS reprovisioning."
      }
    },
    "patchMode": {
      "type": "string",
      "defaultValue": "",
      "allowedValues": [
        "AutomaticByPlatform",
        "AutomaticByOS",
        "Manual",
        "ImageDefault",
        ""
      ],
      "metadata": {
        "description": "Optional. VM guest patching orchestration mode. 'AutomaticByOS' & 'Manual' are for Windows only, 'ImageDefault' for Linux only. Refer to 'https://learn.microsoft.com/en-us/azure/virtual-machines/automatic-vm-guest-patching'."
      }
    },
    "bypassPlatformSafetyChecksOnUserSchedule": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Optional. Enables customer to schedule patching without accidental upgrades."
      }
    },
    "rebootSetting": {
      "type": "string",
      "defaultValue": "IfRequired",
      "allowedValues": [
        "Always",
        "IfRequired",
        "Never",
        "Unknown"
      ],
      "metadata": {
        "description": "Optional. Specifies the reboot setting for all AutomaticByPlatform patch installation operations."
      }
    },
    "patchAssessmentMode": {
      "type": "string",
      "defaultValue": "ImageDefault",
      "allowedValues": [
        "AutomaticByPlatform",
        "ImageDefault"
      ],
      "metadata": {
        "description": "Optional. VM guest patching assessment mode. Set it to 'AutomaticByPlatform' to enable automatically check for updates every 24 hours."
      }
    },
    "enableHotpatching": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Optional. Enables customers to patch their Azure VMs without requiring a reboot. For enableHotpatching, the 'provisionVMAgent' must be set to true and 'patchMode' must be set to 'AutomaticByPlatform'."
      }
    },
    "timeZone": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Optional. Specifies the time zone of the virtual machine. e.g. 'Pacific Standard Time'. Possible values can be `TimeZoneInfo.id` value from time zones returned by `TimeZoneInfo.GetSystemTimeZones`."
      }
    },
    "additionalUnattendContent": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/additionalUnattendContentType"
      },
      "nullable": true,
      "metadata": {
        "description": "Optional. Specifies additional XML formatted information that can be included in the Unattend.xml file, which is used by Windows Setup. Contents are defined by setting name, component name, and the pass in which the content is applied."
      }
    },
    "winRMListeners": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/winRMListenerType"
      },
      "nullable": true,
      "metadata": {
        "description": "Optional. Specifies the Windows Remote Management listeners. This enables remote Windows PowerShell."
      }
    },
    "configurationProfile": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Optional. The configuration profile of automanage. Either '/providers/Microsoft.Automanage/bestPractices/AzureBestPracticesProduction', 'providers/Microsoft.Automanage/bestPractices/AzureBestPracticesDevTest' or the resource Id of custom profile."
      }
    }
  },
  "variables": {
    "copy": [
      {
        "name": "publicKeysFormatted",
        "count": "[length(parameters('publicKeys'))]",
        "input": {
          "path": "[parameters('publicKeys')[copyIndex('publicKeysFormatted')].path]",
          "keyData": "[parameters('publicKeys')[copyIndex('publicKeysFormatted')].keyData]"
        }
      },
      {
        "name": "additionalUnattendContentFormatted",
        "count": "[length(coalesce(parameters('additionalUnattendContent'), createArray()))]",
        "input": {
          "settingName": "[coalesce(parameters('additionalUnattendContent'), createArray())[copyIndex('additionalUnattendContentFormatted')].settingName]",
          "content": "[coalesce(parameters('additionalUnattendContent'), createArray())[copyIndex('additionalUnattendContentFormatted')].content]",
          "componentName": "Microsoft-Windows-Shell-Setup",
          "passName": "OobeSystem"
        }
      },
      {
        "name": "formattedRoleAssignments",
        "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]",
        "input": "[union(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')], createObject('roleDefinitionId', coalesce(tryGet(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName), if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName)))))]"
      }
    ],
    "enableReferencedModulesTelemetry": false,
    "linuxConfiguration": {
      "disablePasswordAuthentication": "[parameters('disablePasswordAuthentication')]",
      "ssh": {
        "publicKeys": "[variables('publicKeysFormatted')]"
      },
      "provisionVMAgent": "[parameters('provisionVMAgent')]",
      "patchSettings": "[if(and(parameters('provisionVMAgent'), or(equals(toLower(parameters('patchMode')), toLower('AutomaticByPlatform')), equals(toLower(parameters('patchMode')), toLower('ImageDefault')))), createObject('patchMode', parameters('patchMode'), 'assessmentMode', parameters('patchAssessmentMode'), 'automaticByPlatformSettings', if(equals(toLower(parameters('patchMode')), toLower('AutomaticByPlatform')), createObject('bypassPlatformSafetyChecksOnUserSchedule', parameters('bypassPlatformSafetyChecksOnUserSchedule'), 'rebootSetting', parameters('rebootSetting')), null())), null())]"
    },
    "windowsConfiguration": {
      "provisionVMAgent": "[parameters('provisionVMAgent')]",
      "enableAutomaticUpdates": "[parameters('enableAutomaticUpdates')]",
      "patchSettings": "[if(and(parameters('provisionVMAgent'), or(or(equals(toLower(parameters('patchMode')), toLower('AutomaticByPlatform')), equals(toLower(parameters('patchMode')), toLower('AutomaticByOS'))), equals(toLower(parameters('patchMode')), toLower('Manual')))), createObject('patchMode', parameters('patchMode'), 'assessmentMode', parameters('patchAssessmentMode'), 'enableHotpatching', if(equals(toLower(parameters('patchMode')), toLower('AutomaticByPlatform')), parameters('enableHotpatching'), false()), 'automaticByPlatformSettings', if(equals(toLower(parameters('patchMode')), toLower('AutomaticByPlatform')), createObject('bypassPlatformSafetyChecksOnUserSchedule', parameters('bypassPlatformSafetyChecksOnUserSchedule'), 'rebootSetting', parameters('rebootSetting')), null())), null())]",
      "timeZone": "[if(empty(parameters('timeZone')), null(), parameters('timeZone'))]",
      "additionalUnattendContent": "[if(empty(parameters('additionalUnattendContent')), null(), variables('additionalUnattendContentFormatted'))]",
      "winRM": "[if(not(empty(parameters('winRMListeners'))), createObject('listeners', parameters('winRMListeners')), null())]"
    },
    "accountSasProperties": {
      "signedServices": "b",
      "signedPermission": "r",
      "signedExpiry": "[dateTimeAdd(parameters('baseTime'), parameters('sasTokenValidityLength'))]",
      "signedResourceTypes": "o",
      "signedProtocol": "https"
    },
    "formattedUserAssignedIdentities": "[reduce(map(coalesce(tryGet(parameters('managedIdentities'), 'userAssignedResourceIds'), createArray()), lambda('id', createObject(format('{0}', lambdaVariables('id')), createObject()))), createObject(), lambda('cur', 'next', union(lambdaVariables('cur'), lambdaVariables('next'))))]",
    "identity": "[if(not(empty(parameters('managedIdentities'))), createObject('type', if(if(parameters('extensionAadJoinConfig').enabled, true(), coalesce(tryGet(parameters('managedIdentities'), 'systemAssigned'), false())), if(not(empty(coalesce(tryGet(parameters('managedIdentities'), 'userAssignedResourceIds'), createObject()))), 'SystemAssigned, UserAssigned', 'SystemAssigned'), if(not(empty(coalesce(tryGet(parameters('managedIdentities'), 'userAssignedResourceIds'), createObject()))), 'UserAssigned', null())), 'userAssignedIdentities', if(not(empty(variables('formattedUserAssignedIdentities'))), variables('formattedUserAssignedIdentities'), null())), null())]",
    "builtInRoleNames": {
      "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
      "Data Operator for Managed Disks": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '959f8984-c045-4866-89c7-12bf9737be2e')]",
      "Desktop Virtualization Power On Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '489581de-a3bd-480d-9518-53dea7416b33')]",
      "Desktop Virtualization Power On Off Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '40c5ff49-9181-41f8-ae61-143b0e78555e')]",
      "Desktop Virtualization Virtual Machine Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'a959dbd1-f747-45e3-8ba6-dd80f235f97c')]",
      "DevTest Labs User": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '76283e04-6283-4c54-8f91-bcf1374a3c64')]",
      "Disk Backup Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '3e5e47e6-65f7-47ef-90b5-e5dd4d455f24')]",
      "Disk Pool Operator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '60fc6e62-5479-42d4-8bf4-67625fcc2840')]",
      "Disk Restore Operator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b50d9833-a0cb-478e-945f-707fcc997c13')]",
      "Disk Snapshot Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '7efff54f-a5b4-42b5-a1c5-5411624893ce')]",
      "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
      "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
      "Role Based Access Control Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]",
      "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]",
      "Virtual Machine Administrator Login": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '1c0163c0-47e6-4577-8991-ea5c82e286e4')]",
      "Virtual Machine Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '9980e02c-c2be-4d73-94e8-173b1dc7cf3c')]",
      "Virtual Machine User Login": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'fb879df8-f326-4884-b1cf-06f3ad86be52')]",
      "VM Scanner Operator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'd24ecba3-c1f4-40fa-a7bb-4588a071e8fd')]"
    }
  },
  "resources": {
    "avmTelemetry": {
      "condition": "[parameters('enableTelemetry')]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2024-03-01",
      "name": "[format('46d3xbcp.res.compute-virtualmachine.{0}.{1}', replace('-..--..-', '.', '-'), substring(uniqueString(deployment().name, parameters('location')), 0, 4))]",
      "properties": {
        "mode": "Incremental",
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "resources": [],
          "outputs": {
            "telemetry": {
              "type": "String",
              "value": "For more information, see https://aka.ms/avm/TelemetryInfo"
            }
          }
        }
      }
    },
    "managedDataDisks": {
      "copy": {
        "name": "managedDataDisks",
        "count": "[length(coalesce(parameters('dataDisks'), createArray()))]"
      },
      "condition": "[empty(tryGet(coalesce(parameters('dataDisks'), createArray())[copyIndex()].managedDisk, 'id'))]",
      "type": "Microsoft.Compute/disks",
      "apiVersion": "2024-03-02",
      "name": "[coalesce(tryGet(coalesce(parameters('dataDisks'), createArray())[copyIndex()], 'name'), format('{0}-disk-data-{1}', parameters('name'), padLeft(add(copyIndex(), 1), 2, '0')))]",
      "location": "[parameters('location')]",
      "sku": {
        "name": "[tryGet(coalesce(parameters('dataDisks'), createArray())[copyIndex()].managedDisk, 'storageAccountType')]"
      },
      "properties": {
        "diskSizeGB": "[coalesce(parameters('dataDisks'), createArray())[copyIndex()].diskSizeGB]",
        "creationData": {
          "createOption": "[coalesce(tryGet(coalesce(parameters('dataDisks'), createArray())[copyIndex()], 'createoption'), 'Empty')]"
        },
        "diskIOPSReadWrite": "[tryGet(coalesce(parameters('dataDisks'), createArray())[copyIndex()], 'diskIOPSReadWrite')]",
        "diskMBpsReadWrite": "[tryGet(coalesce(parameters('dataDisks'), createArray())[copyIndex()], 'diskMBpsReadWrite')]"
      },
      "zones": "[if(and(not(equals(parameters('zone'), 0)), not(contains(tryGet(coalesce(parameters('dataDisks'), createArray())[copyIndex()].managedDisk, 'storageAccountType'), 'ZRS'))), array(string(parameters('zone'))), null())]",
      "tags": "[coalesce(tryGet(coalesce(parameters('dataDisks'), createArray())[copyIndex()], 'tags'), parameters('tags'))]"
    },
    "vm": {
      "type": "Microsoft.Compute/virtualMachines",
      "apiVersion": "2024-07-01",
      "name": "[parameters('name')]",
      "location": "[parameters('location')]",
      "identity": "[variables('identity')]",
      "tags": "[parameters('tags')]",
      "zones": "[if(not(equals(parameters('zone'), 0)), array(string(parameters('zone'))), null())]",
      "plan": "[parameters('plan')]",
      "properties": {
        "hardwareProfile": {
          "vmSize": "[parameters('vmSize')]"
        },
        "securityProfile": {
          "encryptionAtHost": "[if(parameters('encryptionAtHost'), parameters('encryptionAtHost'), null())]",
          "securityType": "[parameters('securityType')]",
          "uefiSettings": "[if(equals(parameters('securityType'), 'TrustedLaunch'), createObject('secureBootEnabled', parameters('secureBootEnabled'), 'vTpmEnabled', parameters('vTpmEnabled')), null())]"
        },
        "storageProfile": {
          "copy": [
            {
              "name": "dataDisks",
              "count": "[length(coalesce(parameters('dataDisks'), createArray()))]",
              "input": {
                "lun": "[coalesce(tryGet(coalesce(parameters('dataDisks'), createArray())[copyIndex('dataDisks')], 'lun'), copyIndex('dataDisks'))]",
                "name": "[if(not(empty(tryGet(coalesce(parameters('dataDisks'), createArray())[copyIndex('dataDisks')].managedDisk, 'id'))), last(split(coalesce(coalesce(parameters('dataDisks'), createArray())[copyIndex('dataDisks')].managedDisk.id, ''), '/')), coalesce(tryGet(coalesce(parameters('dataDisks'), createArray())[copyIndex('dataDisks')], 'name'), format('{0}-disk-data-{1}', parameters('name'), padLeft(add(copyIndex('dataDisks'), 1), 2, '0'))))]",
                "createOption": "[if(or(not(equals(resourceId('Microsoft.Compute/disks', coalesce(tryGet(coalesce(parameters('dataDisks'), createArray())[copyIndex('dataDisks')], 'name'), format('{0}-disk-data-{1}', parameters('name'), padLeft(add(copyIndex('dataDisks'), 1), 2, '0')))), null())), not(empty(tryGet(coalesce(parameters('dataDisks'), createArray())[copyIndex('dataDisks')].managedDisk, 'id')))), 'Attach', coalesce(tryGet(coalesce(parameters('dataDisks'), createArray())[copyIndex('dataDisks')], 'createoption'), 'Empty'))]",
                "deleteOption": "[if(not(empty(tryGet(coalesce(parameters('dataDisks'), createArray())[copyIndex('dataDisks')].managedDisk, 'id'))), 'Detach', coalesce(tryGet(coalesce(parameters('dataDisks'), createArray())[copyIndex('dataDisks')], 'deleteOption'), 'Delete'))]",
                "caching": "[if(not(empty(tryGet(coalesce(parameters('dataDisks'), createArray())[copyIndex('dataDisks')].managedDisk, 'id'))), 'None', coalesce(tryGet(coalesce(parameters('dataDisks'), createArray())[copyIndex('dataDisks')], 'caching'), 'ReadOnly'))]",
                "managedDisk": {
                  "id": "[coalesce(tryGet(coalesce(parameters('dataDisks'), createArray())[copyIndex('dataDisks')].managedDisk, 'id'), resourceId('Microsoft.Compute/disks', coalesce(tryGet(coalesce(parameters('dataDisks'), createArray())[copyIndex('dataDisks')], 'name'), format('{0}-disk-data-{1}', parameters('name'), padLeft(add(copyIndex('dataDisks'), 1), 2, '0')))))]",
                  "diskEncryptionSet": "[if(contains(coalesce(parameters('dataDisks'), createArray())[copyIndex('dataDisks')].managedDisk, 'diskEncryptionSet'), createObject('id', coalesce(parameters('dataDisks'), createArray())[copyIndex('dataDisks')].managedDisk.diskEncryptionSet.id), null())]"
                }
              }
            }
          ],
          "imageReference": "[parameters('imageReference')]",
          "osDisk": {
            "name": "[coalesce(tryGet(parameters('osDisk'), 'name'), format('{0}-disk-os-01', parameters('name')))]",
            "createOption": "[coalesce(tryGet(parameters('osDisk'), 'createOption'), 'FromImage')]",
            "deleteOption": "[coalesce(tryGet(parameters('osDisk'), 'deleteOption'), 'Delete')]",
            "diffDiskSettings": "[if(empty(coalesce(tryGet(parameters('osDisk'), 'diffDiskSettings'), createObject())), null(), createObject('option', 'Local', 'placement', parameters('osDisk').diffDiskSettings.placement))]",
            "diskSizeGB": "[tryGet(parameters('osDisk'), 'diskSizeGB')]",
            "caching": "[coalesce(tryGet(parameters('osDisk'), 'caching'), 'ReadOnly')]",
            "managedDisk": {
              "storageAccountType": "[tryGet(parameters('osDisk').managedDisk, 'storageAccountType')]",
              "diskEncryptionSet": {
                "id": "[tryGet(parameters('osDisk').managedDisk, 'diskEncryptionSetResourceId')]"
              }
            }
          }
        },
        "additionalCapabilities": {
          "ultraSSDEnabled": "[parameters('ultraSSDEnabled')]",
          "hibernationEnabled": "[parameters('hibernationEnabled')]"
        },
        "osProfile": {
          "computerName": "[parameters('computerName')]",
          "adminUsername": "[parameters('adminUsername')]",
          "adminPassword": "[parameters('adminPassword')]",
          "customData": "[if(not(empty(parameters('customData'))), base64(parameters('customData')), null())]",
          "windowsConfiguration": "[if(equals(parameters('osType'), 'Windows'), variables('windowsConfiguration'), null())]",
          "linuxConfiguration": "[if(equals(parameters('osType'), 'Linux'), variables('linuxConfiguration'), null())]",
          "secrets": "[parameters('certificatesToBeInstalled')]",
          "allowExtensionOperations": "[parameters('allowExtensionOperations')]"
        },
        "networkProfile": {
          "copy": [
            {
              "name": "networkInterfaces",
              "count": "[length(parameters('nicConfigurations'))]",
              "input": {
                "properties": {
                  "deleteOption": "[coalesce(tryGet(parameters('nicConfigurations')[copyIndex('networkInterfaces')], 'deleteOption'), 'Delete')]",
                  "primary": "[if(equals(copyIndex('networkInterfaces'), 0), true(), false())]"
                },
                "id": "[resourceId('Microsoft.Network/networkInterfaces', coalesce(tryGet(parameters('nicConfigurations')[copyIndex('networkInterfaces')], 'name'), format('{0}{1}', parameters('name'), tryGet(parameters('nicConfigurations')[copyIndex('networkInterfaces')], 'nicSuffix'))))]"
              }
            }
          ]
        },
        "diagnosticsProfile": {
          "bootDiagnostics": {
            "enabled": "[if(not(empty(parameters('bootDiagnosticStorageAccountName'))), true(), parameters('bootDiagnostics'))]",
            "storageUri": "[if(not(empty(parameters('bootDiagnosticStorageAccountName'))), format('https://{0}{1}', parameters('bootDiagnosticStorageAccountName'), parameters('bootDiagnosticStorageAccountUri')), null())]"
          }
        },
        "applicationProfile": "[if(not(empty(parameters('galleryApplications'))), createObject('galleryApplications', parameters('galleryApplications')), null())]",
        "availabilitySet": "[if(not(empty(parameters('availabilitySetResourceId'))), createObject('id', parameters('availabilitySetResourceId')), null())]",
        "proximityPlacementGroup": "[if(not(empty(parameters('proximityPlacementGroupResourceId'))), createObject('id', parameters('proximityPlacementGroupResourceId')), null())]",
        "virtualMachineScaleSet": "[if(not(empty(parameters('virtualMachineScaleSetResourceId'))), createObject('id', parameters('virtualMachineScaleSetResourceId')), null())]",
        "priority": "[parameters('priority')]",
        "evictionPolicy": "[if(and(not(empty(parameters('priority'))), not(equals(parameters('priority'), 'Regular'))), parameters('evictionPolicy'), null())]",
        "billingProfile": "[if(and(not(empty(parameters('priority'))), not(empty(parameters('maxPriceForLowPriorityVm')))), createObject('maxPrice', json(parameters('maxPriceForLowPriorityVm'))), null())]",
        "host": "[if(not(empty(parameters('dedicatedHostId'))), createObject('id', parameters('dedicatedHostId')), null())]",
        "licenseType": "[if(not(empty(parameters('licenseType'))), parameters('licenseType'), null())]",
        "userData": "[if(not(empty(parameters('userData'))), base64(parameters('userData')), null())]"
      },
      "dependsOn": [
        "managedDataDisks",
        "vm_nic"
      ]
    },
    "vm_configurationAssignment": {
      "condition": "[not(empty(parameters('maintenanceConfigurationResourceId')))]",
      "type": "Microsoft.Maintenance/configurationAssignments",
      "apiVersion": "2023-04-01",
      "scope": "[format('Microsoft.Compute/virtualMachines/{0}', parameters('name'))]",
      "name": "[format('{0}assignment', parameters('name'))]",
      "location": "[parameters('location')]",
      "properties": {
        "maintenanceConfigurationId": "[parameters('maintenanceConfigurationResourceId')]",
        "resourceId": "[resourceId('Microsoft.Compute/virtualMachines', parameters('name'))]"
      },
      "dependsOn": [
        "vm"
      ]
    },
    "vm_configurationProfileAssignment": {
      "condition": "[not(empty(parameters('configurationProfile')))]",
      "type": "Microsoft.Automanage/configurationProfileAssignments",
      "apiVersion": "2022-05-04",
      "scope": "[format('Microsoft.Compute/virtualMachines/{0}', parameters('name'))]",
      "name": "default",
      "properties": {
        "configurationProfile": "[parameters('configurationProfile')]"
      },
      "dependsOn": [
        "vm"
      ]
    },
    "vm_autoShutdownConfiguration": {
      "condition": "[not(empty(parameters('autoShutdownConfig')))]",
      "type": "Microsoft.DevTestLab/schedules",
      "apiVersion": "2018-09-15",
      "name": "[format('shutdown-computevm-{0}', parameters('name'))]",
      "location": "[parameters('location')]",
      "properties": {
        "status": "[coalesce(tryGet(parameters('autoShutdownConfig'), 'status'), 'Disabled')]",
        "targetResourceId": "[resourceId('Microsoft.Compute/virtualMachines', parameters('name'))]",
        "taskType": "ComputeVmShutdownTask",
        "dailyRecurrence": {
          "time": "[coalesce(tryGet(parameters('autoShutdownConfig'), 'dailyRecurrenceTime'), '19:00')]"
        },
        "timeZoneId": "[coalesce(tryGet(parameters('autoShutdownConfig'), 'timeZone'), 'UTC')]",
        "notificationSettings": "[if(contains(parameters('autoShutdownConfig'), 'notificationSettings'), createObject('status', coalesce(tryGet(parameters('autoShutdownConfig'), 'status'), 'Disabled'), 'emailRecipient', coalesce(tryGet(tryGet(parameters('autoShutdownConfig'), 'notificationSettings'), 'emailRecipient'), ''), 'notificationLocale', coalesce(tryGet(tryGet(parameters('autoShutdownConfig'), 'notificationSettings'), 'notificationLocale'), 'en'), 'webhookUrl', coalesce(tryGet(tryGet(parameters('autoShutdownConfig'), 'notificationSettings'), 'webhookUrl'), ''), 'timeInMinutes', coalesce(tryGet(tryGet(parameters('autoShutdownConfig'), 'notificationSettings'), 'timeInMinutes'), 30)), null())]"
      },
      "dependsOn": [
        "vm"
      ]
    },
    "vm_dataCollectionRuleAssociations": {
      "copy": {
        "name": "vm_dataCollectionRuleAssociations",
        "count": "[length(parameters('extensionMonitoringAgentConfig').dataCollectionRuleAssociations)]"
      },
      "condition": "[parameters('extensionMonitoringAgentConfig').enabled]",
      "type": "Microsoft.Insights/dataCollectionRuleAssociations",
      "apiVersion": "2023-03-11",
      "scope": "[format('Microsoft.Compute/virtualMachines/{0}', parameters('name'))]",
      "name": "[parameters('extensionMonitoringAgentConfig').dataCollectionRuleAssociations[copyIndex()].name]",
      "properties": {
        "dataCollectionRuleId": "[parameters('extensionMonitoringAgentConfig').dataCollectionRuleAssociations[copyIndex()].dataCollectionRuleResourceId]"
      },
      "dependsOn": [
        "vm",
        "vm_azureMonitorAgentExtension"
      ]
    },
    "AzureWindowsBaseline": {
      "condition": "[not(empty(parameters('guestConfiguration')))]",
      "type": "Microsoft.GuestConfiguration/guestConfigurationAssignments",
      "apiVersion": "2020-06-25",
      "scope": "[format('Microsoft.Compute/virtualMachines/{0}', parameters('name'))]",
      "name": "[coalesce(tryGet(parameters('guestConfiguration'), 'name'), 'AzureWindowsBaseline')]",
      "location": "[parameters('location')]",
      "properties": {
        "guestConfiguration": "[parameters('guestConfiguration')]"
      },
      "dependsOn": [
        "vm",
        "vm_azureGuestConfigurationExtension"
      ]
    },
    "vm_lock": {
      "condition": "[and(not(empty(coalesce(parameters('lock'), createObject()))), not(equals(tryGet(parameters('lock'), 'kind'), 'None')))]",
      "type": "Microsoft.Authorization/locks",
      "apiVersion": "2020-05-01",
      "scope": "[format('Microsoft.Compute/virtualMachines/{0}', parameters('name'))]",
      "name": "[coalesce(tryGet(parameters('lock'), 'name'), format('lock-{0}', parameters('name')))]",
      "properties": {
        "level": "[coalesce(tryGet(parameters('lock'), 'kind'), '')]",
        "notes": "[if(equals(tryGet(parameters('lock'), 'kind'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot delete or modify the resource or child resources.')]"
      },
      "dependsOn": [
        "vm"
      ]
    },
    "vm_roleAssignments": {
      "copy": {
        "name": "vm_roleAssignments",
        "count": "[length(coalesce(variables('formattedRoleAssignments'), createArray()))]"
      },
      "type": "Microsoft.Authorization/roleAssignments",
      "apiVersion": "2022-04-01",
      "scope": "[format('Microsoft.Compute/virtualMachines/{0}', parameters('name'))]",
      "name": "[coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'name'), guid(resourceId('Microsoft.Compute/virtualMachines', parameters('name')), coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId, coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId))]",
      "properties": {
        "roleDefinitionId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId]",
        "principalId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId]",
        "description": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'description')]",
        "principalType": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'principalType')]",
        "condition": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition')]",
        "conditionVersion": "[if(not(empty(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
        "delegatedManagedIdentityResourceId": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
      },
      "dependsOn": [
        "vm"
      ]
    },
    "vm_nic": {
      "copy": {
        "name": "vm_nic",
        "count": "[length(parameters('nicConfigurations'))]"
      },
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('{0}-VM-Nic-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "networkInterfaceName": {
            "value": "[coalesce(tryGet(parameters('nicConfigurations')[copyIndex()], 'name'), format('{0}{1}', parameters('name'), tryGet(parameters('nicConfigurations')[copyIndex()], 'nicSuffix')))]"
          },
          "virtualMachineName": {
            "value": "[parameters('name')]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "enableIPForwarding": {
            "value": "[coalesce(tryGet(parameters('nicConfigurations')[copyIndex()], 'enableIPForwarding'), false())]"
          },
          "enableAcceleratedNetworking": {
            "value": "[coalesce(tryGet(parameters('nicConfigurations')[copyIndex()], 'enableAcceleratedNetworking'), true())]"
          },
          "dnsServers": "[if(contains(parameters('nicConfigurations')[copyIndex()], 'dnsServers'), if(not(empty(tryGet(parameters('nicConfigurations')[copyIndex()], 'dnsServers'))), createObject('value', tryGet(parameters('nicConfigurations')[copyIndex()], 'dnsServers')), createObject('value', createArray())), createObject('value', createArray()))]",
          "networkSecurityGroupResourceId": {
            "value": "[coalesce(tryGet(parameters('nicConfigurations')[copyIndex()], 'networkSecurityGroupResourceId'), '')]"
          },
          "ipConfigurations": {
            "value": "[parameters('nicConfigurations')[copyIndex()].ipConfigurations]"
          },
          "lock": {
            "value": "[coalesce(tryGet(parameters('nicConfigurations')[copyIndex()], 'lock'), parameters('lock'))]"
          },
          "tags": {
            "value": "[coalesce(tryGet(parameters('nicConfigurations')[copyIndex()], 'tags'), parameters('tags'))]"
          },
          "diagnosticSettings": {
            "value": "[tryGet(parameters('nicConfigurations')[copyIndex()], 'diagnosticSettings')]"
          },
          "roleAssignments": {
            "value": "[tryGet(parameters('nicConfigurations')[copyIndex()], 'roleAssignments')]"
          },
          "enableTelemetry": {
            "value": "[variables('enableReferencedModulesTelemetry')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "languageVersion": "2.0",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.34.44.8038",
              "templateHash": "3333482934245501039"
            }
          },
          "definitions": {
            "publicIPConfigurationType": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The name of the Public IP Address."
                  }
                },
                "publicIPAddressResourceId": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The resource ID of the public IP address."
                  }
                },
                "diagnosticSettings": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/diagnosticSettingFullType"
                  },
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Diagnostic settings for the public IP address."
                  }
                },
                "location": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The idle timeout in minutes."
                  }
                },
                "lock": {
                  "$ref": "#/definitions/lockType",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The lock settings of the public IP address."
                  }
                },
                "idleTimeoutInMinutes": {
                  "type": "int",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The idle timeout of the public IP address."
                  }
                },
                "ddosSettings": {
                  "$ref": "#/definitions/ddosSettingsType",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The DDoS protection plan configuration associated with the public IP address."
                  }
                },
                "dnsSettings": {
                  "$ref": "#/definitions/dnsSettingsType",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The DNS settings of the public IP address."
                  }
                },
                "publicIPAddressVersion": {
                  "type": "string",
                  "allowedValues": [
                    "IPv4",
                    "IPv6"
                  ],
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The public IP address version."
                  }
                },
                "publicIPAllocationMethod": {
                  "type": "string",
                  "allowedValues": [
                    "Dynamic",
                    "Static"
                  ],
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The public IP address allocation method."
                  }
                },
                "publicIpPrefixResourceId": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Resource ID of the Public IP Prefix object. This is only needed if you want your Public IPs created in a PIP Prefix."
                  }
                },
                "publicIpNameSuffix": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The name suffix of the public IP address resource."
                  }
                },
                "roleAssignments": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/roleAssignmentType"
                  },
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Array of role assignments to create."
                  }
                },
                "skuName": {
                  "type": "string",
                  "allowedValues": [
                    "Basic",
                    "Standard"
                  ],
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The SKU name of the public IP address."
                  }
                },
                "skuTier": {
                  "type": "string",
                  "allowedValues": [
                    "Global",
                    "Regional"
                  ],
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The SKU tier of the public IP address."
                  }
                },
                "tags": {
                  "type": "object",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The tags of the public IP address."
                  }
                },
                "zones": {
                  "type": "array",
                  "allowedValues": [
                    1,
                    2,
                    3
                  ],
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The zones of the public IP address."
                  }
                },
                "enableTelemetry": {
                  "type": "bool",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Enable/Disable usage telemetry for the module."
                  }
                }
              },
              "metadata": {
                "__bicep_export!": true,
                "description": "The type for the public IP address configuration."
              }
            },
            "ipConfigurationType": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The name of the IP configuration."
                  }
                },
                "privateIPAllocationMethod": {
                  "type": "string",
                  "allowedValues": [
                    "Dynamic",
                    "Static"
                  ],
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The private IP address allocation method."
                  }
                },
                "privateIPAddress": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The private IP address."
                  }
                },
                "subnetResourceId": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. The resource ID of the subnet."
                  }
                },
                "loadBalancerBackendAddressPools": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/backendAddressPoolType"
                  },
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The load balancer backend address pools."
                  }
                },
                "applicationSecurityGroups": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/applicationSecurityGroupType"
                  },
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The application security groups."
                  }
                },
                "applicationGatewayBackendAddressPools": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/applicationGatewayBackendAddressPoolsType"
                  },
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The application gateway backend address pools."
                  }
                },
                "gatewayLoadBalancer": {
                  "$ref": "#/definitions/subResourceType",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The gateway load balancer settings."
                  }
                },
                "loadBalancerInboundNatRules": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/inboundNatRuleType"
                  },
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The load balancer inbound NAT rules."
                  }
                },
                "privateIPAddressVersion": {
                  "type": "string",
                  "allowedValues": [
                    "IPv4",
                    "IPv6"
                  ],
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The private IP address version."
                  }
                },
                "virtualNetworkTaps": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/virtualNetworkTapType"
                  },
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The virtual network taps."
                  }
                },
                "pipConfiguration": {
                  "$ref": "#/definitions/publicIPConfigurationType",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The public IP address configuration."
                  }
                },
                "diagnosticSettings": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/diagnosticSettingFullType"
                  },
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The diagnostic settings of the IP configuration."
                  }
                },
                "tags": {
                  "type": "object",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The tags of the public IP address."
                  }
                },
                "enableTelemetry": {
                  "type": "bool",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Enable/Disable usage telemetry for the module."
                  }
                }
              },
              "metadata": {
                "__bicep_export!": true,
                "description": "The type for the IP configuration."
              }
            },
            "applicationGatewayBackendAddressPoolsType": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Resource ID of the backend address pool."
                  }
                },
                "name": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Name of the backend address pool that is unique within an Application Gateway."
                  }
                },
                "properties": {
                  "type": "object",
                  "properties": {
                    "backendAddresses": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "ipAddress": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. IP address of the backend address."
                            }
                          },
                          "fqdn": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. FQDN of the backend address."
                            }
                          }
                        }
                      },
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Backend addresses."
                      }
                    }
                  },
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Properties of the application gateway backend address pool."
                  }
                }
              },
              "metadata": {
                "description": "The type for the application gateway backend address pool.",
                "__bicep_imported_from!": {
                  "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/res/network/network-interface:0.5.1"
                }
              }
            },
            "applicationSecurityGroupType": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Resource ID of the application security group."
                  }
                },
                "location": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Location of the application security group."
                  }
                },
                "properties": {
                  "type": "object",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Properties of the application security group."
                  }
                },
                "tags": {
                  "type": "object",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Tags of the application security group."
                  }
                }
              },
              "metadata": {
                "description": "The type for the application security group.",
                "__bicep_imported_from!": {
                  "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/res/network/network-interface:0.5.1"
                }
              }
            },
            "backendAddressPoolType": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The resource ID of the backend address pool."
                  }
                },
                "name": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The name of the backend address pool."
                  }
                },
                "properties": {
                  "type": "object",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The properties of the backend address pool."
                  }
                }
              },
              "metadata": {
                "description": "The type for a backend address pool.",
                "__bicep_imported_from!": {
                  "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/res/network/network-interface:0.5.1"
                }
              }
            },
            "ddosSettingsType": {
              "type": "object",
              "properties": {
                "ddosProtectionPlan": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The resource ID of the DDOS protection plan associated with the public IP address."
                      }
                    }
                  },
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The DDoS protection plan associated with the public IP address."
                  }
                },
                "protectionMode": {
                  "type": "string",
                  "allowedValues": [
                    "Enabled"
                  ],
                  "metadata": {
                    "description": "Required. The DDoS protection policy customizations."
                  }
                }
              },
              "metadata": {
                "__bicep_imported_from!": {
                  "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/res/network/public-ip-address:0.8.0"
                }
              }
            },
            "diagnosticSettingFullType": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The name of the diagnostic setting."
                  }
                },
                "logCategoriesAndGroups": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "category": {
                        "type": "string",
                        "nullable": true,
                        "metadata": {
                          "description": "Optional. Name of a Diagnostic Log category for a resource type this setting is applied to. Set the specific logs to collect here."
                        }
                      },
                      "categoryGroup": {
                        "type": "string",
                        "nullable": true,
                        "metadata": {
                          "description": "Optional. Name of a Diagnostic Log category group for a resource type this setting is applied to. Set to `allLogs` to collect all logs."
                        }
                      },
                      "enabled": {
                        "type": "bool",
                        "nullable": true,
                        "metadata": {
                          "description": "Optional. Enable or disable the category explicitly. Default is `true`."
                        }
                      }
                    }
                  },
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The name of logs that will be streamed. \"allLogs\" includes all possible logs for the resource. Set to `[]` to disable log collection."
                  }
                },
                "metricCategories": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "category": {
                        "type": "string",
                        "metadata": {
                          "description": "Required. Name of a Diagnostic Metric category for a resource type this setting is applied to. Set to `AllMetrics` to collect all metrics."
                        }
                      },
                      "enabled": {
                        "type": "bool",
                        "nullable": true,
                        "metadata": {
                          "description": "Optional. Enable or disable the category explicitly. Default is `true`."
                        }
                      }
                    }
                  },
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The name of metrics that will be streamed. \"allMetrics\" includes all possible metrics for the resource. Set to `[]` to disable metric collection."
                  }
                },
                "logAnalyticsDestinationType": {
                  "type": "string",
                  "allowedValues": [
                    "AzureDiagnostics",
                    "Dedicated"
                  ],
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. A string indicating whether the export to Log Analytics should use the default destination type, i.e. AzureDiagnostics, or use a destination type."
                  }
                },
                "workspaceResourceId": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Resource ID of the diagnostic log analytics workspace. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                  }
                },
                "storageAccountResourceId": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Resource ID of the diagnostic storage account. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                  }
                },
                "eventHubAuthorizationRuleResourceId": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Resource ID of the diagnostic event hub authorization rule for the Event Hubs namespace in which the event hub should be created or streamed to."
                  }
                },
                "eventHubName": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Name of the diagnostic event hub within the namespace to which logs are streamed. Without this, an event hub is created for each log category. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                  }
                },
                "marketplacePartnerResourceId": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The full ARM resource ID of the Marketplace resource to which you would like to send Diagnostic Logs."
                  }
                }
              },
              "metadata": {
                "description": "An AVM-aligned type for a diagnostic setting. To be used if both logs & metrics are supported by the resource provider.",
                "__bicep_imported_from!": {
                  "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.5.1"
                }
              }
            },
            "dnsSettingsType": {
              "type": "object",
              "properties": {
                "domainNameLabel": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. The domain name label. The concatenation of the domain name label and the regionalized DNS zone make up the fully qualified domain name associated with the public IP address. If a domain name label is specified, an A DNS record is created for the public IP in the Microsoft Azure DNS system."
                  }
                },
                "domainNameLabelScope": {
                  "type": "string",
                  "allowedValues": [
                    "NoReuse",
                    "ResourceGroupReuse",
                    "SubscriptionReuse",
                    "TenantReuse"
                  ],
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The domain name label scope. If a domain name label and a domain name label scope are specified, an A DNS record is created for the public IP in the Microsoft Azure DNS system with a hashed value includes in FQDN."
                  }
                },
                "fqdn": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The Fully Qualified Domain Name of the A DNS record associated with the public IP. This is the concatenation of the domainNameLabel and the regionalized DNS zone."
                  }
                },
                "reverseFqdn": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The reverse FQDN. A user-visible, fully qualified domain name that resolves to this public IP address. If the reverseFqdn is specified, then a PTR DNS record is created pointing from the IP address in the in-addr.arpa domain to the reverse FQDN."
                  }
                }
              },
              "metadata": {
                "__bicep_imported_from!": {
                  "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/res/network/public-ip-address:0.8.0"
                }
              }
            },
            "inboundNatRuleType": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Resource ID of the inbound NAT rule."
                  }
                },
                "name": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Name of the resource that is unique within the set of inbound NAT rules used by the load balancer. This name can be used to access the resource."
                  }
                },
                "properties": {
                  "type": "object",
                  "properties": {
                    "backendAddressPool": {
                      "$ref": "#/definitions/subResourceType",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. A reference to backendAddressPool resource."
                      }
                    },
                    "backendPort": {
                      "type": "int",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The port used for the internal endpoint. Acceptable values range from 1 to 65535."
                      }
                    },
                    "enableFloatingIP": {
                      "type": "bool",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Configures a virtual machine's endpoint for the floating IP capability required to configure a SQL AlwaysOn Availability Group. This setting is required when using the SQL AlwaysOn Availability Groups in SQL server. This setting can't be changed after you create the endpoint."
                      }
                    },
                    "enableTcpReset": {
                      "type": "bool",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Receive bidirectional TCP Reset on TCP flow idle timeout or unexpected connection termination. This element is only used when the protocol is set to TCP."
                      }
                    },
                    "frontendIPConfiguration": {
                      "$ref": "#/definitions/subResourceType",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. A reference to frontend IP addresses."
                      }
                    },
                    "frontendPort": {
                      "type": "int",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The port for the external endpoint. Port numbers for each rule must be unique within the Load Balancer. Acceptable values range from 1 to 65534."
                      }
                    },
                    "frontendPortRangeStart": {
                      "type": "int",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The port range start for the external endpoint. This property is used together with BackendAddressPool and FrontendPortRangeEnd. Individual inbound NAT rule port mappings will be created for each backend address from BackendAddressPool. Acceptable values range from 1 to 65534."
                      }
                    },
                    "frontendPortRangeEnd": {
                      "type": "int",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The port range end for the external endpoint. This property is used together with BackendAddressPool and FrontendPortRangeStart. Individual inbound NAT rule port mappings will be created for each backend address from BackendAddressPool. Acceptable values range from 1 to 65534."
                      }
                    },
                    "protocol": {
                      "type": "string",
                      "allowedValues": [
                        "All",
                        "Tcp",
                        "Udp"
                      ],
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The reference to the transport protocol used by the load balancing rule."
                      }
                    }
                  },
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Properties of the inbound NAT rule."
                  }
                }
              },
              "metadata": {
                "description": "The type for the inbound NAT rule.",
                "__bicep_imported_from!": {
                  "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/res/network/network-interface:0.5.1"
                }
              }
            },
            "ipTagType": {
              "type": "object",
              "properties": {
                "ipTagType": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. The IP tag type."
                  }
                },
                "tag": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. The IP tag."
                  }
                }
              },
              "metadata": {
                "__bicep_imported_from!": {
                  "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/res/network/public-ip-address:0.8.0"
                }
              }
            },
            "lockType": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Specify the name of lock."
                  }
                },
                "kind": {
                  "type": "string",
                  "allowedValues": [
                    "CanNotDelete",
                    "None",
                    "ReadOnly"
                  ],
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Specify the type of lock."
                  }
                }
              },
              "metadata": {
                "description": "An AVM-aligned type for a lock.",
                "__bicep_imported_from!": {
                  "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.5.1"
                }
              }
            },
            "networkInterfaceIPConfigurationOutputType": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "metadata": {
                    "description": "The name of the IP configuration."
                  }
                },
                "privateIP": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "The private IP address."
                  }
                },
                "publicIP": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "The public IP address."
                  }
                }
              },
              "metadata": {
                "__bicep_imported_from!": {
                  "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/res/network/network-interface:0.5.1"
                }
              }
            },
            "roleAssignmentType": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The name (as GUID) of the role assignment. If not provided, a GUID will be generated."
                  }
                },
                "roleDefinitionIdOrName": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                  }
                },
                "principalId": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                  }
                },
                "principalType": {
                  "type": "string",
                  "allowedValues": [
                    "Device",
                    "ForeignGroup",
                    "Group",
                    "ServicePrincipal",
                    "User"
                  ],
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The principal type of the assigned principal ID."
                  }
                },
                "description": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The description of the role assignment."
                  }
                },
                "condition": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                  }
                },
                "conditionVersion": {
                  "type": "string",
                  "allowedValues": [
                    "2.0"
                  ],
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Version of the condition."
                  }
                },
                "delegatedManagedIdentityResourceId": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The Resource Id of the delegated managed identity resource."
                  }
                }
              },
              "metadata": {
                "description": "An AVM-aligned type for a role assignment.",
                "__bicep_imported_from!": {
                  "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.5.1"
                }
              }
            },
            "subResourceType": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Resource ID of the sub resource."
                  }
                }
              },
              "metadata": {
                "description": "The type for the sub resource.",
                "__bicep_imported_from!": {
                  "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/res/network/network-interface:0.5.1"
                }
              }
            },
            "virtualNetworkTapType": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Resource ID of the virtual network tap."
                  }
                },
                "location": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Location of the virtual network tap."
                  }
                },
                "properties": {
                  "type": "object",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Properties of the virtual network tap."
                  }
                },
                "tags": {
                  "type": "object",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Tags of the virtual network tap."
                  }
                }
              },
              "metadata": {
                "description": "The type for the virtual network tap.",
                "__bicep_imported_from!": {
                  "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/res/network/network-interface:0.5.1"
                }
              }
            }
          },
          "parameters": {
            "networkInterfaceName": {
              "type": "string"
            },
            "virtualMachineName": {
              "type": "string"
            },
            "ipConfigurations": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ipConfigurationType"
              }
            },
            "location": {
              "type": "string",
              "metadata": {
                "description": "Optional. Location for all resources."
              }
            },
            "tags": {
              "type": "object",
              "nullable": true,
              "metadata": {
                "description": "Optional. Tags of the resource."
              }
            },
            "enableIPForwarding": {
              "type": "bool",
              "defaultValue": false
            },
            "enableAcceleratedNetworking": {
              "type": "bool",
              "defaultValue": false
            },
            "dnsServers": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "defaultValue": []
            },
            "enableTelemetry": {
              "type": "bool",
              "metadata": {
                "description": "Required. Enable telemetry via a Globally Unique Identifier (GUID)."
              }
            },
            "networkSecurityGroupResourceId": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. The network security group (NSG) to attach to the network interface."
              }
            },
            "lock": {
              "$ref": "#/definitions/lockType",
              "nullable": true,
              "metadata": {
                "description": "Optional. The lock settings of the service."
              }
            },
            "diagnosticSettings": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/diagnosticSettingFullType"
              },
              "nullable": true,
              "metadata": {
                "description": "Optional. The diagnostic settings of the service."
              }
            },
            "roleAssignments": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/roleAssignmentType"
              },
              "nullable": true,
              "metadata": {
                "description": "Optional. Array of role assignments to create."
              }
            }
          },
          "resources": {
            "networkInterface_publicIPAddresses": {
              "copy": {
                "name": "networkInterface_publicIPAddresses",
                "count": "[length(parameters('ipConfigurations'))]"
              },
              "condition": "[and(not(empty(tryGet(parameters('ipConfigurations')[copyIndex()], 'pipConfiguration'))), empty(tryGet(tryGet(parameters('ipConfigurations')[copyIndex()], 'pipConfiguration'), 'publicIPAddressResourceId')))]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('{0}-publicIP-{1}', deployment().name, copyIndex())]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "name": {
                    "value": "[coalesce(tryGet(tryGet(parameters('ipConfigurations')[copyIndex()], 'pipConfiguration'), 'name'), format('{0}{1}', parameters('virtualMachineName'), tryGet(tryGet(parameters('ipConfigurations')[copyIndex()], 'pipConfiguration'), 'publicIpNameSuffix')))]"
                  },
                  "diagnosticSettings": {
                    "value": "[coalesce(tryGet(tryGet(parameters('ipConfigurations')[copyIndex()], 'pipConfiguration'), 'diagnosticSettings'), tryGet(parameters('ipConfigurations')[copyIndex()], 'diagnosticSettings'))]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "lock": {
                    "value": "[parameters('lock')]"
                  },
                  "idleTimeoutInMinutes": {
                    "value": "[tryGet(tryGet(parameters('ipConfigurations')[copyIndex()], 'pipConfiguration'), 'idleTimeoutInMinutes')]"
                  },
                  "ddosSettings": {
                    "value": "[tryGet(tryGet(parameters('ipConfigurations')[copyIndex()], 'pipConfiguration'), 'ddosSettings')]"
                  },
                  "dnsSettings": {
                    "value": "[tryGet(tryGet(parameters('ipConfigurations')[copyIndex()], 'pipConfiguration'), 'dnsSettings')]"
                  },
                  "publicIPAddressVersion": {
                    "value": "[tryGet(tryGet(parameters('ipConfigurations')[copyIndex()], 'pipConfiguration'), 'publicIPAddressVersion')]"
                  },
                  "publicIPAllocationMethod": {
                    "value": "[tryGet(tryGet(parameters('ipConfigurations')[copyIndex()], 'pipConfiguration'), 'publicIPAllocationMethod')]"
                  },
                  "publicIpPrefixResourceId": {
                    "value": "[tryGet(tryGet(parameters('ipConfigurations')[copyIndex()], 'pipConfiguration'), 'publicIpPrefixResourceId')]"
                  },
                  "roleAssignments": {
                    "value": "[tryGet(tryGet(parameters('ipConfigurations')[copyIndex()], 'pipConfiguration'), 'roleAssignments')]"
                  },
                  "skuName": {
                    "value": "[tryGet(tryGet(parameters('ipConfigurations')[copyIndex()], 'pipConfiguration'), 'skuName')]"
                  },
                  "skuTier": {
                    "value": "[tryGet(tryGet(parameters('ipConfigurations')[copyIndex()], 'pipConfiguration'), 'skuTier')]"
                  },
                  "tags": {
                    "value": "[coalesce(tryGet(parameters('ipConfigurations')[copyIndex()], 'tags'), parameters('tags'))]"
                  },
                  "zones": {
                    "value": "[tryGet(tryGet(parameters('ipConfigurations')[copyIndex()], 'pipConfiguration'), 'zones')]"
                  },
                  "enableTelemetry": {
                    "value": "[coalesce(coalesce(tryGet(tryGet(parameters('ipConfigurations')[copyIndex()], 'pipConfiguration'), 'enableTelemetry'), tryGet(parameters('ipConfigurations')[copyIndex()], 'enableTelemetry')), parameters('enableTelemetry'))]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "languageVersion": "2.0",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.33.93.31351",
                      "templateHash": "5168739580767459761"
                    },
                    "name": "Public IP Addresses",
                    "description": "This module deploys a Public IP Address."
                  },
                  "definitions": {
                    "dnsSettingsType": {
                      "type": "object",
                      "properties": {
                        "domainNameLabel": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. The domain name label. The concatenation of the domain name label and the regionalized DNS zone make up the fully qualified domain name associated with the public IP address. If a domain name label is specified, an A DNS record is created for the public IP in the Microsoft Azure DNS system."
                          }
                        },
                        "domainNameLabelScope": {
                          "type": "string",
                          "allowedValues": [
                            "NoReuse",
                            "ResourceGroupReuse",
                            "SubscriptionReuse",
                            "TenantReuse"
                          ],
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The domain name label scope. If a domain name label and a domain name label scope are specified, an A DNS record is created for the public IP in the Microsoft Azure DNS system with a hashed value includes in FQDN."
                          }
                        },
                        "fqdn": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The Fully Qualified Domain Name of the A DNS record associated with the public IP. This is the concatenation of the domainNameLabel and the regionalized DNS zone."
                          }
                        },
                        "reverseFqdn": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The reverse FQDN. A user-visible, fully qualified domain name that resolves to this public IP address. If the reverseFqdn is specified, then a PTR DNS record is created pointing from the IP address in the in-addr.arpa domain to the reverse FQDN."
                          }
                        }
                      },
                      "metadata": {
                        "__bicep_export!": true
                      }
                    },
                    "ddosSettingsType": {
                      "type": "object",
                      "properties": {
                        "ddosProtectionPlan": {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The resource ID of the DDOS protection plan associated with the public IP address."
                              }
                            }
                          },
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The DDoS protection plan associated with the public IP address."
                          }
                        },
                        "protectionMode": {
                          "type": "string",
                          "allowedValues": [
                            "Enabled"
                          ],
                          "metadata": {
                            "description": "Required. The DDoS protection policy customizations."
                          }
                        }
                      },
                      "metadata": {
                        "__bicep_export!": true
                      }
                    },
                    "ipTagType": {
                      "type": "object",
                      "properties": {
                        "ipTagType": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. The IP tag type."
                          }
                        },
                        "tag": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. The IP tag."
                          }
                        }
                      },
                      "metadata": {
                        "__bicep_export!": true
                      }
                    },
                    "diagnosticSettingFullType": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The name of the diagnostic setting."
                          }
                        },
                        "logCategoriesAndGroups": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "category": {
                                "type": "string",
                                "nullable": true,
                                "metadata": {
                                  "description": "Optional. Name of a Diagnostic Log category for a resource type this setting is applied to. Set the specific logs to collect here."
                                }
                              },
                              "categoryGroup": {
                                "type": "string",
                                "nullable": true,
                                "metadata": {
                                  "description": "Optional. Name of a Diagnostic Log category group for a resource type this setting is applied to. Set to `allLogs` to collect all logs."
                                }
                              },
                              "enabled": {
                                "type": "bool",
                                "nullable": true,
                                "metadata": {
                                  "description": "Optional. Enable or disable the category explicitly. Default is `true`."
                                }
                              }
                            }
                          },
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The name of logs that will be streamed. \"allLogs\" includes all possible logs for the resource. Set to `[]` to disable log collection."
                          }
                        },
                        "metricCategories": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "category": {
                                "type": "string",
                                "metadata": {
                                  "description": "Required. Name of a Diagnostic Metric category for a resource type this setting is applied to. Set to `AllMetrics` to collect all metrics."
                                }
                              },
                              "enabled": {
                                "type": "bool",
                                "nullable": true,
                                "metadata": {
                                  "description": "Optional. Enable or disable the category explicitly. Default is `true`."
                                }
                              }
                            }
                          },
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The name of metrics that will be streamed. \"allMetrics\" includes all possible metrics for the resource. Set to `[]` to disable metric collection."
                          }
                        },
                        "logAnalyticsDestinationType": {
                          "type": "string",
                          "allowedValues": [
                            "AzureDiagnostics",
                            "Dedicated"
                          ],
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. A string indicating whether the export to Log Analytics should use the default destination type, i.e. AzureDiagnostics, or use a destination type."
                          }
                        },
                        "workspaceResourceId": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Resource ID of the diagnostic log analytics workspace. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                          }
                        },
                        "storageAccountResourceId": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Resource ID of the diagnostic storage account. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                          }
                        },
                        "eventHubAuthorizationRuleResourceId": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Resource ID of the diagnostic event hub authorization rule for the Event Hubs namespace in which the event hub should be created or streamed to."
                          }
                        },
                        "eventHubName": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Name of the diagnostic event hub within the namespace to which logs are streamed. Without this, an event hub is created for each log category. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                          }
                        },
                        "marketplacePartnerResourceId": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The full ARM resource ID of the Marketplace resource to which you would like to send Diagnostic Logs."
                          }
                        }
                      },
                      "metadata": {
                        "description": "An AVM-aligned type for a diagnostic setting. To be used if both logs & metrics are supported by the resource provider.",
                        "__bicep_imported_from!": {
                          "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.2.1"
                        }
                      }
                    },
                    "lockType": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Specify the name of lock."
                          }
                        },
                        "kind": {
                          "type": "string",
                          "allowedValues": [
                            "CanNotDelete",
                            "None",
                            "ReadOnly"
                          ],
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Specify the type of lock."
                          }
                        }
                      },
                      "metadata": {
                        "description": "An AVM-aligned type for a lock.",
                        "__bicep_imported_from!": {
                          "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.2.1"
                        }
                      }
                    },
                    "roleAssignmentType": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The name (as GUID) of the role assignment. If not provided, a GUID will be generated."
                          }
                        },
                        "roleDefinitionIdOrName": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                          }
                        },
                        "principalId": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                          }
                        },
                        "principalType": {
                          "type": "string",
                          "allowedValues": [
                            "Device",
                            "ForeignGroup",
                            "Group",
                            "ServicePrincipal",
                            "User"
                          ],
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The principal type of the assigned principal ID."
                          }
                        },
                        "description": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The description of the role assignment."
                          }
                        },
                        "condition": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                          }
                        },
                        "conditionVersion": {
                          "type": "string",
                          "allowedValues": [
                            "2.0"
                          ],
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Version of the condition."
                          }
                        },
                        "delegatedManagedIdentityResourceId": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The Resource Id of the delegated managed identity resource."
                          }
                        }
                      },
                      "metadata": {
                        "description": "An AVM-aligned type for a role assignment.",
                        "__bicep_imported_from!": {
                          "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.2.1"
                        }
                      }
                    }
                  },
                  "parameters": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The name of the Public IP Address."
                      }
                    },
                    "publicIpPrefixResourceId": {
                      "type": "string",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Resource ID of the Public IP Prefix object. This is only needed if you want your Public IPs created in a PIP Prefix."
                      }
                    },
                    "publicIPAllocationMethod": {
                      "type": "string",
                      "defaultValue": "Static",
                      "allowedValues": [
                        "Dynamic",
                        "Static"
                      ],
                      "metadata": {
                        "description": "Optional. The public IP address allocation method."
                      }
                    },
                    "zones": {
                      "type": "array",
                      "items": {
                        "type": "int"
                      },
                      "defaultValue": [
                        1,
                        2,
                        3
                      ],
                      "allowedValues": [
                        1,
                        2,
                        3
                      ],
                      "metadata": {
                        "description": "Optional. A list of availability zones denoting the IP allocated for the resource needs to come from."
                      }
                    },
                    "publicIPAddressVersion": {
                      "type": "string",
                      "defaultValue": "IPv4",
                      "allowedValues": [
                        "IPv4",
                        "IPv6"
                      ],
                      "metadata": {
                        "description": "Optional. IP address version."
                      }
                    },
                    "dnsSettings": {
                      "$ref": "#/definitions/dnsSettingsType",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The DNS settings of the public IP address."
                      }
                    },
                    "ipTags": {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/ipTagType"
                      },
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The list of tags associated with the public IP address."
                      }
                    },
                    "lock": {
                      "$ref": "#/definitions/lockType",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The lock settings of the service."
                      }
                    },
                    "skuName": {
                      "type": "string",
                      "defaultValue": "Standard",
                      "allowedValues": [
                        "Basic",
                        "Standard"
                      ],
                      "metadata": {
                        "description": "Optional. Name of a public IP address SKU."
                      }
                    },
                    "skuTier": {
                      "type": "string",
                      "defaultValue": "Regional",
                      "allowedValues": [
                        "Global",
                        "Regional"
                      ],
                      "metadata": {
                        "description": "Optional. Tier of a public IP address SKU."
                      }
                    },
                    "ddosSettings": {
                      "$ref": "#/definitions/ddosSettingsType",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The DDoS protection plan configuration associated with the public IP address."
                      }
                    },
                    "location": {
                      "type": "string",
                      "defaultValue": "[resourceGroup().location]",
                      "metadata": {
                        "description": "Optional. Location for all resources."
                      }
                    },
                    "roleAssignments": {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/roleAssignmentType"
                      },
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Array of role assignments to create."
                      }
                    },
                    "enableTelemetry": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "Optional. Enable/Disable usage telemetry for module."
                      }
                    },
                    "idleTimeoutInMinutes": {
                      "type": "int",
                      "defaultValue": 4,
                      "metadata": {
                        "description": "Optional. The idle timeout of the public IP address."
                      }
                    },
                    "tags": {
                      "type": "object",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Tags of the resource."
                      }
                    },
                    "diagnosticSettings": {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/diagnosticSettingFullType"
                      },
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The diagnostic settings of the service."
                      }
                    }
                  },
                  "variables": {
                    "copy": [
                      {
                        "name": "formattedRoleAssignments",
                        "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]",
                        "input": "[union(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')], createObject('roleDefinitionId', coalesce(tryGet(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName), if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName)))))]"
                      }
                    ],
                    "builtInRoleNames": {
                      "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                      "DNS Resolver Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '0f2ebee7-ffd4-4fc0-b3b7-664099fdad5d')]",
                      "DNS Zone Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'befefa01-2a29-4197-83a8-272ff33ce314')]",
                      "Domain Services Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'eeaeda52-9324-47f6-8069-5d5bade478b2')]",
                      "Domain Services Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '361898ef-9ed1-48c2-849c-a832951106bb')]",
                      "Network Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4d97b98b-1d4f-4787-a291-c67834d212e7')]",
                      "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                      "Private DNS Zone Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b12aa53e-6015-4669-85d0-8515ebb3ae7f')]",
                      "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                      "Role Based Access Control Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]"
                    }
                  },
                  "resources": {
                    "avmTelemetry": {
                      "condition": "[parameters('enableTelemetry')]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2024-03-01",
                      "name": "[format('46d3xbcp.res.network-publicipaddress.{0}.{1}', replace('0.8.0', '.', '-'), substring(uniqueString(deployment().name, parameters('location')), 0, 4))]",
                      "properties": {
                        "mode": "Incremental",
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "resources": [],
                          "outputs": {
                            "telemetry": {
                              "type": "String",
                              "value": "For more information, see https://aka.ms/avm/TelemetryInfo"
                            }
                          }
                        }
                      }
                    },
                    "publicIpAddress": {
                      "type": "Microsoft.Network/publicIPAddresses",
                      "apiVersion": "2024-05-01",
                      "name": "[parameters('name')]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]",
                      "sku": {
                        "name": "[parameters('skuName')]",
                        "tier": "[parameters('skuTier')]"
                      },
                      "zones": "[map(parameters('zones'), lambda('zone', string(lambdaVariables('zone'))))]",
                      "properties": {
                        "ddosSettings": "[parameters('ddosSettings')]",
                        "dnsSettings": "[parameters('dnsSettings')]",
                        "publicIPAddressVersion": "[parameters('publicIPAddressVersion')]",
                        "publicIPAllocationMethod": "[parameters('publicIPAllocationMethod')]",
                        "publicIPPrefix": "[if(not(empty(parameters('publicIpPrefixResourceId'))), createObject('id', parameters('publicIpPrefixResourceId')), null())]",
                        "idleTimeoutInMinutes": "[parameters('idleTimeoutInMinutes')]",
                        "ipTags": "[parameters('ipTags')]"
                      }
                    },
                    "publicIpAddress_lock": {
                      "condition": "[and(not(empty(coalesce(parameters('lock'), createObject()))), not(equals(tryGet(parameters('lock'), 'kind'), 'None')))]",
                      "type": "Microsoft.Authorization/locks",
                      "apiVersion": "2020-05-01",
                      "scope": "[format('Microsoft.Network/publicIPAddresses/{0}', parameters('name'))]",
                      "name": "[coalesce(tryGet(parameters('lock'), 'name'), format('lock-{0}', parameters('name')))]",
                      "properties": {
                        "level": "[coalesce(tryGet(parameters('lock'), 'kind'), '')]",
                        "notes": "[if(equals(tryGet(parameters('lock'), 'kind'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot delete or modify the resource or child resources.')]"
                      },
                      "dependsOn": [
                        "publicIpAddress"
                      ]
                    },
                    "publicIpAddress_roleAssignments": {
                      "copy": {
                        "name": "publicIpAddress_roleAssignments",
                        "count": "[length(coalesce(variables('formattedRoleAssignments'), createArray()))]"
                      },
                      "type": "Microsoft.Authorization/roleAssignments",
                      "apiVersion": "2022-04-01",
                      "scope": "[format('Microsoft.Network/publicIPAddresses/{0}', parameters('name'))]",
                      "name": "[coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'name'), guid(resourceId('Microsoft.Network/publicIPAddresses', parameters('name')), coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId, coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId))]",
                      "properties": {
                        "roleDefinitionId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId]",
                        "principalId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId]",
                        "description": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'description')]",
                        "principalType": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'principalType')]",
                        "condition": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition')]",
                        "conditionVersion": "[if(not(empty(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                        "delegatedManagedIdentityResourceId": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
                      },
                      "dependsOn": [
                        "publicIpAddress"
                      ]
                    },
                    "publicIpAddress_diagnosticSettings": {
                      "copy": {
                        "name": "publicIpAddress_diagnosticSettings",
                        "count": "[length(coalesce(parameters('diagnosticSettings'), createArray()))]"
                      },
                      "type": "Microsoft.Insights/diagnosticSettings",
                      "apiVersion": "2021-05-01-preview",
                      "scope": "[format('Microsoft.Network/publicIPAddresses/{0}', parameters('name'))]",
                      "name": "[coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'name'), format('{0}-diagnosticSettings', parameters('name')))]",
                      "properties": {
                        "copy": [
                          {
                            "name": "metrics",
                            "count": "[length(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics'))))]",
                            "input": {
                              "category": "[coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics')))[copyIndex('metrics')].category]",
                              "enabled": "[coalesce(tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics')))[copyIndex('metrics')], 'enabled'), true())]",
                              "timeGrain": null
                            }
                          },
                          {
                            "name": "logs",
                            "count": "[length(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs'))))]",
                            "input": {
                              "categoryGroup": "[tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'categoryGroup')]",
                              "category": "[tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'category')]",
                              "enabled": "[coalesce(tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'enabled'), true())]"
                            }
                          }
                        ],
                        "storageAccountId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'storageAccountResourceId')]",
                        "workspaceId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'workspaceResourceId')]",
                        "eventHubAuthorizationRuleId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'eventHubAuthorizationRuleResourceId')]",
                        "eventHubName": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'eventHubName')]",
                        "marketplacePartnerId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'marketplacePartnerResourceId')]",
                        "logAnalyticsDestinationType": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logAnalyticsDestinationType')]"
                      },
                      "dependsOn": [
                        "publicIpAddress"
                      ]
                    }
                  },
                  "outputs": {
                    "resourceGroupName": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource group the public IP address was deployed into."
                      },
                      "value": "[resourceGroup().name]"
                    },
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the public IP address."
                      },
                      "value": "[parameters('name')]"
                    },
                    "resourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the public IP address."
                      },
                      "value": "[resourceId('Microsoft.Network/publicIPAddresses', parameters('name'))]"
                    },
                    "ipAddress": {
                      "type": "string",
                      "metadata": {
                        "description": "The public IP address of the public IP address resource."
                      },
                      "value": "[coalesce(tryGet(reference('publicIpAddress'), 'ipAddress'), '')]"
                    },
                    "location": {
                      "type": "string",
                      "metadata": {
                        "description": "The location the resource was deployed into."
                      },
                      "value": "[reference('publicIpAddress', '2024-05-01', 'full').location]"
                    }
                  }
                }
              }
            },
            "networkInterface": {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('{0}-NetworkInterface', deployment().name)]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "name": {
                    "value": "[parameters('networkInterfaceName')]"
                  },
                  "ipConfigurations": {
                    "copy": [
                      {
                        "name": "value",
                        "count": "[length(parameters('ipConfigurations'))]",
                        "input": "[createObject('name', tryGet(parameters('ipConfigurations')[copyIndex('value')], 'name'), 'privateIPAllocationMethod', tryGet(parameters('ipConfigurations')[copyIndex('value')], 'privateIPAllocationMethod'), 'privateIPAddress', tryGet(parameters('ipConfigurations')[copyIndex('value')], 'privateIPAddress'), 'publicIPAddressResourceId', if(not(empty(tryGet(parameters('ipConfigurations')[copyIndex('value')], 'pipConfiguration'))), if(not(contains(coalesce(tryGet(parameters('ipConfigurations')[copyIndex('value')], 'pipConfiguration'), createObject()), 'publicIPAddressResourceId')), resourceId('Microsoft.Network/publicIPAddresses', coalesce(tryGet(tryGet(parameters('ipConfigurations')[copyIndex('value')], 'pipConfiguration'), 'name'), format('{0}{1}', parameters('virtualMachineName'), tryGet(tryGet(parameters('ipConfigurations')[copyIndex('value')], 'pipConfiguration'), 'publicIpNameSuffix')))), tryGet(parameters('ipConfigurations')[copyIndex('value')], 'pipConfiguration', 'publicIPAddressResourceId')), null()), 'subnetResourceId', parameters('ipConfigurations')[copyIndex('value')].subnetResourceId, 'loadBalancerBackendAddressPools', tryGet(parameters('ipConfigurations')[copyIndex('value')], 'loadBalancerBackendAddressPools'), 'applicationSecurityGroups', tryGet(parameters('ipConfigurations')[copyIndex('value')], 'applicationSecurityGroups'), 'applicationGatewayBackendAddressPools', tryGet(parameters('ipConfigurations')[copyIndex('value')], 'applicationGatewayBackendAddressPools'), 'gatewayLoadBalancer', tryGet(parameters('ipConfigurations')[copyIndex('value')], 'gatewayLoadBalancer'), 'loadBalancerInboundNatRules', tryGet(parameters('ipConfigurations')[copyIndex('value')], 'loadBalancerInboundNatRules'), 'privateIPAddressVersion', tryGet(parameters('ipConfigurations')[copyIndex('value')], 'privateIPAddressVersion'), 'virtualNetworkTaps', tryGet(parameters('ipConfigurations')[copyIndex('value')], 'virtualNetworkTaps'))]"
                      }
                    ]
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "tags": {
                    "value": "[parameters('tags')]"
                  },
                  "diagnosticSettings": {
                    "value": "[parameters('diagnosticSettings')]"
                  },
                  "dnsServers": {
                    "value": "[parameters('dnsServers')]"
                  },
                  "enableAcceleratedNetworking": {
                    "value": "[parameters('enableAcceleratedNetworking')]"
                  },
                  "enableTelemetry": {
                    "value": "[parameters('enableTelemetry')]"
                  },
                  "enableIPForwarding": {
                    "value": "[parameters('enableIPForwarding')]"
                  },
                  "lock": {
                    "value": "[parameters('lock')]"
                  },
                  "networkSecurityGroupResourceId": "[if(not(empty(parameters('networkSecurityGroupResourceId'))), createObject('value', parameters('networkSecurityGroupResourceId')), createObject('value', ''))]",
                  "roleAssignments": {
                    "value": "[parameters('roleAssignments')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "languageVersion": "2.0",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.34.44.8038",
                      "templateHash": "8196054567469390015"
                    },
                    "name": "Network Interface",
                    "description": "This module deploys a Network Interface."
                  },
                  "definitions": {
                    "networkInterfaceIPConfigurationType": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The name of the IP configuration."
                          }
                        },
                        "privateIPAllocationMethod": {
                          "type": "string",
                          "allowedValues": [
                            "Dynamic",
                            "Static"
                          ],
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The private IP address allocation method."
                          }
                        },
                        "privateIPAddress": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The private IP address."
                          }
                        },
                        "publicIPAddressResourceId": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The resource ID of the public IP address."
                          }
                        },
                        "subnetResourceId": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. The resource ID of the subnet."
                          }
                        },
                        "loadBalancerBackendAddressPools": {
                          "type": "array",
                          "items": {
                            "$ref": "#/definitions/backendAddressPoolType"
                          },
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Array of load balancer backend address pools."
                          }
                        },
                        "loadBalancerInboundNatRules": {
                          "type": "array",
                          "items": {
                            "$ref": "#/definitions/inboundNatRuleType"
                          },
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. A list of references of LoadBalancerInboundNatRules."
                          }
                        },
                        "applicationSecurityGroups": {
                          "type": "array",
                          "items": {
                            "$ref": "#/definitions/applicationSecurityGroupType"
                          },
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Application security groups in which the IP configuration is included."
                          }
                        },
                        "applicationGatewayBackendAddressPools": {
                          "type": "array",
                          "items": {
                            "$ref": "#/definitions/applicationGatewayBackendAddressPoolsType"
                          },
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The reference to Application Gateway Backend Address Pools."
                          }
                        },
                        "gatewayLoadBalancer": {
                          "$ref": "#/definitions/subResourceType",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The reference to gateway load balancer frontend IP."
                          }
                        },
                        "privateIPAddressVersion": {
                          "type": "string",
                          "allowedValues": [
                            "IPv4",
                            "IPv6"
                          ],
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Whether the specific IP configuration is IPv4 or IPv6."
                          }
                        },
                        "virtualNetworkTaps": {
                          "type": "array",
                          "items": {
                            "$ref": "#/definitions/virtualNetworkTapType"
                          },
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The reference to Virtual Network Taps."
                          }
                        }
                      },
                      "metadata": {
                        "__bicep_export!": true,
                        "description": "The resource ID of the deployed resource."
                      }
                    },
                    "backendAddressPoolType": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The resource ID of the backend address pool."
                          }
                        },
                        "name": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The name of the backend address pool."
                          }
                        },
                        "properties": {
                          "type": "object",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The properties of the backend address pool."
                          }
                        }
                      },
                      "metadata": {
                        "__bicep_export!": true,
                        "description": "The type for a backend address pool."
                      }
                    },
                    "applicationSecurityGroupType": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Resource ID of the application security group."
                          }
                        },
                        "location": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Location of the application security group."
                          }
                        },
                        "properties": {
                          "type": "object",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Properties of the application security group."
                          }
                        },
                        "tags": {
                          "type": "object",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Tags of the application security group."
                          }
                        }
                      },
                      "metadata": {
                        "__bicep_export!": true,
                        "description": "The type for the application security group."
                      }
                    },
                    "applicationGatewayBackendAddressPoolsType": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Resource ID of the backend address pool."
                          }
                        },
                        "name": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Name of the backend address pool that is unique within an Application Gateway."
                          }
                        },
                        "properties": {
                          "type": "object",
                          "properties": {
                            "backendAddresses": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "ipAddress": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. IP address of the backend address."
                                    }
                                  },
                                  "fqdn": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. FQDN of the backend address."
                                    }
                                  }
                                }
                              },
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Backend addresses."
                              }
                            }
                          },
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Properties of the application gateway backend address pool."
                          }
                        }
                      },
                      "metadata": {
                        "__bicep_export!": true,
                        "description": "The type for the application gateway backend address pool."
                      }
                    },
                    "subResourceType": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Resource ID of the sub resource."
                          }
                        }
                      },
                      "metadata": {
                        "__bicep_export!": true,
                        "description": "The type for the sub resource."
                      }
                    },
                    "inboundNatRuleType": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Resource ID of the inbound NAT rule."
                          }
                        },
                        "name": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Name of the resource that is unique within the set of inbound NAT rules used by the load balancer. This name can be used to access the resource."
                          }
                        },
                        "properties": {
                          "type": "object",
                          "properties": {
                            "backendAddressPool": {
                              "$ref": "#/definitions/subResourceType",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. A reference to backendAddressPool resource."
                              }
                            },
                            "backendPort": {
                              "type": "int",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. The port used for the internal endpoint. Acceptable values range from 1 to 65535."
                              }
                            },
                            "enableFloatingIP": {
                              "type": "bool",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Configures a virtual machine's endpoint for the floating IP capability required to configure a SQL AlwaysOn Availability Group. This setting is required when using the SQL AlwaysOn Availability Groups in SQL server. This setting can't be changed after you create the endpoint."
                              }
                            },
                            "enableTcpReset": {
                              "type": "bool",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Receive bidirectional TCP Reset on TCP flow idle timeout or unexpected connection termination. This element is only used when the protocol is set to TCP."
                              }
                            },
                            "frontendIPConfiguration": {
                              "$ref": "#/definitions/subResourceType",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. A reference to frontend IP addresses."
                              }
                            },
                            "frontendPort": {
                              "type": "int",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. The port for the external endpoint. Port numbers for each rule must be unique within the Load Balancer. Acceptable values range from 1 to 65534."
                              }
                            },
                            "frontendPortRangeStart": {
                              "type": "int",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. The port range start for the external endpoint. This property is used together with BackendAddressPool and FrontendPortRangeEnd. Individual inbound NAT rule port mappings will be created for each backend address from BackendAddressPool. Acceptable values range from 1 to 65534."
                              }
                            },
                            "frontendPortRangeEnd": {
                              "type": "int",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. The port range end for the external endpoint. This property is used together with BackendAddressPool and FrontendPortRangeStart. Individual inbound NAT rule port mappings will be created for each backend address from BackendAddressPool. Acceptable values range from 1 to 65534."
                              }
                            },
                            "protocol": {
                              "type": "string",
                              "allowedValues": [
                                "All",
                                "Tcp",
                                "Udp"
                              ],
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. The reference to the transport protocol used by the load balancing rule."
                              }
                            }
                          },
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Properties of the inbound NAT rule."
                          }
                        }
                      },
                      "metadata": {
                        "__bicep_export!": true,
                        "description": "The type for the inbound NAT rule."
                      }
                    },
                    "virtualNetworkTapType": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Resource ID of the virtual network tap."
                          }
                        },
                        "location": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Location of the virtual network tap."
                          }
                        },
                        "properties": {
                          "type": "object",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Properties of the virtual network tap."
                          }
                        },
                        "tags": {
                          "type": "object",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Tags of the virtual network tap."
                          }
                        }
                      },
                      "metadata": {
                        "__bicep_export!": true,
                        "description": "The type for the virtual network tap."
                      }
                    },
                    "networkInterfaceIPConfigurationOutputType": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "metadata": {
                            "description": "The name of the IP configuration."
                          }
                        },
                        "privateIP": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "The private IP address."
                          }
                        },
                        "publicIP": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "The public IP address."
                          }
                        }
                      },
                      "metadata": {
                        "__bicep_export!": true
                      }
                    },
                    "diagnosticSettingFullType": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The name of the diagnostic setting."
                          }
                        },
                        "logCategoriesAndGroups": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "category": {
                                "type": "string",
                                "nullable": true,
                                "metadata": {
                                  "description": "Optional. Name of a Diagnostic Log category for a resource type this setting is applied to. Set the specific logs to collect here."
                                }
                              },
                              "categoryGroup": {
                                "type": "string",
                                "nullable": true,
                                "metadata": {
                                  "description": "Optional. Name of a Diagnostic Log category group for a resource type this setting is applied to. Set to `allLogs` to collect all logs."
                                }
                              },
                              "enabled": {
                                "type": "bool",
                                "nullable": true,
                                "metadata": {
                                  "description": "Optional. Enable or disable the category explicitly. Default is `true`."
                                }
                              }
                            }
                          },
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The name of logs that will be streamed. \"allLogs\" includes all possible logs for the resource. Set to `[]` to disable log collection."
                          }
                        },
                        "metricCategories": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "category": {
                                "type": "string",
                                "metadata": {
                                  "description": "Required. Name of a Diagnostic Metric category for a resource type this setting is applied to. Set to `AllMetrics` to collect all metrics."
                                }
                              },
                              "enabled": {
                                "type": "bool",
                                "nullable": true,
                                "metadata": {
                                  "description": "Optional. Enable or disable the category explicitly. Default is `true`."
                                }
                              }
                            }
                          },
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The name of metrics that will be streamed. \"allMetrics\" includes all possible metrics for the resource. Set to `[]` to disable metric collection."
                          }
                        },
                        "logAnalyticsDestinationType": {
                          "type": "string",
                          "allowedValues": [
                            "AzureDiagnostics",
                            "Dedicated"
                          ],
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. A string indicating whether the export to Log Analytics should use the default destination type, i.e. AzureDiagnostics, or use a destination type."
                          }
                        },
                        "workspaceResourceId": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Resource ID of the diagnostic log analytics workspace. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                          }
                        },
                        "storageAccountResourceId": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Resource ID of the diagnostic storage account. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                          }
                        },
                        "eventHubAuthorizationRuleResourceId": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Resource ID of the diagnostic event hub authorization rule for the Event Hubs namespace in which the event hub should be created or streamed to."
                          }
                        },
                        "eventHubName": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Name of the diagnostic event hub within the namespace to which logs are streamed. Without this, an event hub is created for each log category. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                          }
                        },
                        "marketplacePartnerResourceId": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The full ARM resource ID of the Marketplace resource to which you would like to send Diagnostic Logs."
                          }
                        }
                      },
                      "metadata": {
                        "description": "An AVM-aligned type for a diagnostic setting. To be used if both logs & metrics are supported by the resource provider.",
                        "__bicep_imported_from!": {
                          "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.5.1"
                        }
                      }
                    },
                    "lockType": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Specify the name of lock."
                          }
                        },
                        "kind": {
                          "type": "string",
                          "allowedValues": [
                            "CanNotDelete",
                            "None",
                            "ReadOnly"
                          ],
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Specify the type of lock."
                          }
                        }
                      },
                      "metadata": {
                        "description": "An AVM-aligned type for a lock.",
                        "__bicep_imported_from!": {
                          "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.5.1"
                        }
                      }
                    },
                    "roleAssignmentType": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The name (as GUID) of the role assignment. If not provided, a GUID will be generated."
                          }
                        },
                        "roleDefinitionIdOrName": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                          }
                        },
                        "principalId": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                          }
                        },
                        "principalType": {
                          "type": "string",
                          "allowedValues": [
                            "Device",
                            "ForeignGroup",
                            "Group",
                            "ServicePrincipal",
                            "User"
                          ],
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The principal type of the assigned principal ID."
                          }
                        },
                        "description": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The description of the role assignment."
                          }
                        },
                        "condition": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                          }
                        },
                        "conditionVersion": {
                          "type": "string",
                          "allowedValues": [
                            "2.0"
                          ],
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Version of the condition."
                          }
                        },
                        "delegatedManagedIdentityResourceId": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The Resource Id of the delegated managed identity resource."
                          }
                        }
                      },
                      "metadata": {
                        "description": "An AVM-aligned type for a role assignment.",
                        "__bicep_imported_from!": {
                          "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.5.1"
                        }
                      }
                    }
                  },
                  "parameters": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The name of the network interface."
                      }
                    },
                    "location": {
                      "type": "string",
                      "defaultValue": "[resourceGroup().location]",
                      "metadata": {
                        "description": "Optional. Location for all resources."
                      }
                    },
                    "tags": {
                      "type": "object",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Resource tags."
                      }
                    },
                    "enableTelemetry": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "Optional. Enable/Disable usage telemetry for module."
                      }
                    },
                    "enableIPForwarding": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "Optional. Indicates whether IP forwarding is enabled on this network interface."
                      }
                    },
                    "enableAcceleratedNetworking": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "Optional. If the network interface is accelerated networking enabled."
                      }
                    },
                    "dnsServers": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. List of DNS servers IP addresses. Use 'AzureProvidedDNS' to switch to azure provided DNS resolution. 'AzureProvidedDNS' value cannot be combined with other IPs, it must be the only value in dnsServers collection."
                      }
                    },
                    "networkSecurityGroupResourceId": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. The network security group (NSG) to attach to the network interface."
                      }
                    },
                    "auxiliaryMode": {
                      "type": "string",
                      "defaultValue": "None",
                      "allowedValues": [
                        "Floating",
                        "MaxConnections",
                        "None"
                      ],
                      "metadata": {
                        "description": "Optional. Auxiliary mode of Network Interface resource. Not all regions are enabled for Auxiliary Mode Nic."
                      }
                    },
                    "auxiliarySku": {
                      "type": "string",
                      "defaultValue": "None",
                      "allowedValues": [
                        "A1",
                        "A2",
                        "A4",
                        "A8",
                        "None"
                      ],
                      "metadata": {
                        "description": "Optional. Auxiliary sku of Network Interface resource. Not all regions are enabled for Auxiliary Mode Nic."
                      }
                    },
                    "disableTcpStateTracking": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "Optional. Indicates whether to disable tcp state tracking. Subscription must be registered for the Microsoft.Network/AllowDisableTcpStateTracking feature before this property can be set to true."
                      }
                    },
                    "ipConfigurations": {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/networkInterfaceIPConfigurationType"
                      },
                      "metadata": {
                        "description": "Required. A list of IPConfigurations of the network interface."
                      }
                    },
                    "lock": {
                      "$ref": "#/definitions/lockType",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The lock settings of the service."
                      }
                    },
                    "roleAssignments": {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/roleAssignmentType"
                      },
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Array of role assignments to create."
                      }
                    },
                    "diagnosticSettings": {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/diagnosticSettingFullType"
                      },
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The diagnostic settings of the service."
                      }
                    }
                  },
                  "variables": {
                    "copy": [
                      {
                        "name": "formattedRoleAssignments",
                        "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]",
                        "input": "[union(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')], createObject('roleDefinitionId', coalesce(tryGet(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName), if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName)))))]"
                      }
                    ],
                    "builtInRoleNames": {
                      "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                      "DNS Resolver Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '0f2ebee7-ffd4-4fc0-b3b7-664099fdad5d')]",
                      "DNS Zone Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'befefa01-2a29-4197-83a8-272ff33ce314')]",
                      "Network Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4d97b98b-1d4f-4787-a291-c67834d212e7')]",
                      "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                      "Private DNS Zone Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b12aa53e-6015-4669-85d0-8515ebb3ae7f')]",
                      "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                      "Role Based Access Control Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]"
                    }
                  },
                  "resources": {
                    "publicIp": {
                      "copy": {
                        "name": "publicIp",
                        "count": "[length(parameters('ipConfigurations'))]"
                      },
                      "condition": "[and(contains(parameters('ipConfigurations')[copyIndex()], 'publicIPAddressResourceId'), not(equals(tryGet(parameters('ipConfigurations')[copyIndex()], 'publicIPAddressResourceId'), null())))]",
                      "existing": true,
                      "type": "Microsoft.Network/publicIPAddresses",
                      "apiVersion": "2024-05-01",
                      "resourceGroup": "[split(coalesce(tryGet(parameters('ipConfigurations')[copyIndex()], 'publicIPAddressResourceId'), ''), '/')[4]]",
                      "name": "[last(split(coalesce(tryGet(parameters('ipConfigurations')[copyIndex()], 'publicIPAddressResourceId'), ''), '/'))]"
                    },
                    "avmTelemetry": {
                      "condition": "[parameters('enableTelemetry')]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2024-03-01",
                      "name": "[format('46d3xbcp.res.network-networkinterface.{0}.{1}', replace('0.5.1', '.', '-'), substring(uniqueString(deployment().name, parameters('location')), 0, 4))]",
                      "properties": {
                        "mode": "Incremental",
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "resources": [],
                          "outputs": {
                            "telemetry": {
                              "type": "String",
                              "value": "For more information, see https://aka.ms/avm/TelemetryInfo"
                            }
                          }
                        }
                      }
                    },
                    "networkInterface": {
                      "type": "Microsoft.Network/networkInterfaces",
                      "apiVersion": "2024-05-01",
                      "name": "[parameters('name')]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]",
                      "properties": {
                        "copy": [
                          {
                            "name": "ipConfigurations",
                            "count": "[length(parameters('ipConfigurations'))]",
                            "input": {
                              "name": "[coalesce(tryGet(parameters('ipConfigurations')[copyIndex('ipConfigurations')], 'name'), format('ipconfig0{0}', add(copyIndex('ipConfigurations'), 1)))]",
                              "properties": {
                                "primary": "[if(equals(copyIndex('ipConfigurations'), 0), true(), false())]",
                                "privateIPAllocationMethod": "[tryGet(parameters('ipConfigurations')[copyIndex('ipConfigurations')], 'privateIPAllocationMethod')]",
                                "privateIPAddress": "[tryGet(parameters('ipConfigurations')[copyIndex('ipConfigurations')], 'privateIPAddress')]",
                                "publicIPAddress": "[if(contains(parameters('ipConfigurations')[copyIndex('ipConfigurations')], 'publicIPAddressResourceId'), if(not(equals(tryGet(parameters('ipConfigurations')[copyIndex('ipConfigurations')], 'publicIPAddressResourceId'), null())), createObject('id', tryGet(parameters('ipConfigurations')[copyIndex('ipConfigurations')], 'publicIPAddressResourceId')), null()), null())]",
                                "subnet": {
                                  "id": "[parameters('ipConfigurations')[copyIndex('ipConfigurations')].subnetResourceId]"
                                },
                                "loadBalancerBackendAddressPools": "[tryGet(parameters('ipConfigurations')[copyIndex('ipConfigurations')], 'loadBalancerBackendAddressPools')]",
                                "applicationSecurityGroups": "[tryGet(parameters('ipConfigurations')[copyIndex('ipConfigurations')], 'applicationSecurityGroups')]",
                                "applicationGatewayBackendAddressPools": "[tryGet(parameters('ipConfigurations')[copyIndex('ipConfigurations')], 'applicationGatewayBackendAddressPools')]",
                                "gatewayLoadBalancer": "[tryGet(parameters('ipConfigurations')[copyIndex('ipConfigurations')], 'gatewayLoadBalancer')]",
                                "loadBalancerInboundNatRules": "[tryGet(parameters('ipConfigurations')[copyIndex('ipConfigurations')], 'loadBalancerInboundNatRules')]",
                                "privateIPAddressVersion": "[tryGet(parameters('ipConfigurations')[copyIndex('ipConfigurations')], 'privateIPAddressVersion')]",
                                "virtualNetworkTaps": "[tryGet(parameters('ipConfigurations')[copyIndex('ipConfigurations')], 'virtualNetworkTaps')]"
                              }
                            }
                          }
                        ],
                        "auxiliaryMode": "[parameters('auxiliaryMode')]",
                        "auxiliarySku": "[parameters('auxiliarySku')]",
                        "disableTcpStateTracking": "[parameters('disableTcpStateTracking')]",
                        "dnsSettings": "[if(not(empty(parameters('dnsServers'))), createObject('dnsServers', parameters('dnsServers')), null())]",
                        "enableAcceleratedNetworking": "[parameters('enableAcceleratedNetworking')]",
                        "enableIPForwarding": "[parameters('enableIPForwarding')]",
                        "networkSecurityGroup": "[if(not(empty(parameters('networkSecurityGroupResourceId'))), createObject('id', parameters('networkSecurityGroupResourceId')), null())]"
                      }
                    },
                    "networkInterface_lock": {
                      "condition": "[and(not(empty(coalesce(parameters('lock'), createObject()))), not(equals(tryGet(parameters('lock'), 'kind'), 'None')))]",
                      "type": "Microsoft.Authorization/locks",
                      "apiVersion": "2020-05-01",
                      "scope": "[format('Microsoft.Network/networkInterfaces/{0}', parameters('name'))]",
                      "name": "[coalesce(tryGet(parameters('lock'), 'name'), format('lock-{0}', parameters('name')))]",
                      "properties": {
                        "level": "[coalesce(tryGet(parameters('lock'), 'kind'), '')]",
                        "notes": "[if(equals(tryGet(parameters('lock'), 'kind'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot delete or modify the resource or child resources.')]"
                      },
                      "dependsOn": [
                        "networkInterface"
                      ]
                    },
                    "networkInterface_diagnosticSettings": {
                      "copy": {
                        "name": "networkInterface_diagnosticSettings",
                        "count": "[length(coalesce(parameters('diagnosticSettings'), createArray()))]"
                      },
                      "type": "Microsoft.Insights/diagnosticSettings",
                      "apiVersion": "2021-05-01-preview",
                      "scope": "[format('Microsoft.Network/networkInterfaces/{0}', parameters('name'))]",
                      "name": "[coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'name'), format('{0}-diagnosticSettings', parameters('name')))]",
                      "properties": {
                        "copy": [
                          {
                            "name": "metrics",
                            "count": "[length(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics'))))]",
                            "input": {
                              "category": "[coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics')))[copyIndex('metrics')].category]",
                              "enabled": "[coalesce(tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics')))[copyIndex('metrics')], 'enabled'), true())]",
                              "timeGrain": null
                            }
                          }
                        ],
                        "storageAccountId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'storageAccountResourceId')]",
                        "workspaceId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'workspaceResourceId')]",
                        "eventHubAuthorizationRuleId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'eventHubAuthorizationRuleResourceId')]",
                        "eventHubName": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'eventHubName')]",
                        "marketplacePartnerId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'marketplacePartnerResourceId')]",
                        "logAnalyticsDestinationType": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logAnalyticsDestinationType')]"
                      },
                      "dependsOn": [
                        "networkInterface"
                      ]
                    },
                    "networkInterface_roleAssignments": {
                      "copy": {
                        "name": "networkInterface_roleAssignments",
                        "count": "[length(coalesce(variables('formattedRoleAssignments'), createArray()))]"
                      },
                      "type": "Microsoft.Authorization/roleAssignments",
                      "apiVersion": "2022-04-01",
                      "scope": "[format('Microsoft.Network/networkInterfaces/{0}', parameters('name'))]",
                      "name": "[coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'name'), guid(resourceId('Microsoft.Network/networkInterfaces', parameters('name')), coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId, coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId))]",
                      "properties": {
                        "roleDefinitionId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId]",
                        "principalId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId]",
                        "description": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'description')]",
                        "principalType": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'principalType')]",
                        "condition": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition')]",
                        "conditionVersion": "[if(not(empty(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                        "delegatedManagedIdentityResourceId": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
                      },
                      "dependsOn": [
                        "networkInterface"
                      ]
                    }
                  },
                  "outputs": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the deployed resource."
                      },
                      "value": "[parameters('name')]"
                    },
                    "resourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the deployed resource."
                      },
                      "value": "[resourceId('Microsoft.Network/networkInterfaces', parameters('name'))]"
                    },
                    "resourceGroupName": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource group of the deployed resource."
                      },
                      "value": "[resourceGroup().name]"
                    },
                    "location": {
                      "type": "string",
                      "metadata": {
                        "description": "The location the resource was deployed into."
                      },
                      "value": "[reference('networkInterface', '2024-05-01', 'full').location]"
                    },
                    "ipConfigurations": {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/networkInterfaceIPConfigurationOutputType"
                      },
                      "metadata": {
                        "description": "The list of IP configurations of the network interface."
                      },
                      "copy": {
                        "count": "[length(parameters('ipConfigurations'))]",
                        "input": {
                          "name": "[reference('networkInterface').ipConfigurations[copyIndex()].name]",
                          "privateIP": "[coalesce(tryGet(reference('networkInterface').ipConfigurations[copyIndex()].properties, 'privateIPAddress'), '')]",
                          "publicIP": "[if(and(contains(parameters('ipConfigurations')[copyIndex()], 'publicIPAddressResourceId'), not(equals(tryGet(parameters('ipConfigurations')[copyIndex()], 'publicIPAddressResourceId'), null()))), coalesce(reference(format('publicIp[{0}]', copyIndex())).ipAddress, ''), '')]"
                        }
                      }
                    }
                  }
                }
              },
              "dependsOn": [
                "networkInterface_publicIPAddresses"
              ]
            }
          },
          "outputs": {
            "name": {
              "type": "string",
              "metadata": {
                "description": "The name of the network interface."
              },
              "value": "[reference('networkInterface').outputs.name.value]"
            },
            "ipConfigurations": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/networkInterfaceIPConfigurationOutputType"
              },
              "metadata": {
                "description": "The list of IP configurations of the network interface."
              },
              "value": "[reference('networkInterface').outputs.ipConfigurations.value]"
            }
          }
        }
      }
    },
    "vm_domainJoinExtension": {
      "condition": "[and(contains(parameters('extensionDomainJoinConfig'), 'enabled'), parameters('extensionDomainJoinConfig').enabled)]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('{0}-VM-DomainJoin', uniqueString(deployment().name, parameters('location')))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "virtualMachineName": {
            "value": "[parameters('name')]"
          },
          "name": {
            "value": "[coalesce(tryGet(parameters('extensionDomainJoinConfig'), 'name'), 'DomainJoin')]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "publisher": {
            "value": "Microsoft.Compute"
          },
          "type": {
            "value": "JsonADDomainExtension"
          },
          "typeHandlerVersion": {
            "value": "[coalesce(tryGet(parameters('extensionDomainJoinConfig'), 'typeHandlerVersion'), '1.3')]"
          },
          "autoUpgradeMinorVersion": {
            "value": "[coalesce(tryGet(parameters('extensionDomainJoinConfig'), 'autoUpgradeMinorVersion'), true())]"
          },
          "enableAutomaticUpgrade": {
            "value": "[coalesce(tryGet(parameters('extensionDomainJoinConfig'), 'enableAutomaticUpgrade'), false())]"
          },
          "settings": {
            "value": "[parameters('extensionDomainJoinConfig').settings]"
          },
          "supressFailures": {
            "value": "[coalesce(tryGet(parameters('extensionDomainJoinConfig'), 'supressFailures'), false())]"
          },
          "tags": {
            "value": "[coalesce(tryGet(parameters('extensionDomainJoinConfig'), 'tags'), parameters('tags'))]"
          },
          "protectedSettings": {
            "value": {
              "Password": "[parameters('extensionDomainJoinPassword')]"
            }
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "languageVersion": "2.0",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.34.44.8038",
              "templateHash": "8482591295619883067"
            },
            "name": "Virtual Machine Extensions",
            "description": "This module deploys a Virtual Machine Extension."
          },
          "parameters": {
            "virtualMachineName": {
              "type": "string",
              "metadata": {
                "description": "Conditional. The name of the parent virtual machine that extension is provisioned for. Required if the template is used in a standalone deployment."
              }
            },
            "name": {
              "type": "string",
              "metadata": {
                "description": "Required. The name of the virtual machine extension."
              }
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]",
              "metadata": {
                "description": "Optional. The location the extension is deployed to."
              }
            },
            "publisher": {
              "type": "string",
              "metadata": {
                "description": "Required. The name of the extension handler publisher."
              }
            },
            "type": {
              "type": "string",
              "metadata": {
                "description": "Required. Specifies the type of the extension; an example is \"CustomScriptExtension\"."
              }
            },
            "typeHandlerVersion": {
              "type": "string",
              "metadata": {
                "description": "Required. Specifies the version of the script handler."
              }
            },
            "autoUpgradeMinorVersion": {
              "type": "bool",
              "metadata": {
                "description": "Required. Indicates whether the extension should use a newer minor version if one is available at deployment time. Once deployed, however, the extension will not upgrade minor versions unless redeployed, even with this property set to true."
              }
            },
            "forceUpdateTag": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. How the extension handler should be forced to update even if the extension configuration has not changed."
              }
            },
            "settings": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "Optional. Any object that contains the extension specific settings."
              }
            },
            "protectedSettings": {
              "type": "secureObject",
              "defaultValue": {},
              "metadata": {
                "description": "Optional. Any object that contains the extension specific protected settings."
              }
            },
            "supressFailures": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Optional. Indicates whether failures stemming from the extension will be suppressed (Operational failures such as not connecting to the VM will not be suppressed regardless of this value). The default is false."
              }
            },
            "enableAutomaticUpgrade": {
              "type": "bool",
              "metadata": {
                "description": "Required. Indicates whether the extension should be automatically upgraded by the platform if there is a newer version of the extension available."
              }
            },
            "tags": {
              "type": "object",
              "nullable": true,
              "metadata": {
                "description": "Optional. Tags of the resource."
              }
            }
          },
          "resources": {
            "virtualMachine": {
              "existing": true,
              "type": "Microsoft.Compute/virtualMachines",
              "apiVersion": "2022-11-01",
              "name": "[parameters('virtualMachineName')]"
            },
            "extension": {
              "type": "Microsoft.Compute/virtualMachines/extensions",
              "apiVersion": "2022-11-01",
              "name": "[format('{0}/{1}', parameters('virtualMachineName'), parameters('name'))]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "properties": {
                "publisher": "[parameters('publisher')]",
                "type": "[parameters('type')]",
                "typeHandlerVersion": "[parameters('typeHandlerVersion')]",
                "autoUpgradeMinorVersion": "[parameters('autoUpgradeMinorVersion')]",
                "enableAutomaticUpgrade": "[parameters('enableAutomaticUpgrade')]",
                "forceUpdateTag": "[if(not(empty(parameters('forceUpdateTag'))), parameters('forceUpdateTag'), null())]",
                "settings": "[if(not(empty(parameters('settings'))), parameters('settings'), null())]",
                "protectedSettings": "[if(not(empty(parameters('protectedSettings'))), parameters('protectedSettings'), null())]",
                "suppressFailures": "[parameters('supressFailures')]"
              }
            }
          },
          "outputs": {
            "name": {
              "type": "string",
              "metadata": {
                "description": "The name of the extension."
              },
              "value": "[parameters('name')]"
            },
            "resourceId": {
              "type": "string",
              "metadata": {
                "description": "The resource ID of the extension."
              },
              "value": "[resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('virtualMachineName'), parameters('name'))]"
            },
            "resourceGroupName": {
              "type": "string",
              "metadata": {
                "description": "The name of the Resource Group the extension was created in."
              },
              "value": "[resourceGroup().name]"
            },
            "location": {
              "type": "string",
              "metadata": {
                "description": "The location the resource was deployed into."
              },
              "value": "[reference('extension', '2022-11-01', 'full').location]"
            }
          }
        }
      },
      "dependsOn": [
        "vm"
      ]
    },
    "vm_aadJoinExtension": {
      "condition": "[parameters('extensionAadJoinConfig').enabled]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('{0}-VM-AADLogin', uniqueString(deployment().name, parameters('location')))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "virtualMachineName": {
            "value": "[parameters('name')]"
          },
          "name": {
            "value": "[coalesce(tryGet(parameters('extensionAadJoinConfig'), 'name'), 'AADLogin')]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "publisher": {
            "value": "Microsoft.Azure.ActiveDirectory"
          },
          "type": "[if(equals(parameters('osType'), 'Windows'), createObject('value', 'AADLoginForWindows'), createObject('value', 'AADSSHLoginforLinux'))]",
          "typeHandlerVersion": {
            "value": "[coalesce(tryGet(parameters('extensionAadJoinConfig'), 'typeHandlerVersion'), if(equals(parameters('osType'), 'Windows'), '2.0', '1.0'))]"
          },
          "autoUpgradeMinorVersion": {
            "value": "[coalesce(tryGet(parameters('extensionAadJoinConfig'), 'autoUpgradeMinorVersion'), true())]"
          },
          "enableAutomaticUpgrade": {
            "value": "[coalesce(tryGet(parameters('extensionAadJoinConfig'), 'enableAutomaticUpgrade'), false())]"
          },
          "settings": {
            "value": "[coalesce(tryGet(parameters('extensionAadJoinConfig'), 'settings'), createObject())]"
          },
          "supressFailures": {
            "value": "[coalesce(tryGet(parameters('extensionAadJoinConfig'), 'supressFailures'), false())]"
          },
          "tags": {
            "value": "[coalesce(tryGet(parameters('extensionAadJoinConfig'), 'tags'), parameters('tags'))]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "languageVersion": "2.0",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.34.44.8038",
              "templateHash": "8482591295619883067"
            },
            "name": "Virtual Machine Extensions",
            "description": "This module deploys a Virtual Machine Extension."
          },
          "parameters": {
            "virtualMachineName": {
              "type": "string",
              "metadata": {
                "description": "Conditional. The name of the parent virtual machine that extension is provisioned for. Required if the template is used in a standalone deployment."
              }
            },
            "name": {
              "type": "string",
              "metadata": {
                "description": "Required. The name of the virtual machine extension."
              }
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]",
              "metadata": {
                "description": "Optional. The location the extension is deployed to."
              }
            },
            "publisher": {
              "type": "string",
              "metadata": {
                "description": "Required. The name of the extension handler publisher."
              }
            },
            "type": {
              "type": "string",
              "metadata": {
                "description": "Required. Specifies the type of the extension; an example is \"CustomScriptExtension\"."
              }
            },
            "typeHandlerVersion": {
              "type": "string",
              "metadata": {
                "description": "Required. Specifies the version of the script handler."
              }
            },
            "autoUpgradeMinorVersion": {
              "type": "bool",
              "metadata": {
                "description": "Required. Indicates whether the extension should use a newer minor version if one is available at deployment time. Once deployed, however, the extension will not upgrade minor versions unless redeployed, even with this property set to true."
              }
            },
            "forceUpdateTag": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. How the extension handler should be forced to update even if the extension configuration has not changed."
              }
            },
            "settings": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "Optional. Any object that contains the extension specific settings."
              }
            },
            "protectedSettings": {
              "type": "secureObject",
              "defaultValue": {},
              "metadata": {
                "description": "Optional. Any object that contains the extension specific protected settings."
              }
            },
            "supressFailures": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Optional. Indicates whether failures stemming from the extension will be suppressed (Operational failures such as not connecting to the VM will not be suppressed regardless of this value). The default is false."
              }
            },
            "enableAutomaticUpgrade": {
              "type": "bool",
              "metadata": {
                "description": "Required. Indicates whether the extension should be automatically upgraded by the platform if there is a newer version of the extension available."
              }
            },
            "tags": {
              "type": "object",
              "nullable": true,
              "metadata": {
                "description": "Optional. Tags of the resource."
              }
            }
          },
          "resources": {
            "virtualMachine": {
              "existing": true,
              "type": "Microsoft.Compute/virtualMachines",
              "apiVersion": "2022-11-01",
              "name": "[parameters('virtualMachineName')]"
            },
            "extension": {
              "type": "Microsoft.Compute/virtualMachines/extensions",
              "apiVersion": "2022-11-01",
              "name": "[format('{0}/{1}', parameters('virtualMachineName'), parameters('name'))]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "properties": {
                "publisher": "[parameters('publisher')]",
                "type": "[parameters('type')]",
                "typeHandlerVersion": "[parameters('typeHandlerVersion')]",
                "autoUpgradeMinorVersion": "[parameters('autoUpgradeMinorVersion')]",
                "enableAutomaticUpgrade": "[parameters('enableAutomaticUpgrade')]",
                "forceUpdateTag": "[if(not(empty(parameters('forceUpdateTag'))), parameters('forceUpdateTag'), null())]",
                "settings": "[if(not(empty(parameters('settings'))), parameters('settings'), null())]",
                "protectedSettings": "[if(not(empty(parameters('protectedSettings'))), parameters('protectedSettings'), null())]",
                "suppressFailures": "[parameters('supressFailures')]"
              }
            }
          },
          "outputs": {
            "name": {
              "type": "string",
              "metadata": {
                "description": "The name of the extension."
              },
              "value": "[parameters('name')]"
            },
            "resourceId": {
              "type": "string",
              "metadata": {
                "description": "The resource ID of the extension."
              },
              "value": "[resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('virtualMachineName'), parameters('name'))]"
            },
            "resourceGroupName": {
              "type": "string",
              "metadata": {
                "description": "The name of the Resource Group the extension was created in."
              },
              "value": "[resourceGroup().name]"
            },
            "location": {
              "type": "string",
              "metadata": {
                "description": "The location the resource was deployed into."
              },
              "value": "[reference('extension', '2022-11-01', 'full').location]"
            }
          }
        }
      },
      "dependsOn": [
        "vm",
        "vm_domainJoinExtension"
      ]
    },
    "vm_microsoftAntiMalwareExtension": {
      "condition": "[parameters('extensionAntiMalwareConfig').enabled]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('{0}-VM-MicrosoftAntiMalware', uniqueString(deployment().name, parameters('location')))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "virtualMachineName": {
            "value": "[parameters('name')]"
          },
          "name": {
            "value": "[coalesce(tryGet(parameters('extensionAntiMalwareConfig'), 'name'), 'MicrosoftAntiMalware')]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "publisher": {
            "value": "Microsoft.Azure.Security"
          },
          "type": {
            "value": "IaaSAntimalware"
          },
          "typeHandlerVersion": {
            "value": "[coalesce(tryGet(parameters('extensionAntiMalwareConfig'), 'typeHandlerVersion'), '1.3')]"
          },
          "autoUpgradeMinorVersion": {
            "value": "[coalesce(tryGet(parameters('extensionAntiMalwareConfig'), 'autoUpgradeMinorVersion'), true())]"
          },
          "enableAutomaticUpgrade": {
            "value": "[coalesce(tryGet(parameters('extensionAntiMalwareConfig'), 'enableAutomaticUpgrade'), false())]"
          },
          "settings": {
            "value": "[coalesce(tryGet(parameters('extensionAntiMalwareConfig'), 'settings'), createObject('AntimalwareEnabled', 'true', 'Exclusions', createObject(), 'RealtimeProtectionEnabled', 'true', 'ScheduledScanSettings', createObject('day', '7', 'isEnabled', 'true', 'scanType', 'Quick', 'time', '120')))]"
          },
          "supressFailures": {
            "value": "[coalesce(tryGet(parameters('extensionAntiMalwareConfig'), 'supressFailures'), false())]"
          },
          "tags": {
            "value": "[coalesce(tryGet(parameters('extensionAntiMalwareConfig'), 'tags'), parameters('tags'))]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "languageVersion": "2.0",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.34.44.8038",
              "templateHash": "8482591295619883067"
            },
            "name": "Virtual Machine Extensions",
            "description": "This module deploys a Virtual Machine Extension."
          },
          "parameters": {
            "virtualMachineName": {
              "type": "string",
              "metadata": {
                "description": "Conditional. The name of the parent virtual machine that extension is provisioned for. Required if the template is used in a standalone deployment."
              }
            },
            "name": {
              "type": "string",
              "metadata": {
                "description": "Required. The name of the virtual machine extension."
              }
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]",
              "metadata": {
                "description": "Optional. The location the extension is deployed to."
              }
            },
            "publisher": {
              "type": "string",
              "metadata": {
                "description": "Required. The name of the extension handler publisher."
              }
            },
            "type": {
              "type": "string",
              "metadata": {
                "description": "Required. Specifies the type of the extension; an example is \"CustomScriptExtension\"."
              }
            },
            "typeHandlerVersion": {
              "type": "string",
              "metadata": {
                "description": "Required. Specifies the version of the script handler."
              }
            },
            "autoUpgradeMinorVersion": {
              "type": "bool",
              "metadata": {
                "description": "Required. Indicates whether the extension should use a newer minor version if one is available at deployment time. Once deployed, however, the extension will not upgrade minor versions unless redeployed, even with this property set to true."
              }
            },
            "forceUpdateTag": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. How the extension handler should be forced to update even if the extension configuration has not changed."
              }
            },
            "settings": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "Optional. Any object that contains the extension specific settings."
              }
            },
            "protectedSettings": {
              "type": "secureObject",
              "defaultValue": {},
              "metadata": {
                "description": "Optional. Any object that contains the extension specific protected settings."
              }
            },
            "supressFailures": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Optional. Indicates whether failures stemming from the extension will be suppressed (Operational failures such as not connecting to the VM will not be suppressed regardless of this value). The default is false."
              }
            },
            "enableAutomaticUpgrade": {
              "type": "bool",
              "metadata": {
                "description": "Required. Indicates whether the extension should be automatically upgraded by the platform if there is a newer version of the extension available."
              }
            },
            "tags": {
              "type": "object",
              "nullable": true,
              "metadata": {
                "description": "Optional. Tags of the resource."
              }
            }
          },
          "resources": {
            "virtualMachine": {
              "existing": true,
              "type": "Microsoft.Compute/virtualMachines",
              "apiVersion": "2022-11-01",
              "name": "[parameters('virtualMachineName')]"
            },
            "extension": {
              "type": "Microsoft.Compute/virtualMachines/extensions",
              "apiVersion": "2022-11-01",
              "name": "[format('{0}/{1}', parameters('virtualMachineName'), parameters('name'))]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "properties": {
                "publisher": "[parameters('publisher')]",
                "type": "[parameters('type')]",
                "typeHandlerVersion": "[parameters('typeHandlerVersion')]",
                "autoUpgradeMinorVersion": "[parameters('autoUpgradeMinorVersion')]",
                "enableAutomaticUpgrade": "[parameters('enableAutomaticUpgrade')]",
                "forceUpdateTag": "[if(not(empty(parameters('forceUpdateTag'))), parameters('forceUpdateTag'), null())]",
                "settings": "[if(not(empty(parameters('settings'))), parameters('settings'), null())]",
                "protectedSettings": "[if(not(empty(parameters('protectedSettings'))), parameters('protectedSettings'), null())]",
                "suppressFailures": "[parameters('supressFailures')]"
              }
            }
          },
          "outputs": {
            "name": {
              "type": "string",
              "metadata": {
                "description": "The name of the extension."
              },
              "value": "[parameters('name')]"
            },
            "resourceId": {
              "type": "string",
              "metadata": {
                "description": "The resource ID of the extension."
              },
              "value": "[resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('virtualMachineName'), parameters('name'))]"
            },
            "resourceGroupName": {
              "type": "string",
              "metadata": {
                "description": "The name of the Resource Group the extension was created in."
              },
              "value": "[resourceGroup().name]"
            },
            "location": {
              "type": "string",
              "metadata": {
                "description": "The location the resource was deployed into."
              },
              "value": "[reference('extension', '2022-11-01', 'full').location]"
            }
          }
        }
      },
      "dependsOn": [
        "vm",
        "vm_aadJoinExtension"
      ]
    },
    "vm_azureMonitorAgentExtension": {
      "condition": "[parameters('extensionMonitoringAgentConfig').enabled]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('{0}-VM-AzureMonitorAgent', uniqueString(deployment().name, parameters('location')))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "virtualMachineName": {
            "value": "[parameters('name')]"
          },
          "name": {
            "value": "[coalesce(tryGet(parameters('extensionMonitoringAgentConfig'), 'name'), 'AzureMonitorAgent')]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "publisher": {
            "value": "Microsoft.Azure.Monitor"
          },
          "type": "[if(equals(parameters('osType'), 'Windows'), createObject('value', 'AzureMonitorWindowsAgent'), createObject('value', 'AzureMonitorLinuxAgent'))]",
          "typeHandlerVersion": {
            "value": "[coalesce(tryGet(parameters('extensionMonitoringAgentConfig'), 'typeHandlerVersion'), if(equals(parameters('osType'), 'Windows'), '1.22', '1.29'))]"
          },
          "autoUpgradeMinorVersion": {
            "value": "[coalesce(tryGet(parameters('extensionMonitoringAgentConfig'), 'autoUpgradeMinorVersion'), true())]"
          },
          "enableAutomaticUpgrade": {
            "value": "[coalesce(tryGet(parameters('extensionMonitoringAgentConfig'), 'enableAutomaticUpgrade'), false())]"
          },
          "supressFailures": {
            "value": "[coalesce(tryGet(parameters('extensionMonitoringAgentConfig'), 'supressFailures'), false())]"
          },
          "tags": {
            "value": "[coalesce(tryGet(parameters('extensionMonitoringAgentConfig'), 'tags'), parameters('tags'))]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "languageVersion": "2.0",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.34.44.8038",
              "templateHash": "8482591295619883067"
            },
            "name": "Virtual Machine Extensions",
            "description": "This module deploys a Virtual Machine Extension."
          },
          "parameters": {
            "virtualMachineName": {
              "type": "string",
              "metadata": {
                "description": "Conditional. The name of the parent virtual machine that extension is provisioned for. Required if the template is used in a standalone deployment."
              }
            },
            "name": {
              "type": "string",
              "metadata": {
                "description": "Required. The name of the virtual machine extension."
              }
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]",
              "metadata": {
                "description": "Optional. The location the extension is deployed to."
              }
            },
            "publisher": {
              "type": "string",
              "metadata": {
                "description": "Required. The name of the extension handler publisher."
              }
            },
            "type": {
              "type": "string",
              "metadata": {
                "description": "Required. Specifies the type of the extension; an example is \"CustomScriptExtension\"."
              }
            },
            "typeHandlerVersion": {
              "type": "string",
              "metadata": {
                "description": "Required. Specifies the version of the script handler."
              }
            },
            "autoUpgradeMinorVersion": {
              "type": "bool",
              "metadata": {
                "description": "Required. Indicates whether the extension should use a newer minor version if one is available at deployment time. Once deployed, however, the extension will not upgrade minor versions unless redeployed, even with this property set to true."
              }
            },
            "forceUpdateTag": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. How the extension handler should be forced to update even if the extension configuration has not changed."
              }
            },
            "settings": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "Optional. Any object that contains the extension specific settings."
              }
            },
            "protectedSettings": {
              "type": "secureObject",
              "defaultValue": {},
              "metadata": {
                "description": "Optional. Any object that contains the extension specific protected settings."
              }
            },
            "supressFailures": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Optional. Indicates whether failures stemming from the extension will be suppressed (Operational failures such as not connecting to the VM will not be suppressed regardless of this value). The default is false."
              }
            },
            "enableAutomaticUpgrade": {
              "type": "bool",
              "metadata": {
                "description": "Required. Indicates whether the extension should be automatically upgraded by the platform if there is a newer version of the extension available."
              }
            },
            "tags": {
              "type": "object",
              "nullable": true,
              "metadata": {
                "description": "Optional. Tags of the resource."
              }
            }
          },
          "resources": {
            "virtualMachine": {
              "existing": true,
              "type": "Microsoft.Compute/virtualMachines",
              "apiVersion": "2022-11-01",
              "name": "[parameters('virtualMachineName')]"
            },
            "extension": {
              "type": "Microsoft.Compute/virtualMachines/extensions",
              "apiVersion": "2022-11-01",
              "name": "[format('{0}/{1}', parameters('virtualMachineName'), parameters('name'))]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "properties": {
                "publisher": "[parameters('publisher')]",
                "type": "[parameters('type')]",
                "typeHandlerVersion": "[parameters('typeHandlerVersion')]",
                "autoUpgradeMinorVersion": "[parameters('autoUpgradeMinorVersion')]",
                "enableAutomaticUpgrade": "[parameters('enableAutomaticUpgrade')]",
                "forceUpdateTag": "[if(not(empty(parameters('forceUpdateTag'))), parameters('forceUpdateTag'), null())]",
                "settings": "[if(not(empty(parameters('settings'))), parameters('settings'), null())]",
                "protectedSettings": "[if(not(empty(parameters('protectedSettings'))), parameters('protectedSettings'), null())]",
                "suppressFailures": "[parameters('supressFailures')]"
              }
            }
          },
          "outputs": {
            "name": {
              "type": "string",
              "metadata": {
                "description": "The name of the extension."
              },
              "value": "[parameters('name')]"
            },
            "resourceId": {
              "type": "string",
              "metadata": {
                "description": "The resource ID of the extension."
              },
              "value": "[resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('virtualMachineName'), parameters('name'))]"
            },
            "resourceGroupName": {
              "type": "string",
              "metadata": {
                "description": "The name of the Resource Group the extension was created in."
              },
              "value": "[resourceGroup().name]"
            },
            "location": {
              "type": "string",
              "metadata": {
                "description": "The location the resource was deployed into."
              },
              "value": "[reference('extension', '2022-11-01', 'full').location]"
            }
          }
        }
      },
      "dependsOn": [
        "vm",
        "vm_microsoftAntiMalwareExtension"
      ]
    },
    "vm_dependencyAgentExtension": {
      "condition": "[parameters('extensionDependencyAgentConfig').enabled]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('{0}-VM-DependencyAgent', uniqueString(deployment().name, parameters('location')))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "virtualMachineName": {
            "value": "[parameters('name')]"
          },
          "name": {
            "value": "[coalesce(tryGet(parameters('extensionDependencyAgentConfig'), 'name'), 'DependencyAgent')]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "publisher": {
            "value": "Microsoft.Azure.Monitoring.DependencyAgent"
          },
          "type": "[if(equals(parameters('osType'), 'Windows'), createObject('value', 'DependencyAgentWindows'), createObject('value', 'DependencyAgentLinux'))]",
          "typeHandlerVersion": {
            "value": "[coalesce(tryGet(parameters('extensionDependencyAgentConfig'), 'typeHandlerVersion'), '9.10')]"
          },
          "autoUpgradeMinorVersion": {
            "value": "[coalesce(tryGet(parameters('extensionDependencyAgentConfig'), 'autoUpgradeMinorVersion'), true())]"
          },
          "enableAutomaticUpgrade": {
            "value": "[coalesce(tryGet(parameters('extensionDependencyAgentConfig'), 'enableAutomaticUpgrade'), true())]"
          },
          "settings": {
            "value": {
              "enableAMA": "[coalesce(tryGet(parameters('extensionDependencyAgentConfig'), 'enableAMA'), true())]"
            }
          },
          "supressFailures": {
            "value": "[coalesce(tryGet(parameters('extensionDependencyAgentConfig'), 'supressFailures'), false())]"
          },
          "tags": {
            "value": "[coalesce(tryGet(parameters('extensionDependencyAgentConfig'), 'tags'), parameters('tags'))]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "languageVersion": "2.0",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.34.44.8038",
              "templateHash": "8482591295619883067"
            },
            "name": "Virtual Machine Extensions",
            "description": "This module deploys a Virtual Machine Extension."
          },
          "parameters": {
            "virtualMachineName": {
              "type": "string",
              "metadata": {
                "description": "Conditional. The name of the parent virtual machine that extension is provisioned for. Required if the template is used in a standalone deployment."
              }
            },
            "name": {
              "type": "string",
              "metadata": {
                "description": "Required. The name of the virtual machine extension."
              }
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]",
              "metadata": {
                "description": "Optional. The location the extension is deployed to."
              }
            },
            "publisher": {
              "type": "string",
              "metadata": {
                "description": "Required. The name of the extension handler publisher."
              }
            },
            "type": {
              "type": "string",
              "metadata": {
                "description": "Required. Specifies the type of the extension; an example is \"CustomScriptExtension\"."
              }
            },
            "typeHandlerVersion": {
              "type": "string",
              "metadata": {
                "description": "Required. Specifies the version of the script handler."
              }
            },
            "autoUpgradeMinorVersion": {
              "type": "bool",
              "metadata": {
                "description": "Required. Indicates whether the extension should use a newer minor version if one is available at deployment time. Once deployed, however, the extension will not upgrade minor versions unless redeployed, even with this property set to true."
              }
            },
            "forceUpdateTag": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. How the extension handler should be forced to update even if the extension configuration has not changed."
              }
            },
            "settings": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "Optional. Any object that contains the extension specific settings."
              }
            },
            "protectedSettings": {
              "type": "secureObject",
              "defaultValue": {},
              "metadata": {
                "description": "Optional. Any object that contains the extension specific protected settings."
              }
            },
            "supressFailures": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Optional. Indicates whether failures stemming from the extension will be suppressed (Operational failures such as not connecting to the VM will not be suppressed regardless of this value). The default is false."
              }
            },
            "enableAutomaticUpgrade": {
              "type": "bool",
              "metadata": {
                "description": "Required. Indicates whether the extension should be automatically upgraded by the platform if there is a newer version of the extension available."
              }
            },
            "tags": {
              "type": "object",
              "nullable": true,
              "metadata": {
                "description": "Optional. Tags of the resource."
              }
            }
          },
          "resources": {
            "virtualMachine": {
              "existing": true,
              "type": "Microsoft.Compute/virtualMachines",
              "apiVersion": "2022-11-01",
              "name": "[parameters('virtualMachineName')]"
            },
            "extension": {
              "type": "Microsoft.Compute/virtualMachines/extensions",
              "apiVersion": "2022-11-01",
              "name": "[format('{0}/{1}', parameters('virtualMachineName'), parameters('name'))]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "properties": {
                "publisher": "[parameters('publisher')]",
                "type": "[parameters('type')]",
                "typeHandlerVersion": "[parameters('typeHandlerVersion')]",
                "autoUpgradeMinorVersion": "[parameters('autoUpgradeMinorVersion')]",
                "enableAutomaticUpgrade": "[parameters('enableAutomaticUpgrade')]",
                "forceUpdateTag": "[if(not(empty(parameters('forceUpdateTag'))), parameters('forceUpdateTag'), null())]",
                "settings": "[if(not(empty(parameters('settings'))), parameters('settings'), null())]",
                "protectedSettings": "[if(not(empty(parameters('protectedSettings'))), parameters('protectedSettings'), null())]",
                "suppressFailures": "[parameters('supressFailures')]"
              }
            }
          },
          "outputs": {
            "name": {
              "type": "string",
              "metadata": {
                "description": "The name of the extension."
              },
              "value": "[parameters('name')]"
            },
            "resourceId": {
              "type": "string",
              "metadata": {
                "description": "The resource ID of the extension."
              },
              "value": "[resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('virtualMachineName'), parameters('name'))]"
            },
            "resourceGroupName": {
              "type": "string",
              "metadata": {
                "description": "The name of the Resource Group the extension was created in."
              },
              "value": "[resourceGroup().name]"
            },
            "location": {
              "type": "string",
              "metadata": {
                "description": "The location the resource was deployed into."
              },
              "value": "[reference('extension', '2022-11-01', 'full').location]"
            }
          }
        }
      },
      "dependsOn": [
        "vm",
        "vm_azureMonitorAgentExtension"
      ]
    },
    "vm_networkWatcherAgentExtension": {
      "condition": "[parameters('extensionNetworkWatcherAgentConfig').enabled]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('{0}-VM-NetworkWatcherAgent', uniqueString(deployment().name, parameters('location')))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "virtualMachineName": {
            "value": "[parameters('name')]"
          },
          "name": {
            "value": "[coalesce(tryGet(parameters('extensionNetworkWatcherAgentConfig'), 'name'), 'NetworkWatcherAgent')]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "publisher": {
            "value": "Microsoft.Azure.NetworkWatcher"
          },
          "type": "[if(equals(parameters('osType'), 'Windows'), createObject('value', 'NetworkWatcherAgentWindows'), createObject('value', 'NetworkWatcherAgentLinux'))]",
          "typeHandlerVersion": {
            "value": "[coalesce(tryGet(parameters('extensionNetworkWatcherAgentConfig'), 'typeHandlerVersion'), '1.4')]"
          },
          "autoUpgradeMinorVersion": {
            "value": "[coalesce(tryGet(parameters('extensionNetworkWatcherAgentConfig'), 'autoUpgradeMinorVersion'), true())]"
          },
          "enableAutomaticUpgrade": {
            "value": "[coalesce(tryGet(parameters('extensionNetworkWatcherAgentConfig'), 'enableAutomaticUpgrade'), false())]"
          },
          "supressFailures": {
            "value": "[coalesce(tryGet(parameters('extensionNetworkWatcherAgentConfig'), 'supressFailures'), false())]"
          },
          "tags": {
            "value": "[coalesce(tryGet(parameters('extensionNetworkWatcherAgentConfig'), 'tags'), parameters('tags'))]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "languageVersion": "2.0",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.34.44.8038",
              "templateHash": "8482591295619883067"
            },
            "name": "Virtual Machine Extensions",
            "description": "This module deploys a Virtual Machine Extension."
          },
          "parameters": {
            "virtualMachineName": {
              "type": "string",
              "metadata": {
                "description": "Conditional. The name of the parent virtual machine that extension is provisioned for. Required if the template is used in a standalone deployment."
              }
            },
            "name": {
              "type": "string",
              "metadata": {
                "description": "Required. The name of the virtual machine extension."
              }
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]",
              "metadata": {
                "description": "Optional. The location the extension is deployed to."
              }
            },
            "publisher": {
              "type": "string",
              "metadata": {
                "description": "Required. The name of the extension handler publisher."
              }
            },
            "type": {
              "type": "string",
              "metadata": {
                "description": "Required. Specifies the type of the extension; an example is \"CustomScriptExtension\"."
              }
            },
            "typeHandlerVersion": {
              "type": "string",
              "metadata": {
                "description": "Required. Specifies the version of the script handler."
              }
            },
            "autoUpgradeMinorVersion": {
              "type": "bool",
              "metadata": {
                "description": "Required. Indicates whether the extension should use a newer minor version if one is available at deployment time. Once deployed, however, the extension will not upgrade minor versions unless redeployed, even with this property set to true."
              }
            },
            "forceUpdateTag": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. How the extension handler should be forced to update even if the extension configuration has not changed."
              }
            },
            "settings": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "Optional. Any object that contains the extension specific settings."
              }
            },
            "protectedSettings": {
              "type": "secureObject",
              "defaultValue": {},
              "metadata": {
                "description": "Optional. Any object that contains the extension specific protected settings."
              }
            },
            "supressFailures": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Optional. Indicates whether failures stemming from the extension will be suppressed (Operational failures such as not connecting to the VM will not be suppressed regardless of this value). The default is false."
              }
            },
            "enableAutomaticUpgrade": {
              "type": "bool",
              "metadata": {
                "description": "Required. Indicates whether the extension should be automatically upgraded by the platform if there is a newer version of the extension available."
              }
            },
            "tags": {
              "type": "object",
              "nullable": true,
              "metadata": {
                "description": "Optional. Tags of the resource."
              }
            }
          },
          "resources": {
            "virtualMachine": {
              "existing": true,
              "type": "Microsoft.Compute/virtualMachines",
              "apiVersion": "2022-11-01",
              "name": "[parameters('virtualMachineName')]"
            },
            "extension": {
              "type": "Microsoft.Compute/virtualMachines/extensions",
              "apiVersion": "2022-11-01",
              "name": "[format('{0}/{1}', parameters('virtualMachineName'), parameters('name'))]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "properties": {
                "publisher": "[parameters('publisher')]",
                "type": "[parameters('type')]",
                "typeHandlerVersion": "[parameters('typeHandlerVersion')]",
                "autoUpgradeMinorVersion": "[parameters('autoUpgradeMinorVersion')]",
                "enableAutomaticUpgrade": "[parameters('enableAutomaticUpgrade')]",
                "forceUpdateTag": "[if(not(empty(parameters('forceUpdateTag'))), parameters('forceUpdateTag'), null())]",
                "settings": "[if(not(empty(parameters('settings'))), parameters('settings'), null())]",
                "protectedSettings": "[if(not(empty(parameters('protectedSettings'))), parameters('protectedSettings'), null())]",
                "suppressFailures": "[parameters('supressFailures')]"
              }
            }
          },
          "outputs": {
            "name": {
              "type": "string",
              "metadata": {
                "description": "The name of the extension."
              },
              "value": "[parameters('name')]"
            },
            "resourceId": {
              "type": "string",
              "metadata": {
                "description": "The resource ID of the extension."
              },
              "value": "[resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('virtualMachineName'), parameters('name'))]"
            },
            "resourceGroupName": {
              "type": "string",
              "metadata": {
                "description": "The name of the Resource Group the extension was created in."
              },
              "value": "[resourceGroup().name]"
            },
            "location": {
              "type": "string",
              "metadata": {
                "description": "The location the resource was deployed into."
              },
              "value": "[reference('extension', '2022-11-01', 'full').location]"
            }
          }
        }
      },
      "dependsOn": [
        "vm",
        "vm_dependencyAgentExtension"
      ]
    },
    "vm_desiredStateConfigurationExtension": {
      "condition": "[parameters('extensionDSCConfig').enabled]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('{0}-VM-DesiredStateConfiguration', uniqueString(deployment().name, parameters('location')))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "virtualMachineName": {
            "value": "[parameters('name')]"
          },
          "name": {
            "value": "[coalesce(tryGet(parameters('extensionDSCConfig'), 'name'), 'DesiredStateConfiguration')]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "publisher": {
            "value": "Microsoft.Powershell"
          },
          "type": {
            "value": "DSC"
          },
          "typeHandlerVersion": {
            "value": "[coalesce(tryGet(parameters('extensionDSCConfig'), 'typeHandlerVersion'), '2.77')]"
          },
          "autoUpgradeMinorVersion": {
            "value": "[coalesce(tryGet(parameters('extensionDSCConfig'), 'autoUpgradeMinorVersion'), true())]"
          },
          "enableAutomaticUpgrade": {
            "value": "[coalesce(tryGet(parameters('extensionDSCConfig'), 'enableAutomaticUpgrade'), false())]"
          },
          "settings": {
            "value": "[coalesce(tryGet(parameters('extensionDSCConfig'), 'settings'), createObject())]"
          },
          "supressFailures": {
            "value": "[coalesce(tryGet(parameters('extensionDSCConfig'), 'supressFailures'), false())]"
          },
          "tags": {
            "value": "[coalesce(tryGet(parameters('extensionDSCConfig'), 'tags'), parameters('tags'))]"
          },
          "protectedSettings": {
            "value": "[coalesce(tryGet(parameters('extensionDSCConfig'), 'protectedSettings'), createObject())]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "languageVersion": "2.0",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.34.44.8038",
              "templateHash": "8482591295619883067"
            },
            "name": "Virtual Machine Extensions",
            "description": "This module deploys a Virtual Machine Extension."
          },
          "parameters": {
            "virtualMachineName": {
              "type": "string",
              "metadata": {
                "description": "Conditional. The name of the parent virtual machine that extension is provisioned for. Required if the template is used in a standalone deployment."
              }
            },
            "name": {
              "type": "string",
              "metadata": {
                "description": "Required. The name of the virtual machine extension."
              }
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]",
              "metadata": {
                "description": "Optional. The location the extension is deployed to."
              }
            },
            "publisher": {
              "type": "string",
              "metadata": {
                "description": "Required. The name of the extension handler publisher."
              }
            },
            "type": {
              "type": "string",
              "metadata": {
                "description": "Required. Specifies the type of the extension; an example is \"CustomScriptExtension\"."
              }
            },
            "typeHandlerVersion": {
              "type": "string",
              "metadata": {
                "description": "Required. Specifies the version of the script handler."
              }
            },
            "autoUpgradeMinorVersion": {
              "type": "bool",
              "metadata": {
                "description": "Required. Indicates whether the extension should use a newer minor version if one is available at deployment time. Once deployed, however, the extension will not upgrade minor versions unless redeployed, even with this property set to true."
              }
            },
            "forceUpdateTag": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. How the extension handler should be forced to update even if the extension configuration has not changed."
              }
            },
            "settings": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "Optional. Any object that contains the extension specific settings."
              }
            },
            "protectedSettings": {
              "type": "secureObject",
              "defaultValue": {},
              "metadata": {
                "description": "Optional. Any object that contains the extension specific protected settings."
              }
            },
            "supressFailures": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Optional. Indicates whether failures stemming from the extension will be suppressed (Operational failures such as not connecting to the VM will not be suppressed regardless of this value). The default is false."
              }
            },
            "enableAutomaticUpgrade": {
              "type": "bool",
              "metadata": {
                "description": "Required. Indicates whether the extension should be automatically upgraded by the platform if there is a newer version of the extension available."
              }
            },
            "tags": {
              "type": "object",
              "nullable": true,
              "metadata": {
                "description": "Optional. Tags of the resource."
              }
            }
          },
          "resources": {
            "virtualMachine": {
              "existing": true,
              "type": "Microsoft.Compute/virtualMachines",
              "apiVersion": "2022-11-01",
              "name": "[parameters('virtualMachineName')]"
            },
            "extension": {
              "type": "Microsoft.Compute/virtualMachines/extensions",
              "apiVersion": "2022-11-01",
              "name": "[format('{0}/{1}', parameters('virtualMachineName'), parameters('name'))]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "properties": {
                "publisher": "[parameters('publisher')]",
                "type": "[parameters('type')]",
                "typeHandlerVersion": "[parameters('typeHandlerVersion')]",
                "autoUpgradeMinorVersion": "[parameters('autoUpgradeMinorVersion')]",
                "enableAutomaticUpgrade": "[parameters('enableAutomaticUpgrade')]",
                "forceUpdateTag": "[if(not(empty(parameters('forceUpdateTag'))), parameters('forceUpdateTag'), null())]",
                "settings": "[if(not(empty(parameters('settings'))), parameters('settings'), null())]",
                "protectedSettings": "[if(not(empty(parameters('protectedSettings'))), parameters('protectedSettings'), null())]",
                "suppressFailures": "[parameters('supressFailures')]"
              }
            }
          },
          "outputs": {
            "name": {
              "type": "string",
              "metadata": {
                "description": "The name of the extension."
              },
              "value": "[parameters('name')]"
            },
            "resourceId": {
              "type": "string",
              "metadata": {
                "description": "The resource ID of the extension."
              },
              "value": "[resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('virtualMachineName'), parameters('name'))]"
            },
            "resourceGroupName": {
              "type": "string",
              "metadata": {
                "description": "The name of the Resource Group the extension was created in."
              },
              "value": "[resourceGroup().name]"
            },
            "location": {
              "type": "string",
              "metadata": {
                "description": "The location the resource was deployed into."
              },
              "value": "[reference('extension', '2022-11-01', 'full').location]"
            }
          }
        }
      },
      "dependsOn": [
        "vm",
        "vm_networkWatcherAgentExtension"
      ]
    },
    "vm_customScriptExtension": {
      "condition": "[parameters('extensionCustomScriptConfig').enabled]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('{0}-VM-CustomScriptExtension', uniqueString(deployment().name, parameters('location')))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "virtualMachineName": {
            "value": "[parameters('name')]"
          },
          "name": {
            "value": "[coalesce(tryGet(parameters('extensionCustomScriptConfig'), 'name'), 'CustomScriptExtension')]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "publisher": "[if(equals(parameters('osType'), 'Windows'), createObject('value', 'Microsoft.Compute'), createObject('value', 'Microsoft.Azure.Extensions'))]",
          "type": "[if(equals(parameters('osType'), 'Windows'), createObject('value', 'CustomScriptExtension'), createObject('value', 'CustomScript'))]",
          "typeHandlerVersion": {
            "value": "[coalesce(tryGet(parameters('extensionCustomScriptConfig'), 'typeHandlerVersion'), if(equals(parameters('osType'), 'Windows'), '1.10', '2.1'))]"
          },
          "autoUpgradeMinorVersion": {
            "value": "[coalesce(tryGet(parameters('extensionCustomScriptConfig'), 'autoUpgradeMinorVersion'), true())]"
          },
          "enableAutomaticUpgrade": {
            "value": "[coalesce(tryGet(parameters('extensionCustomScriptConfig'), 'enableAutomaticUpgrade'), false())]"
          },
          "settings": {
            "value": {
              "copy": [
                {
                  "name": "fileUris",
                  "count": "[length(parameters('extensionCustomScriptConfig').fileData)]",
                  "input": "[if(contains(parameters('extensionCustomScriptConfig').fileData[copyIndex('fileUris')], 'storageAccountId'), format('{0}?{1}', parameters('extensionCustomScriptConfig').fileData[copyIndex('fileUris')].uri, listAccountSas(parameters('extensionCustomScriptConfig').fileData[copyIndex('fileUris')].storageAccountId, '2019-04-01', variables('accountSasProperties')).accountSasToken), parameters('extensionCustomScriptConfig').fileData[copyIndex('fileUris')].uri)]"
                }
              ]
            }
          },
          "supressFailures": {
            "value": "[coalesce(tryGet(parameters('extensionCustomScriptConfig'), 'supressFailures'), false())]"
          },
          "tags": {
            "value": "[coalesce(tryGet(parameters('extensionCustomScriptConfig'), 'tags'), parameters('tags'))]"
          },
          "protectedSettings": {
            "value": "[parameters('extensionCustomScriptProtectedSetting')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "languageVersion": "2.0",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.34.44.8038",
              "templateHash": "8482591295619883067"
            },
            "name": "Virtual Machine Extensions",
            "description": "This module deploys a Virtual Machine Extension."
          },
          "parameters": {
            "virtualMachineName": {
              "type": "string",
              "metadata": {
                "description": "Conditional. The name of the parent virtual machine that extension is provisioned for. Required if the template is used in a standalone deployment."
              }
            },
            "name": {
              "type": "string",
              "metadata": {
                "description": "Required. The name of the virtual machine extension."
              }
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]",
              "metadata": {
                "description": "Optional. The location the extension is deployed to."
              }
            },
            "publisher": {
              "type": "string",
              "metadata": {
                "description": "Required. The name of the extension handler publisher."
              }
            },
            "type": {
              "type": "string",
              "metadata": {
                "description": "Required. Specifies the type of the extension; an example is \"CustomScriptExtension\"."
              }
            },
            "typeHandlerVersion": {
              "type": "string",
              "metadata": {
                "description": "Required. Specifies the version of the script handler."
              }
            },
            "autoUpgradeMinorVersion": {
              "type": "bool",
              "metadata": {
                "description": "Required. Indicates whether the extension should use a newer minor version if one is available at deployment time. Once deployed, however, the extension will not upgrade minor versions unless redeployed, even with this property set to true."
              }
            },
            "forceUpdateTag": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. How the extension handler should be forced to update even if the extension configuration has not changed."
              }
            },
            "settings": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "Optional. Any object that contains the extension specific settings."
              }
            },
            "protectedSettings": {
              "type": "secureObject",
              "defaultValue": {},
              "metadata": {
                "description": "Optional. Any object that contains the extension specific protected settings."
              }
            },
            "supressFailures": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Optional. Indicates whether failures stemming from the extension will be suppressed (Operational failures such as not connecting to the VM will not be suppressed regardless of this value). The default is false."
              }
            },
            "enableAutomaticUpgrade": {
              "type": "bool",
              "metadata": {
                "description": "Required. Indicates whether the extension should be automatically upgraded by the platform if there is a newer version of the extension available."
              }
            },
            "tags": {
              "type": "object",
              "nullable": true,
              "metadata": {
                "description": "Optional. Tags of the resource."
              }
            }
          },
          "resources": {
            "virtualMachine": {
              "existing": true,
              "type": "Microsoft.Compute/virtualMachines",
              "apiVersion": "2022-11-01",
              "name": "[parameters('virtualMachineName')]"
            },
            "extension": {
              "type": "Microsoft.Compute/virtualMachines/extensions",
              "apiVersion": "2022-11-01",
              "name": "[format('{0}/{1}', parameters('virtualMachineName'), parameters('name'))]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "properties": {
                "publisher": "[parameters('publisher')]",
                "type": "[parameters('type')]",
                "typeHandlerVersion": "[parameters('typeHandlerVersion')]",
                "autoUpgradeMinorVersion": "[parameters('autoUpgradeMinorVersion')]",
                "enableAutomaticUpgrade": "[parameters('enableAutomaticUpgrade')]",
                "forceUpdateTag": "[if(not(empty(parameters('forceUpdateTag'))), parameters('forceUpdateTag'), null())]",
                "settings": "[if(not(empty(parameters('settings'))), parameters('settings'), null())]",
                "protectedSettings": "[if(not(empty(parameters('protectedSettings'))), parameters('protectedSettings'), null())]",
                "suppressFailures": "[parameters('supressFailures')]"
              }
            }
          },
          "outputs": {
            "name": {
              "type": "string",
              "metadata": {
                "description": "The name of the extension."
              },
              "value": "[parameters('name')]"
            },
            "resourceId": {
              "type": "string",
              "metadata": {
                "description": "The resource ID of the extension."
              },
              "value": "[resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('virtualMachineName'), parameters('name'))]"
            },
            "resourceGroupName": {
              "type": "string",
              "metadata": {
                "description": "The name of the Resource Group the extension was created in."
              },
              "value": "[resourceGroup().name]"
            },
            "location": {
              "type": "string",
              "metadata": {
                "description": "The location the resource was deployed into."
              },
              "value": "[reference('extension', '2022-11-01', 'full').location]"
            }
          }
        }
      },
      "dependsOn": [
        "vm",
        "vm_desiredStateConfigurationExtension"
      ]
    },
    "vm_azureDiskEncryptionExtension": {
      "condition": "[parameters('extensionAzureDiskEncryptionConfig').enabled]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('{0}-VM-AzureDiskEncryption', uniqueString(deployment().name, parameters('location')))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "virtualMachineName": {
            "value": "[parameters('name')]"
          },
          "name": {
            "value": "[coalesce(tryGet(parameters('extensionAzureDiskEncryptionConfig'), 'name'), 'AzureDiskEncryption')]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "publisher": {
            "value": "Microsoft.Azure.Security"
          },
          "type": "[if(equals(parameters('osType'), 'Windows'), createObject('value', 'AzureDiskEncryption'), createObject('value', 'AzureDiskEncryptionForLinux'))]",
          "typeHandlerVersion": {
            "value": "[coalesce(tryGet(parameters('extensionAzureDiskEncryptionConfig'), 'typeHandlerVersion'), if(equals(parameters('osType'), 'Windows'), '2.2', '1.1'))]"
          },
          "autoUpgradeMinorVersion": {
            "value": "[coalesce(tryGet(parameters('extensionAzureDiskEncryptionConfig'), 'autoUpgradeMinorVersion'), true())]"
          },
          "enableAutomaticUpgrade": {
            "value": "[coalesce(tryGet(parameters('extensionAzureDiskEncryptionConfig'), 'enableAutomaticUpgrade'), false())]"
          },
          "forceUpdateTag": {
            "value": "[coalesce(tryGet(parameters('extensionAzureDiskEncryptionConfig'), 'forceUpdateTag'), '1.0')]"
          },
          "settings": {
            "value": "[coalesce(tryGet(parameters('extensionAzureDiskEncryptionConfig'), 'settings'), createObject())]"
          },
          "supressFailures": {
            "value": "[coalesce(tryGet(parameters('extensionAzureDiskEncryptionConfig'), 'supressFailures'), false())]"
          },
          "tags": {
            "value": "[coalesce(tryGet(parameters('extensionAzureDiskEncryptionConfig'), 'tags'), parameters('tags'))]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "languageVersion": "2.0",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.34.44.8038",
              "templateHash": "8482591295619883067"
            },
            "name": "Virtual Machine Extensions",
            "description": "This module deploys a Virtual Machine Extension."
          },
          "parameters": {
            "virtualMachineName": {
              "type": "string",
              "metadata": {
                "description": "Conditional. The name of the parent virtual machine that extension is provisioned for. Required if the template is used in a standalone deployment."
              }
            },
            "name": {
              "type": "string",
              "metadata": {
                "description": "Required. The name of the virtual machine extension."
              }
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]",
              "metadata": {
                "description": "Optional. The location the extension is deployed to."
              }
            },
            "publisher": {
              "type": "string",
              "metadata": {
                "description": "Required. The name of the extension handler publisher."
              }
            },
            "type": {
              "type": "string",
              "metadata": {
                "description": "Required. Specifies the type of the extension; an example is \"CustomScriptExtension\"."
              }
            },
            "typeHandlerVersion": {
              "type": "string",
              "metadata": {
                "description": "Required. Specifies the version of the script handler."
              }
            },
            "autoUpgradeMinorVersion": {
              "type": "bool",
              "metadata": {
                "description": "Required. Indicates whether the extension should use a newer minor version if one is available at deployment time. Once deployed, however, the extension will not upgrade minor versions unless redeployed, even with this property set to true."
              }
            },
            "forceUpdateTag": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. How the extension handler should be forced to update even if the extension configuration has not changed."
              }
            },
            "settings": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "Optional. Any object that contains the extension specific settings."
              }
            },
            "protectedSettings": {
              "type": "secureObject",
              "defaultValue": {},
              "metadata": {
                "description": "Optional. Any object that contains the extension specific protected settings."
              }
            },
            "supressFailures": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Optional. Indicates whether failures stemming from the extension will be suppressed (Operational failures such as not connecting to the VM will not be suppressed regardless of this value). The default is false."
              }
            },
            "enableAutomaticUpgrade": {
              "type": "bool",
              "metadata": {
                "description": "Required. Indicates whether the extension should be automatically upgraded by the platform if there is a newer version of the extension available."
              }
            },
            "tags": {
              "type": "object",
              "nullable": true,
              "metadata": {
                "description": "Optional. Tags of the resource."
              }
            }
          },
          "resources": {
            "virtualMachine": {
              "existing": true,
              "type": "Microsoft.Compute/virtualMachines",
              "apiVersion": "2022-11-01",
              "name": "[parameters('virtualMachineName')]"
            },
            "extension": {
              "type": "Microsoft.Compute/virtualMachines/extensions",
              "apiVersion": "2022-11-01",
              "name": "[format('{0}/{1}', parameters('virtualMachineName'), parameters('name'))]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "properties": {
                "publisher": "[parameters('publisher')]",
                "type": "[parameters('type')]",
                "typeHandlerVersion": "[parameters('typeHandlerVersion')]",
                "autoUpgradeMinorVersion": "[parameters('autoUpgradeMinorVersion')]",
                "enableAutomaticUpgrade": "[parameters('enableAutomaticUpgrade')]",
                "forceUpdateTag": "[if(not(empty(parameters('forceUpdateTag'))), parameters('forceUpdateTag'), null())]",
                "settings": "[if(not(empty(parameters('settings'))), parameters('settings'), null())]",
                "protectedSettings": "[if(not(empty(parameters('protectedSettings'))), parameters('protectedSettings'), null())]",
                "suppressFailures": "[parameters('supressFailures')]"
              }
            }
          },
          "outputs": {
            "name": {
              "type": "string",
              "metadata": {
                "description": "The name of the extension."
              },
              "value": "[parameters('name')]"
            },
            "resourceId": {
              "type": "string",
              "metadata": {
                "description": "The resource ID of the extension."
              },
              "value": "[resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('virtualMachineName'), parameters('name'))]"
            },
            "resourceGroupName": {
              "type": "string",
              "metadata": {
                "description": "The name of the Resource Group the extension was created in."
              },
              "value": "[resourceGroup().name]"
            },
            "location": {
              "type": "string",
              "metadata": {
                "description": "The location the resource was deployed into."
              },
              "value": "[reference('extension', '2022-11-01', 'full').location]"
            }
          }
        }
      },
      "dependsOn": [
        "vm",
        "vm_customScriptExtension"
      ]
    },
    "vm_nvidiaGpuDriverWindowsExtension": {
      "condition": "[parameters('extensionNvidiaGpuDriverWindows').enabled]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('{0}-VM-NvidiaGpuDriverWindows', uniqueString(deployment().name, parameters('location')))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "virtualMachineName": {
            "value": "[parameters('name')]"
          },
          "name": {
            "value": "[coalesce(tryGet(parameters('extensionNvidiaGpuDriverWindows'), 'name'), 'NvidiaGpuDriverWindows')]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "publisher": {
            "value": "Microsoft.HpcCompute"
          },
          "type": {
            "value": "NvidiaGpuDriverWindows"
          },
          "typeHandlerVersion": {
            "value": "[coalesce(tryGet(parameters('extensionNvidiaGpuDriverWindows'), 'typeHandlerVersion'), '1.4')]"
          },
          "autoUpgradeMinorVersion": {
            "value": "[coalesce(tryGet(parameters('extensionNvidiaGpuDriverWindows'), 'autoUpgradeMinorVersion'), true())]"
          },
          "enableAutomaticUpgrade": {
            "value": "[coalesce(tryGet(parameters('extensionNvidiaGpuDriverWindows'), 'enableAutomaticUpgrade'), false())]"
          },
          "supressFailures": {
            "value": "[coalesce(tryGet(parameters('extensionNvidiaGpuDriverWindows'), 'supressFailures'), false())]"
          },
          "tags": {
            "value": "[coalesce(tryGet(parameters('extensionNvidiaGpuDriverWindows'), 'tags'), parameters('tags'))]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "languageVersion": "2.0",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.34.44.8038",
              "templateHash": "8482591295619883067"
            },
            "name": "Virtual Machine Extensions",
            "description": "This module deploys a Virtual Machine Extension."
          },
          "parameters": {
            "virtualMachineName": {
              "type": "string",
              "metadata": {
                "description": "Conditional. The name of the parent virtual machine that extension is provisioned for. Required if the template is used in a standalone deployment."
              }
            },
            "name": {
              "type": "string",
              "metadata": {
                "description": "Required. The name of the virtual machine extension."
              }
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]",
              "metadata": {
                "description": "Optional. The location the extension is deployed to."
              }
            },
            "publisher": {
              "type": "string",
              "metadata": {
                "description": "Required. The name of the extension handler publisher."
              }
            },
            "type": {
              "type": "string",
              "metadata": {
                "description": "Required. Specifies the type of the extension; an example is \"CustomScriptExtension\"."
              }
            },
            "typeHandlerVersion": {
              "type": "string",
              "metadata": {
                "description": "Required. Specifies the version of the script handler."
              }
            },
            "autoUpgradeMinorVersion": {
              "type": "bool",
              "metadata": {
                "description": "Required. Indicates whether the extension should use a newer minor version if one is available at deployment time. Once deployed, however, the extension will not upgrade minor versions unless redeployed, even with this property set to true."
              }
            },
            "forceUpdateTag": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. How the extension handler should be forced to update even if the extension configuration has not changed."
              }
            },
            "settings": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "Optional. Any object that contains the extension specific settings."
              }
            },
            "protectedSettings": {
              "type": "secureObject",
              "defaultValue": {},
              "metadata": {
                "description": "Optional. Any object that contains the extension specific protected settings."
              }
            },
            "supressFailures": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Optional. Indicates whether failures stemming from the extension will be suppressed (Operational failures such as not connecting to the VM will not be suppressed regardless of this value). The default is false."
              }
            },
            "enableAutomaticUpgrade": {
              "type": "bool",
              "metadata": {
                "description": "Required. Indicates whether the extension should be automatically upgraded by the platform if there is a newer version of the extension available."
              }
            },
            "tags": {
              "type": "object",
              "nullable": true,
              "metadata": {
                "description": "Optional. Tags of the resource."
              }
            }
          },
          "resources": {
            "virtualMachine": {
              "existing": true,
              "type": "Microsoft.Compute/virtualMachines",
              "apiVersion": "2022-11-01",
              "name": "[parameters('virtualMachineName')]"
            },
            "extension": {
              "type": "Microsoft.Compute/virtualMachines/extensions",
              "apiVersion": "2022-11-01",
              "name": "[format('{0}/{1}', parameters('virtualMachineName'), parameters('name'))]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "properties": {
                "publisher": "[parameters('publisher')]",
                "type": "[parameters('type')]",
                "typeHandlerVersion": "[parameters('typeHandlerVersion')]",
                "autoUpgradeMinorVersion": "[parameters('autoUpgradeMinorVersion')]",
                "enableAutomaticUpgrade": "[parameters('enableAutomaticUpgrade')]",
                "forceUpdateTag": "[if(not(empty(parameters('forceUpdateTag'))), parameters('forceUpdateTag'), null())]",
                "settings": "[if(not(empty(parameters('settings'))), parameters('settings'), null())]",
                "protectedSettings": "[if(not(empty(parameters('protectedSettings'))), parameters('protectedSettings'), null())]",
                "suppressFailures": "[parameters('supressFailures')]"
              }
            }
          },
          "outputs": {
            "name": {
              "type": "string",
              "metadata": {
                "description": "The name of the extension."
              },
              "value": "[parameters('name')]"
            },
            "resourceId": {
              "type": "string",
              "metadata": {
                "description": "The resource ID of the extension."
              },
              "value": "[resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('virtualMachineName'), parameters('name'))]"
            },
            "resourceGroupName": {
              "type": "string",
              "metadata": {
                "description": "The name of the Resource Group the extension was created in."
              },
              "value": "[resourceGroup().name]"
            },
            "location": {
              "type": "string",
              "metadata": {
                "description": "The location the resource was deployed into."
              },
              "value": "[reference('extension', '2022-11-01', 'full').location]"
            }
          }
        }
      },
      "dependsOn": [
        "vm",
        "vm_azureDiskEncryptionExtension"
      ]
    },
    "vm_hostPoolRegistrationExtension": {
      "condition": "[parameters('extensionHostPoolRegistration').enabled]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('{0}-VM-HostPoolRegistration', uniqueString(deployment().name, parameters('location')))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "virtualMachineName": {
            "value": "[parameters('name')]"
          },
          "name": {
            "value": "[coalesce(tryGet(parameters('extensionHostPoolRegistration'), 'name'), 'HostPoolRegistration')]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "publisher": {
            "value": "Microsoft.PowerShell"
          },
          "type": {
            "value": "DSC"
          },
          "typeHandlerVersion": {
            "value": "[coalesce(tryGet(parameters('extensionHostPoolRegistration'), 'typeHandlerVersion'), '2.77')]"
          },
          "autoUpgradeMinorVersion": {
            "value": "[coalesce(tryGet(parameters('extensionHostPoolRegistration'), 'autoUpgradeMinorVersion'), true())]"
          },
          "enableAutomaticUpgrade": {
            "value": "[coalesce(tryGet(parameters('extensionHostPoolRegistration'), 'enableAutomaticUpgrade'), false())]"
          },
          "settings": {
            "value": {
              "modulesUrl": "[parameters('extensionHostPoolRegistration').modulesUrl]",
              "configurationFunction": "[parameters('extensionHostPoolRegistration').configurationFunction]",
              "properties": {
                "hostPoolName": "[parameters('extensionHostPoolRegistration').hostPoolName]",
                "registrationInfoToken": "[parameters('extensionHostPoolRegistration').registrationInfoToken]",
                "aadJoin": true
              },
              "supressFailures": "[coalesce(tryGet(parameters('extensionHostPoolRegistration'), 'supressFailures'), false())]"
            }
          },
          "tags": {
            "value": "[coalesce(tryGet(parameters('extensionHostPoolRegistration'), 'tags'), parameters('tags'))]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "languageVersion": "2.0",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.34.44.8038",
              "templateHash": "8482591295619883067"
            },
            "name": "Virtual Machine Extensions",
            "description": "This module deploys a Virtual Machine Extension."
          },
          "parameters": {
            "virtualMachineName": {
              "type": "string",
              "metadata": {
                "description": "Conditional. The name of the parent virtual machine that extension is provisioned for. Required if the template is used in a standalone deployment."
              }
            },
            "name": {
              "type": "string",
              "metadata": {
                "description": "Required. The name of the virtual machine extension."
              }
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]",
              "metadata": {
                "description": "Optional. The location the extension is deployed to."
              }
            },
            "publisher": {
              "type": "string",
              "metadata": {
                "description": "Required. The name of the extension handler publisher."
              }
            },
            "type": {
              "type": "string",
              "metadata": {
                "description": "Required. Specifies the type of the extension; an example is \"CustomScriptExtension\"."
              }
            },
            "typeHandlerVersion": {
              "type": "string",
              "metadata": {
                "description": "Required. Specifies the version of the script handler."
              }
            },
            "autoUpgradeMinorVersion": {
              "type": "bool",
              "metadata": {
                "description": "Required. Indicates whether the extension should use a newer minor version if one is available at deployment time. Once deployed, however, the extension will not upgrade minor versions unless redeployed, even with this property set to true."
              }
            },
            "forceUpdateTag": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. How the extension handler should be forced to update even if the extension configuration has not changed."
              }
            },
            "settings": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "Optional. Any object that contains the extension specific settings."
              }
            },
            "protectedSettings": {
              "type": "secureObject",
              "defaultValue": {},
              "metadata": {
                "description": "Optional. Any object that contains the extension specific protected settings."
              }
            },
            "supressFailures": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Optional. Indicates whether failures stemming from the extension will be suppressed (Operational failures such as not connecting to the VM will not be suppressed regardless of this value). The default is false."
              }
            },
            "enableAutomaticUpgrade": {
              "type": "bool",
              "metadata": {
                "description": "Required. Indicates whether the extension should be automatically upgraded by the platform if there is a newer version of the extension available."
              }
            },
            "tags": {
              "type": "object",
              "nullable": true,
              "metadata": {
                "description": "Optional. Tags of the resource."
              }
            }
          },
          "resources": {
            "virtualMachine": {
              "existing": true,
              "type": "Microsoft.Compute/virtualMachines",
              "apiVersion": "2022-11-01",
              "name": "[parameters('virtualMachineName')]"
            },
            "extension": {
              "type": "Microsoft.Compute/virtualMachines/extensions",
              "apiVersion": "2022-11-01",
              "name": "[format('{0}/{1}', parameters('virtualMachineName'), parameters('name'))]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "properties": {
                "publisher": "[parameters('publisher')]",
                "type": "[parameters('type')]",
                "typeHandlerVersion": "[parameters('typeHandlerVersion')]",
                "autoUpgradeMinorVersion": "[parameters('autoUpgradeMinorVersion')]",
                "enableAutomaticUpgrade": "[parameters('enableAutomaticUpgrade')]",
                "forceUpdateTag": "[if(not(empty(parameters('forceUpdateTag'))), parameters('forceUpdateTag'), null())]",
                "settings": "[if(not(empty(parameters('settings'))), parameters('settings'), null())]",
                "protectedSettings": "[if(not(empty(parameters('protectedSettings'))), parameters('protectedSettings'), null())]",
                "suppressFailures": "[parameters('supressFailures')]"
              }
            }
          },
          "outputs": {
            "name": {
              "type": "string",
              "metadata": {
                "description": "The name of the extension."
              },
              "value": "[parameters('name')]"
            },
            "resourceId": {
              "type": "string",
              "metadata": {
                "description": "The resource ID of the extension."
              },
              "value": "[resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('virtualMachineName'), parameters('name'))]"
            },
            "resourceGroupName": {
              "type": "string",
              "metadata": {
                "description": "The name of the Resource Group the extension was created in."
              },
              "value": "[resourceGroup().name]"
            },
            "location": {
              "type": "string",
              "metadata": {
                "description": "The location the resource was deployed into."
              },
              "value": "[reference('extension', '2022-11-01', 'full').location]"
            }
          }
        }
      },
      "dependsOn": [
        "vm",
        "vm_nvidiaGpuDriverWindowsExtension"
      ]
    },
    "vm_azureGuestConfigurationExtension": {
      "condition": "[parameters('extensionGuestConfigurationExtension').enabled]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('{0}-VM-GuestConfiguration', uniqueString(deployment().name, parameters('location')))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "virtualMachineName": {
            "value": "[parameters('name')]"
          },
          "name": "[if(coalesce(tryGet(parameters('extensionGuestConfigurationExtension'), 'name'), equals(parameters('osType'), 'Windows')), createObject('value', 'AzurePolicyforWindows'), createObject('value', 'AzurePolicyforLinux'))]",
          "location": {
            "value": "[parameters('location')]"
          },
          "publisher": {
            "value": "Microsoft.GuestConfiguration"
          },
          "type": "[if(equals(parameters('osType'), 'Windows'), createObject('value', 'ConfigurationforWindows'), createObject('value', 'ConfigurationForLinux'))]",
          "typeHandlerVersion": {
            "value": "[coalesce(tryGet(parameters('extensionGuestConfigurationExtension'), 'typeHandlerVersion'), if(equals(parameters('osType'), 'Windows'), '1.0', '1.0'))]"
          },
          "autoUpgradeMinorVersion": {
            "value": "[coalesce(tryGet(parameters('extensionGuestConfigurationExtension'), 'autoUpgradeMinorVersion'), true())]"
          },
          "enableAutomaticUpgrade": {
            "value": "[coalesce(tryGet(parameters('extensionGuestConfigurationExtension'), 'enableAutomaticUpgrade'), true())]"
          },
          "forceUpdateTag": {
            "value": "[coalesce(tryGet(parameters('extensionGuestConfigurationExtension'), 'forceUpdateTag'), '1.0')]"
          },
          "settings": {
            "value": "[coalesce(tryGet(parameters('extensionGuestConfigurationExtension'), 'settings'), createObject())]"
          },
          "supressFailures": {
            "value": "[coalesce(tryGet(parameters('extensionGuestConfigurationExtension'), 'supressFailures'), false())]"
          },
          "protectedSettings": {
            "value": "[parameters('extensionGuestConfigurationExtensionProtectedSettings')]"
          },
          "tags": {
            "value": "[coalesce(tryGet(parameters('extensionGuestConfigurationExtension'), 'tags'), parameters('tags'))]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "languageVersion": "2.0",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.34.44.8038",
              "templateHash": "8482591295619883067"
            },
            "name": "Virtual Machine Extensions",
            "description": "This module deploys a Virtual Machine Extension."
          },
          "parameters": {
            "virtualMachineName": {
              "type": "string",
              "metadata": {
                "description": "Conditional. The name of the parent virtual machine that extension is provisioned for. Required if the template is used in a standalone deployment."
              }
            },
            "name": {
              "type": "string",
              "metadata": {
                "description": "Required. The name of the virtual machine extension."
              }
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]",
              "metadata": {
                "description": "Optional. The location the extension is deployed to."
              }
            },
            "publisher": {
              "type": "string",
              "metadata": {
                "description": "Required. The name of the extension handler publisher."
              }
            },
            "type": {
              "type": "string",
              "metadata": {
                "description": "Required. Specifies the type of the extension; an example is \"CustomScriptExtension\"."
              }
            },
            "typeHandlerVersion": {
              "type": "string",
              "metadata": {
                "description": "Required. Specifies the version of the script handler."
              }
            },
            "autoUpgradeMinorVersion": {
              "type": "bool",
              "metadata": {
                "description": "Required. Indicates whether the extension should use a newer minor version if one is available at deployment time. Once deployed, however, the extension will not upgrade minor versions unless redeployed, even with this property set to true."
              }
            },
            "forceUpdateTag": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. How the extension handler should be forced to update even if the extension configuration has not changed."
              }
            },
            "settings": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "Optional. Any object that contains the extension specific settings."
              }
            },
            "protectedSettings": {
              "type": "secureObject",
              "defaultValue": {},
              "metadata": {
                "description": "Optional. Any object that contains the extension specific protected settings."
              }
            },
            "supressFailures": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Optional. Indicates whether failures stemming from the extension will be suppressed (Operational failures such as not connecting to the VM will not be suppressed regardless of this value). The default is false."
              }
            },
            "enableAutomaticUpgrade": {
              "type": "bool",
              "metadata": {
                "description": "Required. Indicates whether the extension should be automatically upgraded by the platform if there is a newer version of the extension available."
              }
            },
            "tags": {
              "type": "object",
              "nullable": true,
              "metadata": {
                "description": "Optional. Tags of the resource."
              }
            }
          },
          "resources": {
            "virtualMachine": {
              "existing": true,
              "type": "Microsoft.Compute/virtualMachines",
              "apiVersion": "2022-11-01",
              "name": "[parameters('virtualMachineName')]"
            },
            "extension": {
              "type": "Microsoft.Compute/virtualMachines/extensions",
              "apiVersion": "2022-11-01",
              "name": "[format('{0}/{1}', parameters('virtualMachineName'), parameters('name'))]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "properties": {
                "publisher": "[parameters('publisher')]",
                "type": "[parameters('type')]",
                "typeHandlerVersion": "[parameters('typeHandlerVersion')]",
                "autoUpgradeMinorVersion": "[parameters('autoUpgradeMinorVersion')]",
                "enableAutomaticUpgrade": "[parameters('enableAutomaticUpgrade')]",
                "forceUpdateTag": "[if(not(empty(parameters('forceUpdateTag'))), parameters('forceUpdateTag'), null())]",
                "settings": "[if(not(empty(parameters('settings'))), parameters('settings'), null())]",
                "protectedSettings": "[if(not(empty(parameters('protectedSettings'))), parameters('protectedSettings'), null())]",
                "suppressFailures": "[parameters('supressFailures')]"
              }
            }
          },
          "outputs": {
            "name": {
              "type": "string",
              "metadata": {
                "description": "The name of the extension."
              },
              "value": "[parameters('name')]"
            },
            "resourceId": {
              "type": "string",
              "metadata": {
                "description": "The resource ID of the extension."
              },
              "value": "[resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('virtualMachineName'), parameters('name'))]"
            },
            "resourceGroupName": {
              "type": "string",
              "metadata": {
                "description": "The name of the Resource Group the extension was created in."
              },
              "value": "[resourceGroup().name]"
            },
            "location": {
              "type": "string",
              "metadata": {
                "description": "The location the resource was deployed into."
              },
              "value": "[reference('extension', '2022-11-01', 'full').location]"
            }
          }
        }
      },
      "dependsOn": [
        "vm",
        "vm_hostPoolRegistrationExtension"
      ]
    },
    "vm_backup": {
      "condition": "[not(empty(parameters('backupVaultName')))]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('{0}-VM-Backup', uniqueString(deployment().name, parameters('location')))]",
      "resourceGroup": "[parameters('backupVaultResourceGroup')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "name": {
            "value": "[format('vm;iaasvmcontainerv2;{0};{1}', resourceGroup().name, parameters('name'))]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "policyId": {
            "value": "[resourceId('Microsoft.RecoveryServices/vaults/backupPolicies', parameters('backupVaultName'), parameters('backupPolicyName'))]"
          },
          "protectedItemType": {
            "value": "Microsoft.Compute/virtualMachines"
          },
          "protectionContainerName": {
            "value": "[format('iaasvmcontainer;iaasvmcontainerv2;{0};{1}', resourceGroup().name, parameters('name'))]"
          },
          "recoveryVaultName": {
            "value": "[parameters('backupVaultName')]"
          },
          "sourceResourceId": {
            "value": "[resourceId('Microsoft.Compute/virtualMachines', parameters('name'))]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.34.44.8038",
              "templateHash": "7743264001610407207"
            },
            "name": "Recovery Service Vaults Protection Container Protected Item",
            "description": "This module deploys a Recovery Services Vault Protection Container Protected Item."
          },
          "parameters": {
            "name": {
              "type": "string",
              "metadata": {
                "description": "Required. Name of the resource."
              }
            },
            "protectionContainerName": {
              "type": "string",
              "metadata": {
                "description": "Conditional. Name of the Azure Recovery Service Vault Protection Container. Required if the template is used in a standalone deployment."
              }
            },
            "recoveryVaultName": {
              "type": "string",
              "metadata": {
                "description": "Conditional. The name of the parent Azure Recovery Service Vault. Required if the template is used in a standalone deployment."
              }
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]",
              "metadata": {
                "description": "Optional. Location for all resources."
              }
            },
            "protectedItemType": {
              "type": "string",
              "allowedValues": [
                "AzureFileShareProtectedItem",
                "AzureVmWorkloadSAPAseDatabase",
                "AzureVmWorkloadSAPHanaDatabase",
                "AzureVmWorkloadSQLDatabase",
                "DPMProtectedItem",
                "GenericProtectedItem",
                "MabFileFolderProtectedItem",
                "Microsoft.ClassicCompute/virtualMachines",
                "Microsoft.Compute/virtualMachines",
                "Microsoft.Sql/servers/databases"
              ],
              "metadata": {
                "description": "Required. The backup item type."
              }
            },
            "policyId": {
              "type": "string",
              "metadata": {
                "description": "Required. ID of the backup policy with which this item is backed up."
              }
            },
            "sourceResourceId": {
              "type": "string",
              "metadata": {
                "description": "Required. Resource ID of the resource to back up."
              }
            }
          },
          "resources": [
            {
              "type": "Microsoft.RecoveryServices/vaults/backupFabrics/protectionContainers/protectedItems",
              "apiVersion": "2023-01-01",
              "name": "[format('{0}/Azure/{1}/{2}', parameters('recoveryVaultName'), parameters('protectionContainerName'), parameters('name'))]",
              "location": "[parameters('location')]",
              "properties": {
                "protectedItemType": "[parameters('protectedItemType')]",
                "policyId": "[parameters('policyId')]",
                "sourceResourceId": "[parameters('sourceResourceId')]"
              }
            }
          ],
          "outputs": {
            "resourceGroupName": {
              "type": "string",
              "metadata": {
                "description": "The name of the Resource Group the protected item was created in."
              },
              "value": "[resourceGroup().name]"
            },
            "resourceId": {
              "type": "string",
              "metadata": {
                "description": "The resource ID of the protected item."
              },
              "value": "[resourceId('Microsoft.RecoveryServices/vaults/backupFabrics/protectionContainers/protectedItems', split(format('{0}/Azure/{1}/{2}', parameters('recoveryVaultName'), parameters('protectionContainerName'), parameters('name')), '/')[0], split(format('{0}/Azure/{1}/{2}', parameters('recoveryVaultName'), parameters('protectionContainerName'), parameters('name')), '/')[1], split(format('{0}/Azure/{1}/{2}', parameters('recoveryVaultName'), parameters('protectionContainerName'), parameters('name')), '/')[2], split(format('{0}/Azure/{1}/{2}', parameters('recoveryVaultName'), parameters('protectionContainerName'), parameters('name')), '/')[3])]"
            },
            "name": {
              "type": "string",
              "metadata": {
                "description": "The Name of the protected item."
              },
              "value": "[format('{0}/Azure/{1}/{2}', parameters('recoveryVaultName'), parameters('protectionContainerName'), parameters('name'))]"
            }
          }
        }
      },
      "dependsOn": [
        "vm",
        "vm_azureGuestConfigurationExtension"
      ]
    }
  },
  "outputs": {
    "name": {
      "type": "string",
      "metadata": {
        "description": "The name of the VM."
      },
      "value": "[parameters('name')]"
    },
    "resourceId": {
      "type": "string",
      "metadata": {
        "description": "The resource ID of the VM."
      },
      "value": "[resourceId('Microsoft.Compute/virtualMachines', parameters('name'))]"
    },
    "resourceGroupName": {
      "type": "string",
      "metadata": {
        "description": "The name of the resource group the VM was created in."
      },
      "value": "[resourceGroup().name]"
    },
    "systemAssignedMIPrincipalId": {
      "type": "string",
      "nullable": true,
      "metadata": {
        "description": "The principal ID of the system assigned identity."
      },
      "value": "[tryGet(tryGet(reference('vm', '2024-07-01', 'full'), 'identity'), 'principalId')]"
    },
    "location": {
      "type": "string",
      "metadata": {
        "description": "The location the resource was deployed into."
      },
      "value": "[reference('vm', '2024-07-01', 'full').location]"
    },
    "nicConfigurations": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/nicConfigurationOutputType"
      },
      "metadata": {
        "description": "The list of NIC configurations of the virtual machine."
      },
      "copy": {
        "count": "[length(parameters('nicConfigurations'))]",
        "input": {
          "name": "[reference(format('vm_nic[{0}]', copyIndex())).outputs.name.value]",
          "ipConfigurations": "[reference(format('vm_nic[{0}]', copyIndex())).outputs.ipConfigurations.value]"
        }
      }
    }
  }
}