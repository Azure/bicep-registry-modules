{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "languageVersion": "2.0",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "_generator": {
      "name": "bicep",
      "version": "0.36.1.42791",
      "templateHash": "13939702786676880377"
    },
    "name": "Container Instances Container Groups",
    "description": "This module deploys a Container Instance Container Group."
  },
  "definitions": {
    "containerProbeType": {
      "type": "object",
      "properties": {
        "exec": {
          "type": "object",
          "properties": {
            "command": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "metadata": {
                "description": "Required. The commands to execute within the container."
              }
            }
          },
          "nullable": true,
          "metadata": {
            "description": "Optional. The execution command to probe."
          }
        },
        "failureThreshold": {
          "type": "int",
          "nullable": true,
          "metadata": {
            "description": "Optional. The failure threshold."
          }
        },
        "httpGet": {
          "type": "object",
          "properties": {
            "httpHeaders": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "metadata": {
                      "description": "Required. The name of the header."
                    }
                  },
                  "value": {
                    "type": "string",
                    "metadata": {
                      "description": "Required. The value of the header."
                    }
                  }
                }
              },
              "nullable": true,
              "metadata": {
                "description": "Optional. The HTTP headers."
              }
            },
            "path": {
              "type": "string",
              "nullable": true,
              "metadata": {
                "description": "Optional. The path to probe."
              }
            },
            "port": {
              "type": "int",
              "metadata": {
                "description": "Required. The port number to probe."
              }
            },
            "scheme": {
              "type": "string",
              "allowedValues": [
                "HTTP",
                "HTTPS"
              ],
              "nullable": true,
              "metadata": {
                "description": "Optional. The scheme."
              }
            }
          },
          "nullable": true,
          "metadata": {
            "description": "Optional. The HTTP request to perform."
          }
        },
        "initialDelaySeconds": {
          "type": "int",
          "nullable": true,
          "metadata": {
            "description": "Optional. The initial delay seconds."
          }
        },
        "periodSeconds": {
          "type": "int",
          "nullable": true,
          "metadata": {
            "description": "Optional. The period seconds."
          }
        },
        "successThreshold": {
          "type": "int",
          "nullable": true,
          "metadata": {
            "description": "Optional. The success threshold."
          }
        },
        "timeoutSeconds": {
          "type": "int",
          "nullable": true,
          "metadata": {
            "description": "Optional. The timeout seconds."
          }
        }
      },
      "metadata": {
        "__bicep_export!": true,
        "description": "The type for a container probe."
      }
    },
    "containerType": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "metadata": {
            "description": "Required. The name of the container instance."
          }
        },
        "properties": {
          "type": "object",
          "properties": {
            "image": {
              "type": "string",
              "metadata": {
                "description": "Required. The name of the container source image."
              }
            },
            "livenessProbe": {
              "$ref": "#/definitions/containerProbeType",
              "nullable": true,
              "metadata": {
                "description": "Optional. The liveness probe."
              }
            },
            "readinessProbe": {
              "$ref": "#/definitions/containerProbeType",
              "nullable": true,
              "metadata": {
                "description": "Optional. The readiness probe."
              }
            },
            "ports": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "port": {
                    "type": "int",
                    "metadata": {
                      "description": "Required. The port number exposed on the container instance."
                    }
                  },
                  "protocol": {
                    "type": "string",
                    "metadata": {
                      "description": "Required. The protocol associated with the port number."
                    }
                  }
                }
              },
              "nullable": true,
              "metadata": {
                "description": "Optional. The exposed ports on the container instance."
              }
            },
            "resources": {
              "type": "object",
              "properties": {
                "requests": {
                  "type": "object",
                  "properties": {
                    "cpu": {
                      "type": "int",
                      "metadata": {
                        "description": "Required. The CPU request of this container instance."
                      }
                    },
                    "gpu": {
                      "$ref": "#/definitions/containerGpuType",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The GPU request of this container instance."
                      }
                    },
                    "memoryInGB": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The memory request in GB of this container instance."
                      }
                    }
                  },
                  "metadata": {
                    "description": "Required. The resource requests of this container instance."
                  }
                },
                "limits": {
                  "type": "object",
                  "properties": {
                    "cpu": {
                      "type": "int",
                      "metadata": {
                        "description": "Required. The CPU limit of this container instance."
                      }
                    },
                    "gpu": {
                      "$ref": "#/definitions/containerGpuType",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The GPU limit of this container instance."
                      }
                    },
                    "memoryInGB": {
                      "type": "string",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The memory limit in GB of this container instance."
                      }
                    }
                  },
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The resource limits of this container instance."
                  }
                }
              },
              "metadata": {
                "description": "Required. The resource requirements of the container instance."
              }
            },
            "securityContext": {
              "type": "object",
              "properties": {
                "allowPrivilegeEscalation": {
                  "type": "bool",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Whether privilege escalation is allowed for the container."
                  }
                },
                "capabilities": {
                  "type": "object",
                  "properties": {
                    "add": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The list of capabilities to add."
                      }
                    },
                    "drop": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The list of capabilities to drop."
                      }
                    }
                  },
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The capabilities to add or drop for the container."
                  }
                },
                "privileged": {
                  "type": "bool",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Whether the container is run in privileged mode."
                  }
                },
                "runAsGroup": {
                  "type": "int",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The GID to run the container as."
                  }
                },
                "runAsUser": {
                  "type": "int",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The UID to run the container as."
                  }
                },
                "seccompProfile": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The seccomp profile to use for the container."
                  }
                }
              },
              "nullable": true,
              "metadata": {
                "description": "Optional. The security context of the container instance."
              }
            },
            "volumeMounts": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "metadata": {
                      "description": "Required. The name of the volume mount."
                    }
                  },
                  "mountPath": {
                    "type": "string",
                    "metadata": {
                      "description": "Required. The path within the container where the volume should be mounted. Must not contain colon (:)."
                    }
                  },
                  "readOnly": {
                    "type": "bool",
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. The flag indicating whether the volume mount is read-only."
                    }
                  }
                }
              },
              "nullable": true,
              "metadata": {
                "description": "Optional. The volume mounts within the container instance."
              }
            },
            "command": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "nullable": true,
              "metadata": {
                "description": "Optional. The command to execute within the container instance."
              }
            },
            "environmentVariables": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "metadata": {
                      "description": "Required. The name of the environment variable."
                    }
                  },
                  "secureValue": {
                    "type": "securestring",
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. The value of the secure environment variable."
                    }
                  },
                  "value": {
                    "type": "string",
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. The value of the environment variable."
                    }
                  }
                }
              },
              "nullable": true,
              "metadata": {
                "description": "Optional. The environment variables to set in the container instance."
              }
            }
          },
          "metadata": {
            "description": "Required. The properties of the container instance."
          }
        }
      },
      "metadata": {
        "__bicep_export!": true,
        "description": "The type for a container."
      }
    },
    "logAnalyticsType": {
      "type": "object",
      "properties": {
        "logType": {
          "type": "string",
          "allowedValues": [
            "ContainerInsights",
            "ContainerInstanceLogs"
          ],
          "metadata": {
            "description": "Required. The log type to be used."
          }
        },
        "workspaceResourceId": {
          "type": "string",
          "metadata": {
            "description": "Required. The workspace resource ID for log analytics."
          }
        },
        "metadata": {
          "type": "object",
          "metadata": {
            "__bicep_resource_derived_type!": {
              "source": "Microsoft.ContainerInstance/containerGroups@2023-05-01#properties/properties/properties/diagnostics/properties/logAnalytics/properties/metadata"
            },
            "description": "Optional. Metadata for log analytics."
          },
          "nullable": true
        }
      },
      "metadata": {
        "__bicep_export!": true,
        "description": "The type for log analytics diagnostics."
      }
    },
    "imageRegistryCredentialType": {
      "type": "object",
      "properties": {
        "server": {
          "type": "string",
          "metadata": {
            "description": "Required. The Docker image registry server without a protocol such as \"http\" and \"https\"."
          }
        },
        "identity": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "Optional. The identity for the private registry."
          }
        },
        "identityUrl": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "Optional. The identity URL for the private registry."
          }
        },
        "username": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "Optional. The username for the private registry."
          }
        },
        "password": {
          "type": "securestring",
          "nullable": true,
          "metadata": {
            "description": "Optional. The password for the private registry."
          }
        }
      },
      "metadata": {
        "__bicep_export!": true,
        "description": "The type for an image registry credential."
      }
    },
    "ipAddressPortsType": {
      "type": "object",
      "properties": {
        "port": {
          "type": "int",
          "metadata": {
            "description": "Required. The port number exposed on the container instance."
          }
        },
        "protocol": {
          "type": "string",
          "metadata": {
            "description": "Required. The protocol associated with the port number."
          }
        }
      },
      "metadata": {
        "__bicep_export!": true,
        "description": "The type for an IP address port."
      }
    },
    "ipAddressType": {
      "type": "object",
      "properties": {
        "autoGeneratedDomainNameLabelScope": {
          "type": "string",
          "allowedValues": [
            "Noreuse",
            "ResourceGroupReuse",
            "SubscriptionReuse",
            "TenantReuse",
            "Unsecure"
          ],
          "nullable": true,
          "metadata": {
            "description": "Optional. The value representing the security enum."
          }
        },
        "dnsNameLabel": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "Optional. The Dns name label for the IP."
          }
        },
        "ip": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "Optional. The IP exposed to the public internet."
          }
        },
        "ports": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ipAddressPortsType"
          },
          "metadata": {
            "description": "Required. The list of ports exposed on the container group."
          }
        },
        "type": {
          "type": "string",
          "allowedValues": [
            "Private",
            "Public"
          ],
          "nullable": true,
          "metadata": {
            "description": "Optional. Specifies if the IP is exposed to the public internet or private VNET."
          }
        }
      },
      "metadata": {
        "__bicep_export!": true,
        "description": "The type for an IP address."
      }
    },
    "containerGroupSubnetIdType": {
      "type": "object",
      "properties": {
        "subnetResourceId": {
          "type": "string",
          "metadata": {
            "description": "Required. Resource ID of virtual network and subnet."
          }
        },
        "name": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "Optional. Friendly name for the subnet."
          }
        }
      },
      "metadata": {
        "__bicep_export!": true,
        "description": "The type for a container group subnet."
      }
    },
    "dnsConfigType": {
      "type": "object",
      "properties": {
        "nameServers": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "metadata": {
            "description": "Required. \tThe DNS servers for the container group."
          }
        },
        "options": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "Optional. The DNS options for the container group."
          }
        },
        "searchDomains": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "Optional. The DNS search domains for hostname lookup in the container group."
          }
        }
      },
      "metadata": {
        "__bicep_export!": true,
        "description": "The type for a DNS configuration."
      }
    },
    "containerGpuType": {
      "type": "object",
      "properties": {
        "count": {
          "type": "int",
          "metadata": {
            "description": "Required. The count of the GPU resource."
          }
        },
        "sku": {
          "type": "string",
          "allowedValues": [
            "K80",
            "P100",
            "V100"
          ],
          "metadata": {
            "description": "Required. The SKU of the GPU resource."
          }
        }
      },
      "metadata": {
        "__bicep_export!": true,
        "description": "The type of a container GPU."
      }
    },
    "customerManagedKeyWithAutoRotateType": {
      "type": "object",
      "properties": {
        "keyVaultResourceId": {
          "type": "string",
          "metadata": {
            "description": "Required. The resource ID of a key vault to reference a customer managed key for encryption from."
          }
        },
        "keyName": {
          "type": "string",
          "metadata": {
            "description": "Required. The name of the customer managed key to use for encryption."
          }
        },
        "keyVersion": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "Optional. The version of the customer managed key to reference for encryption. If not provided, using version as per 'autoRotationEnabled' setting."
          }
        },
        "autoRotationEnabled": {
          "type": "bool",
          "nullable": true,
          "metadata": {
            "description": "Optional. Enable or disable auto-rotating to the latest key version. Default is `true`. If set to `false`, the latest key version at the time of the deployment is used."
          }
        },
        "userAssignedIdentityResourceId": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "Optional. User assigned identity to use when fetching the customer managed key. Required if no system assigned identity is available for use."
          }
        }
      },
      "metadata": {
        "description": "An AVM-aligned type for a customer-managed key. To be used if the resource type supports auto-rotation of the customer-managed key.",
        "__bicep_imported_from!": {
          "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.5.1"
        }
      }
    },
    "lockType": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "Optional. Specify the name of lock."
          }
        },
        "kind": {
          "type": "string",
          "allowedValues": [
            "CanNotDelete",
            "None",
            "ReadOnly"
          ],
          "nullable": true,
          "metadata": {
            "description": "Optional. Specify the type of lock."
          }
        }
      },
      "metadata": {
        "description": "An AVM-aligned type for a lock.",
        "__bicep_imported_from!": {
          "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.4.0"
        }
      }
    },
    "managedIdentityAllType": {
      "type": "object",
      "properties": {
        "systemAssigned": {
          "type": "bool",
          "nullable": true,
          "metadata": {
            "description": "Optional. Enables system assigned managed identity on the resource."
          }
        },
        "userAssignedResourceIds": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "nullable": true,
          "metadata": {
            "description": "Optional. The resource ID(s) to assign to the resource. Required if a user assigned identity is used for encryption."
          }
        }
      },
      "metadata": {
        "description": "An AVM-aligned type for a managed identity configuration. To be used if both a system-assigned & user-assigned identities are supported by the resource provider.",
        "__bicep_imported_from!": {
          "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.4.0"
        }
      }
    }
  },
  "parameters": {
    "name": {
      "type": "string",
      "metadata": {
        "description": "Required. Name for the container group."
      }
    },
    "containers": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/containerType"
      },
      "metadata": {
        "description": "Required. The containers and their respective config within the container group."
      }
    },
    "ipAddress": {
      "$ref": "#/definitions/ipAddressType",
      "nullable": true,
      "metadata": {
        "description": "Optional. The IP address type of the container group."
      }
    },
    "osType": {
      "type": "string",
      "defaultValue": "Linux",
      "metadata": {
        "description": "Optional. The operating system type required by the containers in the container group. - Windows or Linux."
      }
    },
    "restartPolicy": {
      "type": "string",
      "defaultValue": "Always",
      "allowedValues": [
        "Always",
        "OnFailure",
        "Never"
      ],
      "metadata": {
        "description": "Optional. Restart policy for all containers within the container group. - Always: Always restart. OnFailure: Restart on failure. Never: Never restart. - Always, OnFailure, Never."
      }
    },
    "imageRegistryCredentials": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/imageRegistryCredentialType"
      },
      "nullable": true,
      "metadata": {
        "description": "Optional. The image registry credentials by which the container group is created from."
      }
    },
    "location": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "Optional. Location for all Resources."
      }
    },
    "logAnalytics": {
      "$ref": "#/definitions/logAnalyticsType",
      "nullable": true,
      "metadata": {
        "description": "Optional. The log analytics diagnostic information for a container group."
      }
    },
    "dnsConfig": {
      "$ref": "#/definitions/dnsConfigType",
      "nullable": true,
      "metadata": {
        "description": "Optional. The DNS config information for a container group."
      }
    },
    "initContainers": {
      "type": "array",
      "metadata": {
        "__bicep_resource_derived_type!": {
          "source": "Microsoft.ContainerInstance/containerGroups@2023-05-01#properties/properties/properties/initContainers"
        },
        "description": "Optional. A list of container definitions which will be executed before the application container starts."
      },
      "nullable": true
    },
    "subnets": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/containerGroupSubnetIdType"
      },
      "nullable": true,
      "metadata": {
        "description": "Optional. The subnets to use by the container group."
      }
    },
    "volumes": {
      "type": "array",
      "metadata": {
        "__bicep_resource_derived_type!": {
          "source": "Microsoft.ContainerInstance/containerGroups@2023-05-01#properties/properties/properties/volumes"
        },
        "description": "Optional. Specify if volumes (emptyDir, AzureFileShare or GitRepo) shall be attached to your containergroup."
      },
      "nullable": true
    },
    "lock": {
      "$ref": "#/definitions/lockType",
      "nullable": true,
      "metadata": {
        "description": "Optional. The lock settings of the service."
      }
    },
    "managedIdentities": {
      "$ref": "#/definitions/managedIdentityAllType",
      "nullable": true,
      "metadata": {
        "description": "Optional. The managed identity definition for this resource."
      }
    },
    "tags": {
      "type": "object",
      "metadata": {
        "__bicep_resource_derived_type!": {
          "source": "Microsoft.ContainerInstance/containerGroups@2023-05-01#properties/tags"
        },
        "description": "Optional. Tags of the resource."
      },
      "nullable": true
    },
    "enableTelemetry": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Optional. Enable/Disable usage telemetry for module."
      }
    },
    "sku": {
      "type": "string",
      "defaultValue": "Standard",
      "allowedValues": [
        "Dedicated",
        "Standard"
      ],
      "metadata": {
        "description": "Optional. The container group SKU."
      }
    },
    "customerManagedKey": {
      "$ref": "#/definitions/customerManagedKeyWithAutoRotateType",
      "nullable": true,
      "metadata": {
        "description": "Optional. The customer managed key definition."
      }
    },
    "availabilityZone": {
      "type": "int",
      "allowedValues": [
        -1,
        1,
        2,
        3
      ],
      "metadata": {
        "description": "Required. If set to 1, 2 or 3, the availability zone is hardcoded to that value. If set to -1, no zone is defined. Note that the availability zone numbers here are the logical availability zone in your Azure subscription. Different subscriptions might have a different mapping of the physical zone and logical zone. To understand more, please refer to [Physical and logical availability zones](https://learn.microsoft.com/en-us/azure/reliability/availability-zones-overview?tabs=azure-cli#physical-and-logical-availability-zones)."
      }
    },
    "priority": {
      "type": "string",
      "allowedValues": [
        "Regular",
        "Spot"
      ],
      "defaultValue": "Regular",
      "metadata": {
        "description": "Optional. The priority of the container group."
      }
    }
  },
  "variables": {
    "formattedUserAssignedIdentities": "[reduce(map(coalesce(tryGet(parameters('managedIdentities'), 'userAssignedResourceIds'), createArray()), lambda('id', createObject(format('{0}', lambdaVariables('id')), createObject()))), createObject(), lambda('cur', 'next', union(lambdaVariables('cur'), lambdaVariables('next'))))]",
    "identity": "[if(not(empty(parameters('managedIdentities'))), createObject('type', if(coalesce(tryGet(parameters('managedIdentities'), 'systemAssigned'), false()), if(not(empty(coalesce(tryGet(parameters('managedIdentities'), 'userAssignedResourceIds'), createObject()))), 'SystemAssigned, UserAssigned', 'SystemAssigned'), if(not(empty(coalesce(tryGet(parameters('managedIdentities'), 'userAssignedResourceIds'), createObject()))), 'UserAssigned', 'None')), 'userAssignedIdentities', if(not(empty(variables('formattedUserAssignedIdentities'))), variables('formattedUserAssignedIdentities'), null())), null())]"
  },
  "resources": {
    "cMKKeyVault::cMKKey": {
      "condition": "[and(not(empty(tryGet(parameters('customerManagedKey'), 'keyVaultResourceId'))), and(not(empty(tryGet(parameters('customerManagedKey'), 'keyVaultResourceId'))), not(empty(tryGet(parameters('customerManagedKey'), 'keyName')))))]",
      "existing": true,
      "type": "Microsoft.KeyVault/vaults/keys",
      "apiVersion": "2024-11-01",
      "subscriptionId": "[split(tryGet(parameters('customerManagedKey'), 'keyVaultResourceId'), '/')[2]]",
      "resourceGroup": "[split(tryGet(parameters('customerManagedKey'), 'keyVaultResourceId'), '/')[4]]",
      "name": "[format('{0}/{1}', last(split(tryGet(parameters('customerManagedKey'), 'keyVaultResourceId'), '/')), tryGet(parameters('customerManagedKey'), 'keyName'))]"
    },
    "law": {
      "condition": "[not(empty(parameters('logAnalytics')))]",
      "existing": true,
      "type": "Microsoft.OperationalInsights/workspaces",
      "apiVersion": "2025-02-01",
      "subscriptionId": "[split(parameters('logAnalytics').workspaceResourceId, '/')[2]]",
      "resourceGroup": "[split(parameters('logAnalytics').workspaceResourceId, '/')[4]]",
      "name": "[last(split(parameters('logAnalytics').workspaceResourceId, '/'))]"
    },
    "avmTelemetry": {
      "condition": "[parameters('enableTelemetry')]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2024-03-01",
      "name": "[format('46d3xbcp.res.containerinstance-containergroup.{0}.{1}', replace('-..--..-', '.', '-'), substring(uniqueString(deployment().name, parameters('location')), 0, 4))]",
      "properties": {
        "mode": "Incremental",
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "resources": [],
          "outputs": {
            "telemetry": {
              "type": "String",
              "value": "For more information, see https://aka.ms/avm/TelemetryInfo"
            }
          }
        }
      }
    },
    "cMKKeyVault": {
      "condition": "[not(empty(tryGet(parameters('customerManagedKey'), 'keyVaultResourceId')))]",
      "existing": true,
      "type": "Microsoft.KeyVault/vaults",
      "apiVersion": "2024-11-01",
      "subscriptionId": "[split(tryGet(parameters('customerManagedKey'), 'keyVaultResourceId'), '/')[2]]",
      "resourceGroup": "[split(tryGet(parameters('customerManagedKey'), 'keyVaultResourceId'), '/')[4]]",
      "name": "[last(split(tryGet(parameters('customerManagedKey'), 'keyVaultResourceId'), '/'))]"
    },
    "cMKUserAssignedIdentity": {
      "condition": "[not(empty(tryGet(parameters('customerManagedKey'), 'userAssignedIdentityResourceId')))]",
      "existing": true,
      "type": "Microsoft.ManagedIdentity/userAssignedIdentities",
      "apiVersion": "2024-11-30",
      "subscriptionId": "[split(tryGet(parameters('customerManagedKey'), 'userAssignedIdentityResourceId'), '/')[2]]",
      "resourceGroup": "[split(tryGet(parameters('customerManagedKey'), 'userAssignedIdentityResourceId'), '/')[4]]",
      "name": "[last(split(tryGet(parameters('customerManagedKey'), 'userAssignedIdentityResourceId'), '/'))]"
    },
    "containergroup": {
      "type": "Microsoft.ContainerInstance/containerGroups",
      "apiVersion": "2023-05-01",
      "name": "[parameters('name')]",
      "location": "[parameters('location')]",
      "identity": "[variables('identity')]",
      "tags": "[parameters('tags')]",
      "zones": "[if(not(equals(parameters('availabilityZone'), -1)), array(string(parameters('availabilityZone'))), null())]",
      "properties": {
        "copy": [
          {
            "name": "containers",
            "count": "[length(parameters('containers'))]",
            "input": {
              "name": "[parameters('containers')[copyIndex('containers')].name]",
              "properties": {
                "command": "[tryGet(parameters('containers')[copyIndex('containers')].properties, 'command')]",
                "environmentVariables": "[tryGet(parameters('containers')[copyIndex('containers')].properties, 'environmentVariables')]",
                "image": "[tryGet(parameters('containers')[copyIndex('containers')].properties, 'image')]",
                "livenessProbe": "[tryGet(parameters('containers')[copyIndex('containers')].properties, 'livenessProbe')]",
                "ports": "[tryGet(parameters('containers')[copyIndex('containers')].properties, 'ports')]",
                "readinessProbe": "[tryGet(parameters('containers')[copyIndex('containers')].properties, 'readinessProbe')]",
                "resources": {
                  "requests": {
                    "cpu": "[parameters('containers')[copyIndex('containers')].properties.resources.requests.cpu]",
                    "gpu": "[tryGet(parameters('containers')[copyIndex('containers')].properties.resources.requests, 'gpu')]",
                    "memoryInGB": "[json(tryGet(parameters('containers')[copyIndex('containers')].properties.resources.requests, 'memoryInGB'))]"
                  },
                  "limits": "[if(not(empty(tryGet(parameters('containers')[copyIndex('containers')].properties.resources, 'limits'))), createObject('cpu', tryGet(tryGet(parameters('containers')[copyIndex('containers')].properties.resources, 'limits'), 'cpu'), 'gpu', tryGet(tryGet(parameters('containers')[copyIndex('containers')].properties.resources, 'limits'), 'gpu'), 'memoryInGB', if(not(empty(tryGet(tryGet(parameters('containers')[copyIndex('containers')].properties.resources, 'limits'), 'memoryInGB'))), json(tryGet(tryGet(parameters('containers')[copyIndex('containers')].properties.resources, 'limits'), 'memoryInGB')), null())), null())]"
                },
                "securityContext": "[tryGet(parameters('containers')[copyIndex('containers')].properties, 'securityContext')]",
                "volumeMounts": "[tryGet(parameters('containers')[copyIndex('containers')].properties, 'volumeMounts')]"
              }
            }
          },
          {
            "name": "subnetIds",
            "count": "[length(coalesce(parameters('subnets'), createArray()))]",
            "input": {
              "id": "[coalesce(parameters('subnets'), createArray())[copyIndex('subnetIds')].subnetResourceId]",
              "name": "[tryGet(coalesce(parameters('subnets'), createArray())[copyIndex('subnetIds')], 'name')]"
            }
          }
        ],
        "diagnostics": "[if(not(empty(parameters('logAnalytics'))), createObject('logAnalytics', createObject('logType', parameters('logAnalytics').logType, 'workspaceId', reference('law').customerId, 'workspaceKey', listKeys('law', '2025-02-01').primarySharedKey, 'workspaceResourceId', tryGet(parameters('logAnalytics'), 'workspaceResourceId'), 'metadata', tryGet(parameters('logAnalytics'), 'metadata'))), null())]",
        "encryptionProperties": "[if(not(empty(parameters('customerManagedKey'))), createObject('identity', if(not(empty(tryGet(parameters('customerManagedKey'), 'userAssignedIdentityResourceId'))), extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(tryGet(parameters('customerManagedKey'), 'userAssignedIdentityResourceId'), '/')[2], split(tryGet(parameters('customerManagedKey'), 'userAssignedIdentityResourceId'), '/')[4]), 'Microsoft.ManagedIdentity/userAssignedIdentities', last(split(tryGet(parameters('customerManagedKey'), 'userAssignedIdentityResourceId'), '/'))), null()), 'vaultBaseUrl', reference('cMKKeyVault').vaultUri, 'keyName', parameters('customerManagedKey').keyName, 'keyVersion', if(not(empty(coalesce(tryGet(parameters('customerManagedKey'), 'keyVersion'), ''))), parameters('customerManagedKey').keyVersion, last(split(reference('cMKKeyVault::cMKKey').keyUriWithVersion, '/')))), null())]",
        "imageRegistryCredentials": "[parameters('imageRegistryCredentials')]",
        "initContainers": "[parameters('initContainers')]",
        "restartPolicy": "[parameters('restartPolicy')]",
        "osType": "[parameters('osType')]",
        "ipAddress": "[if(not(empty(parameters('ipAddress'))), createObject('autoGeneratedDomainNameLabelScope', if(not(empty(tryGet(parameters('dnsConfig'), 'nameServers'))), tryGet(parameters('ipAddress'), 'autoGeneratedDomainNameLabelScope'), null()), 'dnsNameLabel', tryGet(parameters('ipAddress'), 'dnsNameLabel'), 'ip', tryGet(parameters('ipAddress'), 'ip'), 'ports', coalesce(tryGet(parameters('ipAddress'), 'ports'), createArray()), 'type', coalesce(tryGet(parameters('ipAddress'), 'type'), 'Public')), null())]",
        "sku": "[parameters('sku')]",
        "volumes": "[parameters('volumes')]",
        "dnsConfig": "[parameters('dnsConfig')]",
        "priority": "[parameters('priority')]"
      },
      "dependsOn": [
        "cMKKeyVault",
        "cMKKeyVault::cMKKey",
        "law"
      ]
    },
    "containergroup_lock": {
      "condition": "[and(not(empty(coalesce(parameters('lock'), createObject()))), not(equals(tryGet(parameters('lock'), 'kind'), 'None')))]",
      "type": "Microsoft.Authorization/locks",
      "apiVersion": "2020-05-01",
      "scope": "[format('Microsoft.ContainerInstance/containerGroups/{0}', parameters('name'))]",
      "name": "[coalesce(tryGet(parameters('lock'), 'name'), format('lock-{0}', parameters('name')))]",
      "properties": {
        "level": "[coalesce(tryGet(parameters('lock'), 'kind'), '')]",
        "notes": "[if(equals(tryGet(parameters('lock'), 'kind'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot delete or modify the resource or child resources.')]"
      },
      "dependsOn": [
        "containergroup"
      ]
    }
  },
  "outputs": {
    "name": {
      "type": "string",
      "metadata": {
        "description": "The name of the container group."
      },
      "value": "[parameters('name')]"
    },
    "resourceId": {
      "type": "string",
      "metadata": {
        "description": "The resource ID of the container group."
      },
      "value": "[resourceId('Microsoft.ContainerInstance/containerGroups', parameters('name'))]"
    },
    "resourceGroupName": {
      "type": "string",
      "metadata": {
        "description": "The resource group the container group was deployed into."
      },
      "value": "[resourceGroup().name]"
    },
    "iPv4Address": {
      "type": "string",
      "metadata": {
        "description": "The IPv4 address of the container group."
      },
      "value": "[reference('containergroup').ipAddress.ip]"
    },
    "systemAssignedMIPrincipalId": {
      "type": "string",
      "nullable": true,
      "metadata": {
        "description": "The principal ID of the system assigned identity."
      },
      "value": "[tryGet(tryGet(reference('containergroup', '2023-05-01', 'full'), 'identity'), 'principalId')]"
    },
    "location": {
      "type": "string",
      "metadata": {
        "description": "The location the resource was deployed into."
      },
      "value": "[reference('containergroup', '2023-05-01', 'full').location]"
    }
  }
}