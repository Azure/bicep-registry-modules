{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "languageVersion": "2.0",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "_generator": {
      "name": "bicep",
      "version": "0.31.92.45157",
      "templateHash": "16337037731346424792"
    },
    "name": "DevTest Labs",
    "description": "This module deploys a DevTest Lab.",
    "owner": "Azure/module-maintainers"
  },
  "definitions": {
    "managedIdentitiesType": {
      "type": "object",
      "properties": {
        "userAssignedResourceIds": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "metadata": {
            "description": "Optional. The resource ID(s) to assign to the resource. Currently, a single user-assigned identity is supported per lab."
          }
        }
      },
      "nullable": true
    },
    "artifactsourcesType": {
      "type": "array",
      "items": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "metadata": {
              "description": "Required. The name of the artifact source."
            }
          },
          "tags": {
            "type": "object",
            "nullable": true,
            "metadata": {
              "description": "Optional. The tags of the artifact source."
            }
          },
          "displayName": {
            "type": "string",
            "nullable": true,
            "metadata": {
              "description": "Optional. The display name of the artifact source. Default is the name of the artifact source."
            }
          },
          "branchRef": {
            "type": "string",
            "nullable": true,
            "metadata": {
              "description": "Optional. The artifact source's branch reference (e.g. main or master)."
            }
          },
          "folderPath": {
            "type": "string",
            "nullable": true,
            "metadata": {
              "description": "Conditional. The folder containing artifacts. At least one folder path is required. Required if \"armTemplateFolderPath\" is empty."
            }
          },
          "armTemplateFolderPath": {
            "type": "string",
            "nullable": true,
            "metadata": {
              "description": "Conditional. The folder containing Azure Resource Manager templates. Required if \"folderPath\" is empty."
            }
          },
          "sourceType": {
            "type": "string",
            "allowedValues": [
              "GitHub",
              "StorageAccount",
              "VsoGit"
            ],
            "nullable": true,
            "metadata": {
              "description": "Optional. The artifact source's type."
            }
          },
          "status": {
            "type": "string",
            "allowedValues": [
              "Disabled",
              "Enabled"
            ],
            "nullable": true,
            "metadata": {
              "description": "Optional. Indicates if the artifact source is enabled (values: Enabled, Disabled). Default is \"Enabled\"."
            }
          },
          "uri": {
            "type": "string",
            "metadata": {
              "description": "Required. The artifact source's URI."
            }
          },
          "securityToken": {
            "type": "securestring",
            "nullable": true,
            "metadata": {
              "description": "Optional. The security token to authenticate to the artifact source. Private artifacts use the system-identity of the lab to store the security token for the artifact source in the lab's managed Azure Key Vault. Access to the Azure Key Vault is granted automatically only when the lab is created with a system-assigned identity."
            }
          }
        }
      },
      "nullable": true
    },
    "virtualNetworkType": {
      "type": "array",
      "items": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "metadata": {
              "description": "Required. The name of the virtual network."
            }
          },
          "tags": {
            "type": "object",
            "nullable": true,
            "metadata": {
              "description": "Optional. The tags of the virtual network."
            }
          },
          "externalProviderResourceId": {
            "type": "string",
            "metadata": {
              "description": "Required. The external provider resource ID of the virtual network."
            }
          },
          "description": {
            "type": "string",
            "nullable": true,
            "metadata": {
              "description": "Optional. The description of the virtual network."
            }
          },
          "allowedSubnets": {
            "$ref": "#/definitions/allowedSubnetType",
            "nullable": true,
            "metadata": {
              "description": "Optional. The allowed subnets of the virtual network."
            }
          },
          "subnetOverrides": {
            "$ref": "#/definitions/subnetOverrideType",
            "nullable": true,
            "metadata": {
              "description": "Optional. The subnet overrides of the virtual network."
            }
          }
        }
      },
      "nullable": true
    },
    "costsType": {
      "type": "object",
      "properties": {
        "tags": {
          "type": "object",
          "nullable": true,
          "metadata": {
            "description": "Optional. The tags of the resource."
          }
        },
        "cycleType": {
          "type": "string",
          "allowedValues": [
            "CalendarMonth",
            "Custom"
          ],
          "metadata": {
            "description": "Required. Reporting cycle type."
          }
        },
        "cycleStartDateTime": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "Conditional. Reporting cycle start date in the zulu time format (e.g. 2023-12-01T00:00:00.000Z). Required if cycleType is set to \"Custom\"."
          }
        },
        "cycleEndDateTime": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "Conditional. Reporting cycle end date in the zulu time format (e.g. 2023-12-01T00:00:00.000Z). Required if cycleType is set to \"Custom\"."
          }
        },
        "status": {
          "type": "string",
          "allowedValues": [
            "Disabled",
            "Enabled"
          ],
          "nullable": true,
          "metadata": {
            "description": "Optional. Target cost status."
          }
        },
        "target": {
          "type": "int",
          "nullable": true,
          "metadata": {
            "description": "Optional. Lab target cost (e.g. 100). The target cost will appear in the \"Cost trend\" chart to allow tracking lab spending relative to the target cost for the current reporting cycleSetting the target cost to 0 will disable all thresholds."
          }
        },
        "currencyCode": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "Optional. The currency code of the cost. Default is \"USD\"."
          }
        },
        "thresholdValue25DisplayOnChart": {
          "type": "string",
          "allowedValues": [
            "Disabled",
            "Enabled"
          ],
          "nullable": true,
          "metadata": {
            "description": "Optional. Target Cost threshold at 25% display on chart. Indicates whether this threshold will be displayed on cost charts."
          }
        },
        "thresholdValue25SendNotificationWhenExceeded": {
          "type": "string",
          "allowedValues": [
            "Disabled",
            "Enabled"
          ],
          "nullable": true,
          "metadata": {
            "description": "Optional. Target cost threshold at 25% send notification when exceeded. Indicates whether notifications will be sent when this threshold is exceeded."
          }
        },
        "thresholdValue50DisplayOnChart": {
          "type": "string",
          "allowedValues": [
            "Disabled",
            "Enabled"
          ],
          "nullable": true,
          "metadata": {
            "description": "Optional. Target Cost threshold at 50% display on chart. Indicates whether this threshold will be displayed on cost charts."
          }
        },
        "thresholdValue50SendNotificationWhenExceeded": {
          "type": "string",
          "allowedValues": [
            "Disabled",
            "Enabled"
          ],
          "nullable": true,
          "metadata": {
            "description": "Optional. Target cost threshold at 50% send notification when exceeded. Indicates whether notifications will be sent when this threshold is exceeded."
          }
        },
        "thresholdValue75DisplayOnChart": {
          "type": "string",
          "allowedValues": [
            "Disabled",
            "Enabled"
          ],
          "nullable": true,
          "metadata": {
            "description": "Optional. Target Cost threshold at 75% display on chart. Indicates whether this threshold will be displayed on cost charts."
          }
        },
        "thresholdValue75SendNotificationWhenExceeded": {
          "type": "string",
          "allowedValues": [
            "Disabled",
            "Enabled"
          ],
          "nullable": true,
          "metadata": {
            "description": "Optional. Target cost threshold at 75% send notification when exceeded. Indicates whether notifications will be sent when this threshold is exceeded."
          }
        },
        "thresholdValue100DisplayOnChart": {
          "type": "string",
          "allowedValues": [
            "Disabled",
            "Enabled"
          ],
          "nullable": true,
          "metadata": {
            "description": "Optional. Target Cost threshold at 100% display on chart. Indicates whether this threshold will be displayed on cost charts."
          }
        },
        "thresholdValue100SendNotificationWhenExceeded": {
          "type": "string",
          "allowedValues": [
            "Disabled",
            "Enabled"
          ],
          "nullable": true,
          "metadata": {
            "description": "Optional. Target cost threshold at 100% send notification when exceeded. Indicates whether notifications will be sent when this threshold is exceeded."
          }
        },
        "thresholdValue125DisplayOnChart": {
          "type": "string",
          "allowedValues": [
            "Disabled",
            "Enabled"
          ],
          "nullable": true,
          "metadata": {
            "description": "Optional. Target Cost threshold at 125% display on chart. Indicates whether this threshold will be displayed on cost charts."
          }
        },
        "thresholdValue125SendNotificationWhenExceeded": {
          "type": "string",
          "allowedValues": [
            "Disabled",
            "Enabled"
          ],
          "nullable": true,
          "metadata": {
            "description": "Optional. Target cost threshold at 125% send notification when exceeded. Indicates whether notifications will be sent when this threshold is exceeded."
          }
        }
      },
      "nullable": true
    },
    "notificationChannelType": {
      "type": "array",
      "items": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "allowedValues": [
              "autoShutdown",
              "costThreshold"
            ],
            "metadata": {
              "description": "Required. The name of the notification channel."
            }
          },
          "tags": {
            "type": "object",
            "nullable": true,
            "metadata": {
              "description": "Optional. The tags of the notification channel."
            }
          },
          "description": {
            "type": "string",
            "nullable": true,
            "metadata": {
              "description": "Optional. The description of the notification."
            }
          },
          "events": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "metadata": {
              "description": "Required. The list of event for which this notification is enabled. Can be \"AutoShutdown\" or \"Cost\"."
            }
          },
          "emailRecipient": {
            "type": "string",
            "nullable": true,
            "metadata": {
              "description": "Conditional. The email recipient to send notifications to (can be a list of semi-colon separated email addresses). Required if \"webHookUrl\" is empty."
            }
          },
          "webHookUrl": {
            "type": "string",
            "nullable": true,
            "metadata": {
              "description": "Conditional. The webhook URL to which the notification will be sent. Required if \"emailRecipient\" is empty."
            }
          },
          "notificationLocale": {
            "type": "string",
            "nullable": true,
            "metadata": {
              "description": "Optional. The locale to use when sending a notification (fallback for unsupported languages is EN)."
            }
          }
        }
      },
      "nullable": true
    },
    "policiesType": {
      "type": "array",
      "items": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "metadata": {
              "description": "Required. The name of the policy."
            }
          },
          "description": {
            "type": "string",
            "nullable": true,
            "metadata": {
              "description": "Optional. The description of the policy."
            }
          },
          "evaluatorType": {
            "type": "string",
            "allowedValues": [
              "AllowedValuesPolicy",
              "MaxValuePolicy"
            ],
            "metadata": {
              "description": "Required. The evaluator type of the policy (i.e. AllowedValuesPolicy, MaxValuePolicy)."
            }
          },
          "factData": {
            "type": "string",
            "nullable": true,
            "metadata": {
              "description": "Optional. The fact data of the policy."
            }
          },
          "factName": {
            "type": "string",
            "allowedValues": [
              "EnvironmentTemplate",
              "GalleryImage",
              "LabPremiumVmCount",
              "LabTargetCost",
              "LabVmCount",
              "LabVmSize",
              "ScheduleEditPermission",
              "UserOwnedLabPremiumVmCount",
              "UserOwnedLabVmCount",
              "UserOwnedLabVmCountInSubnet"
            ],
            "metadata": {
              "description": "Required. The fact name of the policy."
            }
          },
          "status": {
            "type": "string",
            "allowedValues": [
              "Disabled",
              "Enabled"
            ],
            "nullable": true,
            "metadata": {
              "description": "Optional. The status of the policy. Default is \"Enabled\"."
            }
          },
          "threshold": {
            "type": "string",
            "metadata": {
              "description": "Required. The threshold of the policy (i.e. a number for MaxValuePolicy, and a JSON array of values for AllowedValuesPolicy)."
            }
          }
        }
      },
      "nullable": true
    },
    "scheduleType": {
      "type": "array",
      "items": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "allowedValues": [
              "LabVmAutoStart",
              "LabVmsShutdown"
            ],
            "metadata": {
              "description": "Required. The name of the schedule."
            }
          },
          "tags": {
            "type": "object",
            "nullable": true,
            "metadata": {
              "description": "Optional. The tags of the schedule."
            }
          },
          "taskType": {
            "type": "string",
            "allowedValues": [
              "LabVmsShutdownTask",
              "LabVmsStartupTask"
            ],
            "metadata": {
              "description": "Required. The task type of the schedule (e.g. LabVmsShutdownTask, LabVmsStartupTask)."
            }
          },
          "dailyRecurrence": {
            "$ref": "#/definitions/dailyRecurrenceType",
            "nullable": true,
            "metadata": {
              "description": "Optional. The daily recurrence of the schedule."
            }
          },
          "hourlyRecurrence": {
            "$ref": "#/definitions/hourlyRecurrenceType",
            "nullable": true,
            "metadata": {
              "description": "Optional. If the schedule will occur multiple times a day, specify the hourly recurrence."
            }
          },
          "weeklyRecurrence": {
            "$ref": "#/definitions/weeklyRecurrenceType",
            "nullable": true,
            "metadata": {
              "description": "Optional. If the schedule will occur only some days of the week, specify the weekly recurrence."
            }
          },
          "status": {
            "type": "string",
            "allowedValues": [
              "Disabled",
              "Enabled"
            ],
            "nullable": true,
            "metadata": {
              "description": "Optional. The status of the schedule (i.e. Enabled, Disabled). Default is \"Enabled\"."
            }
          },
          "targetResourceId": {
            "type": "string",
            "nullable": true,
            "metadata": {
              "description": "Optional. The resource ID to which the schedule belongs."
            }
          },
          "timeZoneId": {
            "type": "string",
            "nullable": true,
            "metadata": {
              "description": "Optional. The time zone ID of the schedule. Defaults to \"Pacific Standard time\"."
            }
          },
          "notificationSettings": {
            "$ref": "#/definitions/notificationSettingsType",
            "nullable": true,
            "metadata": {
              "description": "Optional. The notification settings for the schedule."
            }
          }
        }
      },
      "nullable": true
    },
    "allowedSubnetType": {
      "type": "array",
      "items": {
        "type": "object",
        "properties": {
          "allowPublicIp": {
            "type": "string",
            "allowedValues": [
              "Allow",
              "Default",
              "Deny"
            ],
            "nullable": true,
            "metadata": {
              "description": "Optional. The permission policy of the subnet for allowing public IP addresses (i.e. Allow, Deny))."
            }
          },
          "resourceId": {
            "type": "string",
            "metadata": {
              "description": "Required. The resource ID of the allowed subnet."
            }
          },
          "labSubnetName": {
            "type": "string",
            "metadata": {
              "description": "Required. The name of the subnet as seen in the lab."
            }
          }
        }
      },
      "nullable": true,
      "metadata": {
        "__bicep_imported_from!": {
          "sourceTemplate": "virtualnetwork/main.bicep"
        }
      }
    },
    "dailyRecurrenceType": {
      "type": "object",
      "properties": {
        "time": {
          "type": "string",
          "metadata": {
            "description": "Required. The time of day the schedule will occur."
          }
        }
      },
      "nullable": true,
      "metadata": {
        "__bicep_imported_from!": {
          "sourceTemplate": "schedule/main.bicep"
        }
      }
    },
    "hourlyRecurrenceType": {
      "type": "object",
      "properties": {
        "minute": {
          "type": "int",
          "metadata": {
            "description": "Required. Minutes of the hour the schedule will run."
          }
        }
      },
      "nullable": true,
      "metadata": {
        "__bicep_imported_from!": {
          "sourceTemplate": "schedule/main.bicep"
        }
      }
    },
    "lockType": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "Optional. Specify the name of lock."
          }
        },
        "kind": {
          "type": "string",
          "allowedValues": [
            "CanNotDelete",
            "None",
            "ReadOnly"
          ],
          "nullable": true,
          "metadata": {
            "description": "Optional. Specify the type of lock."
          }
        }
      },
      "metadata": {
        "description": "An AVM-aligned type for a lock.",
        "__bicep_imported_from!": {
          "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.4.0"
        }
      }
    },
    "managedIdentityOnlyUserAssignedType": {
      "type": "object",
      "properties": {
        "userAssignedResourceIds": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "nullable": true,
          "metadata": {
            "description": "Optional. The resource ID(s) to assign to the resource. Required if a user assigned identity is used for encryption."
          }
        }
      },
      "metadata": {
        "description": "An AVM-aligned type for a managed identity configuration. To be used if only user-assigned identities are supported by the resource provider.",
        "__bicep_imported_from!": {
          "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.4.0"
        }
      }
    },
    "notificationSettingsType": {
      "type": "object",
      "properties": {
        "emailRecipient": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "Conditional. The email recipient to send notifications to (can be a list of semi-colon separated email addresses). Required if \"webHookUrl\" is empty."
          }
        },
        "notificationLocale": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "Optional. The locale to use when sending a notification (fallback for unsupported languages is EN)."
          }
        },
        "status": {
          "type": "string",
          "allowedValues": [
            "Disabled",
            "Enabled"
          ],
          "nullable": true,
          "metadata": {
            "description": "Optional. If notifications are enabled for this schedule (i.e. Enabled, Disabled). Default is Disabled."
          }
        },
        "timeInMinutes": {
          "type": "int",
          "nullable": true,
          "metadata": {
            "description": "Optional. Time in minutes before event at which notification will be sent. Default is 30 minutes if status is Enabled and not specified."
          }
        },
        "webHookUrl": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "Conditional. The webhook URL to which the notification will be sent. Required if \"emailRecipient\" is empty."
          }
        }
      },
      "nullable": true,
      "metadata": {
        "__bicep_imported_from!": {
          "sourceTemplate": "schedule/main.bicep"
        }
      }
    },
    "roleAssignmentType": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "Optional. The name (as GUID) of the role assignment. If not provided, a GUID will be generated."
          }
        },
        "roleDefinitionIdOrName": {
          "type": "string",
          "metadata": {
            "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
          }
        },
        "principalId": {
          "type": "string",
          "metadata": {
            "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
          }
        },
        "principalType": {
          "type": "string",
          "allowedValues": [
            "Device",
            "ForeignGroup",
            "Group",
            "ServicePrincipal",
            "User"
          ],
          "nullable": true,
          "metadata": {
            "description": "Optional. The principal type of the assigned principal ID."
          }
        },
        "description": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "Optional. The description of the role assignment."
          }
        },
        "condition": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
          }
        },
        "conditionVersion": {
          "type": "string",
          "allowedValues": [
            "2.0"
          ],
          "nullable": true,
          "metadata": {
            "description": "Optional. Version of the condition."
          }
        },
        "delegatedManagedIdentityResourceId": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "Optional. The Resource Id of the delegated managed identity resource."
          }
        }
      },
      "metadata": {
        "description": "An AVM-aligned type for a role assignment.",
        "__bicep_imported_from!": {
          "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.4.0"
        }
      }
    },
    "subnetOverrideType": {
      "type": "array",
      "items": {
        "type": "object",
        "properties": {
          "labSubnetName": {
            "type": "string",
            "metadata": {
              "description": "Required. The name given to the subnet within the lab."
            }
          },
          "resourceId": {
            "type": "string",
            "metadata": {
              "description": "Required. The resource ID of the subnet."
            }
          },
          "sharedPublicIpAddressConfiguration": {
            "type": "object",
            "properties": {
              "allowedPorts": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "backendPort": {
                      "type": "int",
                      "metadata": {
                        "description": "Required. Backend port of the target virtual machine."
                      }
                    },
                    "transportProtocol": {
                      "type": "string",
                      "allowedValues": [
                        "Tcp",
                        "Udp"
                      ],
                      "metadata": {
                        "description": "Required. Protocol type of the port."
                      }
                    }
                  }
                },
                "metadata": {
                  "description": "Required. Backend ports that virtual machines on this subnet are allowed to expose."
                }
              }
            },
            "nullable": true,
            "metadata": {
              "description": "Optional. The permission policy of the subnet for allowing public IP addresses (i.e. Allow, Deny))."
            }
          },
          "useInVmCreationPermission": {
            "type": "string",
            "allowedValues": [
              "Allow",
              "Default",
              "Deny"
            ],
            "nullable": true,
            "metadata": {
              "description": "Optional. Indicates whether this subnet can be used during virtual machine creation (i.e. Allow, Deny)."
            }
          },
          "usePublicIpAddressPermission": {
            "type": "string",
            "allowedValues": [
              "Allow",
              "Default",
              "Deny"
            ],
            "nullable": true,
            "metadata": {
              "description": "Optional. Indicates whether public IP addresses can be assigned to virtual machines on this subnet (i.e. Allow, Deny)."
            }
          },
          "virtualNetworkPoolName": {
            "type": "string",
            "nullable": true,
            "metadata": {
              "description": "Optional. The virtual network pool associated with this subnet."
            }
          }
        }
      },
      "nullable": true,
      "metadata": {
        "__bicep_imported_from!": {
          "sourceTemplate": "virtualnetwork/main.bicep"
        }
      }
    },
    "weeklyRecurrenceType": {
      "type": "object",
      "properties": {
        "time": {
          "type": "string",
          "metadata": {
            "description": "Required. The time of day the schedule will occur."
          }
        },
        "weekdays": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "metadata": {
            "description": "Required. The days of the week for which the schedule is set (e.g. Sunday, Monday, Tuesday, etc.)."
          }
        }
      },
      "nullable": true,
      "metadata": {
        "__bicep_imported_from!": {
          "sourceTemplate": "schedule/main.bicep"
        }
      }
    }
  },
  "parameters": {
    "name": {
      "type": "string",
      "metadata": {
        "description": "Required. The name of the lab."
      }
    },
    "location": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "Optional. Location for all Resources."
      }
    },
    "lock": {
      "$ref": "#/definitions/lockType",
      "nullable": true,
      "metadata": {
        "description": "Optional. The lock settings of the service."
      }
    },
    "roleAssignments": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/roleAssignmentType"
      },
      "nullable": true,
      "metadata": {
        "description": "Optional. Array of role assignments to create."
      }
    },
    "tags": {
      "type": "object",
      "nullable": true,
      "metadata": {
        "description": "Optional. Tags of the resource."
      }
    },
    "announcement": {
      "type": "object",
      "defaultValue": {},
      "metadata": {
        "description": "Optional. The properties of any lab announcement associated with this lab."
      }
    },
    "environmentPermission": {
      "type": "string",
      "defaultValue": "Reader",
      "allowedValues": [
        "Contributor",
        "Reader"
      ],
      "metadata": {
        "description": "Optional. The access rights to be granted to the user when provisioning an environment."
      }
    },
    "extendedProperties": {
      "type": "object",
      "defaultValue": {},
      "metadata": {
        "description": "Optional. Extended properties of the lab used for experimental features."
      }
    },
    "labStorageType": {
      "type": "string",
      "defaultValue": "Premium",
      "allowedValues": [
        "Standard",
        "StandardSSD",
        "Premium"
      ],
      "metadata": {
        "description": "Optional. Type of storage used by the lab. It can be either Premium or Standard."
      }
    },
    "artifactsStorageAccount": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Optional. The resource ID of the storage account used to store artifacts and images by the lab. Also used for defaultStorageAccount, defaultPremiumStorageAccount and premiumDataDiskStorageAccount properties. If left empty, a default storage account will be created by the lab and used."
      }
    },
    "mandatoryArtifactsResourceIdsLinux": {
      "type": "array",
      "defaultValue": [],
      "metadata": {
        "description": "Optional. The ordered list of artifact resource IDs that should be applied on all Linux VM creations by default, prior to the artifacts specified by the user."
      }
    },
    "mandatoryArtifactsResourceIdsWindows": {
      "type": "array",
      "defaultValue": [],
      "metadata": {
        "description": "Optional. The ordered list of artifact resource IDs that should be applied on all Windows VM creations by default, prior to the artifacts specified by the user."
      }
    },
    "premiumDataDisks": {
      "type": "string",
      "defaultValue": "Disabled",
      "allowedValues": [
        "Enabled",
        "Disabled"
      ],
      "metadata": {
        "description": "Optional. The setting to enable usage of premium data disks. When its value is \"Enabled\", creation of standard or premium data disks is allowed. When its value is \"Disabled\", only creation of standard data disks is allowed. Default is \"Disabled\"."
      }
    },
    "support": {
      "type": "object",
      "defaultValue": {},
      "metadata": {
        "description": "Optional. The properties of any lab support message associated with this lab."
      }
    },
    "managedIdentities": {
      "$ref": "#/definitions/managedIdentityOnlyUserAssignedType",
      "nullable": true,
      "metadata": {
        "description": "Optional. The managed identity definition for this resource. For new labs created after 8/10/2020, the lab's system assigned identity is set to On by default and lab owner will not be able to turn this off for the lifecycle of the lab."
      }
    },
    "managementIdentitiesResourceIds": {
      "type": "array",
      "items": {
        "type": "string"
      },
      "defaultValue": [],
      "metadata": {
        "description": "Optional. The resource ID(s) to assign to the virtual machines associated with this lab."
      }
    },
    "vmCreationResourceGroupId": {
      "type": "string",
      "defaultValue": "[resourceGroup().id]",
      "metadata": {
        "description": "Optional. Resource Group allocation for virtual machines. If left empty, virtual machines will be deployed in their own Resource Groups. Default is the same Resource Group for DevTest Lab."
      }
    },
    "browserConnect": {
      "type": "string",
      "defaultValue": "Disabled",
      "allowedValues": [
        "Enabled",
        "Disabled"
      ],
      "metadata": {
        "description": "Optional. Enable browser connect on virtual machines if the lab's VNETs have configured Azure Bastion."
      }
    },
    "disableAutoUpgradeCseMinorVersion": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Optional. Disable auto upgrade custom script extension minor version."
      }
    },
    "isolateLabResources": {
      "type": "string",
      "defaultValue": "Enabled",
      "allowedValues": [
        "Enabled",
        "Disabled"
      ],
      "metadata": {
        "description": "Optional. Enable lab resources isolation from the public internet."
      }
    },
    "encryptionType": {
      "type": "string",
      "defaultValue": "EncryptionAtRestWithPlatformKey",
      "allowedValues": [
        "EncryptionAtRestWithPlatformKey",
        "EncryptionAtRestWithCustomerKey"
      ],
      "metadata": {
        "description": "Optional. Specify how OS and data disks created as part of the lab are encrypted."
      }
    },
    "encryptionDiskEncryptionSetId": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Conditional. The Disk Encryption Set Resource ID used to encrypt OS and data disks created as part of the the lab. Required if encryptionType is set to \"EncryptionAtRestWithCustomerKey\"."
      }
    },
    "virtualnetworks": {
      "$ref": "#/definitions/virtualNetworkType",
      "metadata": {
        "description": "Optional. Virtual networks to create for the lab."
      }
    },
    "policies": {
      "$ref": "#/definitions/policiesType",
      "metadata": {
        "description": "Optional. Policies to create for the lab."
      }
    },
    "schedules": {
      "$ref": "#/definitions/scheduleType",
      "metadata": {
        "description": "Optional. Schedules to create for the lab."
      }
    },
    "notificationchannels": {
      "$ref": "#/definitions/notificationChannelType",
      "metadata": {
        "description": "Conditional. Notification Channels to create for the lab. Required if the schedules property \"notificationSettingsStatus\" is set to \"Enabled."
      }
    },
    "artifactsources": {
      "$ref": "#/definitions/artifactsourcesType",
      "metadata": {
        "description": "Optional. Artifact sources to create for the lab."
      }
    },
    "costs": {
      "$ref": "#/definitions/costsType",
      "metadata": {
        "description": "Optional. Costs to create for the lab."
      }
    },
    "enableTelemetry": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Optional. Enable/Disable usage telemetry for module."
      }
    }
  },
  "variables": {
    "copy": [
      {
        "name": "formattedRoleAssignments",
        "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]",
        "input": "[union(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')], createObject('roleDefinitionId', coalesce(tryGet(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName), if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName)))))]"
      }
    ],
    "formattedUserAssignedIdentities": "[reduce(map(coalesce(tryGet(parameters('managedIdentities'), 'userAssignedResourceIds'), createArray()), lambda('id', createObject(format('{0}', lambdaVariables('id')), createObject()))), createObject(), lambda('cur', 'next', union(lambdaVariables('cur'), lambdaVariables('next'))))]",
    "identity": "[if(not(empty(parameters('managedIdentities'))), createObject('type', if(not(empty(coalesce(tryGet(parameters('managedIdentities'), 'userAssignedResourceIds'), createObject()))), 'SystemAssigned,UserAssigned', 'SystemAssigned'), 'userAssignedIdentities', if(not(empty(variables('formattedUserAssignedIdentities'))), variables('formattedUserAssignedIdentities'), createObject())), createObject('type', 'SystemAssigned'))]",
    "formattedManagementIdentities": "[if(not(empty(parameters('managementIdentitiesResourceIds'))), reduce(map(coalesce(parameters('managementIdentitiesResourceIds'), createArray()), lambda('id', createObject(format('{0}', lambdaVariables('id')), createObject()))), createObject(), lambda('cur', 'next', union(lambdaVariables('cur'), lambdaVariables('next')))), createObject())]",
    "builtInRoleNames": {
      "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
      "DevTest Labs User": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '76283e04-6283-4c54-8f91-bcf1374a3c64')]",
      "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
      "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
      "Resource Policy Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '36243c78-bf99-498c-9df9-86d9f8d28608')]",
      "Role Based Access Control Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]",
      "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]",
      "Virtual Machine Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '9980e02c-c2be-4d73-94e8-173b1dc7cf3c')]"
    }
  },
  "resources": {
    "avmTelemetry": {
      "condition": "[parameters('enableTelemetry')]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2024-03-01",
      "name": "[format('46d3xbcp.res.devtestlab-lab.{0}.{1}', replace('-..--..-', '.', '-'), substring(uniqueString(deployment().name, parameters('location')), 0, 4))]",
      "properties": {
        "mode": "Incremental",
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "resources": [],
          "outputs": {
            "telemetry": {
              "type": "String",
              "value": "For more information, see https://aka.ms/avm/TelemetryInfo"
            }
          }
        }
      }
    },
    "lab": {
      "type": "Microsoft.DevTestLab/labs",
      "apiVersion": "2018-10-15-preview",
      "name": "[parameters('name')]",
      "location": "[parameters('location')]",
      "tags": "[coalesce(parameters('tags'), createObject())]",
      "identity": "[variables('identity')]",
      "properties": {
        "artifactsStorageAccount": "[parameters('artifactsStorageAccount')]",
        "announcement": "[parameters('announcement')]",
        "environmentPermission": "[parameters('environmentPermission')]",
        "extendedProperties": "[parameters('extendedProperties')]",
        "labStorageType": "[parameters('labStorageType')]",
        "mandatoryArtifactsResourceIdsLinux": "[parameters('mandatoryArtifactsResourceIdsLinux')]",
        "mandatoryArtifactsResourceIdsWindows": "[parameters('mandatoryArtifactsResourceIdsWindows')]",
        "premiumDataDisks": "[parameters('premiumDataDisks')]",
        "support": "[parameters('support')]",
        "managementIdentities": "[variables('formattedManagementIdentities')]",
        "vmCreationResourceGroupId": "[parameters('vmCreationResourceGroupId')]",
        "browserConnect": "[parameters('browserConnect')]",
        "disableAutoUpgradeCseMinorVersion": "[parameters('disableAutoUpgradeCseMinorVersion')]",
        "isolateLabResources": "[parameters('isolateLabResources')]",
        "encryption": {
          "type": "[parameters('encryptionType')]",
          "diskEncryptionSetId": "[if(not(empty(parameters('encryptionDiskEncryptionSetId'))), parameters('encryptionDiskEncryptionSetId'), null())]"
        }
      }
    },
    "lab_lock": {
      "condition": "[and(not(empty(coalesce(parameters('lock'), createObject()))), not(equals(tryGet(parameters('lock'), 'kind'), 'None')))]",
      "type": "Microsoft.Authorization/locks",
      "apiVersion": "2020-05-01",
      "scope": "[format('Microsoft.DevTestLab/labs/{0}', parameters('name'))]",
      "name": "[coalesce(tryGet(parameters('lock'), 'name'), format('lock-{0}', parameters('name')))]",
      "properties": {
        "level": "[coalesce(tryGet(parameters('lock'), 'kind'), '')]",
        "notes": "[if(equals(tryGet(parameters('lock'), 'kind'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot delete or modify the resource or child resources.')]"
      },
      "dependsOn": [
        "lab"
      ]
    },
    "lab_roleAssignments": {
      "copy": {
        "name": "lab_roleAssignments",
        "count": "[length(coalesce(variables('formattedRoleAssignments'), createArray()))]"
      },
      "type": "Microsoft.Authorization/roleAssignments",
      "apiVersion": "2022-04-01",
      "scope": "[format('Microsoft.DevTestLab/labs/{0}', parameters('name'))]",
      "name": "[coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'name'), guid(resourceId('Microsoft.DevTestLab/labs', parameters('name')), coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId, coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId))]",
      "properties": {
        "roleDefinitionId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId]",
        "principalId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId]",
        "description": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'description')]",
        "principalType": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'principalType')]",
        "condition": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition')]",
        "conditionVersion": "[if(not(empty(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
        "delegatedManagedIdentityResourceId": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
      },
      "dependsOn": [
        "lab"
      ]
    },
    "lab_virtualNetworks": {
      "copy": {
        "name": "lab_virtualNetworks",
        "count": "[length(coalesce(parameters('virtualnetworks'), createArray()))]"
      },
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('{0}-Lab-VirtualNetwork-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "labName": {
            "value": "[parameters('name')]"
          },
          "name": {
            "value": "[coalesce(parameters('virtualnetworks'), createArray())[copyIndex()].name]"
          },
          "tags": {
            "value": "[coalesce(tryGet(coalesce(parameters('virtualnetworks'), createArray())[copyIndex()], 'tags'), parameters('tags'))]"
          },
          "externalProviderResourceId": {
            "value": "[coalesce(parameters('virtualnetworks'), createArray())[copyIndex()].externalProviderResourceId]"
          },
          "description": {
            "value": "[tryGet(coalesce(parameters('virtualnetworks'), createArray())[copyIndex()], 'description')]"
          },
          "allowedSubnets": {
            "value": "[tryGet(coalesce(parameters('virtualnetworks'), createArray())[copyIndex()], 'allowedSubnets')]"
          },
          "subnetOverrides": {
            "value": "[tryGet(coalesce(parameters('virtualnetworks'), createArray())[copyIndex()], 'subnetOverrides')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "languageVersion": "2.0",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.31.92.45157",
              "templateHash": "136709431680015650"
            },
            "name": "DevTest Lab Virtual Networks",
            "description": "This module deploys a DevTest Lab Virtual Network.\n\nLab virtual machines must be deployed into a virtual network. This resource type allows configuring the virtual network and subnet settings used for the lab virtual machines.",
            "owner": "Azure/module-maintainers"
          },
          "definitions": {
            "allowedSubnetType": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "allowPublicIp": {
                    "type": "string",
                    "allowedValues": [
                      "Allow",
                      "Default",
                      "Deny"
                    ],
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. The permission policy of the subnet for allowing public IP addresses (i.e. Allow, Deny))."
                    }
                  },
                  "resourceId": {
                    "type": "string",
                    "metadata": {
                      "description": "Required. The resource ID of the allowed subnet."
                    }
                  },
                  "labSubnetName": {
                    "type": "string",
                    "metadata": {
                      "description": "Required. The name of the subnet as seen in the lab."
                    }
                  }
                }
              },
              "nullable": true,
              "metadata": {
                "__bicep_export!": true
              }
            },
            "subnetOverrideType": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "labSubnetName": {
                    "type": "string",
                    "metadata": {
                      "description": "Required. The name given to the subnet within the lab."
                    }
                  },
                  "resourceId": {
                    "type": "string",
                    "metadata": {
                      "description": "Required. The resource ID of the subnet."
                    }
                  },
                  "sharedPublicIpAddressConfiguration": {
                    "type": "object",
                    "properties": {
                      "allowedPorts": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "backendPort": {
                              "type": "int",
                              "metadata": {
                                "description": "Required. Backend port of the target virtual machine."
                              }
                            },
                            "transportProtocol": {
                              "type": "string",
                              "allowedValues": [
                                "Tcp",
                                "Udp"
                              ],
                              "metadata": {
                                "description": "Required. Protocol type of the port."
                              }
                            }
                          }
                        },
                        "metadata": {
                          "description": "Required. Backend ports that virtual machines on this subnet are allowed to expose."
                        }
                      }
                    },
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. The permission policy of the subnet for allowing public IP addresses (i.e. Allow, Deny))."
                    }
                  },
                  "useInVmCreationPermission": {
                    "type": "string",
                    "allowedValues": [
                      "Allow",
                      "Default",
                      "Deny"
                    ],
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. Indicates whether this subnet can be used during virtual machine creation (i.e. Allow, Deny)."
                    }
                  },
                  "usePublicIpAddressPermission": {
                    "type": "string",
                    "allowedValues": [
                      "Allow",
                      "Default",
                      "Deny"
                    ],
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. Indicates whether public IP addresses can be assigned to virtual machines on this subnet (i.e. Allow, Deny)."
                    }
                  },
                  "virtualNetworkPoolName": {
                    "type": "string",
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. The virtual network pool associated with this subnet."
                    }
                  }
                }
              },
              "nullable": true,
              "metadata": {
                "__bicep_export!": true
              }
            }
          },
          "parameters": {
            "labName": {
              "type": "string",
              "metadata": {
                "description": "Conditional. The name of the parent lab. Required if the template is used in a standalone deployment."
              }
            },
            "name": {
              "type": "string",
              "metadata": {
                "description": "Required. The name of the virtual network."
              }
            },
            "externalProviderResourceId": {
              "type": "string",
              "metadata": {
                "description": "Required. The resource ID of the virtual network."
              }
            },
            "tags": {
              "type": "object",
              "nullable": true,
              "metadata": {
                "description": "Optional. Tags of the resource."
              }
            },
            "description": {
              "type": "string",
              "nullable": true,
              "metadata": {
                "description": "Optional. The description of the virtual network."
              }
            },
            "allowedSubnets": {
              "$ref": "#/definitions/allowedSubnetType",
              "metadata": {
                "description": "Optional. The allowed subnets of the virtual network."
              }
            },
            "subnetOverrides": {
              "$ref": "#/definitions/subnetOverrideType",
              "metadata": {
                "description": "Optional. The subnet overrides of the virtual network."
              }
            }
          },
          "resources": {
            "lab": {
              "existing": true,
              "type": "Microsoft.DevTestLab/labs",
              "apiVersion": "2018-09-15",
              "name": "[parameters('labName')]"
            },
            "virtualNetwork": {
              "type": "Microsoft.DevTestLab/labs/virtualnetworks",
              "apiVersion": "2018-09-15",
              "name": "[format('{0}/{1}', parameters('labName'), parameters('name'))]",
              "tags": "[parameters('tags')]",
              "properties": {
                "description": "[parameters('description')]",
                "externalProviderResourceId": "[parameters('externalProviderResourceId')]",
                "allowedSubnets": "[parameters('allowedSubnets')]",
                "subnetOverrides": "[parameters('subnetOverrides')]"
              },
              "dependsOn": [
                "lab"
              ]
            }
          },
          "outputs": {
            "name": {
              "type": "string",
              "metadata": {
                "description": "The name of the lab virtual network."
              },
              "value": "[parameters('name')]"
            },
            "resourceId": {
              "type": "string",
              "metadata": {
                "description": "The resource ID of the lab virtual network."
              },
              "value": "[resourceId('Microsoft.DevTestLab/labs/virtualnetworks', parameters('labName'), parameters('name'))]"
            },
            "resourceGroupName": {
              "type": "string",
              "metadata": {
                "description": "The name of the resource group the lab virtual network was created in."
              },
              "value": "[resourceGroup().name]"
            }
          }
        }
      },
      "dependsOn": [
        "lab"
      ]
    },
    "lab_policies": {
      "copy": {
        "name": "lab_policies",
        "count": "[length(coalesce(parameters('policies'), createArray()))]"
      },
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('{0}-Lab-PolicySets-Policy-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "labName": {
            "value": "[parameters('name')]"
          },
          "name": {
            "value": "[coalesce(parameters('policies'), createArray())[copyIndex()].name]"
          },
          "description": {
            "value": "[tryGet(coalesce(parameters('policies'), createArray())[copyIndex()], 'description')]"
          },
          "evaluatorType": {
            "value": "[coalesce(parameters('policies'), createArray())[copyIndex()].evaluatorType]"
          },
          "factData": {
            "value": "[tryGet(coalesce(parameters('policies'), createArray())[copyIndex()], 'factData')]"
          },
          "factName": {
            "value": "[coalesce(parameters('policies'), createArray())[copyIndex()].factName]"
          },
          "status": {
            "value": "[coalesce(tryGet(coalesce(parameters('policies'), createArray())[copyIndex()], 'status'), 'Enabled')]"
          },
          "threshold": {
            "value": "[coalesce(parameters('policies'), createArray())[copyIndex()].threshold]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.31.92.45157",
              "templateHash": "15278651865125879516"
            },
            "name": "DevTest Lab Policy Sets Policies",
            "description": "This module deploys a DevTest Lab Policy Sets Policy.\n\nDevTest lab policies are used to modify the lab settings such as only allowing certain VM Size SKUs, marketplace image types, number of VMs allowed per user and other settings.",
            "owner": "Azure/module-maintainers"
          },
          "parameters": {
            "labName": {
              "type": "string",
              "metadata": {
                "description": "Conditional. The name of the parent lab. Required if the template is used in a standalone deployment."
              }
            },
            "name": {
              "type": "string",
              "metadata": {
                "description": "Required. The name of the policy."
              }
            },
            "description": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. The description of the policy."
              }
            },
            "evaluatorType": {
              "type": "string",
              "allowedValues": [
                "AllowedValuesPolicy",
                "MaxValuePolicy"
              ],
              "metadata": {
                "description": "Required. The evaluator type of the policy (i.e. AllowedValuesPolicy, MaxValuePolicy)."
              }
            },
            "factData": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. The fact data of the policy."
              }
            },
            "factName": {
              "type": "string",
              "allowedValues": [
                "EnvironmentTemplate",
                "GalleryImage",
                "LabPremiumVmCount",
                "LabTargetCost",
                "LabVmCount",
                "LabVmSize",
                "ScheduleEditPermission",
                "UserOwnedLabPremiumVmCount",
                "UserOwnedLabVmCount",
                "UserOwnedLabVmCountInSubnet"
              ],
              "metadata": {
                "description": "Required. The fact name of the policy."
              }
            },
            "status": {
              "type": "string",
              "defaultValue": "Enabled",
              "allowedValues": [
                "Disabled",
                "Enabled"
              ],
              "metadata": {
                "description": "Optional. The status of the policy."
              }
            },
            "threshold": {
              "type": "string",
              "metadata": {
                "description": "Required. The threshold of the policy (i.e. a number for MaxValuePolicy, and a JSON array of values for AllowedValuesPolicy)."
              }
            }
          },
          "resources": [
            {
              "type": "Microsoft.DevTestLab/labs/policysets/policies",
              "apiVersion": "2018-09-15",
              "name": "[format('{0}/{1}/{2}', parameters('labName'), 'default', parameters('name'))]",
              "properties": {
                "description": "[coalesce(parameters('description'), '')]",
                "evaluatorType": "[parameters('evaluatorType')]",
                "factData": "[coalesce(parameters('factData'), '')]",
                "factName": "[parameters('factName')]",
                "status": "[parameters('status')]",
                "threshold": "[parameters('threshold')]"
              }
            }
          ],
          "outputs": {
            "name": {
              "type": "string",
              "metadata": {
                "description": "The name of the policy."
              },
              "value": "[parameters('name')]"
            },
            "resourceId": {
              "type": "string",
              "metadata": {
                "description": "The resource ID of the policy."
              },
              "value": "[resourceId('Microsoft.DevTestLab/labs/policysets/policies', parameters('labName'), 'default', parameters('name'))]"
            },
            "resourceGroupName": {
              "type": "string",
              "metadata": {
                "description": "The name of the resource group the policy was created in."
              },
              "value": "[resourceGroup().name]"
            }
          }
        }
      },
      "dependsOn": [
        "lab"
      ]
    },
    "lab_schedules": {
      "copy": {
        "name": "lab_schedules",
        "count": "[length(coalesce(parameters('schedules'), createArray()))]"
      },
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('{0}-Lab-Schedules-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "labName": {
            "value": "[parameters('name')]"
          },
          "name": {
            "value": "[coalesce(parameters('schedules'), createArray())[copyIndex()].name]"
          },
          "tags": {
            "value": "[coalesce(tryGet(coalesce(parameters('schedules'), createArray())[copyIndex()], 'tags'), parameters('tags'))]"
          },
          "taskType": {
            "value": "[coalesce(parameters('schedules'), createArray())[copyIndex()].taskType]"
          },
          "dailyRecurrence": {
            "value": "[tryGet(coalesce(parameters('schedules'), createArray())[copyIndex()], 'dailyRecurrence')]"
          },
          "hourlyRecurrence": {
            "value": "[tryGet(coalesce(parameters('schedules'), createArray())[copyIndex()], 'hourlyRecurrence')]"
          },
          "weeklyRecurrence": {
            "value": "[tryGet(coalesce(parameters('schedules'), createArray())[copyIndex()], 'weeklyRecurrence')]"
          },
          "status": {
            "value": "[coalesce(tryGet(coalesce(parameters('schedules'), createArray())[copyIndex()], 'status'), 'Enabled')]"
          },
          "targetResourceId": {
            "value": "[tryGet(coalesce(parameters('schedules'), createArray())[copyIndex()], 'targetResourceId')]"
          },
          "timeZoneId": {
            "value": "[coalesce(tryGet(coalesce(parameters('schedules'), createArray())[copyIndex()], 'timeZoneId'), 'Pacific Standard time')]"
          },
          "notificationSettings": {
            "value": "[tryGet(coalesce(parameters('schedules'), createArray())[copyIndex()], 'notificationSettings')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "languageVersion": "2.0",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.31.92.45157",
              "templateHash": "5104168587634139273"
            },
            "name": "DevTest Lab Schedules",
            "description": "This module deploys a DevTest Lab Schedule.\n\nLab schedules are used to modify the settings for auto-shutdown, auto-start for lab virtual machines.",
            "owner": "Azure/module-maintainers"
          },
          "definitions": {
            "dailyRecurrenceType": {
              "type": "object",
              "properties": {
                "time": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. The time of day the schedule will occur."
                  }
                }
              },
              "nullable": true,
              "metadata": {
                "__bicep_export!": true
              }
            },
            "hourlyRecurrenceType": {
              "type": "object",
              "properties": {
                "minute": {
                  "type": "int",
                  "metadata": {
                    "description": "Required. Minutes of the hour the schedule will run."
                  }
                }
              },
              "nullable": true,
              "metadata": {
                "__bicep_export!": true
              }
            },
            "weeklyRecurrenceType": {
              "type": "object",
              "properties": {
                "time": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. The time of day the schedule will occur."
                  }
                },
                "weekdays": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "metadata": {
                    "description": "Required. The days of the week for which the schedule is set (e.g. Sunday, Monday, Tuesday, etc.)."
                  }
                }
              },
              "nullable": true,
              "metadata": {
                "__bicep_export!": true
              }
            },
            "notificationSettingsType": {
              "type": "object",
              "properties": {
                "emailRecipient": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Conditional. The email recipient to send notifications to (can be a list of semi-colon separated email addresses). Required if \"webHookUrl\" is empty."
                  }
                },
                "notificationLocale": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The locale to use when sending a notification (fallback for unsupported languages is EN)."
                  }
                },
                "status": {
                  "type": "string",
                  "allowedValues": [
                    "Disabled",
                    "Enabled"
                  ],
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. If notifications are enabled for this schedule (i.e. Enabled, Disabled). Default is Disabled."
                  }
                },
                "timeInMinutes": {
                  "type": "int",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Time in minutes before event at which notification will be sent. Default is 30 minutes if status is Enabled and not specified."
                  }
                },
                "webHookUrl": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Conditional. The webhook URL to which the notification will be sent. Required if \"emailRecipient\" is empty."
                  }
                }
              },
              "nullable": true,
              "metadata": {
                "__bicep_export!": true
              }
            }
          },
          "parameters": {
            "labName": {
              "type": "string",
              "metadata": {
                "description": "Conditional. The name of the parent lab. Required if the template is used in a standalone deployment."
              }
            },
            "name": {
              "type": "string",
              "allowedValues": [
                "LabVmsShutdown",
                "LabVmAutoStart"
              ],
              "metadata": {
                "description": "Required. The name of the schedule."
              }
            },
            "taskType": {
              "type": "string",
              "allowedValues": [
                "LabVmsShutdownTask",
                "LabVmsStartupTask"
              ],
              "metadata": {
                "description": "Required. The task type of the schedule (e.g. LabVmsShutdownTask, LabVmsStartupTask)."
              }
            },
            "tags": {
              "type": "object",
              "nullable": true,
              "metadata": {
                "description": "Optional. Tags of the resource."
              }
            },
            "dailyRecurrence": {
              "$ref": "#/definitions/dailyRecurrenceType",
              "metadata": {
                "description": "Optional. If the schedule will occur once each day of the week, specify the daily recurrence."
              }
            },
            "hourlyRecurrence": {
              "$ref": "#/definitions/hourlyRecurrenceType",
              "metadata": {
                "description": "Optional. If the schedule will occur multiple times a day, specify the hourly recurrence."
              }
            },
            "weeklyRecurrence": {
              "$ref": "#/definitions/weeklyRecurrenceType",
              "metadata": {
                "description": "Optional. If the schedule will occur only some days of the week, specify the weekly recurrence."
              }
            },
            "status": {
              "type": "string",
              "defaultValue": "Enabled",
              "allowedValues": [
                "Enabled",
                "Disabled"
              ],
              "metadata": {
                "description": "Optional. The status of the schedule (i.e. Enabled, Disabled)."
              }
            },
            "targetResourceId": {
              "type": "string",
              "nullable": true,
              "metadata": {
                "description": "Optional. The resource ID to which the schedule belongs."
              }
            },
            "timeZoneId": {
              "type": "string",
              "defaultValue": "Pacific Standard time",
              "metadata": {
                "description": "Optional. The time zone ID (e.g. Pacific Standard time)."
              }
            },
            "notificationSettings": {
              "$ref": "#/definitions/notificationSettingsType",
              "metadata": {
                "description": "Optional. The notification settings for the schedule."
              }
            }
          },
          "resources": {
            "lab": {
              "existing": true,
              "type": "Microsoft.DevTestLab/labs",
              "apiVersion": "2018-09-15",
              "name": "[parameters('labName')]"
            },
            "schedule": {
              "type": "Microsoft.DevTestLab/labs/schedules",
              "apiVersion": "2018-09-15",
              "name": "[format('{0}/{1}', parameters('labName'), parameters('name'))]",
              "tags": "[parameters('tags')]",
              "properties": {
                "taskType": "[parameters('taskType')]",
                "dailyRecurrence": "[parameters('dailyRecurrence')]",
                "hourlyRecurrence": "[parameters('hourlyRecurrence')]",
                "weeklyRecurrence": "[parameters('weeklyRecurrence')]",
                "status": "[parameters('status')]",
                "targetResourceId": "[parameters('targetResourceId')]",
                "timeZoneId": "[parameters('timeZoneId')]",
                "notificationSettings": "[parameters('notificationSettings')]"
              },
              "dependsOn": [
                "lab"
              ]
            }
          },
          "outputs": {
            "name": {
              "type": "string",
              "metadata": {
                "description": "The name of the schedule."
              },
              "value": "[parameters('name')]"
            },
            "resourceId": {
              "type": "string",
              "metadata": {
                "description": "The resource ID of the schedule."
              },
              "value": "[resourceId('Microsoft.DevTestLab/labs/schedules', parameters('labName'), parameters('name'))]"
            },
            "resourceGroupName": {
              "type": "string",
              "metadata": {
                "description": "The name of the resource group the schedule was created in."
              },
              "value": "[resourceGroup().name]"
            }
          }
        }
      },
      "dependsOn": [
        "lab"
      ]
    },
    "lab_notificationChannels": {
      "copy": {
        "name": "lab_notificationChannels",
        "count": "[length(coalesce(parameters('notificationchannels'), createArray()))]"
      },
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('{0}-Lab-NotificationChannels-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "labName": {
            "value": "[parameters('name')]"
          },
          "name": {
            "value": "[coalesce(parameters('notificationchannels'), createArray())[copyIndex()].name]"
          },
          "tags": {
            "value": "[coalesce(tryGet(coalesce(parameters('notificationchannels'), createArray())[copyIndex()], 'tags'), parameters('tags'))]"
          },
          "description": {
            "value": "[tryGet(coalesce(parameters('notificationchannels'), createArray())[copyIndex()], 'description')]"
          },
          "events": {
            "value": "[coalesce(parameters('notificationchannels'), createArray())[copyIndex()].events]"
          },
          "emailRecipient": {
            "value": "[tryGet(coalesce(parameters('notificationchannels'), createArray())[copyIndex()], 'emailRecipient')]"
          },
          "webHookUrl": {
            "value": "[tryGet(coalesce(parameters('notificationchannels'), createArray())[copyIndex()], 'webHookUrl')]"
          },
          "notificationLocale": {
            "value": "[coalesce(tryGet(coalesce(parameters('notificationchannels'), createArray())[copyIndex()], 'notificationLocale'), 'en')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "languageVersion": "2.0",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.31.92.45157",
              "templateHash": "1470030882457989802"
            },
            "name": "DevTest Lab Notification Channels",
            "description": "This module deploys a DevTest Lab Notification Channel.\n\nNotification channels are used by the schedule resource type in order to send notifications or events to email addresses and/or webhooks.",
            "owner": "Azure/module-maintainers"
          },
          "parameters": {
            "labName": {
              "type": "string",
              "metadata": {
                "description": "Conditional. The name of the parent lab. Required if the template is used in a standalone deployment."
              }
            },
            "name": {
              "type": "string",
              "allowedValues": [
                "autoShutdown",
                "costThreshold"
              ],
              "metadata": {
                "description": "Required. The name of the notification channel."
              }
            },
            "tags": {
              "type": "object",
              "nullable": true,
              "metadata": {
                "description": "Optional. Tags of the resource."
              }
            },
            "description": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. Description of notification."
              }
            },
            "events": {
              "type": "array",
              "metadata": {
                "description": "Required. The list of event for which this notification is enabled."
              }
            },
            "emailRecipient": {
              "type": "string",
              "nullable": true,
              "metadata": {
                "description": "Conditional. The email recipient to send notifications to (can be a list of semi-colon separated email addresses). Required if \"webHookUrl\" is empty."
              }
            },
            "webHookUrl": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Conditional. The webhook URL to which the notification will be sent. Required if \"emailRecipient\" is empty."
              }
            },
            "notificationLocale": {
              "type": "string",
              "defaultValue": "en",
              "metadata": {
                "description": "Optional. The locale to use when sending a notification (fallback for unsupported languages is EN)."
              }
            }
          },
          "resources": {
            "lab": {
              "existing": true,
              "type": "Microsoft.DevTestLab/labs",
              "apiVersion": "2018-09-15",
              "name": "[parameters('labName')]"
            },
            "notificationChannel": {
              "type": "Microsoft.DevTestLab/labs/notificationchannels",
              "apiVersion": "2018-09-15",
              "name": "[format('{0}/{1}', parameters('labName'), parameters('name'))]",
              "tags": "[parameters('tags')]",
              "properties": {
                "copy": [
                  {
                    "name": "events",
                    "count": "[length(parameters('events'))]",
                    "input": {
                      "eventName": "[parameters('events')[copyIndex('events')]]"
                    }
                  }
                ],
                "description": "[parameters('description')]",
                "emailRecipient": "[parameters('emailRecipient')]",
                "webHookUrl": "[parameters('webHookUrl')]",
                "notificationLocale": "[parameters('notificationLocale')]"
              },
              "dependsOn": [
                "lab"
              ]
            }
          },
          "outputs": {
            "name": {
              "type": "string",
              "metadata": {
                "description": "The name of the notification channel."
              },
              "value": "[parameters('name')]"
            },
            "resourceId": {
              "type": "string",
              "metadata": {
                "description": "The resource ID of the notification channel."
              },
              "value": "[resourceId('Microsoft.DevTestLab/labs/notificationchannels', parameters('labName'), parameters('name'))]"
            },
            "resourceGroupName": {
              "type": "string",
              "metadata": {
                "description": "The name of the resource group the notification channel was created in."
              },
              "value": "[resourceGroup().name]"
            }
          }
        }
      },
      "dependsOn": [
        "lab"
      ]
    },
    "lab_artifactSources": {
      "copy": {
        "name": "lab_artifactSources",
        "count": "[length(coalesce(parameters('artifactsources'), createArray()))]"
      },
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('{0}-Lab-ArtifactSources-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "labName": {
            "value": "[parameters('name')]"
          },
          "name": {
            "value": "[coalesce(parameters('artifactsources'), createArray())[copyIndex()].name]"
          },
          "tags": {
            "value": "[coalesce(tryGet(coalesce(parameters('artifactsources'), createArray())[copyIndex()], 'tags'), parameters('tags'))]"
          },
          "displayName": {
            "value": "[coalesce(tryGet(coalesce(parameters('artifactsources'), createArray())[copyIndex()], 'displayName'), coalesce(parameters('artifactsources'), createArray())[copyIndex()].name)]"
          },
          "branchRef": {
            "value": "[tryGet(coalesce(parameters('artifactsources'), createArray())[copyIndex()], 'branchRef')]"
          },
          "folderPath": {
            "value": "[tryGet(coalesce(parameters('artifactsources'), createArray())[copyIndex()], 'folderPath')]"
          },
          "armTemplateFolderPath": {
            "value": "[tryGet(coalesce(parameters('artifactsources'), createArray())[copyIndex()], 'armTemplateFolderPath')]"
          },
          "sourceType": {
            "value": "[tryGet(coalesce(parameters('artifactsources'), createArray())[copyIndex()], 'sourceType')]"
          },
          "status": {
            "value": "[coalesce(tryGet(coalesce(parameters('artifactsources'), createArray())[copyIndex()], 'status'), 'Enabled')]"
          },
          "uri": {
            "value": "[coalesce(parameters('artifactsources'), createArray())[copyIndex()].uri]"
          },
          "securityToken": {
            "value": "[tryGet(coalesce(parameters('artifactsources'), createArray())[copyIndex()], 'securityToken')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "languageVersion": "2.0",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.31.92.45157",
              "templateHash": "14783992773855757023"
            },
            "name": "DevTest Lab Artifact Sources",
            "description": "This module deploys a DevTest Lab Artifact Source.\n\nAn artifact source allows you to create custom artifacts for the VMs in the lab, or use Azure Resource Manager templates to create a custom test environment. You must add a private Git repository for the artifacts or Resource Manager templates that your team creates. The repository can be hosted on GitHub or on Azure DevOps Services.",
            "owner": "Azure/module-maintainers"
          },
          "parameters": {
            "labName": {
              "type": "string",
              "metadata": {
                "description": "Conditional. The name of the parent lab. Required if the template is used in a standalone deployment."
              }
            },
            "name": {
              "type": "string",
              "metadata": {
                "description": "Required. The name of the artifact source."
              }
            },
            "tags": {
              "type": "object",
              "nullable": true,
              "metadata": {
                "description": "Optional. Tags of the resource."
              }
            },
            "displayName": {
              "type": "string",
              "defaultValue": "[parameters('name')]",
              "metadata": {
                "description": "Optional. The artifact source's display name. Default is the name of the artifact source."
              }
            },
            "branchRef": {
              "type": "string",
              "nullable": true,
              "metadata": {
                "description": "Optional. The artifact source's branch reference (e.g. main or master)."
              }
            },
            "folderPath": {
              "type": "string",
              "nullable": true,
              "metadata": {
                "description": "Conditional. The folder containing artifacts. At least one folder path is required. Required if \"armTemplateFolderPath\" is empty."
              }
            },
            "armTemplateFolderPath": {
              "type": "string",
              "nullable": true,
              "metadata": {
                "description": "Conditional. The folder containing Azure Resource Manager templates. Required if \"folderPath\" is empty."
              }
            },
            "securityToken": {
              "type": "securestring",
              "nullable": true,
              "metadata": {
                "description": "Optional. The security token to authenticate to the artifact source."
              }
            },
            "sourceType": {
              "type": "string",
              "nullable": true,
              "allowedValues": [
                "GitHub",
                "StorageAccount",
                "VsoGit"
              ],
              "metadata": {
                "description": "Optional. The artifact source's type."
              }
            },
            "status": {
              "type": "string",
              "defaultValue": "Enabled",
              "allowedValues": [
                "Enabled",
                "Disabled"
              ],
              "metadata": {
                "description": "Optional. Indicates if the artifact source is enabled (values: Enabled, Disabled). Default is \"Enabled\"."
              }
            },
            "uri": {
              "type": "string",
              "metadata": {
                "description": "Required. The artifact source's URI."
              }
            }
          },
          "resources": {
            "lab": {
              "existing": true,
              "type": "Microsoft.DevTestLab/labs",
              "apiVersion": "2018-09-15",
              "name": "[parameters('labName')]"
            },
            "artifactsource": {
              "type": "Microsoft.DevTestLab/labs/artifactsources",
              "apiVersion": "2018-09-15",
              "name": "[format('{0}/{1}', parameters('labName'), parameters('name'))]",
              "tags": "[parameters('tags')]",
              "properties": {
                "displayName": "[parameters('displayName')]",
                "branchRef": "[parameters('branchRef')]",
                "folderPath": "[parameters('folderPath')]",
                "armTemplateFolderPath": "[parameters('armTemplateFolderPath')]",
                "securityToken": "[parameters('securityToken')]",
                "sourceType": "[parameters('sourceType')]",
                "status": "[parameters('status')]",
                "uri": "[parameters('uri')]"
              },
              "dependsOn": [
                "lab"
              ]
            }
          },
          "outputs": {
            "name": {
              "type": "string",
              "metadata": {
                "description": "The name of the artifact source."
              },
              "value": "[parameters('name')]"
            },
            "resourceId": {
              "type": "string",
              "metadata": {
                "description": "The resource ID of the artifact source."
              },
              "value": "[resourceId('Microsoft.DevTestLab/labs/artifactsources', parameters('labName'), parameters('name'))]"
            },
            "resourceGroupName": {
              "type": "string",
              "metadata": {
                "description": "The name of the resource group the artifact source was created in."
              },
              "value": "[resourceGroup().name]"
            }
          }
        }
      },
      "dependsOn": [
        "lab"
      ]
    },
    "lab_costs": {
      "condition": "[not(empty(parameters('costs')))]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('{0}-Lab-Costs', uniqueString(deployment().name, parameters('location')))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "labName": {
            "value": "[parameters('name')]"
          },
          "tags": {
            "value": "[coalesce(tryGet(parameters('costs'), 'tags'), parameters('tags'))]"
          },
          "currencyCode": {
            "value": "[coalesce(tryGet(parameters('costs'), 'currencyCode'), 'USD')]"
          },
          "cycleType": {
            "value": "[parameters('costs').cycleType]"
          },
          "cycleStartDateTime": {
            "value": "[tryGet(parameters('costs'), 'cycleStartDateTime')]"
          },
          "cycleEndDateTime": {
            "value": "[tryGet(parameters('costs'), 'cycleEndDateTime')]"
          },
          "status": {
            "value": "[coalesce(tryGet(parameters('costs'), 'status'), 'Enabled')]"
          },
          "target": {
            "value": "[coalesce(tryGet(parameters('costs'), 'target'), 0)]"
          },
          "thresholdValue25DisplayOnChart": {
            "value": "[coalesce(tryGet(parameters('costs'), 'thresholdValue25DisplayOnChart'), 'Disabled')]"
          },
          "thresholdValue25SendNotificationWhenExceeded": {
            "value": "[coalesce(tryGet(parameters('costs'), 'thresholdValue25SendNotificationWhenExceeded'), 'Disabled')]"
          },
          "thresholdValue50DisplayOnChart": {
            "value": "[coalesce(tryGet(parameters('costs'), 'thresholdValue50DisplayOnChart'), 'Disabled')]"
          },
          "thresholdValue50SendNotificationWhenExceeded": {
            "value": "[coalesce(tryGet(parameters('costs'), 'thresholdValue50SendNotificationWhenExceeded'), 'Disabled')]"
          },
          "thresholdValue75DisplayOnChart": {
            "value": "[coalesce(tryGet(parameters('costs'), 'thresholdValue75DisplayOnChart'), 'Disabled')]"
          },
          "thresholdValue75SendNotificationWhenExceeded": {
            "value": "[coalesce(tryGet(parameters('costs'), 'thresholdValue75SendNotificationWhenExceeded'), 'Disabled')]"
          },
          "thresholdValue100DisplayOnChart": {
            "value": "[coalesce(tryGet(parameters('costs'), 'thresholdValue100DisplayOnChart'), 'Disabled')]"
          },
          "thresholdValue100SendNotificationWhenExceeded": {
            "value": "[coalesce(tryGet(parameters('costs'), 'thresholdValue100SendNotificationWhenExceeded'), 'Disabled')]"
          },
          "thresholdValue125DisplayOnChart": {
            "value": "[coalesce(tryGet(parameters('costs'), 'thresholdValue125DisplayOnChart'), 'Disabled')]"
          },
          "thresholdValue125SendNotificationWhenExceeded": {
            "value": "[coalesce(tryGet(parameters('costs'), 'thresholdValue125SendNotificationWhenExceeded'), 'Disabled')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "languageVersion": "2.0",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.31.92.45157",
              "templateHash": "11453149540789698717"
            },
            "name": "DevTest Lab Costs",
            "description": "This module deploys a DevTest Lab Cost.\n\nManage lab costs by setting a spending target that can be viewed in the Monthly Estimated Cost Trend chart. DevTest Labs can send a notification when spending reaches the specified target threshold.",
            "owner": "Azure/module-maintainers"
          },
          "parameters": {
            "labName": {
              "type": "string",
              "metadata": {
                "description": "Conditional. The name of the parent lab. Required if the template is used in a standalone deployment."
              }
            },
            "cycleType": {
              "type": "string",
              "allowedValues": [
                "Custom",
                "CalendarMonth"
              ],
              "metadata": {
                "description": "Required. Reporting cycle type."
              }
            },
            "tags": {
              "type": "object",
              "nullable": true,
              "metadata": {
                "description": "Optional. Tags of the resource."
              }
            },
            "cycleStartDateTime": {
              "type": "string",
              "nullable": true,
              "metadata": {
                "description": "Conditional. Reporting cycle start date in the zulu time format (e.g. 2023-12-01T00:00:00.000Z). Required if cycleType is set to \"Custom\"."
              }
            },
            "cycleEndDateTime": {
              "type": "string",
              "nullable": true,
              "metadata": {
                "description": "Conditional. Reporting cycle end date in the zulu time format (e.g. 2023-12-01T00:00:00.000Z). Required if cycleType is set to \"Custom\"."
              }
            },
            "status": {
              "type": "string",
              "defaultValue": "Enabled",
              "allowedValues": [
                "Enabled",
                "Disabled"
              ],
              "metadata": {
                "description": "Optional. Target cost status."
              }
            },
            "target": {
              "type": "int",
              "defaultValue": 0,
              "metadata": {
                "description": "Optional. Lab target cost (e.g. 100). The target cost will appear in the \"Cost trend\" chart to allow tracking lab spending relative to the target cost for the current reporting cycleSetting the target cost to 0 will disable all thresholds."
              }
            },
            "currencyCode": {
              "type": "string",
              "defaultValue": "USD",
              "metadata": {
                "description": "Optional. The currency code of the cost."
              }
            },
            "thresholdValue25DisplayOnChart": {
              "type": "string",
              "defaultValue": "Disabled",
              "allowedValues": [
                "Enabled",
                "Disabled"
              ],
              "metadata": {
                "description": "Optional. Target Cost threshold at 25% display on chart. Indicates whether this threshold will be displayed on cost charts."
              }
            },
            "thresholdValue25SendNotificationWhenExceeded": {
              "type": "string",
              "defaultValue": "Disabled",
              "allowedValues": [
                "Enabled",
                "Disabled"
              ],
              "metadata": {
                "description": "Optional. Target cost threshold at 25% send notification when exceeded. Indicates whether notifications will be sent when this threshold is exceeded."
              }
            },
            "thresholdValue50DisplayOnChart": {
              "type": "string",
              "defaultValue": "Disabled",
              "allowedValues": [
                "Enabled",
                "Disabled"
              ],
              "metadata": {
                "description": "Optional. Target Cost threshold at 50% display on chart. Indicates whether this threshold will be displayed on cost charts."
              }
            },
            "thresholdValue50SendNotificationWhenExceeded": {
              "type": "string",
              "defaultValue": "Disabled",
              "allowedValues": [
                "Enabled",
                "Disabled"
              ],
              "metadata": {
                "description": "Optional. Target cost threshold at 50% send notification when exceeded. Indicates whether notifications will be sent when this threshold is exceeded."
              }
            },
            "thresholdValue75DisplayOnChart": {
              "type": "string",
              "defaultValue": "Disabled",
              "allowedValues": [
                "Enabled",
                "Disabled"
              ],
              "metadata": {
                "description": "Optional. Target Cost threshold at 75% display on chart. Indicates whether this threshold will be displayed on cost charts."
              }
            },
            "thresholdValue75SendNotificationWhenExceeded": {
              "type": "string",
              "defaultValue": "Disabled",
              "allowedValues": [
                "Enabled",
                "Disabled"
              ],
              "metadata": {
                "description": "Optional. Target cost threshold at 75% send notification when exceeded. Indicates whether notifications will be sent when this threshold is exceeded."
              }
            },
            "thresholdValue100DisplayOnChart": {
              "type": "string",
              "defaultValue": "Disabled",
              "allowedValues": [
                "Enabled",
                "Disabled"
              ],
              "metadata": {
                "description": "Optional. Target Cost threshold at 100% display on chart. Indicates whether this threshold will be displayed on cost charts."
              }
            },
            "thresholdValue100SendNotificationWhenExceeded": {
              "type": "string",
              "defaultValue": "Disabled",
              "allowedValues": [
                "Enabled",
                "Disabled"
              ],
              "metadata": {
                "description": "Optional. Target cost threshold at 100% send notification when exceeded. Indicates whether notifications will be sent when this threshold is exceeded."
              }
            },
            "thresholdValue125DisplayOnChart": {
              "type": "string",
              "defaultValue": "Disabled",
              "allowedValues": [
                "Enabled",
                "Disabled"
              ],
              "metadata": {
                "description": "Optional. Target Cost threshold at 125% display on chart. Indicates whether this threshold will be displayed on cost charts."
              }
            },
            "thresholdValue125SendNotificationWhenExceeded": {
              "type": "string",
              "defaultValue": "Disabled",
              "allowedValues": [
                "Enabled",
                "Disabled"
              ],
              "metadata": {
                "description": "Optional. Target cost threshold at 125% send notification when exceeded. Indicates whether notifications will be sent when this threshold is exceeded."
              }
            }
          },
          "resources": {
            "lab": {
              "existing": true,
              "type": "Microsoft.DevTestLab/labs",
              "apiVersion": "2018-09-15",
              "name": "[parameters('labName')]"
            },
            "cost": {
              "type": "Microsoft.DevTestLab/labs/costs",
              "apiVersion": "2018-09-15",
              "name": "[format('{0}/{1}', parameters('labName'), 'targetCost')]",
              "tags": "[parameters('tags')]",
              "properties": {
                "currencyCode": "[parameters('currencyCode')]",
                "startDateTime": "[parameters('cycleStartDateTime')]",
                "endDateTime": "[parameters('cycleEndDateTime')]",
                "targetCost": {
                  "target": "[parameters('target')]",
                  "cycleStartDateTime": "[parameters('cycleStartDateTime')]",
                  "cycleEndDateTime": "[parameters('cycleEndDateTime')]",
                  "cycleType": "[parameters('cycleType')]",
                  "status": "[parameters('status')]",
                  "costThresholds": [
                    {
                      "thresholdId": "00000000-0000-0000-0000-000000000001",
                      "percentageThreshold": {
                        "thresholdValue": 25
                      },
                      "displayOnChart": "[parameters('thresholdValue25DisplayOnChart')]",
                      "sendNotificationWhenExceeded": "[parameters('thresholdValue25SendNotificationWhenExceeded')]"
                    },
                    {
                      "thresholdId": "00000000-0000-0000-0000-000000000002",
                      "percentageThreshold": {
                        "thresholdValue": 50
                      },
                      "displayOnChart": "[parameters('thresholdValue50DisplayOnChart')]",
                      "sendNotificationWhenExceeded": "[parameters('thresholdValue50SendNotificationWhenExceeded')]"
                    },
                    {
                      "thresholdId": "00000000-0000-0000-0000-000000000003",
                      "percentageThreshold": {
                        "thresholdValue": 75
                      },
                      "displayOnChart": "[parameters('thresholdValue75DisplayOnChart')]",
                      "sendNotificationWhenExceeded": "[parameters('thresholdValue75SendNotificationWhenExceeded')]"
                    },
                    {
                      "thresholdId": "00000000-0000-0000-0000-000000000004",
                      "percentageThreshold": {
                        "thresholdValue": 100
                      },
                      "displayOnChart": "[parameters('thresholdValue100DisplayOnChart')]",
                      "sendNotificationWhenExceeded": "[parameters('thresholdValue100SendNotificationWhenExceeded')]"
                    },
                    {
                      "thresholdId": "00000000-0000-0000-0000-000000000005",
                      "percentageThreshold": {
                        "thresholdValue": 125
                      },
                      "displayOnChart": "[parameters('thresholdValue125DisplayOnChart')]",
                      "sendNotificationWhenExceeded": "[parameters('thresholdValue125SendNotificationWhenExceeded')]"
                    }
                  ]
                }
              },
              "dependsOn": [
                "lab"
              ]
            }
          },
          "outputs": {
            "name": {
              "type": "string",
              "metadata": {
                "description": "The name of the cost."
              },
              "value": "targetCost"
            },
            "resourceId": {
              "type": "string",
              "metadata": {
                "description": "The resource ID of the cost."
              },
              "value": "[resourceId('Microsoft.DevTestLab/labs/costs', parameters('labName'), 'targetCost')]"
            },
            "resourceGroupName": {
              "type": "string",
              "metadata": {
                "description": "The name of the resource group the cost was created in."
              },
              "value": "[resourceGroup().name]"
            }
          }
        }
      },
      "dependsOn": [
        "lab"
      ]
    }
  },
  "outputs": {
    "uniqueIdentifier": {
      "type": "string",
      "metadata": {
        "description": "The unique identifier for the lab. Used to track tags that the lab applies to each resource that it creates."
      },
      "value": "[reference('lab').uniqueIdentifier]"
    },
    "resourceGroupName": {
      "type": "string",
      "metadata": {
        "description": "The resource group the lab was deployed into."
      },
      "value": "[resourceGroup().name]"
    },
    "resourceId": {
      "type": "string",
      "metadata": {
        "description": "The resource ID of the lab."
      },
      "value": "[resourceId('Microsoft.DevTestLab/labs', parameters('name'))]"
    },
    "name": {
      "type": "string",
      "metadata": {
        "description": "The name of the lab."
      },
      "value": "[parameters('name')]"
    },
    "systemAssignedMIPrincipalId": {
      "type": "string",
      "metadata": {
        "description": "The principal ID of the system assigned identity."
      },
      "value": "[reference('lab', '2018-10-15-preview', 'full').identity.principalId]"
    },
    "location": {
      "type": "string",
      "metadata": {
        "description": "The location the resource was deployed into."
      },
      "value": "[reference('lab', '2018-10-15-preview', 'full').location]"
    }
  }
}