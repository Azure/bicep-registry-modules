{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "languageVersion": "2.0",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "_generator": {
      "name": "bicep",
      "version": "0.30.23.60470",
      "templateHash": "14560645908978883645"
    },
    "name": "Managed DevOps Pool",
    "description": "This module deploys the Managed DevOps Pool resource.",
    "owner": "Azure/module-maintainers"
  },
  "definitions": {
    "osProfileType": {
      "type": "object",
      "properties": {
        "logonType": {
          "type": "string",
          "allowedValues": [
            "Interactive",
            "Service"
          ],
          "metadata": {
            "description": "Required. The logon type of the machine."
          }
        },
        "secretsManagementSettings": {
          "type": "object",
          "properties": {
            "keyExportable": {
              "type": "bool",
              "metadata": {
                "description": "Required. The secret management settings of the machines in the pool."
              }
            },
            "observedCertificates": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "metadata": {
                "description": "Required. The list of certificates to install on all machines in the pool."
              }
            },
            "certificateStoreLocation": {
              "type": "string",
              "nullable": true,
              "metadata": {
                "description": "Optional. Where to store certificates on the machine."
              }
            }
          },
          "nullable": true,
          "metadata": {
            "description": "Optional. The secret management settings of the machines in the pool."
          }
        }
      },
      "metadata": {
        "__bicep_export!": true
      }
    },
    "storageProfileType": {
      "type": "object",
      "properties": {
        "osDiskStorageAccountType": {
          "type": "string",
          "allowedValues": [
            "Premium",
            "Standard",
            "StandardSSD"
          ],
          "nullable": true,
          "metadata": {
            "description": "Optional. The Azure SKU name of the machines in the pool."
          }
        },
        "dataDisks": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "caching": {
                "type": "string",
                "allowedValues": [
                  "None",
                  "ReadOnly",
                  "ReadWrite"
                ],
                "nullable": true,
                "metadata": {
                  "description": "Optional. The type of caching to be enabled for the data disks. The default value for caching is readwrite. For information about the caching options see: https://blogs.msdn.microsoft.com/windowsazurestorage/2012/06/27/exploring-windows-azure-drives-disks-and-images/."
                }
              },
              "diskSizeGiB": {
                "type": "int",
                "nullable": true,
                "metadata": {
                  "description": "Optional. The initial disk size in gigabytes."
                }
              },
              "driveLetter": {
                "type": "string",
                "nullable": true,
                "metadata": {
                  "description": "Optional. The drive letter for the empty data disk. If not specified, it will be the first available letter. Letters A, C, D, and E are not allowed."
                }
              },
              "storageAccountType": {
                "type": "string",
                "allowedValues": [
                  "Premium_LRS",
                  "Premium_ZRS",
                  "StandardSSD_LRS",
                  "StandardSSD_ZRS",
                  "Standard_LRS"
                ],
                "nullable": true,
                "metadata": {
                  "description": "Optional. The storage Account type to be used for the data disk. If omitted, the default is Standard_LRS."
                }
              }
            }
          },
          "nullable": true,
          "metadata": {
            "description": "Optional. A list of empty data disks to attach."
          }
        }
      },
      "nullable": true,
      "metadata": {
        "__bicep_export!": true
      }
    },
    "imageType": {
      "type": "object",
      "properties": {
        "aliases": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "nullable": true,
          "metadata": {
            "description": "Optional. List of aliases to reference the image by."
          }
        },
        "buffer": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "Optional. The percentage of the buffer to be allocated to this image."
          }
        },
        "wellKnownImageName": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "Conditional. The image to use from a well-known set of images made available to customers. Required if `resourceId` is not set."
          }
        },
        "resourceId": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "Conditional. The specific resource id of the marketplace or compute gallery image. Required if `wellKnownImageName` is not set."
          }
        }
      },
      "metadata": {
        "__bicep_export!": true
      }
    },
    "organizationProfileType": {
      "type": "object",
      "properties": {
        "kind": {
          "type": "string",
          "allowedValues": [
            "AzureDevOps"
          ],
          "metadata": {
            "description": "Required. Azure DevOps organization profile."
          }
        },
        "permissionProfile": {
          "type": "object",
          "properties": {
            "kind": {
              "type": "string",
              "allowedValues": [
                "CreatorOnly",
                "Inherit",
                "SpecificAccounts"
              ],
              "metadata": {
                "description": "Required. Determines who has admin permissions to the Azure DevOps pool."
              }
            },
            "groups": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "nullable": true,
              "metadata": {
                "description": "Optional. Group email addresses."
              }
            },
            "users": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "nullable": true,
              "metadata": {
                "description": "Optional. User email addresses."
              }
            }
          },
          "nullable": true,
          "metadata": {
            "description": "Optional. The type of permission which determines which accounts are admins on the Azure DevOps pool."
          }
        },
        "organizations": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "url": {
                "type": "string",
                "metadata": {
                  "description": "Required. The Azure DevOps organization URL in which the pool should be created."
                }
              },
              "projects": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "nullable": true,
                "metadata": {
                  "description": "Optional. List of projects in which the pool should be created."
                }
              },
              "parallelism": {
                "type": "int",
                "nullable": true,
                "minValue": 1,
                "maxValue": 10000,
                "metadata": {
                  "description": "Optional. How many machines can be created at maximum in this organization out of the maximumConcurrency of the pool."
                }
              }
            }
          },
          "metadata": {
            "description": "Required. The list of Azure DevOps organizations the pool should be present in.."
          }
        }
      },
      "metadata": {
        "__bicep_export!": true
      }
    },
    "dataDiskType": {
      "type": "array",
      "items": {
        "type": "object",
        "properties": {
          "caching": {
            "type": "string",
            "allowedValues": [
              "None",
              "ReadOnly",
              "ReadWrite"
            ],
            "nullable": true,
            "metadata": {
              "description": "Optional. The type of caching to be enabled for the data disks. The default value for caching is readwrite. For information about the caching options see: https://blogs.msdn.microsoft.com/windowsazurestorage/2012/06/27/exploring-windows-azure-drives-disks-and-images/."
            }
          },
          "diskSizeGiB": {
            "type": "int",
            "nullable": true,
            "metadata": {
              "description": "Optional. The initial disk size in gigabytes."
            }
          },
          "driveLetter": {
            "type": "string",
            "nullable": true,
            "metadata": {
              "description": "Optional. The drive letter for the empty data disk. If not specified, it will be the first available letter. Letters A, C, D, and E are not allowed."
            }
          },
          "storageAccountType": {
            "type": "string",
            "allowedValues": [
              "Premium_LRS",
              "Premium_ZRS",
              "StandardSSD_LRS",
              "StandardSSD_ZRS",
              "Standard_LRS"
            ],
            "nullable": true,
            "metadata": {
              "description": "Optional. The storage Account type to be used for the data disk. If omitted, the default is Standard_LRS."
            }
          }
        }
      },
      "nullable": true,
      "metadata": {
        "__bicep_export!": true
      }
    },
    "resourcePredictionsProfileAutomaticType": {
      "type": "object",
      "properties": {
        "kind": {
          "type": "string",
          "allowedValues": [
            "Automatic"
          ],
          "metadata": {
            "description": "Required. The stand-by agent scheme is determined based on historical demand."
          }
        },
        "predictionPreference": {
          "type": "string",
          "allowedValues": [
            "Balanced",
            "BestPerformance",
            "MoreCostEffective",
            "MorePerformance",
            "MostCostEffective"
          ],
          "metadata": {
            "description": "Required. Determines the balance between cost and performance."
          }
        }
      },
      "metadata": {
        "__bicep_export!": true
      }
    },
    "resourcePredictionsProfileManualType": {
      "type": "object",
      "properties": {
        "kind": {
          "type": "string",
          "allowedValues": [
            "Manual"
          ],
          "metadata": {
            "description": "Required. Customer provides the stand-by agent scheme."
          }
        }
      },
      "metadata": {
        "__bicep_export!": true
      }
    },
    "agentStatefulType": {
      "type": "object",
      "properties": {
        "kind": {
          "type": "string",
          "allowedValues": [
            "Stateful"
          ],
          "metadata": {
            "description": "Required. Stateful profile meaning that the machines will be returned to the pool after running a job."
          }
        },
        "maxAgentLifetime": {
          "type": "string",
          "metadata": {
            "description": "Required. How long should stateful machines be kept around. The maximum is one week."
          }
        },
        "gracePeriodTimeSpan": {
          "type": "string",
          "metadata": {
            "description": "Required. How long should the machine be kept around after it ran a workload when there are no stand-by agents. The maximum is one week."
          }
        },
        "resourcePredictions": {
          "type": "object",
          "nullable": true,
          "metadata": {
            "description": "Optional. Defines pool buffer/stand-by agents."
          }
        },
        "resourcePredictionsProfile": {
          "type": "object",
          "discriminator": {
            "propertyName": "kind",
            "mapping": {
              "Automatic": {
                "$ref": "#/definitions/resourcePredictionsProfileAutomaticType"
              },
              "Manual": {
                "$ref": "#/definitions/resourcePredictionsProfileManualType"
              }
            }
          },
          "nullable": true,
          "metadata": {
            "description": "Optional. Determines how the stand-by scheme should be provided."
          }
        }
      },
      "metadata": {
        "__bicep_export!": true
      }
    },
    "agentStatelessType": {
      "type": "object",
      "properties": {
        "kind": {
          "type": "string",
          "allowedValues": [
            "Stateless"
          ],
          "metadata": {
            "description": "Required. Stateless profile meaning that the machines will be cleaned up after running a job."
          }
        },
        "resourcePredictions": {
          "type": "object",
          "properties": {
            "timeZone": {
              "type": "string",
              "metadata": {
                "description": "Required. The time zone in which the daysData is provided. To see the list of available time zones, see: https://learn.microsoft.com/en-us/windows-hardware/manufacture/desktop/default-time-zones?view=windows-11#time-zones or via PowerShell command `(Get-TimeZone -ListAvailable).StandardName`."
              }
            },
            "daysData": {
              "type": "array",
              "items": {
                "type": "object"
              },
              "nullable": true,
              "metadata": {
                "example": "      [\n        { // Monday\n          '09:00': 5\n          '22:00': 0\n        }\n        {} // Tuesday\n        {} // Wednesday\n        {} // Thursday\n        { // Friday\n          '09:00': 5\n          '22:00': 0\n        }\n        {} // Saturday\n        {} // Sunday\n      ]\n      ",
                "description": "Optional. The number of agents needed at a specific time."
              }
            }
          },
          "nullable": true,
          "metadata": {
            "description": "Optional. Defines pool buffer/stand-by agents."
          }
        },
        "resourcePredictionsProfile": {
          "type": "object",
          "discriminator": {
            "propertyName": "kind",
            "mapping": {
              "Automatic": {
                "$ref": "#/definitions/resourcePredictionsProfileAutomaticType"
              },
              "Manual": {
                "$ref": "#/definitions/resourcePredictionsProfileManualType"
              }
            }
          },
          "nullable": true,
          "metadata": {
            "description": "Optional. Determines how the stand-by scheme should be provided."
          }
        }
      },
      "metadata": {
        "__bicep_export!": true
      }
    },
    "agentProfileType": {
      "type": "object",
      "discriminator": {
        "propertyName": "kind",
        "mapping": {
          "Stateful": {
            "$ref": "#/definitions/agentStatefulType"
          },
          "Stateless": {
            "$ref": "#/definitions/agentStatelessType"
          }
        }
      },
      "metadata": {
        "__bicep_export!": true
      }
    },
    "roleAssignmentType": {
      "type": "array",
      "items": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true,
            "metadata": {
              "description": "Optional. The name (as GUID) of the role assignment. If not provided, a GUID will be generated."
            }
          },
          "roleDefinitionIdOrName": {
            "type": "string",
            "metadata": {
              "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
            }
          },
          "principalId": {
            "type": "string",
            "metadata": {
              "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
            }
          },
          "principalType": {
            "type": "string",
            "allowedValues": [
              "Device",
              "ForeignGroup",
              "Group",
              "ServicePrincipal",
              "User"
            ],
            "nullable": true,
            "metadata": {
              "description": "Optional. The principal type of the assigned principal ID."
            }
          },
          "description": {
            "type": "string",
            "nullable": true,
            "metadata": {
              "description": "Optional. The description of the role assignment."
            }
          },
          "condition": {
            "type": "string",
            "nullable": true,
            "metadata": {
              "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
            }
          },
          "conditionVersion": {
            "type": "string",
            "allowedValues": [
              "2.0"
            ],
            "nullable": true,
            "metadata": {
              "description": "Optional. Version of the condition."
            }
          },
          "delegatedManagedIdentityResourceId": {
            "type": "string",
            "nullable": true,
            "metadata": {
              "description": "Optional. The Resource Id of the delegated managed identity resource."
            }
          }
        }
      },
      "nullable": true,
      "metadata": {
        "__bicep_export!": true
      }
    },
    "lockType": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "Optional. Specify the name of lock."
          }
        },
        "kind": {
          "type": "string",
          "allowedValues": [
            "CanNotDelete",
            "None",
            "ReadOnly"
          ],
          "nullable": true,
          "metadata": {
            "description": "Optional. Specify the type of lock."
          }
        }
      },
      "nullable": true,
      "metadata": {
        "__bicep_export!": true
      }
    },
    "diagnosticSettingType": {
      "type": "array",
      "items": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true,
            "metadata": {
              "description": "Optional. The name of diagnostic setting."
            }
          },
          "logCategoriesAndGroups": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "category": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Name of a Diagnostic Log category for a resource type this setting is applied to. Set the specific logs to collect here."
                  }
                },
                "categoryGroup": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Name of a Diagnostic Log category group for a resource type this setting is applied to. Set to `allLogs` to collect all logs."
                  }
                },
                "enabled": {
                  "type": "bool",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Enable or disable the category explicitly. Default is `true`."
                  }
                }
              }
            },
            "nullable": true,
            "metadata": {
              "description": "Optional. The name of logs that will be streamed. \"allLogs\" includes all possible logs for the resource. Set to `[]` to disable log collection."
            }
          },
          "metricCategories": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "category": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. Name of a Diagnostic Metric category for a resource type this setting is applied to. Set to `AllMetrics` to collect all metrics."
                  }
                },
                "enabled": {
                  "type": "bool",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Enable or disable the category explicitly. Default is `true`."
                  }
                }
              }
            },
            "nullable": true,
            "metadata": {
              "description": "Optional. The name of metrics that will be streamed. \"allMetrics\" includes all possible metrics for the resource. Set to `[]` to disable metric collection."
            }
          },
          "logAnalyticsDestinationType": {
            "type": "string",
            "allowedValues": [
              "AzureDiagnostics",
              "Dedicated"
            ],
            "nullable": true,
            "metadata": {
              "description": "Optional. A string indicating whether the export to Log Analytics should use the default destination type, i.e. AzureDiagnostics, or use a destination type."
            }
          },
          "workspaceResourceId": {
            "type": "string",
            "nullable": true,
            "metadata": {
              "description": "Optional. Resource ID of the diagnostic log analytics workspace. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
            }
          },
          "storageAccountResourceId": {
            "type": "string",
            "nullable": true,
            "metadata": {
              "description": "Optional. Resource ID of the diagnostic storage account. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
            }
          },
          "eventHubAuthorizationRuleResourceId": {
            "type": "string",
            "nullable": true,
            "metadata": {
              "description": "Optional. Resource ID of the diagnostic event hub authorization rule for the Event Hubs namespace in which the event hub should be created or streamed to."
            }
          },
          "eventHubName": {
            "type": "string",
            "nullable": true,
            "metadata": {
              "description": "Optional. Name of the diagnostic event hub within the namespace to which logs are streamed. Without this, an event hub is created for each log category. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
            }
          },
          "marketplacePartnerResourceId": {
            "type": "string",
            "nullable": true,
            "metadata": {
              "description": "Optional. The full ARM resource ID of the Marketplace resource to which you would like to send Diagnostic Logs."
            }
          }
        }
      },
      "nullable": true,
      "metadata": {
        "__bicep_export!": true
      }
    },
    "managedIdentitiesType": {
      "type": "object",
      "properties": {
        "systemAssigned": {
          "type": "bool",
          "nullable": true,
          "metadata": {
            "description": "Optional. Enables system assigned managed identity on the resource."
          }
        },
        "userAssignedResourceIds": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "nullable": true,
          "metadata": {
            "description": "Optional. The resource ID(s) to assign to the resource."
          }
        }
      },
      "nullable": true,
      "metadata": {
        "__bicep_export!": true
      }
    }
  },
  "parameters": {
    "name": {
      "type": "string",
      "metadata": {
        "description": "Required. Name of the pool. It needs to be globally unique."
      }
    },
    "fabricProfileSkuName": {
      "type": "string",
      "metadata": {
        "description": "Required. The Azure SKU name of the machines in the pool."
      }
    },
    "concurrency": {
      "type": "int",
      "minValue": 1,
      "maxValue": 10000,
      "metadata": {
        "description": "Required. Defines how many resources can there be created at any given time."
      }
    },
    "images": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/imageType"
      },
      "metadata": {
        "description": "Required. The VM images of the machines in the pool."
      }
    },
    "location": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "Optional. The geo-location where the resource lives."
      }
    },
    "devCenterProjectResourceId": {
      "type": "string",
      "metadata": {
        "description": "Required. The resource id of the DevCenter Project the pool belongs to."
      }
    },
    "subnetResourceId": {
      "type": "string",
      "nullable": true,
      "metadata": {
        "description": "Optional. The subnet id on which to put all machines created in the pool."
      }
    },
    "agentProfile": {
      "$ref": "#/definitions/agentProfileType",
      "metadata": {
        "description": "Required. Defines how the machine will be handled once it executed a job."
      }
    },
    "osProfile": {
      "$ref": "#/definitions/osProfileType",
      "defaultValue": {
        "logonType": "Interactive",
        "secretsManagementSettings": {
          "keyExportable": false,
          "observedCertificates": []
        }
      },
      "metadata": {
        "description": "Optional. The OS profile of the agents in the pool."
      }
    },
    "storageProfile": {
      "$ref": "#/definitions/storageProfileType",
      "metadata": {
        "description": "Optional. The storage profile of the machines in the pool."
      }
    },
    "organizationProfile": {
      "$ref": "#/definitions/organizationProfileType",
      "metadata": {
        "description": "Required. Defines the organization in which the pool will be used."
      }
    },
    "tags": {
      "type": "object",
      "nullable": true,
      "metadata": {
        "description": "Optional. Tags of the resource."
      }
    },
    "lock": {
      "$ref": "#/definitions/lockType",
      "metadata": {
        "description": "Optional. The lock settings of the service."
      }
    },
    "roleAssignments": {
      "$ref": "#/definitions/roleAssignmentType",
      "metadata": {
        "description": "Optional. Array of role assignments to create."
      }
    },
    "enableTelemetry": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Optional. Enable/Disable usage telemetry for module."
      }
    },
    "diagnosticSettings": {
      "$ref": "#/definitions/diagnosticSettingType",
      "metadata": {
        "description": "Optional. The diagnostic settings of the service."
      }
    },
    "managedIdentities": {
      "$ref": "#/definitions/managedIdentitiesType",
      "metadata": {
        "example": "  {\n    systemAssigned: true,\n    userAssignedResourceIds: [\n      '/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.ManagedIdentity/userAssignedIdentities/myManagedIdentity'\n    ]\n  }\n  {\n    systemAssigned: true\n  }\n  ",
        "description": "Optional. The managed service identities assigned to this resource."
      }
    }
  },
  "variables": {
    "copy": [
      {
        "name": "formattedRoleAssignments",
        "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]",
        "input": "[union(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')], createObject('roleDefinitionId', coalesce(tryGet(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName), if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName)))))]"
      }
    ],
    "builtInRoleNames": {
      "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
      "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
      "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
      "Role Based Access Control Administrator (Preview)": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]",
      "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]"
    },
    "formattedUserAssignedIdentities": "[reduce(map(coalesce(tryGet(parameters('managedIdentities'), 'userAssignedResourceIds'), createArray()), lambda('id', createObject(format('{0}', lambdaVariables('id')), createObject()))), createObject(), lambda('cur', 'next', union(lambdaVariables('cur'), lambdaVariables('next'))))]",
    "identity": "[if(not(empty(parameters('managedIdentities'))), createObject('type', if(coalesce(tryGet(parameters('managedIdentities'), 'systemAssigned'), false()), if(not(empty(coalesce(tryGet(parameters('managedIdentities'), 'userAssignedResourceIds'), createObject()))), 'SystemAssigned,UserAssigned', 'SystemAssigned'), if(not(empty(coalesce(tryGet(parameters('managedIdentities'), 'userAssignedResourceIds'), createObject()))), 'UserAssigned', 'None')), 'userAssignedIdentities', if(not(empty(variables('formattedUserAssignedIdentities'))), variables('formattedUserAssignedIdentities'), null())), null())]"
  },
  "resources": {
    "avmTelemetry": {
      "condition": "[parameters('enableTelemetry')]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2024-03-01",
      "name": "[format('46d3xbcp.res.devopsinfrastructure-pool.{0}.{1}', replace('-..--..-', '.', '-'), substring(uniqueString(deployment().name, parameters('location')), 0, 4))]",
      "properties": {
        "mode": "Incremental",
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "resources": [],
          "outputs": {
            "telemetry": {
              "type": "String",
              "value": "For more information, see https://aka.ms/avm/TelemetryInfo"
            }
          }
        }
      }
    },
    "managedDevOpsPool": {
      "type": "Microsoft.DevOpsInfrastructure/pools",
      "apiVersion": "2024-04-04-preview",
      "name": "[parameters('name')]",
      "location": "[parameters('location')]",
      "tags": "[parameters('tags')]",
      "identity": "[variables('identity')]",
      "properties": {
        "agentProfile": "[parameters('agentProfile')]",
        "devCenterProjectResourceId": "[parameters('devCenterProjectResourceId')]",
        "fabricProfile": {
          "sku": {
            "name": "[parameters('fabricProfileSkuName')]"
          },
          "networkProfile": "[if(not(empty(parameters('subnetResourceId'))), createObject('subnetId', parameters('subnetResourceId')), null())]",
          "osProfile": "[parameters('osProfile')]",
          "storageProfile": "[parameters('storageProfile')]",
          "kind": "Vmss",
          "images": "[parameters('images')]"
        },
        "maximumConcurrency": "[parameters('concurrency')]",
        "organizationProfile": "[parameters('organizationProfile')]"
      }
    },
    "managedDevOpsPool_lock": {
      "condition": "[and(not(empty(coalesce(parameters('lock'), createObject()))), not(equals(tryGet(parameters('lock'), 'kind'), 'None')))]",
      "type": "Microsoft.Authorization/locks",
      "apiVersion": "2020-05-01",
      "scope": "[format('Microsoft.DevOpsInfrastructure/pools/{0}', parameters('name'))]",
      "name": "[coalesce(tryGet(parameters('lock'), 'name'), format('lock-{0}', parameters('name')))]",
      "properties": {
        "level": "[coalesce(tryGet(parameters('lock'), 'kind'), '')]",
        "notes": "[if(equals(tryGet(parameters('lock'), 'kind'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot delete or modify the resource or child resources.')]"
      },
      "dependsOn": [
        "managedDevOpsPool"
      ]
    },
    "managedDevOpsPool_roleAssignments": {
      "copy": {
        "name": "managedDevOpsPool_roleAssignments",
        "count": "[length(coalesce(variables('formattedRoleAssignments'), createArray()))]"
      },
      "type": "Microsoft.Authorization/roleAssignments",
      "apiVersion": "2022-04-01",
      "scope": "[format('Microsoft.DevOpsInfrastructure/pools/{0}', parameters('name'))]",
      "name": "[coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'name'), guid(resourceId('Microsoft.DevOpsInfrastructure/pools', parameters('name')), coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId, coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId))]",
      "properties": {
        "roleDefinitionId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId]",
        "principalId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId]",
        "description": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'description')]",
        "principalType": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'principalType')]",
        "condition": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition')]",
        "conditionVersion": "[if(not(empty(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
        "delegatedManagedIdentityResourceId": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
      },
      "dependsOn": [
        "managedDevOpsPool"
      ]
    },
    "managedDevOpsPool_diagnosticSettings": {
      "copy": {
        "name": "managedDevOpsPool_diagnosticSettings",
        "count": "[length(coalesce(parameters('diagnosticSettings'), createArray()))]"
      },
      "type": "Microsoft.Insights/diagnosticSettings",
      "apiVersion": "2021-05-01-preview",
      "scope": "[format('Microsoft.DevOpsInfrastructure/pools/{0}', parameters('name'))]",
      "name": "[coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'name'), format('{0}-diagnosticSettings', parameters('name')))]",
      "properties": {
        "copy": [
          {
            "name": "metrics",
            "count": "[length(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics'))))]",
            "input": {
              "category": "[coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics')))[copyIndex('metrics')].category]",
              "enabled": "[coalesce(tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics')))[copyIndex('metrics')], 'enabled'), true())]",
              "timeGrain": null
            }
          },
          {
            "name": "logs",
            "count": "[length(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs'))))]",
            "input": {
              "categoryGroup": "[tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'categoryGroup')]",
              "category": "[tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'category')]",
              "enabled": "[coalesce(tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'enabled'), true())]"
            }
          }
        ],
        "storageAccountId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'storageAccountResourceId')]",
        "workspaceId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'workspaceResourceId')]",
        "eventHubAuthorizationRuleId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'eventHubAuthorizationRuleResourceId')]",
        "eventHubName": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'eventHubName')]",
        "marketplacePartnerId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'marketplacePartnerResourceId')]",
        "logAnalyticsDestinationType": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logAnalyticsDestinationType')]"
      },
      "dependsOn": [
        "managedDevOpsPool"
      ]
    }
  },
  "outputs": {
    "name": {
      "type": "string",
      "metadata": {
        "description": "The name of the Managed DevOps Pool."
      },
      "value": "[parameters('name')]"
    },
    "resourceId": {
      "type": "string",
      "metadata": {
        "description": "The resource ID of the Managed DevOps Pool."
      },
      "value": "[resourceId('Microsoft.DevOpsInfrastructure/pools', parameters('name'))]"
    },
    "resourceGroupName": {
      "type": "string",
      "metadata": {
        "description": "The name of the resource group the Managed DevOps Pool resource was deployed into."
      },
      "value": "[resourceGroup().name]"
    },
    "location": {
      "type": "string",
      "metadata": {
        "description": "The location the Managed DevOps Pool resource was deployed into."
      },
      "value": "[reference('managedDevOpsPool', '2024-04-04-preview', 'full').location]"
    },
    "systemAssignedMIPrincipalId": {
      "type": "string",
      "nullable": true,
      "metadata": {
        "description": "The principal ID of the system assigned identity."
      },
      "value": "[tryGet(tryGet(reference('managedDevOpsPool', '2024-04-04-preview', 'full'), 'identity'), 'principalId')]"
    }
  }
}