{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "languageVersion": "2.0",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "_generator": {
      "name": "bicep",
      "version": "0.36.1.42791",
      "templateHash": "1242762150122459787"
    },
    "name": "Dev Center",
    "description": "This module deploys an Azure Dev Center."
  },
  "definitions": {
    "devBoxProvisioningSettingsType": {
      "type": "object",
      "properties": {
        "installAzureMonitorAgentEnableStatus": {
          "type": "string",
          "allowedValues": [
            "Disabled",
            "Enabled"
          ],
          "nullable": true,
          "metadata": {
            "description": "Optional. Whether project catalogs associated with projects in this dev center can be configured to sync catalog items."
          }
        }
      },
      "metadata": {
        "description": "The type for Dev Box provisioning settings."
      }
    },
    "networkSettingsType": {
      "type": "object",
      "properties": {
        "microsoftHostedNetworkEnableStatus": {
          "type": "string",
          "allowedValues": [
            "Disabled",
            "Enabled"
          ],
          "nullable": true,
          "metadata": {
            "description": "Optional. Indicates whether pools in this Dev Center can use Microsoft Hosted Networks. Defaults to Enabled if not set."
          }
        }
      },
      "metadata": {
        "description": "The type for network settings."
      }
    },
    "projectCatalogSettingsType": {
      "type": "object",
      "properties": {
        "catalogItemSyncEnableStatus": {
          "type": "string",
          "allowedValues": [
            "Disabled",
            "Enabled"
          ],
          "nullable": true,
          "metadata": {
            "description": "Optional. Whether project catalogs associated with projects in this dev center can be configured to sync catalog items."
          }
        }
      },
      "metadata": {
        "description": "The type for project catalog settings."
      }
    },
    "catalogType": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "metadata": {
            "description": "Required. The name of the catalog. Must be between 3 and 63 characters and can contain alphanumeric characters, hyphens, underscores, and periods."
          }
        },
        "gitHub": {
          "$ref": "#/definitions/sourceType",
          "nullable": true,
          "metadata": {
            "description": "Optional. GitHub repository configuration for the catalog."
          }
        },
        "adoGit": {
          "$ref": "#/definitions/sourceType",
          "nullable": true,
          "metadata": {
            "description": "Optional. Azure DevOps Git repository configuration for the catalog."
          }
        },
        "syncType": {
          "type": "string",
          "allowedValues": [
            "Manual",
            "Scheduled"
          ],
          "nullable": true,
          "metadata": {
            "description": "Optional. Indicates the type of sync that is configured for the catalog. Defaults to \"Scheduled\"."
          }
        },
        "tags": {
          "type": "object",
          "nullable": true,
          "metadata": {
            "description": "Optional. Resource tags to apply to the catalog."
          }
        }
      },
      "metadata": {
        "__bicep_export!": true,
        "description": "The type for a Dev Center Catalog."
      }
    },
    "environmentTypeType": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "metadata": {
            "description": "Required. The name of the environment type."
          }
        },
        "displayName": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "Optional. The display name of the environment type."
          }
        },
        "tags": {
          "type": "object",
          "nullable": true,
          "metadata": {
            "description": "Optional. Tags of the resource."
          }
        }
      },
      "metadata": {
        "description": "The type for environment types."
      }
    },
    "projectPolicyType": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "metadata": {
            "description": "Required. The name of the project policy."
          }
        },
        "resourcePolicies": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/resourcePolicyType"
          },
          "metadata": {
            "description": "Required. Resource policies that are a part of this project policy."
          }
        },
        "projectsResourceIdOrName": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "nullable": true,
          "metadata": {
            "description": "Optional. Project names or resource IDs that will be in scope of this project policy. Project names can be used if the project is in the same resource group as the Dev Center. If the project is in a different resource group or subscription, the full resource ID must be provided. If not provided, the policy status will be set to \"Unassigned\"."
          }
        }
      },
      "metadata": {
        "description": "The type for project policies."
      }
    },
    "devCenterGalleryType": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "minLength": 3,
          "maxLength": 63,
          "metadata": {
            "description": "Required. It must be between 3 and 63 characters, can only include alphanumeric characters, underscores and periods, and can not start or end with \".\" or \"_\"."
          }
        },
        "galleryResourceId": {
          "type": "string",
          "metadata": {
            "description": "Required. The resource ID of the backing Azure Compute Gallery. The devcenter identity (system or user) must have \"Contributor\" access to the gallery."
          }
        },
        "devCenterIdentityPrincipalId": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "Optional. The principal ID of the Dev Center identity (system or user) that will be assigned the \"Contributor\" role on the backing Azure Compute Gallery. This is only required if the Dev Center identity has not been granted the right permissions on the gallery. The portal experience handles this automatically. Note that the identity performing the deployment must have permissions to perform role assignments on the resource group of the gallery to assign the role, otherwise the deployment will fail."
          }
        }
      },
      "metadata": {
        "description": "The type for Dev Center Gallery."
      }
    },
    "attachedNetworkType": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "metadata": {
            "description": "Required. The name of the attached network."
          }
        },
        "networkConnectionResourceId": {
          "type": "string",
          "metadata": {
            "description": "Required. The resource ID of the Network Connection you want to attach to the Dev Center."
          }
        }
      },
      "metadata": {
        "description": "The type for Dev Center Attached Network."
      }
    },
    "devboxDefinitionType": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "metadata": {
            "description": "Required. The name of the DevBox definition."
          }
        },
        "imageResourceId": {
          "type": "string",
          "metadata": {
            "description": "Required. The Image ID, or Image version ID. When Image ID is provided, its latest version will be used. When using custom images from a compute gallery, Microsoft Dev Box supports only images that are compatible with Dev Box and use the security type Trusted Launch enabled. See \"https://learn.microsoft.com/en-us/azure/dev-box/how-to-configure-azure-compute-gallery#compute-gallery-image-requirements\" for more information about image requirements."
          }
        },
        "sku": {
          "$ref": "#/definitions/skuType",
          "metadata": {
            "description": "Required. The SKU configuration for the dev box definition. See \"https://learn.microsoft.com/en-us/rest/api/devcenter/administrator/skus/list-by-subscription?view=rest-devcenter-administrator-2024-02-01\" for more information about SKUs."
          }
        },
        "hibernateSupport": {
          "type": "string",
          "allowedValues": [
            "Disabled",
            "Enabled"
          ],
          "nullable": true,
          "metadata": {
            "description": "Optional. Settings for hibernation support."
          }
        },
        "location": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "Optional. Location for the DevBox definition."
          }
        },
        "tags": {
          "type": "object",
          "nullable": true,
          "metadata": {
            "description": "Optional. Tags of the resource."
          }
        }
      },
      "metadata": {
        "description": "The type for Dev Box definitions."
      }
    },
    "projectType": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "minLength": 3,
          "maxLength": 63,
          "metadata": {
            "description": "Required. The name of the project."
          }
        },
        "displayName": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "Optional. The display name of project."
          }
        },
        "description": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "Optional. The description of the project."
          }
        },
        "location": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "Optional. Location for the project."
          }
        },
        "tags": {
          "type": "object",
          "nullable": true,
          "metadata": {
            "description": "Optional. Resource tags to apply to the project."
          }
        },
        "lock": {
          "$ref": "#/definitions/lockType",
          "nullable": true,
          "metadata": {
            "description": "Optional. The lock settings of the project."
          }
        },
        "roleAssignments": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/roleAssignmentType"
          },
          "nullable": true,
          "metadata": {
            "description": "Optional. Array of role assignments to create for the project."
          }
        },
        "managedIdentities": {
          "$ref": "#/definitions/managedIdentityAllType",
          "nullable": true,
          "metadata": {
            "description": "Optional. The managed identity definition for the project resource. Only one user assigned identity can be used per project."
          }
        },
        "resourceGroupResourceId": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "Optional. The resource group resource ID where the project will be deployed. If not provided, the project will be deployed to the same resource group as the Dev Center."
          }
        },
        "catalogSettings": {
          "$ref": "#/definitions/catalogSettingsType",
          "nullable": true,
          "metadata": {
            "description": "Optional. Settings to be used when associating a project with a catalog. The Dev Center this project is associated with must allow configuring catalog item sync types before configuring project level catalog settings."
          }
        },
        "maxDevBoxesPerUser": {
          "type": "int",
          "nullable": true,
          "minValue": 0,
          "metadata": {
            "description": "Optional. When specified, limits the maximum number of Dev Boxes a single user can create across all pools in the project. This will have no effect on existing Dev Boxes when reduced."
          }
        },
        "environmentTypes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/projectEnvironmentTypeType"
          },
          "nullable": true,
          "metadata": {
            "description": "Optional. The environment types to create. Environment types must be first created in the Dev Center and then made available to a project using project level environment types. The name should be equivalent to the name of the environment type in the Dev Center."
          }
        },
        "pools": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string",
                "minLength": 3,
                "maxLength": 63,
                "metadata": {
                  "description": "Required. The name of the project pool. This name must be unique within a project and is visible to developers when creating dev boxes."
                }
              },
              "displayName": {
                "type": "string",
                "nullable": true,
                "metadata": {
                  "description": "Optional. The display name of the pool."
                }
              },
              "devBoxDefinitionType": {
                "type": "string",
                "allowedValues": [
                  "Reference",
                  "Value"
                ],
                "nullable": true,
                "metadata": {
                  "description": "Optional. Indicates if the pool is created from an existing Dev Box Definition or if one is provided directly. Defaults to \"Reference\"."
                }
              },
              "devBoxDefinitionName": {
                "type": "string",
                "metadata": {
                  "description": "Required. Name of a Dev Box definition in parent Project of this Pool. If creating a pool from a definition defined in the Dev Center, then this will be the name of the definition. If creating a pool from a custom definition (e.g. Team Customizations), first the catalog must be added to this project, and second must use the format \"\\~Catalog\\~{catalogName}\\~{imagedefinition YAML name}\" (e.g. \"\\~Catalog\\~eshopRepo\\~frontend-dev\")."
                }
              },
              "devBoxDefinition": {
                "$ref": "#/definitions/devBoxDefinitionTypeType",
                "nullable": true,
                "metadata": {
                  "description": "Conditional. A definition of the machines that are created from this Pool. Required if devBoxDefinitionType is \"Value\"."
                }
              },
              "tags": {
                "type": "object",
                "nullable": true,
                "metadata": {
                  "description": "Optional. Resource tags to apply to the pool."
                }
              },
              "localAdministrator": {
                "type": "string",
                "allowedValues": [
                  "Disabled",
                  "Enabled"
                ],
                "metadata": {
                  "description": "Required. Each dev box creator will be granted the selected permissions on the dev boxes they create. Indicates whether owners of Dev Boxes in this pool are added as a \"local administrator\" or \"standard user\" on the Dev Box."
                }
              },
              "virtualNetworkType": {
                "type": "string",
                "allowedValues": [
                  "Managed",
                  "Unmanaged"
                ],
                "metadata": {
                  "description": "Required. Indicates whether the pool uses a Virtual Network managed by Microsoft or a customer provided network. For the easiest configuration experience, the Microsoft hosted network can be used for dev box deployment. For organizations that require customized networking, use a network connection resource."
                }
              },
              "managedVirtualNetworkRegion": {
                "type": "string",
                "nullable": true,
                "metadata": {
                  "description": "Conditional. The region of the managed virtual network. Required if virtualNetworkType is \"Managed\"."
                }
              },
              "networkConnectionName": {
                "type": "string",
                "nullable": true,
                "metadata": {
                  "description": "Conditional. Name of a Network Connection in parent Project of this Pool. Required if virtualNetworkType is \"Unmanaged\". The region hosting a pool is determined by the region of the network connection. For best performance, create a dev box pool for every region where your developers are located. The network connection cannot be configured with \"None\" domain join type and must be first attached to the Dev Center before used by the pool. Will be set to \"managedNetwork\" if virtualNetworkType is \"Managed\"."
                }
              },
              "singleSignOnStatus": {
                "type": "string",
                "allowedValues": [
                  "Disabled",
                  "Enabled"
                ],
                "nullable": true,
                "metadata": {
                  "description": "Optional. Indicates whether Dev Boxes in this pool are created with single sign on enabled. The also requires that single sign on be enabled on the tenant. Changing this setting will not affect existing dev boxes."
                }
              },
              "stopOnDisconnect": {
                "$ref": "#/definitions/stopOnDisconnectType",
                "nullable": true,
                "metadata": {
                  "description": "Optional. Stop on \"disconnect\" configuration settings for Dev Boxes created in this pool. Dev boxes in this pool will hibernate after the grace period after the user disconnects."
                }
              },
              "stopOnNoConnect": {
                "$ref": "#/definitions/stopOnNoConnectType",
                "nullable": true,
                "metadata": {
                  "description": "Optional. Stop on \"no connect\" configuration settings for Dev Boxes created in this pool. Dev boxes in this pool will hibernate after the grace period if the user never connects."
                }
              },
              "schedule": {
                "$ref": "#/definitions/poolScheduleType",
                "nullable": true,
                "metadata": {
                  "description": "Optional. The schedule for the pool. Dev boxes in this pool will auto-stop every day as per the schedule configuration."
                }
              },
              "location": {
                "type": "string",
                "nullable": true,
                "metadata": {
                  "description": "Optional. Location for the pool."
                }
              }
            }
          },
          "nullable": true,
          "metadata": {
            "description": "Optional. The type of pool to create in the project. A project pool is a container for dev boxes that share the same configuration, like a dev box definition and a network connection. Essentially, a project pool defines the specifications for the dev boxes that developers can create from a specific project in the Dev Box service."
          }
        },
        "catalogs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/catalogType"
          },
          "nullable": true,
          "metadata": {
            "description": "Optional. The catalogs to create in the project. Catalogs are templates from a git repository that can be used to create environments."
          }
        }
      },
      "metadata": {
        "description": "The type for Dev Center Projects."
      }
    },
    "_1.managedIdentityAllType": {
      "type": "object",
      "properties": {
        "systemAssigned": {
          "type": "bool",
          "nullable": true,
          "metadata": {
            "description": "Optional. Enables system assigned managed identity on the resource."
          }
        },
        "userAssignedResourceIds": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "nullable": true,
          "metadata": {
            "description": "Optional. The resource ID(s) to assign to the resource. Required if a user assigned identity is used for encryption."
          }
        }
      },
      "metadata": {
        "__bicep_imported_from!": {
          "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/res/dev-center/project:0.1.0"
        },
        "description": "An AVM-aligned type for a managed identity configuration. To be used if both a system-assigned & user-assigned identities are supported by the resource provider."
      }
    },
    "_1.roleAssignmentType": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "Optional. The name (as GUID) of the role assignment. If not provided, a GUID will be generated."
          }
        },
        "roleDefinitionIdOrName": {
          "type": "string",
          "metadata": {
            "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
          }
        },
        "principalId": {
          "type": "string",
          "metadata": {
            "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
          }
        },
        "principalType": {
          "type": "string",
          "allowedValues": [
            "Device",
            "ForeignGroup",
            "Group",
            "ServicePrincipal",
            "User"
          ],
          "nullable": true,
          "metadata": {
            "description": "Optional. The principal type of the assigned principal ID."
          }
        },
        "description": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "Optional. The description of the role assignment."
          }
        },
        "condition": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
          }
        },
        "conditionVersion": {
          "type": "string",
          "allowedValues": [
            "2.0"
          ],
          "nullable": true,
          "metadata": {
            "description": "Optional. Version of the condition."
          }
        },
        "delegatedManagedIdentityResourceId": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "Optional. The Resource Id of the delegated managed identity resource."
          }
        }
      },
      "metadata": {
        "__bicep_imported_from!": {
          "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/res/dev-center/project:0.1.0"
        },
        "description": "An AVM-aligned type for a role assignment."
      }
    },
    "_1.userRoleAssignmentsRolesType": {
      "type": "object",
      "properties": {
        "objectId": {
          "type": "string",
          "metadata": {
            "description": "Required. The object ID of the user, group, service principal, or managed identity."
          }
        },
        "roleDefinitions": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "metadata": {
            "description": "Required. An array of role definition GUIDs to assign to the object."
          }
        }
      },
      "metadata": {
        "__bicep_imported_from!": {
          "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/res/dev-center/project:0.1.0"
        },
        "description": "The type for additional role assignments."
      }
    },
    "catalogSettingsType": {
      "type": "object",
      "properties": {
        "catalogItemSyncTypes": {
          "type": "array",
          "allowedValues": [
            "EnvironmentDefinition",
            "ImageDefinition"
          ],
          "nullable": true,
          "metadata": {
            "description": "Optional. Indicates catalog item types that can be synced."
          }
        }
      },
      "metadata": {
        "description": "Settings to be used when associating a project with a catalog.",
        "__bicep_imported_from!": {
          "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/res/dev-center/project:0.1.0"
        }
      }
    },
    "devBoxDefinitionTypeType": {
      "type": "object",
      "properties": {
        "imageReferenceResourceId": {
          "type": "string",
          "metadata": {
            "description": "Required. The resource ID of the image reference for the dev box definition. This would be the resource ID of the project image where the image has the same name as the dev box definition name. If the dev box definition is created from a catalog, then this would be the resource ID of the image in the project that was created from the catalog. The format is \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevCenter/projects/{projectName}/images/~Catalog~{catalogName}~{imagedefinition YAML name}\"."
          }
        },
        "sku": {
          "type": "object",
          "properties": {
            "capacity": {
              "type": "int",
              "nullable": true,
              "metadata": {
                "description": "Optional. If the SKU supports scale out/in then the capacity integer should be included. If scale out/in is not possible for the resource this may be omitted."
              }
            },
            "family": {
              "type": "string",
              "nullable": true,
              "metadata": {
                "description": "Optional. If the service has different generations of hardware, for the same SKU, then that can be captured here. For example, \"general_i_v2\"."
              }
            },
            "name": {
              "type": "string",
              "metadata": {
                "description": "Required. The name of the SKU. E.g. P3. It is typically a letter+number code. E.g. \"general_i_8c32gb256ssd_v2\" or \"general_i_8c32gb512ssd_v2\". See \"https://learn.microsoft.com/en-us/python/api/azure-developer-devcenter/azure.developer.devcenter.models.hardwareprofile\" for more information about acceptable SKU names."
              }
            },
            "size": {
              "type": "string",
              "nullable": true,
              "metadata": {
                "description": "Optional. The SKU size. When the name field is the combination of tier and some other value, this would be the standalone code."
              }
            }
          },
          "metadata": {
            "description": "Required. The SKU configuration for the dev box definition. See \"https://learn.microsoft.com/en-us/rest/api/devcenter/administrator/skus/list-by-subscription?view=rest-devcenter-administrator-2024-02-01\" for more information about SKUs."
          }
        }
      },
      "metadata": {
        "description": "The type for dev box definition.",
        "__bicep_imported_from!": {
          "sourceTemplate": "../project/pool/main.bicep"
        }
      }
    },
    "diagnosticSettingFullType": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "Optional. The name of the diagnostic setting."
          }
        },
        "logCategoriesAndGroups": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "category": {
                "type": "string",
                "nullable": true,
                "metadata": {
                  "description": "Optional. Name of a Diagnostic Log category for a resource type this setting is applied to. Set the specific logs to collect here."
                }
              },
              "categoryGroup": {
                "type": "string",
                "nullable": true,
                "metadata": {
                  "description": "Optional. Name of a Diagnostic Log category group for a resource type this setting is applied to. Set to `allLogs` to collect all logs."
                }
              },
              "enabled": {
                "type": "bool",
                "nullable": true,
                "metadata": {
                  "description": "Optional. Enable or disable the category explicitly. Default is `true`."
                }
              }
            }
          },
          "nullable": true,
          "metadata": {
            "description": "Optional. The name of logs that will be streamed. \"allLogs\" includes all possible logs for the resource. Set to `[]` to disable log collection."
          }
        },
        "metricCategories": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "category": {
                "type": "string",
                "metadata": {
                  "description": "Required. Name of a Diagnostic Metric category for a resource type this setting is applied to. Set to `AllMetrics` to collect all metrics."
                }
              },
              "enabled": {
                "type": "bool",
                "nullable": true,
                "metadata": {
                  "description": "Optional. Enable or disable the category explicitly. Default is `true`."
                }
              }
            }
          },
          "nullable": true,
          "metadata": {
            "description": "Optional. The name of metrics that will be streamed. \"allMetrics\" includes all possible metrics for the resource. Set to `[]` to disable metric collection."
          }
        },
        "logAnalyticsDestinationType": {
          "type": "string",
          "allowedValues": [
            "AzureDiagnostics",
            "Dedicated"
          ],
          "nullable": true,
          "metadata": {
            "description": "Optional. A string indicating whether the export to Log Analytics should use the default destination type, i.e. AzureDiagnostics, or use a destination type."
          }
        },
        "workspaceResourceId": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "Optional. Resource ID of the diagnostic log analytics workspace. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
          }
        },
        "storageAccountResourceId": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "Optional. Resource ID of the diagnostic storage account. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
          }
        },
        "eventHubAuthorizationRuleResourceId": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "Optional. Resource ID of the diagnostic event hub authorization rule for the Event Hubs namespace in which the event hub should be created or streamed to."
          }
        },
        "eventHubName": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "Optional. Name of the diagnostic event hub within the namespace to which logs are streamed. Without this, an event hub is created for each log category. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
          }
        },
        "marketplacePartnerResourceId": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "Optional. The full ARM resource ID of the Marketplace resource to which you would like to send Diagnostic Logs."
          }
        }
      },
      "metadata": {
        "description": "An AVM-aligned type for a diagnostic setting. To be used if both logs & metrics are supported by the resource provider.",
        "__bicep_imported_from!": {
          "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.6.0"
        }
      }
    },
    "lockType": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "Optional. Specify the name of lock."
          }
        },
        "kind": {
          "type": "string",
          "allowedValues": [
            "CanNotDelete",
            "None",
            "ReadOnly"
          ],
          "nullable": true,
          "metadata": {
            "description": "Optional. Specify the type of lock."
          }
        },
        "notes": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "Optional. Specify the notes of the lock."
          }
        }
      },
      "metadata": {
        "description": "An AVM-aligned type for a lock.",
        "__bicep_imported_from!": {
          "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.6.0"
        }
      }
    },
    "managedIdentityAllType": {
      "type": "object",
      "properties": {
        "systemAssigned": {
          "type": "bool",
          "nullable": true,
          "metadata": {
            "description": "Optional. Enables system assigned managed identity on the resource."
          }
        },
        "userAssignedResourceIds": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "nullable": true,
          "metadata": {
            "description": "Optional. The resource ID(s) to assign to the resource. Required if a user assigned identity is used for encryption."
          }
        }
      },
      "metadata": {
        "description": "An AVM-aligned type for a managed identity configuration. To be used if both a system-assigned & user-assigned identities are supported by the resource provider.",
        "__bicep_imported_from!": {
          "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.6.0"
        }
      }
    },
    "poolScheduleType": {
      "type": "object",
      "properties": {
        "state": {
          "type": "string",
          "allowedValues": [
            "Disabled",
            "Enabled"
          ],
          "metadata": {
            "description": "Required. Indicates whether or not this scheduled task is enabled. Allowed values: Disabled, Enabled."
          }
        },
        "time": {
          "type": "string",
          "metadata": {
            "description": "Required. The target time to trigger the action. The format is HH:MM. For example, \"14:30\" for 2:30 PM."
          }
        },
        "timeZone": {
          "type": "string",
          "metadata": {
            "description": "Required. The IANA timezone id at which the schedule should execute. For example, \"Australia/Sydney\", \"Canada/Central\"."
          }
        }
      },
      "metadata": {
        "description": "The type for the pool schedule.",
        "__bicep_imported_from!": {
          "sourceTemplate": "../project/pool/main.bicep"
        }
      }
    },
    "projectEnvironmentTypeType": {
      "type": "object",
      "properties": {
        "creatorRoleAssignmentRoles": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "metadata": {
            "description": "Required. An array specifying the role definitions (permissions) GUIDs that will be granted to the user that creates a given environment of this type. These can be both built-in or custom role definitions. At least one role must be specified."
          }
        },
        "displayName": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "Optional. The display name of the environment type."
          }
        },
        "deploymentTargetSubscriptionResourceId": {
          "type": "string",
          "metadata": {
            "description": "Required. The subscription Resource ID where the environment type will be mapped to. The environment's resources will be deployed into this subscription. Should be in the format \"/subscriptions/{subscriptionId}\"."
          }
        },
        "managedIdentities": {
          "$ref": "#/definitions/_1.managedIdentityAllType",
          "nullable": true,
          "metadata": {
            "description": "Optional. The managed identity definition for this resource. If using user assigned identities, they must be first associated to the project that this environment type is created in and only one user identity can be used per project. At least one identity (system assigned or user assigned) must be enabled for deployment. The default is set to system assigned identity."
          }
        },
        "name": {
          "type": "string",
          "metadata": {
            "description": "Required. The name of the environment type. The environment type must be first created in the Dev Center and then made available to a project using project level environment types. The name should be equivalent to the name of the environment type in the Dev Center."
          }
        },
        "status": {
          "type": "string",
          "allowedValues": [
            "Disabled",
            "Enabled"
          ],
          "nullable": true,
          "metadata": {
            "description": "Optional. Defines whether this Environment Type can be used in this Project. The default is \"Enabled\"."
          }
        },
        "roleAssignments": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/_1.roleAssignmentType"
          },
          "nullable": true,
          "metadata": {
            "description": "Optional. Array of role assignments to create."
          }
        },
        "tags": {
          "type": "object",
          "nullable": true,
          "metadata": {
            "__bicep_resource_derived_type!": {
              "source": "Microsoft.DevCenter/projects/environmentTypes@2025-02-01#properties/tags"
            },
            "description": "Optional. Resource tags to apply to the environment type."
          }
        },
        "userRoleAssignmentsRoles": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/_1.userRoleAssignmentsRolesType"
          },
          "nullable": true,
          "metadata": {
            "description": "Optional. A collection of additional object IDs of users, groups, service principals or managed identities be granted permissions on each environment of this type. Each identity can have multiple role definitions (permissions) GUIDs assigned to it. These can be either built-in or custom role definitions."
          }
        }
      },
      "metadata": {
        "description": "The type for the environment type.",
        "__bicep_imported_from!": {
          "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/res/dev-center/project:0.1.0",
          "originalIdentifier": "environmentTypeType"
        }
      }
    },
    "resourcePolicyType": {
      "type": "object",
      "properties": {
        "action": {
          "type": "string",
          "allowedValues": [
            "Allow",
            "Deny"
          ],
          "nullable": true,
          "metadata": {
            "description": "Optional. Policy action to be taken on the resources. Defaults to \"Allow\" if not specified. Cannot be used when the \"resources\" property is provided."
          }
        },
        "filter": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "Optional. When specified, this expression is used to filter the resources."
          }
        },
        "resources": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "Optional. Explicit resources that are \"allowed\" as part of a project policy. Must be in the format of a resource ID. Cannot be used when the \"resourceType\" property is provided."
          }
        },
        "resourceType": {
          "type": "string",
          "allowedValues": [
            "AttachedNetworks",
            "Images",
            "Skus"
          ],
          "nullable": true,
          "metadata": {
            "description": "Optional. The resource type being restricted or allowed by a project policy. Used with a given \"action\" to restrict or allow access to a resource type. If not specified for a given policy, the action will be set to \"Allow\" for the unspecified resource types. For example, if the action is \"Deny\" for \"Images\" and \"Skus\", the project policy will deny access to images and skus, but allow access for remaining resource types like \"AttachedNetworks\"."
          }
        }
      },
      "metadata": {
        "description": "A resource policy for a Dev Center Project Policy. Each policy can specify an action (Allow/Deny), an optional filter, the resources included, and an optional resource type.",
        "__bicep_imported_from!": {
          "sourceTemplate": "project-policy/main.bicep"
        }
      }
    },
    "roleAssignmentType": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "Optional. The name (as GUID) of the role assignment. If not provided, a GUID will be generated."
          }
        },
        "roleDefinitionIdOrName": {
          "type": "string",
          "metadata": {
            "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
          }
        },
        "principalId": {
          "type": "string",
          "metadata": {
            "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
          }
        },
        "principalType": {
          "type": "string",
          "allowedValues": [
            "Device",
            "ForeignGroup",
            "Group",
            "ServicePrincipal",
            "User"
          ],
          "nullable": true,
          "metadata": {
            "description": "Optional. The principal type of the assigned principal ID."
          }
        },
        "description": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "Optional. The description of the role assignment."
          }
        },
        "condition": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
          }
        },
        "conditionVersion": {
          "type": "string",
          "allowedValues": [
            "2.0"
          ],
          "nullable": true,
          "metadata": {
            "description": "Optional. Version of the condition."
          }
        },
        "delegatedManagedIdentityResourceId": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "Optional. The Resource Id of the delegated managed identity resource."
          }
        }
      },
      "metadata": {
        "description": "An AVM-aligned type for a role assignment.",
        "__bicep_imported_from!": {
          "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.6.0"
        }
      }
    },
    "skuType": {
      "type": "object",
      "properties": {
        "capacity": {
          "type": "int",
          "nullable": true,
          "metadata": {
            "description": "Optional. If the SKU supports scale out/in then the capacity integer should be included. If scale out/in is not possible for the resource this may be omitted."
          }
        },
        "family": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "Optional. If the service has different generations of hardware, for the same SKU, then that can be captured here. For example, \"general_i_v2\"."
          }
        },
        "name": {
          "type": "string",
          "metadata": {
            "description": "Required. The name of the SKU. E.g. P3. It is typically a letter+number code. E.g. \"general_i_8c32gb256ssd_v2\" or \"general_i_8c32gb512ssd_v2\". See \"https://learn.microsoft.com/en-us/python/api/azure-developer-devcenter/azure.developer.devcenter.models.hardwareprofile\" for more information about acceptable SKU names."
          }
        },
        "size": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "Optional. The SKU size. When the name field is the combination of tier and some other value, this would be the standalone code."
          }
        }
      },
      "metadata": {
        "description": "The type for the SKU configuration of the DevBox definition.",
        "__bicep_imported_from!": {
          "sourceTemplate": "devboxdefinition/main.bicep"
        }
      }
    },
    "sourceType": {
      "type": "object",
      "properties": {
        "uri": {
          "type": "string",
          "metadata": {
            "description": "Required. The Git repository URI."
          }
        },
        "branch": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "Optional. The Git branch to use. Defaults to \"main\"."
          }
        },
        "path": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "Optional. The folder path within the repository. Defaults to \"/\"."
          }
        },
        "secretIdentifier": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "Optional. A reference to the Key Vault secret containing a Personal Access Token (PAT) to authenticate to a Git repository. Not required for Azure DevOps with Managed Identity authentication or GitHub with App Center."
          }
        }
      },
      "metadata": {
        "description": "The type for Git catalog configuration (common properties for both GitHub and Azure DevOps Git).",
        "__bicep_imported_from!": {
          "sourceTemplate": "catalog/main.bicep"
        }
      }
    },
    "stopOnDisconnectType": {
      "type": "object",
      "properties": {
        "gracePeriodMinutes": {
          "type": "int",
          "metadata": {
            "description": "Required. The specified time in minutes to wait before stopping a Dev Box once disconnect is detected."
          }
        },
        "status": {
          "type": "string",
          "allowedValues": [
            "Disabled",
            "Enabled"
          ],
          "metadata": {
            "description": "Required. Whether the feature to stop the Dev Box on disconnect once the grace period has lapsed is enabled."
          }
        }
      },
      "metadata": {
        "description": "The type for stopOnDisconnect configuration.",
        "__bicep_imported_from!": {
          "sourceTemplate": "../project/pool/main.bicep"
        }
      }
    },
    "stopOnNoConnectType": {
      "type": "object",
      "properties": {
        "gracePeriodMinutes": {
          "type": "int",
          "metadata": {
            "description": "Required. The specified time in minutes to wait before stopping a Dev Box if no connection is made."
          }
        },
        "status": {
          "type": "string",
          "allowedValues": [
            "Disabled",
            "Enabled"
          ],
          "metadata": {
            "description": "Required. Enables the feature to stop a started Dev Box when it has not been connected to, once the grace period has lapsed."
          }
        }
      },
      "metadata": {
        "description": "The type for stopOnNoConnect configuration.",
        "__bicep_imported_from!": {
          "sourceTemplate": "../project/pool/main.bicep"
        }
      }
    }
  },
  "parameters": {
    "name": {
      "type": "string",
      "minLength": 3,
      "maxLength": 26,
      "metadata": {
        "description": "Required. Name of the Dev Center."
      }
    },
    "location": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "Optional. Location for all Resources."
      }
    },
    "tags": {
      "type": "object",
      "metadata": {
        "__bicep_resource_derived_type!": {
          "source": "Microsoft.DevCenter/devcenters@2025-02-01#properties/tags"
        },
        "description": "Optional. Tags of the resource."
      },
      "nullable": true
    },
    "lock": {
      "$ref": "#/definitions/lockType",
      "nullable": true,
      "metadata": {
        "description": "Optional. The lock settings of the service."
      }
    },
    "roleAssignments": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/roleAssignmentType"
      },
      "nullable": true,
      "metadata": {
        "description": "Optional. Array of role assignments to create."
      }
    },
    "managedIdentities": {
      "$ref": "#/definitions/managedIdentityAllType",
      "nullable": true,
      "metadata": {
        "description": "Optional. The managed identity definition for this resource."
      }
    },
    "diagnosticSettings": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/diagnosticSettingFullType"
      },
      "nullable": true,
      "metadata": {
        "description": "Optional. The diagnostic settings of the service."
      }
    },
    "displayName": {
      "type": "string",
      "nullable": true,
      "metadata": {
        "description": "Optional. The display name of the Dev Center."
      }
    },
    "enableTelemetry": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Optional. Enable/Disable usage telemetry for module."
      }
    },
    "devBoxProvisioningSettings": {
      "$ref": "#/definitions/devBoxProvisioningSettingsType",
      "nullable": true,
      "metadata": {
        "description": "Optional. Settings to be used in the provisioning of all Dev Boxes that belong to this dev center."
      }
    },
    "networkSettings": {
      "$ref": "#/definitions/networkSettingsType",
      "nullable": true,
      "metadata": {
        "description": "Optional. Network settings that will be enforced on network resources associated with the Dev Center."
      }
    },
    "catalogs": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/catalogType"
      },
      "nullable": true,
      "metadata": {
        "description": "Optional. The catalogs to create in the dev center. Catalogs help you provide a set of curated infrastructure-as-code(IaC) templates, known as environment definitions for your development teams to create environments. You can attach your own source control repository from GitHub or Azure Repos as a catalog and specify the folder with your environment definitions. Deployment Environments scans the folder for environment definitions and makes them available for dev teams to create environments."
      }
    },
    "projectCatalogSettings": {
      "$ref": "#/definitions/projectCatalogSettingsType",
      "nullable": true,
      "metadata": {
        "description": "Optional. Dev Center settings to be used when associating a project with a catalog."
      }
    },
    "environmentTypes": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/environmentTypeType"
      },
      "nullable": true,
      "metadata": {
        "description": "Optional. Define the environment types that development teams can deploy. For example, sandbox, dev, test, and production. A dev center environment type is available to a specific project only after you add an associated project environment type. You can't delete a dev center environment type if any existing project environment types or deployed environments reference it."
      }
    },
    "projectPolicies": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/projectPolicyType"
      },
      "nullable": true,
      "metadata": {
        "description": "Optional. Project policies provide a mechanism to restrict access to certain resources—specifically, SKUs, Images, and Network Connections—to designated projects. Creating a policy does not mean it has automatically been enforced on the selected projects. It must be explicitly assigned to a project as part of the scope property. You must first create the \"Default\" project policy before you can create any other project policies. The \"Default\" project policy is automatically assigned to all projects in the Dev Center."
      }
    },
    "galleries": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/devCenterGalleryType"
      },
      "nullable": true,
      "metadata": {
        "description": "Optional. The compute galleries to associate with the Dev Center. The Dev Center identity (system or user) must have \"Contributor\" access to the gallery."
      }
    },
    "attachedNetworks": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/attachedNetworkType"
      },
      "nullable": true,
      "metadata": {
        "description": "Optional. The attached networks to associate with the Dev Center. You can attach existing network connections to a dev center. You must attach a network connection to a dev center before you can use it in projects to create dev box pools. Network connections enable dev boxes to connect to existing virtual networks. The location, or Azure region, of the network connection determines where associated dev boxes are hosted."
      }
    },
    "devboxDefinitions": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/devboxDefinitionType"
      },
      "nullable": true,
      "metadata": {
        "description": "Optional. The DevBox definitions to create in the Dev Center. A DevBox definition specifies the source operating system image and compute size, including CPU, memory, and storage. Dev Box definitions are used to create DevBox pools."
      }
    },
    "projects": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/projectType"
      },
      "nullable": true,
      "metadata": {
        "description": "Optional. The projects to create in the Dev Center. A project is the point of access to Microsoft Dev Box for the development team members. A project contains dev box pools, which specify the dev box definitions and network connections used when dev boxes are created. Each project is associated with a single dev center. When you associate a project with a dev center, all the settings at the dev center level are applied to the project automatically."
      }
    }
  },
  "variables": {
    "copy": [
      {
        "name": "formattedRoleAssignments",
        "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]",
        "input": "[union(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')], createObject('roleDefinitionId', coalesce(tryGet(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName), if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName)))))]"
      }
    ],
    "enableReferencedModulesTelemetry": false,
    "formattedUserAssignedIdentities": "[reduce(map(coalesce(tryGet(parameters('managedIdentities'), 'userAssignedResourceIds'), createArray()), lambda('id', createObject(format('{0}', lambdaVariables('id')), createObject()))), createObject(), lambda('cur', 'next', union(lambdaVariables('cur'), lambdaVariables('next'))))]",
    "identity": "[if(not(empty(parameters('managedIdentities'))), createObject('type', if(coalesce(tryGet(parameters('managedIdentities'), 'systemAssigned'), false()), if(not(empty(coalesce(tryGet(parameters('managedIdentities'), 'userAssignedResourceIds'), createObject()))), 'SystemAssigned,UserAssigned', 'SystemAssigned'), if(not(empty(coalesce(tryGet(parameters('managedIdentities'), 'userAssignedResourceIds'), createObject()))), 'UserAssigned', 'None')), 'userAssignedIdentities', if(not(empty(variables('formattedUserAssignedIdentities'))), variables('formattedUserAssignedIdentities'), null())), null())]",
    "builtInRoleNames": {
      "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
      "DevCenter Project Admin": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '331c37c6-af14-46d9-b9f4-e1909e1b95a0')]",
      "DevCenter Dev Box User": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '45d50f46-0b78-4001-a660-4198cbe8cd05')]",
      "DevTest Labs User": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '76283e04-6283-4c54-8f91-bcf1374a3c64')]",
      "Deployment Environments User": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18e40d4e-8d2e-438d-97e1-9528336e149c')]",
      "Deployment Environments Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'eb960402-bf75-4cc3-8d68-35b34f960f72')]",
      "Network Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4d97b98b-1d4f-4787-a291-c67834d212e7')]",
      "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
      "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
      "Role Based Access Control Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]",
      "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]"
    }
  },
  "resources": {
    "avmTelemetry": {
      "condition": "[parameters('enableTelemetry')]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2024-03-01",
      "name": "[format('46d3xbcp.res-devcenter-devcenter.{0}.{1}', replace('-..--..-', '.', '-'), substring(uniqueString(deployment().name, parameters('location')), 0, 4))]",
      "properties": {
        "mode": "Incremental",
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "resources": [],
          "outputs": {
            "telemetry": {
              "type": "String",
              "value": "For more information, see https://aka.ms/avm/TelemetryInfo"
            }
          }
        }
      }
    },
    "devcenter": {
      "type": "Microsoft.DevCenter/devcenters",
      "apiVersion": "2025-02-01",
      "name": "[parameters('name')]",
      "location": "[parameters('location')]",
      "tags": "[parameters('tags')]",
      "identity": "[variables('identity')]",
      "properties": {
        "devBoxProvisioningSettings": "[parameters('devBoxProvisioningSettings')]",
        "displayName": "[parameters('displayName')]",
        "networkSettings": "[parameters('networkSettings')]",
        "projectCatalogSettings": "[parameters('projectCatalogSettings')]"
      }
    },
    "devCenter_lock": {
      "condition": "[and(not(empty(coalesce(parameters('lock'), createObject()))), not(equals(tryGet(parameters('lock'), 'kind'), 'None')))]",
      "type": "Microsoft.Authorization/locks",
      "apiVersion": "2020-05-01",
      "scope": "[format('Microsoft.DevCenter/devcenters/{0}', parameters('name'))]",
      "name": "[coalesce(tryGet(parameters('lock'), 'name'), format('lock-{0}', parameters('name')))]",
      "properties": {
        "level": "[coalesce(tryGet(parameters('lock'), 'kind'), '')]",
        "notes": "[coalesce(tryGet(parameters('lock'), 'notes'), if(equals(tryGet(parameters('lock'), 'kind'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot delete or modify the resource or child resources.'))]"
      },
      "dependsOn": [
        "devcenter"
      ]
    },
    "devCenter_roleAssignments": {
      "copy": {
        "name": "devCenter_roleAssignments",
        "count": "[length(coalesce(variables('formattedRoleAssignments'), createArray()))]"
      },
      "type": "Microsoft.Authorization/roleAssignments",
      "apiVersion": "2022-04-01",
      "scope": "[format('Microsoft.DevCenter/devcenters/{0}', parameters('name'))]",
      "name": "[coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'name'), guid(resourceId('Microsoft.DevCenter/devcenters', parameters('name')), coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId, coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId))]",
      "properties": {
        "roleDefinitionId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId]",
        "principalId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId]",
        "description": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'description')]",
        "principalType": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'principalType')]",
        "condition": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition')]",
        "conditionVersion": "[if(not(empty(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
        "delegatedManagedIdentityResourceId": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
      },
      "dependsOn": [
        "devcenter"
      ]
    },
    "devCenter_diagnosticSettings": {
      "copy": {
        "name": "devCenter_diagnosticSettings",
        "count": "[length(coalesce(parameters('diagnosticSettings'), createArray()))]"
      },
      "type": "Microsoft.Insights/diagnosticSettings",
      "apiVersion": "2021-05-01-preview",
      "scope": "[format('Microsoft.DevCenter/devcenters/{0}', parameters('name'))]",
      "name": "[coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'name'), format('{0}-diagnosticSettings', parameters('name')))]",
      "properties": {
        "copy": [
          {
            "name": "metrics",
            "count": "[length(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics'))))]",
            "input": {
              "category": "[coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics')))[copyIndex('metrics')].category]",
              "enabled": "[coalesce(tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics')))[copyIndex('metrics')], 'enabled'), true())]",
              "timeGrain": null
            }
          },
          {
            "name": "logs",
            "count": "[length(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs'))))]",
            "input": {
              "categoryGroup": "[tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'categoryGroup')]",
              "category": "[tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'category')]",
              "enabled": "[coalesce(tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'enabled'), true())]"
            }
          }
        ],
        "storageAccountId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'storageAccountResourceId')]",
        "workspaceId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'workspaceResourceId')]",
        "eventHubAuthorizationRuleId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'eventHubAuthorizationRuleResourceId')]",
        "eventHubName": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'eventHubName')]",
        "marketplacePartnerId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'marketplacePartnerResourceId')]",
        "logAnalyticsDestinationType": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logAnalyticsDestinationType')]"
      },
      "dependsOn": [
        "devcenter"
      ]
    },
    "project_catalog": {
      "copy": {
        "name": "project_catalog",
        "count": "[length(coalesce(parameters('catalogs'), createArray()))]"
      },
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('{0}-Devcenter-Catalog-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "name": {
            "value": "[coalesce(parameters('catalogs'), createArray())[copyIndex()].name]"
          },
          "devcenterName": {
            "value": "[parameters('name')]"
          },
          "gitHub": {
            "value": "[tryGet(coalesce(parameters('catalogs'), createArray())[copyIndex()], 'gitHub')]"
          },
          "adoGit": {
            "value": "[tryGet(coalesce(parameters('catalogs'), createArray())[copyIndex()], 'adoGit')]"
          },
          "syncType": {
            "value": "[tryGet(coalesce(parameters('catalogs'), createArray())[copyIndex()], 'syncType')]"
          },
          "tags": {
            "value": "[tryGet(coalesce(parameters('catalogs'), createArray())[copyIndex()], 'tags')]"
          },
          "location": {
            "value": "[parameters('location')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "languageVersion": "2.0",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.36.1.42791",
              "templateHash": "13838234998351439652"
            },
            "name": "Dev Center Catalog",
            "description": "This module deploys a Dev Center Catalog."
          },
          "definitions": {
            "sourceType": {
              "type": "object",
              "properties": {
                "uri": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. The Git repository URI."
                  }
                },
                "branch": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The Git branch to use. Defaults to \"main\"."
                  }
                },
                "path": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The folder path within the repository. Defaults to \"/\"."
                  }
                },
                "secretIdentifier": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. A reference to the Key Vault secret containing a Personal Access Token (PAT) to authenticate to a Git repository. Not required for Azure DevOps with Managed Identity authentication or GitHub with App Center."
                  }
                }
              },
              "metadata": {
                "__bicep_export!": true,
                "description": "The type for Git catalog configuration (common properties for both GitHub and Azure DevOps Git)."
              }
            }
          },
          "parameters": {
            "name": {
              "type": "string",
              "minLength": 3,
              "maxLength": 63,
              "metadata": {
                "description": "Required. The name of the catalog. Must be between 3 and 63 characters and can contain alphanumeric characters, hyphens, underscores, and periods."
              }
            },
            "devcenterName": {
              "type": "string",
              "metadata": {
                "description": "Conditional. The name of the parent dev center. Required if the template is used in a standalone deployment."
              }
            },
            "gitHub": {
              "$ref": "#/definitions/sourceType",
              "nullable": true,
              "metadata": {
                "description": "Optional. GitHub repository configuration for the catalog."
              }
            },
            "adoGit": {
              "$ref": "#/definitions/sourceType",
              "nullable": true,
              "metadata": {
                "description": "Optional. Azure DevOps Git repository configuration for the catalog."
              }
            },
            "syncType": {
              "type": "string",
              "defaultValue": "Scheduled",
              "allowedValues": [
                "Manual",
                "Scheduled"
              ],
              "metadata": {
                "description": "Optional. Indicates the type of sync that is configured for the catalog. Defaults to \"Scheduled\"."
              }
            },
            "tags": {
              "type": "object",
              "metadata": {
                "__bicep_resource_derived_type!": {
                  "source": "Microsoft.DevCenter/devcenters/catalogs@2025-02-01#properties/tags"
                },
                "description": "Optional. Resource tags to apply to the catalog."
              },
              "nullable": true
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]",
              "metadata": {
                "description": "Optional. Location for all resources."
              }
            }
          },
          "resources": {
            "devCenter": {
              "existing": true,
              "type": "Microsoft.DevCenter/devcenters",
              "apiVersion": "2025-02-01",
              "name": "[parameters('devcenterName')]"
            },
            "catalog": {
              "type": "Microsoft.DevCenter/devcenters/catalogs",
              "apiVersion": "2025-02-01",
              "name": "[format('{0}/{1}', parameters('devcenterName'), parameters('name'))]",
              "properties": {
                "syncType": "[parameters('syncType')]",
                "tags": "[parameters('tags')]",
                "gitHub": "[parameters('gitHub')]",
                "adoGit": "[parameters('adoGit')]"
              }
            }
          },
          "outputs": {
            "resourceId": {
              "type": "string",
              "metadata": {
                "description": "The resource ID of the catalog."
              },
              "value": "[resourceId('Microsoft.DevCenter/devcenters/catalogs', parameters('devcenterName'), parameters('name'))]"
            },
            "name": {
              "type": "string",
              "metadata": {
                "description": "The name of the catalog."
              },
              "value": "[parameters('name')]"
            },
            "resourceGroupName": {
              "type": "string",
              "metadata": {
                "description": "The name of the resource group the catalog was created in."
              },
              "value": "[resourceGroup().name]"
            },
            "location": {
              "type": "string",
              "metadata": {
                "description": "The location the resource was deployed into."
              },
              "value": "[parameters('location')]"
            }
          }
        }
      },
      "dependsOn": [
        "devcenter"
      ]
    },
    "devcenter_environmentType": {
      "copy": {
        "name": "devcenter_environmentType",
        "count": "[length(coalesce(parameters('environmentTypes'), createArray()))]"
      },
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('{0}-Devcenter-EnvironmentType-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "devcenterName": {
            "value": "[parameters('name')]"
          },
          "name": {
            "value": "[coalesce(parameters('environmentTypes'), createArray())[copyIndex()].name]"
          },
          "tags": {
            "value": "[tryGet(coalesce(parameters('environmentTypes'), createArray())[copyIndex()], 'tags')]"
          },
          "displayName": {
            "value": "[tryGet(coalesce(parameters('environmentTypes'), createArray())[copyIndex()], 'displayName')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "languageVersion": "2.0",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.36.1.42791",
              "templateHash": "8838408887852189679"
            },
            "name": "Dev Center Environment Type",
            "description": "This module deploys a Dev Center Environment Type."
          },
          "parameters": {
            "devcenterName": {
              "type": "string",
              "metadata": {
                "description": "Conditional. The name of the parent dev center. Required if the template is used in a standalone deployment."
              }
            },
            "name": {
              "type": "string",
              "metadata": {
                "description": "Required. The name of the environment type."
              }
            },
            "displayName": {
              "type": "string",
              "nullable": true,
              "metadata": {
                "description": "Optional. The display name of the environment type."
              }
            },
            "tags": {
              "type": "object",
              "metadata": {
                "__bicep_resource_derived_type!": {
                  "source": "Microsoft.DevCenter/devcenters/environmentTypes@2025-02-01#properties/tags"
                },
                "description": "Optional. Tags of the resource."
              },
              "nullable": true
            }
          },
          "resources": {
            "devcenter": {
              "existing": true,
              "type": "Microsoft.DevCenter/devcenters",
              "apiVersion": "2025-02-01",
              "name": "[parameters('devcenterName')]"
            },
            "environmentType": {
              "type": "Microsoft.DevCenter/devcenters/environmentTypes",
              "apiVersion": "2025-02-01",
              "name": "[format('{0}/{1}', parameters('devcenterName'), parameters('name'))]",
              "properties": {
                "displayName": "[parameters('displayName')]"
              },
              "tags": "[parameters('tags')]"
            }
          },
          "outputs": {
            "resourceGroupName": {
              "type": "string",
              "metadata": {
                "description": "The name of the resource group the Dev Center Environment Type was created in."
              },
              "value": "[resourceGroup().name]"
            },
            "name": {
              "type": "string",
              "metadata": {
                "description": "The name of the Dev Center Environment Type."
              },
              "value": "[parameters('name')]"
            },
            "resourceId": {
              "type": "string",
              "metadata": {
                "description": "The resource ID of the Dev Center Environment Type."
              },
              "value": "[resourceId('Microsoft.DevCenter/devcenters/environmentTypes', parameters('devcenterName'), parameters('name'))]"
            }
          }
        }
      },
      "dependsOn": [
        "devcenter"
      ]
    },
    "devcenter_gallery": {
      "copy": {
        "name": "devcenter_gallery",
        "count": "[length(coalesce(parameters('galleries'), createArray()))]"
      },
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('{0}-Devcenter-Gallery-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "devcenterName": {
            "value": "[parameters('name')]"
          },
          "name": {
            "value": "[coalesce(parameters('galleries'), createArray())[copyIndex()].name]"
          },
          "galleryResourceId": {
            "value": "[coalesce(parameters('galleries'), createArray())[copyIndex()].galleryResourceId]"
          },
          "devCenterIdentityPrincipalId": {
            "value": "[tryGet(coalesce(parameters('galleries'), createArray())[copyIndex()], 'devCenterIdentityPrincipalId')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "languageVersion": "2.0",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.36.1.42791",
              "templateHash": "11646299707454814454"
            },
            "name": "Dev Center Gallery",
            "description": "This module deploys a Dev Center Gallery."
          },
          "parameters": {
            "devcenterName": {
              "type": "string",
              "metadata": {
                "description": "Conditional. The name of the parent dev center. Required if the template is used in a standalone deployment."
              }
            },
            "name": {
              "type": "string",
              "minLength": 3,
              "maxLength": 63,
              "metadata": {
                "description": "Required. It must be between 3 and 63 characters, can only include alphanumeric characters, underscores and periods, and can not start or end with \".\" or \"_\"."
              }
            },
            "galleryResourceId": {
              "type": "string",
              "metadata": {
                "description": "Required. The resource ID of the backing Azure Compute Gallery. The devcenter identity (system or user) must have \"Contributor\" access to the gallery."
              }
            },
            "devCenterIdentityPrincipalId": {
              "type": "string",
              "nullable": true,
              "metadata": {
                "description": "Optional. The principal ID of the Dev Center identity (system or user) that will be assigned the \"Contributor\" role on the backing Azure Compute Gallery. This is only required if the Dev Center identity has not been granted the right permissions on the gallery. The portal experience handles this automatically. Note that the identity performing the deployment must have permissions to perform role assignments on the resource group of the gallery to assign the role, otherwise the deployment will fail."
              }
            }
          },
          "resources": {
            "devcenter": {
              "existing": true,
              "type": "Microsoft.DevCenter/devcenters",
              "apiVersion": "2025-02-01",
              "name": "[parameters('devcenterName')]"
            },
            "gallery": {
              "type": "Microsoft.DevCenter/devcenters/galleries",
              "apiVersion": "2025-02-01",
              "name": "[format('{0}/{1}', parameters('devcenterName'), parameters('name'))]",
              "properties": {
                "galleryResourceId": "[parameters('galleryResourceId')]"
              },
              "dependsOn": [
                "computeGallery_roleAssignment"
              ]
            },
            "computeGallery_roleAssignment": {
              "condition": "[not(equals(parameters('devCenterIdentityPrincipalId'), ''))]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('{0}-Contributor-RoleAssignment', deployment().name)]",
              "resourceGroup": "[split(parameters('galleryResourceId'), '/')[4]]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "devCenterIdentityPrincipalId": {
                    "value": "[parameters('devCenterIdentityPrincipalId')]"
                  },
                  "galleryResourceId": {
                    "value": "[parameters('galleryResourceId')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.36.1.42791",
                      "templateHash": "8784163666264837034"
                    }
                  },
                  "parameters": {
                    "galleryResourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The resource ID of the backing Azure Compute Gallery."
                      }
                    },
                    "devCenterIdentityPrincipalId": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The principal ID of the Dev Center identity (system or user) that will be assigned the \"Contributor\" role on the backing Azure Compute Gallery."
                      }
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Authorization/roleAssignments",
                      "apiVersion": "2022-04-01",
                      "scope": "[format('Microsoft.Compute/galleries/{0}', last(split(parameters('galleryResourceId'), '/')))]",
                      "name": "[guid(parameters('devCenterIdentityPrincipalId'), resourceId('Microsoft.Compute/galleries', last(split(parameters('galleryResourceId'), '/'))), 'Contributor')]",
                      "properties": {
                        "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                        "principalId": "[parameters('devCenterIdentityPrincipalId')]",
                        "principalType": "ServicePrincipal"
                      }
                    }
                  ]
                }
              }
            }
          },
          "outputs": {
            "resourceGroupName": {
              "type": "string",
              "metadata": {
                "description": "The name of the resource group the Dev Center Gallery was created in."
              },
              "value": "[resourceGroup().name]"
            },
            "name": {
              "type": "string",
              "metadata": {
                "description": "The name of the Dev Center Gallery."
              },
              "value": "[parameters('name')]"
            },
            "resourceId": {
              "type": "string",
              "metadata": {
                "description": "The resource ID of the Dev Center Gallery."
              },
              "value": "[resourceId('Microsoft.DevCenter/devcenters/galleries', parameters('devcenterName'), parameters('name'))]"
            }
          }
        }
      },
      "dependsOn": [
        "devcenter"
      ]
    },
    "devcenter_attachedNetwork": {
      "copy": {
        "name": "devcenter_attachedNetwork",
        "count": "[length(coalesce(parameters('attachedNetworks'), createArray()))]"
      },
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('{0}-Devcenter-AttachedNetwork-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "devcenterName": {
            "value": "[parameters('name')]"
          },
          "name": {
            "value": "[coalesce(parameters('attachedNetworks'), createArray())[copyIndex()].name]"
          },
          "networkConnectionResourceId": {
            "value": "[coalesce(parameters('attachedNetworks'), createArray())[copyIndex()].networkConnectionResourceId]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.36.1.42791",
              "templateHash": "8622446296126991730"
            },
            "name": "Dev Center Attached Network",
            "description": "This module deploys a Dev Center Attached Network."
          },
          "parameters": {
            "devcenterName": {
              "type": "string",
              "metadata": {
                "description": "Conditional. The name of the parent dev center. Required if the template is used in a standalone deployment."
              }
            },
            "name": {
              "type": "string",
              "minLength": 3,
              "maxLength": 63,
              "metadata": {
                "description": "Required. The name of the attached network."
              }
            },
            "networkConnectionResourceId": {
              "type": "string",
              "metadata": {
                "description": "Required. The resource ID of the Network Connection you want to attach to the Dev Center."
              }
            }
          },
          "resources": [
            {
              "type": "Microsoft.DevCenter/devcenters/attachednetworks",
              "apiVersion": "2025-02-01",
              "name": "[format('{0}/{1}', parameters('devcenterName'), parameters('name'))]",
              "properties": {
                "networkConnectionId": "[parameters('networkConnectionResourceId')]"
              }
            }
          ],
          "outputs": {
            "resourceGroupName": {
              "type": "string",
              "metadata": {
                "description": "The name of the resource group the Dev Center Attached Network was created in."
              },
              "value": "[resourceGroup().name]"
            },
            "name": {
              "type": "string",
              "metadata": {
                "description": "The name of the Dev Center Attached Network."
              },
              "value": "[parameters('name')]"
            },
            "resourceId": {
              "type": "string",
              "metadata": {
                "description": "The resource ID of the Dev Center Attached Network."
              },
              "value": "[resourceId('Microsoft.DevCenter/devcenters/attachednetworks', parameters('devcenterName'), parameters('name'))]"
            }
          }
        }
      },
      "dependsOn": [
        "devcenter"
      ]
    },
    "devcenter_devboxDefinition": {
      "copy": {
        "name": "devcenter_devboxDefinition",
        "count": "[length(coalesce(parameters('devboxDefinitions'), createArray()))]"
      },
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('{0}-Devcenter-DevboxDefinition-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "devcenterName": {
            "value": "[parameters('name')]"
          },
          "name": {
            "value": "[coalesce(parameters('devboxDefinitions'), createArray())[copyIndex()].name]"
          },
          "imageResourceId": {
            "value": "[coalesce(parameters('devboxDefinitions'), createArray())[copyIndex()].imageResourceId]"
          },
          "sku": {
            "value": "[coalesce(parameters('devboxDefinitions'), createArray())[copyIndex()].sku]"
          },
          "hibernateSupport": {
            "value": "[coalesce(tryGet(coalesce(parameters('devboxDefinitions'), createArray())[copyIndex()], 'hibernateSupport'), 'Disabled')]"
          },
          "tags": {
            "value": "[tryGet(coalesce(parameters('devboxDefinitions'), createArray())[copyIndex()], 'tags')]"
          },
          "location": {
            "value": "[coalesce(tryGet(coalesce(parameters('devboxDefinitions'), createArray())[copyIndex()], 'location'), parameters('location'))]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "languageVersion": "2.0",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.36.1.42791",
              "templateHash": "9120116075135990292"
            },
            "name": "Dev Center DevBox Definition",
            "description": "This module deploys a Dev Center DevBox Definition."
          },
          "definitions": {
            "skuType": {
              "type": "object",
              "properties": {
                "capacity": {
                  "type": "int",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. If the SKU supports scale out/in then the capacity integer should be included. If scale out/in is not possible for the resource this may be omitted."
                  }
                },
                "family": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. If the service has different generations of hardware, for the same SKU, then that can be captured here. For example, \"general_i_v2\"."
                  }
                },
                "name": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. The name of the SKU. E.g. P3. It is typically a letter+number code. E.g. \"general_i_8c32gb256ssd_v2\" or \"general_i_8c32gb512ssd_v2\". See \"https://learn.microsoft.com/en-us/python/api/azure-developer-devcenter/azure.developer.devcenter.models.hardwareprofile\" for more information about acceptable SKU names."
                  }
                },
                "size": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The SKU size. When the name field is the combination of tier and some other value, this would be the standalone code."
                  }
                }
              },
              "metadata": {
                "__bicep_export!": true,
                "description": "The type for the SKU configuration of the DevBox definition."
              }
            }
          },
          "parameters": {
            "devcenterName": {
              "type": "string",
              "metadata": {
                "description": "Conditional. The name of the parent dev center. Required if the template is used in a standalone deployment."
              }
            },
            "name": {
              "type": "string",
              "minLength": 3,
              "maxLength": 63,
              "metadata": {
                "description": "Required. The name of the DevBox definition."
              }
            },
            "imageResourceId": {
              "type": "string",
              "metadata": {
                "description": "Required. The Image ID, or Image version ID. When Image ID is provided, its latest version will be used. When using custom images from a compute gallery, Microsoft Dev Box supports only images that are compatible with Dev Box and use the security type Trusted Launch enabled. See \"https://learn.microsoft.com/en-us/azure/dev-box/how-to-configure-azure-compute-gallery#compute-gallery-image-requirements\" for more information about image requirements."
              }
            },
            "sku": {
              "$ref": "#/definitions/skuType",
              "metadata": {
                "description": "Required. The SKU configuration for the dev box definition. See \"https://learn.microsoft.com/en-us/rest/api/devcenter/administrator/skus/list-by-subscription?view=rest-devcenter-administrator-2024-02-01\" for more information about SKUs."
              }
            },
            "hibernateSupport": {
              "type": "string",
              "allowedValues": [
                "Disabled",
                "Enabled"
              ],
              "defaultValue": "Disabled",
              "metadata": {
                "description": "Optional. Settings for hibernation support."
              }
            },
            "tags": {
              "type": "object",
              "metadata": {
                "__bicep_resource_derived_type!": {
                  "source": "Microsoft.DevCenter/devcenters/devboxdefinitions@2025-02-01#properties/tags"
                },
                "description": "Optional. Tags for the DevBox definition."
              },
              "nullable": true
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]",
              "metadata": {
                "description": "Optional. Location for the DevBox definition. Defaults to resource group location."
              }
            }
          },
          "resources": {
            "devcenter": {
              "existing": true,
              "type": "Microsoft.DevCenter/devcenters",
              "apiVersion": "2025-02-01",
              "name": "[parameters('devcenterName')]"
            },
            "devboxDefinition": {
              "type": "Microsoft.DevCenter/devcenters/devboxdefinitions",
              "apiVersion": "2025-02-01",
              "name": "[format('{0}/{1}', parameters('devcenterName'), parameters('name'))]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "properties": {
                "imageReference": {
                  "id": "[parameters('imageResourceId')]"
                },
                "sku": "[parameters('sku')]",
                "hibernateSupport": "[parameters('hibernateSupport')]"
              }
            }
          },
          "outputs": {
            "resourceGroupName": {
              "type": "string",
              "metadata": {
                "description": "The name of the resource group the DevBox Definition was created in."
              },
              "value": "[resourceGroup().name]"
            },
            "name": {
              "type": "string",
              "metadata": {
                "description": "The name of the DevBox Definition."
              },
              "value": "[parameters('name')]"
            },
            "resourceId": {
              "type": "string",
              "metadata": {
                "description": "The resource ID of the DevBox Definition."
              },
              "value": "[resourceId('Microsoft.DevCenter/devcenters/devboxdefinitions', parameters('devcenterName'), parameters('name'))]"
            },
            "location": {
              "type": "string",
              "metadata": {
                "description": "The location the DevBox Definition was deployed into."
              },
              "value": "[reference('devboxDefinition', '2025-02-01', 'full').location]"
            }
          }
        }
      },
      "dependsOn": [
        "devcenter",
        "devcenter_gallery"
      ]
    },
    "devCenter_projectPolicy": {
      "copy": {
        "name": "devCenter_projectPolicy",
        "count": "[length(coalesce(parameters('projectPolicies'), createArray()))]",
        "mode": "serial",
        "batchSize": 1
      },
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('{0}-Devcenter-ProjectPolicy-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "devcenterName": {
            "value": "[parameters('name')]"
          },
          "name": {
            "value": "[coalesce(parameters('projectPolicies'), createArray())[copyIndex()].name]"
          },
          "resourcePolicies": {
            "value": "[tryGet(coalesce(parameters('projectPolicies'), createArray())[copyIndex()], 'resourcePolicies')]"
          },
          "projectsResourceIdOrName": {
            "value": "[tryGet(coalesce(parameters('projectPolicies'), createArray())[copyIndex()], 'projectsResourceIdOrName')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "languageVersion": "2.0",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.36.1.42791",
              "templateHash": "8998217148988690277"
            },
            "name": "Dev Center Project Policy",
            "description": "This module deploys a Dev Center Project Policy."
          },
          "definitions": {
            "resourcePolicyType": {
              "type": "object",
              "properties": {
                "action": {
                  "type": "string",
                  "allowedValues": [
                    "Allow",
                    "Deny"
                  ],
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Policy action to be taken on the resources. Defaults to \"Allow\" if not specified. Cannot be used when the \"resources\" property is provided."
                  }
                },
                "filter": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. When specified, this expression is used to filter the resources."
                  }
                },
                "resources": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Explicit resources that are \"allowed\" as part of a project policy. Must be in the format of a resource ID. Cannot be used when the \"resourceType\" property is provided."
                  }
                },
                "resourceType": {
                  "type": "string",
                  "allowedValues": [
                    "AttachedNetworks",
                    "Images",
                    "Skus"
                  ],
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The resource type being restricted or allowed by a project policy. Used with a given \"action\" to restrict or allow access to a resource type. If not specified for a given policy, the action will be set to \"Allow\" for the unspecified resource types. For example, if the action is \"Deny\" for \"Images\" and \"Skus\", the project policy will deny access to images and skus, but allow access for remaining resource types like \"AttachedNetworks\"."
                  }
                }
              },
              "metadata": {
                "__bicep_export!": true,
                "description": "A resource policy for a Dev Center Project Policy. Each policy can specify an action (Allow/Deny), an optional filter, the resources included, and an optional resource type."
              }
            }
          },
          "parameters": {
            "devcenterName": {
              "type": "string",
              "metadata": {
                "description": "Conditional. The name of the parent dev center. Required if the template is used in a standalone deployment."
              }
            },
            "name": {
              "type": "string",
              "minLength": 3,
              "maxLength": 63,
              "metadata": {
                "description": "Required. The name of the project policy."
              }
            },
            "resourcePolicies": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/resourcePolicyType"
              },
              "metadata": {
                "description": "Required. Resource policies that are a part of this project policy."
              }
            },
            "projectsResourceIdOrName": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "nullable": true,
              "metadata": {
                "description": "Optional. Project names or resource IDs that will be in scope of this project policy. Project names can be used if the project is in the same resource group as the Dev Center. If the project is in a different resource group or subscription, the full resource ID must be provided. If not provided, the policy status will be set to \"Unassigned\"."
              }
            }
          },
          "variables": {
            "copy": [
              {
                "name": "projectResourceIds",
                "count": "[length(coalesce(parameters('projectsResourceIdOrName'), createArray()))]",
                "input": "[if(startsWith(coalesce(parameters('projectsResourceIdOrName'), createArray())[copyIndex('projectResourceIds')], '/subscriptions/'), coalesce(parameters('projectsResourceIdOrName'), createArray())[copyIndex('projectResourceIds')], resourceId('Microsoft.DevCenter/projects', coalesce(parameters('projectsResourceIdOrName'), createArray())[copyIndex('projectResourceIds')]))]"
              }
            ]
          },
          "resources": {
            "devcenter": {
              "existing": true,
              "type": "Microsoft.DevCenter/devcenters",
              "apiVersion": "2025-02-01",
              "name": "[parameters('devcenterName')]"
            },
            "projectPolicy": {
              "type": "Microsoft.DevCenter/devcenters/projectPolicies",
              "apiVersion": "2025-02-01",
              "name": "[format('{0}/{1}', parameters('devcenterName'), parameters('name'))]",
              "properties": {
                "resourcePolicies": "[parameters('resourcePolicies')]",
                "scopes": "[variables('projectResourceIds')]"
              }
            }
          },
          "outputs": {
            "resourceGroupName": {
              "type": "string",
              "metadata": {
                "description": "The name of the resource group the Dev Center Project Policy was created in."
              },
              "value": "[resourceGroup().name]"
            },
            "name": {
              "type": "string",
              "metadata": {
                "description": "The name of the Dev Center Project Policy."
              },
              "value": "[parameters('name')]"
            },
            "resourceId": {
              "type": "string",
              "metadata": {
                "description": "The resource ID of the Dev Center Project Policy."
              },
              "value": "[resourceId('Microsoft.DevCenter/devcenters/projectPolicies', parameters('devcenterName'), parameters('name'))]"
            }
          }
        }
      },
      "dependsOn": [
        "devcenter",
        "devcenter_gallery",
        "devCenter_project"
      ]
    },
    "devCenter_project": {
      "copy": {
        "name": "devCenter_project",
        "count": "[length(coalesce(parameters('projects'), createArray()))]"
      },
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('{0}-Devcenter-Project-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
      "subscriptionId": "[split(coalesce(tryGet(coalesce(parameters('projects'), createArray())[copyIndex()], 'resourceGroupResourceId'), resourceGroup().id), '/')[2]]",
      "resourceGroup": "[split(coalesce(tryGet(coalesce(parameters('projects'), createArray())[copyIndex()], 'resourceGroupResourceId'), resourceGroup().id), '/')[4]]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "devCenterResourceId": {
            "value": "[resourceId('Microsoft.DevCenter/devcenters', parameters('name'))]"
          },
          "name": {
            "value": "[coalesce(parameters('projects'), createArray())[copyIndex()].name]"
          },
          "displayName": {
            "value": "[tryGet(coalesce(parameters('projects'), createArray())[copyIndex()], 'displayName')]"
          },
          "description": {
            "value": "[tryGet(coalesce(parameters('projects'), createArray())[copyIndex()], 'description')]"
          },
          "location": {
            "value": "[coalesce(tryGet(coalesce(parameters('projects'), createArray())[copyIndex()], 'location'), parameters('location'))]"
          },
          "tags": {
            "value": "[tryGet(coalesce(parameters('projects'), createArray())[copyIndex()], 'tags')]"
          },
          "lock": {
            "value": "[tryGet(coalesce(parameters('projects'), createArray())[copyIndex()], 'lock')]"
          },
          "roleAssignments": {
            "value": "[tryGet(coalesce(parameters('projects'), createArray())[copyIndex()], 'roleAssignments')]"
          },
          "managedIdentities": {
            "value": "[tryGet(coalesce(parameters('projects'), createArray())[copyIndex()], 'managedIdentities')]"
          },
          "catalogSettings": {
            "value": "[tryGet(coalesce(parameters('projects'), createArray())[copyIndex()], 'catalogSettings')]"
          },
          "maxDevBoxesPerUser": {
            "value": "[tryGet(coalesce(parameters('projects'), createArray())[copyIndex()], 'maxDevBoxesPerUser')]"
          },
          "environmentTypes": {
            "value": "[tryGet(coalesce(parameters('projects'), createArray())[copyIndex()], 'environmentTypes')]"
          },
          "pools": {
            "value": "[tryGet(coalesce(parameters('projects'), createArray())[copyIndex()], 'pools')]"
          },
          "catalogs": {
            "value": "[tryGet(coalesce(parameters('projects'), createArray())[copyIndex()], 'catalogs')]"
          },
          "enableTelemetry": {
            "value": "[variables('enableReferencedModulesTelemetry')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "languageVersion": "2.0",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.36.1.42791",
              "templateHash": "10486777130326274870"
            },
            "name": "Dev Center Project",
            "description": "This module deploys a Dev Center Project."
          },
          "definitions": {
            "catalogSettingsType": {
              "type": "object",
              "properties": {
                "catalogItemSyncTypes": {
                  "type": "array",
                  "allowedValues": [
                    "EnvironmentDefinition",
                    "ImageDefinition"
                  ],
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Indicates catalog item types that can be synced."
                  }
                }
              },
              "metadata": {
                "__bicep_export!": true,
                "description": "Settings to be used when associating a project with a catalog."
              }
            },
            "environmentTypeType": {
              "type": "object",
              "properties": {
                "creatorRoleAssignmentRoles": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "metadata": {
                    "description": "Required. An array specifying the role definitions (permissions) GUIDs that will be granted to the user that creates a given environment of this type. These can be both built-in or custom role definitions. At least one role must be specified."
                  }
                },
                "displayName": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The display name of the environment type."
                  }
                },
                "deploymentTargetSubscriptionResourceId": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. The subscription Resource ID where the environment type will be mapped to. The environment's resources will be deployed into this subscription. Should be in the format \"/subscriptions/{subscriptionId}\"."
                  }
                },
                "managedIdentities": {
                  "$ref": "#/definitions/managedIdentityAllType",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The managed identity definition for this resource. If using user assigned identities, they must be first associated to the project that this environment type is created in and only one user identity can be used per project. At least one identity (system assigned or user assigned) must be enabled for deployment. The default is set to system assigned identity."
                  }
                },
                "name": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. The name of the environment type. The environment type must be first created in the Dev Center and then made available to a project using project level environment types. The name should be equivalent to the name of the environment type in the Dev Center."
                  }
                },
                "status": {
                  "type": "string",
                  "allowedValues": [
                    "Disabled",
                    "Enabled"
                  ],
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Defines whether this Environment Type can be used in this Project. The default is \"Enabled\"."
                  }
                },
                "roleAssignments": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/roleAssignmentType"
                  },
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Array of role assignments to create."
                  }
                },
                "tags": {
                  "type": "object",
                  "metadata": {
                    "__bicep_resource_derived_type!": {
                      "source": "Microsoft.DevCenter/projects/environmentTypes@2025-02-01#properties/tags"
                    },
                    "description": "Optional. Resource tags to apply to the environment type."
                  },
                  "nullable": true
                },
                "userRoleAssignmentsRoles": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/userRoleAssignmentsRolesType"
                  },
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. A collection of additional object IDs of users, groups, service principals or managed identities be granted permissions on each environment of this type. Each identity can have multiple role definitions (permissions) GUIDs assigned to it. These can be either built-in or custom role definitions."
                  }
                }
              },
              "metadata": {
                "__bicep_export!": true,
                "description": "The type for the environment type."
              }
            },
            "poolType": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. The name of the project pool. This name must be unique within a project and is visible to developers when creating dev boxes."
                  }
                },
                "displayName": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The display name of the pool."
                  }
                },
                "devBoxDefinitionType": {
                  "type": "string",
                  "allowedValues": [
                    "Reference",
                    "Value"
                  ],
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Indicates if the pool is created from an existing Dev Box Definition or if one is provided directly. Defaults to \"Reference\"."
                  }
                },
                "devBoxDefinitionName": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. Name of a Dev Box definition in parent Project of this Pool. If creating a pool from a definition defined in the Dev Center, then this will be the name of the definition. If creating a pool from a custom definition (e.g. Team Customizations), first the catalog must be added to this project, and second must use the format \"\\~Catalog\\~{catalogName}\\~{imagedefinition YAML name}\" (e.g. \"\\~Catalog\\~eshopRepo\\~frontend-dev\")."
                  }
                },
                "devBoxDefinition": {
                  "$ref": "#/definitions/devBoxDefinitionTypeType",
                  "nullable": true,
                  "metadata": {
                    "description": "Conditional. A definition of the machines that are created from this Pool. Required if devBoxDefinitionType is \"Value\"."
                  }
                },
                "tags": {
                  "type": "object",
                  "metadata": {
                    "__bicep_resource_derived_type!": {
                      "source": "Microsoft.DevCenter/projects/pools@2025-02-01#properties/tags"
                    },
                    "description": "Optional. Resource tags to apply to the pool."
                  },
                  "nullable": true
                },
                "localAdministrator": {
                  "type": "string",
                  "allowedValues": [
                    "Disabled",
                    "Enabled"
                  ],
                  "metadata": {
                    "description": "Required. Each dev box creator will be granted the selected permissions on the dev boxes they create. Indicates whether owners of Dev Boxes in this pool are added as a \"local administrator\" or \"standard user\" on the Dev Box."
                  }
                },
                "virtualNetworkType": {
                  "type": "string",
                  "allowedValues": [
                    "Managed",
                    "Unmanaged"
                  ],
                  "metadata": {
                    "description": "Required. Indicates whether the pool uses a Virtual Network managed by Microsoft or a customer provided network. For the easiest configuration experience, the Microsoft hosted network can be used for dev box deployment. For organizations that require customized networking, use a network connection resource."
                  }
                },
                "managedVirtualNetworkRegion": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Conditional. The region of the managed virtual network. Required if virtualNetworkType is \"Managed\"."
                  }
                },
                "networkConnectionName": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Conditional. Name of a Network Connection in parent Project of this Pool. Required if virtualNetworkType is \"Unmanaged\". The region hosting a pool is determined by the region of the network connection. For best performance, create a dev box pool for every region where your developers are located. The network connection cannot be configured with \"None\" domain join type and must be first attached to the Dev Center before used by the pool. Will be set to \"managedNetwork\" if virtualNetworkType is \"Managed\"."
                  }
                },
                "singleSignOnStatus": {
                  "type": "string",
                  "allowedValues": [
                    "Disabled",
                    "Enabled"
                  ],
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Indicates whether Dev Boxes in this pool are created with single sign on enabled. The also requires that single sign on be enabled on the tenant. Changing this setting will not affect existing dev boxes."
                  }
                },
                "stopOnDisconnect": {
                  "$ref": "#/definitions/stopOnDisconnectType",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Stop on \"disconnect\" configuration settings for Dev Boxes created in this pool. Dev boxes in this pool will hibernate after the grace period after the user disconnects."
                  }
                },
                "stopOnNoConnect": {
                  "$ref": "#/definitions/stopOnNoConnectType",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Stop on \"no connect\" configuration settings for Dev Boxes created in this pool. Dev boxes in this pool will hibernate after the grace period if the user never connects."
                  }
                },
                "schedule": {
                  "$ref": "#/definitions/poolScheduleType",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The schedule for the pool. Dev boxes in this pool will auto-stop every day as per the schedule configuration."
                  }
                }
              },
              "metadata": {
                "description": "The type for a Dev Center Project Pool."
              }
            },
            "catalogType": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. The name of the catalog. Must be between 3 and 63 characters and can contain alphanumeric characters, hyphens, underscores, and periods."
                  }
                },
                "gitHub": {
                  "$ref": "#/definitions/sourceType",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. GitHub repository configuration for the catalog."
                  }
                },
                "adoGit": {
                  "$ref": "#/definitions/sourceType",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Azure DevOps Git repository configuration for the catalog."
                  }
                },
                "syncType": {
                  "type": "string",
                  "allowedValues": [
                    "Manual",
                    "Scheduled"
                  ],
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Indicates the type of sync that is configured for the catalog. Defaults to \"Scheduled\"."
                  }
                },
                "tags": {
                  "type": "object",
                  "metadata": {
                    "__bicep_resource_derived_type!": {
                      "source": "Microsoft.DevCenter/projects/catalogs@2025-02-01#properties/tags"
                    },
                    "description": "Optional. Resource tags to apply to the catalog."
                  },
                  "nullable": true
                }
              },
              "metadata": {
                "__bicep_export!": true,
                "description": "The type for a Dev Center Project Catalog."
              }
            },
            "devBoxDefinitionTypeType": {
              "type": "object",
              "properties": {
                "imageReferenceResourceId": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. The resource ID of the image reference for the dev box definition. This would be the resource ID of the project image where the image has the same name as the dev box definition name. If the dev box definition is created from a catalog, then this would be the resource ID of the image in the project that was created from the catalog. The format is \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevCenter/projects/{projectName}/images/~Catalog~{catalogName}~{imagedefinition YAML name}\"."
                  }
                },
                "sku": {
                  "type": "object",
                  "properties": {
                    "capacity": {
                      "type": "int",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. If the SKU supports scale out/in then the capacity integer should be included. If scale out/in is not possible for the resource this may be omitted."
                      }
                    },
                    "family": {
                      "type": "string",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. If the service has different generations of hardware, for the same SKU, then that can be captured here. For example, \"general_i_v2\"."
                      }
                    },
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The name of the SKU. E.g. P3. It is typically a letter+number code. E.g. \"general_i_8c32gb256ssd_v2\" or \"general_i_8c32gb512ssd_v2\". See \"https://learn.microsoft.com/en-us/python/api/azure-developer-devcenter/azure.developer.devcenter.models.hardwareprofile\" for more information about acceptable SKU names."
                      }
                    },
                    "size": {
                      "type": "string",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The SKU size. When the name field is the combination of tier and some other value, this would be the standalone code."
                      }
                    }
                  },
                  "metadata": {
                    "description": "Required. The SKU configuration for the dev box definition. See \"https://learn.microsoft.com/en-us/rest/api/devcenter/administrator/skus/list-by-subscription?view=rest-devcenter-administrator-2024-02-01\" for more information about SKUs."
                  }
                }
              },
              "metadata": {
                "description": "The type for dev box definition.",
                "__bicep_imported_from!": {
                  "sourceTemplate": "pool/main.bicep"
                }
              }
            },
            "lockType": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Specify the name of lock."
                  }
                },
                "kind": {
                  "type": "string",
                  "allowedValues": [
                    "CanNotDelete",
                    "None",
                    "ReadOnly"
                  ],
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Specify the type of lock."
                  }
                }
              },
              "metadata": {
                "description": "An AVM-aligned type for a lock.",
                "__bicep_imported_from!": {
                  "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.5.1"
                }
              }
            },
            "managedIdentityAllType": {
              "type": "object",
              "properties": {
                "systemAssigned": {
                  "type": "bool",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Enables system assigned managed identity on the resource."
                  }
                },
                "userAssignedResourceIds": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The resource ID(s) to assign to the resource. Required if a user assigned identity is used for encryption."
                  }
                }
              },
              "metadata": {
                "description": "An AVM-aligned type for a managed identity configuration. To be used if both a system-assigned & user-assigned identities are supported by the resource provider.",
                "__bicep_imported_from!": {
                  "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.5.1"
                }
              }
            },
            "poolScheduleType": {
              "type": "object",
              "properties": {
                "state": {
                  "type": "string",
                  "allowedValues": [
                    "Disabled",
                    "Enabled"
                  ],
                  "metadata": {
                    "description": "Required. Indicates whether or not this scheduled task is enabled. Allowed values: Disabled, Enabled."
                  }
                },
                "time": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. The target time to trigger the action. The format is HH:MM. For example, \"14:30\" for 2:30 PM."
                  }
                },
                "timeZone": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. The IANA timezone id at which the schedule should execute. For example, \"Australia/Sydney\", \"Canada/Central\"."
                  }
                }
              },
              "metadata": {
                "description": "The type for the pool schedule.",
                "__bicep_imported_from!": {
                  "sourceTemplate": "pool/main.bicep"
                }
              }
            },
            "roleAssignmentType": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The name (as GUID) of the role assignment. If not provided, a GUID will be generated."
                  }
                },
                "roleDefinitionIdOrName": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                  }
                },
                "principalId": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                  }
                },
                "principalType": {
                  "type": "string",
                  "allowedValues": [
                    "Device",
                    "ForeignGroup",
                    "Group",
                    "ServicePrincipal",
                    "User"
                  ],
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The principal type of the assigned principal ID."
                  }
                },
                "description": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The description of the role assignment."
                  }
                },
                "condition": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                  }
                },
                "conditionVersion": {
                  "type": "string",
                  "allowedValues": [
                    "2.0"
                  ],
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Version of the condition."
                  }
                },
                "delegatedManagedIdentityResourceId": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The Resource Id of the delegated managed identity resource."
                  }
                }
              },
              "metadata": {
                "description": "An AVM-aligned type for a role assignment.",
                "__bicep_imported_from!": {
                  "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.5.1"
                }
              }
            },
            "sourceType": {
              "type": "object",
              "properties": {
                "uri": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. The Git repository URI."
                  }
                },
                "branch": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The Git branch to use. Defaults to \"main\"."
                  }
                },
                "path": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The folder path within the repository. Defaults to \"/\"."
                  }
                },
                "secretIdentifier": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. A reference to the Key Vault secret containing a Personal Access Token (PAT) to authenticate to a Git repository. Not required for Azure DevOps with Managed Identity authentication or GitHub with App Center."
                  }
                }
              },
              "metadata": {
                "description": "The type for Git catalog configuration (common properties for both GitHub and Azure DevOps Git).",
                "__bicep_imported_from!": {
                  "sourceTemplate": "catalog/main.bicep"
                }
              }
            },
            "stopOnDisconnectType": {
              "type": "object",
              "properties": {
                "gracePeriodMinutes": {
                  "type": "int",
                  "metadata": {
                    "description": "Required. The specified time in minutes to wait before stopping a Dev Box once disconnect is detected."
                  }
                },
                "status": {
                  "type": "string",
                  "allowedValues": [
                    "Disabled",
                    "Enabled"
                  ],
                  "metadata": {
                    "description": "Required. Whether the feature to stop the Dev Box on disconnect once the grace period has lapsed is enabled."
                  }
                }
              },
              "metadata": {
                "description": "The type for stopOnDisconnect configuration.",
                "__bicep_imported_from!": {
                  "sourceTemplate": "pool/main.bicep"
                }
              }
            },
            "stopOnNoConnectType": {
              "type": "object",
              "properties": {
                "gracePeriodMinutes": {
                  "type": "int",
                  "metadata": {
                    "description": "Required. The specified time in minutes to wait before stopping a Dev Box if no connection is made."
                  }
                },
                "status": {
                  "type": "string",
                  "allowedValues": [
                    "Disabled",
                    "Enabled"
                  ],
                  "metadata": {
                    "description": "Required. Enables the feature to stop a started Dev Box when it has not been connected to, once the grace period has lapsed."
                  }
                }
              },
              "metadata": {
                "description": "The type for stopOnNoConnect configuration.",
                "__bicep_imported_from!": {
                  "sourceTemplate": "pool/main.bicep"
                }
              }
            },
            "userRoleAssignmentsRolesType": {
              "type": "object",
              "properties": {
                "objectId": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. The object ID of the user, group, service principal, or managed identity."
                  }
                },
                "roleDefinitions": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "metadata": {
                    "description": "Required. An array of role definition GUIDs to assign to the object."
                  }
                }
              },
              "metadata": {
                "description": "The type for additional role assignments.",
                "__bicep_imported_from!": {
                  "sourceTemplate": "environment-type/main.bicep"
                }
              }
            }
          },
          "parameters": {
            "name": {
              "type": "string",
              "minLength": 3,
              "maxLength": 63,
              "metadata": {
                "description": "Required. The name of the project."
              }
            },
            "displayName": {
              "type": "string",
              "nullable": true,
              "metadata": {
                "description": "Optional. The display name of project."
              }
            },
            "description": {
              "type": "string",
              "nullable": true,
              "metadata": {
                "description": "Optional. The description of the project."
              }
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]",
              "metadata": {
                "description": "Optional. Location for all Resources."
              }
            },
            "tags": {
              "type": "object",
              "metadata": {
                "__bicep_resource_derived_type!": {
                  "source": "Microsoft.DevCenter/projects@2025-02-01#properties/tags"
                },
                "description": "Optional. Resource tags to apply to the project."
              },
              "nullable": true
            },
            "lock": {
              "$ref": "#/definitions/lockType",
              "nullable": true,
              "metadata": {
                "description": "Optional. The lock settings of the service."
              }
            },
            "roleAssignments": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/roleAssignmentType"
              },
              "nullable": true,
              "metadata": {
                "description": "Optional. Array of role assignments to create."
              }
            },
            "managedIdentities": {
              "$ref": "#/definitions/managedIdentityAllType",
              "nullable": true,
              "metadata": {
                "description": "Optional. The managed identity definition for this resource. Only one user assigned identity can be used per project."
              }
            },
            "devCenterResourceId": {
              "type": "string",
              "metadata": {
                "description": "Required. Resource ID of an associated DevCenter."
              }
            },
            "catalogSettings": {
              "$ref": "#/definitions/catalogSettingsType",
              "nullable": true,
              "metadata": {
                "description": "Optional. The settings to be used when associating a project with a catalog. The Dev Center this project is associated with must allow configuring catalog item sync types before configuring project level catalog settings."
              }
            },
            "maxDevBoxesPerUser": {
              "type": "int",
              "nullable": true,
              "minValue": 0,
              "metadata": {
                "description": "Optional. When specified, limits the maximum number of Dev Boxes a single user can create across all pools in the project. This will have no effect on existing Dev Boxes when reduced."
              }
            },
            "enableTelemetry": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Optional. Enable/Disable usage telemetry for module."
              }
            },
            "environmentTypes": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/environmentTypeType"
              },
              "nullable": true,
              "metadata": {
                "description": "Optional. The environment types to create. Environment types must be first created in the Dev Center and then made available to a project using project level environment types. The name should be equivalent to the name of the environment type in the Dev Center."
              }
            },
            "pools": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/poolType"
              },
              "nullable": true,
              "metadata": {
                "description": "Optional. The type of pool to create in the project. A project pool is a container for dev boxes that share the same configuration, like a dev box definition and a network connection. Essentially, a project pool defines the specifications for the dev boxes that developers can create from a specific project in the Dev Box service."
              }
            },
            "catalogs": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/catalogType"
              },
              "nullable": true,
              "metadata": {
                "description": "Optional. The catalogs to create in the project. Catalogs are templates from a git repository that can be used to create environments."
              }
            }
          },
          "variables": {
            "copy": [
              {
                "name": "formattedRoleAssignments",
                "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]",
                "input": "[union(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')], createObject('roleDefinitionId', coalesce(tryGet(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName), if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName)))))]"
              }
            ],
            "formattedUserAssignedIdentities": "[reduce(map(coalesce(tryGet(parameters('managedIdentities'), 'userAssignedResourceIds'), createArray()), lambda('id', createObject(format('{0}', lambdaVariables('id')), createObject()))), createObject(), lambda('cur', 'next', union(lambdaVariables('cur'), lambdaVariables('next'))))]",
            "identity": "[if(not(empty(parameters('managedIdentities'))), createObject('type', if(coalesce(tryGet(parameters('managedIdentities'), 'systemAssigned'), false()), if(not(empty(coalesce(tryGet(parameters('managedIdentities'), 'userAssignedResourceIds'), createObject()))), 'SystemAssigned,UserAssigned', 'SystemAssigned'), if(not(empty(coalesce(tryGet(parameters('managedIdentities'), 'userAssignedResourceIds'), createObject()))), 'UserAssigned', 'None')), 'userAssignedIdentities', if(not(empty(variables('formattedUserAssignedIdentities'))), variables('formattedUserAssignedIdentities'), null())), null())]",
            "builtInRoleNames": {
              "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
              "DevCenter Project Admin": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '331c37c6-af14-46d9-b9f4-e1909e1b95a0')]",
              "DevCenter Dev Box User": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '45d50f46-0b78-4001-a660-4198cbe8cd05')]",
              "DevTest Labs User": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '76283e04-6283-4c54-8f91-bcf1374a3c64')]",
              "Deployment Environments User": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18e40d4e-8d2e-438d-97e1-9528336e149c')]",
              "Deployment Environments Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'eb960402-bf75-4cc3-8d68-35b34f960f72')]",
              "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
              "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
              "Role Based Access Control Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]",
              "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]"
            }
          },
          "resources": {
            "avmTelemetry": {
              "condition": "[parameters('enableTelemetry')]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2024-03-01",
              "name": "[format('46d3xbcp.res-devcenter-project.{0}.{1}', replace('0.1.0', '.', '-'), substring(uniqueString(deployment().name, parameters('location')), 0, 4))]",
              "properties": {
                "mode": "Incremental",
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "resources": [],
                  "outputs": {
                    "telemetry": {
                      "type": "String",
                      "value": "For more information, see https://aka.ms/avm/TelemetryInfo"
                    }
                  }
                }
              }
            },
            "project": {
              "type": "Microsoft.DevCenter/projects",
              "apiVersion": "2025-02-01",
              "name": "[parameters('name')]",
              "location": "[parameters('location')]",
              "identity": "[variables('identity')]",
              "tags": "[parameters('tags')]",
              "properties": {
                "description": "[parameters('description')]",
                "devCenterId": "[parameters('devCenterResourceId')]",
                "displayName": "[parameters('displayName')]",
                "catalogSettings": "[parameters('catalogSettings')]",
                "maxDevBoxesPerUser": "[parameters('maxDevBoxesPerUser')]"
              }
            },
            "project_lock": {
              "condition": "[and(not(empty(coalesce(parameters('lock'), createObject()))), not(equals(tryGet(parameters('lock'), 'kind'), 'None')))]",
              "type": "Microsoft.Authorization/locks",
              "apiVersion": "2020-05-01",
              "scope": "[format('Microsoft.DevCenter/projects/{0}', parameters('name'))]",
              "name": "[coalesce(tryGet(parameters('lock'), 'name'), format('lock-{0}', parameters('name')))]",
              "properties": {
                "level": "[coalesce(tryGet(parameters('lock'), 'kind'), '')]",
                "notes": "[if(equals(tryGet(parameters('lock'), 'kind'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot delete or modify the resource or child resources.')]"
              },
              "dependsOn": [
                "project"
              ]
            },
            "project_roleAssignments": {
              "copy": {
                "name": "project_roleAssignments",
                "count": "[length(coalesce(variables('formattedRoleAssignments'), createArray()))]"
              },
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.DevCenter/projects/{0}', parameters('name'))]",
              "name": "[coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'name'), guid(resourceId('Microsoft.DevCenter/projects', parameters('name')), coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId, coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId))]",
              "properties": {
                "roleDefinitionId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId]",
                "principalId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId]",
                "description": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'description')]",
                "principalType": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'principalType')]",
                "condition": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition')]",
                "conditionVersion": "[if(not(empty(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                "delegatedManagedIdentityResourceId": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
              },
              "dependsOn": [
                "project"
              ]
            },
            "project_environmentType": {
              "copy": {
                "name": "project_environmentType",
                "count": "[length(coalesce(parameters('environmentTypes'), createArray()))]"
              },
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('{0}-Project-EnvironmentTypes-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "creatorRoleAssignmentRoles": {
                    "value": "[coalesce(parameters('environmentTypes'), createArray())[copyIndex()].creatorRoleAssignmentRoles]"
                  },
                  "deploymentTargetSubscriptionResourceId": {
                    "value": "[coalesce(parameters('environmentTypes'), createArray())[copyIndex()].deploymentTargetSubscriptionResourceId]"
                  },
                  "managedIdentities": {
                    "value": "[tryGet(coalesce(parameters('environmentTypes'), createArray())[copyIndex()], 'managedIdentities')]"
                  },
                  "name": {
                    "value": "[coalesce(parameters('environmentTypes'), createArray())[copyIndex()].name]"
                  },
                  "projectName": {
                    "value": "[parameters('name')]"
                  },
                  "roleAssignments": {
                    "value": "[tryGet(coalesce(parameters('environmentTypes'), createArray())[copyIndex()], 'roleAssignments')]"
                  },
                  "status": {
                    "value": "[tryGet(coalesce(parameters('environmentTypes'), createArray())[copyIndex()], 'status')]"
                  },
                  "tags": {
                    "value": "[tryGet(coalesce(parameters('environmentTypes'), createArray())[copyIndex()], 'tags')]"
                  },
                  "userRoleAssignmentsRoles": {
                    "value": "[tryGet(coalesce(parameters('environmentTypes'), createArray())[copyIndex()], 'userRoleAssignmentsRoles')]"
                  },
                  "displayName": {
                    "value": "[tryGet(coalesce(parameters('environmentTypes'), createArray())[copyIndex()], 'displayName')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "languageVersion": "2.0",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.36.1.42791",
                      "templateHash": "2947154870216849436"
                    },
                    "name": "Dev Center Project Environment Type",
                    "description": "This module deploys a Dev Center Project Environment Type."
                  },
                  "definitions": {
                    "userRoleAssignmentsRolesType": {
                      "type": "object",
                      "properties": {
                        "objectId": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. The object ID of the user, group, service principal, or managed identity."
                          }
                        },
                        "roleDefinitions": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "metadata": {
                            "description": "Required. An array of role definition GUIDs to assign to the object."
                          }
                        }
                      },
                      "metadata": {
                        "__bicep_export!": true,
                        "description": "The type for additional role assignments."
                      }
                    },
                    "managedIdentityAllType": {
                      "type": "object",
                      "properties": {
                        "systemAssigned": {
                          "type": "bool",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Enables system assigned managed identity on the resource."
                          }
                        },
                        "userAssignedResourceIds": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The resource ID(s) to assign to the resource. Required if a user assigned identity is used for encryption."
                          }
                        }
                      },
                      "metadata": {
                        "description": "An AVM-aligned type for a managed identity configuration. To be used if both a system-assigned & user-assigned identities are supported by the resource provider.",
                        "__bicep_imported_from!": {
                          "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.5.1"
                        }
                      }
                    },
                    "roleAssignmentType": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The name (as GUID) of the role assignment. If not provided, a GUID will be generated."
                          }
                        },
                        "roleDefinitionIdOrName": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                          }
                        },
                        "principalId": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                          }
                        },
                        "principalType": {
                          "type": "string",
                          "allowedValues": [
                            "Device",
                            "ForeignGroup",
                            "Group",
                            "ServicePrincipal",
                            "User"
                          ],
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The principal type of the assigned principal ID."
                          }
                        },
                        "description": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The description of the role assignment."
                          }
                        },
                        "condition": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                          }
                        },
                        "conditionVersion": {
                          "type": "string",
                          "allowedValues": [
                            "2.0"
                          ],
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Version of the condition."
                          }
                        },
                        "delegatedManagedIdentityResourceId": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The Resource Id of the delegated managed identity resource."
                          }
                        }
                      },
                      "metadata": {
                        "description": "An AVM-aligned type for a role assignment.",
                        "__bicep_imported_from!": {
                          "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.5.1"
                        }
                      }
                    }
                  },
                  "parameters": {
                    "name": {
                      "type": "string",
                      "minLength": 3,
                      "maxLength": 63,
                      "metadata": {
                        "description": "Required. The name of the environment type. The environment type must be first created in the Dev Center and then made available to a project using project level environment types. The name should be equivalent to the name of the environment type in the Dev Center."
                      }
                    },
                    "projectName": {
                      "type": "string",
                      "metadata": {
                        "description": "Conditional. The name of the parent dev center project. Required if the template is used in a standalone deployment."
                      }
                    },
                    "displayName": {
                      "type": "string",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The display name of the environment type."
                      }
                    },
                    "deploymentTargetSubscriptionResourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The subscription Resource ID where the environment type will be mapped to. The environment's resources will be deployed into this subscription. Should be in the format \"/subscriptions/{subscriptionId}\"."
                      }
                    },
                    "status": {
                      "type": "string",
                      "defaultValue": "Enabled",
                      "allowedValues": [
                        "Enabled",
                        "Disabled"
                      ],
                      "metadata": {
                        "description": "Optional. Defines whether this Environment Type can be used in this Project. The default is \"Enabled\"."
                      }
                    },
                    "location": {
                      "type": "string",
                      "defaultValue": "[resourceGroup().location]",
                      "metadata": {
                        "description": "Optional. Location for all resources."
                      }
                    },
                    "creatorRoleAssignmentRoles": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "metadata": {
                        "description": "Required. An array specifying the role definitions (permissions) GUIDs that will be granted to the user that creates a given environment of this type. These can be both built-in or custom role definitions. At least one role must be specified."
                      }
                    },
                    "userRoleAssignmentsRoles": {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/userRoleAssignmentsRolesType"
                      },
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. A collection of additional object IDs of users, groups, service principals or managed identities be granted permissions on each environment of this type. Each identity can have multiple role definitions (permissions) GUIDs assigned to it. These can be either built-in or custom role definitions."
                      }
                    },
                    "tags": {
                      "type": "object",
                      "metadata": {
                        "__bicep_resource_derived_type!": {
                          "source": "Microsoft.DevCenter/projects/environmentTypes@2025-02-01#properties/tags"
                        },
                        "description": "Optional. Resource tags to apply to the environment type."
                      },
                      "nullable": true
                    },
                    "managedIdentities": {
                      "$ref": "#/definitions/managedIdentityAllType",
                      "defaultValue": {
                        "systemAssigned": true
                      },
                      "metadata": {
                        "description": "Optional. The managed identity definition for this resource. If using user assigned identities, they must be first associated to the project that this environment type is created in and only one user identity can be used per project. At least one identity (system assigned or user assigned) must be enabled for deployment. The default is set to system assigned identity."
                      }
                    },
                    "roleAssignments": {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/roleAssignmentType"
                      },
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Array of role assignments to create."
                      }
                    }
                  },
                  "variables": {
                    "copy": [
                      {
                        "name": "formattedRoleAssignments",
                        "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]",
                        "input": "[union(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')], createObject('roleDefinitionId', coalesce(tryGet(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName), if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName)))))]"
                      }
                    ],
                    "formattedUserAssignedIdentities": "[reduce(map(coalesce(tryGet(parameters('managedIdentities'), 'userAssignedResourceIds'), createArray()), lambda('id', createObject(format('{0}', lambdaVariables('id')), createObject()))), createObject(), lambda('cur', 'next', union(lambdaVariables('cur'), lambdaVariables('next'))))]",
                    "identity": "[if(not(empty(parameters('managedIdentities'))), createObject('type', if(coalesce(tryGet(parameters('managedIdentities'), 'systemAssigned'), false()), if(not(empty(coalesce(tryGet(parameters('managedIdentities'), 'userAssignedResourceIds'), createObject()))), 'SystemAssigned,UserAssigned', 'SystemAssigned'), if(not(empty(coalesce(tryGet(parameters('managedIdentities'), 'userAssignedResourceIds'), createObject()))), 'UserAssigned', 'None')), 'userAssignedIdentities', if(not(empty(variables('formattedUserAssignedIdentities'))), variables('formattedUserAssignedIdentities'), null())), null())]",
                    "builtInRoleNames": {
                      "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                      "DevCenter Project Admin": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '331c37c6-af14-46d9-b9f4-e1909e1b95a0')]",
                      "DevCenter Dev Box User": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '45d50f46-0b78-4001-a660-4198cbe8cd05')]",
                      "DevTest Labs User": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '76283e04-6283-4c54-8f91-bcf1374a3c64')]",
                      "Deployment Environments User": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18e40d4e-8d2e-438d-97e1-9528336e149c')]",
                      "Deployment Environments Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'eb960402-bf75-4cc3-8d68-35b34f960f72')]",
                      "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                      "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                      "Role Based Access Control Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]",
                      "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]"
                    }
                  },
                  "resources": {
                    "project": {
                      "existing": true,
                      "type": "Microsoft.DevCenter/projects",
                      "apiVersion": "2025-02-01",
                      "name": "[parameters('projectName')]"
                    },
                    "environmentType": {
                      "type": "Microsoft.DevCenter/projects/environmentTypes",
                      "apiVersion": "2025-02-01",
                      "name": "[format('{0}/{1}', parameters('projectName'), parameters('name'))]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]",
                      "identity": "[variables('identity')]",
                      "properties": {
                        "displayName": "[parameters('displayName')]",
                        "deploymentTargetId": "[parameters('deploymentTargetSubscriptionResourceId')]",
                        "status": "[parameters('status')]",
                        "creatorRoleAssignment": {
                          "roles": "[reduce(map(parameters('creatorRoleAssignmentRoles'), lambda('role', createObject(format('{0}', lambdaVariables('role')), createObject()))), createObject(), lambda('cur', 'next', union(lambdaVariables('cur'), lambdaVariables('next'))))]"
                        },
                        "userRoleAssignments": "[if(not(empty(parameters('userRoleAssignmentsRoles'))), reduce(coalesce(parameters('userRoleAssignmentsRoles'), createArray()), createObject(), lambda('cur', 'next', union(lambdaVariables('cur'), createObject(format('{0}', lambdaVariables('next').objectId), createObject('roles', reduce(lambdaVariables('next').roleDefinitions, createObject(), lambda('roleCur', 'roleNext', union(lambdaVariables('roleCur'), createObject(format('{0}', lambdaVariables('roleNext')), createObject()))))))))), null())]"
                      }
                    },
                    "environmentType_roleAssignments": {
                      "copy": {
                        "name": "environmentType_roleAssignments",
                        "count": "[length(coalesce(variables('formattedRoleAssignments'), createArray()))]"
                      },
                      "type": "Microsoft.Authorization/roleAssignments",
                      "apiVersion": "2022-04-01",
                      "scope": "[format('Microsoft.DevCenter/projects/{0}/environmentTypes/{1}', parameters('projectName'), parameters('name'))]",
                      "name": "[coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'name'), guid(resourceId('Microsoft.DevCenter/projects/environmentTypes', parameters('projectName'), parameters('name')), coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId, coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId))]",
                      "properties": {
                        "roleDefinitionId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId]",
                        "principalId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId]",
                        "description": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'description')]",
                        "principalType": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'principalType')]",
                        "condition": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition')]",
                        "conditionVersion": "[if(not(empty(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                        "delegatedManagedIdentityResourceId": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
                      },
                      "dependsOn": [
                        "environmentType"
                      ]
                    }
                  },
                  "outputs": {
                    "resourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the environment type."
                      },
                      "value": "[resourceId('Microsoft.DevCenter/projects/environmentTypes', parameters('projectName'), parameters('name'))]"
                    },
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the environment type."
                      },
                      "value": "[parameters('name')]"
                    },
                    "resourceGroupName": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the resource group the environment type was created in."
                      },
                      "value": "[resourceGroup().name]"
                    },
                    "location": {
                      "type": "string",
                      "metadata": {
                        "description": "The location the resource was deployed into."
                      },
                      "value": "[reference('environmentType', '2025-02-01', 'full').location]"
                    },
                    "systemAssignedMIPrincipalId": {
                      "type": "string",
                      "nullable": true,
                      "metadata": {
                        "description": "The principal ID of the system assigned identity."
                      },
                      "value": "[tryGet(tryGet(reference('environmentType', '2025-02-01', 'full'), 'identity'), 'principalId')]"
                    }
                  }
                }
              },
              "dependsOn": [
                "project"
              ]
            },
            "project_catalog": {
              "copy": {
                "name": "project_catalog",
                "count": "[length(coalesce(parameters('catalogs'), createArray()))]"
              },
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('{0}-Project-Catalog-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "name": {
                    "value": "[coalesce(parameters('catalogs'), createArray())[copyIndex()].name]"
                  },
                  "projectName": {
                    "value": "[parameters('name')]"
                  },
                  "gitHub": {
                    "value": "[tryGet(coalesce(parameters('catalogs'), createArray())[copyIndex()], 'gitHub')]"
                  },
                  "adoGit": {
                    "value": "[tryGet(coalesce(parameters('catalogs'), createArray())[copyIndex()], 'adoGit')]"
                  },
                  "syncType": {
                    "value": "[tryGet(coalesce(parameters('catalogs'), createArray())[copyIndex()], 'syncType')]"
                  },
                  "tags": {
                    "value": "[tryGet(coalesce(parameters('catalogs'), createArray())[copyIndex()], 'tags')]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "languageVersion": "2.0",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.36.1.42791",
                      "templateHash": "15199668707642182217"
                    },
                    "name": "Dev Center Project Catalog",
                    "description": "This module deploys a Dev Center Project Catalog."
                  },
                  "definitions": {
                    "sourceType": {
                      "type": "object",
                      "properties": {
                        "uri": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. The Git repository URI."
                          }
                        },
                        "branch": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The Git branch to use. Defaults to \"main\"."
                          }
                        },
                        "path": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The folder path within the repository. Defaults to \"/\"."
                          }
                        },
                        "secretIdentifier": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. A reference to the Key Vault secret containing a Personal Access Token (PAT) to authenticate to a Git repository. Not required for Azure DevOps with Managed Identity authentication or GitHub with App Center."
                          }
                        }
                      },
                      "metadata": {
                        "__bicep_export!": true,
                        "description": "The type for Git catalog configuration (common properties for both GitHub and Azure DevOps Git)."
                      }
                    }
                  },
                  "parameters": {
                    "name": {
                      "type": "string",
                      "minLength": 3,
                      "maxLength": 63,
                      "metadata": {
                        "description": "Required. The name of the catalog. Must be between 3 and 63 characters and can contain alphanumeric characters, hyphens, underscores, and periods."
                      }
                    },
                    "projectName": {
                      "type": "string",
                      "metadata": {
                        "description": "Conditional. The name of the parent dev center project. Required if the template is used in a standalone deployment."
                      }
                    },
                    "gitHub": {
                      "$ref": "#/definitions/sourceType",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. GitHub repository configuration for the catalog."
                      }
                    },
                    "adoGit": {
                      "$ref": "#/definitions/sourceType",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Azure DevOps Git repository configuration for the catalog."
                      }
                    },
                    "syncType": {
                      "type": "string",
                      "defaultValue": "Scheduled",
                      "allowedValues": [
                        "Manual",
                        "Scheduled"
                      ],
                      "metadata": {
                        "description": "Optional. Indicates the type of sync that is configured for the catalog. Defaults to \"Scheduled\"."
                      }
                    },
                    "tags": {
                      "type": "object",
                      "metadata": {
                        "__bicep_resource_derived_type!": {
                          "source": "Microsoft.DevCenter/projects/catalogs@2025-02-01#properties/tags"
                        },
                        "description": "Optional. Resource tags to apply to the catalog."
                      },
                      "nullable": true
                    },
                    "location": {
                      "type": "string",
                      "defaultValue": "[resourceGroup().location]",
                      "metadata": {
                        "description": "Optional. Location for all resources."
                      }
                    }
                  },
                  "resources": {
                    "project": {
                      "existing": true,
                      "type": "Microsoft.DevCenter/projects",
                      "apiVersion": "2025-02-01",
                      "name": "[parameters('projectName')]"
                    },
                    "catalog": {
                      "type": "Microsoft.DevCenter/projects/catalogs",
                      "apiVersion": "2025-02-01",
                      "name": "[format('{0}/{1}', parameters('projectName'), parameters('name'))]",
                      "properties": {
                        "syncType": "[parameters('syncType')]",
                        "tags": "[parameters('tags')]",
                        "gitHub": "[parameters('gitHub')]",
                        "adoGit": "[parameters('adoGit')]"
                      }
                    }
                  },
                  "outputs": {
                    "resourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the catalog."
                      },
                      "value": "[resourceId('Microsoft.DevCenter/projects/catalogs', parameters('projectName'), parameters('name'))]"
                    },
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the catalog."
                      },
                      "value": "[parameters('name')]"
                    },
                    "resourceGroupName": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the resource group the catalog was created in."
                      },
                      "value": "[resourceGroup().name]"
                    },
                    "location": {
                      "type": "string",
                      "metadata": {
                        "description": "The location the resource was deployed into."
                      },
                      "value": "[parameters('location')]"
                    }
                  }
                }
              },
              "dependsOn": [
                "project"
              ]
            },
            "project_pool": {
              "copy": {
                "name": "project_pool",
                "count": "[length(coalesce(parameters('pools'), createArray()))]"
              },
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('{0}-Project-Pool-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "name": {
                    "value": "[coalesce(parameters('pools'), createArray())[copyIndex()].name]"
                  },
                  "projectName": {
                    "value": "[parameters('name')]"
                  },
                  "displayName": {
                    "value": "[tryGet(coalesce(parameters('pools'), createArray())[copyIndex()], 'displayName')]"
                  },
                  "devBoxDefinitionType": {
                    "value": "[tryGet(coalesce(parameters('pools'), createArray())[copyIndex()], 'devBoxDefinitionType')]"
                  },
                  "devBoxDefinition": {
                    "value": "[tryGet(coalesce(parameters('pools'), createArray())[copyIndex()], 'devBoxDefinition')]"
                  },
                  "devBoxDefinitionName": {
                    "value": "[tryGet(coalesce(parameters('pools'), createArray())[copyIndex()], 'devBoxDefinitionName')]"
                  },
                  "location": {
                    "value": "[coalesce(tryGet(coalesce(parameters('pools'), createArray())[copyIndex()], 'location'), parameters('location'))]"
                  },
                  "tags": {
                    "value": "[tryGet(coalesce(parameters('pools'), createArray())[copyIndex()], 'tags')]"
                  },
                  "localAdministrator": {
                    "value": "[coalesce(parameters('pools'), createArray())[copyIndex()].localAdministrator]"
                  },
                  "virtualNetworkType": {
                    "value": "[coalesce(parameters('pools'), createArray())[copyIndex()].virtualNetworkType]"
                  },
                  "managedVirtualNetworkRegion": {
                    "value": "[tryGet(coalesce(parameters('pools'), createArray())[copyIndex()], 'managedVirtualNetworkRegion')]"
                  },
                  "networkConnectionName": {
                    "value": "[tryGet(coalesce(parameters('pools'), createArray())[copyIndex()], 'networkConnectionName')]"
                  },
                  "singleSignOnStatus": {
                    "value": "[tryGet(coalesce(parameters('pools'), createArray())[copyIndex()], 'singleSignOnStatus')]"
                  },
                  "stopOnDisconnect": {
                    "value": "[tryGet(coalesce(parameters('pools'), createArray())[copyIndex()], 'stopOnDisconnect')]"
                  },
                  "stopOnNoConnect": {
                    "value": "[tryGet(coalesce(parameters('pools'), createArray())[copyIndex()], 'stopOnNoConnect')]"
                  },
                  "schedule": {
                    "value": "[tryGet(coalesce(parameters('pools'), createArray())[copyIndex()], 'schedule')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "languageVersion": "2.0",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.36.1.42791",
                      "templateHash": "12919519496313854576"
                    },
                    "name": "Dev Center Project Pool",
                    "description": "This module deploys a Dev Center Project Pool."
                  },
                  "definitions": {
                    "stopOnDisconnectType": {
                      "type": "object",
                      "properties": {
                        "gracePeriodMinutes": {
                          "type": "int",
                          "metadata": {
                            "description": "Required. The specified time in minutes to wait before stopping a Dev Box once disconnect is detected."
                          }
                        },
                        "status": {
                          "type": "string",
                          "allowedValues": [
                            "Disabled",
                            "Enabled"
                          ],
                          "metadata": {
                            "description": "Required. Whether the feature to stop the Dev Box on disconnect once the grace period has lapsed is enabled."
                          }
                        }
                      },
                      "metadata": {
                        "__bicep_export!": true,
                        "description": "The type for stopOnDisconnect configuration."
                      }
                    },
                    "stopOnNoConnectType": {
                      "type": "object",
                      "properties": {
                        "gracePeriodMinutes": {
                          "type": "int",
                          "metadata": {
                            "description": "Required. The specified time in minutes to wait before stopping a Dev Box if no connection is made."
                          }
                        },
                        "status": {
                          "type": "string",
                          "allowedValues": [
                            "Disabled",
                            "Enabled"
                          ],
                          "metadata": {
                            "description": "Required. Enables the feature to stop a started Dev Box when it has not been connected to, once the grace period has lapsed."
                          }
                        }
                      },
                      "metadata": {
                        "__bicep_export!": true,
                        "description": "The type for stopOnNoConnect configuration."
                      }
                    },
                    "devBoxDefinitionTypeType": {
                      "type": "object",
                      "properties": {
                        "imageReferenceResourceId": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. The resource ID of the image reference for the dev box definition. This would be the resource ID of the project image where the image has the same name as the dev box definition name. If the dev box definition is created from a catalog, then this would be the resource ID of the image in the project that was created from the catalog. The format is \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevCenter/projects/{projectName}/images/~Catalog~{catalogName}~{imagedefinition YAML name}\"."
                          }
                        },
                        "sku": {
                          "type": "object",
                          "properties": {
                            "capacity": {
                              "type": "int",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. If the SKU supports scale out/in then the capacity integer should be included. If scale out/in is not possible for the resource this may be omitted."
                              }
                            },
                            "family": {
                              "type": "string",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. If the service has different generations of hardware, for the same SKU, then that can be captured here. For example, \"general_i_v2\"."
                              }
                            },
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The name of the SKU. E.g. P3. It is typically a letter+number code. E.g. \"general_i_8c32gb256ssd_v2\" or \"general_i_8c32gb512ssd_v2\". See \"https://learn.microsoft.com/en-us/python/api/azure-developer-devcenter/azure.developer.devcenter.models.hardwareprofile\" for more information about acceptable SKU names."
                              }
                            },
                            "size": {
                              "type": "string",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. The SKU size. When the name field is the combination of tier and some other value, this would be the standalone code."
                              }
                            }
                          },
                          "metadata": {
                            "description": "Required. The SKU configuration for the dev box definition. See \"https://learn.microsoft.com/en-us/rest/api/devcenter/administrator/skus/list-by-subscription?view=rest-devcenter-administrator-2024-02-01\" for more information about SKUs."
                          }
                        }
                      },
                      "metadata": {
                        "__bicep_export!": true,
                        "description": "The type for dev box definition."
                      }
                    },
                    "poolScheduleType": {
                      "type": "object",
                      "properties": {
                        "state": {
                          "type": "string",
                          "allowedValues": [
                            "Disabled",
                            "Enabled"
                          ],
                          "metadata": {
                            "description": "Required. Indicates whether or not this scheduled task is enabled. Allowed values: Disabled, Enabled."
                          }
                        },
                        "time": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. The target time to trigger the action. The format is HH:MM. For example, \"14:30\" for 2:30 PM."
                          }
                        },
                        "timeZone": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. The IANA timezone id at which the schedule should execute. For example, \"Australia/Sydney\", \"Canada/Central\"."
                          }
                        }
                      },
                      "metadata": {
                        "__bicep_export!": true,
                        "description": "The type for the pool schedule."
                      }
                    }
                  },
                  "parameters": {
                    "name": {
                      "type": "string",
                      "minLength": 3,
                      "maxLength": 63,
                      "metadata": {
                        "description": "Required. The name of the project pool. This name must be unique within a project and is visible to developers when creating dev boxes."
                      }
                    },
                    "projectName": {
                      "type": "string",
                      "metadata": {
                        "description": "Conditional. The name of the parent dev center project. Required if the template is used in a standalone deployment."
                      }
                    },
                    "displayName": {
                      "type": "string",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The display name of the pool."
                      }
                    },
                    "devBoxDefinitionType": {
                      "type": "string",
                      "defaultValue": "Reference",
                      "allowedValues": [
                        "Reference",
                        "Value"
                      ],
                      "metadata": {
                        "description": "Optional. Indicates if the pool is created from an existing Dev Box Definition or if one is provided directly."
                      }
                    },
                    "devBoxDefinitionName": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Name of a Dev Box definition in parent Project of this Pool. If creating a pool from a definition defined in the Dev Center, then this will be the name of the definition. If creating a pool from a custom definition (e.g. Team Customizations), first the catalog must be added to this project, and second must use the format \"\\~Catalog\\~{catalogName}\\~{imagedefinition YAML name}\" (e.g. \"\\~Catalog\\~eshopRepo\\~frontend-dev\")."
                      }
                    },
                    "devBoxDefinition": {
                      "$ref": "#/definitions/devBoxDefinitionTypeType",
                      "nullable": true,
                      "metadata": {
                        "description": "Conditional. A definition of the machines that are created from this Pool. Required if devBoxDefinitionType is \"Value\"."
                      }
                    },
                    "location": {
                      "type": "string",
                      "defaultValue": "[resourceGroup().location]",
                      "metadata": {
                        "description": "Optional. Location for all resources."
                      }
                    },
                    "tags": {
                      "type": "object",
                      "metadata": {
                        "__bicep_resource_derived_type!": {
                          "source": "Microsoft.DevCenter/projects/pools@2025-02-01#properties/tags"
                        },
                        "description": "Optional. Resource tags to apply to the pool."
                      },
                      "nullable": true
                    },
                    "localAdministrator": {
                      "type": "string",
                      "allowedValues": [
                        "Enabled",
                        "Disabled"
                      ],
                      "metadata": {
                        "description": "Required. Each dev box creator will be granted the selected permissions on the dev boxes they create. Indicates whether owners of Dev Boxes in this pool are added as a \"local administrator\" or \"standard user\" on the Dev Box."
                      }
                    },
                    "virtualNetworkType": {
                      "type": "string",
                      "allowedValues": [
                        "Managed",
                        "Unmanaged"
                      ],
                      "metadata": {
                        "description": "Required. Indicates whether the pool uses a Virtual Network managed by Microsoft or a customer provided network. For the easiest configuration experience, the Microsoft hosted network can be used for dev box deployment. For organizations that require customized networking, use a network connection resource."
                      }
                    },
                    "managedVirtualNetworkRegion": {
                      "type": "string",
                      "nullable": true,
                      "metadata": {
                        "description": "Conditional. The region of the managed virtual network. Required if virtualNetworkType is \"Managed\"."
                      }
                    },
                    "networkConnectionName": {
                      "type": "string",
                      "nullable": true,
                      "metadata": {
                        "description": "Conditional. Name of a Network Connection in parent Project of this Pool. Required if virtualNetworkType is \"Unmanaged\". The region hosting a pool is determined by the region of the network connection. For best performance, create a dev box pool for every region where your developers are located. The network connection cannot be configured with \"None\" domain join type and must be first attached to the Dev Center before used by the pool. Will be set to \"managedNetwork\" if virtualNetworkType is \"Managed\"."
                      }
                    },
                    "singleSignOnStatus": {
                      "type": "string",
                      "nullable": true,
                      "allowedValues": [
                        "Enabled",
                        "Disabled"
                      ],
                      "metadata": {
                        "description": "Optional. Indicates whether Dev Boxes in this pool are created with single sign on enabled. The also requires that single sign on be enabled on the tenant. Changing this setting will not affect existing dev boxes."
                      }
                    },
                    "stopOnDisconnect": {
                      "$ref": "#/definitions/stopOnDisconnectType",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Stop on \"disconnect\" configuration settings for Dev Boxes created in this pool. Dev boxes in this pool will hibernate after the grace period after the user disconnects."
                      }
                    },
                    "stopOnNoConnect": {
                      "$ref": "#/definitions/stopOnNoConnectType",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Stop on \"no connect\" configuration settings for Dev Boxes created in this pool. Dev boxes in this pool will hibernate after the grace period if the user never connects."
                      }
                    },
                    "schedule": {
                      "$ref": "#/definitions/poolScheduleType",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The schedule for the pool. Dev boxes in this pool will auto-stop every day as per the schedule configuration."
                      }
                    }
                  },
                  "resources": {
                    "project": {
                      "existing": true,
                      "type": "Microsoft.DevCenter/projects",
                      "apiVersion": "2025-02-01",
                      "name": "[parameters('projectName')]"
                    },
                    "pool": {
                      "type": "Microsoft.DevCenter/projects/pools",
                      "apiVersion": "2025-02-01",
                      "name": "[format('{0}/{1}', parameters('projectName'), parameters('name'))]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]",
                      "properties": {
                        "devBoxDefinition": "[if(equals(parameters('devBoxDefinitionType'), 'Value'), createObject('imageReference', createObject('id', tryGet(parameters('devBoxDefinition'), 'imageReferenceResourceId')), 'sku', tryGet(parameters('devBoxDefinition'), 'sku')), null())]",
                        "devBoxDefinitionName": "[parameters('devBoxDefinitionName')]",
                        "devBoxDefinitionType": "[parameters('devBoxDefinitionType')]",
                        "displayName": "[parameters('displayName')]",
                        "licenseType": "Windows_Client",
                        "localAdministrator": "[parameters('localAdministrator')]",
                        "managedVirtualNetworkRegions": "[if(equals(parameters('virtualNetworkType'), 'Managed'), createArray(parameters('managedVirtualNetworkRegion')), null())]",
                        "networkConnectionName": "[if(equals(parameters('virtualNetworkType'), 'Unmanaged'), parameters('networkConnectionName'), 'managedNetwork')]",
                        "singleSignOnStatus": "[parameters('singleSignOnStatus')]",
                        "stopOnDisconnect": "[parameters('stopOnDisconnect')]",
                        "stopOnNoConnect": "[parameters('stopOnNoConnect')]",
                        "virtualNetworkType": "[parameters('virtualNetworkType')]"
                      }
                    },
                    "pool_schedule": {
                      "condition": "[not(equals(parameters('schedule'), null()))]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('{0}-Pool-Schedule', uniqueString(deployment().name, parameters('location')))]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "state": {
                            "value": "[parameters('schedule').state]"
                          },
                          "time": {
                            "value": "[parameters('schedule').time]"
                          },
                          "timeZone": {
                            "value": "[parameters('schedule').timeZone]"
                          },
                          "poolName": {
                            "value": "[parameters('name')]"
                          },
                          "projectName": {
                            "value": "[parameters('projectName')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "languageVersion": "2.0",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.36.1.42791",
                              "templateHash": "13472426796772435774"
                            },
                            "name": "Dev Center Project Pool Schedule",
                            "description": "This module deploys a Dev Center Project Pool Schedule."
                          },
                          "parameters": {
                            "poolName": {
                              "type": "string",
                              "metadata": {
                                "description": "Conditional. The name of the parent dev center project pool. Required if the template is used in a standalone deployment."
                              }
                            },
                            "projectName": {
                              "type": "string",
                              "metadata": {
                                "description": "Conditional. The name of the parent dev center project. Required if the template is used in a standalone deployment."
                              }
                            },
                            "location": {
                              "type": "string",
                              "defaultValue": "[resourceGroup().location]",
                              "metadata": {
                                "description": "Optional. Location for all resources."
                              }
                            },
                            "tags": {
                              "type": "object",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Resource tags to apply to the pool."
                              }
                            },
                            "state": {
                              "type": "string",
                              "allowedValues": [
                                "Disabled",
                                "Enabled"
                              ],
                              "metadata": {
                                "description": "Required. Indicates whether or not this scheduled task is enabled. Allowed values: Disabled, Enabled."
                              }
                            },
                            "time": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The target time to trigger the action. The format is HH:MM. For example, \"14:30\" for 2:30 PM."
                              }
                            },
                            "timeZone": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The IANA timezone id at which the schedule should execute. For example, \"Australia/Sydney\", \"Canada/Central\"."
                              }
                            }
                          },
                          "resources": {
                            "project::pool": {
                              "existing": true,
                              "type": "Microsoft.DevCenter/projects/pools",
                              "apiVersion": "2025-02-01",
                              "name": "[format('{0}/{1}', parameters('projectName'), parameters('poolName'))]"
                            },
                            "project": {
                              "existing": true,
                              "type": "Microsoft.DevCenter/projects",
                              "apiVersion": "2025-02-01",
                              "name": "[parameters('projectName')]"
                            },
                            "schedule": {
                              "type": "Microsoft.DevCenter/projects/pools/schedules",
                              "apiVersion": "2025-02-01",
                              "name": "[format('{0}/{1}/{2}', parameters('projectName'), parameters('poolName'), 'default')]",
                              "properties": {
                                "frequency": "Daily",
                                "location": "[parameters('location')]",
                                "state": "[parameters('state')]",
                                "tags": "[parameters('tags')]",
                                "time": "[parameters('time')]",
                                "timeZone": "[parameters('timeZone')]",
                                "type": "StopDevBox"
                              }
                            }
                          },
                          "outputs": {
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "The name of the deployed schedule."
                              },
                              "value": "default"
                            },
                            "resourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource ID of the deployed schedule."
                              },
                              "value": "[resourceId('Microsoft.DevCenter/projects/pools/schedules', parameters('projectName'), parameters('poolName'), 'default')]"
                            },
                            "resourceGroupName": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource group the schedule was deployed into."
                              },
                              "value": "[resourceGroup().name]"
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "pool"
                      ]
                    }
                  },
                  "outputs": {
                    "resourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the pool."
                      },
                      "value": "[resourceId('Microsoft.DevCenter/projects/pools', parameters('projectName'), parameters('name'))]"
                    },
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the pool."
                      },
                      "value": "[parameters('name')]"
                    },
                    "resourceGroupName": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the resource group the pool was created in."
                      },
                      "value": "[resourceGroup().name]"
                    },
                    "location": {
                      "type": "string",
                      "metadata": {
                        "description": "The location the resource was deployed into."
                      },
                      "value": "[reference('pool', '2025-02-01', 'full').location]"
                    }
                  }
                }
              },
              "dependsOn": [
                "project",
                "project_catalog"
              ]
            }
          },
          "outputs": {
            "name": {
              "type": "string",
              "metadata": {
                "description": "The name of the Dev Center Project."
              },
              "value": "[parameters('name')]"
            },
            "resourceId": {
              "type": "string",
              "metadata": {
                "description": "The resource ID of the Dev Center Project."
              },
              "value": "[resourceId('Microsoft.DevCenter/projects', parameters('name'))]"
            },
            "resourceGroupName": {
              "type": "string",
              "metadata": {
                "description": "The name of the resource group the Dev Center Project resource was deployed into."
              },
              "value": "[resourceGroup().name]"
            },
            "location": {
              "type": "string",
              "metadata": {
                "description": "The location the Dev Center Project resource was deployed into."
              },
              "value": "[reference('project', '2025-02-01', 'full').location]"
            },
            "systemAssignedMIPrincipalId": {
              "type": "string",
              "nullable": true,
              "metadata": {
                "description": "The principal ID of the system assigned identity."
              },
              "value": "[tryGet(tryGet(reference('project', '2025-02-01', 'full'), 'identity'), 'principalId')]"
            }
          }
        }
      },
      "dependsOn": [
        "devcenter",
        "devcenter_devboxDefinition"
      ]
    }
  },
  "outputs": {
    "resourceId": {
      "type": "string",
      "metadata": {
        "description": "The resource ID of the Dev Center."
      },
      "value": "[resourceId('Microsoft.DevCenter/devcenters', parameters('name'))]"
    },
    "name": {
      "type": "string",
      "metadata": {
        "description": "The name of the Dev Center."
      },
      "value": "[parameters('name')]"
    },
    "resourceGroupName": {
      "type": "string",
      "metadata": {
        "description": "The resource group the Dev Center was deployed into."
      },
      "value": "[resourceGroup().name]"
    },
    "location": {
      "type": "string",
      "metadata": {
        "description": "The location the Dev Center was deployed into."
      },
      "value": "[reference('devcenter', '2025-02-01', 'full').location]"
    },
    "systemAssignedMIPrincipalId": {
      "type": "string",
      "nullable": true,
      "metadata": {
        "description": "The principal ID of the system assigned identity."
      },
      "value": "[tryGet(tryGet(reference('devcenter', '2025-02-01', 'full'), 'identity'), 'principalId')]"
    },
    "devCenterUri": {
      "type": "string",
      "metadata": {
        "description": "The URI of the Dev Center."
      },
      "value": "[reference('devcenter').devCenterUri]"
    },
    "devboxDefinitionNames": {
      "type": "array",
      "items": {
        "type": "string"
      },
      "metadata": {
        "description": "The names of the DevBox definitions."
      },
      "copy": {
        "count": "[length(coalesce(parameters('devboxDefinitions'), createArray()))]",
        "input": "[reference(format('devcenter_devboxDefinition[{0}]', copyIndex())).outputs.name.value]"
      }
    }
  }
}