{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "_generator": {
      "name": "bicep",
      "version": "0.32.4.45862",
      "templateHash": "6608423374289101796"
    },
    "name": "Hybrid Container Service Provisioned Cluster Instance",
    "description": "Deploy a provisioned cluster instance."
  },
  "parameters": {
    "name": {
      "type": "string",
      "metadata": {
        "description": "Required. The name of the provisioned cluster instance."
      }
    },
    "location": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "Optional. Location for all Resources."
      }
    },
    "enableTelemetry": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Optional. Enable/Disable usage telemetry for module."
      }
    },
    "sshPrivateKeyPemSecretName": {
      "type": "string",
      "defaultValue": "AksArcAgentSshPrivateKeyPem",
      "metadata": {
        "description": "Optional. The name of the secret in the key vault that contains the SSH private key PEM."
      }
    },
    "sshPublicKeySecretName": {
      "type": "string",
      "defaultValue": "AksArcAgentSshPublicKey",
      "metadata": {
        "description": "Optional. The name of the secret in the key vault that contains the SSH public key."
      }
    },
    "sshPublicKey": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Conditional. The SSH public key that will be used to access the kubernetes cluster nodes. If not specified, a new SSH key pair will be generated. Required if no existing SSH keys."
      }
    },
    "keyVaultName": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Conditional. The name of the key vault. The key vault name. Required if no existing SSH keys."
      }
    },
    "customLocationId": {
      "type": "string",
      "metadata": {
        "description": "Required. The id of the Custom location that used to create hybrid aks."
      }
    },
    "kubernetesVersion": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Optional. The Kubernetes version for the cluster."
      }
    },
    "agentPoolProfiles": {
      "type": "array",
      "defaultValue": [
        {
          "name": "nodepool1",
          "count": 1,
          "enableAutoScaling": false,
          "maxCount": 5,
          "minCount": 1,
          "maxPods": 110,
          "nodeLabels": {},
          "nodeTaints": [],
          "osSKU": "CBLMariner",
          "osType": "Linux",
          "vmSize": "Standard_A4_v2"
        }
      ],
      "metadata": {
        "description": "Optional. Agent pool configuration."
      }
    },
    "logicalNetworkId": {
      "type": "string",
      "metadata": {
        "description": "Required. The id of the logical network that the AKS nodes will be connected to."
      }
    },
    "controlPlaneCount": {
      "type": "int",
      "defaultValue": 1,
      "metadata": {
        "description": "Optional. The number of control plane nodes."
      }
    },
    "controlPlaneVmSize": {
      "type": "string",
      "defaultValue": "Standard_A4_v2",
      "metadata": {
        "description": "Optional. The VM size for control plane nodes."
      }
    },
    "controlPlaneIP": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Optional. The host IP for control plane endpoint."
      }
    },
    "podCidr": {
      "type": "string",
      "defaultValue": "10.244.0.0/16",
      "metadata": {
        "description": "Optional. The CIDR range for the pods in the kubernetes cluster."
      }
    },
    "azureHybridBenefit": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Optional. Azure Hybrid Benefit configuration."
      }
    },
    "nfsCsiDriverEnabled": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Optional. Enable or disable NFS CSI driver."
      }
    },
    "smbCsiDriverEnabled": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Optional. Enable or disable SMB CSI driver."
      }
    },
    "identityType": {
      "type": "string",
      "defaultValue": "SystemAssigned",
      "allowedValues": [
        "SystemAssigned",
        "None"
      ],
      "metadata": {
        "description": "Optional. The identity type for the cluster. Allowed values: \"SystemAssigned\", \"None\"."
      }
    },
    "connectClustersTags": {
      "type": "object",
      "defaultValue": {},
      "metadata": {
        "description": "Optional. Tags for the cluster resource."
      }
    },
    "aadTenantId": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Optional. The Azure AD tenant ID."
      }
    },
    "aadAdminGroupObjectIds": {
      "type": "array",
      "defaultValue": [],
      "metadata": {
        "description": "Optional. The Azure AD admin group object IDs."
      }
    },
    "enableAzureRBAC": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Optional. Enable Azure RBAC."
      }
    },
    "agentAutoUpgrade": {
      "type": "string",
      "defaultValue": "Enabled",
      "allowedValues": [
        "Enabled",
        "Disabled"
      ],
      "metadata": {
        "description": "Optional. Enable automatic agent upgrades."
      }
    },
    "oidcIssuerEnabled": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Optional. Enable OIDC issuer."
      }
    },
    "workloadIdentityEnabled": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Optional. Enable workload identity."
      }
    }
  },
  "resources": [
    {
      "condition": "[parameters('enableTelemetry')]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2024-03-01",
      "name": "[format('46d3xbcp.res.hybcontsvc-provclustinst.{0}.{1}', replace('-..--..-', '.', '-'), substring(uniqueString(deployment().name, parameters('location')), 0, 4))]",
      "properties": {
        "mode": "Incremental",
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "resources": [],
          "outputs": {
            "telemetry": {
              "type": "String",
              "value": "For more information, see https://aka.ms/avm/TelemetryInfo"
            }
          }
        }
      }
    },
    {
      "type": "Microsoft.ManagedIdentity/userAssignedIdentities",
      "apiVersion": "2018-11-30",
      "name": "hxtest",
      "location": "[parameters('location')]"
    },
    {
      "condition": "[empty(parameters('sshPublicKey'))]",
      "type": "Microsoft.Resources/deploymentScripts",
      "apiVersion": "2020-10-01",
      "name": "generateSSHKey",
      "location": "[parameters('location')]",
      "kind": "AzurePowerShell",
      "identity": {
        "type": "UserAssigned",
        "userAssignedIdentities": {
          "[format('{0}', resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', 'hxtest'))]": {}
        }
      },
      "properties": {
        "azPowerShellVersion": "8.0",
        "retentionInterval": "P1D",
        "scriptContent": "      # Create temp directory in a known location\n      $tempDir = \"/tmp/sshkeys\"\n      New-Item -ItemType Directory -Path $tempDir -Force\n      Set-Location $tempDir\n\n      # Generate SSH key pair using ssh-keygen\n      ssh-keygen -t rsa -b 4096 -f ./key -N '\"\"' -q\n\n      # Read the generated keys\n      $publicKey = Get-Content -Path \"./key.pub\" -Raw\n      $privateKey = Get-Content -Path \"./key\" -Raw\n\n      # Clean up temp files\n      Remove-Item -Path \"./key*\" -Force\n      Remove-Item -Path $tempDir -Force -Recurse\n\n      # Set output\n      $DeploymentScriptOutputs = @{}\n      $DeploymentScriptOutputs['publicKey'] = $publicKey\n      $DeploymentScriptOutputs['privateKey'] = $privateKey\n    "
      },
      "dependsOn": [
        "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', 'hxtest')]"
      ]
    },
    {
      "condition": "[empty(parameters('sshPublicKey'))]",
      "type": "Microsoft.KeyVault/vaults/secrets",
      "apiVersion": "2023-07-01",
      "name": "[format('{0}/{1}', parameters('keyVaultName'), parameters('sshPublicKeySecretName'))]",
      "properties": {
        "value": "[reference(resourceId('Microsoft.Resources/deploymentScripts', 'generateSSHKey'), '2020-10-01').outputs.publicKey]"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deploymentScripts', 'generateSSHKey')]"
      ]
    },
    {
      "condition": "[empty(parameters('sshPublicKey'))]",
      "type": "Microsoft.KeyVault/vaults/secrets",
      "apiVersion": "2023-07-01",
      "name": "[format('{0}/{1}', parameters('keyVaultName'), parameters('sshPrivateKeyPemSecretName'))]",
      "properties": {
        "value": "[reference(resourceId('Microsoft.Resources/deploymentScripts', 'generateSSHKey'), '2020-10-01').outputs.privateKey]"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deploymentScripts', 'generateSSHKey')]"
      ]
    },
    {
      "type": "Microsoft.HybridContainerService/provisionedClusterInstances",
      "apiVersion": "2024-01-01",
      "scope": "[format('Microsoft.Kubernetes/connectedClusters/{0}', parameters('name'))]",
      "name": "default",
      "extendedLocation": {
        "name": "[parameters('customLocationId')]",
        "type": "CustomLocation"
      },
      "properties": {
        "agentPoolProfiles": "[parameters('agentPoolProfiles')]",
        "cloudProviderProfile": {
          "infraNetworkProfile": {
            "vnetSubnetIds": [
              "[parameters('logicalNetworkId')]"
            ]
          }
        },
        "clusterVMAccessProfile": {},
        "controlPlane": {
          "count": "[parameters('controlPlaneCount')]",
          "vmSize": "[parameters('controlPlaneVmSize')]",
          "controlPlaneEndpoint": {
            "hostIP": "[parameters('controlPlaneIP')]"
          }
        },
        "kubernetesVersion": "[parameters('kubernetesVersion')]",
        "licenseProfile": {
          "azureHybridBenefit": "[parameters('azureHybridBenefit')]"
        },
        "linuxProfile": {
          "ssh": {
            "publicKeys": [
              {
                "keyData": "[if(empty(parameters('sshPublicKey')), reference(resourceId('Microsoft.Resources/deploymentScripts', 'generateSSHKey'), '2020-10-01').outputs.publicKey, parameters('sshPublicKey'))]"
              }
            ]
          }
        },
        "networkProfile": {
          "podCidr": "[parameters('podCidr')]",
          "networkPolicy": "calico",
          "loadBalancerProfile": {
            "count": 0
          }
        },
        "storageProfile": {
          "nfsCsiDriver": {
            "enabled": "[parameters('nfsCsiDriverEnabled')]"
          },
          "smbCsiDriver": {
            "enabled": "[parameters('smbCsiDriverEnabled')]"
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', 'connectedCluster')]",
        "[resourceId('Microsoft.Resources/deploymentScripts', 'generateSSHKey')]",
        "[resourceId('Microsoft.KeyVault/vaults/secrets', parameters('keyVaultName'), parameters('sshPublicKeySecretName'))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "connectedCluster",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "name": {
            "value": "[parameters('name')]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "enableTelemetry": {
            "value": "[parameters('enableTelemetry')]"
          },
          "identityType": {
            "value": "[parameters('identityType')]"
          },
          "tags": {
            "value": "[parameters('connectClustersTags')]"
          },
          "aadTenantId": {
            "value": "[parameters('aadTenantId')]"
          },
          "aadAdminGroupObjectIds": {
            "value": "[parameters('aadAdminGroupObjectIds')]"
          },
          "enableAzureRBAC": {
            "value": "[parameters('enableAzureRBAC')]"
          },
          "agentAutoUpgrade": {
            "value": "[parameters('agentAutoUpgrade')]"
          },
          "oidcIssuerEnabled": {
            "value": "[parameters('oidcIssuerEnabled')]"
          },
          "workloadIdentityEnabled": {
            "value": "[parameters('workloadIdentityEnabled')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "languageVersion": "2.0",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.32.4.45862",
              "templateHash": "15406540205079791461"
            },
            "name": "Kubernetes Connected Clusters",
            "description": "Deploy an Azure Arc connected cluster."
          },
          "parameters": {
            "name": {
              "type": "string",
              "metadata": {
                "description": "Required. The name of the Azure Arc connected cluster."
              }
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]",
              "metadata": {
                "description": "Optional. Location for all Resources."
              }
            },
            "enableTelemetry": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Optional. Enable/Disable usage telemetry for module."
              }
            },
            "identityType": {
              "type": "string",
              "defaultValue": "SystemAssigned",
              "allowedValues": [
                "SystemAssigned",
                "None"
              ],
              "metadata": {
                "description": "Optional. The identity type for the cluster. Allowed values: \"SystemAssigned\", \"None\"."
              }
            },
            "tags": {
              "type": "object",
              "nullable": true,
              "metadata": {
                "description": "Optional. Tags for the cluster resource."
              }
            },
            "aadTenantId": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. Optional. The Azure AD tenant ID."
              }
            },
            "aadAdminGroupObjectIds": {
              "type": "array",
              "defaultValue": [],
              "metadata": {
                "description": "Optional. The Azure AD admin group object IDs."
              }
            },
            "enableAzureRBAC": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Optional. Enable Azure RBAC."
              }
            },
            "agentAutoUpgrade": {
              "type": "string",
              "defaultValue": "Enabled",
              "allowedValues": [
                "Enabled",
                "Disabled"
              ],
              "metadata": {
                "description": "Optional. Enable automatic agent upgrades."
              }
            },
            "oidcIssuerEnabled": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Optional. Enable OIDC issuer."
              }
            },
            "workloadIdentityEnabled": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Optional. Enable workload identity."
              }
            }
          },
          "resources": {
            "avmTelemetry": {
              "condition": "[parameters('enableTelemetry')]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2024-03-01",
              "name": "[format('46d3xbcp.res.kubernetes-connectedcluster.{0}.{1}', replace('-..--..-', '.', '-'), substring(uniqueString(deployment().name, parameters('location')), 0, 4))]",
              "properties": {
                "mode": "Incremental",
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "resources": [],
                  "outputs": {
                    "telemetry": {
                      "type": "String",
                      "value": "For more information, see https://aka.ms/avm/TelemetryInfo"
                    }
                  }
                }
              }
            },
            "connectedCluster": {
              "type": "Microsoft.Kubernetes/connectedClusters",
              "apiVersion": "2024-07-15-preview",
              "name": "[parameters('name')]",
              "kind": "ProvisionedCluster",
              "location": "[parameters('location')]",
              "identity": {
                "type": "[parameters('identityType')]"
              },
              "tags": "[parameters('tags')]",
              "properties": {
                "aadProfile": "[if(not(empty(parameters('aadTenantId'))), createObject('tenantID', parameters('aadTenantId'), 'adminGroupObjectIDs', parameters('aadAdminGroupObjectIds'), 'enableAzureRBAC', parameters('enableAzureRBAC')), null())]",
                "agentPublicKeyCertificate": "",
                "arcAgentProfile": {
                  "agentAutoUpgrade": "[parameters('agentAutoUpgrade')]"
                },
                "distribution": null,
                "infrastructure": null,
                "oidcIssuerProfile": {
                  "enabled": "[parameters('oidcIssuerEnabled')]"
                },
                "securityProfile": {
                  "workloadIdentity": {
                    "enabled": "[parameters('workloadIdentityEnabled')]"
                  }
                },
                "azureHybridBenefit": null
              }
            }
          },
          "outputs": {
            "name": {
              "type": "string",
              "metadata": {
                "description": "The name of the connected cluster."
              },
              "value": "[parameters('name')]"
            },
            "resourceId": {
              "type": "string",
              "metadata": {
                "description": "The ID of the connected cluster."
              },
              "value": "[resourceId('Microsoft.Kubernetes/connectedClusters', parameters('name'))]"
            },
            "resourceGroupName": {
              "type": "string",
              "metadata": {
                "description": "The resource group of the connected cluster."
              },
              "value": "[resourceGroup().name]"
            },
            "location": {
              "type": "string",
              "metadata": {
                "description": "The location of the connected cluster."
              },
              "value": "[reference('connectedCluster', '2024-07-15-preview', 'full').location]"
            },
            "connectedClusterId": {
              "type": "string",
              "metadata": {
                "description": "The resource ID of the connected cluster."
              },
              "value": "[resourceId('Microsoft.Kubernetes/connectedClusters', parameters('name'))]"
            }
          }
        }
      }
    }
  ],
  "outputs": {
    "name": {
      "type": "string",
      "metadata": {
        "description": "The name of the Aks Arc."
      },
      "value": "default"
    },
    "resourceId": {
      "type": "string",
      "metadata": {
        "description": "The ID of the Aks Arc."
      },
      "value": "[extensionResourceId(resourceId('Microsoft.Kubernetes/connectedClusters', parameters('name')), 'Microsoft.HybridContainerService/provisionedClusterInstances', 'default')]"
    },
    "resourceGroupName": {
      "type": "string",
      "metadata": {
        "description": "The resource group of the Aks Arc."
      },
      "value": "[resourceGroup().name]"
    }
  }
}