{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "languageVersion": "2.0",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "_generator": {
      "name": "bicep",
      "version": "0.35.1.17967",
      "templateHash": "9641196365326614564"
    },
    "name": "Web/Function Apps",
    "description": "This module deploys a Web or Function App."
  },
  "definitions": {
    "privateEndpointOutputType": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "metadata": {
            "description": "The name of the private endpoint."
          }
        },
        "resourceId": {
          "type": "string",
          "metadata": {
            "description": "The resource ID of the private endpoint."
          }
        },
        "groupId": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "The group Id for the private endpoint Group."
          }
        },
        "customDnsConfigs": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "fqdn": {
                "type": "string",
                "nullable": true,
                "metadata": {
                  "description": "FQDN that resolves to private endpoint IP address."
                }
              },
              "ipAddresses": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "metadata": {
                  "description": "A list of private IP addresses of the private endpoint."
                }
              }
            }
          },
          "metadata": {
            "description": "The custom DNS configurations of the private endpoint."
          }
        },
        "networkInterfaceResourceIds": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "metadata": {
            "description": "The IDs of the network interfaces associated with the private endpoint."
          }
        }
      },
      "metadata": {
        "__bicep_export!": true
      }
    },
    "configType": {
      "type": "object",
      "discriminator": {
        "propertyName": "name",
        "mapping": {
          "appsettings": {
            "$ref": "#/definitions/appSettingsConfigType"
          },
          "authsettings": {
            "$ref": "#/definitions/authSettingsConfigType"
          },
          "authsettingsV2": {
            "$ref": "#/definitions/authSettingsV2ConfigType"
          },
          "azurestorageaccounts": {
            "$ref": "#/definitions/azureStorageAccountConfigType"
          },
          "backup": {
            "$ref": "#/definitions/backupConfigType"
          },
          "connectionstrings": {
            "$ref": "#/definitions/connectionStringsConfigType"
          },
          "logs": {
            "$ref": "#/definitions/logsConfigType"
          },
          "metadata": {
            "$ref": "#/definitions/metadataConfigType"
          },
          "pushsettings": {
            "$ref": "#/definitions/pushSettingsConfigType"
          },
          "slotConfigNames": {
            "$ref": "#/definitions/slotConfigNamesConfigType"
          },
          "web": {
            "$ref": "#/definitions/webConfigType"
          }
        }
      },
      "metadata": {
        "__bicep_export!": true,
        "description": "The type of a site configuration."
      }
    },
    "slotConfigNamesConfigType": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "allowedValues": [
            "slotConfigNames"
          ],
          "metadata": {
            "description": "Required. The type of config."
          }
        },
        "properties": {
          "type": "object",
          "properties": {
            "appSettingNames": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "nullable": true,
              "metadata": {
                "description": "Optional. List of application settings names."
              }
            },
            "azureStorageConfigNames": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "nullable": true,
              "metadata": {
                "description": "Optional. List of external Azure storage account identifiers."
              }
            },
            "connectionStringNames": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "nullable": true,
              "metadata": {
                "description": "Optional. List of connection string names."
              }
            }
          },
          "metadata": {
            "description": "Required. The config settings."
          }
        }
      },
      "metadata": {
        "__bicep_export!": true,
        "description": "The type of a slotConfigNames configuration."
      }
    },
    "slotType": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "metadata": {
            "description": "Required. Name of the slot."
          }
        },
        "location": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "Optional. Location for all Resources."
          }
        },
        "serverFarmResourceId": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "Optional. The resource ID of the app service plan to use for the slot."
          }
        },
        "httpsOnly": {
          "type": "bool",
          "nullable": true,
          "metadata": {
            "description": "Optional. Configures a slot to accept only HTTPS requests. Issues redirect for HTTP requests."
          }
        },
        "clientAffinityEnabled": {
          "type": "bool",
          "nullable": true,
          "metadata": {
            "description": "Optional. If client affinity is enabled."
          }
        },
        "appServiceEnvironmentResourceId": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "Optional. The resource ID of the app service environment to use for this resource."
          }
        },
        "managedIdentities": {
          "$ref": "#/definitions/managedIdentityAllType",
          "nullable": true,
          "metadata": {
            "description": "Optional. The managed identity definition for this resource."
          }
        },
        "keyVaultAccessIdentityResourceId": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "Optional. The resource ID of the assigned identity to be used to access a key vault with."
          }
        },
        "storageAccountRequired": {
          "type": "bool",
          "nullable": true,
          "metadata": {
            "description": "Optional. Checks if Customer provided storage account is required."
          }
        },
        "virtualNetworkSubnetId": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "Optional. Azure Resource Manager ID of the Virtual network and subnet to be joined by Regional VNET Integration. This must be of the form /subscriptions/{subscriptionName}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualNetworks/{vnetName}/subnets/{subnetName}."
          }
        },
        "siteConfig": {
          "type": "object",
          "metadata": {
            "__bicep_resource_derived_type!": {
              "source": "Microsoft.Web/sites/slots@2024-04-01#properties/properties/properties/siteConfig"
            },
            "description": "Optional. The site config object."
          },
          "nullable": true
        },
        "functionAppConfig": {
          "type": "object",
          "metadata": {
            "__bicep_resource_derived_type!": {
              "source": "Microsoft.Web/sites/slots@2024-04-01#properties/properties/properties/functionAppConfig"
            },
            "description": "Optional. The Function App config object."
          },
          "nullable": true
        },
        "configs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/configType"
          },
          "nullable": true,
          "metadata": {
            "description": "Optional. The web site config."
          }
        },
        "extensions": {
          "type": "array",
          "items": {
            "type": "object"
          },
          "nullable": true,
          "metadata": {
            "description": "Optional. The extensions configuration."
          }
        },
        "lock": {
          "$ref": "#/definitions/lockType",
          "nullable": true,
          "metadata": {
            "description": "Optional. The lock settings of the service."
          }
        },
        "privateEndpoints": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/privateEndpointSingleServiceType"
          },
          "nullable": true,
          "metadata": {
            "description": "Optional. Configuration details for private endpoints."
          }
        },
        "tags": {
          "type": "object",
          "nullable": true,
          "metadata": {
            "description": "Optional. Tags of the resource."
          }
        },
        "roleAssignments": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/roleAssignmentType"
          },
          "nullable": true,
          "metadata": {
            "description": "Optional. Array of role assignments to create."
          }
        },
        "diagnosticSettings": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/diagnosticSettingFullType"
          },
          "nullable": true,
          "metadata": {
            "description": "Optional. The diagnostic settings of the service."
          }
        },
        "clientCertEnabled": {
          "type": "bool",
          "nullable": true,
          "metadata": {
            "description": "Optional. To enable client certificate authentication (TLS mutual authentication)."
          }
        },
        "clientCertExclusionPaths": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "Optional. Client certificate authentication comma-separated exclusion paths."
          }
        },
        "clientCertMode": {
          "type": "string",
          "metadata": {
            "__bicep_resource_derived_type!": {
              "source": "Microsoft.Web/sites/slots@2024-04-01#properties/properties/properties/clientCertMode"
            },
            "description": "Optional. This composes with ClientCertEnabled setting.</p>- ClientCertEnabled: false means ClientCert is ignored.</p>- ClientCertEnabled: true and ClientCertMode: Required means ClientCert is required.</p>- ClientCertEnabled: true and ClientCertMode: Optional means ClientCert is optional or accepted."
          },
          "nullable": true
        },
        "cloningInfo": {
          "type": "object",
          "metadata": {
            "__bicep_resource_derived_type!": {
              "source": "Microsoft.Web/sites/slots@2024-04-01#properties/properties/properties/cloningInfo"
            },
            "description": "Optional. If specified during app creation, the app is cloned from a source app."
          },
          "nullable": true
        },
        "containerSize": {
          "type": "int",
          "nullable": true,
          "metadata": {
            "description": "Optional. Size of the function container."
          }
        },
        "customDomainVerificationId": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "Optional. Unique identifier that verifies the custom domains assigned to the app. Customer will add this ID to a txt record for verification."
          }
        },
        "dailyMemoryTimeQuota": {
          "type": "int",
          "nullable": true,
          "metadata": {
            "description": "Optional. Maximum allowed daily memory-time quota (applicable on dynamic apps only)."
          }
        },
        "enabled": {
          "type": "bool",
          "nullable": true,
          "metadata": {
            "description": "Optional. Setting this value to false disables the app (takes the app offline)."
          }
        },
        "hostNameSslStates": {
          "type": "array",
          "metadata": {
            "__bicep_resource_derived_type!": {
              "source": "Microsoft.Web/sites/slots@2024-04-01#properties/properties/properties/hostNameSslStates"
            },
            "description": "Optional. Hostname SSL states are used to manage the SSL bindings for app's hostnames."
          },
          "nullable": true
        },
        "hyperV": {
          "type": "bool",
          "nullable": true,
          "metadata": {
            "description": "Optional. Hyper-V sandbox."
          }
        },
        "publicNetworkAccess": {
          "type": "string",
          "metadata": {
            "__bicep_resource_derived_type!": {
              "source": "Microsoft.Web/sites/slots@2024-04-01#properties/properties/properties/publicNetworkAccess"
            },
            "description": "Optional. Allow or block all public traffic."
          },
          "nullable": true
        },
        "redundancyMode": {
          "type": "string",
          "metadata": {
            "__bicep_resource_derived_type!": {
              "source": "Microsoft.Web/sites/slots@2024-04-01#properties/properties/properties/redundancyMode"
            },
            "description": "Optional. Site redundancy mode."
          },
          "nullable": true
        },
        "basicPublishingCredentialsPolicies": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/basicPublishingCredentialsPolicyType"
          },
          "nullable": true,
          "metadata": {
            "description": "Optional. The site publishing credential policy names which are associated with the site slot."
          }
        },
        "vnetContentShareEnabled": {
          "type": "bool",
          "nullable": true,
          "metadata": {
            "description": "Optional. To enable accessing content over virtual network."
          }
        },
        "vnetImagePullEnabled": {
          "type": "bool",
          "nullable": true,
          "metadata": {
            "description": "Optional. To enable pulling image over Virtual Network."
          }
        },
        "vnetRouteAllEnabled": {
          "type": "bool",
          "nullable": true,
          "metadata": {
            "description": "Optional. Virtual Network Route All enabled. This causes all outbound traffic to have Virtual Network Security Groups and User Defined Routes applied."
          }
        },
        "hybridConnectionRelays": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/hybridConnectionRelayType"
          },
          "nullable": true,
          "metadata": {
            "description": "Optional. Names of hybrid connection relays to connect app with."
          }
        },
        "dnsConfiguration": {
          "type": "object",
          "metadata": {
            "__bicep_resource_derived_type!": {
              "source": "Microsoft.Web/sites/slots@2024-04-01#properties/properties/properties/dnsConfiguration"
            },
            "description": "Optional. Property to configure various DNS related settings for a site."
          },
          "nullable": true
        },
        "autoGeneratedDomainNameLabelScope": {
          "type": "string",
          "allowedValues": [
            "NoReuse",
            "ResourceGroupReuse",
            "SubscriptionReuse",
            "TenantReuse"
          ],
          "nullable": true,
          "metadata": {
            "description": "Optional. Specifies the scope of uniqueness for the default hostname during resource creation."
          }
        }
      },
      "metadata": {
        "__bicep_export!": true,
        "description": "The type of a slot."
      }
    },
    "extensionType": {
      "type": "object",
      "properties": {
        "properties": {
          "type": "object",
          "metadata": {
            "__bicep_resource_derived_type!": {
              "source": "Microsoft.Web/sites/extensions@2024-04-01#properties/properties"
            },
            "description": "Optional. Sets the properties."
          },
          "nullable": true
        }
      }
    },
    "basicPublishingCredentialsPolicyType": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "allowedValues": [
            "ftp",
            "scm"
          ],
          "metadata": {
            "description": "Required. The name of the resource."
          }
        },
        "allow": {
          "type": "bool",
          "nullable": true,
          "metadata": {
            "description": "Optional. Set to true to enable or false to disable a publishing method."
          }
        },
        "location": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "Optional. Location for all Resources."
          }
        }
      },
      "metadata": {
        "__bicep_export!": true,
        "description": "The type of a basic publishing credential policy."
      }
    },
    "hybridConnectionRelayType": {
      "type": "object",
      "properties": {
        "hybridConnectionResourceId": {
          "type": "string",
          "metadata": {
            "description": "Required. The resource ID of the relay namespace hybrid connection."
          }
        },
        "sendKeyName": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "Optional. Name of the authorization rule send key to use."
          }
        }
      },
      "metadata": {
        "__bicep_export!": true,
        "description": "The type of a hybrid connection relay."
      }
    },
    "_1.privateEndpointCustomDnsConfigType": {
      "type": "object",
      "properties": {
        "fqdn": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "Optional. FQDN that resolves to private endpoint IP address."
          }
        },
        "ipAddresses": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "metadata": {
            "description": "Required. A list of private IP addresses of the private endpoint."
          }
        }
      },
      "metadata": {
        "__bicep_imported_from!": {
          "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.5.1"
        }
      }
    },
    "_1.privateEndpointIpConfigurationType": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "metadata": {
            "description": "Required. The name of the resource that is unique within a resource group."
          }
        },
        "properties": {
          "type": "object",
          "properties": {
            "groupId": {
              "type": "string",
              "metadata": {
                "description": "Required. The ID of a group obtained from the remote resource that this private endpoint should connect to."
              }
            },
            "memberName": {
              "type": "string",
              "metadata": {
                "description": "Required. The member name of a group obtained from the remote resource that this private endpoint should connect to."
              }
            },
            "privateIPAddress": {
              "type": "string",
              "metadata": {
                "description": "Required. A private IP address obtained from the private endpoint's subnet."
              }
            }
          },
          "metadata": {
            "description": "Required. Properties of private endpoint IP configurations."
          }
        }
      },
      "metadata": {
        "__bicep_imported_from!": {
          "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.5.1"
        }
      }
    },
    "_1.privateEndpointPrivateDnsZoneGroupType": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "Optional. The name of the Private DNS Zone Group."
          }
        },
        "privateDnsZoneGroupConfigs": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string",
                "nullable": true,
                "metadata": {
                  "description": "Optional. The name of the private DNS Zone Group config."
                }
              },
              "privateDnsZoneResourceId": {
                "type": "string",
                "metadata": {
                  "description": "Required. The resource id of the private DNS zone."
                }
              }
            }
          },
          "metadata": {
            "description": "Required. The private DNS Zone Groups to associate the Private Endpoint. A DNS Zone Group can support up to 5 DNS zones."
          }
        }
      },
      "metadata": {
        "__bicep_imported_from!": {
          "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.5.1"
        }
      }
    },
    "_2.scmIpSecurityRestrictionType": {
      "type": "object",
      "properties": {
        "action": {
          "type": "string",
          "allowedValues": [
            "Allow",
            "Deny"
          ],
          "nullable": true,
          "metadata": {
            "description": "Optional. Allow or Deny access for this IP range."
          }
        },
        "description": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "Optional. IP restriction rule description."
          }
        },
        "headers": {
          "type": "object",
          "properties": {},
          "additionalProperties": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "metadata": {
              "description": "Required. A header."
            }
          },
          "nullable": true,
          "metadata": {
            "description": "Optional. IP restriction rule headers.\nX-Forwarded-Host (https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Forwarded-Host#Examples).\nThe matching logic is ..\n- If the property is null or empty (default), all hosts(or lack of) are allowed.\n- A value is compared using ordinal-ignore-case (excluding port number).\n- Subdomain wildcards are permitted but don't match the root domain. For example, *.contoso.com matches the subdomain foo.contoso.com\nbut not the root domain contoso.com or multi-level foo.bar.contoso.com\n- Unicode host names are allowed but are converted to Punycode for matching.\n\nX-Forwarded-For (https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Forwarded-For#Examples).\nThe matching logic is ..\n- If the property is null or empty (default), any forwarded-for chains (or lack of) are allowed.\n- If any address (excluding port number) in the chain (comma separated) matches the CIDR defined by the property.\n\nX-Azure-FDID and X-FD-HealthProbe.\nThe matching logic is exact match."
          }
        },
        "ipAddress": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "Optional. IP address the security restriction is valid for. It can be in form of pure ipv4 address (required SubnetMask property) or CIDR notation such as ipv4/mask (leading bit match). For CIDR, SubnetMask property must not be specified."
          }
        },
        "name": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "Optional. IP restriction rule name."
          }
        },
        "priority": {
          "type": "int",
          "nullable": true,
          "metadata": {
            "description": "Optional. Priority of IP restriction rule."
          }
        },
        "subnetMask": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "Optional. Subnet mask for the range of IP addresses the restriction is valid for."
          }
        },
        "subnetTrafficTag": {
          "type": "int",
          "nullable": true,
          "metadata": {
            "description": "Optional. (internal) Subnet traffic tag."
          }
        },
        "tag": {
          "type": "string",
          "allowedValues": [
            "Default",
            "ServiceTag",
            "XffProxy"
          ],
          "nullable": true,
          "metadata": {
            "description": "Optional. Defines what this IP filter will be used for. This is to support IP filtering on proxies."
          }
        },
        "vnetSubnetResourceId": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "Optional. Virtual network resource id."
          }
        },
        "vnetTrafficTag": {
          "type": "int",
          "nullable": true,
          "metadata": {
            "description": "Optional. (internal) Vnet traffic tag."
          }
        }
      },
      "metadata": {
        "description": "The type of a IP security restriction.",
        "__bicep_imported_from!": {
          "sourceTemplate": "slot/main.bicep"
        }
      }
    },
    "_2.slowRequestBasedTriggerType": {
      "type": "object",
      "properties": {
        "count": {
          "type": "int",
          "nullable": true,
          "metadata": {
            "description": "Optional. Request Count."
          }
        },
        "path": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "Optional. Request Path."
          }
        },
        "timeInterval": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "Optional. Time interval."
          }
        },
        "timeTaken": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "Optional. Time taken."
          }
        }
      },
      "metadata": {
        "description": "The type of aslow request based trigger.",
        "__bicep_imported_from!": {
          "sourceTemplate": "slot/main.bicep"
        }
      }
    },
    "appSettingsConfigType": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "allowedValues": [
            "appsettings"
          ],
          "metadata": {
            "description": "Required. The type of config."
          }
        },
        "storageAccountUseIdentityAuthentication": {
          "type": "bool",
          "nullable": true,
          "metadata": {
            "description": "Optional. If the provided storage account requires Identity based authentication ('allowSharedKeyAccess' is set to false). When set to true, the minimum role assignment required for the App Service Managed Identity to the storage account is 'Storage Blob Data Owner'."
          }
        },
        "storageAccountResourceId": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "Optional. Required if app of kind functionapp. Resource ID of the storage account to manage triggers and logging function executions."
          }
        },
        "applicationInsightResourceId": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "Optional. Resource ID of the application insight to leverage for this resource."
          }
        },
        "retainCurrentAppSettings": {
          "type": "bool",
          "nullable": true,
          "metadata": {
            "description": "Optional. The retain the current app settings. Defaults to true."
          }
        },
        "properties": {
          "type": "object",
          "properties": {},
          "additionalProperties": {
            "type": "string",
            "metadata": {
              "description": "Required. An app settings key-value pair."
            }
          },
          "nullable": true,
          "metadata": {
            "description": "Optional. The app settings key-value pairs except for AzureWebJobsStorage, AzureWebJobsDashboard, APPINSIGHTS_INSTRUMENTATIONKEY and APPLICATIONINSIGHTS_CONNECTION_STRING."
          }
        }
      },
      "metadata": {
        "description": "The type of an app settings configuration.",
        "__bicep_imported_from!": {
          "sourceTemplate": "slot/main.bicep"
        }
      }
    },
    "authSettingsConfigType": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "allowedValues": [
            "authsettings"
          ],
          "metadata": {
            "description": "Required. The type of config."
          }
        },
        "properties": {
          "type": "object",
          "properties": {
            "aadClaimsAuthorization": {
              "type": "string",
              "nullable": true,
              "metadata": {
                "description": "Optional. Gets a JSON string containing the Azure AD Acl settings."
              }
            },
            "additionalLoginParams": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "nullable": true,
              "metadata": {
                "description": "Optional. Login parameters to send to the OpenID Connect authorization endpoint when a user logs in. Each parameter must be in the form \"key=value\"."
              }
            },
            "allowedAudiences": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "nullable": true,
              "metadata": {
                "description": "Optional. Allowed audience values to consider when validating JSON Web Tokens issued by Azure Active Directory. Note that the `ClientID` value is always considered an allowed audience, regardless of this setting."
              }
            },
            "allowedExternalRedirectUrls": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "nullable": true,
              "metadata": {
                "description": "Optional. External URLs that can be redirected to as part of logging in or logging out of the app. Note that the query string part of the URL is ignored. This is an advanced setting typically only needed by Windows Store application backends. Note that URLs within the current domain are always implicitly allowed."
              }
            },
            "authFilePath": {
              "type": "string",
              "nullable": true,
              "metadata": {
                "description": "Optional. The path of the config file containing auth settings. If the path is relative, base will the site's root directory."
              }
            },
            "clientId": {
              "type": "string",
              "nullable": true,
              "metadata": {
                "description": "Optional. The Client ID of this relying party application, known as the client_id. This setting is required for enabling OpenID Connection authentication with Azure Active Directory or other 3rd party OpenID Connect providers. More information on [OpenID Connect](http://openid.net/specs/openid-connect-core-1_0.html)."
              }
            },
            "clientSecret": {
              "type": "securestring",
              "nullable": true,
              "metadata": {
                "description": "Optional. The Client Secret of this relying party application (in Azure Active Directory, this is also referred to as the Key). This setting is optional. If no client secret is configured, the OpenID Connect implicit auth flow is used to authenticate end users. Otherwise, the OpenID Connect Authorization Code Flow is used to authenticate end users. More information on [OpenID Connect](http://openid.net/specs/openid-connect-core-1_0.html)."
              }
            },
            "clientSecretCertificateThumbprint": {
              "type": "string",
              "nullable": true,
              "metadata": {
                "description": "Optional. An alternative to the client secret, that is the thumbprint of a certificate used for signing purposes. This property acts as a replacement for the Client Secret."
              }
            },
            "clientSecretSettingName": {
              "type": "string",
              "nullable": true,
              "metadata": {
                "description": "Optional. The app setting name that contains the client secret of the relying party application."
              }
            },
            "configVersion": {
              "type": "string",
              "nullable": true,
              "metadata": {
                "description": "Optional. The ConfigVersion of the Authentication / Authorization feature in use for the current app. The setting in this value can control the behavior of the control plane for Authentication / Authorization."
              }
            },
            "defaultProvider": {
              "type": "string",
              "allowedValues": [
                "AzureActiveDirectory",
                "Facebook",
                "Github",
                "Google",
                "MicrosoftAccount",
                "Twitter"
              ],
              "nullable": true,
              "metadata": {
                "description": "Optional. The default authentication provider to use when multiple providers are configured. This setting is only needed if multiple providers are configured and the unauthenticated client action is set to \"RedirectToLoginPage\"."
              }
            },
            "enabled": {
              "type": "bool",
              "nullable": true,
              "metadata": {
                "description": "Optional. Set to `true` if the Authentication / Authorization feature is enabled for the current app."
              }
            },
            "facebookAppId": {
              "type": "string",
              "nullable": true,
              "metadata": {
                "description": "Optional. The App ID of the Facebook app used for login. This setting is required for enabling Facebook Login. Facebook Login [documentation](https://developers.facebook.com/docs/facebook-login)."
              }
            },
            "facebookAppSecret": {
              "type": "securestring",
              "nullable": true,
              "metadata": {
                "description": "Optional. The App Secret of the Facebook app used for Facebook Login. This setting is required for enabling Facebook Login. Facebook Login [documentation](https://developers.facebook.com/docs/facebook-login)."
              }
            },
            "facebookAppSecretSettingName": {
              "type": "string",
              "nullable": true,
              "metadata": {
                "description": "Optional. The app setting name that contains the app secret used for Facebook Login."
              }
            },
            "facebookOAuthScopes": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "nullable": true,
              "metadata": {
                "description": "Optional. The OAuth 2.0 scopes that will be requested as part of Facebook Login authentication. This setting is optional. Facebook Login [documentation](https://developers.facebook.com/docs/facebook-login)."
              }
            },
            "gitHubClientId": {
              "type": "string",
              "nullable": true,
              "metadata": {
                "description": "Optional. The Client Id of the GitHub app used for login. This setting is required for enabling Github login."
              }
            },
            "gitHubClientSecret": {
              "type": "securestring",
              "nullable": true,
              "metadata": {
                "description": "Optional. The Client Secret of the GitHub app used for Github Login. This setting is required for enabling Github login."
              }
            },
            "gitHubClientSecretSettingName": {
              "type": "string",
              "nullable": true,
              "metadata": {
                "description": "Optional. The app setting name that contains the client secret of the Github app used for GitHub Login."
              }
            },
            "gitHubOAuthScopes": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "nullable": true,
              "metadata": {
                "description": "Optional. The OAuth 2.0 scopes that will be requested as part of GitHub Login authentication."
              }
            },
            "googleClientId": {
              "type": "string",
              "nullable": true,
              "metadata": {
                "description": "Optional. The OpenID Connect Client ID for the Google web application. This setting is required for enabling Google Sign-In. Google Sign-In [documentation](https://developers.google.com/identity/sign-in/web)."
              }
            },
            "googleClientSecret": {
              "type": "securestring",
              "nullable": true,
              "metadata": {
                "description": "Optional. The client secret associated with the Google web application. This setting is required for enabling Google Sign-In. Google Sign-In [documentation](https://developers.google.com/identity/sign-in/web)."
              }
            },
            "googleClientSecretSettingName": {
              "type": "string",
              "nullable": true,
              "metadata": {
                "description": "Optional. The app setting name that contains the client secret associated with the Google web application."
              }
            },
            "googleOAuthScopes": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "nullable": true,
              "metadata": {
                "description": "Optional. The OAuth 2.0 scopes that will be requested as part of Google Sign-In authentication. This setting is optional. If not specified, \"openid\", \"profile\", and \"email\" are used as default scopes. Google Sign-In [documentation](https://developers.google.com/identity/sign-in/web)."
              }
            },
            "isAuthFromFile": {
              "type": "string",
              "allowedValues": [
                "false",
                "true"
              ],
              "nullable": true,
              "metadata": {
                "description": "Optional. \"true\" if the auth config settings should be read from a file, \"false\" otherwise."
              }
            },
            "issuer": {
              "type": "string",
              "nullable": true,
              "metadata": {
                "description": "Optional. The OpenID Connect Issuer URI that represents the entity which issues access tokens for this application. When using Azure Active Directory, this value is the URI of the directory tenant, e.g. https://sts.windows.net/{tenant-guid}/. This URI is a case-sensitive identifier for the token issuer. More information on [OpenID Connect Discovery](http://openid.net/specs/openid-connect-discovery-1_0.html)."
              }
            },
            "microsoftAccountClientId": {
              "type": "string",
              "nullable": true,
              "metadata": {
                "description": "Optional. The OAuth 2.0 client ID that was created for the app used for authentication. This setting is required for enabling Microsoft Account authentication. Microsoft Account OAuth [documentation](https://dev.onedrive.com/auth/msa_oauth.htm)."
              }
            },
            "microsoftAccountClientSecret": {
              "type": "securestring",
              "nullable": true,
              "metadata": {
                "description": "Optional. The OAuth 2.0 client secret that was created for the app used for authentication. This setting is required for enabling Microsoft Account authentication. Microsoft Account OAuth [documentation](https://dev.onedrive.com/auth/msa_oauth.htm)."
              }
            },
            "microsoftAccountClientSecretSettingName": {
              "type": "string",
              "nullable": true,
              "metadata": {
                "description": "Optional. The app setting name containing the OAuth 2.0 client secret that was created for the app used for authentication."
              }
            },
            "microsoftAccountOAuthScopes": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "nullable": true,
              "metadata": {
                "description": "Optional. The OAuth 2.0 scopes that will be requested as part of Microsoft Account authentication. This setting is optional. If not specified, \"wl.basic\" is used as the default scope. Microsoft Account Scopes and permissions [documentation](https://msdn.microsoft.com/en-us/library/dn631845.aspx)."
              }
            },
            "runtimeVersion": {
              "type": "string",
              "nullable": true,
              "metadata": {
                "description": "Optional. The RuntimeVersion of the Authentication / Authorization feature in use for the current app. The setting in this value can control the behavior of certain features in the Authentication / Authorization module."
              }
            },
            "tokenRefreshExtensionHours": {
              "type": "int",
              "nullable": true,
              "metadata": {
                "description": "Optional. The number of hours after session token expiration that a session token can be used to call the token refresh API. The default is 72 hours."
              }
            },
            "tokenStoreEnabled": {
              "type": "bool",
              "nullable": true,
              "metadata": {
                "description": "Optional. Set to `true` to durably store platform-specific security tokens that are obtained during login flows. The default is `false`."
              }
            },
            "twitterConsumerKey": {
              "type": "securestring",
              "nullable": true,
              "metadata": {
                "description": "Optional. The OAuth 1.0a consumer key of the Twitter application used for sign-in. This setting is required for enabling Twitter Sign-In. Twitter Sign-In [documentation](https://dev.twitter.com/web/sign-in)."
              }
            },
            "twitterConsumerSecret": {
              "type": "securestring",
              "nullable": true,
              "metadata": {
                "description": "Optional. The OAuth 1.0a consumer secret of the Twitter application used for sign-in. This setting is required for enabling Twitter Sign-In. Twitter Sign-In [documentation](https://dev.twitter.com/web/sign-in)."
              }
            },
            "twitterConsumerSecretSettingName": {
              "type": "string",
              "nullable": true,
              "metadata": {
                "description": "Optional. The app setting name that contains the OAuth 1.0a consumer secret of the Twitter application used for sign-in."
              }
            },
            "unauthenticatedClientAction": {
              "type": "string",
              "allowedValues": [
                "AllowAnonymous",
                "RedirectToLoginPage"
              ],
              "nullable": true,
              "metadata": {
                "description": "Optional. The action to take when an unauthenticated client attempts to access the app."
              }
            },
            "validateIssuer": {
              "type": "bool",
              "nullable": true,
              "metadata": {
                "description": "Optional. Gets a value indicating whether the issuer should be a valid HTTPS url and be validated as such."
              }
            }
          },
          "metadata": {
            "description": "Required. The config settings."
          }
        }
      },
      "metadata": {
        "description": "The type of an auth settings configuration.",
        "__bicep_imported_from!": {
          "sourceTemplate": "slot/main.bicep"
        }
      }
    },
    "authSettingsV2ConfigType": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "allowedValues": [
            "authsettingsV2"
          ],
          "metadata": {
            "description": "Required. The type of config."
          }
        },
        "properties": {
          "type": "object",
          "properties": {
            "globalValidation": {
              "type": "object",
              "properties": {
                "excludedPaths": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The paths for which unauthenticated flow would not be redirected to the login page."
                  }
                },
                "redirectToProvider": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The default authentication provider to use when multiple providers are configured. This setting is only needed if multiple providers are configured and the unauthenticated client action is set to \"RedirectToLoginPage\"."
                  }
                },
                "requireAuthentication": {
                  "type": "bool",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Set to `true` if the authentication flow is required by every request."
                  }
                },
                "unauthenticatedClientAction": {
                  "type": "string",
                  "allowedValues": [
                    "AllowAnonymous",
                    "RedirectToLoginPage",
                    "Return401",
                    "Return403"
                  ],
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The action to take when an unauthenticated client attempts to access the app."
                  }
                }
              },
              "nullable": true,
              "metadata": {
                "description": "Optional. The configuration settings that determines the validation flow of users using App Service Authentication/Authorization."
              }
            },
            "httpSettings": {
              "type": "object",
              "properties": {
                "forwardProxy": {
                  "type": "object",
                  "properties": {
                    "convention": {
                      "type": "string",
                      "allowedValues": [
                        "Custom",
                        "NoProxy",
                        "Standard"
                      ],
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The convention used to determine the url of the request made."
                      }
                    },
                    "customHostHeaderName": {
                      "type": "string",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The name of the header containing the host of the request."
                      }
                    },
                    "customProtoHeaderName": {
                      "type": "string",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The name of the header containing the scheme of the request."
                      }
                    }
                  },
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The configuration settings of a forward proxy used to make the requests."
                  }
                },
                "requireHttps": {
                  "type": "bool",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Set to `false` if the authentication/authorization responses not having the HTTPS scheme are permissible."
                  }
                },
                "routes": {
                  "type": "object",
                  "properties": {
                    "apiPrefix": {
                      "type": "string",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The prefix that should precede all the authentication/authorization paths."
                      }
                    }
                  },
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The configuration settings of the paths HTTP requests."
                  }
                }
              },
              "nullable": true,
              "metadata": {
                "description": "Optional. The configuration settings of the HTTP requests for authentication and authorization requests made against App Service Authentication/Authorization."
              }
            },
            "identityProviders": {
              "type": "object",
              "properties": {
                "apple": {
                  "type": "object",
                  "properties": {
                    "enabled": {
                      "type": "bool",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Set to `false` if the Apple provider should not be enabled despite the set registration."
                      }
                    },
                    "login": {
                      "type": "object",
                      "properties": {
                        "scopes": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. A list of the scopes that should be requested while authenticating."
                          }
                        }
                      },
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The configuration settings of the login flow."
                      }
                    },
                    "registration": {
                      "type": "object",
                      "properties": {
                        "clientId": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. The Client ID of the app used for login."
                          }
                        },
                        "clientSecretSettingName": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. The app setting name that contains the client secret."
                          }
                        }
                      },
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The configuration settings of the Apple registration."
                      }
                    }
                  },
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The configuration settings of the Apple provider."
                  }
                },
                "azureActiveDirectory": {
                  "type": "object",
                  "properties": {
                    "enabled": {
                      "type": "bool",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Set to `false` if the Azure Active Directory provider should not be enabled despite the set registration."
                      }
                    },
                    "isAutoProvisioned": {
                      "type": "bool",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Gets a value indicating whether the Azure AD configuration was auto-provisioned using 1st party tooling. This is an internal flag primarily intended to support the Azure Management Portal. Users should not read or write to this property."
                      }
                    },
                    "login": {
                      "type": "object",
                      "properties": {
                        "disableWWWAuthenticate": {
                          "type": "bool",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Set to `true` if the www-authenticate provider should be omitted from the request."
                          }
                        },
                        "loginParameters": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Login parameters to send to the OpenID Connect authorization endpoint when a user logs in. Each parameter must be in the form \"key=value\"."
                          }
                        }
                      },
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The configuration settings of the Azure Active Directory login flow."
                      }
                    },
                    "registration": {
                      "type": "object",
                      "properties": {
                        "clientId": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. The Client ID of this relying party application, known as the client_id. This setting is required for enabling OpenID Connection authentication with Azure Active Directory or other 3rd party OpenID Connect providers. More information on [OpenID Connect](http://openid.net/specs/openid-connect-core-1_0.html)."
                          }
                        },
                        "clientSecretCertificateIssuer": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. An alternative to the client secret thumbprint, that is the issuer of a certificate used for signing purposes. This property acts as a replacement for the Client Secret Certificate Thumbprint."
                          }
                        },
                        "clientSecretCertificateSubjectAlternativeName": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. An alternative to the client secret thumbprint, that is the subject alternative name of a certificate used for signing purposes. This property acts as a replacement for the Client Secret Certificate Thumbprint."
                          }
                        },
                        "clientSecretCertificateThumbprint": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. An alternative to the client secret, that is the thumbprint of a certificate used for signing purposes. This property acts as a replacement for the Client Secret."
                          }
                        },
                        "clientSecretSettingName": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The app setting name that contains the client secret of the relying party application."
                          }
                        },
                        "openIdIssuer": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The OpenID Connect Issuer URI that represents the entity which issues access tokens for this application. When using Azure Active Directory, this value is the URI of the directory tenant, e.g. https://login.microsoftonline.com/v2.0/{tenant-guid}/. This URI is a case-sensitive identifier for the token issuer. More information on [OpenID Connect Discovery](http://openid.net/specs/openid-connect-discovery-1_0.html)."
                          }
                        }
                      },
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The configuration settings of the Azure Active Directory app registration."
                      }
                    },
                    "validation": {
                      "type": "object",
                      "properties": {
                        "allowedAudiences": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The list of audiences that can make successful authentication/authorization requests."
                          }
                        },
                        "defaultAuthorizationPolicy": {
                          "type": "object",
                          "properties": {
                            "allowedApplications": {
                              "type": "array",
                              "items": {
                                "type": "string"
                              },
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. The configuration settings of the Azure Active Directory allowed applications."
                              }
                            },
                            "allowedPrincipals": {
                              "type": "object",
                              "properties": {
                                "groups": {
                                  "type": "array",
                                  "items": {
                                    "type": "string"
                                  },
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The list of the allowed groups."
                                  }
                                },
                                "identities": {
                                  "type": "array",
                                  "items": {
                                    "type": "string"
                                  },
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The list of the allowed identities."
                                  }
                                }
                              },
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. The configuration settings of the Azure Active Directory allowed principals."
                              }
                            }
                          },
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The configuration settings of the default authorization policy."
                          }
                        },
                        "jwtClaimChecks": {
                          "type": "object",
                          "properties": {
                            "allowedClientApplications": {
                              "type": "array",
                              "items": {
                                "type": "string"
                              },
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. The list of the allowed client applications."
                              }
                            },
                            "allowedGroups": {
                              "type": "array",
                              "items": {
                                "type": "string"
                              },
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. The list of the allowed groups."
                              }
                            }
                          },
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The configuration settings of the checks that should be made while validating the JWT Claims."
                          }
                        }
                      },
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The configuration settings of the Azure Active Directory token validation flow."
                      }
                    }
                  },
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The configuration settings of the Azure Active directory provider."
                  }
                },
                "azureStaticWebApps": {
                  "type": "object",
                  "properties": {
                    "enabled": {
                      "type": "bool",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Set to `false` if the Azure Static Web Apps provider should not be enabled despite the set registration."
                      }
                    },
                    "registration": {
                      "type": "object",
                      "properties": {
                        "clientId": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. The Client ID of the app used for login."
                          }
                        }
                      },
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The configuration settings of the Azure Static Web Apps registration."
                      }
                    }
                  },
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The configuration settings of the Azure Static Web Apps provider."
                  }
                },
                "customOpenIdConnectProviders": {
                  "type": "object",
                  "properties": {},
                  "additionalProperties": {
                    "type": "object",
                    "properties": {
                      "enabled": {
                        "type": "bool",
                        "nullable": true,
                        "metadata": {
                          "description": "Optional. Set to `false` if the custom Open ID provider provider should not be enabled."
                        }
                      },
                      "login": {
                        "type": "object",
                        "properties": {
                          "nameClaimType": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The name of the claim that contains the users name."
                            }
                          },
                          "scopes": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            },
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. A list of the scopes that should be requested while authenticating."
                            }
                          }
                        },
                        "nullable": true,
                        "metadata": {
                          "description": "Optional. The configuration settings of the login flow of the custom Open ID Connect provider."
                        }
                      },
                      "registration": {
                        "type": "object",
                        "properties": {
                          "clientCredential": {
                            "type": "object",
                            "properties": {
                              "clientSecretSettingName": {
                                "type": "string",
                                "metadata": {
                                  "description": "Required. The app setting that contains the client secret for the custom Open ID Connect provider."
                                }
                              },
                              "method": {
                                "type": "string",
                                "allowedValues": [
                                  "ClientSecretPost"
                                ],
                                "metadata": {
                                  "description": "Required. The method that should be used to authenticate the user."
                                }
                              }
                            },
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The authentication credentials of the custom Open ID Connect provider."
                            }
                          },
                          "clientId": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The client id of the custom Open ID Connect provider."
                            }
                          },
                          "openIdConnectConfiguration": {
                            "type": "object",
                            "properties": {
                              "authorizationEndpoint": {
                                "type": "string",
                                "nullable": true,
                                "metadata": {
                                  "description": "Optional. The endpoint to be used to make an authorization request."
                                }
                              },
                              "certificationUri": {
                                "type": "string",
                                "nullable": true,
                                "metadata": {
                                  "description": "Optional. The endpoint that provides the keys necessary to validate the token."
                                }
                              },
                              "issuer": {
                                "type": "string",
                                "nullable": true,
                                "metadata": {
                                  "description": "Optional. The endpoint that issues the token."
                                }
                              },
                              "tokenEndpoint": {
                                "type": "string",
                                "nullable": true,
                                "metadata": {
                                  "description": "Optional. The endpoint to be used to request a token."
                                }
                              },
                              "wellKnownOpenIdConfiguration": {
                                "type": "string",
                                "nullable": true,
                                "metadata": {
                                  "description": "Optional. The endpoint that contains all the configuration endpoints for the provider."
                                }
                              }
                            },
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The configuration settings of the endpoints used for the custom Open ID Connect provider."
                            }
                          }
                        },
                        "nullable": true,
                        "metadata": {
                          "description": "Optional. The configuration settings of the app registration for the custom Open ID Connect provider."
                        }
                      }
                    },
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. The alias of each custom Open ID Connect provider."
                    }
                  },
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The map of the name of the alias of each custom Open ID Connect provider to the configuration settings of the custom Open ID Connect provider."
                  }
                },
                "facebook": {
                  "type": "object",
                  "properties": {
                    "enabled": {
                      "type": "bool",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Set to `false` if the Facebook provider should not be enabled despite the set registration."
                      }
                    },
                    "graphApiVersion": {
                      "type": "string",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The version of the Facebook api to be used while logging in."
                      }
                    },
                    "login": {
                      "type": "object",
                      "properties": {
                        "scopes": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. A list of the scopes that should be requested while authenticating."
                          }
                        }
                      },
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The configuration settings of the login flow."
                      }
                    },
                    "registration": {
                      "type": "object",
                      "properties": {
                        "appId": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. The App ID of the app used for login."
                          }
                        },
                        "appSecretSettingName": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. The app setting name that contains the app secret."
                          }
                        }
                      },
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The configuration settings of the app registration for the Facebook provider."
                      }
                    }
                  },
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The configuration settings of the Facebook provider."
                  }
                },
                "gitHub": {
                  "type": "object",
                  "properties": {
                    "enabled": {
                      "type": "bool",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Set to `false` if the GitHub provider should not be enabled despite the set registration."
                      }
                    },
                    "login": {
                      "type": "object",
                      "properties": {
                        "scopes": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. A list of the scopes that should be requested while authenticating."
                          }
                        }
                      },
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The configuration settings of the login flow."
                      }
                    },
                    "registration": {
                      "type": "object",
                      "properties": {
                        "clientId": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. The Client ID of the app used for login."
                          }
                        },
                        "clientSecretSettingName": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. The app setting name that contains the client secret."
                          }
                        }
                      },
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The configuration settings of the app registration for the GitHub provider."
                      }
                    }
                  },
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The configuration settings of the GitHub provider."
                  }
                },
                "google": {
                  "type": "object",
                  "properties": {
                    "enabled": {
                      "type": "bool",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Set to `false` if the Google provider should not be enabled despite the set registration."
                      }
                    },
                    "login": {
                      "type": "object",
                      "properties": {
                        "scopes": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. A list of the scopes that should be requested while authenticating."
                          }
                        }
                      },
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The configuration settings of the login flow."
                      }
                    },
                    "registration": {
                      "type": "object",
                      "properties": {
                        "clientId": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. The Client ID of the app used for login."
                          }
                        },
                        "clientSecretSettingName": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. The app setting name that contains the client secret."
                          }
                        }
                      },
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The configuration settings of the app registration for the Google provider."
                      }
                    },
                    "validation": {
                      "type": "object",
                      "properties": {
                        "allowedAudiences": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The configuration settings of the allowed list of audiences from which to validate the JWT token."
                          }
                        }
                      },
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The configuration settings of the Azure Active Directory token validation flow."
                      }
                    }
                  },
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The configuration settings of the Google provider."
                  }
                },
                "legacyMicrosoftAccount": {
                  "type": "object",
                  "properties": {
                    "enabled": {
                      "type": "bool",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Set to `false` if the legacy Microsoft Account provider should not be enabled despite the set registration."
                      }
                    },
                    "login": {
                      "type": "object",
                      "properties": {
                        "scopes": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. A list of the scopes that should be requested while authenticating."
                          }
                        }
                      },
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The configuration settings of the login flow."
                      }
                    },
                    "registration": {
                      "type": "object",
                      "properties": {
                        "clientId": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. The Client ID of the app used for login."
                          }
                        },
                        "clientSecretSettingName": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. The app setting name that contains the client secret."
                          }
                        }
                      },
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The configuration settings of the app registration for the legacy Microsoft Account provider."
                      }
                    },
                    "validation": {
                      "type": "object",
                      "properties": {
                        "allowedAudiences": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The configuration settings of the allowed list of audiences from which to validate the JWT token."
                          }
                        }
                      },
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The configuration settings of the legacy Microsoft Account provider token validation flow."
                      }
                    }
                  },
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The configuration settings of the legacy Microsoft Account provider."
                  }
                },
                "twitter": {
                  "type": "object",
                  "properties": {
                    "enabled": {
                      "type": "bool",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Set to `false` if the Twitter provider should not be enabled despite the set registration."
                      }
                    },
                    "registration": {
                      "type": "object",
                      "properties": {
                        "consumerKey": {
                          "type": "securestring",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The OAuth 1.0a consumer key of the Twitter application used for sign-in. This setting is required for enabling Twitter Sign-In. Twitter Sign-In [documentation](https://dev.twitter.com/web/sign-in)."
                          }
                        },
                        "consumerSecretSettingName": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The app setting name that contains the OAuth 1.0a consumer secret of the Twitter application used for sign-in."
                          }
                        }
                      },
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The configuration settings of the app registration for the Twitter provider."
                      }
                    }
                  },
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The configuration settings of the Twitter provider."
                  }
                }
              },
              "nullable": true,
              "metadata": {
                "description": "Optional. The configuration settings of each of the identity providers used to configure App Service Authentication/Authorization."
              }
            },
            "login": {
              "type": "object",
              "properties": {
                "allowedExternalRedirectUrls": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. External URLs that can be redirected to as part of logging in or logging out of the app. Note that the query string part of the URL is ignored. This is an advanced setting typically only needed by Windows Store application backends. Note that URLs within the current domain are always implicitly allowed."
                  }
                },
                "cookieExpiration": {
                  "type": "object",
                  "properties": {
                    "convention": {
                      "type": "string",
                      "allowedValues": [
                        "FixedTime",
                        "IdentityProviderDerived"
                      ],
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The convention used when determining the session cookie's expiration."
                      }
                    },
                    "timeToExpiration": {
                      "type": "string",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The time after the request is made when the session cookie should expire."
                      }
                    }
                  },
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The configuration settings of the session cookie's expiration."
                  }
                },
                "nonce": {
                  "type": "object",
                  "properties": {
                    "nonceExpirationInterval": {
                      "type": "string",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The time after the request is made when the nonce should expire."
                      }
                    },
                    "validateNonce": {
                      "type": "bool",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Set to `false` if the nonce should not be validated while completing the login flow."
                      }
                    }
                  },
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The configuration settings of the nonce used in the login flow."
                  }
                },
                "preserveUrlFragmentsForLogins": {
                  "type": "bool",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Set to `true` if the fragments from the request are preserved after the login request is made."
                  }
                },
                "routes": {
                  "type": "object",
                  "properties": {
                    "logoutEndpoint": {
                      "type": "string",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The endpoint at which a logout request should be made."
                      }
                    }
                  },
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The routes that specify the endpoints used for login and logout requests."
                  }
                },
                "tokenStore": {
                  "type": "object",
                  "properties": {
                    "azureBlobStorage": {
                      "type": "object",
                      "properties": {
                        "sasUrlSettingName": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The name of the app setting containing the SAS URL of the blob storage containing the tokens."
                          }
                        }
                      },
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The configuration settings of the storage of the tokens if blob storage is used."
                      }
                    },
                    "enabled": {
                      "type": "bool",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Set to `true` to durably store platform-specific security tokens that are obtained during login flows."
                      }
                    },
                    "fileSystem": {
                      "type": "object",
                      "properties": {
                        "directory": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The directory in which the tokens will be stored."
                          }
                        }
                      },
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The configuration settings of the storage of the tokens if a file system is used."
                      }
                    },
                    "tokenRefreshExtensionHours": {
                      "type": "int",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The number of hours after session token expiration that a session token can be used to call the token refresh API. The default is 72 hours."
                      }
                    }
                  },
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The configuration settings of the token store."
                  }
                }
              },
              "nullable": true,
              "metadata": {
                "description": "Optional. The configuration settings of the login flow of users using App Service Authentication/Authorization."
              }
            },
            "platform": {
              "type": "object",
              "properties": {
                "configFilePath": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The path of the config file containing auth settings if they come from a file. If the path is relative, base will the site's root directory."
                  }
                },
                "enabled": {
                  "type": "bool",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Set to `true` if the Authentication / Authorization feature is enabled for the current app."
                  }
                },
                "runtimeVersion": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The RuntimeVersion of the Authentication / Authorization feature in use for the current app. The setting in this value can control the behavior of certain features in the Authentication / Authorization module."
                  }
                }
              },
              "nullable": true,
              "metadata": {
                "description": "Optional. The configuration settings of the platform of App Service Authentication/Authorization."
              }
            }
          },
          "metadata": {
            "description": "Required. The config settings."
          }
        }
      },
      "metadata": {
        "description": "The type of an authSettingsV2 configuration.",
        "__bicep_imported_from!": {
          "sourceTemplate": "slot/main.bicep"
        }
      }
    },
    "azureStorageAccountConfigType": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "allowedValues": [
            "azurestorageaccounts"
          ],
          "metadata": {
            "description": "Required. The type of config."
          }
        },
        "properties": {
          "type": "object",
          "properties": {},
          "additionalProperties": {
            "type": "object",
            "properties": {
              "accessKey": {
                "type": "securestring",
                "nullable": true,
                "metadata": {
                  "description": "Optional. Access key for the storage account."
                }
              },
              "accountName": {
                "type": "string",
                "nullable": true,
                "metadata": {
                  "description": "Optional. Name of the storage account."
                }
              },
              "mountPath": {
                "type": "string",
                "nullable": true,
                "metadata": {
                  "description": "Optional. Path to mount the storage within the site's runtime environment."
                }
              },
              "protocol": {
                "type": "string",
                "allowedValues": [
                  "Http",
                  "Nfs",
                  "Smb"
                ],
                "nullable": true,
                "metadata": {
                  "description": "Optional. Mounting protocol to use for the storage account."
                }
              },
              "shareName": {
                "type": "string",
                "nullable": true,
                "metadata": {
                  "description": "Optional. Name of the file share (container name, for Blob storage)."
                }
              },
              "type": {
                "type": "string",
                "allowedValues": [
                  "AzureBlob",
                  "AzureFiles"
                ],
                "nullable": true,
                "metadata": {
                  "description": "Optional. Type of storage."
                }
              }
            },
            "nullable": true,
            "metadata": {
              "description": "Optional. The Azure Storage Info configuration."
            }
          },
          "metadata": {
            "description": "Required. The config settings."
          }
        }
      },
      "metadata": {
        "description": "The type of an Azure Storage Account configuration.",
        "__bicep_imported_from!": {
          "sourceTemplate": "slot/main.bicep"
        }
      }
    },
    "backupConfigType": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "allowedValues": [
            "backup"
          ],
          "metadata": {
            "description": "Required. The type of config."
          }
        },
        "properties": {
          "type": "object",
          "properties": {
            "backupName": {
              "type": "string",
              "nullable": true,
              "metadata": {
                "description": "Optional. Name of the backup."
              }
            },
            "backupSchedule": {
              "type": "object",
              "properties": {
                "frequencyInterval": {
                  "type": "int",
                  "metadata": {
                    "description": "Required. How often the backup should be executed (e.g. for weekly backup, this should be set to 7 and FrequencyUnit should be set to Day)."
                  }
                },
                "frequencyUnit": {
                  "type": "string",
                  "allowedValues": [
                    "Day",
                    "Hour"
                  ],
                  "metadata": {
                    "description": "Required. The unit of time for how often the backup should be executed (e.g. for weekly backup, this should be set to Day and FrequencyInterval should be set to 7)."
                  }
                },
                "keepAtLeastOneBackup": {
                  "type": "bool",
                  "metadata": {
                    "description": "Required. Set to `True` if the retention policy should always keep at least one backup in the storage account, regardless how old it is."
                  }
                },
                "retentionPeriodInDays": {
                  "type": "int",
                  "metadata": {
                    "description": "Required. After how many days backups should be deleted."
                  }
                },
                "startTime": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. When the schedule should start working."
                  }
                }
              },
              "nullable": true,
              "metadata": {
                "description": "Optional. Schedule for the backup if it is executed periodically."
              }
            },
            "databases": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "connectionString": {
                    "type": "securestring",
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. Contains a connection string to a database which is being backed up or restored. If the restore should happen to a new database, the database name inside is the new one."
                    }
                  },
                  "connectionStringName": {
                    "type": "string",
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. Contains a connection string name that is linked to the SiteConfig.ConnectionStrings. This is used during restore with overwrite connection strings options."
                    }
                  },
                  "databaseType": {
                    "type": "string",
                    "allowedValues": [
                      "LocalMySql",
                      "MySql",
                      "PostgreSql",
                      "SqlAzure"
                    ],
                    "metadata": {
                      "description": "Required. Database type (e.g. SqlAzure / MySql)."
                    }
                  },
                  "name": {
                    "type": "string",
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. The name of the setting."
                    }
                  }
                }
              },
              "nullable": true,
              "metadata": {
                "description": "Optional. Databases included in the backup."
              }
            },
            "enabled": {
              "type": "bool",
              "nullable": true,
              "metadata": {
                "description": "Optional. Set to `True` if the backup schedule is enabled (must be included in that case), `false` if the backup schedule should be disabled."
              }
            },
            "storageAccountUrl": {
              "type": "string",
              "nullable": true,
              "metadata": {
                "description": "Optional. SAS URL to the container."
              }
            }
          },
          "metadata": {
            "description": "Required. The config settings."
          }
        }
      },
      "metadata": {
        "description": "The type for a backup configuration.",
        "__bicep_imported_from!": {
          "sourceTemplate": "slot/main.bicep"
        }
      }
    },
    "connectionStringsConfigType": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "allowedValues": [
            "connectionstrings"
          ],
          "metadata": {
            "description": "Required. The type of config."
          }
        },
        "properties": {
          "type": "object",
          "properties": {},
          "additionalProperties": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "allowedValues": [
                  "ApiHub",
                  "Custom",
                  "DocDb",
                  "EventHub",
                  "MySql",
                  "NotificationHub",
                  "PostgreSQL",
                  "RedisCache",
                  "SQLAzure",
                  "SQLServer",
                  "ServiceBus"
                ],
                "metadata": {
                  "description": "Required. Type of database."
                }
              },
              "value": {
                "type": "string",
                "metadata": {
                  "description": "Required. Value of pair."
                }
              }
            },
            "nullable": true,
            "metadata": {
              "description": "Optional. The name of the connection string setting."
            }
          },
          "metadata": {
            "description": "Required. The config settings."
          }
        }
      },
      "metadata": {
        "description": "The type for a connection string configuration.",
        "__bicep_imported_from!": {
          "sourceTemplate": "slot/main.bicep"
        }
      }
    },
    "diagnosticSettingFullType": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "Optional. The name of the diagnostic setting."
          }
        },
        "logCategoriesAndGroups": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "category": {
                "type": "string",
                "nullable": true,
                "metadata": {
                  "description": "Optional. Name of a Diagnostic Log category for a resource type this setting is applied to. Set the specific logs to collect here."
                }
              },
              "categoryGroup": {
                "type": "string",
                "nullable": true,
                "metadata": {
                  "description": "Optional. Name of a Diagnostic Log category group for a resource type this setting is applied to. Set to `allLogs` to collect all logs."
                }
              },
              "enabled": {
                "type": "bool",
                "nullable": true,
                "metadata": {
                  "description": "Optional. Enable or disable the category explicitly. Default is `true`."
                }
              }
            }
          },
          "nullable": true,
          "metadata": {
            "description": "Optional. The name of logs that will be streamed. \"allLogs\" includes all possible logs for the resource. Set to `[]` to disable log collection."
          }
        },
        "metricCategories": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "category": {
                "type": "string",
                "metadata": {
                  "description": "Required. Name of a Diagnostic Metric category for a resource type this setting is applied to. Set to `AllMetrics` to collect all metrics."
                }
              },
              "enabled": {
                "type": "bool",
                "nullable": true,
                "metadata": {
                  "description": "Optional. Enable or disable the category explicitly. Default is `true`."
                }
              }
            }
          },
          "nullable": true,
          "metadata": {
            "description": "Optional. The name of metrics that will be streamed. \"allMetrics\" includes all possible metrics for the resource. Set to `[]` to disable metric collection."
          }
        },
        "logAnalyticsDestinationType": {
          "type": "string",
          "allowedValues": [
            "AzureDiagnostics",
            "Dedicated"
          ],
          "nullable": true,
          "metadata": {
            "description": "Optional. A string indicating whether the export to Log Analytics should use the default destination type, i.e. AzureDiagnostics, or use a destination type."
          }
        },
        "workspaceResourceId": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "Optional. Resource ID of the diagnostic log analytics workspace. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
          }
        },
        "storageAccountResourceId": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "Optional. Resource ID of the diagnostic storage account. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
          }
        },
        "eventHubAuthorizationRuleResourceId": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "Optional. Resource ID of the diagnostic event hub authorization rule for the Event Hubs namespace in which the event hub should be created or streamed to."
          }
        },
        "eventHubName": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "Optional. Name of the diagnostic event hub within the namespace to which logs are streamed. Without this, an event hub is created for each log category. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
          }
        },
        "marketplacePartnerResourceId": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "Optional. The full ARM resource ID of the Marketplace resource to which you would like to send Diagnostic Logs."
          }
        }
      },
      "metadata": {
        "description": "An AVM-aligned type for a diagnostic setting. To be used if both logs & metrics are supported by the resource provider.",
        "__bicep_imported_from!": {
          "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.5.1"
        }
      }
    },
    "lockType": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "Optional. Specify the name of lock."
          }
        },
        "kind": {
          "type": "string",
          "allowedValues": [
            "CanNotDelete",
            "None",
            "ReadOnly"
          ],
          "nullable": true,
          "metadata": {
            "description": "Optional. Specify the type of lock."
          }
        }
      },
      "metadata": {
        "description": "An AVM-aligned type for a lock.",
        "__bicep_imported_from!": {
          "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.5.1"
        }
      }
    },
    "logsConfigType": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "allowedValues": [
            "logs"
          ],
          "metadata": {
            "description": "Required. The type of config."
          }
        },
        "properties": {
          "type": "object",
          "properties": {
            "applicationLogs": {
              "type": "object",
              "properties": {
                "azureBlobStorage": {
                  "type": "object",
                  "properties": {
                    "level": {
                      "type": "string",
                      "allowedValues": [
                        "Error",
                        "Information",
                        "Off",
                        "Verbose",
                        "Warning"
                      ],
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Log level."
                      }
                    },
                    "retentionInDays": {
                      "type": "int",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Retention in days. Remove blobs older than X days. 0 or lower means no retention."
                      }
                    },
                    "sasUrl": {
                      "type": "string",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. SAS url to a azure blob container with read/write/list/delete permissions."
                      }
                    }
                  },
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Application logs to blob storage configuration."
                  }
                },
                "azureTableStorage": {
                  "type": "object",
                  "properties": {
                    "level": {
                      "type": "string",
                      "allowedValues": [
                        "Error",
                        "Information",
                        "Off",
                        "Verbose",
                        "Warning"
                      ],
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Log level."
                      }
                    },
                    "sasUrl": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. SAS URL to an Azure table with add/query/delete permissions."
                      }
                    }
                  },
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Application logs to azure table storage configuration."
                  }
                },
                "fileSystem": {
                  "type": "object",
                  "properties": {
                    "level": {
                      "type": "string",
                      "allowedValues": [
                        "Error",
                        "Information",
                        "Off",
                        "Verbose",
                        "Warning"
                      ],
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Log level."
                      }
                    }
                  },
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Application logs to file system configuration."
                  }
                }
              },
              "nullable": true,
              "metadata": {
                "description": "Optional. Application Logs for Azure configuration."
              }
            },
            "detailedErrorMessages": {
              "type": "object",
              "properties": {
                "enabled": {
                  "type": "bool",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Set to `True` if configuration is enabled, false if it is disabled."
                  }
                }
              },
              "nullable": true,
              "metadata": {
                "description": "Optional. Detailed error messages configuration."
              }
            },
            "failedRequestsTracing": {
              "type": "object",
              "properties": {
                "enabled": {
                  "type": "bool",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Set to `True` if configuration is enabled, false if it is disabled."
                  }
                }
              },
              "nullable": true,
              "metadata": {
                "description": "Optional. Failed requests tracing configuration."
              }
            },
            "httpLogs": {
              "type": "object",
              "properties": {
                "azureBlobStorage": {
                  "type": "object",
                  "properties": {
                    "enabled": {
                      "type": "bool",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Set to `True` if configuration is enabled, false if it is disabled."
                      }
                    },
                    "retentionInDays": {
                      "type": "int",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Retention in days. Remove blobs older than X days. 0 or lower means no retention."
                      }
                    },
                    "sasUrl": {
                      "type": "string",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. SAS url to a azure blob container with read/write/list/delete permissions."
                      }
                    }
                  },
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Http logs to azure blob storage configuration."
                  }
                },
                "fileSystem": {
                  "type": "object",
                  "properties": {
                    "enabled": {
                      "type": "bool",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Set to `True` if configuration is enabled, false if it is disabled."
                      }
                    },
                    "retentionInDays": {
                      "type": "int",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Retention in days. Remove files older than X days. 0 or lower means no retention."
                      }
                    },
                    "retentionInMb": {
                      "type": "int",
                      "nullable": true,
                      "minValue": 25,
                      "maxValue": 100,
                      "metadata": {
                        "description": "Optional. Maximum size in megabytes that http log files can use. When reached old log files will be removed to make space for new ones."
                      }
                    }
                  },
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Http logs to file system configuration."
                  }
                }
              },
              "nullable": true,
              "metadata": {
                "description": "Optional. HTTP logs configuration."
              }
            }
          },
          "metadata": {
            "description": "Required. The config settings."
          }
        }
      },
      "metadata": {
        "description": "The type of a logs configuration.",
        "__bicep_imported_from!": {
          "sourceTemplate": "slot/main.bicep"
        }
      }
    },
    "managedIdentityAllType": {
      "type": "object",
      "properties": {
        "systemAssigned": {
          "type": "bool",
          "nullable": true,
          "metadata": {
            "description": "Optional. Enables system assigned managed identity on the resource."
          }
        },
        "userAssignedResourceIds": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "nullable": true,
          "metadata": {
            "description": "Optional. The resource ID(s) to assign to the resource. Required if a user assigned identity is used for encryption."
          }
        }
      },
      "metadata": {
        "description": "An AVM-aligned type for a managed identity configuration. To be used if both a system-assigned & user-assigned identities are supported by the resource provider.",
        "__bicep_imported_from!": {
          "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.5.1"
        }
      }
    },
    "metadataConfigType": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "allowedValues": [
            "metadata"
          ],
          "metadata": {
            "description": "Required. The type of config."
          }
        },
        "properties": {
          "type": "object",
          "properties": {},
          "additionalProperties": {
            "type": "string",
            "nullable": true,
            "metadata": {
              "description": "Optional. The metadata key value pair."
            }
          },
          "metadata": {
            "description": "Required. The config settings."
          }
        }
      },
      "metadata": {
        "description": "The type of a metadata configuration.",
        "__bicep_imported_from!": {
          "sourceTemplate": "slot/main.bicep"
        }
      }
    },
    "privateEndpointSingleServiceType": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "Optional. The name of the Private Endpoint."
          }
        },
        "location": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "Optional. The location to deploy the Private Endpoint to."
          }
        },
        "privateLinkServiceConnectionName": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "Optional. The name of the private link connection to create."
          }
        },
        "service": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "Optional. The subresource to deploy the Private Endpoint for. For example \"vault\" for a Key Vault Private Endpoint."
          }
        },
        "subnetResourceId": {
          "type": "string",
          "metadata": {
            "description": "Required. Resource ID of the subnet where the endpoint needs to be created."
          }
        },
        "resourceGroupResourceId": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "Optional. The resource ID of the Resource Group the Private Endpoint will be created in. If not specified, the Resource Group of the provided Virtual Network Subnet is used."
          }
        },
        "privateDnsZoneGroup": {
          "$ref": "#/definitions/_1.privateEndpointPrivateDnsZoneGroupType",
          "nullable": true,
          "metadata": {
            "description": "Optional. The private DNS Zone Group to configure for the Private Endpoint."
          }
        },
        "isManualConnection": {
          "type": "bool",
          "nullable": true,
          "metadata": {
            "description": "Optional. If Manual Private Link Connection is required."
          }
        },
        "manualConnectionRequestMessage": {
          "type": "string",
          "nullable": true,
          "maxLength": 140,
          "metadata": {
            "description": "Optional. A message passed to the owner of the remote resource with the manual connection request."
          }
        },
        "customDnsConfigs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/_1.privateEndpointCustomDnsConfigType"
          },
          "nullable": true,
          "metadata": {
            "description": "Optional. Custom DNS configurations."
          }
        },
        "ipConfigurations": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/_1.privateEndpointIpConfigurationType"
          },
          "nullable": true,
          "metadata": {
            "description": "Optional. A list of IP configurations of the Private Endpoint. This will be used to map to the first-party Service endpoints."
          }
        },
        "applicationSecurityGroupResourceIds": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "nullable": true,
          "metadata": {
            "description": "Optional. Application security groups in which the Private Endpoint IP configuration is included."
          }
        },
        "customNetworkInterfaceName": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "Optional. The custom name of the network interface attached to the Private Endpoint."
          }
        },
        "lock": {
          "$ref": "#/definitions/lockType",
          "nullable": true,
          "metadata": {
            "description": "Optional. Specify the type of lock."
          }
        },
        "roleAssignments": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/roleAssignmentType"
          },
          "nullable": true,
          "metadata": {
            "description": "Optional. Array of role assignments to create."
          }
        },
        "tags": {
          "type": "object",
          "nullable": true,
          "metadata": {
            "description": "Optional. Tags to be applied on all resources/Resource Groups in this deployment."
          }
        },
        "enableTelemetry": {
          "type": "bool",
          "nullable": true,
          "metadata": {
            "description": "Optional. Enable/Disable usage telemetry for module."
          }
        }
      },
      "metadata": {
        "description": "An AVM-aligned type for a private endpoint. To be used if the private endpoint's default service / groupId can be assumed (i.e., for services that only have one Private Endpoint type like 'vault' for key vault).",
        "__bicep_imported_from!": {
          "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.5.1"
        }
      }
    },
    "pushSettingsConfigType": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "allowedValues": [
            "pushsettings"
          ],
          "metadata": {
            "description": "Required. The type of config."
          }
        },
        "properties": {
          "type": "object",
          "properties": {
            "dynamicTagsJson": {
              "type": "string",
              "nullable": true,
              "metadata": {
                "description": "Optional. Gets or sets a JSON string containing a list of dynamic tags that will be evaluated from user claims in the push registration endpoint."
              }
            },
            "isPushEnabled": {
              "type": "bool",
              "metadata": {
                "description": "Required. Gets or sets a flag indicating whether the Push endpoint is enabled."
              }
            },
            "tagsRequiringAuth": {
              "type": "string",
              "nullable": true,
              "metadata": {
                "description": "Optional. Gets or sets a JSON string containing a list of tags that require user authentication to be used in the push registration endpoint. Tags can consist of alphanumeric characters and the following: '_', '@', '#', '.', ':', '-'. Validation should be performed at the PushRequestHandler."
              }
            },
            "tagWhitelistJson": {
              "type": "string",
              "nullable": true,
              "metadata": {
                "description": "Optional. Gets or sets a JSON string containing a list of tags that are whitelisted for use by the push registration endpoint."
              }
            }
          },
          "metadata": {
            "description": "Required. The config settings."
          }
        }
      },
      "metadata": {
        "description": "The type of a pushSettings configuration.",
        "__bicep_imported_from!": {
          "sourceTemplate": "slot/main.bicep"
        }
      }
    },
    "roleAssignmentType": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "Optional. The name (as GUID) of the role assignment. If not provided, a GUID will be generated."
          }
        },
        "roleDefinitionIdOrName": {
          "type": "string",
          "metadata": {
            "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
          }
        },
        "principalId": {
          "type": "string",
          "metadata": {
            "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
          }
        },
        "principalType": {
          "type": "string",
          "allowedValues": [
            "Device",
            "ForeignGroup",
            "Group",
            "ServicePrincipal",
            "User"
          ],
          "nullable": true,
          "metadata": {
            "description": "Optional. The principal type of the assigned principal ID."
          }
        },
        "description": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "Optional. The description of the role assignment."
          }
        },
        "condition": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
          }
        },
        "conditionVersion": {
          "type": "string",
          "allowedValues": [
            "2.0"
          ],
          "nullable": true,
          "metadata": {
            "description": "Optional. Version of the condition."
          }
        },
        "delegatedManagedIdentityResourceId": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "Optional. The Resource Id of the delegated managed identity resource."
          }
        }
      },
      "metadata": {
        "description": "An AVM-aligned type for a role assignment.",
        "__bicep_imported_from!": {
          "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.5.1"
        }
      }
    },
    "webConfigType": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "allowedValues": [
            "web"
          ],
          "metadata": {
            "description": "Required. The type of config."
          }
        },
        "properties": {
          "type": "object",
          "properties": {
            "acrUseManagedIdentityCreds": {
              "type": "bool",
              "nullable": true,
              "metadata": {
                "description": "Optional. Flag to use Managed Identity Creds for ACR pull."
              }
            },
            "acrUserManagedIdentityID": {
              "type": "string",
              "nullable": true,
              "metadata": {
                "description": "Optional. If using user managed identity, the user managed identity ClientId."
              }
            },
            "alwaysOn": {
              "type": "bool",
              "nullable": true,
              "metadata": {
                "description": "Optional. Set to `true` if 'Always On' is enabled."
              }
            },
            "apiDefinition": {
              "type": "object",
              "properties": {
                "url": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. The URL of the API definition."
                  }
                }
              },
              "nullable": true,
              "metadata": {
                "description": "Optional. Information about the formal API definition for the app."
              }
            },
            "apiManagementConfig": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. APIM-Api Identifier."
                  }
                }
              },
              "nullable": true,
              "metadata": {
                "description": "Optional. Azure API management settings linked to the app."
              }
            },
            "appCommandLine": {
              "type": "string",
              "nullable": true,
              "metadata": {
                "description": "Optional. App command line to launch."
              }
            },
            "appSettings": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "metadata": {
                      "description": "Required. Name of the pair."
                    }
                  },
                  "value": {
                    "type": "string",
                    "metadata": {
                      "description": "Required. Value of the pair."
                    }
                  }
                }
              },
              "nullable": true,
              "metadata": {
                "description": "Optional. Application settings."
              }
            },
            "autoHealEnabled": {
              "type": "bool",
              "nullable": true,
              "metadata": {
                "description": "Optional. Set to `true` if Auto Heal is enabled."
              }
            },
            "autoHealRules": {
              "type": "object",
              "properties": {
                "actions": {
                  "type": "object",
                  "properties": {
                    "actionType": {
                      "type": "string",
                      "allowedValues": [
                        "CustomAction",
                        "LogEvent",
                        "Recycle"
                      ],
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Predefined action to be taken."
                      }
                    },
                    "customAction": {
                      "type": "object",
                      "properties": {
                        "exe": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Executable to be run."
                          }
                        },
                        "parameters": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Parameters for the executable."
                          }
                        }
                      },
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Custom action to be taken."
                      }
                    },
                    "minProcessExecutionTime": {
                      "type": "string",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Minimum time the process must execute before taking the action."
                      }
                    }
                  },
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Actions to be executed when a rule is triggered."
                  }
                },
                "triggers": {
                  "type": "object",
                  "properties": {
                    "privateBytesInKB": {
                      "type": "int",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. A rule based on private bytes."
                      }
                    },
                    "requests": {
                      "type": "object",
                      "properties": {
                        "count": {
                          "type": "int",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Request Count."
                          }
                        },
                        "timeInterval": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Time interval."
                          }
                        }
                      },
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. A rule based on total requests."
                      }
                    },
                    "slowRequests": {
                      "$ref": "#/definitions/_2.slowRequestBasedTriggerType",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. A rule based on request execution time."
                      }
                    },
                    "slowRequestsWithPath": {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/_2.slowRequestBasedTriggerType"
                      },
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. A rule based on multiple Slow Requests Rule with path."
                      }
                    },
                    "statusCodes": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "count": {
                            "type": "int",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. Request Count."
                            }
                          },
                          "path": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. Request Path."
                            }
                          },
                          "status": {
                            "type": "int",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. HTTP status code."
                            }
                          },
                          "subStatus": {
                            "type": "int",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. Request Sub Status."
                            }
                          },
                          "timeInterval": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. Time interval."
                            }
                          },
                          "win32Status": {
                            "type": "int",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. Win32 error code."
                            }
                          }
                        }
                      },
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. A rule based on status codes."
                      }
                    },
                    "statusCodesRange": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "count": {
                            "type": "int",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. Request Count."
                            }
                          },
                          "path": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. Path."
                            }
                          },
                          "statusCodes": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. HTTP status code."
                            }
                          },
                          "timeInterval": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. Time interval."
                            }
                          }
                        }
                      },
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. A rule based on status codes ranges."
                      }
                    }
                  },
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Conditions that describe when to execute the auto-heal actions."
                  }
                }
              },
              "nullable": true,
              "metadata": {
                "description": "Optional. Auto Heal rules."
              }
            },
            "autoSwapSlotName": {
              "type": "string",
              "nullable": true,
              "metadata": {
                "description": "Optional. Auto-swap slot name."
              }
            },
            "azureStorageAccounts": {
              "type": "object",
              "properties": {},
              "additionalProperties": {
                "type": "object",
                "properties": {
                  "accessKey": {
                    "type": "securestring",
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. Access key for the storage account."
                    }
                  },
                  "accountName": {
                    "type": "string",
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. Name of the storage account."
                    }
                  },
                  "mountPath": {
                    "type": "string",
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. Path to mount the storage within the site's runtime environment."
                    }
                  },
                  "protocol": {
                    "type": "string",
                    "allowedValues": [
                      "Http",
                      "Nfs",
                      "Smb"
                    ],
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. Mounting protocol to use for the storage account."
                    }
                  },
                  "shareName": {
                    "type": "string",
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. Name of the file share (container name, for Blob storage)."
                    }
                  },
                  "type": {
                    "type": "string",
                    "allowedValues": [
                      "AzureBlob",
                      "AzureFiles"
                    ],
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. Type of storage."
                    }
                  }
                },
                "metadata": {
                  "description": "Required. A storage account configuration."
                }
              },
              "nullable": true,
              "metadata": {
                "description": "Optional. List of Azure Storage Accounts."
              }
            },
            "connectionStrings": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "connectionString": {
                    "type": "string",
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. Connection string value."
                    }
                  },
                  "name": {
                    "type": "string",
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. Name of connection string."
                    }
                  },
                  "type": {
                    "type": "string",
                    "allowedValues": [
                      "ApiHub",
                      "Custom",
                      "DocDb",
                      "EventHub",
                      "MySql",
                      "NotificationHub",
                      "PostgreSQL",
                      "RedisCache",
                      "SQLAzure",
                      "SQLServer",
                      "ServiceBus"
                    ],
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. Type of database."
                    }
                  }
                }
              },
              "nullable": true,
              "metadata": {
                "description": "Optional. Connection strings."
              }
            },
            "cors": {
              "type": "object",
              "properties": {
                "allowedOrigins": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Gets or sets the list of origins that should be allowed to make cross-origin calls (for example: http://example.com:12345). Use \"*\" to allow all."
                  }
                },
                "supportCredentials": {
                  "type": "bool",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Gets or sets whether CORS requests with credentials are allowed. See [ref](https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS#Requests_with_credentials) for more details."
                  }
                }
              },
              "nullable": true,
              "metadata": {
                "description": "Optional. Cross-Origin Resource Sharing (CORS) settings."
              }
            },
            "defaultDocuments": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "nullable": true,
              "metadata": {
                "description": "Optional. Default documents."
              }
            },
            "detailedErrorLoggingEnabled": {
              "type": "bool",
              "nullable": true,
              "metadata": {
                "description": "Optional. Set to `true` if detailed error logging is enabled."
              }
            },
            "documentRoot": {
              "type": "string",
              "nullable": true,
              "metadata": {
                "description": "Optional. Document root."
              }
            },
            "elasticWebAppScaleLimit": {
              "type": "int",
              "nullable": true,
              "minValue": 0,
              "metadata": {
                "description": "Optional. Maximum number of workers that a site can scale out to. This setting only applies to apps in plans where ElasticScaleEnabled is `true`."
              }
            },
            "experiments": {
              "type": "object",
              "properties": {
                "rampUpRules": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "actionHostName": {
                        "type": "string",
                        "nullable": true,
                        "metadata": {
                          "description": "Optional. Hostname of a slot to which the traffic will be redirected if decided to. E.g. myapp-stage.azurewebsites.net."
                        }
                      },
                      "changeDecisionCallbackUrl": {
                        "type": "string",
                        "nullable": true,
                        "metadata": {
                          "description": "Optional. Custom decision algorithm can be provided in TiPCallback site extension which URL can be specified."
                        }
                      },
                      "changeIntervalInMinutes": {
                        "type": "int",
                        "nullable": true,
                        "metadata": {
                          "description": "Optional. Specifies interval in minutes to reevaluate ReroutePercentage."
                        }
                      },
                      "changeStep": {
                        "type": "int",
                        "nullable": true,
                        "metadata": {
                          "description": "Optional. In auto ramp up scenario this is the step to add/remove from `ReroutePercentage` until it reaches `MinReroutePercentage` or `MaxReroutePercentage`. Site metrics are checked every N minutes specified in `ChangeIntervalInMinutes`. Custom decision algorithm can be provided in TiPCallback site extension which URL can be specified in `ChangeDecisionCallbackUrl`."
                        }
                      },
                      "maxReroutePercentage": {
                        "type": "int",
                        "nullable": true,
                        "metadata": {
                          "description": "Optional. Specifies upper boundary below which ReroutePercentage will stay."
                        }
                      },
                      "minReroutePercentage": {
                        "type": "int",
                        "nullable": true,
                        "metadata": {
                          "description": "Optional. Specifies lower boundary above which ReroutePercentage will stay."
                        }
                      },
                      "name": {
                        "type": "string",
                        "nullable": true,
                        "metadata": {
                          "description": "Optional. Name of the routing rule. The recommended name would be to point to the slot which will receive the traffic in the experiment."
                        }
                      },
                      "reroutePercentage": {
                        "type": "int",
                        "nullable": true,
                        "metadata": {
                          "description": "Optional. Percentage of the traffic which will be redirected to `ActionHostName`."
                        }
                      }
                    }
                  },
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. List of ramp-up rules."
                  }
                }
              },
              "nullable": true,
              "metadata": {
                "description": "Optional. This is work around for polymorphic types."
              }
            },
            "ftpsState": {
              "type": "string",
              "allowedValues": [
                "AllAllowed",
                "Disabled",
                "FtpsOnly"
              ],
              "nullable": true,
              "metadata": {
                "description": "Optional. State of FTP / FTPS service."
              }
            },
            "functionAppScaleLimit": {
              "type": "int",
              "nullable": true,
              "minValue": 0,
              "metadata": {
                "description": "Optional. Maximum number of workers that a site can scale out to. This setting only applies to the Consumption and Elastic Premium Plans."
              }
            },
            "functionsRuntimeScaleMonitoringEnabled": {
              "type": "bool",
              "nullable": true,
              "metadata": {
                "description": "Optional. Gets or sets a value indicating whether functions runtime scale monitoring is enabled. When enabled, the ScaleController will not monitor event sources directly, but will instead call to the runtime to get scale status."
              }
            },
            "handlerMappings": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "arguments": {
                    "type": "string",
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. Command-line arguments to be passed to the script processor."
                    }
                  },
                  "extension": {
                    "type": "string",
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. Requests with this extension will be handled using the specified FastCGI application."
                    }
                  },
                  "scriptProcessor": {
                    "type": "string",
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. The absolute path to the FastCGI application."
                    }
                  }
                }
              },
              "nullable": true,
              "metadata": {
                "description": "Optional. Handler mappings."
              }
            },
            "healthCheckPath": {
              "type": "string",
              "nullable": true,
              "metadata": {
                "description": "Optional. Health check path."
              }
            },
            "http20Enabled": {
              "type": "bool",
              "nullable": true,
              "metadata": {
                "description": "Optional. Allow clients to connect over http2.0."
              }
            },
            "httpLoggingEnabled": {
              "type": "bool",
              "nullable": true,
              "metadata": {
                "description": "Optional. Set to `true` if HTTP logging is enabled."
              }
            },
            "ipSecurityRestrictions": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/_2.scmIpSecurityRestrictionType"
              },
              "nullable": true,
              "metadata": {
                "description": "Optional. IP security restrictions for main."
              }
            },
            "ipSecurityRestrictionsDefaultAction": {
              "type": "string",
              "allowedValues": [
                "Allow",
                "Deny"
              ],
              "nullable": true,
              "metadata": {
                "description": "Optional. Default action for main access restriction if no rules are matched."
              }
            },
            "javaContainer": {
              "type": "string",
              "nullable": true,
              "metadata": {
                "description": "Optional. Java container."
              }
            },
            "javaContainerVersion": {
              "type": "string",
              "nullable": true,
              "metadata": {
                "description": "Optional. Java container version."
              }
            },
            "javaVersion": {
              "type": "string",
              "nullable": true,
              "metadata": {
                "description": "Optional. Java version."
              }
            },
            "keyVaultReferenceIdentity": {
              "type": "string",
              "nullable": true,
              "metadata": {
                "description": "Optional. Identity to use for Key Vault Reference authentication."
              }
            },
            "limits": {
              "type": "object",
              "properties": {
                "maxDiskSizeInMb": {
                  "type": "int",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Maximum allowed disk size usage in MB."
                  }
                },
                "maxMemoryInMb": {
                  "type": "int",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Maximum allowed memory usage in MB."
                  }
                },
                "maxPercentageCpu": {
                  "type": "int",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Maximum allowed CPU usage percentage."
                  }
                }
              },
              "nullable": true,
              "metadata": {
                "description": "Optional. Site limits."
              }
            },
            "linuxFxVersion": {
              "type": "string",
              "nullable": true,
              "metadata": {
                "description": "Optional. Linux App Framework and version."
              }
            },
            "loadBalancing": {
              "type": "string",
              "allowedValues": [
                "LeastRequests",
                "LeastRequestsWithTieBreaker",
                "LeastResponseTime",
                "PerSiteRoundRobin",
                "RequestHash",
                "WeightedRoundRobin",
                "WeightedTotalTraffic"
              ],
              "nullable": true,
              "metadata": {
                "description": "Optional. Site load balancing."
              }
            },
            "localMySqlEnabled": {
              "type": "bool",
              "nullable": true,
              "metadata": {
                "description": "Optional. Set to `true` to enable local MySQL."
              }
            },
            "logsDirectorySizeLimit": {
              "type": "int",
              "nullable": true,
              "metadata": {
                "description": "Optional. HTTP logs directory size limit."
              }
            },
            "managedPipelineMode": {
              "type": "string",
              "allowedValues": [
                "Classic",
                "Integrated"
              ],
              "nullable": true,
              "metadata": {
                "description": "Optional. Managed pipeline mode."
              }
            },
            "managedServiceIdentityId": {
              "type": "int",
              "nullable": true,
              "metadata": {
                "description": "Optional. Managed Service Identity Id."
              }
            },
            "metadata": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "metadata": {
                      "description": "Required. Pair name."
                    }
                  },
                  "value": {
                    "type": "string",
                    "metadata": {
                      "description": "Required. Pair Value."
                    }
                  }
                }
              },
              "nullable": true,
              "metadata": {
                "description": "Optional. Application metadata. This property cannot be retrieved, since it may contain secrets."
              }
            },
            "minimumElasticInstanceCount": {
              "type": "int",
              "nullable": true,
              "minValue": 0,
              "maxValue": 20,
              "metadata": {
                "description": "Optional. Number of minimum instance count for a site. This setting only applies to the Elastic Plans."
              }
            },
            "minTlsCipherSuite": {
              "type": "string",
              "allowedValues": [
                "TLS_AES_128_GCM_SHA256",
                "TLS_AES_256_GCM_SHA384",
                "TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256",
                "TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256",
                "TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384",
                "TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA",
                "TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256",
                "TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256",
                "TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA",
                "TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384",
                "TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384",
                "TLS_RSA_WITH_AES_128_CBC_SHA",
                "TLS_RSA_WITH_AES_128_CBC_SHA256",
                "TLS_RSA_WITH_AES_128_GCM_SHA256",
                "TLS_RSA_WITH_AES_256_CBC_SHA",
                "TLS_RSA_WITH_AES_256_CBC_SHA256",
                "TLS_RSA_WITH_AES_256_GCM_SHA384"
              ],
              "nullable": true,
              "metadata": {
                "description": "Optional. The minimum strength TLS cipher suite allowed for an application."
              }
            },
            "minTlsVersion": {
              "type": "string",
              "allowedValues": [
                "1.0",
                "1.1",
                "1.2",
                "1.3"
              ],
              "nullable": true,
              "metadata": {
                "description": "Optional. MinTlsVersion: configures the minimum version of TLS required for SSL requests."
              }
            },
            "netFrameworkVersion": {
              "type": "string",
              "nullable": true,
              "metadata": {
                "description": "Optional. .NET Framework version."
              }
            },
            "nodeVersion": {
              "type": "string",
              "nullable": true,
              "metadata": {
                "description": "Optional. Version of Node.js."
              }
            },
            "numberOfWorkers": {
              "type": "int",
              "nullable": true,
              "metadata": {
                "description": "Optional. Number of workers."
              }
            },
            "phpVersion": {
              "type": "string",
              "nullable": true,
              "metadata": {
                "description": "Optional. Version of PHP."
              }
            },
            "powerShellVersion": {
              "type": "string",
              "nullable": true,
              "metadata": {
                "description": "Optional. Version of PowerShell."
              }
            },
            "preWarmedInstanceCount": {
              "type": "int",
              "nullable": true,
              "minValue": 0,
              "maxValue": 10,
              "metadata": {
                "description": "Optional. Number of preWarmed instances. This setting only applies to the Consumption and Elastic Plans."
              }
            },
            "publicNetworkAccess": {
              "type": "string",
              "nullable": true,
              "metadata": {
                "description": "Optional. Property to allow or block all public traffic."
              }
            },
            "publishingUsername": {
              "type": "string",
              "nullable": true,
              "metadata": {
                "description": "Optional. Publishing user name."
              }
            },
            "push": {
              "type": "object",
              "properties": {
                "kind": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Kind of resource."
                  }
                },
                "properties": {
                  "type": "object",
                  "properties": {
                    "dynamicTagsJson": {
                      "type": "string",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Gets or sets a JSON string containing a list of dynamic tags that will be evaluated from user claims in the push registration endpoint."
                      }
                    },
                    "isPushEnabled": {
                      "type": "bool",
                      "metadata": {
                        "description": "Required. Gets or sets a flag indicating whether the Push endpoint is enabled."
                      }
                    },
                    "tagsRequiringAuth": {
                      "type": "string",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Gets or sets a JSON string containing a list of tags that require user authentication to be used in the push registration endpoint. Tags can consist of alphanumeric characters and the following: '_', '@', '#', '.', ':', '-'. Validation should be performed at the PushRequestHandler."
                      }
                    },
                    "tagWhitelistJson": {
                      "type": "string",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Gets or sets a JSON string containing a list of tags that are whitelisted for use by the push registration endpoint."
                      }
                    }
                  },
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. PushSettings resource specific properties."
                  }
                }
              },
              "nullable": true,
              "metadata": {
                "description": "Optional. Push endpoint settings."
              }
            },
            "pythonVersion": {
              "type": "string",
              "nullable": true,
              "metadata": {
                "description": "Optional. Version of Python."
              }
            },
            "remoteDebuggingEnabled": {
              "type": "bool",
              "nullable": true,
              "metadata": {
                "description": "Optional. Set to `true` if remote debugging is enabled."
              }
            },
            "remoteDebuggingVersion": {
              "type": "string",
              "nullable": true,
              "metadata": {
                "description": "Optional. Remote debugging version."
              }
            },
            "requestTracingEnabled": {
              "type": "bool",
              "nullable": true,
              "metadata": {
                "description": "Optional. Set to `true` if request tracing is enabled."
              }
            },
            "requestTracingExpirationTime": {
              "type": "string",
              "nullable": true,
              "metadata": {
                "description": "Optional. Request tracing expiration time."
              }
            },
            "scmIpSecurityRestrictions": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/_2.scmIpSecurityRestrictionType"
              },
              "nullable": true,
              "metadata": {
                "description": "Optional. IP security restrictions for scm."
              }
            },
            "scmIpSecurityRestrictionsDefaultAction": {
              "type": "string",
              "allowedValues": [
                "Allow",
                "Deny"
              ],
              "nullable": true,
              "metadata": {
                "description": "Optional. Default action for scm access restriction if no rules are matched."
              }
            },
            "scmIpSecurityRestrictionsUseMain": {
              "type": "bool",
              "nullable": true,
              "metadata": {
                "description": "Optional. IP security restrictions for scm to use main."
              }
            },
            "scmMinTlsVersion": {
              "type": "string",
              "allowedValues": [
                "1.0",
                "1.1",
                "1.2",
                "1.3"
              ],
              "nullable": true,
              "metadata": {
                "description": "Optional. ScmMinTlsVersion: configures the minimum version of TLS required for SSL requests for SCM site."
              }
            },
            "scmType": {
              "type": "string",
              "allowedValues": [
                "BitbucketGit",
                "BitbucketHg",
                "CodePlexGit",
                "CodePlexHg",
                "Dropbox",
                "ExternalGit",
                "ExternalHg",
                "GitHub",
                "LocalGit",
                "None",
                "OneDrive",
                "Tfs",
                "VSO",
                "VSTSRM"
              ],
              "nullable": true,
              "metadata": {
                "description": "Optional. SCM type."
              }
            },
            "tracingOptions": {
              "type": "string",
              "nullable": true,
              "metadata": {
                "description": "Optional. Tracing options."
              }
            },
            "use32BitWorkerProcess": {
              "type": "bool",
              "nullable": true,
              "metadata": {
                "description": "Optional. Set to `true` to use 32-bit worker process."
              }
            },
            "virtualApplications": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "physicalPath": {
                    "type": "string",
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. Physical path."
                    }
                  },
                  "preloadEnabled": {
                    "type": "bool",
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. Set to `true` if preloading is enabled."
                    }
                  },
                  "virtualDirectories": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "physicalPath": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Physical path."
                          }
                        },
                        "virtualPath": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Path to virtual application."
                          }
                        }
                      }
                    },
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. Virtual directories for virtual application."
                    }
                  },
                  "virtualPath": {
                    "type": "string",
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. Virtual path."
                    }
                  }
                }
              },
              "nullable": true,
              "metadata": {
                "description": "Optional. Virtual applications."
              }
            },
            "vnetName": {
              "type": "string",
              "nullable": true,
              "metadata": {
                "description": "Optional. Virtual Network name."
              }
            },
            "vnetPrivatePortsCount": {
              "type": "int",
              "nullable": true,
              "metadata": {
                "description": "Optional. The number of private ports assigned to this app. These will be assigned dynamically on runtime."
              }
            },
            "vnetRouteAllEnabled": {
              "type": "bool",
              "nullable": true,
              "metadata": {
                "description": "Optional. Virtual Network Route All enabled. This causes all outbound traffic to have Virtual Network Security Groups and User Defined Routes applied."
              }
            },
            "websiteTimeZone": {
              "type": "string",
              "nullable": true,
              "metadata": {
                "description": "Optional. Sets the time zone a site uses for generating timestamps. Compatible with Linux and Windows App Service. Setting the WEBSITE_TIME_ZONE app setting takes precedence over this config. For Linux, expects tz database values https://www.iana.org/time-zones (for a quick reference see [ref](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones)). For Windows, expects one of the time zones listed under HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Time Zones."
              }
            },
            "webSocketsEnabled": {
              "type": "bool",
              "nullable": true,
              "metadata": {
                "description": "Optional. Set to `true` if WebSocket is enabled."
              }
            },
            "windowsFxVersion": {
              "type": "string",
              "nullable": true,
              "metadata": {
                "description": "Optional. Xenon App Framework and version."
              }
            },
            "xManagedServiceIdentityId": {
              "type": "int",
              "nullable": true,
              "metadata": {
                "description": "Optional. Explicit Managed Service Identity Id."
              }
            }
          },
          "metadata": {
            "description": "Required. The config settings."
          }
        }
      },
      "metadata": {
        "description": "The type of a web configuration.",
        "__bicep_imported_from!": {
          "sourceTemplate": "slot/main.bicep"
        }
      }
    }
  },
  "parameters": {
    "name": {
      "type": "string",
      "metadata": {
        "description": "Required. Name of the site."
      }
    },
    "location": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "Optional. Location for all Resources."
      }
    },
    "kind": {
      "type": "string",
      "allowedValues": [
        "functionapp",
        "functionapp,linux",
        "functionapp,workflowapp",
        "functionapp,workflowapp,linux",
        "functionapp,linux,container",
        "functionapp,linux,container,azurecontainerapps",
        "app,linux",
        "app",
        "linux,api",
        "api",
        "app,linux,container",
        "app,container,windows"
      ],
      "metadata": {
        "description": "Required. Type of site to deploy."
      }
    },
    "serverFarmResourceId": {
      "type": "string",
      "metadata": {
        "description": "Required. The resource ID of the app service plan to use for the site."
      }
    },
    "managedEnvironmentId": {
      "type": "string",
      "nullable": true,
      "metadata": {
        "description": "Optional. Azure Resource Manager ID of the customers selected Managed Environment on which to host this app."
      }
    },
    "httpsOnly": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Optional. Configures a site to accept only HTTPS requests. Issues redirect for HTTP requests."
      }
    },
    "clientAffinityEnabled": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Optional. If client affinity is enabled."
      }
    },
    "appServiceEnvironmentResourceId": {
      "type": "string",
      "nullable": true,
      "metadata": {
        "description": "Optional. The resource ID of the app service environment to use for this resource."
      }
    },
    "managedIdentities": {
      "$ref": "#/definitions/managedIdentityAllType",
      "nullable": true,
      "metadata": {
        "description": "Optional. The managed identity definition for this resource."
      }
    },
    "keyVaultAccessIdentityResourceId": {
      "type": "string",
      "nullable": true,
      "metadata": {
        "description": "Optional. The resource ID of the assigned identity to be used to access a key vault with."
      }
    },
    "storageAccountRequired": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Optional. Checks if Customer provided storage account is required."
      }
    },
    "virtualNetworkSubnetId": {
      "type": "string",
      "nullable": true,
      "metadata": {
        "description": "Optional. Azure Resource Manager ID of the Virtual network and subnet to be joined by Regional VNET Integration. This must be of the form /subscriptions/{subscriptionName}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualNetworks/{vnetName}/subnets/{subnetName}."
      }
    },
    "vnetContentShareEnabled": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Optional. To enable accessing content over virtual network."
      }
    },
    "vnetImagePullEnabled": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Optional. To enable pulling image over Virtual Network."
      }
    },
    "vnetRouteAllEnabled": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Optional. Virtual Network Route All enabled. This causes all outbound traffic to have Virtual Network Security Groups and User Defined Routes applied."
      }
    },
    "scmSiteAlsoStopped": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Optional. Stop SCM (KUDU) site when the app is stopped."
      }
    },
    "siteConfig": {
      "type": "object",
      "metadata": {
        "__bicep_resource_derived_type!": {
          "source": "Microsoft.Web/sites@2024-04-01#properties/properties/properties/siteConfig"
        },
        "description": "Optional. The site config object. The defaults are set to the following values: alwaysOn: true, minTlsVersion: '1.2', ftpsState: 'FtpsOnly'."
      },
      "defaultValue": {
        "alwaysOn": true,
        "minTlsVersion": "1.2",
        "ftpsState": "FtpsOnly"
      }
    },
    "configs": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/configType"
      },
      "nullable": true,
      "metadata": {
        "description": "Optional. The web site config."
      }
    },
    "functionAppConfig": {
      "type": "object",
      "metadata": {
        "__bicep_resource_derived_type!": {
          "source": "Microsoft.Web/sites@2024-04-01#properties/properties/properties/functionAppConfig"
        },
        "description": "Optional. The Function App configuration object."
      },
      "nullable": true
    },
    "extensions": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/extensionType"
      },
      "nullable": true,
      "metadata": {
        "description": "Optional. The extensions configuration."
      }
    },
    "lock": {
      "$ref": "#/definitions/lockType",
      "nullable": true,
      "metadata": {
        "description": "Optional. The lock settings of the service."
      }
    },
    "privateEndpoints": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/privateEndpointSingleServiceType"
      },
      "nullable": true,
      "metadata": {
        "description": "Optional. Configuration details for private endpoints. For security reasons, it is recommended to use private endpoints whenever possible."
      }
    },
    "slots": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/slotType"
      },
      "nullable": true,
      "metadata": {
        "description": "Optional. Configuration for deployment slots for an app."
      }
    },
    "tags": {
      "type": "object",
      "nullable": true,
      "metadata": {
        "description": "Optional. Tags of the resource."
      }
    },
    "enableTelemetry": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Optional. Enable/Disable usage telemetry for module."
      }
    },
    "roleAssignments": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/roleAssignmentType"
      },
      "nullable": true,
      "metadata": {
        "description": "Optional. Array of role assignments to create."
      }
    },
    "diagnosticSettings": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/diagnosticSettingFullType"
      },
      "nullable": true,
      "metadata": {
        "description": "Optional. The diagnostic settings of the service."
      }
    },
    "clientCertEnabled": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Optional. To enable client certificate authentication (TLS mutual authentication)."
      }
    },
    "clientCertExclusionPaths": {
      "type": "string",
      "nullable": true,
      "metadata": {
        "description": "Optional. Client certificate authentication comma-separated exclusion paths."
      }
    },
    "clientCertMode": {
      "type": "string",
      "defaultValue": "Optional",
      "allowedValues": [
        "Optional",
        "OptionalInteractiveUser",
        "Required"
      ],
      "metadata": {
        "description": "Optional. This composes with ClientCertEnabled setting.\n- ClientCertEnabled=false means ClientCert is ignored.\n- ClientCertEnabled=true and ClientCertMode=Required means ClientCert is required.\n- ClientCertEnabled=true and ClientCertMode=Optional means ClientCert is optional or accepted.\n"
      }
    },
    "cloningInfo": {
      "type": "object",
      "metadata": {
        "__bicep_resource_derived_type!": {
          "source": "Microsoft.Web/sites@2024-04-01#properties/properties/properties/cloningInfo"
        },
        "description": "Optional. If specified during app creation, the app is cloned from a source app."
      },
      "nullable": true
    },
    "containerSize": {
      "type": "int",
      "nullable": true,
      "metadata": {
        "description": "Optional. Size of the function container."
      }
    },
    "dailyMemoryTimeQuota": {
      "type": "int",
      "nullable": true,
      "metadata": {
        "description": "Optional. Maximum allowed daily memory-time quota (applicable on dynamic apps only)."
      }
    },
    "enabled": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Optional. Setting this value to false disables the app (takes the app offline)."
      }
    },
    "hostNameSslStates": {
      "type": "array",
      "metadata": {
        "__bicep_resource_derived_type!": {
          "source": "Microsoft.Web/sites@2024-04-01#properties/properties/properties/hostNameSslStates"
        },
        "description": "Optional. Hostname SSL states are used to manage the SSL bindings for app's hostnames."
      },
      "nullable": true
    },
    "hyperV": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Optional. Hyper-V sandbox."
      }
    },
    "redundancyMode": {
      "type": "string",
      "defaultValue": "None",
      "allowedValues": [
        "ActiveActive",
        "Failover",
        "GeoRedundant",
        "Manual",
        "None"
      ],
      "metadata": {
        "description": "Optional. Site redundancy mode."
      }
    },
    "basicPublishingCredentialsPolicies": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/basicPublishingCredentialsPolicyType"
      },
      "nullable": true,
      "metadata": {
        "description": "Optional. The site publishing credential policy names which are associated with the sites."
      }
    },
    "hybridConnectionRelays": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/hybridConnectionRelayType"
      },
      "nullable": true,
      "metadata": {
        "description": "Optional. Names of hybrid connection relays to connect app with."
      }
    },
    "publicNetworkAccess": {
      "type": "string",
      "nullable": true,
      "allowedValues": [
        "Enabled",
        "Disabled"
      ],
      "metadata": {
        "description": "Optional. Whether or not public network access is allowed for this resource. For security reasons it should be disabled. If not specified, it will be disabled by default if private endpoints are set."
      }
    },
    "e2eEncryptionEnabled": {
      "type": "bool",
      "nullable": true,
      "metadata": {
        "description": "Optional. End to End Encryption Setting."
      }
    },
    "dnsConfiguration": {
      "type": "object",
      "metadata": {
        "__bicep_resource_derived_type!": {
          "source": "Microsoft.Web/sites@2024-04-01#properties/properties/properties/dnsConfiguration"
        },
        "description": "Optional. Property to configure various DNS related settings for a site."
      },
      "nullable": true
    },
    "autoGeneratedDomainNameLabelScope": {
      "type": "string",
      "nullable": true,
      "allowedValues": [
        "NoReuse",
        "ResourceGroupReuse",
        "SubscriptionReuse",
        "TenantReuse"
      ],
      "metadata": {
        "description": "Optional. Specifies the scope of uniqueness for the default hostname during resource creation."
      }
    }
  },
  "variables": {
    "copy": [
      {
        "name": "formattedRoleAssignments",
        "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]",
        "input": "[union(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')], createObject('roleDefinitionId', coalesce(tryGet(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName), if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName)))))]"
      }
    ],
    "enableReferencedModulesTelemetry": false,
    "formattedUserAssignedIdentities": "[reduce(map(coalesce(tryGet(parameters('managedIdentities'), 'userAssignedResourceIds'), createArray()), lambda('id', createObject(format('{0}', lambdaVariables('id')), createObject()))), createObject(), lambda('cur', 'next', union(lambdaVariables('cur'), lambdaVariables('next'))))]",
    "identity": "[if(not(empty(parameters('managedIdentities'))), createObject('type', if(coalesce(tryGet(parameters('managedIdentities'), 'systemAssigned'), false()), if(not(empty(coalesce(tryGet(parameters('managedIdentities'), 'userAssignedResourceIds'), createObject()))), 'SystemAssigned, UserAssigned', 'SystemAssigned'), if(not(empty(coalesce(tryGet(parameters('managedIdentities'), 'userAssignedResourceIds'), createObject()))), 'UserAssigned', 'None')), 'userAssignedIdentities', if(not(empty(variables('formattedUserAssignedIdentities'))), variables('formattedUserAssignedIdentities'), null())), null())]",
    "builtInRoleNames": {
      "App Compliance Automation Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '0f37683f-2463-46b6-9ce7-9b788b988ba2')]",
      "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
      "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
      "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
      "Role Based Access Control Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]",
      "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]",
      "Web Plan Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '2cc479cb-7b4d-49a8-b449-8c00fd0f0a4b')]",
      "Website Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'de139f84-1756-47ae-9be6-808fbbe84772')]"
    }
  },
  "resources": {
    "avmTelemetry": {
      "condition": "[parameters('enableTelemetry')]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2024-03-01",
      "name": "[format('46d3xbcp.res.web-site.{0}.{1}', replace('-..--..-', '.', '-'), substring(uniqueString(deployment().name, parameters('location')), 0, 4))]",
      "properties": {
        "mode": "Incremental",
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "resources": [],
          "outputs": {
            "telemetry": {
              "type": "String",
              "value": "For more information, see https://aka.ms/avm/TelemetryInfo"
            }
          }
        }
      }
    },
    "app": {
      "type": "Microsoft.Web/sites",
      "apiVersion": "2024-04-01",
      "name": "[parameters('name')]",
      "location": "[parameters('location')]",
      "kind": "[parameters('kind')]",
      "tags": "[parameters('tags')]",
      "identity": "[variables('identity')]",
      "properties": {
        "managedEnvironmentId": "[if(not(empty(parameters('managedEnvironmentId'))), parameters('managedEnvironmentId'), null())]",
        "serverFarmId": "[parameters('serverFarmResourceId')]",
        "clientAffinityEnabled": "[parameters('clientAffinityEnabled')]",
        "httpsOnly": "[parameters('httpsOnly')]",
        "hostingEnvironmentProfile": "[if(not(empty(parameters('appServiceEnvironmentResourceId'))), createObject('id', parameters('appServiceEnvironmentResourceId')), null())]",
        "storageAccountRequired": "[parameters('storageAccountRequired')]",
        "keyVaultReferenceIdentity": "[parameters('keyVaultAccessIdentityResourceId')]",
        "virtualNetworkSubnetId": "[parameters('virtualNetworkSubnetId')]",
        "siteConfig": "[parameters('siteConfig')]",
        "functionAppConfig": "[parameters('functionAppConfig')]",
        "clientCertEnabled": "[parameters('clientCertEnabled')]",
        "clientCertExclusionPaths": "[parameters('clientCertExclusionPaths')]",
        "clientCertMode": "[parameters('clientCertMode')]",
        "cloningInfo": "[parameters('cloningInfo')]",
        "containerSize": "[parameters('containerSize')]",
        "dailyMemoryTimeQuota": "[parameters('dailyMemoryTimeQuota')]",
        "enabled": "[parameters('enabled')]",
        "hostNameSslStates": "[parameters('hostNameSslStates')]",
        "hyperV": "[parameters('hyperV')]",
        "redundancyMode": "[parameters('redundancyMode')]",
        "publicNetworkAccess": "[if(not(empty(parameters('publicNetworkAccess'))), parameters('publicNetworkAccess'), if(not(empty(parameters('privateEndpoints'))), 'Disabled', 'Enabled'))]",
        "vnetContentShareEnabled": "[parameters('vnetContentShareEnabled')]",
        "vnetImagePullEnabled": "[parameters('vnetImagePullEnabled')]",
        "vnetRouteAllEnabled": "[parameters('vnetRouteAllEnabled')]",
        "scmSiteAlsoStopped": "[parameters('scmSiteAlsoStopped')]",
        "endToEndEncryptionEnabled": "[parameters('e2eEncryptionEnabled')]",
        "dnsConfiguration": "[parameters('dnsConfiguration')]",
        "autoGeneratedDomainNameLabelScope": "[parameters('autoGeneratedDomainNameLabelScope')]"
      }
    },
    "app_lock": {
      "condition": "[and(not(empty(coalesce(parameters('lock'), createObject()))), not(equals(tryGet(parameters('lock'), 'kind'), 'None')))]",
      "type": "Microsoft.Authorization/locks",
      "apiVersion": "2020-05-01",
      "scope": "[format('Microsoft.Web/sites/{0}', parameters('name'))]",
      "name": "[coalesce(tryGet(parameters('lock'), 'name'), format('lock-{0}', parameters('name')))]",
      "properties": {
        "level": "[coalesce(tryGet(parameters('lock'), 'kind'), '')]",
        "notes": "[if(equals(tryGet(parameters('lock'), 'kind'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot delete or modify the resource or child resources.')]"
      },
      "dependsOn": [
        "app"
      ]
    },
    "app_diagnosticSettings": {
      "copy": {
        "name": "app_diagnosticSettings",
        "count": "[length(coalesce(parameters('diagnosticSettings'), createArray()))]"
      },
      "type": "Microsoft.Insights/diagnosticSettings",
      "apiVersion": "2021-05-01-preview",
      "scope": "[format('Microsoft.Web/sites/{0}', parameters('name'))]",
      "name": "[coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'name'), format('{0}-diagnosticSettings', parameters('name')))]",
      "properties": {
        "copy": [
          {
            "name": "metrics",
            "count": "[length(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics'))))]",
            "input": {
              "category": "[coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics')))[copyIndex('metrics')].category]",
              "enabled": "[coalesce(tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics')))[copyIndex('metrics')], 'enabled'), true())]",
              "timeGrain": null
            }
          },
          {
            "name": "logs",
            "count": "[length(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs'))))]",
            "input": {
              "categoryGroup": "[tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'categoryGroup')]",
              "category": "[tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'category')]",
              "enabled": "[coalesce(tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'enabled'), true())]"
            }
          }
        ],
        "storageAccountId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'storageAccountResourceId')]",
        "workspaceId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'workspaceResourceId')]",
        "eventHubAuthorizationRuleId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'eventHubAuthorizationRuleResourceId')]",
        "eventHubName": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'eventHubName')]",
        "marketplacePartnerId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'marketplacePartnerResourceId')]",
        "logAnalyticsDestinationType": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logAnalyticsDestinationType')]"
      },
      "dependsOn": [
        "app"
      ]
    },
    "app_roleAssignments": {
      "copy": {
        "name": "app_roleAssignments",
        "count": "[length(coalesce(variables('formattedRoleAssignments'), createArray()))]"
      },
      "type": "Microsoft.Authorization/roleAssignments",
      "apiVersion": "2022-04-01",
      "scope": "[format('Microsoft.Web/sites/{0}', parameters('name'))]",
      "name": "[coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'name'), guid(resourceId('Microsoft.Web/sites', parameters('name')), coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId, coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId))]",
      "properties": {
        "roleDefinitionId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId]",
        "principalId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId]",
        "description": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'description')]",
        "principalType": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'principalType')]",
        "condition": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition')]",
        "conditionVersion": "[if(not(empty(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
        "delegatedManagedIdentityResourceId": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
      },
      "dependsOn": [
        "app"
      ]
    },
    "app_config": {
      "copy": {
        "name": "app_config",
        "count": "[length(coalesce(parameters('configs'), createArray()))]"
      },
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('{0}-Site-Config-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "appName": {
            "value": "[parameters('name')]"
          },
          "name": {
            "value": "[coalesce(parameters('configs'), createArray())[copyIndex()].name]"
          },
          "applicationInsightResourceId": {
            "value": "[tryGet(coalesce(parameters('configs'), createArray())[copyIndex()], 'applicationInsightResourceId')]"
          },
          "storageAccountResourceId": {
            "value": "[tryGet(coalesce(parameters('configs'), createArray())[copyIndex()], 'storageAccountResourceId')]"
          },
          "storageAccountUseIdentityAuthentication": {
            "value": "[tryGet(coalesce(parameters('configs'), createArray())[copyIndex()], 'storageAccountUseIdentityAuthentication')]"
          },
          "properties": {
            "value": "[tryGet(coalesce(parameters('configs'), createArray())[copyIndex()], 'properties')]"
          },
          "currentAppSettings": "[if(coalesce(tryGet(coalesce(parameters('configs'), createArray())[copyIndex()], 'retainCurrentAppSettings'), and(true(), equals(coalesce(parameters('configs'), createArray())[copyIndex()].name, 'appsettings'))), createObject('value', list(format('{0}/config/appsettings', resourceId('Microsoft.Web/sites', parameters('name'))), '2023-12-01').properties), createObject('value', createObject()))]"
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "languageVersion": "2.0",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.35.1.17967",
              "templateHash": "4497467794156568269"
            },
            "name": "Site App Settings",
            "description": "This module deploys a Site App Setting."
          },
          "parameters": {
            "appName": {
              "type": "string",
              "metadata": {
                "description": "Conditional. The name of the parent site resource. Required if the template is used in a standalone deployment."
              }
            },
            "name": {
              "type": "string",
              "allowedValues": [
                "appsettings",
                "authsettings",
                "authsettingsV2",
                "azurestorageaccounts",
                "backup",
                "connectionstrings",
                "logs",
                "metadata",
                "pushsettings",
                "slotConfigNames",
                "web"
              ],
              "metadata": {
                "description": "Required. The name of the config."
              }
            },
            "properties": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "Optional. The properties of the config. Note: This parameter is highly dependent on the config type, defined by its name."
              }
            },
            "storageAccountUseIdentityAuthentication": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Optional. If the provided storage account requires Identity based authentication ('allowSharedKeyAccess' is set to false). When set to true, the minimum role assignment required for the App Service Managed Identity to the storage account is 'Storage Blob Data Owner'."
              }
            },
            "storageAccountResourceId": {
              "type": "string",
              "nullable": true,
              "metadata": {
                "description": "Optional. Required if app of kind functionapp. Resource ID of the storage account to manage triggers and logging function executions."
              }
            },
            "applicationInsightResourceId": {
              "type": "string",
              "nullable": true,
              "metadata": {
                "description": "Optional. Resource ID of the application insight to leverage for this resource."
              }
            },
            "currentAppSettings": {
              "type": "object",
              "properties": {},
              "additionalProperties": {
                "type": "string",
                "metadata": {
                  "description": "Required. The key-values pairs of the current app settings."
                }
              },
              "defaultValue": {},
              "metadata": {
                "description": "Optional. The current app settings."
              }
            }
          },
          "resources": {
            "applicationInsights": {
              "condition": "[not(empty(parameters('applicationInsightResourceId')))]",
              "existing": true,
              "type": "Microsoft.Insights/components",
              "apiVersion": "2020-02-02",
              "subscriptionId": "[split(parameters('applicationInsightResourceId'), '/')[2]]",
              "resourceGroup": "[split(parameters('applicationInsightResourceId'), '/')[4]]",
              "name": "[last(split(parameters('applicationInsightResourceId'), '/'))]"
            },
            "storageAccount": {
              "condition": "[not(empty(parameters('storageAccountResourceId')))]",
              "existing": true,
              "type": "Microsoft.Storage/storageAccounts",
              "apiVersion": "2023-05-01",
              "subscriptionId": "[split(parameters('storageAccountResourceId'), '/')[2]]",
              "resourceGroup": "[split(parameters('storageAccountResourceId'), '/')[4]]",
              "name": "[last(split(parameters('storageAccountResourceId'), '/'))]"
            },
            "app": {
              "existing": true,
              "type": "Microsoft.Web/sites",
              "apiVersion": "2023-12-01",
              "name": "[parameters('appName')]"
            },
            "config": {
              "type": "Microsoft.Web/sites/config",
              "apiVersion": "2024-04-01",
              "name": "[format('{0}/{1}', parameters('appName'), parameters('name'))]",
              "properties": "[union(parameters('currentAppSettings'), parameters('properties'), if(and(not(empty(parameters('storageAccountResourceId'))), not(parameters('storageAccountUseIdentityAuthentication'))), createObject('AzureWebJobsStorage', format('DefaultEndpointsProtocol=https;AccountName={0};AccountKey={1};EndpointSuffix={2}', last(split(parameters('storageAccountResourceId'), '/')), listKeys('storageAccount', '2023-05-01').keys[0].value, environment().suffixes.storage)), if(and(not(empty(parameters('storageAccountResourceId'))), parameters('storageAccountUseIdentityAuthentication')), createObject('AzureWebJobsStorage__accountName', last(split(parameters('storageAccountResourceId'), '/')), 'AzureWebJobsStorage__blobServiceUri', reference('storageAccount').primaryEndpoints.blob, 'AzureWebJobsStorage__queueServiceUri', reference('storageAccount').primaryEndpoints.queue, 'AzureWebJobsStorage__tableServiceUri', reference('storageAccount').primaryEndpoints.table), createObject())), if(not(empty(parameters('applicationInsightResourceId'))), createObject('APPLICATIONINSIGHTS_CONNECTION_STRING', reference('applicationInsights').ConnectionString), createObject()))]",
              "dependsOn": [
                "applicationInsights",
                "storageAccount"
              ]
            }
          },
          "outputs": {
            "name": {
              "type": "string",
              "metadata": {
                "description": "The name of the site config."
              },
              "value": "[parameters('name')]"
            },
            "resourceId": {
              "type": "string",
              "metadata": {
                "description": "The resource ID of the site config."
              },
              "value": "[resourceId('Microsoft.Web/sites/config', parameters('appName'), parameters('name'))]"
            },
            "resourceGroupName": {
              "type": "string",
              "metadata": {
                "description": "The resource group the site config was deployed into."
              },
              "value": "[resourceGroup().name]"
            }
          }
        }
      },
      "dependsOn": [
        "app"
      ]
    },
    "app_extensions": {
      "copy": {
        "name": "app_extensions",
        "count": "[length(coalesce(parameters('extensions'), createArray()))]"
      },
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('{0}-Site-Extension-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "appName": {
            "value": "[parameters('name')]"
          },
          "properties": {
            "value": "[coalesce(parameters('extensions'), createArray())[copyIndex()].properties]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "languageVersion": "2.0",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.35.1.17967",
              "templateHash": "440826046990759240"
            },
            "name": "Site Deployment Extension ",
            "description": "This module deploys a Site extension for MSDeploy."
          },
          "parameters": {
            "appName": {
              "type": "string",
              "metadata": {
                "description": "Required. The name of the parent site resource."
              }
            },
            "name": {
              "type": "string",
              "defaultValue": "MSDeploy",
              "allowedValues": [
                "MSDeploy"
              ],
              "metadata": {
                "description": "Optional. The name of the extension."
              }
            },
            "kind": {
              "type": "string",
              "defaultValue": "MSDeploy",
              "allowedValues": [
                "MSDeploy"
              ],
              "metadata": {
                "description": "Optional. The kind of extension."
              }
            },
            "properties": {
              "type": "object",
              "metadata": {
                "__bicep_resource_derived_type!": {
                  "source": "Microsoft.Web/sites/extensions@2024-04-01#properties/properties"
                },
                "description": "Optional. Sets the properties."
              },
              "nullable": true
            }
          },
          "resources": {
            "app": {
              "existing": true,
              "type": "Microsoft.Web/sites",
              "apiVersion": "2024-04-01",
              "name": "[parameters('appName')]"
            },
            "msdeploy": {
              "type": "Microsoft.Web/sites/extensions",
              "apiVersion": "2024-04-01",
              "name": "[format('{0}/{1}', parameters('appName'), parameters('name'))]",
              "kind": "[parameters('kind')]",
              "properties": "[parameters('properties')]"
            }
          },
          "outputs": {
            "name": {
              "type": "string",
              "metadata": {
                "description": "The name of the extension."
              },
              "value": "[parameters('name')]"
            },
            "resourceId": {
              "type": "string",
              "metadata": {
                "description": "The resource ID of the extension."
              },
              "value": "[resourceId('Microsoft.Web/sites/extensions', parameters('appName'), parameters('name'))]"
            },
            "resourceGroupName": {
              "type": "string",
              "metadata": {
                "description": "The resource group the extension was deployed into."
              },
              "value": "[resourceGroup().name]"
            }
          }
        }
      },
      "dependsOn": [
        "app"
      ]
    },
    "app_slots": {
      "copy": {
        "name": "app_slots",
        "count": "[length(coalesce(parameters('slots'), createArray()))]",
        "mode": "serial",
        "batchSize": 1
      },
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('{0}-Slot-{1}', uniqueString(deployment().name, parameters('location')), coalesce(parameters('slots'), createArray())[copyIndex()].name)]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "name": {
            "value": "[coalesce(parameters('slots'), createArray())[copyIndex()].name]"
          },
          "appName": {
            "value": "[parameters('name')]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "kind": {
            "value": "[parameters('kind')]"
          },
          "serverFarmResourceId": {
            "value": "[parameters('serverFarmResourceId')]"
          },
          "httpsOnly": {
            "value": "[coalesce(tryGet(coalesce(parameters('slots'), createArray())[copyIndex()], 'httpsOnly'), parameters('httpsOnly'))]"
          },
          "appServiceEnvironmentResourceId": {
            "value": "[parameters('appServiceEnvironmentResourceId')]"
          },
          "clientAffinityEnabled": {
            "value": "[coalesce(tryGet(coalesce(parameters('slots'), createArray())[copyIndex()], 'clientAffinityEnabled'), parameters('clientAffinityEnabled'))]"
          },
          "managedIdentities": {
            "value": "[coalesce(tryGet(coalesce(parameters('slots'), createArray())[copyIndex()], 'managedIdentities'), parameters('managedIdentities'))]"
          },
          "keyVaultAccessIdentityResourceId": {
            "value": "[coalesce(tryGet(coalesce(parameters('slots'), createArray())[copyIndex()], 'keyVaultAccessIdentityResourceId'), parameters('keyVaultAccessIdentityResourceId'))]"
          },
          "storageAccountRequired": {
            "value": "[coalesce(tryGet(coalesce(parameters('slots'), createArray())[copyIndex()], 'storageAccountRequired'), parameters('storageAccountRequired'))]"
          },
          "virtualNetworkSubnetId": {
            "value": "[coalesce(tryGet(coalesce(parameters('slots'), createArray())[copyIndex()], 'virtualNetworkSubnetId'), parameters('virtualNetworkSubnetId'))]"
          },
          "siteConfig": {
            "value": "[coalesce(tryGet(coalesce(parameters('slots'), createArray())[copyIndex()], 'siteConfig'), parameters('siteConfig'))]"
          },
          "functionAppConfig": {
            "value": "[coalesce(tryGet(coalesce(parameters('slots'), createArray())[copyIndex()], 'functionAppConfig'), parameters('functionAppConfig'))]"
          },
          "configs": {
            "value": "[coalesce(tryGet(coalesce(parameters('slots'), createArray())[copyIndex()], 'configs'), parameters('configs'))]"
          },
          "extensions": {
            "value": "[coalesce(tryGet(coalesce(parameters('slots'), createArray())[copyIndex()], 'extensions'), parameters('extensions'))]"
          },
          "diagnosticSettings": {
            "value": "[tryGet(coalesce(parameters('slots'), createArray())[copyIndex()], 'diagnosticSettings')]"
          },
          "roleAssignments": {
            "value": "[tryGet(coalesce(parameters('slots'), createArray())[copyIndex()], 'roleAssignments')]"
          },
          "basicPublishingCredentialsPolicies": {
            "value": "[coalesce(tryGet(coalesce(parameters('slots'), createArray())[copyIndex()], 'basicPublishingCredentialsPolicies'), parameters('basicPublishingCredentialsPolicies'))]"
          },
          "lock": {
            "value": "[coalesce(tryGet(coalesce(parameters('slots'), createArray())[copyIndex()], 'lock'), parameters('lock'))]"
          },
          "privateEndpoints": {
            "value": "[coalesce(tryGet(coalesce(parameters('slots'), createArray())[copyIndex()], 'privateEndpoints'), createArray())]"
          },
          "tags": {
            "value": "[coalesce(tryGet(coalesce(parameters('slots'), createArray())[copyIndex()], 'tags'), parameters('tags'))]"
          },
          "clientCertEnabled": {
            "value": "[tryGet(coalesce(parameters('slots'), createArray())[copyIndex()], 'clientCertEnabled')]"
          },
          "clientCertExclusionPaths": {
            "value": "[tryGet(coalesce(parameters('slots'), createArray())[copyIndex()], 'clientCertExclusionPaths')]"
          },
          "clientCertMode": {
            "value": "[tryGet(coalesce(parameters('slots'), createArray())[copyIndex()], 'clientCertMode')]"
          },
          "cloningInfo": {
            "value": "[tryGet(coalesce(parameters('slots'), createArray())[copyIndex()], 'cloningInfo')]"
          },
          "containerSize": {
            "value": "[tryGet(coalesce(parameters('slots'), createArray())[copyIndex()], 'containerSize')]"
          },
          "customDomainVerificationId": {
            "value": "[tryGet(coalesce(parameters('slots'), createArray())[copyIndex()], 'customDomainVerificationId')]"
          },
          "dailyMemoryTimeQuota": {
            "value": "[tryGet(coalesce(parameters('slots'), createArray())[copyIndex()], 'dailyMemoryTimeQuota')]"
          },
          "enabled": {
            "value": "[tryGet(coalesce(parameters('slots'), createArray())[copyIndex()], 'enabled')]"
          },
          "hostNameSslStates": {
            "value": "[tryGet(coalesce(parameters('slots'), createArray())[copyIndex()], 'hostNameSslStates')]"
          },
          "hyperV": {
            "value": "[tryGet(coalesce(parameters('slots'), createArray())[copyIndex()], 'hyperV')]"
          },
          "publicNetworkAccess": {
            "value": "[coalesce(tryGet(coalesce(parameters('slots'), createArray())[copyIndex()], 'publicNetworkAccess'), if(or(not(empty(tryGet(coalesce(parameters('slots'), createArray())[copyIndex()], 'privateEndpoints'))), not(empty(parameters('privateEndpoints')))), 'Disabled', 'Enabled'))]"
          },
          "redundancyMode": {
            "value": "[tryGet(coalesce(parameters('slots'), createArray())[copyIndex()], 'redundancyMode')]"
          },
          "vnetContentShareEnabled": {
            "value": "[tryGet(coalesce(parameters('slots'), createArray())[copyIndex()], 'vnetContentShareEnabled')]"
          },
          "vnetImagePullEnabled": {
            "value": "[tryGet(coalesce(parameters('slots'), createArray())[copyIndex()], 'vnetImagePullEnabled')]"
          },
          "vnetRouteAllEnabled": {
            "value": "[tryGet(coalesce(parameters('slots'), createArray())[copyIndex()], 'vnetRouteAllEnabled')]"
          },
          "hybridConnectionRelays": {
            "value": "[tryGet(coalesce(parameters('slots'), createArray())[copyIndex()], 'hybridConnectionRelays')]"
          },
          "dnsConfiguration": {
            "value": "[tryGet(coalesce(parameters('slots'), createArray())[copyIndex()], 'dnsConfiguration')]"
          },
          "autoGeneratedDomainNameLabelScope": {
            "value": "[tryGet(coalesce(parameters('slots'), createArray())[copyIndex()], 'autoGeneratedDomainNameLabelScope')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "languageVersion": "2.0",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.35.1.17967",
              "templateHash": "13466865676700354567"
            },
            "name": "Web/Function App Deployment Slots",
            "description": "This module deploys a Web or Function App Deployment Slot."
          },
          "definitions": {
            "privateEndpointOutputType": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "metadata": {
                    "description": "The name of the private endpoint."
                  }
                },
                "resourceId": {
                  "type": "string",
                  "metadata": {
                    "description": "The resource ID of the private endpoint."
                  }
                },
                "groupId": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "The group Id for the private endpoint Group."
                  }
                },
                "customDnsConfigs": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "fqdn": {
                        "type": "string",
                        "nullable": true,
                        "metadata": {
                          "description": "FQDN that resolves to private endpoint IP address."
                        }
                      },
                      "ipAddresses": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "metadata": {
                          "description": "A list of private IP addresses of the private endpoint."
                        }
                      }
                    }
                  },
                  "metadata": {
                    "description": "The custom DNS configurations of the private endpoint."
                  }
                },
                "networkInterfaceResourceIds": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "metadata": {
                    "description": "The IDs of the network interfaces associated with the private endpoint."
                  }
                }
              },
              "metadata": {
                "__bicep_export!": true
              }
            },
            "configType": {
              "type": "object",
              "discriminator": {
                "propertyName": "name",
                "mapping": {
                  "appsettings": {
                    "$ref": "#/definitions/appSettingsConfigType"
                  },
                  "authsettings": {
                    "$ref": "#/definitions/authSettingsConfigType"
                  },
                  "authsettingsV2": {
                    "$ref": "#/definitions/authSettingsV2ConfigType"
                  },
                  "azurestorageaccounts": {
                    "$ref": "#/definitions/azureStorageAccountConfigType"
                  },
                  "backup": {
                    "$ref": "#/definitions/backupConfigType"
                  },
                  "connectionstrings": {
                    "$ref": "#/definitions/connectionStringsConfigType"
                  },
                  "logs": {
                    "$ref": "#/definitions/logsConfigType"
                  },
                  "metadata": {
                    "$ref": "#/definitions/metadataConfigType"
                  },
                  "pushsettings": {
                    "$ref": "#/definitions/pushSettingsConfigType"
                  },
                  "web": {
                    "$ref": "#/definitions/webConfigType"
                  }
                }
              },
              "metadata": {
                "__bicep_export!": true,
                "description": "The type of a site configuration."
              }
            },
            "appSettingsConfigType": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "allowedValues": [
                    "appsettings"
                  ],
                  "metadata": {
                    "description": "Required. The type of config."
                  }
                },
                "storageAccountUseIdentityAuthentication": {
                  "type": "bool",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. If the provided storage account requires Identity based authentication ('allowSharedKeyAccess' is set to false). When set to true, the minimum role assignment required for the App Service Managed Identity to the storage account is 'Storage Blob Data Owner'."
                  }
                },
                "storageAccountResourceId": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Required if app of kind functionapp. Resource ID of the storage account to manage triggers and logging function executions."
                  }
                },
                "applicationInsightResourceId": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Resource ID of the application insight to leverage for this resource."
                  }
                },
                "retainCurrentAppSettings": {
                  "type": "bool",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The retain the current app settings. Defaults to true."
                  }
                },
                "properties": {
                  "type": "object",
                  "properties": {},
                  "additionalProperties": {
                    "type": "string",
                    "metadata": {
                      "description": "Required. An app settings key-value pair."
                    }
                  },
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The app settings key-value pairs except for AzureWebJobsStorage, AzureWebJobsDashboard, APPINSIGHTS_INSTRUMENTATIONKEY and APPLICATIONINSIGHTS_CONNECTION_STRING."
                  }
                }
              },
              "metadata": {
                "__bicep_export!": true,
                "description": "The type of an app settings configuration."
              }
            },
            "authSettingsConfigType": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "allowedValues": [
                    "authsettings"
                  ],
                  "metadata": {
                    "description": "Required. The type of config."
                  }
                },
                "properties": {
                  "type": "object",
                  "properties": {
                    "aadClaimsAuthorization": {
                      "type": "string",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Gets a JSON string containing the Azure AD Acl settings."
                      }
                    },
                    "additionalLoginParams": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Login parameters to send to the OpenID Connect authorization endpoint when a user logs in. Each parameter must be in the form \"key=value\"."
                      }
                    },
                    "allowedAudiences": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Allowed audience values to consider when validating JSON Web Tokens issued by Azure Active Directory. Note that the `ClientID` value is always considered an allowed audience, regardless of this setting."
                      }
                    },
                    "allowedExternalRedirectUrls": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. External URLs that can be redirected to as part of logging in or logging out of the app. Note that the query string part of the URL is ignored. This is an advanced setting typically only needed by Windows Store application backends. Note that URLs within the current domain are always implicitly allowed."
                      }
                    },
                    "authFilePath": {
                      "type": "string",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The path of the config file containing auth settings. If the path is relative, base will the site's root directory."
                      }
                    },
                    "clientId": {
                      "type": "string",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The Client ID of this relying party application, known as the client_id. This setting is required for enabling OpenID Connection authentication with Azure Active Directory or other 3rd party OpenID Connect providers. More information on [OpenID Connect](http://openid.net/specs/openid-connect-core-1_0.html)."
                      }
                    },
                    "clientSecret": {
                      "type": "securestring",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The Client Secret of this relying party application (in Azure Active Directory, this is also referred to as the Key). This setting is optional. If no client secret is configured, the OpenID Connect implicit auth flow is used to authenticate end users. Otherwise, the OpenID Connect Authorization Code Flow is used to authenticate end users. More information on [OpenID Connect](http://openid.net/specs/openid-connect-core-1_0.html)."
                      }
                    },
                    "clientSecretCertificateThumbprint": {
                      "type": "string",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. An alternative to the client secret, that is the thumbprint of a certificate used for signing purposes. This property acts as a replacement for the Client Secret."
                      }
                    },
                    "clientSecretSettingName": {
                      "type": "string",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The app setting name that contains the client secret of the relying party application."
                      }
                    },
                    "configVersion": {
                      "type": "string",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The ConfigVersion of the Authentication / Authorization feature in use for the current app. The setting in this value can control the behavior of the control plane for Authentication / Authorization."
                      }
                    },
                    "defaultProvider": {
                      "type": "string",
                      "allowedValues": [
                        "AzureActiveDirectory",
                        "Facebook",
                        "Github",
                        "Google",
                        "MicrosoftAccount",
                        "Twitter"
                      ],
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The default authentication provider to use when multiple providers are configured. This setting is only needed if multiple providers are configured and the unauthenticated client action is set to \"RedirectToLoginPage\"."
                      }
                    },
                    "enabled": {
                      "type": "bool",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Set to `true` if the Authentication / Authorization feature is enabled for the current app."
                      }
                    },
                    "facebookAppId": {
                      "type": "string",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The App ID of the Facebook app used for login. This setting is required for enabling Facebook Login. Facebook Login [documentation](https://developers.facebook.com/docs/facebook-login)."
                      }
                    },
                    "facebookAppSecret": {
                      "type": "securestring",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The App Secret of the Facebook app used for Facebook Login. This setting is required for enabling Facebook Login. Facebook Login [documentation](https://developers.facebook.com/docs/facebook-login)."
                      }
                    },
                    "facebookAppSecretSettingName": {
                      "type": "string",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The app setting name that contains the app secret used for Facebook Login."
                      }
                    },
                    "facebookOAuthScopes": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The OAuth 2.0 scopes that will be requested as part of Facebook Login authentication. This setting is optional. Facebook Login [documentation](https://developers.facebook.com/docs/facebook-login)."
                      }
                    },
                    "gitHubClientId": {
                      "type": "string",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The Client Id of the GitHub app used for login. This setting is required for enabling Github login."
                      }
                    },
                    "gitHubClientSecret": {
                      "type": "securestring",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The Client Secret of the GitHub app used for Github Login. This setting is required for enabling Github login."
                      }
                    },
                    "gitHubClientSecretSettingName": {
                      "type": "string",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The app setting name that contains the client secret of the Github app used for GitHub Login."
                      }
                    },
                    "gitHubOAuthScopes": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The OAuth 2.0 scopes that will be requested as part of GitHub Login authentication."
                      }
                    },
                    "googleClientId": {
                      "type": "string",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The OpenID Connect Client ID for the Google web application. This setting is required for enabling Google Sign-In. Google Sign-In [documentation](https://developers.google.com/identity/sign-in/web)."
                      }
                    },
                    "googleClientSecret": {
                      "type": "securestring",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The client secret associated with the Google web application. This setting is required for enabling Google Sign-In. Google Sign-In [documentation](https://developers.google.com/identity/sign-in/web)."
                      }
                    },
                    "googleClientSecretSettingName": {
                      "type": "string",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The app setting name that contains the client secret associated with the Google web application."
                      }
                    },
                    "googleOAuthScopes": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The OAuth 2.0 scopes that will be requested as part of Google Sign-In authentication. This setting is optional. If not specified, \"openid\", \"profile\", and \"email\" are used as default scopes. Google Sign-In [documentation](https://developers.google.com/identity/sign-in/web)."
                      }
                    },
                    "isAuthFromFile": {
                      "type": "string",
                      "allowedValues": [
                        "false",
                        "true"
                      ],
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. \"true\" if the auth config settings should be read from a file, \"false\" otherwise."
                      }
                    },
                    "issuer": {
                      "type": "string",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The OpenID Connect Issuer URI that represents the entity which issues access tokens for this application. When using Azure Active Directory, this value is the URI of the directory tenant, e.g. https://sts.windows.net/{tenant-guid}/. This URI is a case-sensitive identifier for the token issuer. More information on [OpenID Connect Discovery](http://openid.net/specs/openid-connect-discovery-1_0.html)."
                      }
                    },
                    "microsoftAccountClientId": {
                      "type": "string",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The OAuth 2.0 client ID that was created for the app used for authentication. This setting is required for enabling Microsoft Account authentication. Microsoft Account OAuth [documentation](https://dev.onedrive.com/auth/msa_oauth.htm)."
                      }
                    },
                    "microsoftAccountClientSecret": {
                      "type": "securestring",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The OAuth 2.0 client secret that was created for the app used for authentication. This setting is required for enabling Microsoft Account authentication. Microsoft Account OAuth [documentation](https://dev.onedrive.com/auth/msa_oauth.htm)."
                      }
                    },
                    "microsoftAccountClientSecretSettingName": {
                      "type": "string",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The app setting name containing the OAuth 2.0 client secret that was created for the app used for authentication."
                      }
                    },
                    "microsoftAccountOAuthScopes": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The OAuth 2.0 scopes that will be requested as part of Microsoft Account authentication. This setting is optional. If not specified, \"wl.basic\" is used as the default scope. Microsoft Account Scopes and permissions [documentation](https://msdn.microsoft.com/en-us/library/dn631845.aspx)."
                      }
                    },
                    "runtimeVersion": {
                      "type": "string",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The RuntimeVersion of the Authentication / Authorization feature in use for the current app. The setting in this value can control the behavior of certain features in the Authentication / Authorization module."
                      }
                    },
                    "tokenRefreshExtensionHours": {
                      "type": "int",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The number of hours after session token expiration that a session token can be used to call the token refresh API. The default is 72 hours."
                      }
                    },
                    "tokenStoreEnabled": {
                      "type": "bool",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Set to `true` to durably store platform-specific security tokens that are obtained during login flows. The default is `false`."
                      }
                    },
                    "twitterConsumerKey": {
                      "type": "securestring",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The OAuth 1.0a consumer key of the Twitter application used for sign-in. This setting is required for enabling Twitter Sign-In. Twitter Sign-In [documentation](https://dev.twitter.com/web/sign-in)."
                      }
                    },
                    "twitterConsumerSecret": {
                      "type": "securestring",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The OAuth 1.0a consumer secret of the Twitter application used for sign-in. This setting is required for enabling Twitter Sign-In. Twitter Sign-In [documentation](https://dev.twitter.com/web/sign-in)."
                      }
                    },
                    "twitterConsumerSecretSettingName": {
                      "type": "string",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The app setting name that contains the OAuth 1.0a consumer secret of the Twitter application used for sign-in."
                      }
                    },
                    "unauthenticatedClientAction": {
                      "type": "string",
                      "allowedValues": [
                        "AllowAnonymous",
                        "RedirectToLoginPage"
                      ],
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The action to take when an unauthenticated client attempts to access the app."
                      }
                    },
                    "validateIssuer": {
                      "type": "bool",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Gets a value indicating whether the issuer should be a valid HTTPS url and be validated as such."
                      }
                    }
                  },
                  "metadata": {
                    "description": "Required. The config settings."
                  }
                }
              },
              "metadata": {
                "__bicep_export!": true,
                "description": "The type of an auth settings configuration."
              }
            },
            "authSettingsV2ConfigType": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "allowedValues": [
                    "authsettingsV2"
                  ],
                  "metadata": {
                    "description": "Required. The type of config."
                  }
                },
                "properties": {
                  "type": "object",
                  "properties": {
                    "globalValidation": {
                      "type": "object",
                      "properties": {
                        "excludedPaths": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The paths for which unauthenticated flow would not be redirected to the login page."
                          }
                        },
                        "redirectToProvider": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The default authentication provider to use when multiple providers are configured. This setting is only needed if multiple providers are configured and the unauthenticated client action is set to \"RedirectToLoginPage\"."
                          }
                        },
                        "requireAuthentication": {
                          "type": "bool",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Set to `true` if the authentication flow is required by every request."
                          }
                        },
                        "unauthenticatedClientAction": {
                          "type": "string",
                          "allowedValues": [
                            "AllowAnonymous",
                            "RedirectToLoginPage",
                            "Return401",
                            "Return403"
                          ],
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The action to take when an unauthenticated client attempts to access the app."
                          }
                        }
                      },
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The configuration settings that determines the validation flow of users using App Service Authentication/Authorization."
                      }
                    },
                    "httpSettings": {
                      "type": "object",
                      "properties": {
                        "forwardProxy": {
                          "type": "object",
                          "properties": {
                            "convention": {
                              "type": "string",
                              "allowedValues": [
                                "Custom",
                                "NoProxy",
                                "Standard"
                              ],
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. The convention used to determine the url of the request made."
                              }
                            },
                            "customHostHeaderName": {
                              "type": "string",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. The name of the header containing the host of the request."
                              }
                            },
                            "customProtoHeaderName": {
                              "type": "string",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. The name of the header containing the scheme of the request."
                              }
                            }
                          },
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The configuration settings of a forward proxy used to make the requests."
                          }
                        },
                        "requireHttps": {
                          "type": "bool",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Set to `false` if the authentication/authorization responses not having the HTTPS scheme are permissible."
                          }
                        },
                        "routes": {
                          "type": "object",
                          "properties": {
                            "apiPrefix": {
                              "type": "string",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. The prefix that should precede all the authentication/authorization paths."
                              }
                            }
                          },
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The configuration settings of the paths HTTP requests."
                          }
                        }
                      },
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The configuration settings of the HTTP requests for authentication and authorization requests made against App Service Authentication/Authorization."
                      }
                    },
                    "identityProviders": {
                      "type": "object",
                      "properties": {
                        "apple": {
                          "type": "object",
                          "properties": {
                            "enabled": {
                              "type": "bool",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Set to `false` if the Apple provider should not be enabled despite the set registration."
                              }
                            },
                            "login": {
                              "type": "object",
                              "properties": {
                                "scopes": {
                                  "type": "array",
                                  "items": {
                                    "type": "string"
                                  },
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. A list of the scopes that should be requested while authenticating."
                                  }
                                }
                              },
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. The configuration settings of the login flow."
                              }
                            },
                            "registration": {
                              "type": "object",
                              "properties": {
                                "clientId": {
                                  "type": "string",
                                  "metadata": {
                                    "description": "Required. The Client ID of the app used for login."
                                  }
                                },
                                "clientSecretSettingName": {
                                  "type": "string",
                                  "metadata": {
                                    "description": "Required. The app setting name that contains the client secret."
                                  }
                                }
                              },
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. The configuration settings of the Apple registration."
                              }
                            }
                          },
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The configuration settings of the Apple provider."
                          }
                        },
                        "azureActiveDirectory": {
                          "type": "object",
                          "properties": {
                            "enabled": {
                              "type": "bool",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Set to `false` if the Azure Active Directory provider should not be enabled despite the set registration."
                              }
                            },
                            "isAutoProvisioned": {
                              "type": "bool",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Gets a value indicating whether the Azure AD configuration was auto-provisioned using 1st party tooling. This is an internal flag primarily intended to support the Azure Management Portal. Users should not read or write to this property."
                              }
                            },
                            "login": {
                              "type": "object",
                              "properties": {
                                "disableWWWAuthenticate": {
                                  "type": "bool",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Set to `true` if the www-authenticate provider should be omitted from the request."
                                  }
                                },
                                "loginParameters": {
                                  "type": "array",
                                  "items": {
                                    "type": "string"
                                  },
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Login parameters to send to the OpenID Connect authorization endpoint when a user logs in. Each parameter must be in the form \"key=value\"."
                                  }
                                }
                              },
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. The configuration settings of the Azure Active Directory login flow."
                              }
                            },
                            "registration": {
                              "type": "object",
                              "properties": {
                                "clientId": {
                                  "type": "string",
                                  "metadata": {
                                    "description": "Required. The Client ID of this relying party application, known as the client_id. This setting is required for enabling OpenID Connection authentication with Azure Active Directory or other 3rd party OpenID Connect providers. More information on [OpenID Connect](http://openid.net/specs/openid-connect-core-1_0.html)."
                                  }
                                },
                                "clientSecretCertificateIssuer": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. An alternative to the client secret thumbprint, that is the issuer of a certificate used for signing purposes. This property acts as a replacement for the Client Secret Certificate Thumbprint."
                                  }
                                },
                                "clientSecretCertificateSubjectAlternativeName": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. An alternative to the client secret thumbprint, that is the subject alternative name of a certificate used for signing purposes. This property acts as a replacement for the Client Secret Certificate Thumbprint."
                                  }
                                },
                                "clientSecretCertificateThumbprint": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. An alternative to the client secret, that is the thumbprint of a certificate used for signing purposes. This property acts as a replacement for the Client Secret."
                                  }
                                },
                                "clientSecretSettingName": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The app setting name that contains the client secret of the relying party application."
                                  }
                                },
                                "openIdIssuer": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The OpenID Connect Issuer URI that represents the entity which issues access tokens for this application. When using Azure Active Directory, this value is the URI of the directory tenant, e.g. https://login.microsoftonline.com/v2.0/{tenant-guid}/. This URI is a case-sensitive identifier for the token issuer. More information on [OpenID Connect Discovery](http://openid.net/specs/openid-connect-discovery-1_0.html)."
                                  }
                                }
                              },
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. The configuration settings of the Azure Active Directory app registration."
                              }
                            },
                            "validation": {
                              "type": "object",
                              "properties": {
                                "allowedAudiences": {
                                  "type": "array",
                                  "items": {
                                    "type": "string"
                                  },
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The list of audiences that can make successful authentication/authorization requests."
                                  }
                                },
                                "defaultAuthorizationPolicy": {
                                  "type": "object",
                                  "properties": {
                                    "allowedApplications": {
                                      "type": "array",
                                      "items": {
                                        "type": "string"
                                      },
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. The configuration settings of the Azure Active Directory allowed applications."
                                      }
                                    },
                                    "allowedPrincipals": {
                                      "type": "object",
                                      "properties": {
                                        "groups": {
                                          "type": "array",
                                          "items": {
                                            "type": "string"
                                          },
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The list of the allowed groups."
                                          }
                                        },
                                        "identities": {
                                          "type": "array",
                                          "items": {
                                            "type": "string"
                                          },
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The list of the allowed identities."
                                          }
                                        }
                                      },
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. The configuration settings of the Azure Active Directory allowed principals."
                                      }
                                    }
                                  },
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The configuration settings of the default authorization policy."
                                  }
                                },
                                "jwtClaimChecks": {
                                  "type": "object",
                                  "properties": {
                                    "allowedClientApplications": {
                                      "type": "array",
                                      "items": {
                                        "type": "string"
                                      },
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. The list of the allowed client applications."
                                      }
                                    },
                                    "allowedGroups": {
                                      "type": "array",
                                      "items": {
                                        "type": "string"
                                      },
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. The list of the allowed groups."
                                      }
                                    }
                                  },
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The configuration settings of the checks that should be made while validating the JWT Claims."
                                  }
                                }
                              },
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. The configuration settings of the Azure Active Directory token validation flow."
                              }
                            }
                          },
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The configuration settings of the Azure Active directory provider."
                          }
                        },
                        "azureStaticWebApps": {
                          "type": "object",
                          "properties": {
                            "enabled": {
                              "type": "bool",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Set to `false` if the Azure Static Web Apps provider should not be enabled despite the set registration."
                              }
                            },
                            "registration": {
                              "type": "object",
                              "properties": {
                                "clientId": {
                                  "type": "string",
                                  "metadata": {
                                    "description": "Required. The Client ID of the app used for login."
                                  }
                                }
                              },
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. The configuration settings of the Azure Static Web Apps registration."
                              }
                            }
                          },
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The configuration settings of the Azure Static Web Apps provider."
                          }
                        },
                        "customOpenIdConnectProviders": {
                          "type": "object",
                          "properties": {},
                          "additionalProperties": {
                            "type": "object",
                            "properties": {
                              "enabled": {
                                "type": "bool",
                                "nullable": true,
                                "metadata": {
                                  "description": "Optional. Set to `false` if the custom Open ID provider provider should not be enabled."
                                }
                              },
                              "login": {
                                "type": "object",
                                "properties": {
                                  "nameClaimType": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The name of the claim that contains the users name."
                                    }
                                  },
                                  "scopes": {
                                    "type": "array",
                                    "items": {
                                      "type": "string"
                                    },
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. A list of the scopes that should be requested while authenticating."
                                    }
                                  }
                                },
                                "nullable": true,
                                "metadata": {
                                  "description": "Optional. The configuration settings of the login flow of the custom Open ID Connect provider."
                                }
                              },
                              "registration": {
                                "type": "object",
                                "properties": {
                                  "clientCredential": {
                                    "type": "object",
                                    "properties": {
                                      "clientSecretSettingName": {
                                        "type": "string",
                                        "metadata": {
                                          "description": "Required. The app setting that contains the client secret for the custom Open ID Connect provider."
                                        }
                                      },
                                      "method": {
                                        "type": "string",
                                        "allowedValues": [
                                          "ClientSecretPost"
                                        ],
                                        "metadata": {
                                          "description": "Required. The method that should be used to authenticate the user."
                                        }
                                      }
                                    },
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The authentication credentials of the custom Open ID Connect provider."
                                    }
                                  },
                                  "clientId": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The client id of the custom Open ID Connect provider."
                                    }
                                  },
                                  "openIdConnectConfiguration": {
                                    "type": "object",
                                    "properties": {
                                      "authorizationEndpoint": {
                                        "type": "string",
                                        "nullable": true,
                                        "metadata": {
                                          "description": "Optional. The endpoint to be used to make an authorization request."
                                        }
                                      },
                                      "certificationUri": {
                                        "type": "string",
                                        "nullable": true,
                                        "metadata": {
                                          "description": "Optional. The endpoint that provides the keys necessary to validate the token."
                                        }
                                      },
                                      "issuer": {
                                        "type": "string",
                                        "nullable": true,
                                        "metadata": {
                                          "description": "Optional. The endpoint that issues the token."
                                        }
                                      },
                                      "tokenEndpoint": {
                                        "type": "string",
                                        "nullable": true,
                                        "metadata": {
                                          "description": "Optional. The endpoint to be used to request a token."
                                        }
                                      },
                                      "wellKnownOpenIdConfiguration": {
                                        "type": "string",
                                        "nullable": true,
                                        "metadata": {
                                          "description": "Optional. The endpoint that contains all the configuration endpoints for the provider."
                                        }
                                      }
                                    },
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The configuration settings of the endpoints used for the custom Open ID Connect provider."
                                    }
                                  }
                                },
                                "nullable": true,
                                "metadata": {
                                  "description": "Optional. The configuration settings of the app registration for the custom Open ID Connect provider."
                                }
                              }
                            },
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The alias of each custom Open ID Connect provider."
                            }
                          },
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The map of the name of the alias of each custom Open ID Connect provider to the configuration settings of the custom Open ID Connect provider."
                          }
                        },
                        "facebook": {
                          "type": "object",
                          "properties": {
                            "enabled": {
                              "type": "bool",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Set to `false` if the Facebook provider should not be enabled despite the set registration."
                              }
                            },
                            "graphApiVersion": {
                              "type": "string",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. The version of the Facebook api to be used while logging in."
                              }
                            },
                            "login": {
                              "type": "object",
                              "properties": {
                                "scopes": {
                                  "type": "array",
                                  "items": {
                                    "type": "string"
                                  },
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. A list of the scopes that should be requested while authenticating."
                                  }
                                }
                              },
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. The configuration settings of the login flow."
                              }
                            },
                            "registration": {
                              "type": "object",
                              "properties": {
                                "appId": {
                                  "type": "string",
                                  "metadata": {
                                    "description": "Required. The App ID of the app used for login."
                                  }
                                },
                                "appSecretSettingName": {
                                  "type": "string",
                                  "metadata": {
                                    "description": "Required. The app setting name that contains the app secret."
                                  }
                                }
                              },
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. The configuration settings of the app registration for the Facebook provider."
                              }
                            }
                          },
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The configuration settings of the Facebook provider."
                          }
                        },
                        "gitHub": {
                          "type": "object",
                          "properties": {
                            "enabled": {
                              "type": "bool",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Set to `false` if the GitHub provider should not be enabled despite the set registration."
                              }
                            },
                            "login": {
                              "type": "object",
                              "properties": {
                                "scopes": {
                                  "type": "array",
                                  "items": {
                                    "type": "string"
                                  },
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. A list of the scopes that should be requested while authenticating."
                                  }
                                }
                              },
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. The configuration settings of the login flow."
                              }
                            },
                            "registration": {
                              "type": "object",
                              "properties": {
                                "clientId": {
                                  "type": "string",
                                  "metadata": {
                                    "description": "Required. The Client ID of the app used for login."
                                  }
                                },
                                "clientSecretSettingName": {
                                  "type": "string",
                                  "metadata": {
                                    "description": "Required. The app setting name that contains the client secret."
                                  }
                                }
                              },
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. The configuration settings of the app registration for the GitHub provider."
                              }
                            }
                          },
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The configuration settings of the GitHub provider."
                          }
                        },
                        "google": {
                          "type": "object",
                          "properties": {
                            "enabled": {
                              "type": "bool",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Set to `false` if the Google provider should not be enabled despite the set registration."
                              }
                            },
                            "login": {
                              "type": "object",
                              "properties": {
                                "scopes": {
                                  "type": "array",
                                  "items": {
                                    "type": "string"
                                  },
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. A list of the scopes that should be requested while authenticating."
                                  }
                                }
                              },
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. The configuration settings of the login flow."
                              }
                            },
                            "registration": {
                              "type": "object",
                              "properties": {
                                "clientId": {
                                  "type": "string",
                                  "metadata": {
                                    "description": "Required. The Client ID of the app used for login."
                                  }
                                },
                                "clientSecretSettingName": {
                                  "type": "string",
                                  "metadata": {
                                    "description": "Required. The app setting name that contains the client secret."
                                  }
                                }
                              },
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. The configuration settings of the app registration for the Google provider."
                              }
                            },
                            "validation": {
                              "type": "object",
                              "properties": {
                                "allowedAudiences": {
                                  "type": "array",
                                  "items": {
                                    "type": "string"
                                  },
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The configuration settings of the allowed list of audiences from which to validate the JWT token."
                                  }
                                }
                              },
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. The configuration settings of the Azure Active Directory token validation flow."
                              }
                            }
                          },
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The configuration settings of the Google provider."
                          }
                        },
                        "legacyMicrosoftAccount": {
                          "type": "object",
                          "properties": {
                            "enabled": {
                              "type": "bool",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Set to `false` if the legacy Microsoft Account provider should not be enabled despite the set registration."
                              }
                            },
                            "login": {
                              "type": "object",
                              "properties": {
                                "scopes": {
                                  "type": "array",
                                  "items": {
                                    "type": "string"
                                  },
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. A list of the scopes that should be requested while authenticating."
                                  }
                                }
                              },
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. The configuration settings of the login flow."
                              }
                            },
                            "registration": {
                              "type": "object",
                              "properties": {
                                "clientId": {
                                  "type": "string",
                                  "metadata": {
                                    "description": "Required. The Client ID of the app used for login."
                                  }
                                },
                                "clientSecretSettingName": {
                                  "type": "string",
                                  "metadata": {
                                    "description": "Required. The app setting name that contains the client secret."
                                  }
                                }
                              },
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. The configuration settings of the app registration for the legacy Microsoft Account provider."
                              }
                            },
                            "validation": {
                              "type": "object",
                              "properties": {
                                "allowedAudiences": {
                                  "type": "array",
                                  "items": {
                                    "type": "string"
                                  },
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The configuration settings of the allowed list of audiences from which to validate the JWT token."
                                  }
                                }
                              },
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. The configuration settings of the legacy Microsoft Account provider token validation flow."
                              }
                            }
                          },
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The configuration settings of the legacy Microsoft Account provider."
                          }
                        },
                        "twitter": {
                          "type": "object",
                          "properties": {
                            "enabled": {
                              "type": "bool",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Set to `false` if the Twitter provider should not be enabled despite the set registration."
                              }
                            },
                            "registration": {
                              "type": "object",
                              "properties": {
                                "consumerKey": {
                                  "type": "securestring",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The OAuth 1.0a consumer key of the Twitter application used for sign-in. This setting is required for enabling Twitter Sign-In. Twitter Sign-In [documentation](https://dev.twitter.com/web/sign-in)."
                                  }
                                },
                                "consumerSecretSettingName": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The app setting name that contains the OAuth 1.0a consumer secret of the Twitter application used for sign-in."
                                  }
                                }
                              },
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. The configuration settings of the app registration for the Twitter provider."
                              }
                            }
                          },
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The configuration settings of the Twitter provider."
                          }
                        }
                      },
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The configuration settings of each of the identity providers used to configure App Service Authentication/Authorization."
                      }
                    },
                    "login": {
                      "type": "object",
                      "properties": {
                        "allowedExternalRedirectUrls": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. External URLs that can be redirected to as part of logging in or logging out of the app. Note that the query string part of the URL is ignored. This is an advanced setting typically only needed by Windows Store application backends. Note that URLs within the current domain are always implicitly allowed."
                          }
                        },
                        "cookieExpiration": {
                          "type": "object",
                          "properties": {
                            "convention": {
                              "type": "string",
                              "allowedValues": [
                                "FixedTime",
                                "IdentityProviderDerived"
                              ],
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. The convention used when determining the session cookie's expiration."
                              }
                            },
                            "timeToExpiration": {
                              "type": "string",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. The time after the request is made when the session cookie should expire."
                              }
                            }
                          },
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The configuration settings of the session cookie's expiration."
                          }
                        },
                        "nonce": {
                          "type": "object",
                          "properties": {
                            "nonceExpirationInterval": {
                              "type": "string",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. The time after the request is made when the nonce should expire."
                              }
                            },
                            "validateNonce": {
                              "type": "bool",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Set to `false` if the nonce should not be validated while completing the login flow."
                              }
                            }
                          },
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The configuration settings of the nonce used in the login flow."
                          }
                        },
                        "preserveUrlFragmentsForLogins": {
                          "type": "bool",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Set to `true` if the fragments from the request are preserved after the login request is made."
                          }
                        },
                        "routes": {
                          "type": "object",
                          "properties": {
                            "logoutEndpoint": {
                              "type": "string",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. The endpoint at which a logout request should be made."
                              }
                            }
                          },
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The routes that specify the endpoints used for login and logout requests."
                          }
                        },
                        "tokenStore": {
                          "type": "object",
                          "properties": {
                            "azureBlobStorage": {
                              "type": "object",
                              "properties": {
                                "sasUrlSettingName": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The name of the app setting containing the SAS URL of the blob storage containing the tokens."
                                  }
                                }
                              },
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. The configuration settings of the storage of the tokens if blob storage is used."
                              }
                            },
                            "enabled": {
                              "type": "bool",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Set to `true` to durably store platform-specific security tokens that are obtained during login flows."
                              }
                            },
                            "fileSystem": {
                              "type": "object",
                              "properties": {
                                "directory": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The directory in which the tokens will be stored."
                                  }
                                }
                              },
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. The configuration settings of the storage of the tokens if a file system is used."
                              }
                            },
                            "tokenRefreshExtensionHours": {
                              "type": "int",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. The number of hours after session token expiration that a session token can be used to call the token refresh API. The default is 72 hours."
                              }
                            }
                          },
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The configuration settings of the token store."
                          }
                        }
                      },
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The configuration settings of the login flow of users using App Service Authentication/Authorization."
                      }
                    },
                    "platform": {
                      "type": "object",
                      "properties": {
                        "configFilePath": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The path of the config file containing auth settings if they come from a file. If the path is relative, base will the site's root directory."
                          }
                        },
                        "enabled": {
                          "type": "bool",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Set to `true` if the Authentication / Authorization feature is enabled for the current app."
                          }
                        },
                        "runtimeVersion": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The RuntimeVersion of the Authentication / Authorization feature in use for the current app. The setting in this value can control the behavior of certain features in the Authentication / Authorization module."
                          }
                        }
                      },
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The configuration settings of the platform of App Service Authentication/Authorization."
                      }
                    }
                  },
                  "metadata": {
                    "description": "Required. The config settings."
                  }
                }
              },
              "metadata": {
                "__bicep_export!": true,
                "description": "The type of an authSettingsV2 configuration."
              }
            },
            "azureStorageAccountConfigType": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "allowedValues": [
                    "azurestorageaccounts"
                  ],
                  "metadata": {
                    "description": "Required. The type of config."
                  }
                },
                "properties": {
                  "type": "object",
                  "properties": {},
                  "additionalProperties": {
                    "type": "object",
                    "properties": {
                      "accessKey": {
                        "type": "securestring",
                        "nullable": true,
                        "metadata": {
                          "description": "Optional. Access key for the storage account."
                        }
                      },
                      "accountName": {
                        "type": "string",
                        "nullable": true,
                        "metadata": {
                          "description": "Optional. Name of the storage account."
                        }
                      },
                      "mountPath": {
                        "type": "string",
                        "nullable": true,
                        "metadata": {
                          "description": "Optional. Path to mount the storage within the site's runtime environment."
                        }
                      },
                      "protocol": {
                        "type": "string",
                        "allowedValues": [
                          "Http",
                          "Nfs",
                          "Smb"
                        ],
                        "nullable": true,
                        "metadata": {
                          "description": "Optional. Mounting protocol to use for the storage account."
                        }
                      },
                      "shareName": {
                        "type": "string",
                        "nullable": true,
                        "metadata": {
                          "description": "Optional. Name of the file share (container name, for Blob storage)."
                        }
                      },
                      "type": {
                        "type": "string",
                        "allowedValues": [
                          "AzureBlob",
                          "AzureFiles"
                        ],
                        "nullable": true,
                        "metadata": {
                          "description": "Optional. Type of storage."
                        }
                      }
                    },
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. The Azure Storage Info configuration."
                    }
                  },
                  "metadata": {
                    "description": "Required. The config settings."
                  }
                }
              },
              "metadata": {
                "__bicep_export!": true,
                "description": "The type of an Azure Storage Account configuration."
              }
            },
            "backupConfigType": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "allowedValues": [
                    "backup"
                  ],
                  "metadata": {
                    "description": "Required. The type of config."
                  }
                },
                "properties": {
                  "type": "object",
                  "properties": {
                    "backupName": {
                      "type": "string",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Name of the backup."
                      }
                    },
                    "backupSchedule": {
                      "type": "object",
                      "properties": {
                        "frequencyInterval": {
                          "type": "int",
                          "metadata": {
                            "description": "Required. How often the backup should be executed (e.g. for weekly backup, this should be set to 7 and FrequencyUnit should be set to Day)."
                          }
                        },
                        "frequencyUnit": {
                          "type": "string",
                          "allowedValues": [
                            "Day",
                            "Hour"
                          ],
                          "metadata": {
                            "description": "Required. The unit of time for how often the backup should be executed (e.g. for weekly backup, this should be set to Day and FrequencyInterval should be set to 7)."
                          }
                        },
                        "keepAtLeastOneBackup": {
                          "type": "bool",
                          "metadata": {
                            "description": "Required. Set to `True` if the retention policy should always keep at least one backup in the storage account, regardless how old it is."
                          }
                        },
                        "retentionPeriodInDays": {
                          "type": "int",
                          "metadata": {
                            "description": "Required. After how many days backups should be deleted."
                          }
                        },
                        "startTime": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. When the schedule should start working."
                          }
                        }
                      },
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Schedule for the backup if it is executed periodically."
                      }
                    },
                    "databases": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "connectionString": {
                            "type": "securestring",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. Contains a connection string to a database which is being backed up or restored. If the restore should happen to a new database, the database name inside is the new one."
                            }
                          },
                          "connectionStringName": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. Contains a connection string name that is linked to the SiteConfig.ConnectionStrings. This is used during restore with overwrite connection strings options."
                            }
                          },
                          "databaseType": {
                            "type": "string",
                            "allowedValues": [
                              "LocalMySql",
                              "MySql",
                              "PostgreSql",
                              "SqlAzure"
                            ],
                            "metadata": {
                              "description": "Required. Database type (e.g. SqlAzure / MySql)."
                            }
                          },
                          "name": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The name of the setting."
                            }
                          }
                        }
                      },
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Databases included in the backup."
                      }
                    },
                    "enabled": {
                      "type": "bool",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Set to `True` if the backup schedule is enabled (must be included in that case), `false` if the backup schedule should be disabled."
                      }
                    },
                    "storageAccountUrl": {
                      "type": "string",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. SAS URL to the container."
                      }
                    }
                  },
                  "metadata": {
                    "description": "Required. The config settings."
                  }
                }
              },
              "metadata": {
                "__bicep_export!": true,
                "description": "The type for a backup configuration."
              }
            },
            "connectionStringsConfigType": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "allowedValues": [
                    "connectionstrings"
                  ],
                  "metadata": {
                    "description": "Required. The type of config."
                  }
                },
                "properties": {
                  "type": "object",
                  "properties": {},
                  "additionalProperties": {
                    "type": "object",
                    "properties": {
                      "type": {
                        "type": "string",
                        "allowedValues": [
                          "ApiHub",
                          "Custom",
                          "DocDb",
                          "EventHub",
                          "MySql",
                          "NotificationHub",
                          "PostgreSQL",
                          "RedisCache",
                          "SQLAzure",
                          "SQLServer",
                          "ServiceBus"
                        ],
                        "metadata": {
                          "description": "Required. Type of database."
                        }
                      },
                      "value": {
                        "type": "string",
                        "metadata": {
                          "description": "Required. Value of pair."
                        }
                      }
                    },
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. The name of the connection string setting."
                    }
                  },
                  "metadata": {
                    "description": "Required. The config settings."
                  }
                }
              },
              "metadata": {
                "__bicep_export!": true,
                "description": "The type for a connection string configuration."
              }
            },
            "logsConfigType": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "allowedValues": [
                    "logs"
                  ],
                  "metadata": {
                    "description": "Required. The type of config."
                  }
                },
                "properties": {
                  "type": "object",
                  "properties": {
                    "applicationLogs": {
                      "type": "object",
                      "properties": {
                        "azureBlobStorage": {
                          "type": "object",
                          "properties": {
                            "level": {
                              "type": "string",
                              "allowedValues": [
                                "Error",
                                "Information",
                                "Off",
                                "Verbose",
                                "Warning"
                              ],
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Log level."
                              }
                            },
                            "retentionInDays": {
                              "type": "int",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Retention in days. Remove blobs older than X days. 0 or lower means no retention."
                              }
                            },
                            "sasUrl": {
                              "type": "string",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. SAS url to a azure blob container with read/write/list/delete permissions."
                              }
                            }
                          },
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Application logs to blob storage configuration."
                          }
                        },
                        "azureTableStorage": {
                          "type": "object",
                          "properties": {
                            "level": {
                              "type": "string",
                              "allowedValues": [
                                "Error",
                                "Information",
                                "Off",
                                "Verbose",
                                "Warning"
                              ],
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Log level."
                              }
                            },
                            "sasUrl": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. SAS URL to an Azure table with add/query/delete permissions."
                              }
                            }
                          },
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Application logs to azure table storage configuration."
                          }
                        },
                        "fileSystem": {
                          "type": "object",
                          "properties": {
                            "level": {
                              "type": "string",
                              "allowedValues": [
                                "Error",
                                "Information",
                                "Off",
                                "Verbose",
                                "Warning"
                              ],
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Log level."
                              }
                            }
                          },
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Application logs to file system configuration."
                          }
                        }
                      },
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Application Logs for Azure configuration."
                      }
                    },
                    "detailedErrorMessages": {
                      "type": "object",
                      "properties": {
                        "enabled": {
                          "type": "bool",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Set to `True` if configuration is enabled, false if it is disabled."
                          }
                        }
                      },
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Detailed error messages configuration."
                      }
                    },
                    "failedRequestsTracing": {
                      "type": "object",
                      "properties": {
                        "enabled": {
                          "type": "bool",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Set to `True` if configuration is enabled, false if it is disabled."
                          }
                        }
                      },
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Failed requests tracing configuration."
                      }
                    },
                    "httpLogs": {
                      "type": "object",
                      "properties": {
                        "azureBlobStorage": {
                          "type": "object",
                          "properties": {
                            "enabled": {
                              "type": "bool",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Set to `True` if configuration is enabled, false if it is disabled."
                              }
                            },
                            "retentionInDays": {
                              "type": "int",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Retention in days. Remove blobs older than X days. 0 or lower means no retention."
                              }
                            },
                            "sasUrl": {
                              "type": "string",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. SAS url to a azure blob container with read/write/list/delete permissions."
                              }
                            }
                          },
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Http logs to azure blob storage configuration."
                          }
                        },
                        "fileSystem": {
                          "type": "object",
                          "properties": {
                            "enabled": {
                              "type": "bool",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Set to `True` if configuration is enabled, false if it is disabled."
                              }
                            },
                            "retentionInDays": {
                              "type": "int",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Retention in days. Remove files older than X days. 0 or lower means no retention."
                              }
                            },
                            "retentionInMb": {
                              "type": "int",
                              "nullable": true,
                              "minValue": 25,
                              "maxValue": 100,
                              "metadata": {
                                "description": "Optional. Maximum size in megabytes that http log files can use. When reached old log files will be removed to make space for new ones."
                              }
                            }
                          },
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Http logs to file system configuration."
                          }
                        }
                      },
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. HTTP logs configuration."
                      }
                    }
                  },
                  "metadata": {
                    "description": "Required. The config settings."
                  }
                }
              },
              "metadata": {
                "__bicep_export!": true,
                "description": "The type of a logs configuration."
              }
            },
            "metadataConfigType": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "allowedValues": [
                    "metadata"
                  ],
                  "metadata": {
                    "description": "Required. The type of config."
                  }
                },
                "properties": {
                  "type": "object",
                  "properties": {},
                  "additionalProperties": {
                    "type": "string",
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. The metadata key value pair."
                    }
                  },
                  "metadata": {
                    "description": "Required. The config settings."
                  }
                }
              },
              "metadata": {
                "__bicep_export!": true,
                "description": "The type of a metadata configuration."
              }
            },
            "pushSettingsConfigType": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "allowedValues": [
                    "pushsettings"
                  ],
                  "metadata": {
                    "description": "Required. The type of config."
                  }
                },
                "properties": {
                  "type": "object",
                  "properties": {
                    "dynamicTagsJson": {
                      "type": "string",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Gets or sets a JSON string containing a list of dynamic tags that will be evaluated from user claims in the push registration endpoint."
                      }
                    },
                    "isPushEnabled": {
                      "type": "bool",
                      "metadata": {
                        "description": "Required. Gets or sets a flag indicating whether the Push endpoint is enabled."
                      }
                    },
                    "tagsRequiringAuth": {
                      "type": "string",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Gets or sets a JSON string containing a list of tags that require user authentication to be used in the push registration endpoint. Tags can consist of alphanumeric characters and the following: '_', '@', '#', '.', ':', '-'. Validation should be performed at the PushRequestHandler."
                      }
                    },
                    "tagWhitelistJson": {
                      "type": "string",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Gets or sets a JSON string containing a list of tags that are whitelisted for use by the push registration endpoint."
                      }
                    }
                  },
                  "metadata": {
                    "description": "Required. The config settings."
                  }
                }
              },
              "metadata": {
                "__bicep_export!": true,
                "description": "The type of a pushSettings configuration."
              }
            },
            "webConfigType": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "allowedValues": [
                    "web"
                  ],
                  "metadata": {
                    "description": "Required. The type of config."
                  }
                },
                "properties": {
                  "type": "object",
                  "properties": {
                    "acrUseManagedIdentityCreds": {
                      "type": "bool",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Flag to use Managed Identity Creds for ACR pull."
                      }
                    },
                    "acrUserManagedIdentityID": {
                      "type": "string",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. If using user managed identity, the user managed identity ClientId."
                      }
                    },
                    "alwaysOn": {
                      "type": "bool",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Set to `true` if 'Always On' is enabled."
                      }
                    },
                    "apiDefinition": {
                      "type": "object",
                      "properties": {
                        "url": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. The URL of the API definition."
                          }
                        }
                      },
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Information about the formal API definition for the app."
                      }
                    },
                    "apiManagementConfig": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. APIM-Api Identifier."
                          }
                        }
                      },
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Azure API management settings linked to the app."
                      }
                    },
                    "appCommandLine": {
                      "type": "string",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. App command line to launch."
                      }
                    },
                    "appSettings": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "name": {
                            "type": "string",
                            "metadata": {
                              "description": "Required. Name of the pair."
                            }
                          },
                          "value": {
                            "type": "string",
                            "metadata": {
                              "description": "Required. Value of the pair."
                            }
                          }
                        }
                      },
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Application settings."
                      }
                    },
                    "autoHealEnabled": {
                      "type": "bool",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Set to `true` if Auto Heal is enabled."
                      }
                    },
                    "autoHealRules": {
                      "type": "object",
                      "properties": {
                        "actions": {
                          "type": "object",
                          "properties": {
                            "actionType": {
                              "type": "string",
                              "allowedValues": [
                                "CustomAction",
                                "LogEvent",
                                "Recycle"
                              ],
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Predefined action to be taken."
                              }
                            },
                            "customAction": {
                              "type": "object",
                              "properties": {
                                "exe": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Executable to be run."
                                  }
                                },
                                "parameters": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Parameters for the executable."
                                  }
                                }
                              },
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Custom action to be taken."
                              }
                            },
                            "minProcessExecutionTime": {
                              "type": "string",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Minimum time the process must execute before taking the action."
                              }
                            }
                          },
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Actions to be executed when a rule is triggered."
                          }
                        },
                        "triggers": {
                          "type": "object",
                          "properties": {
                            "privateBytesInKB": {
                              "type": "int",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. A rule based on private bytes."
                              }
                            },
                            "requests": {
                              "type": "object",
                              "properties": {
                                "count": {
                                  "type": "int",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Request Count."
                                  }
                                },
                                "timeInterval": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Time interval."
                                  }
                                }
                              },
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. A rule based on total requests."
                              }
                            },
                            "slowRequests": {
                              "$ref": "#/definitions/slowRequestBasedTriggerType",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. A rule based on request execution time."
                              }
                            },
                            "slowRequestsWithPath": {
                              "type": "array",
                              "items": {
                                "$ref": "#/definitions/slowRequestBasedTriggerType"
                              },
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. A rule based on multiple Slow Requests Rule with path."
                              }
                            },
                            "statusCodes": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "count": {
                                    "type": "int",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. Request Count."
                                    }
                                  },
                                  "path": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. Request Path."
                                    }
                                  },
                                  "status": {
                                    "type": "int",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. HTTP status code."
                                    }
                                  },
                                  "subStatus": {
                                    "type": "int",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. Request Sub Status."
                                    }
                                  },
                                  "timeInterval": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. Time interval."
                                    }
                                  },
                                  "win32Status": {
                                    "type": "int",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. Win32 error code."
                                    }
                                  }
                                }
                              },
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. A rule based on status codes."
                              }
                            },
                            "statusCodesRange": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "count": {
                                    "type": "int",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. Request Count."
                                    }
                                  },
                                  "path": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. Path."
                                    }
                                  },
                                  "statusCodes": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. HTTP status code."
                                    }
                                  },
                                  "timeInterval": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. Time interval."
                                    }
                                  }
                                }
                              },
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. A rule based on status codes ranges."
                              }
                            }
                          },
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Conditions that describe when to execute the auto-heal actions."
                          }
                        }
                      },
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Auto Heal rules."
                      }
                    },
                    "autoSwapSlotName": {
                      "type": "string",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Auto-swap slot name."
                      }
                    },
                    "azureStorageAccounts": {
                      "type": "object",
                      "properties": {},
                      "additionalProperties": {
                        "type": "object",
                        "properties": {
                          "accessKey": {
                            "type": "securestring",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. Access key for the storage account."
                            }
                          },
                          "accountName": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. Name of the storage account."
                            }
                          },
                          "mountPath": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. Path to mount the storage within the site's runtime environment."
                            }
                          },
                          "protocol": {
                            "type": "string",
                            "allowedValues": [
                              "Http",
                              "Nfs",
                              "Smb"
                            ],
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. Mounting protocol to use for the storage account."
                            }
                          },
                          "shareName": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. Name of the file share (container name, for Blob storage)."
                            }
                          },
                          "type": {
                            "type": "string",
                            "allowedValues": [
                              "AzureBlob",
                              "AzureFiles"
                            ],
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. Type of storage."
                            }
                          }
                        },
                        "metadata": {
                          "description": "Required. A storage account configuration."
                        }
                      },
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. List of Azure Storage Accounts."
                      }
                    },
                    "connectionStrings": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "connectionString": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. Connection string value."
                            }
                          },
                          "name": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. Name of connection string."
                            }
                          },
                          "type": {
                            "type": "string",
                            "allowedValues": [
                              "ApiHub",
                              "Custom",
                              "DocDb",
                              "EventHub",
                              "MySql",
                              "NotificationHub",
                              "PostgreSQL",
                              "RedisCache",
                              "SQLAzure",
                              "SQLServer",
                              "ServiceBus"
                            ],
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. Type of database."
                            }
                          }
                        }
                      },
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Connection strings."
                      }
                    },
                    "cors": {
                      "type": "object",
                      "properties": {
                        "allowedOrigins": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Gets or sets the list of origins that should be allowed to make cross-origin calls (for example: http://example.com:12345). Use \"*\" to allow all."
                          }
                        },
                        "supportCredentials": {
                          "type": "bool",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Gets or sets whether CORS requests with credentials are allowed. See [ref](https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS#Requests_with_credentials) for more details."
                          }
                        }
                      },
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Cross-Origin Resource Sharing (CORS) settings."
                      }
                    },
                    "defaultDocuments": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Default documents."
                      }
                    },
                    "detailedErrorLoggingEnabled": {
                      "type": "bool",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Set to `true` if detailed error logging is enabled."
                      }
                    },
                    "documentRoot": {
                      "type": "string",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Document root."
                      }
                    },
                    "elasticWebAppScaleLimit": {
                      "type": "int",
                      "nullable": true,
                      "minValue": 0,
                      "metadata": {
                        "description": "Optional. Maximum number of workers that a site can scale out to. This setting only applies to apps in plans where ElasticScaleEnabled is `true`."
                      }
                    },
                    "experiments": {
                      "type": "object",
                      "properties": {
                        "rampUpRules": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "actionHostName": {
                                "type": "string",
                                "nullable": true,
                                "metadata": {
                                  "description": "Optional. Hostname of a slot to which the traffic will be redirected if decided to. E.g. myapp-stage.azurewebsites.net."
                                }
                              },
                              "changeDecisionCallbackUrl": {
                                "type": "string",
                                "nullable": true,
                                "metadata": {
                                  "description": "Optional. Custom decision algorithm can be provided in TiPCallback site extension which URL can be specified."
                                }
                              },
                              "changeIntervalInMinutes": {
                                "type": "int",
                                "nullable": true,
                                "metadata": {
                                  "description": "Optional. Specifies interval in minutes to reevaluate ReroutePercentage."
                                }
                              },
                              "changeStep": {
                                "type": "int",
                                "nullable": true,
                                "metadata": {
                                  "description": "Optional. In auto ramp up scenario this is the step to add/remove from `ReroutePercentage` until it reaches `MinReroutePercentage` or `MaxReroutePercentage`. Site metrics are checked every N minutes specified in `ChangeIntervalInMinutes`. Custom decision algorithm can be provided in TiPCallback site extension which URL can be specified in `ChangeDecisionCallbackUrl`."
                                }
                              },
                              "maxReroutePercentage": {
                                "type": "int",
                                "nullable": true,
                                "metadata": {
                                  "description": "Optional. Specifies upper boundary below which ReroutePercentage will stay."
                                }
                              },
                              "minReroutePercentage": {
                                "type": "int",
                                "nullable": true,
                                "metadata": {
                                  "description": "Optional. Specifies lower boundary above which ReroutePercentage will stay."
                                }
                              },
                              "name": {
                                "type": "string",
                                "nullable": true,
                                "metadata": {
                                  "description": "Optional. Name of the routing rule. The recommended name would be to point to the slot which will receive the traffic in the experiment."
                                }
                              },
                              "reroutePercentage": {
                                "type": "int",
                                "nullable": true,
                                "metadata": {
                                  "description": "Optional. Percentage of the traffic which will be redirected to `ActionHostName`."
                                }
                              }
                            }
                          },
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. List of ramp-up rules."
                          }
                        }
                      },
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. This is work around for polymorphic types."
                      }
                    },
                    "ftpsState": {
                      "type": "string",
                      "allowedValues": [
                        "AllAllowed",
                        "Disabled",
                        "FtpsOnly"
                      ],
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. State of FTP / FTPS service."
                      }
                    },
                    "functionAppScaleLimit": {
                      "type": "int",
                      "nullable": true,
                      "minValue": 0,
                      "metadata": {
                        "description": "Optional. Maximum number of workers that a site can scale out to. This setting only applies to the Consumption and Elastic Premium Plans."
                      }
                    },
                    "functionsRuntimeScaleMonitoringEnabled": {
                      "type": "bool",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Gets or sets a value indicating whether functions runtime scale monitoring is enabled. When enabled, the ScaleController will not monitor event sources directly, but will instead call to the runtime to get scale status."
                      }
                    },
                    "handlerMappings": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "arguments": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. Command-line arguments to be passed to the script processor."
                            }
                          },
                          "extension": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. Requests with this extension will be handled using the specified FastCGI application."
                            }
                          },
                          "scriptProcessor": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The absolute path to the FastCGI application."
                            }
                          }
                        }
                      },
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Handler mappings."
                      }
                    },
                    "healthCheckPath": {
                      "type": "string",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Health check path."
                      }
                    },
                    "http20Enabled": {
                      "type": "bool",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Allow clients to connect over http2.0."
                      }
                    },
                    "httpLoggingEnabled": {
                      "type": "bool",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Set to `true` if HTTP logging is enabled."
                      }
                    },
                    "ipSecurityRestrictions": {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/scmIpSecurityRestrictionType"
                      },
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. IP security restrictions for main."
                      }
                    },
                    "ipSecurityRestrictionsDefaultAction": {
                      "type": "string",
                      "allowedValues": [
                        "Allow",
                        "Deny"
                      ],
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Default action for main access restriction if no rules are matched."
                      }
                    },
                    "javaContainer": {
                      "type": "string",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Java container."
                      }
                    },
                    "javaContainerVersion": {
                      "type": "string",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Java container version."
                      }
                    },
                    "javaVersion": {
                      "type": "string",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Java version."
                      }
                    },
                    "keyVaultReferenceIdentity": {
                      "type": "string",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Identity to use for Key Vault Reference authentication."
                      }
                    },
                    "limits": {
                      "type": "object",
                      "properties": {
                        "maxDiskSizeInMb": {
                          "type": "int",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Maximum allowed disk size usage in MB."
                          }
                        },
                        "maxMemoryInMb": {
                          "type": "int",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Maximum allowed memory usage in MB."
                          }
                        },
                        "maxPercentageCpu": {
                          "type": "int",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Maximum allowed CPU usage percentage."
                          }
                        }
                      },
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Site limits."
                      }
                    },
                    "linuxFxVersion": {
                      "type": "string",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Linux App Framework and version."
                      }
                    },
                    "loadBalancing": {
                      "type": "string",
                      "allowedValues": [
                        "LeastRequests",
                        "LeastRequestsWithTieBreaker",
                        "LeastResponseTime",
                        "PerSiteRoundRobin",
                        "RequestHash",
                        "WeightedRoundRobin",
                        "WeightedTotalTraffic"
                      ],
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Site load balancing."
                      }
                    },
                    "localMySqlEnabled": {
                      "type": "bool",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Set to `true` to enable local MySQL."
                      }
                    },
                    "logsDirectorySizeLimit": {
                      "type": "int",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. HTTP logs directory size limit."
                      }
                    },
                    "managedPipelineMode": {
                      "type": "string",
                      "allowedValues": [
                        "Classic",
                        "Integrated"
                      ],
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Managed pipeline mode."
                      }
                    },
                    "managedServiceIdentityId": {
                      "type": "int",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Managed Service Identity Id."
                      }
                    },
                    "metadata": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "name": {
                            "type": "string",
                            "metadata": {
                              "description": "Required. Pair name."
                            }
                          },
                          "value": {
                            "type": "string",
                            "metadata": {
                              "description": "Required. Pair Value."
                            }
                          }
                        }
                      },
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Application metadata. This property cannot be retrieved, since it may contain secrets."
                      }
                    },
                    "minimumElasticInstanceCount": {
                      "type": "int",
                      "nullable": true,
                      "minValue": 0,
                      "maxValue": 20,
                      "metadata": {
                        "description": "Optional. Number of minimum instance count for a site. This setting only applies to the Elastic Plans."
                      }
                    },
                    "minTlsCipherSuite": {
                      "type": "string",
                      "allowedValues": [
                        "TLS_AES_128_GCM_SHA256",
                        "TLS_AES_256_GCM_SHA384",
                        "TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256",
                        "TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256",
                        "TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384",
                        "TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA",
                        "TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256",
                        "TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256",
                        "TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA",
                        "TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384",
                        "TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384",
                        "TLS_RSA_WITH_AES_128_CBC_SHA",
                        "TLS_RSA_WITH_AES_128_CBC_SHA256",
                        "TLS_RSA_WITH_AES_128_GCM_SHA256",
                        "TLS_RSA_WITH_AES_256_CBC_SHA",
                        "TLS_RSA_WITH_AES_256_CBC_SHA256",
                        "TLS_RSA_WITH_AES_256_GCM_SHA384"
                      ],
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The minimum strength TLS cipher suite allowed for an application."
                      }
                    },
                    "minTlsVersion": {
                      "type": "string",
                      "allowedValues": [
                        "1.0",
                        "1.1",
                        "1.2",
                        "1.3"
                      ],
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. MinTlsVersion: configures the minimum version of TLS required for SSL requests."
                      }
                    },
                    "netFrameworkVersion": {
                      "type": "string",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. .NET Framework version."
                      }
                    },
                    "nodeVersion": {
                      "type": "string",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Version of Node.js."
                      }
                    },
                    "numberOfWorkers": {
                      "type": "int",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Number of workers."
                      }
                    },
                    "phpVersion": {
                      "type": "string",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Version of PHP."
                      }
                    },
                    "powerShellVersion": {
                      "type": "string",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Version of PowerShell."
                      }
                    },
                    "preWarmedInstanceCount": {
                      "type": "int",
                      "nullable": true,
                      "minValue": 0,
                      "maxValue": 10,
                      "metadata": {
                        "description": "Optional. Number of preWarmed instances. This setting only applies to the Consumption and Elastic Plans."
                      }
                    },
                    "publicNetworkAccess": {
                      "type": "string",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Property to allow or block all public traffic."
                      }
                    },
                    "publishingUsername": {
                      "type": "string",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Publishing user name."
                      }
                    },
                    "push": {
                      "type": "object",
                      "properties": {
                        "kind": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Kind of resource."
                          }
                        },
                        "properties": {
                          "type": "object",
                          "properties": {
                            "dynamicTagsJson": {
                              "type": "string",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Gets or sets a JSON string containing a list of dynamic tags that will be evaluated from user claims in the push registration endpoint."
                              }
                            },
                            "isPushEnabled": {
                              "type": "bool",
                              "metadata": {
                                "description": "Required. Gets or sets a flag indicating whether the Push endpoint is enabled."
                              }
                            },
                            "tagsRequiringAuth": {
                              "type": "string",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Gets or sets a JSON string containing a list of tags that require user authentication to be used in the push registration endpoint. Tags can consist of alphanumeric characters and the following: '_', '@', '#', '.', ':', '-'. Validation should be performed at the PushRequestHandler."
                              }
                            },
                            "tagWhitelistJson": {
                              "type": "string",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Gets or sets a JSON string containing a list of tags that are whitelisted for use by the push registration endpoint."
                              }
                            }
                          },
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. PushSettings resource specific properties."
                          }
                        }
                      },
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Push endpoint settings."
                      }
                    },
                    "pythonVersion": {
                      "type": "string",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Version of Python."
                      }
                    },
                    "remoteDebuggingEnabled": {
                      "type": "bool",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Set to `true` if remote debugging is enabled."
                      }
                    },
                    "remoteDebuggingVersion": {
                      "type": "string",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Remote debugging version."
                      }
                    },
                    "requestTracingEnabled": {
                      "type": "bool",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Set to `true` if request tracing is enabled."
                      }
                    },
                    "requestTracingExpirationTime": {
                      "type": "string",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Request tracing expiration time."
                      }
                    },
                    "scmIpSecurityRestrictions": {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/scmIpSecurityRestrictionType"
                      },
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. IP security restrictions for scm."
                      }
                    },
                    "scmIpSecurityRestrictionsDefaultAction": {
                      "type": "string",
                      "allowedValues": [
                        "Allow",
                        "Deny"
                      ],
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Default action for scm access restriction if no rules are matched."
                      }
                    },
                    "scmIpSecurityRestrictionsUseMain": {
                      "type": "bool",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. IP security restrictions for scm to use main."
                      }
                    },
                    "scmMinTlsVersion": {
                      "type": "string",
                      "allowedValues": [
                        "1.0",
                        "1.1",
                        "1.2",
                        "1.3"
                      ],
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. ScmMinTlsVersion: configures the minimum version of TLS required for SSL requests for SCM site."
                      }
                    },
                    "scmType": {
                      "type": "string",
                      "allowedValues": [
                        "BitbucketGit",
                        "BitbucketHg",
                        "CodePlexGit",
                        "CodePlexHg",
                        "Dropbox",
                        "ExternalGit",
                        "ExternalHg",
                        "GitHub",
                        "LocalGit",
                        "None",
                        "OneDrive",
                        "Tfs",
                        "VSO",
                        "VSTSRM"
                      ],
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. SCM type."
                      }
                    },
                    "tracingOptions": {
                      "type": "string",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Tracing options."
                      }
                    },
                    "use32BitWorkerProcess": {
                      "type": "bool",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Set to `true` to use 32-bit worker process."
                      }
                    },
                    "virtualApplications": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "physicalPath": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. Physical path."
                            }
                          },
                          "preloadEnabled": {
                            "type": "bool",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. Set to `true` if preloading is enabled."
                            }
                          },
                          "virtualDirectories": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "physicalPath": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Physical path."
                                  }
                                },
                                "virtualPath": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Path to virtual application."
                                  }
                                }
                              }
                            },
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. Virtual directories for virtual application."
                            }
                          },
                          "virtualPath": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. Virtual path."
                            }
                          }
                        }
                      },
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Virtual applications."
                      }
                    },
                    "vnetName": {
                      "type": "string",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Virtual Network name."
                      }
                    },
                    "vnetPrivatePortsCount": {
                      "type": "int",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The number of private ports assigned to this app. These will be assigned dynamically on runtime."
                      }
                    },
                    "vnetRouteAllEnabled": {
                      "type": "bool",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Virtual Network Route All enabled. This causes all outbound traffic to have Virtual Network Security Groups and User Defined Routes applied."
                      }
                    },
                    "websiteTimeZone": {
                      "type": "string",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Sets the time zone a site uses for generating timestamps. Compatible with Linux and Windows App Service. Setting the WEBSITE_TIME_ZONE app setting takes precedence over this config. For Linux, expects tz database values https://www.iana.org/time-zones (for a quick reference see [ref](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones)). For Windows, expects one of the time zones listed under HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Time Zones."
                      }
                    },
                    "webSocketsEnabled": {
                      "type": "bool",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Set to `true` if WebSocket is enabled."
                      }
                    },
                    "windowsFxVersion": {
                      "type": "string",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Xenon App Framework and version."
                      }
                    },
                    "xManagedServiceIdentityId": {
                      "type": "int",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Explicit Managed Service Identity Id."
                      }
                    }
                  },
                  "metadata": {
                    "description": "Required. The config settings."
                  }
                }
              },
              "metadata": {
                "__bicep_export!": true,
                "description": "The type of a web configuration."
              }
            },
            "slowRequestBasedTriggerType": {
              "type": "object",
              "properties": {
                "count": {
                  "type": "int",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Request Count."
                  }
                },
                "path": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Request Path."
                  }
                },
                "timeInterval": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Time interval."
                  }
                },
                "timeTaken": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Time taken."
                  }
                }
              },
              "metadata": {
                "description": "The type of aslow request based trigger."
              }
            },
            "scmIpSecurityRestrictionType": {
              "type": "object",
              "properties": {
                "action": {
                  "type": "string",
                  "allowedValues": [
                    "Allow",
                    "Deny"
                  ],
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Allow or Deny access for this IP range."
                  }
                },
                "description": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. IP restriction rule description."
                  }
                },
                "headers": {
                  "type": "object",
                  "properties": {},
                  "additionalProperties": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "metadata": {
                      "description": "Required. A header."
                    }
                  },
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. IP restriction rule headers.\nX-Forwarded-Host (https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Forwarded-Host#Examples).\nThe matching logic is ..\n- If the property is null or empty (default), all hosts(or lack of) are allowed.\n- A value is compared using ordinal-ignore-case (excluding port number).\n- Subdomain wildcards are permitted but don't match the root domain. For example, *.contoso.com matches the subdomain foo.contoso.com\nbut not the root domain contoso.com or multi-level foo.bar.contoso.com\n- Unicode host names are allowed but are converted to Punycode for matching.\n\nX-Forwarded-For (https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Forwarded-For#Examples).\nThe matching logic is ..\n- If the property is null or empty (default), any forwarded-for chains (or lack of) are allowed.\n- If any address (excluding port number) in the chain (comma separated) matches the CIDR defined by the property.\n\nX-Azure-FDID and X-FD-HealthProbe.\nThe matching logic is exact match."
                  }
                },
                "ipAddress": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. IP address the security restriction is valid for. It can be in form of pure ipv4 address (required SubnetMask property) or CIDR notation such as ipv4/mask (leading bit match). For CIDR, SubnetMask property must not be specified."
                  }
                },
                "name": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. IP restriction rule name."
                  }
                },
                "priority": {
                  "type": "int",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Priority of IP restriction rule."
                  }
                },
                "subnetMask": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Subnet mask for the range of IP addresses the restriction is valid for."
                  }
                },
                "subnetTrafficTag": {
                  "type": "int",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. (internal) Subnet traffic tag."
                  }
                },
                "tag": {
                  "type": "string",
                  "allowedValues": [
                    "Default",
                    "ServiceTag",
                    "XffProxy"
                  ],
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Defines what this IP filter will be used for. This is to support IP filtering on proxies."
                  }
                },
                "vnetSubnetResourceId": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Virtual network resource id."
                  }
                },
                "vnetTrafficTag": {
                  "type": "int",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. (internal) Vnet traffic tag."
                  }
                }
              },
              "metadata": {
                "description": "The type of a IP security restriction."
              }
            },
            "basicPublishingCredentialsPolicyType": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "allowedValues": [
                    "ftp",
                    "scm"
                  ],
                  "metadata": {
                    "description": "Required. The name of the resource."
                  }
                },
                "allow": {
                  "type": "bool",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Set to true to enable or false to disable a publishing method."
                  }
                },
                "location": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Location for all Resources."
                  }
                }
              },
              "metadata": {
                "__bicep_export!": true,
                "description": "The type of a basic publishing credential policy."
              }
            },
            "hybridConnectionRelayType": {
              "type": "object",
              "properties": {
                "hybridConnectionResourceId": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. The resource ID of the relay namespace hybrid connection."
                  }
                },
                "sendKeyName": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Name of the authorization rule send key to use."
                  }
                }
              },
              "metadata": {
                "__bicep_export!": true,
                "description": "The type of a hybrid connection relay."
              }
            },
            "_1.privateEndpointCustomDnsConfigType": {
              "type": "object",
              "properties": {
                "fqdn": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. FQDN that resolves to private endpoint IP address."
                  }
                },
                "ipAddresses": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "metadata": {
                    "description": "Required. A list of private IP addresses of the private endpoint."
                  }
                }
              },
              "metadata": {
                "__bicep_imported_from!": {
                  "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.5.1"
                }
              }
            },
            "_1.privateEndpointIpConfigurationType": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. The name of the resource that is unique within a resource group."
                  }
                },
                "properties": {
                  "type": "object",
                  "properties": {
                    "groupId": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The ID of a group obtained from the remote resource that this private endpoint should connect to."
                      }
                    },
                    "memberName": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The member name of a group obtained from the remote resource that this private endpoint should connect to."
                      }
                    },
                    "privateIPAddress": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. A private IP address obtained from the private endpoint's subnet."
                      }
                    }
                  },
                  "metadata": {
                    "description": "Required. Properties of private endpoint IP configurations."
                  }
                }
              },
              "metadata": {
                "__bicep_imported_from!": {
                  "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.5.1"
                }
              }
            },
            "_1.privateEndpointPrivateDnsZoneGroupType": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The name of the Private DNS Zone Group."
                  }
                },
                "privateDnsZoneGroupConfigs": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "name": {
                        "type": "string",
                        "nullable": true,
                        "metadata": {
                          "description": "Optional. The name of the private DNS Zone Group config."
                        }
                      },
                      "privateDnsZoneResourceId": {
                        "type": "string",
                        "metadata": {
                          "description": "Required. The resource id of the private DNS zone."
                        }
                      }
                    }
                  },
                  "metadata": {
                    "description": "Required. The private DNS Zone Groups to associate the Private Endpoint. A DNS Zone Group can support up to 5 DNS zones."
                  }
                }
              },
              "metadata": {
                "__bicep_imported_from!": {
                  "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.5.1"
                }
              }
            },
            "diagnosticSettingFullType": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The name of the diagnostic setting."
                  }
                },
                "logCategoriesAndGroups": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "category": {
                        "type": "string",
                        "nullable": true,
                        "metadata": {
                          "description": "Optional. Name of a Diagnostic Log category for a resource type this setting is applied to. Set the specific logs to collect here."
                        }
                      },
                      "categoryGroup": {
                        "type": "string",
                        "nullable": true,
                        "metadata": {
                          "description": "Optional. Name of a Diagnostic Log category group for a resource type this setting is applied to. Set to `allLogs` to collect all logs."
                        }
                      },
                      "enabled": {
                        "type": "bool",
                        "nullable": true,
                        "metadata": {
                          "description": "Optional. Enable or disable the category explicitly. Default is `true`."
                        }
                      }
                    }
                  },
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The name of logs that will be streamed. \"allLogs\" includes all possible logs for the resource. Set to `[]` to disable log collection."
                  }
                },
                "metricCategories": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "category": {
                        "type": "string",
                        "metadata": {
                          "description": "Required. Name of a Diagnostic Metric category for a resource type this setting is applied to. Set to `AllMetrics` to collect all metrics."
                        }
                      },
                      "enabled": {
                        "type": "bool",
                        "nullable": true,
                        "metadata": {
                          "description": "Optional. Enable or disable the category explicitly. Default is `true`."
                        }
                      }
                    }
                  },
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The name of metrics that will be streamed. \"allMetrics\" includes all possible metrics for the resource. Set to `[]` to disable metric collection."
                  }
                },
                "logAnalyticsDestinationType": {
                  "type": "string",
                  "allowedValues": [
                    "AzureDiagnostics",
                    "Dedicated"
                  ],
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. A string indicating whether the export to Log Analytics should use the default destination type, i.e. AzureDiagnostics, or use a destination type."
                  }
                },
                "workspaceResourceId": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Resource ID of the diagnostic log analytics workspace. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                  }
                },
                "storageAccountResourceId": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Resource ID of the diagnostic storage account. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                  }
                },
                "eventHubAuthorizationRuleResourceId": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Resource ID of the diagnostic event hub authorization rule for the Event Hubs namespace in which the event hub should be created or streamed to."
                  }
                },
                "eventHubName": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Name of the diagnostic event hub within the namespace to which logs are streamed. Without this, an event hub is created for each log category. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                  }
                },
                "marketplacePartnerResourceId": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The full ARM resource ID of the Marketplace resource to which you would like to send Diagnostic Logs."
                  }
                }
              },
              "metadata": {
                "description": "An AVM-aligned type for a diagnostic setting. To be used if both logs & metrics are supported by the resource provider.",
                "__bicep_imported_from!": {
                  "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.5.1"
                }
              }
            },
            "lockType": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Specify the name of lock."
                  }
                },
                "kind": {
                  "type": "string",
                  "allowedValues": [
                    "CanNotDelete",
                    "None",
                    "ReadOnly"
                  ],
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Specify the type of lock."
                  }
                }
              },
              "metadata": {
                "description": "An AVM-aligned type for a lock.",
                "__bicep_imported_from!": {
                  "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.5.1"
                }
              }
            },
            "managedIdentityAllType": {
              "type": "object",
              "properties": {
                "systemAssigned": {
                  "type": "bool",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Enables system assigned managed identity on the resource."
                  }
                },
                "userAssignedResourceIds": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The resource ID(s) to assign to the resource. Required if a user assigned identity is used for encryption."
                  }
                }
              },
              "metadata": {
                "description": "An AVM-aligned type for a managed identity configuration. To be used if both a system-assigned & user-assigned identities are supported by the resource provider.",
                "__bicep_imported_from!": {
                  "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.5.1"
                }
              }
            },
            "privateEndpointSingleServiceType": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The name of the Private Endpoint."
                  }
                },
                "location": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The location to deploy the Private Endpoint to."
                  }
                },
                "privateLinkServiceConnectionName": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The name of the private link connection to create."
                  }
                },
                "service": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The subresource to deploy the Private Endpoint for. For example \"vault\" for a Key Vault Private Endpoint."
                  }
                },
                "subnetResourceId": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. Resource ID of the subnet where the endpoint needs to be created."
                  }
                },
                "resourceGroupResourceId": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The resource ID of the Resource Group the Private Endpoint will be created in. If not specified, the Resource Group of the provided Virtual Network Subnet is used."
                  }
                },
                "privateDnsZoneGroup": {
                  "$ref": "#/definitions/_1.privateEndpointPrivateDnsZoneGroupType",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The private DNS Zone Group to configure for the Private Endpoint."
                  }
                },
                "isManualConnection": {
                  "type": "bool",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. If Manual Private Link Connection is required."
                  }
                },
                "manualConnectionRequestMessage": {
                  "type": "string",
                  "nullable": true,
                  "maxLength": 140,
                  "metadata": {
                    "description": "Optional. A message passed to the owner of the remote resource with the manual connection request."
                  }
                },
                "customDnsConfigs": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/_1.privateEndpointCustomDnsConfigType"
                  },
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Custom DNS configurations."
                  }
                },
                "ipConfigurations": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/_1.privateEndpointIpConfigurationType"
                  },
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. A list of IP configurations of the Private Endpoint. This will be used to map to the first-party Service endpoints."
                  }
                },
                "applicationSecurityGroupResourceIds": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Application security groups in which the Private Endpoint IP configuration is included."
                  }
                },
                "customNetworkInterfaceName": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The custom name of the network interface attached to the Private Endpoint."
                  }
                },
                "lock": {
                  "$ref": "#/definitions/lockType",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Specify the type of lock."
                  }
                },
                "roleAssignments": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/roleAssignmentType"
                  },
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Array of role assignments to create."
                  }
                },
                "tags": {
                  "type": "object",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Tags to be applied on all resources/Resource Groups in this deployment."
                  }
                },
                "enableTelemetry": {
                  "type": "bool",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Enable/Disable usage telemetry for module."
                  }
                }
              },
              "metadata": {
                "description": "An AVM-aligned type for a private endpoint. To be used if the private endpoint's default service / groupId can be assumed (i.e., for services that only have one Private Endpoint type like 'vault' for key vault).",
                "__bicep_imported_from!": {
                  "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.5.1"
                }
              }
            },
            "roleAssignmentType": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The name (as GUID) of the role assignment. If not provided, a GUID will be generated."
                  }
                },
                "roleDefinitionIdOrName": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                  }
                },
                "principalId": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                  }
                },
                "principalType": {
                  "type": "string",
                  "allowedValues": [
                    "Device",
                    "ForeignGroup",
                    "Group",
                    "ServicePrincipal",
                    "User"
                  ],
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The principal type of the assigned principal ID."
                  }
                },
                "description": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The description of the role assignment."
                  }
                },
                "condition": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                  }
                },
                "conditionVersion": {
                  "type": "string",
                  "allowedValues": [
                    "2.0"
                  ],
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Version of the condition."
                  }
                },
                "delegatedManagedIdentityResourceId": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The Resource Id of the delegated managed identity resource."
                  }
                }
              },
              "metadata": {
                "description": "An AVM-aligned type for a role assignment.",
                "__bicep_imported_from!": {
                  "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.5.1"
                }
              }
            }
          },
          "parameters": {
            "name": {
              "type": "string",
              "metadata": {
                "description": "Required. Name of the slot."
              }
            },
            "appName": {
              "type": "string",
              "metadata": {
                "description": "Conditional. The name of the parent site resource. Required if the template is used in a standalone deployment."
              }
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]",
              "metadata": {
                "description": "Optional. Location for all Resources."
              }
            },
            "kind": {
              "type": "string",
              "allowedValues": [
                "functionapp",
                "functionapp,linux",
                "functionapp,workflowapp",
                "functionapp,workflowapp,linux",
                "functionapp,linux,container",
                "functionapp,linux,container,azurecontainerapps",
                "app,linux",
                "app",
                "linux,api",
                "api",
                "app,linux,container",
                "app,container,windows"
              ],
              "metadata": {
                "description": "Required. Type of site to deploy."
              }
            },
            "serverFarmResourceId": {
              "type": "string",
              "nullable": true,
              "metadata": {
                "description": "Optional. The resource ID of the app service plan to use for the slot."
              }
            },
            "httpsOnly": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Optional. Configures a slot to accept only HTTPS requests. Issues redirect for HTTP requests."
              }
            },
            "clientAffinityEnabled": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Optional. If client affinity is enabled."
              }
            },
            "appServiceEnvironmentResourceId": {
              "type": "string",
              "nullable": true,
              "metadata": {
                "description": "Optional. The resource ID of the app service environment to use for this resource."
              }
            },
            "managedIdentities": {
              "$ref": "#/definitions/managedIdentityAllType",
              "nullable": true,
              "metadata": {
                "description": "Optional. The managed identity definition for this resource."
              }
            },
            "keyVaultAccessIdentityResourceId": {
              "type": "string",
              "nullable": true,
              "metadata": {
                "description": "Optional. The resource ID of the assigned identity to be used to access a key vault with."
              }
            },
            "storageAccountRequired": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Optional. Checks if Customer provided storage account is required."
              }
            },
            "virtualNetworkSubnetId": {
              "type": "string",
              "nullable": true,
              "metadata": {
                "description": "Optional. Azure Resource Manager ID of the Virtual network and subnet to be joined by Regional VNET Integration. This must be of the form /subscriptions/{subscriptionName}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualNetworks/{vnetName}/subnets/{subnetName}."
              }
            },
            "siteConfig": {
              "type": "object",
              "metadata": {
                "__bicep_resource_derived_type!": {
                  "source": "Microsoft.Web/sites/slots@2024-04-01#properties/properties/properties/siteConfig"
                },
                "description": "Optional. The site config object."
              },
              "defaultValue": {
                "alwaysOn": true
              }
            },
            "functionAppConfig": {
              "type": "object",
              "nullable": true,
              "metadata": {
                "description": "Optional. The Function App config object."
              }
            },
            "configs": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/configType"
              },
              "nullable": true,
              "metadata": {
                "description": "Optional. The web site config."
              }
            },
            "extensions": {
              "type": "array",
              "items": {
                "type": "object"
              },
              "nullable": true,
              "metadata": {
                "description": "Optional. The extensions configuration."
              }
            },
            "lock": {
              "$ref": "#/definitions/lockType",
              "nullable": true,
              "metadata": {
                "description": "Optional. The lock settings of the service."
              }
            },
            "privateEndpoints": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/privateEndpointSingleServiceType"
              },
              "nullable": true,
              "metadata": {
                "description": "Optional. Configuration details for private endpoints."
              }
            },
            "tags": {
              "type": "object",
              "nullable": true,
              "metadata": {
                "description": "Optional. Tags of the resource."
              }
            },
            "roleAssignments": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/roleAssignmentType"
              },
              "nullable": true,
              "metadata": {
                "description": "Optional. Array of role assignments to create."
              }
            },
            "diagnosticSettings": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/diagnosticSettingFullType"
              },
              "nullable": true,
              "metadata": {
                "description": "Optional. The diagnostic settings of the service."
              }
            },
            "clientCertEnabled": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Optional. To enable client certificate authentication (TLS mutual authentication)."
              }
            },
            "clientCertExclusionPaths": {
              "type": "string",
              "nullable": true,
              "metadata": {
                "description": "Optional. Client certificate authentication comma-separated exclusion paths."
              }
            },
            "clientCertMode": {
              "type": "string",
              "defaultValue": "Optional",
              "allowedValues": [
                "Optional",
                "OptionalInteractiveUser",
                "Required"
              ],
              "metadata": {
                "description": "Optional. This composes with ClientCertEnabled setting.</p>- ClientCertEnabled: false means ClientCert is ignored.</p>- ClientCertEnabled: true and ClientCertMode: Required means ClientCert is required.</p>- ClientCertEnabled: true and ClientCertMode: Optional means ClientCert is optional or accepted."
              }
            },
            "cloningInfo": {
              "type": "object",
              "nullable": true,
              "metadata": {
                "description": "Optional. If specified during app creation, the app is cloned from a source app."
              }
            },
            "containerSize": {
              "type": "int",
              "nullable": true,
              "metadata": {
                "description": "Optional. Size of the function container."
              }
            },
            "customDomainVerificationId": {
              "type": "string",
              "nullable": true,
              "metadata": {
                "description": "Optional. Unique identifier that verifies the custom domains assigned to the app. Customer will add this ID to a txt record for verification."
              }
            },
            "dailyMemoryTimeQuota": {
              "type": "int",
              "nullable": true,
              "metadata": {
                "description": "Optional. Maximum allowed daily memory-time quota (applicable on dynamic apps only)."
              }
            },
            "enabled": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Optional. Setting this value to false disables the app (takes the app offline)."
              }
            },
            "hostNameSslStates": {
              "type": "array",
              "metadata": {
                "__bicep_resource_derived_type!": {
                  "source": "Microsoft.Web/sites/slots@2024-04-01#properties/properties/properties/hostNameSslStates"
                },
                "description": "Optional. Hostname SSL states are used to manage the SSL bindings for app's hostnames."
              },
              "nullable": true
            },
            "hyperV": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Optional. Hyper-V sandbox."
              }
            },
            "publicNetworkAccess": {
              "type": "string",
              "nullable": true,
              "allowedValues": [
                "Enabled",
                "Disabled"
              ],
              "metadata": {
                "description": "Optional. Allow or block all public traffic."
              }
            },
            "redundancyMode": {
              "type": "string",
              "defaultValue": "None",
              "allowedValues": [
                "ActiveActive",
                "Failover",
                "GeoRedundant",
                "Manual",
                "None"
              ],
              "metadata": {
                "description": "Optional. Site redundancy mode."
              }
            },
            "basicPublishingCredentialsPolicies": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/basicPublishingCredentialsPolicyType"
              },
              "nullable": true,
              "metadata": {
                "description": "Optional. The site publishing credential policy names which are associated with the site slot."
              }
            },
            "vnetContentShareEnabled": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Optional. To enable accessing content over virtual network."
              }
            },
            "vnetImagePullEnabled": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Optional. To enable pulling image over Virtual Network."
              }
            },
            "vnetRouteAllEnabled": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Optional. Virtual Network Route All enabled. This causes all outbound traffic to have Virtual Network Security Groups and User Defined Routes applied."
              }
            },
            "hybridConnectionRelays": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/hybridConnectionRelayType"
              },
              "nullable": true,
              "metadata": {
                "description": "Optional. Names of hybrid connection relays to connect app with."
              }
            },
            "dnsConfiguration": {
              "type": "object",
              "metadata": {
                "__bicep_resource_derived_type!": {
                  "source": "Microsoft.Web/sites/slots@2024-04-01#properties/properties/properties/dnsConfiguration"
                },
                "description": "Optional. Property to configure various DNS related settings for a site."
              },
              "nullable": true
            },
            "autoGeneratedDomainNameLabelScope": {
              "type": "string",
              "nullable": true,
              "allowedValues": [
                "NoReuse",
                "ResourceGroupReuse",
                "SubscriptionReuse",
                "TenantReuse"
              ],
              "metadata": {
                "description": "Optional. Specifies the scope of uniqueness for the default hostname during resource creation."
              }
            }
          },
          "variables": {
            "copy": [
              {
                "name": "formattedRoleAssignments",
                "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]",
                "input": "[union(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')], createObject('roleDefinitionId', coalesce(tryGet(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName), if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName)))))]"
              }
            ],
            "enableReferencedModulesTelemetry": false,
            "formattedUserAssignedIdentities": "[reduce(map(coalesce(tryGet(parameters('managedIdentities'), 'userAssignedResourceIds'), createArray()), lambda('id', createObject(format('{0}', lambdaVariables('id')), createObject()))), createObject(), lambda('cur', 'next', union(lambdaVariables('cur'), lambdaVariables('next'))))]",
            "identity": "[if(not(empty(parameters('managedIdentities'))), createObject('type', if(coalesce(tryGet(parameters('managedIdentities'), 'systemAssigned'), false()), if(not(empty(coalesce(tryGet(parameters('managedIdentities'), 'userAssignedResourceIds'), createObject()))), 'SystemAssigned, UserAssigned', 'SystemAssigned'), if(not(empty(coalesce(tryGet(parameters('managedIdentities'), 'userAssignedResourceIds'), createObject()))), 'UserAssigned', null())), 'userAssignedIdentities', if(not(empty(variables('formattedUserAssignedIdentities'))), variables('formattedUserAssignedIdentities'), null())), null())]",
            "builtInRoleNames": {
              "App Compliance Automation Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '0f37683f-2463-46b6-9ce7-9b788b988ba2')]",
              "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
              "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
              "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
              "Role Based Access Control Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]",
              "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]",
              "Web Plan Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '2cc479cb-7b4d-49a8-b449-8c00fd0f0a4b')]",
              "Website Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'de139f84-1756-47ae-9be6-808fbbe84772')]"
            }
          },
          "resources": {
            "app": {
              "existing": true,
              "type": "Microsoft.Web/sites",
              "apiVersion": "2024-04-01",
              "name": "[parameters('appName')]"
            },
            "slot": {
              "type": "Microsoft.Web/sites/slots",
              "apiVersion": "2024-04-01",
              "name": "[format('{0}/{1}', parameters('appName'), parameters('name'))]",
              "location": "[parameters('location')]",
              "kind": "[parameters('kind')]",
              "tags": "[parameters('tags')]",
              "identity": "[variables('identity')]",
              "properties": {
                "serverFarmId": "[parameters('serverFarmResourceId')]",
                "clientAffinityEnabled": "[parameters('clientAffinityEnabled')]",
                "httpsOnly": "[parameters('httpsOnly')]",
                "hostingEnvironmentProfile": "[if(not(empty(parameters('appServiceEnvironmentResourceId'))), createObject('id', parameters('appServiceEnvironmentResourceId')), null())]",
                "storageAccountRequired": "[parameters('storageAccountRequired')]",
                "keyVaultReferenceIdentity": "[parameters('keyVaultAccessIdentityResourceId')]",
                "virtualNetworkSubnetId": "[parameters('virtualNetworkSubnetId')]",
                "siteConfig": "[parameters('siteConfig')]",
                "functionAppConfig": "[parameters('functionAppConfig')]",
                "clientCertEnabled": "[parameters('clientCertEnabled')]",
                "clientCertExclusionPaths": "[parameters('clientCertExclusionPaths')]",
                "clientCertMode": "[parameters('clientCertMode')]",
                "cloningInfo": "[parameters('cloningInfo')]",
                "containerSize": "[parameters('containerSize')]",
                "customDomainVerificationId": "[parameters('customDomainVerificationId')]",
                "dailyMemoryTimeQuota": "[parameters('dailyMemoryTimeQuota')]",
                "enabled": "[parameters('enabled')]",
                "hostNameSslStates": "[parameters('hostNameSslStates')]",
                "hyperV": "[parameters('hyperV')]",
                "publicNetworkAccess": "[parameters('publicNetworkAccess')]",
                "redundancyMode": "[parameters('redundancyMode')]",
                "vnetContentShareEnabled": "[parameters('vnetContentShareEnabled')]",
                "vnetImagePullEnabled": "[parameters('vnetImagePullEnabled')]",
                "vnetRouteAllEnabled": "[parameters('vnetRouteAllEnabled')]",
                "dnsConfiguration": "[parameters('dnsConfiguration')]",
                "autoGeneratedDomainNameLabelScope": "[parameters('autoGeneratedDomainNameLabelScope')]"
              }
            },
            "slot_lock": {
              "condition": "[and(not(empty(coalesce(parameters('lock'), createObject()))), not(equals(tryGet(parameters('lock'), 'kind'), 'None')))]",
              "type": "Microsoft.Authorization/locks",
              "apiVersion": "2020-05-01",
              "scope": "[format('Microsoft.Web/sites/{0}/slots/{1}', parameters('appName'), parameters('name'))]",
              "name": "[coalesce(tryGet(parameters('lock'), 'name'), format('lock-{0}', parameters('name')))]",
              "properties": {
                "level": "[coalesce(tryGet(parameters('lock'), 'kind'), '')]",
                "notes": "[if(equals(tryGet(parameters('lock'), 'kind'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot delete or modify the resource or child resources.')]"
              },
              "dependsOn": [
                "slot"
              ]
            },
            "slot_diagnosticSettings": {
              "copy": {
                "name": "slot_diagnosticSettings",
                "count": "[length(coalesce(parameters('diagnosticSettings'), createArray()))]"
              },
              "type": "Microsoft.Insights/diagnosticSettings",
              "apiVersion": "2021-05-01-preview",
              "scope": "[format('Microsoft.Web/sites/{0}/slots/{1}', parameters('appName'), parameters('name'))]",
              "name": "[coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'name'), format('{0}-diagnosticSettings', parameters('name')))]",
              "properties": {
                "copy": [
                  {
                    "name": "metrics",
                    "count": "[length(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics'))))]",
                    "input": {
                      "category": "[coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics')))[copyIndex('metrics')].category]",
                      "enabled": "[coalesce(tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics')))[copyIndex('metrics')], 'enabled'), true())]",
                      "timeGrain": null
                    }
                  },
                  {
                    "name": "logs",
                    "count": "[length(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs'))))]",
                    "input": {
                      "categoryGroup": "[tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'categoryGroup')]",
                      "category": "[tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'category')]",
                      "enabled": "[coalesce(tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'enabled'), true())]"
                    }
                  }
                ],
                "storageAccountId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'storageAccountResourceId')]",
                "workspaceId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'workspaceResourceId')]",
                "eventHubAuthorizationRuleId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'eventHubAuthorizationRuleResourceId')]",
                "eventHubName": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'eventHubName')]",
                "marketplacePartnerId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'marketplacePartnerResourceId')]",
                "logAnalyticsDestinationType": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logAnalyticsDestinationType')]"
              },
              "dependsOn": [
                "slot"
              ]
            },
            "slot_roleAssignments": {
              "copy": {
                "name": "slot_roleAssignments",
                "count": "[length(coalesce(variables('formattedRoleAssignments'), createArray()))]"
              },
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.Web/sites/{0}/slots/{1}', parameters('appName'), parameters('name'))]",
              "name": "[coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'name'), guid(resourceId('Microsoft.Web/sites/slots', parameters('appName'), parameters('name')), coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId, coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId))]",
              "properties": {
                "roleDefinitionId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId]",
                "principalId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId]",
                "description": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'description')]",
                "principalType": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'principalType')]",
                "condition": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition')]",
                "conditionVersion": "[if(not(empty(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                "delegatedManagedIdentityResourceId": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
              },
              "dependsOn": [
                "slot"
              ]
            },
            "slot_basicPublishingCredentialsPolicies": {
              "copy": {
                "name": "slot_basicPublishingCredentialsPolicies",
                "count": "[length(coalesce(parameters('basicPublishingCredentialsPolicies'), createArray()))]"
              },
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('{0}-Slot-Publish-Cred-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "appName": {
                    "value": "[parameters('appName')]"
                  },
                  "slotName": {
                    "value": "[parameters('name')]"
                  },
                  "name": {
                    "value": "[coalesce(parameters('basicPublishingCredentialsPolicies'), createArray())[copyIndex()].name]"
                  },
                  "allow": {
                    "value": "[tryGet(coalesce(parameters('basicPublishingCredentialsPolicies'), createArray())[copyIndex()], 'allow')]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.35.1.17967",
                      "templateHash": "17422611495851182862"
                    },
                    "name": "Web Site Slot Basic Publishing Credentials Policies",
                    "description": "This module deploys a Web Site Slot Basic Publishing Credentials Policy."
                  },
                  "parameters": {
                    "name": {
                      "type": "string",
                      "allowedValues": [
                        "scm",
                        "ftp"
                      ],
                      "metadata": {
                        "description": "Required. The name of the resource."
                      }
                    },
                    "allow": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "Optional. Set to true to enable or false to disable a publishing method."
                      }
                    },
                    "appName": {
                      "type": "string",
                      "metadata": {
                        "description": "Conditional. The name of the parent web site. Required if the template is used in a standalone deployment."
                      }
                    },
                    "slotName": {
                      "type": "string",
                      "metadata": {
                        "description": "Conditional. The name of the parent web site slot. Required if the template is used in a standalone deployment."
                      }
                    },
                    "location": {
                      "type": "string",
                      "defaultValue": "[resourceGroup().location]",
                      "metadata": {
                        "description": "Optional. Location for all Resources."
                      }
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Web/sites/slots/basicPublishingCredentialsPolicies",
                      "apiVersion": "2024-04-01",
                      "name": "[format('{0}/{1}/{2}', parameters('appName'), parameters('slotName'), parameters('name'))]",
                      "location": "[parameters('location')]",
                      "properties": {
                        "allow": "[parameters('allow')]"
                      }
                    }
                  ],
                  "outputs": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the basic publishing credential policy."
                      },
                      "value": "[parameters('name')]"
                    },
                    "resourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the basic publishing credential policy."
                      },
                      "value": "[resourceId('Microsoft.Web/sites/slots/basicPublishingCredentialsPolicies', parameters('appName'), parameters('slotName'), parameters('name'))]"
                    },
                    "resourceGroupName": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the resource group the basic publishing credential policy was deployed into."
                      },
                      "value": "[resourceGroup().name]"
                    },
                    "location": {
                      "type": "string",
                      "metadata": {
                        "description": "The location the resource was deployed into."
                      },
                      "value": "[reference(resourceId('Microsoft.Web/sites/slots/basicPublishingCredentialsPolicies', parameters('appName'), parameters('slotName'), parameters('name')), '2024-04-01', 'full').location]"
                    }
                  }
                }
              },
              "dependsOn": [
                "slot"
              ]
            },
            "slot_hybridConnectionRelays": {
              "copy": {
                "name": "slot_hybridConnectionRelays",
                "count": "[length(coalesce(parameters('hybridConnectionRelays'), createArray()))]"
              },
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('{0}-Slot-HybridConnectionRelay-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "hybridConnectionResourceId": {
                    "value": "[coalesce(parameters('hybridConnectionRelays'), createArray())[copyIndex()].hybridConnectionResourceId]"
                  },
                  "appName": {
                    "value": "[parameters('appName')]"
                  },
                  "slotName": {
                    "value": "[parameters('name')]"
                  },
                  "sendKeyName": {
                    "value": "[tryGet(coalesce(parameters('hybridConnectionRelays'), createArray())[copyIndex()], 'sendKeyName')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.35.1.17967",
                      "templateHash": "5548719650419041948"
                    },
                    "name": "Web/Function Apps Slot Hybrid Connection Relay",
                    "description": "This module deploys a Site Slot Hybrid Connection Namespace Relay."
                  },
                  "parameters": {
                    "hybridConnectionResourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The resource ID of the relay namespace hybrid connection."
                      }
                    },
                    "slotName": {
                      "type": "string",
                      "metadata": {
                        "description": "Conditional. The name of the site slot. Required if the template is used in a standalone deployment."
                      }
                    },
                    "appName": {
                      "type": "string",
                      "metadata": {
                        "description": "Conditional. The name of the parent web site. Required if the template is used in a standalone deployment."
                      }
                    },
                    "sendKeyName": {
                      "type": "string",
                      "defaultValue": "defaultSender",
                      "metadata": {
                        "description": "Optional. Name of the authorization rule send key to use."
                      }
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Web/sites/slots/hybridConnectionNamespaces/relays",
                      "apiVersion": "2024-04-01",
                      "name": "[format('{0}/{1}/{2}/{3}', parameters('appName'), parameters('slotName'), split(parameters('hybridConnectionResourceId'), '/')[8], split(parameters('hybridConnectionResourceId'), '/')[10])]",
                      "properties": {
                        "serviceBusNamespace": "[split(parameters('hybridConnectionResourceId'), '/')[8]]",
                        "serviceBusSuffix": "[split(substring(reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('hybridConnectionResourceId'), '/')[2], split(parameters('hybridConnectionResourceId'), '/')[4]), 'Microsoft.Relay/namespaces', split(parameters('hybridConnectionResourceId'), '/')[8]), '2021-11-01').serviceBusEndpoint, indexOf(reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('hybridConnectionResourceId'), '/')[2], split(parameters('hybridConnectionResourceId'), '/')[4]), 'Microsoft.Relay/namespaces', split(parameters('hybridConnectionResourceId'), '/')[8]), '2021-11-01').serviceBusEndpoint, '.servicebus')), ':')[0]]",
                        "relayName": "[split(parameters('hybridConnectionResourceId'), '/')[10]]",
                        "relayArmUri": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('hybridConnectionResourceId'), '/')[2], split(parameters('hybridConnectionResourceId'), '/')[4]), 'Microsoft.Relay/namespaces/hybridConnections', split(parameters('hybridConnectionResourceId'), '/')[8], split(parameters('hybridConnectionResourceId'), '/')[10])]",
                        "hostname": "[split(json(reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('hybridConnectionResourceId'), '/')[2], split(parameters('hybridConnectionResourceId'), '/')[4]), 'Microsoft.Relay/namespaces/hybridConnections', split(parameters('hybridConnectionResourceId'), '/')[8], split(parameters('hybridConnectionResourceId'), '/')[10]), '2021-11-01').userMetadata)[0].value, ':')[0]]",
                        "port": "[int(split(json(reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('hybridConnectionResourceId'), '/')[2], split(parameters('hybridConnectionResourceId'), '/')[4]), 'Microsoft.Relay/namespaces/hybridConnections', split(parameters('hybridConnectionResourceId'), '/')[8], split(parameters('hybridConnectionResourceId'), '/')[10]), '2021-11-01').userMetadata)[0].value, ':')[1])]",
                        "sendKeyName": "[parameters('sendKeyName')]",
                        "sendKeyValue": "[listKeys(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('hybridConnectionResourceId'), '/')[2], split(parameters('hybridConnectionResourceId'), '/')[4]), 'Microsoft.Relay/namespaces/hybridConnections/authorizationRules', split(parameters('hybridConnectionResourceId'), '/')[8], split(parameters('hybridConnectionResourceId'), '/')[10], parameters('sendKeyName')), '2021-11-01').primaryKey]"
                      }
                    }
                  ],
                  "outputs": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the hybrid connection relay.."
                      },
                      "value": "[format('{0}/{1}/{2}/{3}', parameters('appName'), parameters('slotName'), split(parameters('hybridConnectionResourceId'), '/')[8], split(parameters('hybridConnectionResourceId'), '/')[10])]"
                    },
                    "resourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the hybrid connection relay."
                      },
                      "value": "[resourceId('Microsoft.Web/sites/slots/hybridConnectionNamespaces/relays', split(format('{0}/{1}/{2}/{3}', parameters('appName'), parameters('slotName'), split(parameters('hybridConnectionResourceId'), '/')[8], split(parameters('hybridConnectionResourceId'), '/')[10]), '/')[0], split(format('{0}/{1}/{2}/{3}', parameters('appName'), parameters('slotName'), split(parameters('hybridConnectionResourceId'), '/')[8], split(parameters('hybridConnectionResourceId'), '/')[10]), '/')[1], split(format('{0}/{1}/{2}/{3}', parameters('appName'), parameters('slotName'), split(parameters('hybridConnectionResourceId'), '/')[8], split(parameters('hybridConnectionResourceId'), '/')[10]), '/')[2], split(format('{0}/{1}/{2}/{3}', parameters('appName'), parameters('slotName'), split(parameters('hybridConnectionResourceId'), '/')[8], split(parameters('hybridConnectionResourceId'), '/')[10]), '/')[3])]"
                    },
                    "resourceGroupName": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the resource group the resource was deployed into."
                      },
                      "value": "[resourceGroup().name]"
                    }
                  }
                }
              },
              "dependsOn": [
                "slot"
              ]
            },
            "slot_config": {
              "copy": {
                "name": "slot_config",
                "count": "[length(coalesce(parameters('configs'), createArray()))]"
              },
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('{0}-Slot-Config-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "appName": {
                    "value": "[parameters('appName')]"
                  },
                  "name": {
                    "value": "[coalesce(parameters('configs'), createArray())[copyIndex()].name]"
                  },
                  "slotName": {
                    "value": "[parameters('name')]"
                  },
                  "applicationInsightResourceId": {
                    "value": "[tryGet(coalesce(parameters('configs'), createArray())[copyIndex()], 'applicationInsightResourceId')]"
                  },
                  "properties": {
                    "value": "[tryGet(coalesce(parameters('configs'), createArray())[copyIndex()], 'properties')]"
                  },
                  "currentAppSettings": "[if(coalesce(tryGet(coalesce(parameters('configs'), createArray())[copyIndex()], 'retainCurrentAppSettings'), and(true(), equals(coalesce(parameters('configs'), createArray())[copyIndex()].name, 'appsettings'))), createObject('value', list(format('{0}/config/appsettings', resourceId('Microsoft.Web/sites/slots', parameters('appName'), parameters('name'))), '2023-12-01').properties), createObject('value', createObject()))]",
                  "storageAccountResourceId": {
                    "value": "[tryGet(coalesce(parameters('configs'), createArray())[copyIndex()], 'storageAccountResourceId')]"
                  },
                  "storageAccountUseIdentityAuthentication": {
                    "value": "[tryGet(coalesce(parameters('configs'), createArray())[copyIndex()], 'storageAccountUseIdentityAuthentication')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "languageVersion": "2.0",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.35.1.17967",
                      "templateHash": "11175158984109206374"
                    },
                    "name": "Site App Settings",
                    "description": "This module deploys a Site App Setting."
                  },
                  "parameters": {
                    "appName": {
                      "type": "string",
                      "metadata": {
                        "description": "Conditional. The name of the parent site resource. Required if the template is used in a standalone deployment."
                      }
                    },
                    "slotName": {
                      "type": "string",
                      "metadata": {
                        "description": "Conditional. The name of the parent web site slot. Required if the template is used in a standalone deployment."
                      }
                    },
                    "name": {
                      "type": "string",
                      "allowedValues": [
                        "appsettings",
                        "authsettings",
                        "authsettingsV2",
                        "azurestorageaccounts",
                        "backup",
                        "connectionstrings",
                        "logs",
                        "metadata",
                        "pushsettings",
                        "web"
                      ],
                      "metadata": {
                        "description": "Required. The name of the config."
                      }
                    },
                    "properties": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. The properties of the config. Note: This parameter is highly dependent on the config type, defined by its name."
                      }
                    },
                    "currentAppSettings": {
                      "type": "object",
                      "properties": {},
                      "additionalProperties": {
                        "type": "string",
                        "metadata": {
                          "description": "Required. The key-values pairs of the current app settings."
                        }
                      },
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. The current app settings."
                      }
                    },
                    "storageAccountUseIdentityAuthentication": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "Optional. If the provided storage account requires Identity based authentication ('allowSharedKeyAccess' is set to false). When set to true, the minimum role assignment required for the App Service Managed Identity to the storage account is 'Storage Blob Data Owner'."
                      }
                    },
                    "storageAccountResourceId": {
                      "type": "string",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Required if app of kind functionapp. Resource ID of the storage account to manage triggers and logging function executions."
                      }
                    },
                    "applicationInsightResourceId": {
                      "type": "string",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Resource ID of the application insight to leverage for this resource."
                      }
                    }
                  },
                  "resources": {
                    "app::slot": {
                      "existing": true,
                      "type": "Microsoft.Web/sites/slots",
                      "apiVersion": "2023-12-01",
                      "name": "[format('{0}/{1}', parameters('appName'), parameters('slotName'))]"
                    },
                    "applicationInsights": {
                      "condition": "[not(empty(parameters('applicationInsightResourceId')))]",
                      "existing": true,
                      "type": "Microsoft.Insights/components",
                      "apiVersion": "2020-02-02",
                      "subscriptionId": "[split(parameters('applicationInsightResourceId'), '/')[2]]",
                      "resourceGroup": "[split(parameters('applicationInsightResourceId'), '/')[4]]",
                      "name": "[last(split(parameters('applicationInsightResourceId'), '/'))]"
                    },
                    "storageAccount": {
                      "condition": "[not(empty(parameters('storageAccountResourceId')))]",
                      "existing": true,
                      "type": "Microsoft.Storage/storageAccounts",
                      "apiVersion": "2023-05-01",
                      "subscriptionId": "[split(parameters('storageAccountResourceId'), '/')[2]]",
                      "resourceGroup": "[split(parameters('storageAccountResourceId'), '/')[4]]",
                      "name": "[last(split(parameters('storageAccountResourceId'), '/'))]"
                    },
                    "app": {
                      "existing": true,
                      "type": "Microsoft.Web/sites",
                      "apiVersion": "2023-12-01",
                      "name": "[parameters('appName')]"
                    },
                    "config": {
                      "type": "Microsoft.Web/sites/slots/config",
                      "apiVersion": "2024-04-01",
                      "name": "[format('{0}/{1}/{2}', parameters('appName'), parameters('slotName'), parameters('name'))]",
                      "properties": "[union(parameters('currentAppSettings'), parameters('properties'), if(and(not(empty(parameters('storageAccountResourceId'))), not(parameters('storageAccountUseIdentityAuthentication'))), createObject('AzureWebJobsStorage', format('DefaultEndpointsProtocol=https;AccountName={0};AccountKey={1};EndpointSuffix={2}', last(split(parameters('storageAccountResourceId'), '/')), listKeys('storageAccount', '2023-05-01').keys[0].value, environment().suffixes.storage)), if(and(not(empty(parameters('storageAccountResourceId'))), parameters('storageAccountUseIdentityAuthentication')), createObject('AzureWebJobsStorage__accountName', last(split(parameters('storageAccountResourceId'), '/')), 'AzureWebJobsStorage__blobServiceUri', reference('storageAccount').primaryEndpoints.blob, 'AzureWebJobsStorage__queueServiceUri', reference('storageAccount').primaryEndpoints.queue, 'AzureWebJobsStorage__tableServiceUri', reference('storageAccount').primaryEndpoints.table), createObject())), if(not(empty(parameters('applicationInsightResourceId'))), createObject('APPLICATIONINSIGHTS_CONNECTION_STRING', reference('applicationInsights').ConnectionString), createObject()))]",
                      "dependsOn": [
                        "applicationInsights",
                        "storageAccount"
                      ]
                    }
                  },
                  "outputs": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the site config."
                      },
                      "value": "[parameters('name')]"
                    },
                    "resourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the site config."
                      },
                      "value": "[resourceId('Microsoft.Web/sites/slots/config', parameters('appName'), parameters('slotName'), parameters('name'))]"
                    },
                    "resourceGroupName": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource group the site config was deployed into."
                      },
                      "value": "[resourceGroup().name]"
                    }
                  }
                }
              },
              "dependsOn": [
                "slot"
              ]
            },
            "app_extensions": {
              "copy": {
                "name": "app_extensions",
                "count": "[length(coalesce(parameters('extensions'), createArray()))]"
              },
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('{0}-Slot-Extension={1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "appName": {
                    "value": "[parameters('appName')]"
                  },
                  "slotName": {
                    "value": "[parameters('name')]"
                  },
                  "name": {
                    "value": "[tryGet(coalesce(parameters('extensions'), createArray())[copyIndex()], 'name')]"
                  },
                  "kind": {
                    "value": "[tryGet(coalesce(parameters('extensions'), createArray())[copyIndex()], 'kind')]"
                  },
                  "properties": {
                    "value": "[coalesce(parameters('extensions'), createArray())[copyIndex()].properties]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "languageVersion": "2.0",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.35.1.17967",
                      "templateHash": "9136609319642165290"
                    },
                    "name": "Site Deployment Extension ",
                    "description": "This module deploys a Site extension for MSDeploy."
                  },
                  "parameters": {
                    "appName": {
                      "type": "string",
                      "metadata": {
                        "description": "Conditional. The name of the parent site resource. Required if the template is used in a standalone deployment."
                      }
                    },
                    "slotName": {
                      "type": "string",
                      "metadata": {
                        "description": "Conditional. The name of the parent web site slot. Required if the template is used in a standalone deployment."
                      }
                    },
                    "name": {
                      "type": "string",
                      "defaultValue": "MSDeploy",
                      "allowedValues": [
                        "MSDeploy"
                      ],
                      "metadata": {
                        "description": "Optional. The name of the extension."
                      }
                    },
                    "kind": {
                      "type": "string",
                      "defaultValue": "MSDeploy",
                      "allowedValues": [
                        "MSDeploy"
                      ],
                      "metadata": {
                        "description": "Optional. The kind of extension."
                      }
                    },
                    "properties": {
                      "type": "object",
                      "metadata": {
                        "__bicep_resource_derived_type!": {
                          "source": "Microsoft.Web/sites/extensions@2024-04-01#properties/properties"
                        },
                        "description": "Optional. Sets the properties."
                      },
                      "nullable": true
                    }
                  },
                  "resources": {
                    "app::slot": {
                      "existing": true,
                      "type": "Microsoft.Web/sites/slots",
                      "apiVersion": "2024-04-01",
                      "name": "[format('{0}/{1}', parameters('appName'), parameters('slotName'))]"
                    },
                    "app": {
                      "existing": true,
                      "type": "Microsoft.Web/sites",
                      "apiVersion": "2024-04-01",
                      "name": "[parameters('appName')]"
                    },
                    "msdeploy": {
                      "type": "Microsoft.Web/sites/slots/extensions",
                      "apiVersion": "2024-04-01",
                      "name": "[format('{0}/{1}/{2}', parameters('appName'), parameters('slotName'), parameters('name'))]",
                      "kind": "[parameters('kind')]",
                      "properties": "[parameters('properties')]"
                    }
                  },
                  "outputs": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the extension."
                      },
                      "value": "[parameters('name')]"
                    },
                    "resourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the extension."
                      },
                      "value": "[resourceId('Microsoft.Web/sites/slots/extensions', parameters('appName'), parameters('slotName'), parameters('name'))]"
                    },
                    "resourceGroupName": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource group the extensino was deployed into."
                      },
                      "value": "[resourceGroup().name]"
                    }
                  }
                }
              },
              "dependsOn": [
                "slot"
              ]
            },
            "slot_privateEndpoints": {
              "copy": {
                "name": "slot_privateEndpoints",
                "count": "[length(coalesce(parameters('privateEndpoints'), createArray()))]"
              },
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('{0}-slot-PrivateEndpoint-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
              "subscriptionId": "[split(coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'resourceGroupResourceId'), resourceGroup().id), '/')[2]]",
              "resourceGroup": "[split(coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'resourceGroupResourceId'), resourceGroup().id), '/')[4]]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "name": {
                    "value": "[coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'name'), format('pep-{0}-{1}-{2}', last(split(resourceId('Microsoft.Web/sites', parameters('appName')), '/')), coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'service'), format('sites-{0}', parameters('name'))), copyIndex()))]"
                  },
                  "privateLinkServiceConnections": "[if(not(equals(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'isManualConnection'), true())), createObject('value', createArray(createObject('name', coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'privateLinkServiceConnectionName'), format('{0}-{1}-{2}', last(split(resourceId('Microsoft.Web/sites', parameters('appName')), '/')), coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'service'), format('sites-{0}', parameters('name'))), copyIndex())), 'properties', createObject('privateLinkServiceId', resourceId('Microsoft.Web/sites', parameters('appName')), 'groupIds', createArray(coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'service'), format('sites-{0}', parameters('name')))))))), createObject('value', null()))]",
                  "manualPrivateLinkServiceConnections": "[if(equals(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'isManualConnection'), true()), createObject('value', createArray(createObject('name', coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'privateLinkServiceConnectionName'), format('{0}-{1}-{2}', last(split(resourceId('Microsoft.Web/sites', parameters('appName')), '/')), coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'service'), format('sites-{0}', parameters('name'))), copyIndex())), 'properties', createObject('privateLinkServiceId', resourceId('Microsoft.Web/sites', parameters('appName')), 'groupIds', createArray(coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'service'), format('sites-{0}', parameters('name')))), 'requestMessage', coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'manualConnectionRequestMessage'), 'Manual approval required.'))))), createObject('value', null()))]",
                  "subnetResourceId": {
                    "value": "[coalesce(parameters('privateEndpoints'), createArray())[copyIndex()].subnetResourceId]"
                  },
                  "enableTelemetry": {
                    "value": "[variables('enableReferencedModulesTelemetry')]"
                  },
                  "location": {
                    "value": "[coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'location'), reference(split(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()].subnetResourceId, '/subnets/')[0], '2020-06-01', 'Full').location)]"
                  },
                  "lock": {
                    "value": "[coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'lock'), parameters('lock'))]"
                  },
                  "privateDnsZoneGroup": {
                    "value": "[tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'privateDnsZoneGroup')]"
                  },
                  "roleAssignments": {
                    "value": "[tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'roleAssignments')]"
                  },
                  "tags": {
                    "value": "[coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'tags'), parameters('tags'))]"
                  },
                  "customDnsConfigs": {
                    "value": "[tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'customDnsConfigs')]"
                  },
                  "ipConfigurations": {
                    "value": "[tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'ipConfigurations')]"
                  },
                  "applicationSecurityGroupResourceIds": {
                    "value": "[tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'applicationSecurityGroupResourceIds')]"
                  },
                  "customNetworkInterfaceName": {
                    "value": "[tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'customNetworkInterfaceName')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "languageVersion": "2.0",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.34.44.8038",
                      "templateHash": "12389807800450456797"
                    },
                    "name": "Private Endpoints",
                    "description": "This module deploys a Private Endpoint."
                  },
                  "definitions": {
                    "privateDnsZoneGroupType": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The name of the Private DNS Zone Group."
                          }
                        },
                        "privateDnsZoneGroupConfigs": {
                          "type": "array",
                          "items": {
                            "$ref": "#/definitions/privateDnsZoneGroupConfigType"
                          },
                          "metadata": {
                            "description": "Required. The private DNS zone groups to associate the private endpoint. A DNS zone group can support up to 5 DNS zones."
                          }
                        }
                      },
                      "metadata": {
                        "__bicep_export!": true
                      }
                    },
                    "ipConfigurationType": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. The name of the resource that is unique within a resource group."
                          }
                        },
                        "properties": {
                          "type": "object",
                          "properties": {
                            "groupId": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The ID of a group obtained from the remote resource that this private endpoint should connect to. If used with private link service connection, this property must be defined as empty string."
                              }
                            },
                            "memberName": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The member name of a group obtained from the remote resource that this private endpoint should connect to. If used with private link service connection, this property must be defined as empty string."
                              }
                            },
                            "privateIPAddress": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. A private IP address obtained from the private endpoint's subnet."
                              }
                            }
                          },
                          "metadata": {
                            "description": "Required. Properties of private endpoint IP configurations."
                          }
                        }
                      },
                      "metadata": {
                        "__bicep_export!": true
                      }
                    },
                    "privateLinkServiceConnectionType": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. The name of the private link service connection."
                          }
                        },
                        "properties": {
                          "type": "object",
                          "properties": {
                            "groupIds": {
                              "type": "array",
                              "items": {
                                "type": "string"
                              },
                              "metadata": {
                                "description": "Required. The ID of a group obtained from the remote resource that this private endpoint should connect to. If used with private link service connection, this property must be defined as empty string array `[]`."
                              }
                            },
                            "privateLinkServiceId": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The resource id of private link service."
                              }
                            },
                            "requestMessage": {
                              "type": "string",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. A message passed to the owner of the remote resource with this connection request. Restricted to 140 chars."
                              }
                            }
                          },
                          "metadata": {
                            "description": "Required. Properties of private link service connection."
                          }
                        }
                      },
                      "metadata": {
                        "__bicep_export!": true
                      }
                    },
                    "customDnsConfigType": {
                      "type": "object",
                      "properties": {
                        "fqdn": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. FQDN that resolves to private endpoint IP address."
                          }
                        },
                        "ipAddresses": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "metadata": {
                            "description": "Required. A list of private IP addresses of the private endpoint."
                          }
                        }
                      },
                      "metadata": {
                        "__bicep_export!": true
                      }
                    },
                    "lockType": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Specify the name of lock."
                          }
                        },
                        "kind": {
                          "type": "string",
                          "allowedValues": [
                            "CanNotDelete",
                            "None",
                            "ReadOnly"
                          ],
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Specify the type of lock."
                          }
                        }
                      },
                      "metadata": {
                        "description": "An AVM-aligned type for a lock.",
                        "__bicep_imported_from!": {
                          "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.5.1"
                        }
                      }
                    },
                    "privateDnsZoneGroupConfigType": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The name of the private DNS zone group config."
                          }
                        },
                        "privateDnsZoneResourceId": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. The resource id of the private DNS zone."
                          }
                        }
                      },
                      "metadata": {
                        "__bicep_imported_from!": {
                          "sourceTemplate": "private-dns-zone-group/main.bicep"
                        }
                      }
                    },
                    "roleAssignmentType": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The name (as GUID) of the role assignment. If not provided, a GUID will be generated."
                          }
                        },
                        "roleDefinitionIdOrName": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                          }
                        },
                        "principalId": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                          }
                        },
                        "principalType": {
                          "type": "string",
                          "allowedValues": [
                            "Device",
                            "ForeignGroup",
                            "Group",
                            "ServicePrincipal",
                            "User"
                          ],
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The principal type of the assigned principal ID."
                          }
                        },
                        "description": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The description of the role assignment."
                          }
                        },
                        "condition": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                          }
                        },
                        "conditionVersion": {
                          "type": "string",
                          "allowedValues": [
                            "2.0"
                          ],
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Version of the condition."
                          }
                        },
                        "delegatedManagedIdentityResourceId": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The Resource Id of the delegated managed identity resource."
                          }
                        }
                      },
                      "metadata": {
                        "description": "An AVM-aligned type for a role assignment.",
                        "__bicep_imported_from!": {
                          "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.5.1"
                        }
                      }
                    }
                  },
                  "parameters": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Name of the private endpoint resource to create."
                      }
                    },
                    "subnetResourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Resource ID of the subnet where the endpoint needs to be created."
                      }
                    },
                    "applicationSecurityGroupResourceIds": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Application security groups in which the private endpoint IP configuration is included."
                      }
                    },
                    "customNetworkInterfaceName": {
                      "type": "string",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The custom name of the network interface attached to the private endpoint."
                      }
                    },
                    "ipConfigurations": {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/ipConfigurationType"
                      },
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. A list of IP configurations of the private endpoint. This will be used to map to the First Party Service endpoints."
                      }
                    },
                    "privateDnsZoneGroup": {
                      "$ref": "#/definitions/privateDnsZoneGroupType",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The private DNS zone group to configure for the private endpoint."
                      }
                    },
                    "location": {
                      "type": "string",
                      "defaultValue": "[resourceGroup().location]",
                      "metadata": {
                        "description": "Optional. Location for all Resources."
                      }
                    },
                    "lock": {
                      "$ref": "#/definitions/lockType",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The lock settings of the service."
                      }
                    },
                    "roleAssignments": {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/roleAssignmentType"
                      },
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Array of role assignments to create."
                      }
                    },
                    "tags": {
                      "type": "object",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Tags to be applied on all resources/resource groups in this deployment."
                      }
                    },
                    "customDnsConfigs": {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/customDnsConfigType"
                      },
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Custom DNS configurations."
                      }
                    },
                    "manualPrivateLinkServiceConnections": {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/privateLinkServiceConnectionType"
                      },
                      "nullable": true,
                      "metadata": {
                        "description": "Conditional. A grouping of information about the connection to the remote resource. Used when the network admin does not have access to approve connections to the remote resource. Required if `privateLinkServiceConnections` is empty."
                      }
                    },
                    "privateLinkServiceConnections": {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/privateLinkServiceConnectionType"
                      },
                      "nullable": true,
                      "metadata": {
                        "description": "Conditional. A grouping of information about the connection to the remote resource. Required if `manualPrivateLinkServiceConnections` is empty."
                      }
                    },
                    "enableTelemetry": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "Optional. Enable/Disable usage telemetry for module."
                      }
                    }
                  },
                  "variables": {
                    "copy": [
                      {
                        "name": "formattedRoleAssignments",
                        "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]",
                        "input": "[union(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')], createObject('roleDefinitionId', coalesce(tryGet(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName), if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName)))))]"
                      }
                    ],
                    "builtInRoleNames": {
                      "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                      "DNS Resolver Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '0f2ebee7-ffd4-4fc0-b3b7-664099fdad5d')]",
                      "DNS Zone Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'befefa01-2a29-4197-83a8-272ff33ce314')]",
                      "Domain Services Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'eeaeda52-9324-47f6-8069-5d5bade478b2')]",
                      "Domain Services Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '361898ef-9ed1-48c2-849c-a832951106bb')]",
                      "Network Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4d97b98b-1d4f-4787-a291-c67834d212e7')]",
                      "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                      "Private DNS Zone Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b12aa53e-6015-4669-85d0-8515ebb3ae7f')]",
                      "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                      "Role Based Access Control Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]"
                    }
                  },
                  "resources": {
                    "avmTelemetry": {
                      "condition": "[parameters('enableTelemetry')]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2024-03-01",
                      "name": "[format('46d3xbcp.res.network-privateendpoint.{0}.{1}', replace('0.11.0', '.', '-'), substring(uniqueString(deployment().name, parameters('location')), 0, 4))]",
                      "properties": {
                        "mode": "Incremental",
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "resources": [],
                          "outputs": {
                            "telemetry": {
                              "type": "String",
                              "value": "For more information, see https://aka.ms/avm/TelemetryInfo"
                            }
                          }
                        }
                      }
                    },
                    "privateEndpoint": {
                      "type": "Microsoft.Network/privateEndpoints",
                      "apiVersion": "2024-05-01",
                      "name": "[parameters('name')]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]",
                      "properties": {
                        "copy": [
                          {
                            "name": "applicationSecurityGroups",
                            "count": "[length(coalesce(parameters('applicationSecurityGroupResourceIds'), createArray()))]",
                            "input": {
                              "id": "[coalesce(parameters('applicationSecurityGroupResourceIds'), createArray())[copyIndex('applicationSecurityGroups')]]"
                            }
                          }
                        ],
                        "customDnsConfigs": "[coalesce(parameters('customDnsConfigs'), createArray())]",
                        "customNetworkInterfaceName": "[coalesce(parameters('customNetworkInterfaceName'), '')]",
                        "ipConfigurations": "[coalesce(parameters('ipConfigurations'), createArray())]",
                        "manualPrivateLinkServiceConnections": "[coalesce(parameters('manualPrivateLinkServiceConnections'), createArray())]",
                        "privateLinkServiceConnections": "[coalesce(parameters('privateLinkServiceConnections'), createArray())]",
                        "subnet": {
                          "id": "[parameters('subnetResourceId')]"
                        }
                      }
                    },
                    "privateEndpoint_lock": {
                      "condition": "[and(not(empty(coalesce(parameters('lock'), createObject()))), not(equals(tryGet(parameters('lock'), 'kind'), 'None')))]",
                      "type": "Microsoft.Authorization/locks",
                      "apiVersion": "2020-05-01",
                      "scope": "[format('Microsoft.Network/privateEndpoints/{0}', parameters('name'))]",
                      "name": "[coalesce(tryGet(parameters('lock'), 'name'), format('lock-{0}', parameters('name')))]",
                      "properties": {
                        "level": "[coalesce(tryGet(parameters('lock'), 'kind'), '')]",
                        "notes": "[if(equals(tryGet(parameters('lock'), 'kind'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot delete or modify the resource or child resources.')]"
                      },
                      "dependsOn": [
                        "privateEndpoint"
                      ]
                    },
                    "privateEndpoint_roleAssignments": {
                      "copy": {
                        "name": "privateEndpoint_roleAssignments",
                        "count": "[length(coalesce(variables('formattedRoleAssignments'), createArray()))]"
                      },
                      "type": "Microsoft.Authorization/roleAssignments",
                      "apiVersion": "2022-04-01",
                      "scope": "[format('Microsoft.Network/privateEndpoints/{0}', parameters('name'))]",
                      "name": "[coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'name'), guid(resourceId('Microsoft.Network/privateEndpoints', parameters('name')), coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId, coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId))]",
                      "properties": {
                        "roleDefinitionId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId]",
                        "principalId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId]",
                        "description": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'description')]",
                        "principalType": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'principalType')]",
                        "condition": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition')]",
                        "conditionVersion": "[if(not(empty(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                        "delegatedManagedIdentityResourceId": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
                      },
                      "dependsOn": [
                        "privateEndpoint"
                      ]
                    },
                    "privateEndpoint_privateDnsZoneGroup": {
                      "condition": "[not(empty(parameters('privateDnsZoneGroup')))]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('{0}-PrivateEndpoint-PrivateDnsZoneGroup', uniqueString(deployment().name))]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "name": {
                            "value": "[tryGet(parameters('privateDnsZoneGroup'), 'name')]"
                          },
                          "privateEndpointName": {
                            "value": "[parameters('name')]"
                          },
                          "privateDnsZoneConfigs": {
                            "value": "[parameters('privateDnsZoneGroup').privateDnsZoneGroupConfigs]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "languageVersion": "2.0",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.34.44.8038",
                              "templateHash": "13997305779829540948"
                            },
                            "name": "Private Endpoint Private DNS Zone Groups",
                            "description": "This module deploys a Private Endpoint Private DNS Zone Group."
                          },
                          "definitions": {
                            "privateDnsZoneGroupConfigType": {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The name of the private DNS zone group config."
                                  }
                                },
                                "privateDnsZoneResourceId": {
                                  "type": "string",
                                  "metadata": {
                                    "description": "Required. The resource id of the private DNS zone."
                                  }
                                }
                              },
                              "metadata": {
                                "__bicep_export!": true
                              }
                            }
                          },
                          "parameters": {
                            "privateEndpointName": {
                              "type": "string",
                              "metadata": {
                                "description": "Conditional. The name of the parent private endpoint. Required if the template is used in a standalone deployment."
                              }
                            },
                            "privateDnsZoneConfigs": {
                              "type": "array",
                              "items": {
                                "$ref": "#/definitions/privateDnsZoneGroupConfigType"
                              },
                              "minLength": 1,
                              "maxLength": 5,
                              "metadata": {
                                "description": "Required. Array of private DNS zone configurations of the private DNS zone group. A DNS zone group can support up to 5 DNS zones."
                              }
                            },
                            "name": {
                              "type": "string",
                              "defaultValue": "default",
                              "metadata": {
                                "description": "Optional. The name of the private DNS zone group."
                              }
                            }
                          },
                          "variables": {
                            "copy": [
                              {
                                "name": "privateDnsZoneConfigsVar",
                                "count": "[length(parameters('privateDnsZoneConfigs'))]",
                                "input": {
                                  "name": "[coalesce(tryGet(parameters('privateDnsZoneConfigs')[copyIndex('privateDnsZoneConfigsVar')], 'name'), last(split(parameters('privateDnsZoneConfigs')[copyIndex('privateDnsZoneConfigsVar')].privateDnsZoneResourceId, '/')))]",
                                  "properties": {
                                    "privateDnsZoneId": "[parameters('privateDnsZoneConfigs')[copyIndex('privateDnsZoneConfigsVar')].privateDnsZoneResourceId]"
                                  }
                                }
                              }
                            ]
                          },
                          "resources": {
                            "privateEndpoint": {
                              "existing": true,
                              "type": "Microsoft.Network/privateEndpoints",
                              "apiVersion": "2024-05-01",
                              "name": "[parameters('privateEndpointName')]"
                            },
                            "privateDnsZoneGroup": {
                              "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
                              "apiVersion": "2024-05-01",
                              "name": "[format('{0}/{1}', parameters('privateEndpointName'), parameters('name'))]",
                              "properties": {
                                "privateDnsZoneConfigs": "[variables('privateDnsZoneConfigsVar')]"
                              }
                            }
                          },
                          "outputs": {
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "The name of the private endpoint DNS zone group."
                              },
                              "value": "[parameters('name')]"
                            },
                            "resourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource ID of the private endpoint DNS zone group."
                              },
                              "value": "[resourceId('Microsoft.Network/privateEndpoints/privateDnsZoneGroups', parameters('privateEndpointName'), parameters('name'))]"
                            },
                            "resourceGroupName": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource group the private endpoint DNS zone group was deployed into."
                              },
                              "value": "[resourceGroup().name]"
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "privateEndpoint"
                      ]
                    }
                  },
                  "outputs": {
                    "resourceGroupName": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource group the private endpoint was deployed into."
                      },
                      "value": "[resourceGroup().name]"
                    },
                    "resourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the private endpoint."
                      },
                      "value": "[resourceId('Microsoft.Network/privateEndpoints', parameters('name'))]"
                    },
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the private endpoint."
                      },
                      "value": "[parameters('name')]"
                    },
                    "location": {
                      "type": "string",
                      "metadata": {
                        "description": "The location the resource was deployed into."
                      },
                      "value": "[reference('privateEndpoint', '2024-05-01', 'full').location]"
                    },
                    "customDnsConfigs": {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/customDnsConfigType"
                      },
                      "metadata": {
                        "description": "The custom DNS configurations of the private endpoint."
                      },
                      "value": "[reference('privateEndpoint').customDnsConfigs]"
                    },
                    "networkInterfaceResourceIds": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "metadata": {
                        "description": "The resource IDs of the network interfaces associated with the private endpoint."
                      },
                      "value": "[map(reference('privateEndpoint').networkInterfaces, lambda('nic', lambdaVariables('nic').id))]"
                    },
                    "groupId": {
                      "type": "string",
                      "nullable": true,
                      "metadata": {
                        "description": "The group Id for the private endpoint Group."
                      },
                      "value": "[coalesce(tryGet(tryGet(tryGet(tryGet(reference('privateEndpoint'), 'manualPrivateLinkServiceConnections'), 0, 'properties'), 'groupIds'), 0), tryGet(tryGet(tryGet(tryGet(reference('privateEndpoint'), 'privateLinkServiceConnections'), 0, 'properties'), 'groupIds'), 0))]"
                    }
                  }
                }
              },
              "dependsOn": [
                "slot"
              ]
            }
          },
          "outputs": {
            "name": {
              "type": "string",
              "metadata": {
                "description": "The name of the slot."
              },
              "value": "[parameters('name')]"
            },
            "resourceId": {
              "type": "string",
              "metadata": {
                "description": "The resource ID of the slot."
              },
              "value": "[resourceId('Microsoft.Web/sites/slots', parameters('appName'), parameters('name'))]"
            },
            "resourceGroupName": {
              "type": "string",
              "metadata": {
                "description": "The resource group the slot was deployed into."
              },
              "value": "[resourceGroup().name]"
            },
            "systemAssignedMIPrincipalId": {
              "type": "string",
              "nullable": true,
              "metadata": {
                "description": "The principal ID of the system assigned identity."
              },
              "value": "[tryGet(tryGet(reference('slot', '2024-04-01', 'full'), 'identity'), 'principalId')]"
            },
            "location": {
              "type": "string",
              "metadata": {
                "description": "The location the resource was deployed into."
              },
              "value": "[reference('slot', '2024-04-01', 'full').location]"
            },
            "privateEndpoints": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/privateEndpointOutputType"
              },
              "metadata": {
                "description": "The private endpoints of the slot."
              },
              "copy": {
                "count": "[length(coalesce(parameters('privateEndpoints'), createArray()))]",
                "input": {
                  "name": "[reference(format('slot_privateEndpoints[{0}]', copyIndex())).outputs.name.value]",
                  "resourceId": "[reference(format('slot_privateEndpoints[{0}]', copyIndex())).outputs.resourceId.value]",
                  "groupId": "[tryGet(tryGet(reference(format('slot_privateEndpoints[{0}]', copyIndex())).outputs, 'groupId'), 'value')]",
                  "customDnsConfigs": "[reference(format('slot_privateEndpoints[{0}]', copyIndex())).outputs.customDnsConfigs.value]",
                  "networkInterfaceResourceIds": "[reference(format('slot_privateEndpoints[{0}]', copyIndex())).outputs.networkInterfaceResourceIds.value]"
                }
              }
            }
          }
        }
      },
      "dependsOn": [
        "app"
      ]
    },
    "app_basicPublishingCredentialsPolicies": {
      "copy": {
        "name": "app_basicPublishingCredentialsPolicies",
        "count": "[length(coalesce(parameters('basicPublishingCredentialsPolicies'), createArray()))]"
      },
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('{0}-Site-Publish-Cred-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "webAppName": {
            "value": "[parameters('name')]"
          },
          "name": {
            "value": "[coalesce(parameters('basicPublishingCredentialsPolicies'), createArray())[copyIndex()].name]"
          },
          "allow": {
            "value": "[tryGet(coalesce(parameters('basicPublishingCredentialsPolicies'), createArray())[copyIndex()], 'allow')]"
          },
          "location": {
            "value": "[parameters('location')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.35.1.17967",
              "templateHash": "10313196038109736205"
            },
            "name": "Web Site Basic Publishing Credentials Policies",
            "description": "This module deploys a Web Site Basic Publishing Credentials Policy."
          },
          "parameters": {
            "name": {
              "type": "string",
              "allowedValues": [
                "scm",
                "ftp"
              ],
              "metadata": {
                "description": "Required. The name of the resource."
              }
            },
            "allow": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Optional. Set to true to enable or false to disable a publishing method."
              }
            },
            "webAppName": {
              "type": "string",
              "metadata": {
                "description": "Conditional. The name of the parent web site. Required if the template is used in a standalone deployment."
              }
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]",
              "metadata": {
                "description": "Optional. Location for all Resources."
              }
            }
          },
          "resources": [
            {
              "type": "Microsoft.Web/sites/basicPublishingCredentialsPolicies",
              "apiVersion": "2024-04-01",
              "name": "[format('{0}/{1}', parameters('webAppName'), parameters('name'))]",
              "location": "[parameters('location')]",
              "properties": {
                "allow": "[parameters('allow')]"
              }
            }
          ],
          "outputs": {
            "name": {
              "type": "string",
              "metadata": {
                "description": "The name of the basic publishing credential policy."
              },
              "value": "[parameters('name')]"
            },
            "resourceId": {
              "type": "string",
              "metadata": {
                "description": "The resource ID of the basic publishing credential policy."
              },
              "value": "[resourceId('Microsoft.Web/sites/basicPublishingCredentialsPolicies', parameters('webAppName'), parameters('name'))]"
            },
            "resourceGroupName": {
              "type": "string",
              "metadata": {
                "description": "The name of the resource group the basic publishing credential policy was deployed into."
              },
              "value": "[resourceGroup().name]"
            },
            "location": {
              "type": "string",
              "metadata": {
                "description": "The location the resource was deployed into."
              },
              "value": "[reference(resourceId('Microsoft.Web/sites/basicPublishingCredentialsPolicies', parameters('webAppName'), parameters('name')), '2024-04-01', 'full').location]"
            }
          }
        }
      },
      "dependsOn": [
        "app"
      ]
    },
    "app_hybridConnectionRelays": {
      "copy": {
        "name": "app_hybridConnectionRelays",
        "count": "[length(coalesce(parameters('hybridConnectionRelays'), createArray()))]"
      },
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('{0}-HybridConnectionRelay-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "hybridConnectionResourceId": {
            "value": "[coalesce(parameters('hybridConnectionRelays'), createArray())[copyIndex()].hybridConnectionResourceId]"
          },
          "appName": {
            "value": "[parameters('name')]"
          },
          "sendKeyName": {
            "value": "[tryGet(coalesce(parameters('hybridConnectionRelays'), createArray())[copyIndex()], 'sendKeyName')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.35.1.17967",
              "templateHash": "6277359123293522961"
            },
            "name": "Web/Function Apps Hybrid Connection Relay",
            "description": "This module deploys a Site Hybrid Connection Namespace Relay."
          },
          "parameters": {
            "hybridConnectionResourceId": {
              "type": "string",
              "metadata": {
                "description": "Required. The resource ID of the relay namespace hybrid connection."
              }
            },
            "appName": {
              "type": "string",
              "metadata": {
                "description": "Conditional. The name of the parent web site. Required if the template is used in a standalone deployment."
              }
            },
            "sendKeyName": {
              "type": "string",
              "defaultValue": "defaultSender",
              "metadata": {
                "description": "Optional. Name of the authorization rule send key to use."
              }
            }
          },
          "resources": [
            {
              "type": "Microsoft.Web/sites/hybridConnectionNamespaces/relays",
              "apiVersion": "2024-04-01",
              "name": "[format('{0}/{1}/{2}', parameters('appName'), split(parameters('hybridConnectionResourceId'), '/')[8], split(parameters('hybridConnectionResourceId'), '/')[10])]",
              "properties": {
                "serviceBusNamespace": "[split(parameters('hybridConnectionResourceId'), '/')[8]]",
                "serviceBusSuffix": "[split(substring(reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('hybridConnectionResourceId'), '/')[2], split(parameters('hybridConnectionResourceId'), '/')[4]), 'Microsoft.Relay/namespaces', split(parameters('hybridConnectionResourceId'), '/')[8]), '2021-11-01').serviceBusEndpoint, indexOf(reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('hybridConnectionResourceId'), '/')[2], split(parameters('hybridConnectionResourceId'), '/')[4]), 'Microsoft.Relay/namespaces', split(parameters('hybridConnectionResourceId'), '/')[8]), '2021-11-01').serviceBusEndpoint, '.servicebus')), ':')[0]]",
                "relayName": "[split(parameters('hybridConnectionResourceId'), '/')[10]]",
                "relayArmUri": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('hybridConnectionResourceId'), '/')[2], split(parameters('hybridConnectionResourceId'), '/')[4]), 'Microsoft.Relay/namespaces/hybridConnections', split(parameters('hybridConnectionResourceId'), '/')[8], split(parameters('hybridConnectionResourceId'), '/')[10])]",
                "hostname": "[split(json(reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('hybridConnectionResourceId'), '/')[2], split(parameters('hybridConnectionResourceId'), '/')[4]), 'Microsoft.Relay/namespaces/hybridConnections', split(parameters('hybridConnectionResourceId'), '/')[8], split(parameters('hybridConnectionResourceId'), '/')[10]), '2021-11-01').userMetadata)[0].value, ':')[0]]",
                "port": "[int(split(json(reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('hybridConnectionResourceId'), '/')[2], split(parameters('hybridConnectionResourceId'), '/')[4]), 'Microsoft.Relay/namespaces/hybridConnections', split(parameters('hybridConnectionResourceId'), '/')[8], split(parameters('hybridConnectionResourceId'), '/')[10]), '2021-11-01').userMetadata)[0].value, ':')[1])]",
                "sendKeyName": "[parameters('sendKeyName')]",
                "sendKeyValue": "[listKeys(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('hybridConnectionResourceId'), '/')[2], split(parameters('hybridConnectionResourceId'), '/')[4]), 'Microsoft.Relay/namespaces/hybridConnections/authorizationRules', split(parameters('hybridConnectionResourceId'), '/')[8], split(parameters('hybridConnectionResourceId'), '/')[10], parameters('sendKeyName')), '2021-11-01').primaryKey]"
              }
            }
          ],
          "outputs": {
            "name": {
              "type": "string",
              "metadata": {
                "description": "The name of the hybrid connection relay.."
              },
              "value": "[format('{0}/{1}/{2}', parameters('appName'), split(parameters('hybridConnectionResourceId'), '/')[8], split(parameters('hybridConnectionResourceId'), '/')[10])]"
            },
            "resourceId": {
              "type": "string",
              "metadata": {
                "description": "The resource ID of the hybrid connection relay."
              },
              "value": "[resourceId('Microsoft.Web/sites/hybridConnectionNamespaces/relays', split(format('{0}/{1}/{2}', parameters('appName'), split(parameters('hybridConnectionResourceId'), '/')[8], split(parameters('hybridConnectionResourceId'), '/')[10]), '/')[0], split(format('{0}/{1}/{2}', parameters('appName'), split(parameters('hybridConnectionResourceId'), '/')[8], split(parameters('hybridConnectionResourceId'), '/')[10]), '/')[1], split(format('{0}/{1}/{2}', parameters('appName'), split(parameters('hybridConnectionResourceId'), '/')[8], split(parameters('hybridConnectionResourceId'), '/')[10]), '/')[2])]"
            },
            "resourceGroupName": {
              "type": "string",
              "metadata": {
                "description": "The name of the resource group the resource was deployed into."
              },
              "value": "[resourceGroup().name]"
            }
          }
        }
      },
      "dependsOn": [
        "app"
      ]
    },
    "app_privateEndpoints": {
      "copy": {
        "name": "app_privateEndpoints",
        "count": "[length(coalesce(parameters('privateEndpoints'), createArray()))]"
      },
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('{0}-app-PrivateEndpoint-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
      "subscriptionId": "[split(coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'resourceGroupResourceId'), resourceGroup().id), '/')[2]]",
      "resourceGroup": "[split(coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'resourceGroupResourceId'), resourceGroup().id), '/')[4]]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "name": {
            "value": "[coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'name'), format('pep-{0}-{1}-{2}', last(split(resourceId('Microsoft.Web/sites', parameters('name')), '/')), coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'service'), 'sites'), copyIndex()))]"
          },
          "privateLinkServiceConnections": "[if(not(equals(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'isManualConnection'), true())), createObject('value', createArray(createObject('name', coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'privateLinkServiceConnectionName'), format('{0}-{1}-{2}', last(split(resourceId('Microsoft.Web/sites', parameters('name')), '/')), coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'service'), 'sites'), copyIndex())), 'properties', createObject('privateLinkServiceId', resourceId('Microsoft.Web/sites', parameters('name')), 'groupIds', createArray(coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'service'), 'sites')))))), createObject('value', null()))]",
          "manualPrivateLinkServiceConnections": "[if(equals(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'isManualConnection'), true()), createObject('value', createArray(createObject('name', coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'privateLinkServiceConnectionName'), format('{0}-{1}-{2}', last(split(resourceId('Microsoft.Web/sites', parameters('name')), '/')), coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'service'), 'sites'), copyIndex())), 'properties', createObject('privateLinkServiceId', resourceId('Microsoft.Web/sites', parameters('name')), 'groupIds', createArray(coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'service'), 'sites')), 'requestMessage', coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'manualConnectionRequestMessage'), 'Manual approval required.'))))), createObject('value', null()))]",
          "subnetResourceId": {
            "value": "[coalesce(parameters('privateEndpoints'), createArray())[copyIndex()].subnetResourceId]"
          },
          "enableTelemetry": {
            "value": "[variables('enableReferencedModulesTelemetry')]"
          },
          "location": {
            "value": "[coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'location'), reference(split(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()].subnetResourceId, '/subnets/')[0], '2020-06-01', 'Full').location)]"
          },
          "lock": {
            "value": "[coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'lock'), parameters('lock'))]"
          },
          "privateDnsZoneGroup": {
            "value": "[tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'privateDnsZoneGroup')]"
          },
          "roleAssignments": {
            "value": "[tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'roleAssignments')]"
          },
          "tags": {
            "value": "[coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'tags'), parameters('tags'))]"
          },
          "customDnsConfigs": {
            "value": "[tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'customDnsConfigs')]"
          },
          "ipConfigurations": {
            "value": "[tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'ipConfigurations')]"
          },
          "applicationSecurityGroupResourceIds": {
            "value": "[tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'applicationSecurityGroupResourceIds')]"
          },
          "customNetworkInterfaceName": {
            "value": "[tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'customNetworkInterfaceName')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "languageVersion": "2.0",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.33.13.18514",
              "templateHash": "15954548978129725136"
            },
            "name": "Private Endpoints",
            "description": "This module deploys a Private Endpoint."
          },
          "definitions": {
            "privateDnsZoneGroupType": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The name of the Private DNS Zone Group."
                  }
                },
                "privateDnsZoneGroupConfigs": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/privateDnsZoneGroupConfigType"
                  },
                  "metadata": {
                    "description": "Required. The private DNS zone groups to associate the private endpoint. A DNS zone group can support up to 5 DNS zones."
                  }
                }
              },
              "metadata": {
                "__bicep_export!": true
              }
            },
            "ipConfigurationType": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. The name of the resource that is unique within a resource group."
                  }
                },
                "properties": {
                  "type": "object",
                  "properties": {
                    "groupId": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The ID of a group obtained from the remote resource that this private endpoint should connect to. If used with private link service connection, this property must be defined as empty string."
                      }
                    },
                    "memberName": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The member name of a group obtained from the remote resource that this private endpoint should connect to. If used with private link service connection, this property must be defined as empty string."
                      }
                    },
                    "privateIPAddress": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. A private IP address obtained from the private endpoint's subnet."
                      }
                    }
                  },
                  "metadata": {
                    "description": "Required. Properties of private endpoint IP configurations."
                  }
                }
              },
              "metadata": {
                "__bicep_export!": true
              }
            },
            "privateLinkServiceConnectionType": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. The name of the private link service connection."
                  }
                },
                "properties": {
                  "type": "object",
                  "properties": {
                    "groupIds": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "metadata": {
                        "description": "Required. The ID of a group obtained from the remote resource that this private endpoint should connect to. If used with private link service connection, this property must be defined as empty string array `[]`."
                      }
                    },
                    "privateLinkServiceId": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The resource id of private link service."
                      }
                    },
                    "requestMessage": {
                      "type": "string",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. A message passed to the owner of the remote resource with this connection request. Restricted to 140 chars."
                      }
                    }
                  },
                  "metadata": {
                    "description": "Required. Properties of private link service connection."
                  }
                }
              },
              "metadata": {
                "__bicep_export!": true
              }
            },
            "customDnsConfigType": {
              "type": "object",
              "properties": {
                "fqdn": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. FQDN that resolves to private endpoint IP address."
                  }
                },
                "ipAddresses": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "metadata": {
                    "description": "Required. A list of private IP addresses of the private endpoint."
                  }
                }
              },
              "metadata": {
                "__bicep_export!": true
              }
            },
            "lockType": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Specify the name of lock."
                  }
                },
                "kind": {
                  "type": "string",
                  "allowedValues": [
                    "CanNotDelete",
                    "None",
                    "ReadOnly"
                  ],
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Specify the type of lock."
                  }
                }
              },
              "metadata": {
                "description": "An AVM-aligned type for a lock.",
                "__bicep_imported_from!": {
                  "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.5.1"
                }
              }
            },
            "privateDnsZoneGroupConfigType": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The name of the private DNS zone group config."
                  }
                },
                "privateDnsZoneResourceId": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. The resource id of the private DNS zone."
                  }
                }
              },
              "metadata": {
                "__bicep_imported_from!": {
                  "sourceTemplate": "private-dns-zone-group/main.bicep"
                }
              }
            },
            "roleAssignmentType": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The name (as GUID) of the role assignment. If not provided, a GUID will be generated."
                  }
                },
                "roleDefinitionIdOrName": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                  }
                },
                "principalId": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                  }
                },
                "principalType": {
                  "type": "string",
                  "allowedValues": [
                    "Device",
                    "ForeignGroup",
                    "Group",
                    "ServicePrincipal",
                    "User"
                  ],
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The principal type of the assigned principal ID."
                  }
                },
                "description": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The description of the role assignment."
                  }
                },
                "condition": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                  }
                },
                "conditionVersion": {
                  "type": "string",
                  "allowedValues": [
                    "2.0"
                  ],
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Version of the condition."
                  }
                },
                "delegatedManagedIdentityResourceId": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The Resource Id of the delegated managed identity resource."
                  }
                }
              },
              "metadata": {
                "description": "An AVM-aligned type for a role assignment.",
                "__bicep_imported_from!": {
                  "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.5.1"
                }
              }
            }
          },
          "parameters": {
            "name": {
              "type": "string",
              "metadata": {
                "description": "Required. Name of the private endpoint resource to create."
              }
            },
            "subnetResourceId": {
              "type": "string",
              "metadata": {
                "description": "Required. Resource ID of the subnet where the endpoint needs to be created."
              }
            },
            "applicationSecurityGroupResourceIds": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "nullable": true,
              "metadata": {
                "description": "Optional. Application security groups in which the private endpoint IP configuration is included."
              }
            },
            "customNetworkInterfaceName": {
              "type": "string",
              "nullable": true,
              "metadata": {
                "description": "Optional. The custom name of the network interface attached to the private endpoint."
              }
            },
            "ipConfigurations": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ipConfigurationType"
              },
              "nullable": true,
              "metadata": {
                "description": "Optional. A list of IP configurations of the private endpoint. This will be used to map to the First Party Service endpoints."
              }
            },
            "privateDnsZoneGroup": {
              "$ref": "#/definitions/privateDnsZoneGroupType",
              "nullable": true,
              "metadata": {
                "description": "Optional. The private DNS zone group to configure for the private endpoint."
              }
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]",
              "metadata": {
                "description": "Optional. Location for all Resources."
              }
            },
            "lock": {
              "$ref": "#/definitions/lockType",
              "nullable": true,
              "metadata": {
                "description": "Optional. The lock settings of the service."
              }
            },
            "roleAssignments": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/roleAssignmentType"
              },
              "nullable": true,
              "metadata": {
                "description": "Optional. Array of role assignments to create."
              }
            },
            "tags": {
              "type": "object",
              "nullable": true,
              "metadata": {
                "description": "Optional. Tags to be applied on all resources/resource groups in this deployment."
              }
            },
            "customDnsConfigs": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/customDnsConfigType"
              },
              "nullable": true,
              "metadata": {
                "description": "Optional. Custom DNS configurations."
              }
            },
            "manualPrivateLinkServiceConnections": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/privateLinkServiceConnectionType"
              },
              "nullable": true,
              "metadata": {
                "description": "Conditional. A grouping of information about the connection to the remote resource. Used when the network admin does not have access to approve connections to the remote resource. Required if `privateLinkServiceConnections` is empty."
              }
            },
            "privateLinkServiceConnections": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/privateLinkServiceConnectionType"
              },
              "nullable": true,
              "metadata": {
                "description": "Conditional. A grouping of information about the connection to the remote resource. Required if `manualPrivateLinkServiceConnections` is empty."
              }
            },
            "enableTelemetry": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Optional. Enable/Disable usage telemetry for module."
              }
            }
          },
          "variables": {
            "copy": [
              {
                "name": "formattedRoleAssignments",
                "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]",
                "input": "[union(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')], createObject('roleDefinitionId', coalesce(tryGet(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName), if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName)))))]"
              }
            ],
            "builtInRoleNames": {
              "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
              "DNS Resolver Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '0f2ebee7-ffd4-4fc0-b3b7-664099fdad5d')]",
              "DNS Zone Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'befefa01-2a29-4197-83a8-272ff33ce314')]",
              "Domain Services Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'eeaeda52-9324-47f6-8069-5d5bade478b2')]",
              "Domain Services Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '361898ef-9ed1-48c2-849c-a832951106bb')]",
              "Network Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4d97b98b-1d4f-4787-a291-c67834d212e7')]",
              "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
              "Private DNS Zone Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b12aa53e-6015-4669-85d0-8515ebb3ae7f')]",
              "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
              "Role Based Access Control Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]"
            }
          },
          "resources": {
            "avmTelemetry": {
              "condition": "[parameters('enableTelemetry')]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2024-03-01",
              "name": "[format('46d3xbcp.res.network-privateendpoint.{0}.{1}', replace('0.10.1', '.', '-'), substring(uniqueString(deployment().name, parameters('location')), 0, 4))]",
              "properties": {
                "mode": "Incremental",
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "resources": [],
                  "outputs": {
                    "telemetry": {
                      "type": "String",
                      "value": "For more information, see https://aka.ms/avm/TelemetryInfo"
                    }
                  }
                }
              }
            },
            "privateEndpoint": {
              "type": "Microsoft.Network/privateEndpoints",
              "apiVersion": "2023-11-01",
              "name": "[parameters('name')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "properties": {
                "copy": [
                  {
                    "name": "applicationSecurityGroups",
                    "count": "[length(coalesce(parameters('applicationSecurityGroupResourceIds'), createArray()))]",
                    "input": {
                      "id": "[coalesce(parameters('applicationSecurityGroupResourceIds'), createArray())[copyIndex('applicationSecurityGroups')]]"
                    }
                  }
                ],
                "customDnsConfigs": "[coalesce(parameters('customDnsConfigs'), createArray())]",
                "customNetworkInterfaceName": "[coalesce(parameters('customNetworkInterfaceName'), '')]",
                "ipConfigurations": "[coalesce(parameters('ipConfigurations'), createArray())]",
                "manualPrivateLinkServiceConnections": "[coalesce(parameters('manualPrivateLinkServiceConnections'), createArray())]",
                "privateLinkServiceConnections": "[coalesce(parameters('privateLinkServiceConnections'), createArray())]",
                "subnet": {
                  "id": "[parameters('subnetResourceId')]"
                }
              }
            },
            "privateEndpoint_lock": {
              "condition": "[and(not(empty(coalesce(parameters('lock'), createObject()))), not(equals(tryGet(parameters('lock'), 'kind'), 'None')))]",
              "type": "Microsoft.Authorization/locks",
              "apiVersion": "2020-05-01",
              "scope": "[format('Microsoft.Network/privateEndpoints/{0}', parameters('name'))]",
              "name": "[coalesce(tryGet(parameters('lock'), 'name'), format('lock-{0}', parameters('name')))]",
              "properties": {
                "level": "[coalesce(tryGet(parameters('lock'), 'kind'), '')]",
                "notes": "[if(equals(tryGet(parameters('lock'), 'kind'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot delete or modify the resource or child resources.')]"
              },
              "dependsOn": [
                "privateEndpoint"
              ]
            },
            "privateEndpoint_roleAssignments": {
              "copy": {
                "name": "privateEndpoint_roleAssignments",
                "count": "[length(coalesce(variables('formattedRoleAssignments'), createArray()))]"
              },
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.Network/privateEndpoints/{0}', parameters('name'))]",
              "name": "[coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'name'), guid(resourceId('Microsoft.Network/privateEndpoints', parameters('name')), coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId, coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId))]",
              "properties": {
                "roleDefinitionId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId]",
                "principalId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId]",
                "description": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'description')]",
                "principalType": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'principalType')]",
                "condition": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition')]",
                "conditionVersion": "[if(not(empty(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                "delegatedManagedIdentityResourceId": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
              },
              "dependsOn": [
                "privateEndpoint"
              ]
            },
            "privateEndpoint_privateDnsZoneGroup": {
              "condition": "[not(empty(parameters('privateDnsZoneGroup')))]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('{0}-PrivateEndpoint-PrivateDnsZoneGroup', uniqueString(deployment().name))]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "name": {
                    "value": "[tryGet(parameters('privateDnsZoneGroup'), 'name')]"
                  },
                  "privateEndpointName": {
                    "value": "[parameters('name')]"
                  },
                  "privateDnsZoneConfigs": {
                    "value": "[parameters('privateDnsZoneGroup').privateDnsZoneGroupConfigs]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "languageVersion": "2.0",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.33.13.18514",
                      "templateHash": "5440815542537978381"
                    },
                    "name": "Private Endpoint Private DNS Zone Groups",
                    "description": "This module deploys a Private Endpoint Private DNS Zone Group."
                  },
                  "definitions": {
                    "privateDnsZoneGroupConfigType": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The name of the private DNS zone group config."
                          }
                        },
                        "privateDnsZoneResourceId": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. The resource id of the private DNS zone."
                          }
                        }
                      },
                      "metadata": {
                        "__bicep_export!": true
                      }
                    }
                  },
                  "parameters": {
                    "privateEndpointName": {
                      "type": "string",
                      "metadata": {
                        "description": "Conditional. The name of the parent private endpoint. Required if the template is used in a standalone deployment."
                      }
                    },
                    "privateDnsZoneConfigs": {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/privateDnsZoneGroupConfigType"
                      },
                      "minLength": 1,
                      "maxLength": 5,
                      "metadata": {
                        "description": "Required. Array of private DNS zone configurations of the private DNS zone group. A DNS zone group can support up to 5 DNS zones."
                      }
                    },
                    "name": {
                      "type": "string",
                      "defaultValue": "default",
                      "metadata": {
                        "description": "Optional. The name of the private DNS zone group."
                      }
                    }
                  },
                  "variables": {
                    "copy": [
                      {
                        "name": "privateDnsZoneConfigsVar",
                        "count": "[length(parameters('privateDnsZoneConfigs'))]",
                        "input": {
                          "name": "[coalesce(tryGet(parameters('privateDnsZoneConfigs')[copyIndex('privateDnsZoneConfigsVar')], 'name'), last(split(parameters('privateDnsZoneConfigs')[copyIndex('privateDnsZoneConfigsVar')].privateDnsZoneResourceId, '/')))]",
                          "properties": {
                            "privateDnsZoneId": "[parameters('privateDnsZoneConfigs')[copyIndex('privateDnsZoneConfigsVar')].privateDnsZoneResourceId]"
                          }
                        }
                      }
                    ]
                  },
                  "resources": {
                    "privateEndpoint": {
                      "existing": true,
                      "type": "Microsoft.Network/privateEndpoints",
                      "apiVersion": "2023-11-01",
                      "name": "[parameters('privateEndpointName')]"
                    },
                    "privateDnsZoneGroup": {
                      "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
                      "apiVersion": "2023-11-01",
                      "name": "[format('{0}/{1}', parameters('privateEndpointName'), parameters('name'))]",
                      "properties": {
                        "privateDnsZoneConfigs": "[variables('privateDnsZoneConfigsVar')]"
                      }
                    }
                  },
                  "outputs": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the private endpoint DNS zone group."
                      },
                      "value": "[parameters('name')]"
                    },
                    "resourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the private endpoint DNS zone group."
                      },
                      "value": "[resourceId('Microsoft.Network/privateEndpoints/privateDnsZoneGroups', parameters('privateEndpointName'), parameters('name'))]"
                    },
                    "resourceGroupName": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource group the private endpoint DNS zone group was deployed into."
                      },
                      "value": "[resourceGroup().name]"
                    }
                  }
                }
              },
              "dependsOn": [
                "privateEndpoint"
              ]
            }
          },
          "outputs": {
            "resourceGroupName": {
              "type": "string",
              "metadata": {
                "description": "The resource group the private endpoint was deployed into."
              },
              "value": "[resourceGroup().name]"
            },
            "resourceId": {
              "type": "string",
              "metadata": {
                "description": "The resource ID of the private endpoint."
              },
              "value": "[resourceId('Microsoft.Network/privateEndpoints', parameters('name'))]"
            },
            "name": {
              "type": "string",
              "metadata": {
                "description": "The name of the private endpoint."
              },
              "value": "[parameters('name')]"
            },
            "location": {
              "type": "string",
              "metadata": {
                "description": "The location the resource was deployed into."
              },
              "value": "[reference('privateEndpoint', '2023-11-01', 'full').location]"
            },
            "customDnsConfigs": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/customDnsConfigType"
              },
              "metadata": {
                "description": "The custom DNS configurations of the private endpoint."
              },
              "value": "[reference('privateEndpoint').customDnsConfigs]"
            },
            "networkInterfaceResourceIds": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "metadata": {
                "description": "The resource IDs of the network interfaces associated with the private endpoint."
              },
              "value": "[map(reference('privateEndpoint').networkInterfaces, lambda('nic', lambdaVariables('nic').id))]"
            },
            "groupId": {
              "type": "string",
              "nullable": true,
              "metadata": {
                "description": "The group Id for the private endpoint Group."
              },
              "value": "[coalesce(tryGet(tryGet(tryGet(tryGet(reference('privateEndpoint'), 'manualPrivateLinkServiceConnections'), 0, 'properties'), 'groupIds'), 0), tryGet(tryGet(tryGet(tryGet(reference('privateEndpoint'), 'privateLinkServiceConnections'), 0, 'properties'), 'groupIds'), 0))]"
            }
          }
        }
      },
      "dependsOn": [
        "app"
      ]
    }
  },
  "outputs": {
    "name": {
      "type": "string",
      "metadata": {
        "description": "The name of the site."
      },
      "value": "[parameters('name')]"
    },
    "resourceId": {
      "type": "string",
      "metadata": {
        "description": "The resource ID of the site."
      },
      "value": "[resourceId('Microsoft.Web/sites', parameters('name'))]"
    },
    "resourceGroupName": {
      "type": "string",
      "metadata": {
        "description": "The resource group the site was deployed into."
      },
      "value": "[resourceGroup().name]"
    },
    "systemAssignedMIPrincipalId": {
      "type": "string",
      "nullable": true,
      "metadata": {
        "description": "The principal ID of the system assigned identity."
      },
      "value": "[tryGet(tryGet(reference('app', '2024-04-01', 'full'), 'identity'), 'principalId')]"
    },
    "location": {
      "type": "string",
      "metadata": {
        "description": "The location the resource was deployed into."
      },
      "value": "[reference('app', '2024-04-01', 'full').location]"
    },
    "defaultHostname": {
      "type": "string",
      "metadata": {
        "description": "Default hostname of the app."
      },
      "value": "[reference('app').defaultHostName]"
    },
    "customDomainVerificationId": {
      "type": "string",
      "metadata": {
        "description": "Unique identifier that verifies the custom domains assigned to the app. Customer will add this ID to a txt record for verification."
      },
      "value": "[reference('app').customDomainVerificationId]"
    },
    "outboundIpAddresses": {
      "type": "string",
      "metadata": {
        "description": "The outbound IP addresses of the app."
      },
      "value": "[reference('app').outboundIpAddresses]"
    },
    "privateEndpoints": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/privateEndpointOutputType"
      },
      "metadata": {
        "description": "The private endpoints of the site."
      },
      "copy": {
        "count": "[length(coalesce(parameters('privateEndpoints'), createArray()))]",
        "input": {
          "name": "[reference(format('app_privateEndpoints[{0}]', copyIndex())).outputs.name.value]",
          "resourceId": "[reference(format('app_privateEndpoints[{0}]', copyIndex())).outputs.resourceId.value]",
          "groupId": "[tryGet(tryGet(reference(format('app_privateEndpoints[{0}]', copyIndex())).outputs, 'groupId'), 'value')]",
          "customDnsConfigs": "[reference(format('app_privateEndpoints[{0}]', copyIndex())).outputs.customDnsConfigs.value]",
          "networkInterfaceResourceIds": "[reference(format('app_privateEndpoints[{0}]', copyIndex())).outputs.networkInterfaceResourceIds.value]"
        }
      }
    },
    "slots": {
      "type": "array",
      "items": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "metadata": {
              "description": "The name of the slot."
            }
          },
          "resourceId": {
            "type": "string",
            "metadata": {
              "description": "The resource ID of the slot."
            }
          },
          "systemAssignedMIPrincipalId": {
            "type": "string",
            "nullable": true,
            "metadata": {
              "description": "The principal ID of the system assigned identity of the slot."
            }
          },
          "privateEndpoints": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/privateEndpointOutputType"
            },
            "metadata": {
              "description": "The private endpoints of the slot."
            }
          }
        }
      },
      "metadata": {
        "description": "The slots of the site."
      },
      "copy": {
        "count": "[length(coalesce(parameters('slots'), createArray()))]",
        "input": {
          "name": "[format('{0}-Slot-{1}', uniqueString(deployment().name, parameters('location')), coalesce(parameters('slots'), createArray())[copyIndex()].name)]",
          "resourceId": "[reference(format('app_slots[{0}]', copyIndex())).outputs.resourceId.value]",
          "systemAssignedMIPrincipalId": "[coalesce(tryGet(tryGet(reference(format('app_slots[{0}]', copyIndex())).outputs, 'systemAssignedMIPrincipalId'), 'value'), '')]",
          "privateEndpoints": "[reference(format('app_slots[{0}]', copyIndex())).outputs.privateEndpoints.value]"
        }
      }
    }
  }
}