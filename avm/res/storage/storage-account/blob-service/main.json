{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "languageVersion": "2.0",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "_generator": {
      "name": "bicep",
      "version": "0.24.24.22086",
      "templateHash": "15895331301993414988"
    },
    "name": "Storage Account blob Services",
    "description": "This module deploys a Storage Account Blob Service.",
    "owner": "Azure/module-maintainers"
  },
  "definitions": {
    "diagnosticSettingType": {
      "type": "array",
      "items": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true,
            "metadata": {
              "description": "Optional. The name of diagnostic setting."
            }
          },
          "logCategoriesAndGroups": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "category": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Name of a Diagnostic Log category for a resource type this setting is applied to. Set the specific logs to collect here."
                  }
                },
                "categoryGroup": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Name of a Diagnostic Log category group for a resource type this setting is applied to. Set to 'AllLogs' to collect all logs."
                  }
                }
              }
            },
            "nullable": true,
            "metadata": {
              "description": "Optional. The name of logs that will be streamed. \"allLogs\" includes all possible logs for the resource. Set to '' to disable log collection."
            }
          },
          "metricCategories": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "category": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. Name of a Diagnostic Metric category for a resource type this setting is applied to. Set to 'AllMetrics' to collect all metrics."
                  }
                }
              }
            },
            "nullable": true,
            "metadata": {
              "description": "Optional. The name of logs that will be streamed. \"allLogs\" includes all possible logs for the resource. Set to '' to disable log collection."
            }
          },
          "logAnalyticsDestinationType": {
            "type": "string",
            "allowedValues": [
              "AzureDiagnostics",
              "Dedicated"
            ],
            "nullable": true,
            "metadata": {
              "description": "Optional. A string indicating whether the export to Log Analytics should use the default destination type, i.e. AzureDiagnostics, or use a destination type."
            }
          },
          "workspaceResourceId": {
            "type": "string",
            "nullable": true,
            "metadata": {
              "description": "Optional. Resource ID of the diagnostic log analytics workspace. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
            }
          },
          "storageAccountResourceId": {
            "type": "string",
            "nullable": true,
            "metadata": {
              "description": "Optional. Resource ID of the diagnostic storage account. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
            }
          },
          "eventHubAuthorizationRuleResourceId": {
            "type": "string",
            "nullable": true,
            "metadata": {
              "description": "Optional. Resource ID of the diagnostic event hub authorization rule for the Event Hubs namespace in which the event hub should be created or streamed to."
            }
          },
          "eventHubName": {
            "type": "string",
            "nullable": true,
            "metadata": {
              "description": "Optional. Name of the diagnostic event hub within the namespace to which logs are streamed. Without this, an event hub is created for each log category. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
            }
          },
          "marketplacePartnerResourceId": {
            "type": "string",
            "nullable": true,
            "metadata": {
              "description": "Optional. The full ARM resource ID of the Marketplace resource to which you would like to send Diagnostic Logs."
            }
          }
        }
      },
      "nullable": true
    }
  },
  "parameters": {
    "storageAccountName": {
      "type": "string",
      "maxLength": 24,
      "metadata": {
        "description": "Conditional. The name of the parent Storage Account. Required if the template is used in a standalone deployment."
      }
    },
    "automaticSnapshotPolicyEnabled": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Optional. Automatic Snapshot is enabled if set to true."
      }
    },
    "changeFeedEnabled": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Optional. The blob service properties for change feed events. Indicates whether change feed event logging is enabled for the Blob service."
      }
    },
    "changeFeedRetentionInDays": {
      "type": "int",
      "nullable": true,
      "minValue": 0,
      "maxValue": 146000,
      "metadata": {
        "description": "Optional. Indicates whether change feed event logging is enabled for the Blob service. Indicates the duration of changeFeed retention in days. A \"0\" value indicates an infinite retention of the change feed."
      }
    },
    "containerDeleteRetentionPolicyEnabled": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Optional. The blob service properties for container soft delete. Indicates whether DeleteRetentionPolicy is enabled."
      }
    },
    "containerDeleteRetentionPolicyDays": {
      "type": "int",
      "nullable": true,
      "minValue": 1,
      "maxValue": 365,
      "metadata": {
        "description": "Optional. Indicates the number of days that the deleted item should be retained."
      }
    },
    "containerDeleteRetentionPolicyAllowPermanentDelete": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Optional. This property when set to true allows deletion of the soft deleted blob versions and snapshots. This property cannot be used with blob restore policy. This property only applies to blob service and does not apply to containers or file share."
      }
    },
    "corsRules": {
      "type": "array",
      "defaultValue": [],
      "metadata": {
        "description": "Optional. Specifies CORS rules for the Blob service. You can include up to five CorsRule elements in the request. If no CorsRule elements are included in the request body, all CORS rules will be deleted, and CORS will be disabled for the Blob service."
      }
    },
    "defaultServiceVersion": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Optional. Indicates the default version to use for requests to the Blob service if an incoming request's version is not specified. Possible values include version 2008-10-27 and all more recent versions."
      }
    },
    "deleteRetentionPolicyEnabled": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Optional. The blob service properties for blob soft delete."
      }
    },
    "deleteRetentionPolicyDays": {
      "type": "int",
      "nullable": true,
      "minValue": 1,
      "maxValue": 365,
      "metadata": {
        "description": "Optional. Indicates the number of days that the deleted blob should be retained."
      }
    },
    "deleteRetentionPolicyAllowPermanentDelete": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Optional. This property when set to true allows deletion of the soft deleted blob versions and snapshots. This property cannot be used with blob restore policy. This property only applies to blob service and does not apply to containers or file share."
      }
    },
    "isVersioningEnabled": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Optional. Use versioning to automatically maintain previous versions of your blobs."
      }
    },
    "lastAccessTimeTrackingPolicyEnabled": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Optional. The blob service property to configure last access time based tracking policy. When set to true last access time based tracking is enabled."
      }
    },
    "restorePolicyEnabled": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Optional. The blob service properties for blob restore policy. If point-in-time restore is enabled, then versioning, change feed, and blob soft delete must also be enabled."
      }
    },
    "restorePolicyDays": {
      "type": "int",
      "nullable": true,
      "minValue": 1,
      "metadata": {
        "description": "Optional. How long this blob can be restored. It should be less than DeleteRetentionPolicy days."
      }
    },
    "containers": {
      "type": "array",
      "defaultValue": [],
      "metadata": {
        "description": "Optional. Blob containers to create."
      }
    },
    "diagnosticSettings": {
      "$ref": "#/definitions/diagnosticSettingType",
      "metadata": {
        "description": "Optional. The diagnostic settings of the service."
      }
    },
    "enableDefaultTelemetry": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Optional. Enable telemetry via a Globally Unique Identifier (GUID)."
      }
    }
  },
  "variables": {
    "name": "default",
    "enableReferencedModulesTelemetry": false
  },
  "resources": {
    "defaultTelemetry": {
      "condition": "[parameters('enableDefaultTelemetry')]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2021-04-01",
      "name": "[format('pid-47ed15a6-730a-4827-bcb4-0fd963ffbd82-{0}', uniqueString(deployment().name))]",
      "properties": {
        "mode": "Incremental",
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "resources": []
        }
      }
    },
    "storageAccount": {
      "existing": true,
      "type": "Microsoft.Storage/storageAccounts",
      "apiVersion": "2022-09-01",
      "name": "[parameters('storageAccountName')]"
    },
    "blobServices": {
      "type": "Microsoft.Storage/storageAccounts/blobServices",
      "apiVersion": "2022-09-01",
      "name": "[format('{0}/{1}', parameters('storageAccountName'), variables('name'))]",
      "properties": {
        "automaticSnapshotPolicyEnabled": "[parameters('automaticSnapshotPolicyEnabled')]",
        "changeFeed": "[if(parameters('changeFeedEnabled'), createObject('enabled', true(), 'retentionInDays', parameters('changeFeedRetentionInDays')), null())]",
        "containerDeleteRetentionPolicy": {
          "enabled": "[parameters('containerDeleteRetentionPolicyEnabled')]",
          "days": "[parameters('containerDeleteRetentionPolicyDays')]",
          "allowPermanentDelete": "[if(equals(parameters('containerDeleteRetentionPolicyEnabled'), true()), parameters('containerDeleteRetentionPolicyAllowPermanentDelete'), null())]"
        },
        "cors": {
          "corsRules": "[parameters('corsRules')]"
        },
        "defaultServiceVersion": "[if(not(empty(parameters('defaultServiceVersion'))), parameters('defaultServiceVersion'), null())]",
        "deleteRetentionPolicy": {
          "enabled": "[parameters('deleteRetentionPolicyEnabled')]",
          "days": "[parameters('deleteRetentionPolicyDays')]",
          "allowPermanentDelete": "[if(and(parameters('deleteRetentionPolicyEnabled'), parameters('deleteRetentionPolicyAllowPermanentDelete')), true(), null())]"
        },
        "isVersioningEnabled": "[parameters('isVersioningEnabled')]",
        "lastAccessTimeTrackingPolicy": {
          "enable": "[parameters('lastAccessTimeTrackingPolicyEnabled')]",
          "name": "[if(equals(parameters('lastAccessTimeTrackingPolicyEnabled'), true()), 'AccessTimeTracking', null())]",
          "trackingGranularityInDays": "[if(equals(parameters('lastAccessTimeTrackingPolicyEnabled'), true()), 1, null())]"
        },
        "restorePolicy": "[if(parameters('restorePolicyEnabled'), createObject('enabled', true(), 'days', parameters('restorePolicyDays')), null())]"
      },
      "dependsOn": [
        "storageAccount"
      ]
    },
    "blobServices_diagnosticSettings": {
      "copy": {
        "name": "blobServices_diagnosticSettings",
        "count": "[length(coalesce(parameters('diagnosticSettings'), createArray()))]"
      },
      "type": "Microsoft.Insights/diagnosticSettings",
      "apiVersion": "2021-05-01-preview",
      "scope": "[format('Microsoft.Storage/storageAccounts/{0}/blobServices/{1}', parameters('storageAccountName'), variables('name'))]",
      "name": "[coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'name'), format('{0}-diagnosticSettings', variables('name')))]",
      "properties": {
        "storageAccountId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'storageAccountResourceId')]",
        "workspaceId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'workspaceResourceId')]",
        "eventHubAuthorizationRuleId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'eventHubAuthorizationRuleResourceId')]",
        "eventHubName": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'eventHubName')]",
        "metrics": "[coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics', 'timeGrain', null(), 'enabled', true())))]",
        "logs": "[coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'AllLogs', 'enabled', true())))]",
        "marketplacePartnerId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'marketplacePartnerResourceId')]",
        "logAnalyticsDestinationType": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logAnalyticsDestinationType')]"
      },
      "dependsOn": [
        "blobServices"
      ]
    },
    "blobServices_container": {
      "copy": {
        "name": "blobServices_container",
        "count": "[length(parameters('containers'))]"
      },
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('{0}-Container-{1}', deployment().name, copyIndex())]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "storageAccountName": {
            "value": "[parameters('storageAccountName')]"
          },
          "name": {
            "value": "[parameters('containers')[copyIndex()].name]"
          },
          "defaultEncryptionScope": "[if(contains(parameters('containers')[copyIndex()], 'defaultEncryptionScope'), createObject('value', parameters('containers')[copyIndex()].defaultEncryptionScope), createObject('value', ''))]",
          "denyEncryptionScopeOverride": "[if(contains(parameters('containers')[copyIndex()], 'denyEncryptionScopeOverride'), createObject('value', parameters('containers')[copyIndex()].denyEncryptionScopeOverride), createObject('value', false()))]",
          "enableNfsV3AllSquash": "[if(contains(parameters('containers')[copyIndex()], 'enableNfsV3AllSquash'), createObject('value', parameters('containers')[copyIndex()].enableNfsV3AllSquash), createObject('value', false()))]",
          "enableNfsV3RootSquash": "[if(contains(parameters('containers')[copyIndex()], 'enableNfsV3RootSquash'), createObject('value', parameters('containers')[copyIndex()].enableNfsV3RootSquash), createObject('value', false()))]",
          "immutableStorageWithVersioningEnabled": "[if(contains(parameters('containers')[copyIndex()], 'immutableStorageWithVersioningEnabled'), createObject('value', parameters('containers')[copyIndex()].immutableStorageWithVersioningEnabled), createObject('value', false()))]",
          "metadata": "[if(contains(parameters('containers')[copyIndex()], 'metadata'), createObject('value', parameters('containers')[copyIndex()].metadata), createObject('value', createObject()))]",
          "publicAccess": "[if(contains(parameters('containers')[copyIndex()], 'publicAccess'), createObject('value', parameters('containers')[copyIndex()].publicAccess), createObject('value', 'None'))]",
          "roleAssignments": "[if(contains(parameters('containers')[copyIndex()], 'roleAssignments'), createObject('value', parameters('containers')[copyIndex()].roleAssignments), createObject('value', createArray()))]",
          "immutabilityPolicyProperties": "[if(contains(parameters('containers')[copyIndex()], 'immutabilityPolicyProperties'), createObject('value', parameters('containers')[copyIndex()].immutabilityPolicyProperties), createObject('value', createObject()))]",
          "enableDefaultTelemetry": {
            "value": "[variables('enableReferencedModulesTelemetry')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "languageVersion": "2.0",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.24.24.22086",
              "templateHash": "12877248389226548296"
            },
            "name": "Storage Account Blob Containers",
            "description": "This module deploys a Storage Account Blob Container.",
            "owner": "Azure/module-maintainers"
          },
          "definitions": {
            "roleAssignmentType": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "roleDefinitionIdOrName": {
                    "type": "string",
                    "metadata": {
                      "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                    }
                  },
                  "principalId": {
                    "type": "string",
                    "metadata": {
                      "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                    }
                  },
                  "principalType": {
                    "type": "string",
                    "allowedValues": [
                      "Device",
                      "ForeignGroup",
                      "Group",
                      "ServicePrincipal",
                      "User"
                    ],
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. The principal type of the assigned principal ID."
                    }
                  },
                  "description": {
                    "type": "string",
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. The description of the role assignment."
                    }
                  },
                  "condition": {
                    "type": "string",
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\""
                    }
                  },
                  "conditionVersion": {
                    "type": "string",
                    "allowedValues": [
                      "2.0"
                    ],
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. Version of the condition."
                    }
                  },
                  "delegatedManagedIdentityResourceId": {
                    "type": "string",
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. The Resource Id of the delegated managed identity resource."
                    }
                  }
                }
              },
              "nullable": true
            }
          },
          "parameters": {
            "storageAccountName": {
              "type": "string",
              "maxLength": 24,
              "metadata": {
                "description": "Conditional. The name of the parent Storage Account. Required if the template is used in a standalone deployment."
              }
            },
            "name": {
              "type": "string",
              "metadata": {
                "description": "Required. The name of the storage container to deploy."
              }
            },
            "defaultEncryptionScope": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. Default the container to use specified encryption scope for all writes."
              }
            },
            "denyEncryptionScopeOverride": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Optional. Block override of encryption scope from the container default."
              }
            },
            "enableNfsV3AllSquash": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Optional. Enable NFSv3 all squash on blob container."
              }
            },
            "enableNfsV3RootSquash": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Optional. Enable NFSv3 root squash on blob container."
              }
            },
            "immutableStorageWithVersioningEnabled": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Optional. This is an immutable property, when set to true it enables object level immutability at the container level. The property is immutable and can only be set to true at the container creation time. Existing containers must undergo a migration process."
              }
            },
            "immutabilityPolicyName": {
              "type": "string",
              "defaultValue": "default",
              "metadata": {
                "description": "Optional. Name of the immutable policy."
              }
            },
            "immutabilityPolicyProperties": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "Optional. Configure immutability policy."
              }
            },
            "metadata": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "Optional. A name-value pair to associate with the container as metadata."
              }
            },
            "publicAccess": {
              "type": "string",
              "defaultValue": "None",
              "allowedValues": [
                "Container",
                "Blob",
                "None"
              ],
              "metadata": {
                "description": "Optional. Specifies whether data in the container may be accessed publicly and the level of access."
              }
            },
            "roleAssignments": {
              "$ref": "#/definitions/roleAssignmentType",
              "metadata": {
                "description": "Optional. Array of role assignments to create."
              }
            },
            "enableDefaultTelemetry": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Optional. Enable telemetry via a Globally Unique Identifier (GUID)."
              }
            }
          },
          "variables": {
            "enableReferencedModulesTelemetry": false,
            "builtInRoleNames": {
              "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
              "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
              "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
              "Reader and Data Access": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'c12c1c16-33a1-487b-954d-41c89c60f349')]",
              "Role Based Access Control Administrator (Preview)": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]",
              "Storage Account Backup Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'e5e2a7ff-d759-4cd2-bb51-3152d37e2eb1')]",
              "Storage Account Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '17d1049b-9a84-46fb-8f53-869881c3d3ab')]",
              "Storage Account Key Operator Service Role": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '81a9662b-bebf-436f-a333-f67b29880f12')]",
              "Storage Blob Data Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'ba92f5b4-2d11-453d-a403-e96b0029c9fe')]",
              "Storage Blob Data Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b7e6dc6d-f1e8-4753-8033-0f276bb0955b')]",
              "Storage Blob Data Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '2a2b9908-6ea1-4ae2-8e65-a410df84e7d1')]",
              "Storage Blob Delegator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'db58b8e5-c6ad-4a2a-8342-4190687cbf4a')]",
              "Storage File Data SMB Share Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '0c867c2a-1d8c-454a-a3db-ab2ea1bdc8bb')]",
              "Storage File Data SMB Share Elevated Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'a7264617-510b-434b-a828-9731dc254ea7')]",
              "Storage File Data SMB Share Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'aba4ae5f-2193-4029-9191-0cb91df5e314')]",
              "Storage Queue Data Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '974c5e8b-45b9-4653-ba55-5f855dd0fb88')]",
              "Storage Queue Data Message Processor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8a0f0c08-91a1-4084-bc3d-661d67233fed')]",
              "Storage Queue Data Message Sender": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'c6a89b2d-59bc-44d0-9896-0f6e12d7b80a')]",
              "Storage Queue Data Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '19e7f393-937e-4f77-808e-94535e297925')]",
              "Storage Table Data Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '0a9a7e1f-b9d0-4cc4-a60d-0319b160aaa3')]",
              "Storage Table Data Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '76199698-9eea-4c19-bc75-cec21354c6b6')]",
              "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]"
            }
          },
          "resources": {
            "storageAccount::blobServices": {
              "existing": true,
              "type": "Microsoft.Storage/storageAccounts/blobServices",
              "apiVersion": "2022-09-01",
              "name": "[format('{0}/{1}', parameters('storageAccountName'), 'default')]",
              "dependsOn": [
                "storageAccount"
              ]
            },
            "defaultTelemetry": {
              "condition": "[parameters('enableDefaultTelemetry')]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2021-04-01",
              "name": "[format('pid-47ed15a6-730a-4827-bcb4-0fd963ffbd82-{0}', uniqueString(deployment().name))]",
              "properties": {
                "mode": "Incremental",
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "resources": []
                }
              }
            },
            "storageAccount": {
              "existing": true,
              "type": "Microsoft.Storage/storageAccounts",
              "apiVersion": "2022-09-01",
              "name": "[parameters('storageAccountName')]"
            },
            "container": {
              "type": "Microsoft.Storage/storageAccounts/blobServices/containers",
              "apiVersion": "2022-09-01",
              "name": "[format('{0}/{1}/{2}', parameters('storageAccountName'), 'default', parameters('name'))]",
              "properties": {
                "defaultEncryptionScope": "[if(not(empty(parameters('defaultEncryptionScope'))), parameters('defaultEncryptionScope'), null())]",
                "denyEncryptionScopeOverride": "[if(equals(parameters('denyEncryptionScopeOverride'), true()), parameters('denyEncryptionScopeOverride'), null())]",
                "enableNfsV3AllSquash": "[if(equals(parameters('enableNfsV3AllSquash'), true()), parameters('enableNfsV3AllSquash'), null())]",
                "enableNfsV3RootSquash": "[if(equals(parameters('enableNfsV3RootSquash'), true()), parameters('enableNfsV3RootSquash'), null())]",
                "immutableStorageWithVersioning": "[if(equals(parameters('immutableStorageWithVersioningEnabled'), true()), createObject('enabled', parameters('immutableStorageWithVersioningEnabled')), null())]",
                "metadata": "[parameters('metadata')]",
                "publicAccess": "[parameters('publicAccess')]"
              },
              "dependsOn": [
                "storageAccount::blobServices"
              ]
            },
            "container_roleAssignments": {
              "copy": {
                "name": "container_roleAssignments",
                "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]"
              },
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.Storage/storageAccounts/{0}/blobServices/{1}/containers/{2}', parameters('storageAccountName'), 'default', parameters('name'))]",
              "name": "[guid(resourceId('Microsoft.Storage/storageAccounts/blobServices/containers', parameters('storageAccountName'), 'default', parameters('name')), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].principalId, coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName)]",
              "properties": {
                "roleDefinitionId": "[if(contains(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName), variables('builtInRoleNames')[coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName], if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName)))]",
                "principalId": "[coalesce(parameters('roleAssignments'), createArray())[copyIndex()].principalId]",
                "description": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'description')]",
                "principalType": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'principalType')]",
                "condition": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'condition')]",
                "conditionVersion": "[if(not(empty(tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                "delegatedManagedIdentityResourceId": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
              },
              "dependsOn": [
                "container"
              ]
            },
            "immutabilityPolicy": {
              "condition": "[not(empty(parameters('immutabilityPolicyProperties')))]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[parameters('immutabilityPolicyName')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "storageAccountName": {
                    "value": "[parameters('storageAccountName')]"
                  },
                  "containerName": {
                    "value": "[parameters('name')]"
                  },
                  "immutabilityPeriodSinceCreationInDays": "[if(contains(parameters('immutabilityPolicyProperties'), 'immutabilityPeriodSinceCreationInDays'), createObject('value', parameters('immutabilityPolicyProperties').immutabilityPeriodSinceCreationInDays), createObject('value', 365))]",
                  "allowProtectedAppendWrites": "[if(contains(parameters('immutabilityPolicyProperties'), 'allowProtectedAppendWrites'), createObject('value', parameters('immutabilityPolicyProperties').allowProtectedAppendWrites), createObject('value', true()))]",
                  "allowProtectedAppendWritesAll": "[if(contains(parameters('immutabilityPolicyProperties'), 'allowProtectedAppendWritesAll'), createObject('value', parameters('immutabilityPolicyProperties').allowProtectedAppendWritesAll), createObject('value', true()))]",
                  "enableDefaultTelemetry": {
                    "value": "[variables('enableReferencedModulesTelemetry')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.24.24.22086",
                      "templateHash": "4658218767079659572"
                    },
                    "name": "Storage Account Blob Container Immutability Policies",
                    "description": "This module deploys a Storage Account Blob Container Immutability Policy.",
                    "owner": "Azure/module-maintainers"
                  },
                  "parameters": {
                    "storageAccountName": {
                      "type": "string",
                      "maxLength": 24,
                      "metadata": {
                        "description": "Conditional. The name of the parent Storage Account. Required if the template is used in a standalone deployment."
                      }
                    },
                    "containerName": {
                      "type": "string",
                      "metadata": {
                        "description": "Conditional. The name of the parent container to apply the policy to. Required if the template is used in a standalone deployment."
                      }
                    },
                    "immutabilityPeriodSinceCreationInDays": {
                      "type": "int",
                      "defaultValue": 365,
                      "metadata": {
                        "description": "Optional. The immutability period for the blobs in the container since the policy creation, in days."
                      }
                    },
                    "allowProtectedAppendWrites": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "Optional. This property can only be changed for unlocked time-based retention policies. When enabled, new blocks can be written to an append blob while maintaining immutability protection and compliance. Only new blocks can be added and any existing blocks cannot be modified or deleted. This property cannot be changed with ExtendImmutabilityPolicy API."
                      }
                    },
                    "allowProtectedAppendWritesAll": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "Optional. This property can only be changed for unlocked time-based retention policies. When enabled, new blocks can be written to both \"Append and Block Blobs\" while maintaining immutability protection and compliance. Only new blocks can be added and any existing blocks cannot be modified or deleted. This property cannot be changed with ExtendImmutabilityPolicy API. The \"allowProtectedAppendWrites\" and \"allowProtectedAppendWritesAll\" properties are mutually exclusive."
                      }
                    },
                    "enableDefaultTelemetry": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "Optional. Enable telemetry via a Globally Unique Identifier (GUID)."
                      }
                    }
                  },
                  "resources": [
                    {
                      "condition": "[parameters('enableDefaultTelemetry')]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2021-04-01",
                      "name": "[format('pid-47ed15a6-730a-4827-bcb4-0fd963ffbd82-{0}', uniqueString(deployment().name))]",
                      "properties": {
                        "mode": "Incremental",
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "resources": []
                        }
                      }
                    },
                    {
                      "type": "Microsoft.Storage/storageAccounts/blobServices/containers/immutabilityPolicies",
                      "apiVersion": "2022-09-01",
                      "name": "[format('{0}/{1}/{2}/{3}', parameters('storageAccountName'), 'default', parameters('containerName'), 'default')]",
                      "properties": {
                        "immutabilityPeriodSinceCreationInDays": "[parameters('immutabilityPeriodSinceCreationInDays')]",
                        "allowProtectedAppendWrites": "[parameters('allowProtectedAppendWrites')]",
                        "allowProtectedAppendWritesAll": "[parameters('allowProtectedAppendWritesAll')]"
                      }
                    }
                  ],
                  "outputs": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the deployed immutability policy."
                      },
                      "value": "default"
                    },
                    "resourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the deployed immutability policy."
                      },
                      "value": "[resourceId('Microsoft.Storage/storageAccounts/blobServices/containers/immutabilityPolicies', parameters('storageAccountName'), 'default', parameters('containerName'), 'default')]"
                    },
                    "resourceGroupName": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource group of the deployed immutability policy."
                      },
                      "value": "[resourceGroup().name]"
                    }
                  }
                }
              },
              "dependsOn": [
                "container",
                "storageAccount"
              ]
            }
          },
          "outputs": {
            "name": {
              "type": "string",
              "metadata": {
                "description": "The name of the deployed container."
              },
              "value": "[parameters('name')]"
            },
            "resourceId": {
              "type": "string",
              "metadata": {
                "description": "The resource ID of the deployed container."
              },
              "value": "[resourceId('Microsoft.Storage/storageAccounts/blobServices/containers', parameters('storageAccountName'), 'default', parameters('name'))]"
            },
            "resourceGroupName": {
              "type": "string",
              "metadata": {
                "description": "The resource group of the deployed container."
              },
              "value": "[resourceGroup().name]"
            }
          }
        }
      },
      "dependsOn": [
        "storageAccount"
      ]
    }
  },
  "outputs": {
    "name": {
      "type": "string",
      "metadata": {
        "description": "The name of the deployed blob service."
      },
      "value": "[variables('name')]"
    },
    "resourceId": {
      "type": "string",
      "metadata": {
        "description": "The resource ID of the deployed blob service."
      },
      "value": "[resourceId('Microsoft.Storage/storageAccounts/blobServices', parameters('storageAccountName'), variables('name'))]"
    },
    "resourceGroupName": {
      "type": "string",
      "metadata": {
        "description": "The name of the deployed blob service."
      },
      "value": "[resourceGroup().name]"
    }
  }
}