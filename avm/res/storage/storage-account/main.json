{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "languageVersion": "2.0",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "_generator": {
      "name": "bicep",
      "version": "0.25.53.49325",
      "templateHash": "16595339509600711048"
    },
    "name": "Storage Accounts",
    "description": "This module deploys a Storage Account.",
    "owner": "Azure/module-maintainers"
  },
  "definitions": {
    "managedIdentitiesType": {
      "type": "object",
      "properties": {
        "systemAssigned": {
          "type": "bool",
          "nullable": true,
          "metadata": {
            "description": "Optional. Enables system assigned managed identity on the resource."
          }
        },
        "userAssignedResourceIds": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "nullable": true,
          "metadata": {
            "description": "Optional. The resource ID(s) to assign to the resource."
          }
        }
      },
      "nullable": true
    },
    "lockType": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "Optional. Specify the name of lock."
          }
        },
        "kind": {
          "type": "string",
          "allowedValues": [
            "CanNotDelete",
            "None",
            "ReadOnly"
          ],
          "nullable": true,
          "metadata": {
            "description": "Optional. Specify the type of lock."
          }
        }
      },
      "nullable": true
    },
    "roleAssignmentType": {
      "type": "array",
      "items": {
        "type": "object",
        "properties": {
          "roleDefinitionIdOrName": {
            "type": "string",
            "metadata": {
              "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
            }
          },
          "principalId": {
            "type": "string",
            "metadata": {
              "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
            }
          },
          "principalType": {
            "type": "string",
            "allowedValues": [
              "Device",
              "ForeignGroup",
              "Group",
              "ServicePrincipal",
              "User"
            ],
            "nullable": true,
            "metadata": {
              "description": "Optional. The principal type of the assigned principal ID."
            }
          },
          "description": {
            "type": "string",
            "nullable": true,
            "metadata": {
              "description": "Optional. The description of the role assignment."
            }
          },
          "condition": {
            "type": "string",
            "nullable": true,
            "metadata": {
              "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
            }
          },
          "conditionVersion": {
            "type": "string",
            "allowedValues": [
              "2.0"
            ],
            "nullable": true,
            "metadata": {
              "description": "Optional. Version of the condition."
            }
          },
          "delegatedManagedIdentityResourceId": {
            "type": "string",
            "nullable": true,
            "metadata": {
              "description": "Optional. The Resource Id of the delegated managed identity resource."
            }
          }
        }
      },
      "nullable": true
    },
    "networkAclsType": {
      "type": "object",
      "properties": {
        "resourceAccessRules": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "tenantId": {
                "type": "string",
                "metadata": {
                  "description": "Required. The ID of the tenant in which the resource resides in."
                }
              },
              "resourceId": {
                "type": "string",
                "metadata": {
                  "description": "Required. The resource ID of the target service. Can also contain a wildcard, if multiple services e.g. in a resource group should be included."
                }
              }
            }
          },
          "nullable": true,
          "metadata": {
            "description": "Optional. Sets the resource access rules. Array entries must consist of \"tenantId\" and \"resourceId\" fields only."
          }
        },
        "bypass": {
          "type": "string",
          "allowedValues": [
            "AzureServices",
            "AzureServices, Logging",
            "AzureServices, Logging, Metrics",
            "AzureServices, Metrics",
            "Logging",
            "Logging, Metrics",
            "Metrics",
            "None"
          ],
          "metadata": {
            "description": "Required. Specifies whether traffic is bypassed for Logging/Metrics/AzureServices. Possible values are any combination of Logging,Metrics,AzureServices (For example, \"Logging, Metrics\"), or None to bypass none of those traffics."
          }
        },
        "virtualNetworkRules": {
          "type": "array",
          "nullable": true,
          "metadata": {
            "description": "Optional. Sets the virtual network rules."
          }
        },
        "ipRules": {
          "type": "array",
          "nullable": true,
          "metadata": {
            "description": "Optional. Sets the IP ACL rules."
          }
        },
        "defaultAction": {
          "type": "string",
          "allowedValues": [
            "Allow",
            "Deny"
          ],
          "metadata": {
            "description": "Required. Specifies the default action of allow or deny when no other rules match."
          }
        }
      }
    },
    "privateEndpointType": {
      "type": "array",
      "items": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true,
            "metadata": {
              "description": "Optional. The name of the private endpoint."
            }
          },
          "location": {
            "type": "string",
            "nullable": true,
            "metadata": {
              "description": "Optional. The location to deploy the private endpoint to."
            }
          },
          "service": {
            "type": "string",
            "metadata": {
              "description": "Required. The service (sub-) type to deploy the private endpoint for. For example \"vault\" or \"blob\"."
            }
          },
          "subnetResourceId": {
            "type": "string",
            "metadata": {
              "description": "Required. Resource ID of the subnet where the endpoint needs to be created."
            }
          },
          "privateDnsZoneGroupName": {
            "type": "string",
            "nullable": true,
            "metadata": {
              "description": "Optional. The name of the private DNS zone group to create if privateDnsZoneResourceIds were provided."
            }
          },
          "privateDnsZoneResourceIds": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true,
            "metadata": {
              "description": "Optional. The private DNS zone groups to associate the private endpoint with. A DNS zone group can support up to 5 DNS zones."
            }
          },
          "isManualConnection": {
            "type": "bool",
            "nullable": true,
            "metadata": {
              "description": "Optional. Manual PrivateLink Service Connections."
            }
          },
          "manualConnectionRequestMessage": {
            "type": "string",
            "nullable": true,
            "maxLength": 140,
            "metadata": {
              "description": "Optional. A message passed to the owner of the remote resource with the manual connection request."
            }
          },
          "customDnsConfigs": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "fqdn": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Required. Fqdn that resolves to private endpoint ip address."
                  }
                },
                "ipAddresses": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "metadata": {
                    "description": "Required. A list of private ip addresses of the private endpoint."
                  }
                }
              }
            },
            "nullable": true,
            "metadata": {
              "description": "Optional. Custom DNS configurations."
            }
          },
          "ipConfigurations": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. The name of the resource that is unique within a resource group."
                  }
                },
                "properties": {
                  "type": "object",
                  "properties": {
                    "groupId": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The ID of a group obtained from the remote resource that this private endpoint should connect to."
                      }
                    },
                    "memberName": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The member name of a group obtained from the remote resource that this private endpoint should connect to."
                      }
                    },
                    "privateIPAddress": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. A private ip address obtained from the private endpoint's subnet."
                      }
                    }
                  },
                  "metadata": {
                    "description": "Required. Properties of private endpoint IP configurations."
                  }
                }
              }
            },
            "nullable": true,
            "metadata": {
              "description": "Optional. A list of IP configurations of the private endpoint. This will be used to map to the First Party Service endpoints."
            }
          },
          "applicationSecurityGroupResourceIds": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true,
            "metadata": {
              "description": "Optional. Application security groups in which the private endpoint IP configuration is included."
            }
          },
          "customNetworkInterfaceName": {
            "type": "string",
            "nullable": true,
            "metadata": {
              "description": "Optional. The custom name of the network interface attached to the private endpoint."
            }
          },
          "lock": {
            "$ref": "#/definitions/lockType",
            "metadata": {
              "description": "Optional. Specify the type of lock."
            }
          },
          "roleAssignments": {
            "$ref": "#/definitions/roleAssignmentType",
            "metadata": {
              "description": "Optional. Array of role assignments to create."
            }
          },
          "tags": {
            "type": "object",
            "nullable": true,
            "metadata": {
              "description": "Optional. Tags to be applied on all resources/resource groups in this deployment."
            }
          },
          "enableTelemetry": {
            "type": "bool",
            "nullable": true,
            "metadata": {
              "description": "Optional. Enable/Disable usage telemetry for module."
            }
          }
        }
      },
      "nullable": true
    },
    "diagnosticSettingType": {
      "type": "array",
      "items": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true,
            "metadata": {
              "description": "Optional. The name of diagnostic setting."
            }
          },
          "metricCategories": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "category": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. Name of a Diagnostic Metric category for a resource type this setting is applied to. Set to `AllMetrics` to collect all metrics."
                  }
                },
                "enabled": {
                  "type": "bool",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Enable or disable the category explicitly. Default is `true`."
                  }
                }
              }
            },
            "nullable": true,
            "metadata": {
              "description": "Optional. The name of logs that will be streamed. \"allLogs\" includes all possible logs for the resource. Set to `[]` to disable log collection."
            }
          },
          "logAnalyticsDestinationType": {
            "type": "string",
            "allowedValues": [
              "AzureDiagnostics",
              "Dedicated"
            ],
            "nullable": true,
            "metadata": {
              "description": "Optional. A string indicating whether the export to Log Analytics should use the default destination type, i.e. AzureDiagnostics, or use a destination type."
            }
          },
          "workspaceResourceId": {
            "type": "string",
            "nullable": true,
            "metadata": {
              "description": "Optional. Resource ID of the diagnostic log analytics workspace. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
            }
          },
          "storageAccountResourceId": {
            "type": "string",
            "nullable": true,
            "metadata": {
              "description": "Optional. Resource ID of the diagnostic storage account. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
            }
          },
          "eventHubAuthorizationRuleResourceId": {
            "type": "string",
            "nullable": true,
            "metadata": {
              "description": "Optional. Resource ID of the diagnostic event hub authorization rule for the Event Hubs namespace in which the event hub should be created or streamed to."
            }
          },
          "eventHubName": {
            "type": "string",
            "nullable": true,
            "metadata": {
              "description": "Optional. Name of the diagnostic event hub within the namespace to which logs are streamed. Without this, an event hub is created for each log category. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
            }
          },
          "marketplacePartnerResourceId": {
            "type": "string",
            "nullable": true,
            "metadata": {
              "description": "Optional. The full ARM resource ID of the Marketplace resource to which you would like to send Diagnostic Logs."
            }
          }
        }
      },
      "nullable": true
    },
    "customerManagedKeyType": {
      "type": "object",
      "properties": {
        "keyVaultResourceId": {
          "type": "string",
          "metadata": {
            "description": "Required. The resource ID of a key vault to reference a customer managed key for encryption from."
          }
        },
        "keyName": {
          "type": "string",
          "metadata": {
            "description": "Required. The name of the customer managed key to use for encryption."
          }
        },
        "keyVersion": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "Optional. The version of the customer managed key to reference for encryption. If not provided, using 'latest'."
          }
        },
        "userAssignedIdentityResourceId": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "Optional. User assigned identity to use when fetching the customer managed key. If used must also be specified in `managedIdentities.userAssignedResourceIds`. Required if no system assigned identity is available for use."
          }
        }
      },
      "nullable": true
    }
  },
  "parameters": {
    "name": {
      "type": "string",
      "maxLength": 24,
      "metadata": {
        "description": "Required. Name of the Storage Account. Must be lower-case."
      }
    },
    "location": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "Optional. Location for all resources."
      }
    },
    "roleAssignments": {
      "$ref": "#/definitions/roleAssignmentType",
      "metadata": {
        "description": "Optional. Array of role assignments to create."
      }
    },
    "managedIdentities": {
      "$ref": "#/definitions/managedIdentitiesType",
      "metadata": {
        "description": "Optional. The managed identity definition for this resource."
      }
    },
    "kind": {
      "type": "string",
      "defaultValue": "StorageV2",
      "allowedValues": [
        "Storage",
        "StorageV2",
        "BlobStorage",
        "FileStorage",
        "BlockBlobStorage"
      ],
      "metadata": {
        "description": "Optional. Type of Storage Account to create."
      }
    },
    "skuName": {
      "type": "string",
      "defaultValue": "Standard_GRS",
      "allowedValues": [
        "Standard_LRS",
        "Standard_GRS",
        "Standard_RAGRS",
        "Standard_ZRS",
        "Premium_LRS",
        "Premium_ZRS",
        "Standard_GZRS",
        "Standard_RAGZRS"
      ],
      "metadata": {
        "description": "Optional. Storage Account Sku Name."
      }
    },
    "accessTier": {
      "type": "string",
      "defaultValue": "Hot",
      "allowedValues": [
        "Premium",
        "Hot",
        "Cool"
      ],
      "metadata": {
        "description": "Conditional. Required if the Storage Account kind is set to BlobStorage. The access tier is used for billing. The \"Premium\" access tier is the default value for premium block blobs storage account type and it cannot be changed for the premium block blobs storage account type."
      }
    },
    "largeFileSharesState": {
      "type": "string",
      "defaultValue": "Disabled",
      "allowedValues": [
        "Disabled",
        "Enabled"
      ],
      "metadata": {
        "description": "Optional. Allow large file shares if sets to 'Enabled'. It cannot be disabled once it is enabled. Only supported on locally redundant and zone redundant file shares. It cannot be set on FileStorage storage accounts (storage accounts for premium file shares)."
      }
    },
    "azureFilesIdentityBasedAuthentication": {
      "type": "object",
      "defaultValue": {},
      "metadata": {
        "description": "Optional. Provides the identity based authentication settings for Azure Files."
      }
    },
    "defaultToOAuthAuthentication": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Optional. A boolean flag which indicates whether the default authentication is OAuth or not."
      }
    },
    "allowSharedKeyAccess": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Optional. Indicates whether the storage account permits requests to be authorized with the account access key via Shared Key. If false, then all requests, including shared access signatures, must be authorized with Azure Active Directory (Azure AD). The default value is null, which is equivalent to true."
      }
    },
    "privateEndpoints": {
      "$ref": "#/definitions/privateEndpointType",
      "metadata": {
        "description": "Optional. Configuration details for private endpoints. For security reasons, it is recommended to use private endpoints whenever possible."
      }
    },
    "managementPolicyRules": {
      "type": "array",
      "nullable": true,
      "metadata": {
        "description": "Optional. The Storage Account ManagementPolicies Rules."
      }
    },
    "networkAcls": {
      "$ref": "#/definitions/networkAclsType",
      "defaultValue": {
        "bypass": "AzureServices",
        "defaultAction": "Deny"
      },
      "metadata": {
        "description": "Required. Networks ACLs, this value contains IPs to whitelist and/or Subnet information. If in use, bypass needs to be supplied. For security reasons, it is recommended to set the DefaultAction Deny."
      }
    },
    "requireInfrastructureEncryption": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Optional. A Boolean indicating whether or not the service applies a secondary layer of encryption with platform managed keys for data at rest. For security reasons, it is recommended to set it to true."
      }
    },
    "allowCrossTenantReplication": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Optional. Allow or disallow cross AAD tenant object replication."
      }
    },
    "customDomainName": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Optional. Sets the custom domain name assigned to the storage account. Name is the CNAME source."
      }
    },
    "customDomainUseSubDomainName": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Optional. Indicates whether indirect CName validation is enabled. This should only be set on updates."
      }
    },
    "dnsEndpointType": {
      "type": "string",
      "defaultValue": "",
      "allowedValues": [
        "",
        "AzureDnsZone",
        "Standard"
      ],
      "metadata": {
        "description": "Optional. Allows you to specify the type of endpoint. Set this to AzureDNSZone to create a large number of accounts in a single subscription, which creates accounts in an Azure DNS Zone and the endpoint URL will have an alphanumeric DNS Zone identifier."
      }
    },
    "blobServices": {
      "type": "object",
      "defaultValue": "[if(not(equals(parameters('kind'), 'FileStorage')), createObject('containerDeleteRetentionPolicyEnabled', true(), 'containerDeleteRetentionPolicyDays', 7, 'deleteRetentionPolicyEnabled', true(), 'deleteRetentionPolicyDays', 6), createObject())]",
      "metadata": {
        "description": "Optional. Blob service and containers to deploy."
      }
    },
    "fileServices": {
      "type": "object",
      "defaultValue": {},
      "metadata": {
        "description": "Optional. File service and shares to deploy."
      }
    },
    "queueServices": {
      "type": "object",
      "defaultValue": {},
      "metadata": {
        "description": "Optional. Queue service and queues to create."
      }
    },
    "tableServices": {
      "type": "object",
      "defaultValue": {},
      "metadata": {
        "description": "Optional. Table service and tables to create."
      }
    },
    "allowBlobPublicAccess": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Optional. Indicates whether public access is enabled for all blobs or containers in the storage account. For security reasons, it is recommended to set it to false."
      }
    },
    "minimumTlsVersion": {
      "type": "string",
      "defaultValue": "TLS1_2",
      "allowedValues": [
        "TLS1_0",
        "TLS1_1",
        "TLS1_2"
      ],
      "metadata": {
        "description": "Optional. Set the minimum TLS version on request to storage."
      }
    },
    "enableHierarchicalNamespace": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Conditional. If true, enables Hierarchical Namespace for the storage account. Required if enableSftp or enableNfsV3 is set to true."
      }
    },
    "enableSftp": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Optional. If true, enables Secure File Transfer Protocol for the storage account. Requires enableHierarchicalNamespace to be true."
      }
    },
    "localUsers": {
      "type": "array",
      "defaultValue": [],
      "metadata": {
        "description": "Optional. Local users to deploy for SFTP authentication."
      }
    },
    "isLocalUserEnabled": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Optional. Enables local users feature, if set to true."
      }
    },
    "enableNfsV3": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Optional. If true, enables NFS 3.0 support for the storage account. Requires enableHierarchicalNamespace to be true."
      }
    },
    "diagnosticSettings": {
      "$ref": "#/definitions/diagnosticSettingType",
      "metadata": {
        "description": "Optional. The diagnostic settings of the service."
      }
    },
    "lock": {
      "$ref": "#/definitions/lockType",
      "metadata": {
        "description": "Optional. The lock settings of the service."
      }
    },
    "tags": {
      "type": "object",
      "nullable": true,
      "metadata": {
        "description": "Optional. Tags of the resource."
      }
    },
    "enableTelemetry": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Optional. Enable/Disable usage telemetry for module."
      }
    },
    "allowedCopyScope": {
      "type": "string",
      "defaultValue": "",
      "allowedValues": [
        "",
        "AAD",
        "PrivateLink"
      ],
      "metadata": {
        "description": "Optional. Restrict copy to and from Storage Accounts within an AAD tenant or with Private Links to the same VNet."
      }
    },
    "publicNetworkAccess": {
      "type": "string",
      "defaultValue": "",
      "allowedValues": [
        "",
        "Enabled",
        "Disabled"
      ],
      "metadata": {
        "description": "Optional. Whether or not public network access is allowed for this resource. For security reasons it should be disabled. If not specified, it will be disabled by default if private endpoints are set and networkAcls are not set."
      }
    },
    "supportsHttpsTrafficOnly": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Optional. Allows HTTPS traffic only to storage service if sets to true."
      }
    },
    "customerManagedKey": {
      "$ref": "#/definitions/customerManagedKeyType",
      "metadata": {
        "description": "Optional. The customer managed key definition."
      }
    },
    "sasExpirationPeriod": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Optional. The SAS expiration period. DD.HH:MM:SS."
      }
    }
  },
  "variables": {
    "supportsBlobService": "[or(or(or(equals(parameters('kind'), 'BlockBlobStorage'), equals(parameters('kind'), 'BlobStorage')), equals(parameters('kind'), 'StorageV2')), equals(parameters('kind'), 'Storage'))]",
    "supportsFileService": "[or(or(equals(parameters('kind'), 'FileStorage'), equals(parameters('kind'), 'StorageV2')), equals(parameters('kind'), 'Storage'))]",
    "formattedUserAssignedIdentities": "[reduce(map(coalesce(tryGet(parameters('managedIdentities'), 'userAssignedResourceIds'), createArray()), lambda('id', createObject(format('{0}', lambdaVariables('id')), createObject()))), createObject(), lambda('cur', 'next', union(lambdaVariables('cur'), lambdaVariables('next'))))]",
    "identity": "[if(not(empty(parameters('managedIdentities'))), createObject('type', if(coalesce(tryGet(parameters('managedIdentities'), 'systemAssigned'), false()), if(not(empty(coalesce(tryGet(parameters('managedIdentities'), 'userAssignedResourceIds'), createObject()))), 'SystemAssigned,UserAssigned', 'SystemAssigned'), if(not(empty(coalesce(tryGet(parameters('managedIdentities'), 'userAssignedResourceIds'), createObject()))), 'UserAssigned', null())), 'userAssignedIdentities', if(not(empty(variables('formattedUserAssignedIdentities'))), variables('formattedUserAssignedIdentities'), null())), null())]",
    "builtInRoleNames": {
      "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
      "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
      "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
      "Reader and Data Access": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'c12c1c16-33a1-487b-954d-41c89c60f349')]",
      "Role Based Access Control Administrator (Preview)": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]",
      "Storage Account Backup Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'e5e2a7ff-d759-4cd2-bb51-3152d37e2eb1')]",
      "Storage Account Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '17d1049b-9a84-46fb-8f53-869881c3d3ab')]",
      "Storage Account Key Operator Service Role": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '81a9662b-bebf-436f-a333-f67b29880f12')]",
      "Storage Blob Data Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'ba92f5b4-2d11-453d-a403-e96b0029c9fe')]",
      "Storage Blob Data Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b7e6dc6d-f1e8-4753-8033-0f276bb0955b')]",
      "Storage Blob Data Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '2a2b9908-6ea1-4ae2-8e65-a410df84e7d1')]",
      "Storage Blob Delegator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'db58b8e5-c6ad-4a2a-8342-4190687cbf4a')]",
      "Storage File Data SMB Share Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '0c867c2a-1d8c-454a-a3db-ab2ea1bdc8bb')]",
      "Storage File Data SMB Share Elevated Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'a7264617-510b-434b-a828-9731dc254ea7')]",
      "Storage File Data SMB Share Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'aba4ae5f-2193-4029-9191-0cb91df5e314')]",
      "Storage Queue Data Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '974c5e8b-45b9-4653-ba55-5f855dd0fb88')]",
      "Storage Queue Data Message Processor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8a0f0c08-91a1-4084-bc3d-661d67233fed')]",
      "Storage Queue Data Message Sender": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'c6a89b2d-59bc-44d0-9896-0f6e12d7b80a')]",
      "Storage Queue Data Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '19e7f393-937e-4f77-808e-94535e297925')]",
      "Storage Table Data Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '0a9a7e1f-b9d0-4cc4-a60d-0319b160aaa3')]",
      "Storage Table Data Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '76199698-9eea-4c19-bc75-cec21354c6b6')]",
      "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]"
    }
  },
  "resources": {
    "cMKKeyVault::cMKKey": {
      "condition": "[and(not(empty(tryGet(parameters('customerManagedKey'), 'keyVaultResourceId'))), and(not(empty(tryGet(parameters('customerManagedKey'), 'keyVaultResourceId'))), not(empty(tryGet(parameters('customerManagedKey'), 'keyName')))))]",
      "existing": true,
      "type": "Microsoft.KeyVault/vaults/keys",
      "apiVersion": "2023-02-01",
      "subscriptionId": "[split(coalesce(tryGet(parameters('customerManagedKey'), 'keyVaultResourceId'), '//'), '/')[2]]",
      "resourceGroup": "[split(coalesce(tryGet(parameters('customerManagedKey'), 'keyVaultResourceId'), '////'), '/')[4]]",
      "name": "[format('{0}/{1}', last(split(coalesce(tryGet(parameters('customerManagedKey'), 'keyVaultResourceId'), 'dummyVault'), '/')), coalesce(tryGet(parameters('customerManagedKey'), 'keyName'), 'dummyKey'))]",
      "dependsOn": [
        "cMKKeyVault"
      ]
    },
    "avmTelemetry": {
      "condition": "[parameters('enableTelemetry')]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2023-07-01",
      "name": "[format('46d3xbcp.res.storage-storageaccount.{0}.{1}', replace('-..--..-', '.', '-'), substring(uniqueString(deployment().name, parameters('location')), 0, 4))]",
      "properties": {
        "mode": "Incremental",
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "resources": [],
          "outputs": {
            "telemetry": {
              "type": "String",
              "value": "For more information, see https://aka.ms/avm/TelemetryInfo"
            }
          }
        }
      }
    },
    "cMKKeyVault": {
      "condition": "[not(empty(tryGet(parameters('customerManagedKey'), 'keyVaultResourceId')))]",
      "existing": true,
      "type": "Microsoft.KeyVault/vaults",
      "apiVersion": "2023-02-01",
      "subscriptionId": "[split(coalesce(tryGet(parameters('customerManagedKey'), 'keyVaultResourceId'), '//'), '/')[2]]",
      "resourceGroup": "[split(coalesce(tryGet(parameters('customerManagedKey'), 'keyVaultResourceId'), '////'), '/')[4]]",
      "name": "[last(split(coalesce(tryGet(parameters('customerManagedKey'), 'keyVaultResourceId'), 'dummyVault'), '/'))]"
    },
    "cMKUserAssignedIdentity": {
      "condition": "[not(empty(tryGet(parameters('customerManagedKey'), 'userAssignedIdentityResourceId')))]",
      "existing": true,
      "type": "Microsoft.ManagedIdentity/userAssignedIdentities",
      "apiVersion": "2023-01-31",
      "subscriptionId": "[split(coalesce(tryGet(parameters('customerManagedKey'), 'userAssignedIdentityResourceId'), '//'), '/')[2]]",
      "resourceGroup": "[split(coalesce(tryGet(parameters('customerManagedKey'), 'userAssignedIdentityResourceId'), '////'), '/')[4]]",
      "name": "[last(split(coalesce(tryGet(parameters('customerManagedKey'), 'userAssignedIdentityResourceId'), 'dummyMsi'), '/'))]"
    },
    "storageAccount": {
      "type": "Microsoft.Storage/storageAccounts",
      "apiVersion": "2022-09-01",
      "name": "[parameters('name')]",
      "location": "[parameters('location')]",
      "kind": "[parameters('kind')]",
      "sku": {
        "name": "[parameters('skuName')]"
      },
      "identity": "[variables('identity')]",
      "tags": "[parameters('tags')]",
      "properties": {
        "allowSharedKeyAccess": "[parameters('allowSharedKeyAccess')]",
        "defaultToOAuthAuthentication": "[parameters('defaultToOAuthAuthentication')]",
        "allowCrossTenantReplication": "[parameters('allowCrossTenantReplication')]",
        "allowedCopyScope": "[if(not(empty(parameters('allowedCopyScope'))), parameters('allowedCopyScope'), null())]",
        "customDomain": {
          "name": "[parameters('customDomainName')]",
          "useSubDomainName": "[parameters('customDomainUseSubDomainName')]"
        },
        "dnsEndpointType": "[if(not(empty(parameters('dnsEndpointType'))), parameters('dnsEndpointType'), null())]",
        "isLocalUserEnabled": "[parameters('isLocalUserEnabled')]",
        "encryption": "[union(createObject('keySource', if(not(empty(parameters('customerManagedKey'))), 'Microsoft.Keyvault', 'Microsoft.Storage'), 'services', createObject('blob', if(variables('supportsBlobService'), createObject('enabled', true()), null()), 'file', if(variables('supportsFileService'), createObject('enabled', true()), null()), 'table', createObject('enabled', true()), 'queue', createObject('enabled', true())), 'keyvaultproperties', if(not(empty(parameters('customerManagedKey'))), createObject('keyname', parameters('customerManagedKey').keyName, 'keyvaulturi', reference('cMKKeyVault').vaultUri, 'keyversion', if(not(empty(coalesce(tryGet(parameters('customerManagedKey'), 'keyVersion'), ''))), parameters('customerManagedKey').keyVersion, last(split(reference('cMKKeyVault::cMKKey').keyUriWithVersion, '/')))), null()), 'identity', createObject('userAssignedIdentity', if(not(empty(tryGet(parameters('customerManagedKey'), 'userAssignedIdentityResourceId'))), extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(coalesce(tryGet(parameters('customerManagedKey'), 'userAssignedIdentityResourceId'), '//'), '/')[2], split(coalesce(tryGet(parameters('customerManagedKey'), 'userAssignedIdentityResourceId'), '////'), '/')[4]), 'Microsoft.ManagedIdentity/userAssignedIdentities', last(split(coalesce(tryGet(parameters('customerManagedKey'), 'userAssignedIdentityResourceId'), 'dummyMsi'), '/'))), null()))), if(parameters('requireInfrastructureEncryption'), createObject('requireInfrastructureEncryption', if(not(equals(parameters('kind'), 'Storage')), parameters('requireInfrastructureEncryption'), null())), createObject()))]",
        "accessTier": "[if(and(not(equals(parameters('kind'), 'Storage')), not(equals(parameters('kind'), 'BlockBlobStorage'))), parameters('accessTier'), null())]",
        "sasPolicy": "[if(not(empty(parameters('sasExpirationPeriod'))), createObject('expirationAction', 'Log', 'sasExpirationPeriod', parameters('sasExpirationPeriod')), null())]",
        "supportsHttpsTrafficOnly": "[parameters('supportsHttpsTrafficOnly')]",
        "isHnsEnabled": "[if(parameters('enableHierarchicalNamespace'), parameters('enableHierarchicalNamespace'), null())]",
        "isSftpEnabled": "[parameters('enableSftp')]",
        "isNfsV3Enabled": "[if(parameters('enableNfsV3'), parameters('enableNfsV3'), '')]",
        "largeFileSharesState": "[if(or(equals(parameters('skuName'), 'Standard_LRS'), equals(parameters('skuName'), 'Standard_ZRS')), parameters('largeFileSharesState'), null())]",
        "minimumTlsVersion": "[parameters('minimumTlsVersion')]",
        "networkAcls": "[if(not(empty(parameters('networkAcls'))), createObject('resourceAccessRules', tryGet(parameters('networkAcls'), 'resourceAccessRules'), 'bypass', tryGet(parameters('networkAcls'), 'bypass'), 'defaultAction', tryGet(parameters('networkAcls'), 'defaultAction'), 'virtualNetworkRules', tryGet(parameters('networkAcls'), 'virtualNetworkRules'), 'ipRules', tryGet(parameters('networkAcls'), 'ipRules')), null())]",
        "allowBlobPublicAccess": "[parameters('allowBlobPublicAccess')]",
        "publicNetworkAccess": "[if(not(empty(parameters('publicNetworkAccess'))), parameters('publicNetworkAccess'), if(and(not(empty(parameters('privateEndpoints'))), empty(parameters('networkAcls'))), 'Disabled', null()))]",
        "azureFilesIdentityBasedAuthentication": "[if(not(empty(parameters('azureFilesIdentityBasedAuthentication'))), parameters('azureFilesIdentityBasedAuthentication'), null())]"
      },
      "dependsOn": [
        "cMKKeyVault",
        "cMKUserAssignedIdentity"
      ]
    },
    "storageAccount_diagnosticSettings": {
      "copy": {
        "name": "storageAccount_diagnosticSettings",
        "count": "[length(coalesce(parameters('diagnosticSettings'), createArray()))]"
      },
      "type": "Microsoft.Insights/diagnosticSettings",
      "apiVersion": "2021-05-01-preview",
      "scope": "[format('Microsoft.Storage/storageAccounts/{0}', parameters('name'))]",
      "name": "[coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'name'), format('{0}-diagnosticSettings', parameters('name')))]",
      "properties": {
        "copy": [
          {
            "name": "metrics",
            "count": "[length(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics'))))]",
            "input": {
              "category": "[coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics')))[copyIndex('metrics')].category]",
              "enabled": "[coalesce(tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics')))[copyIndex('metrics')], 'enabled'), true())]",
              "timeGrain": null
            }
          }
        ],
        "storageAccountId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'storageAccountResourceId')]",
        "workspaceId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'workspaceResourceId')]",
        "eventHubAuthorizationRuleId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'eventHubAuthorizationRuleResourceId')]",
        "eventHubName": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'eventHubName')]",
        "marketplacePartnerId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'marketplacePartnerResourceId')]",
        "logAnalyticsDestinationType": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logAnalyticsDestinationType')]"
      },
      "dependsOn": [
        "storageAccount"
      ]
    },
    "storageAccount_lock": {
      "condition": "[and(not(empty(coalesce(parameters('lock'), createObject()))), not(equals(tryGet(parameters('lock'), 'kind'), 'None')))]",
      "type": "Microsoft.Authorization/locks",
      "apiVersion": "2020-05-01",
      "scope": "[format('Microsoft.Storage/storageAccounts/{0}', parameters('name'))]",
      "name": "[coalesce(tryGet(parameters('lock'), 'name'), format('lock-{0}', parameters('name')))]",
      "properties": {
        "level": "[coalesce(tryGet(parameters('lock'), 'kind'), '')]",
        "notes": "[if(equals(tryGet(parameters('lock'), 'kind'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot delete or modify the resource or child resources.')]"
      },
      "dependsOn": [
        "storageAccount"
      ]
    },
    "storageAccount_roleAssignments": {
      "copy": {
        "name": "storageAccount_roleAssignments",
        "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]"
      },
      "type": "Microsoft.Authorization/roleAssignments",
      "apiVersion": "2022-04-01",
      "scope": "[format('Microsoft.Storage/storageAccounts/{0}', parameters('name'))]",
      "name": "[guid(resourceId('Microsoft.Storage/storageAccounts', parameters('name')), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].principalId, coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName)]",
      "properties": {
        "roleDefinitionId": "[if(contains(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName), variables('builtInRoleNames')[coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName], if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName)))]",
        "principalId": "[coalesce(parameters('roleAssignments'), createArray())[copyIndex()].principalId]",
        "description": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'description')]",
        "principalType": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'principalType')]",
        "condition": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'condition')]",
        "conditionVersion": "[if(not(empty(tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
        "delegatedManagedIdentityResourceId": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
      },
      "dependsOn": [
        "storageAccount"
      ]
    },
    "storageAccount_privateEndpoints": {
      "copy": {
        "name": "storageAccount_privateEndpoints",
        "count": "[length(coalesce(parameters('privateEndpoints'), createArray()))]"
      },
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('{0}-StorageAccount-PrivateEndpoint-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "name": {
            "value": "[coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'name'), format('pep-{0}-{1}-{2}', last(split(resourceId('Microsoft.Storage/storageAccounts', parameters('name')), '/')), coalesce(parameters('privateEndpoints'), createArray())[copyIndex()].service, copyIndex()))]"
          },
          "privateLinkServiceConnections": "[if(not(equals(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'manualPrivateLinkServiceConnections'), true())), createObject('value', createArray(createObject('name', coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'privateLinkServiceConnectionName'), format('{0}-{1}-{2}', last(split(resourceId('Microsoft.Storage/storageAccounts', parameters('name')), '/')), coalesce(parameters('privateEndpoints'), createArray())[copyIndex()].service, copyIndex())), 'properties', createObject('privateLinkServiceId', resourceId('Microsoft.Storage/storageAccounts', parameters('name')), 'groupIds', createArray(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()].service))))), createObject('value', null()))]",
          "manualPrivateLinkServiceConnections": "[if(equals(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'manualPrivateLinkServiceConnections'), true()), createObject('value', createArray(createObject('name', coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'privateLinkServiceConnectionName'), format('{0}-{1}-{2}', last(split(resourceId('Microsoft.Storage/storageAccounts', parameters('name')), '/')), coalesce(parameters('privateEndpoints'), createArray())[copyIndex()].service, copyIndex())), 'properties', createObject('privateLinkServiceId', resourceId('Microsoft.Storage/storageAccounts', parameters('name')), 'groupIds', createArray(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()].service), 'requestMessage', coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'manualConnectionRequestMessage'), 'Manual approval required.'))))), createObject('value', null()))]",
          "subnetResourceId": {
            "value": "[coalesce(parameters('privateEndpoints'), createArray())[copyIndex()].subnetResourceId]"
          },
          "enableTelemetry": {
            "value": "[coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'enableTelemetry'), parameters('enableTelemetry'))]"
          },
          "location": {
            "value": "[coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'location'), reference(split(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()].subnetResourceId, '/subnets/')[0], '2020-06-01', 'Full').location)]"
          },
          "lock": {
            "value": "[coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'lock'), parameters('lock'))]"
          },
          "privateDnsZoneGroupName": {
            "value": "[tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'privateDnsZoneGroupName')]"
          },
          "privateDnsZoneResourceIds": {
            "value": "[tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'privateDnsZoneResourceIds')]"
          },
          "roleAssignments": {
            "value": "[tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'roleAssignments')]"
          },
          "tags": {
            "value": "[coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'tags'), parameters('tags'))]"
          },
          "customDnsConfigs": {
            "value": "[tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'customDnsConfigs')]"
          },
          "ipConfigurations": {
            "value": "[tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'ipConfigurations')]"
          },
          "applicationSecurityGroupResourceIds": {
            "value": "[tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'applicationSecurityGroupResourceIds')]"
          },
          "customNetworkInterfaceName": {
            "value": "[tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'customNetworkInterfaceName')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "languageVersion": "2.0",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.24.24.22086",
              "templateHash": "2592884001616184297"
            },
            "name": "Private Endpoints",
            "description": "This module deploys a Private Endpoint.",
            "owner": "Azure/module-maintainers"
          },
          "definitions": {
            "roleAssignmentType": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "roleDefinitionIdOrName": {
                    "type": "string",
                    "metadata": {
                      "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                    }
                  },
                  "principalId": {
                    "type": "string",
                    "metadata": {
                      "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                    }
                  },
                  "principalType": {
                    "type": "string",
                    "allowedValues": [
                      "Device",
                      "ForeignGroup",
                      "Group",
                      "ServicePrincipal",
                      "User"
                    ],
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. The principal type of the assigned principal ID."
                    }
                  },
                  "description": {
                    "type": "string",
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. The description of the role assignment."
                    }
                  },
                  "condition": {
                    "type": "string",
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                    }
                  },
                  "conditionVersion": {
                    "type": "string",
                    "allowedValues": [
                      "2.0"
                    ],
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. Version of the condition."
                    }
                  },
                  "delegatedManagedIdentityResourceId": {
                    "type": "string",
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. The Resource Id of the delegated managed identity resource."
                    }
                  }
                }
              },
              "nullable": true
            },
            "lockType": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Specify the name of lock."
                  }
                },
                "kind": {
                  "type": "string",
                  "allowedValues": [
                    "CanNotDelete",
                    "None",
                    "ReadOnly"
                  ],
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Specify the type of lock."
                  }
                }
              },
              "nullable": true
            },
            "ipConfigurationsType": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "metadata": {
                      "description": "Required. The name of the resource that is unique within a resource group."
                    }
                  },
                  "properties": {
                    "type": "object",
                    "properties": {
                      "groupId": {
                        "type": "string",
                        "metadata": {
                          "description": "Required. The ID of a group obtained from the remote resource that this private endpoint should connect to."
                        }
                      },
                      "memberName": {
                        "type": "string",
                        "metadata": {
                          "description": "Required. The member name of a group obtained from the remote resource that this private endpoint should connect to."
                        }
                      },
                      "privateIPAddress": {
                        "type": "string",
                        "metadata": {
                          "description": "Required. A private IP address obtained from the private endpoint's subnet."
                        }
                      }
                    },
                    "metadata": {
                      "description": "Required. Properties of private endpoint IP configurations."
                    }
                  }
                }
              },
              "nullable": true
            },
            "manualPrivateLinkServiceConnectionsType": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "metadata": {
                      "description": "Required. The name of the private link service connection."
                    }
                  },
                  "properties": {
                    "type": "object",
                    "properties": {
                      "groupIds": {
                        "type": "array",
                        "metadata": {
                          "description": "Required. The ID of a group obtained from the remote resource that this private endpoint should connect to."
                        }
                      },
                      "privateLinkServiceId": {
                        "type": "string",
                        "metadata": {
                          "description": "Required. The resource id of private link service."
                        }
                      },
                      "requestMessage": {
                        "type": "string",
                        "metadata": {
                          "description": "Optional. A message passed to the owner of the remote resource with this connection request. Restricted to 140 chars."
                        }
                      }
                    },
                    "metadata": {
                      "description": "Required. Properties of private link service connection."
                    }
                  }
                }
              },
              "nullable": true
            },
            "privateLinkServiceConnectionsType": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "metadata": {
                      "description": "Required. The name of the private link service connection."
                    }
                  },
                  "properties": {
                    "type": "object",
                    "properties": {
                      "groupIds": {
                        "type": "array",
                        "metadata": {
                          "description": "Required. The ID of a group obtained from the remote resource that this private endpoint should connect to."
                        }
                      },
                      "privateLinkServiceId": {
                        "type": "string",
                        "metadata": {
                          "description": "Required. The resource id of private link service."
                        }
                      },
                      "requestMessage": {
                        "type": "string",
                        "nullable": true,
                        "metadata": {
                          "description": "Optional. A message passed to the owner of the remote resource with this connection request. Restricted to 140 chars."
                        }
                      }
                    },
                    "metadata": {
                      "description": "Required. Properties of private link service connection."
                    }
                  }
                }
              },
              "nullable": true
            },
            "customDnsConfigType": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "fqdn": {
                    "type": "string",
                    "metadata": {
                      "description": "Required. Fqdn that resolves to private endpoint IP address."
                    }
                  },
                  "ipAddresses": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "metadata": {
                      "description": "Required. A list of private IP addresses of the private endpoint."
                    }
                  }
                }
              },
              "nullable": true
            }
          },
          "parameters": {
            "name": {
              "type": "string",
              "metadata": {
                "description": "Required. Name of the private endpoint resource to create."
              }
            },
            "subnetResourceId": {
              "type": "string",
              "metadata": {
                "description": "Required. Resource ID of the subnet where the endpoint needs to be created."
              }
            },
            "applicationSecurityGroupResourceIds": {
              "type": "array",
              "nullable": true,
              "metadata": {
                "description": "Optional. Application security groups in which the private endpoint IP configuration is included."
              }
            },
            "customNetworkInterfaceName": {
              "type": "string",
              "nullable": true,
              "metadata": {
                "description": "Optional. The custom name of the network interface attached to the private endpoint."
              }
            },
            "ipConfigurations": {
              "$ref": "#/definitions/ipConfigurationsType",
              "metadata": {
                "description": "Optional. A list of IP configurations of the private endpoint. This will be used to map to the First Party Service endpoints."
              }
            },
            "privateDnsZoneGroupName": {
              "type": "string",
              "nullable": true,
              "metadata": {
                "description": "Optional. The name of the private DNS zone group to create if `privateDnsZoneResourceIds` were provided."
              }
            },
            "privateDnsZoneResourceIds": {
              "type": "array",
              "nullable": true,
              "metadata": {
                "description": "Optional. The private DNS zone groups to associate the private endpoint. A DNS zone group can support up to 5 DNS zones."
              }
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]",
              "metadata": {
                "description": "Optional. Location for all Resources."
              }
            },
            "lock": {
              "$ref": "#/definitions/lockType",
              "metadata": {
                "description": "Optional. The lock settings of the service."
              }
            },
            "roleAssignments": {
              "$ref": "#/definitions/roleAssignmentType",
              "metadata": {
                "description": "Optional. Array of role assignments to create."
              }
            },
            "tags": {
              "type": "object",
              "nullable": true,
              "metadata": {
                "description": "Optional. Tags to be applied on all resources/resource groups in this deployment."
              }
            },
            "customDnsConfigs": {
              "$ref": "#/definitions/customDnsConfigType",
              "metadata": {
                "description": "Optional. Custom DNS configurations."
              }
            },
            "manualPrivateLinkServiceConnections": {
              "$ref": "#/definitions/manualPrivateLinkServiceConnectionsType",
              "metadata": {
                "description": "Optional. A grouping of information about the connection to the remote resource. Used when the network admin does not have access to approve connections to the remote resource."
              }
            },
            "privateLinkServiceConnections": {
              "$ref": "#/definitions/privateLinkServiceConnectionsType",
              "metadata": {
                "description": "Optional. A grouping of information about the connection to the remote resource."
              }
            },
            "enableTelemetry": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Optional. Enable/Disable usage telemetry for module."
              }
            }
          },
          "variables": {
            "builtInRoleNames": {
              "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
              "DNS Resolver Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '0f2ebee7-ffd4-4fc0-b3b7-664099fdad5d')]",
              "DNS Zone Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'befefa01-2a29-4197-83a8-272ff33ce314')]",
              "Domain Services Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'eeaeda52-9324-47f6-8069-5d5bade478b2')]",
              "Domain Services Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '361898ef-9ed1-48c2-849c-a832951106bb')]",
              "Network Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4d97b98b-1d4f-4787-a291-c67834d212e7')]",
              "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
              "Private DNS Zone Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b12aa53e-6015-4669-85d0-8515ebb3ae7f')]",
              "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
              "Role Based Access Control Administrator (Preview)": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]"
            }
          },
          "resources": {
            "avmTelemetry": {
              "condition": "[parameters('enableTelemetry')]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2023-07-01",
              "name": "[format('46d3xbcp.res.network-privateendpoint.{0}.{1}', replace('0.4.0', '.', '-'), substring(uniqueString(deployment().name, parameters('location')), 0, 4))]",
              "properties": {
                "mode": "Incremental",
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "resources": [],
                  "outputs": {
                    "telemetry": {
                      "type": "String",
                      "value": "For more information, see https://aka.ms/avm/TelemetryInfo"
                    }
                  }
                }
              }
            },
            "privateEndpoint": {
              "type": "Microsoft.Network/privateEndpoints",
              "apiVersion": "2023-04-01",
              "name": "[parameters('name')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "properties": {
                "copy": [
                  {
                    "name": "applicationSecurityGroups",
                    "count": "[length(coalesce(parameters('applicationSecurityGroupResourceIds'), createArray()))]",
                    "input": {
                      "id": "[coalesce(parameters('applicationSecurityGroupResourceIds'), createArray())[copyIndex('applicationSecurityGroups')]]"
                    }
                  }
                ],
                "customDnsConfigs": "[coalesce(parameters('customDnsConfigs'), createArray())]",
                "customNetworkInterfaceName": "[coalesce(parameters('customNetworkInterfaceName'), '')]",
                "ipConfigurations": "[coalesce(parameters('ipConfigurations'), createArray())]",
                "manualPrivateLinkServiceConnections": "[coalesce(parameters('manualPrivateLinkServiceConnections'), createArray())]",
                "privateLinkServiceConnections": "[coalesce(parameters('privateLinkServiceConnections'), createArray())]",
                "subnet": {
                  "id": "[parameters('subnetResourceId')]"
                }
              }
            },
            "privateEndpoint_lock": {
              "condition": "[and(not(empty(coalesce(parameters('lock'), createObject()))), not(equals(tryGet(parameters('lock'), 'kind'), 'None')))]",
              "type": "Microsoft.Authorization/locks",
              "apiVersion": "2020-05-01",
              "scope": "[format('Microsoft.Network/privateEndpoints/{0}', parameters('name'))]",
              "name": "[coalesce(tryGet(parameters('lock'), 'name'), format('lock-{0}', parameters('name')))]",
              "properties": {
                "level": "[coalesce(tryGet(parameters('lock'), 'kind'), '')]",
                "notes": "[if(equals(tryGet(parameters('lock'), 'kind'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot delete or modify the resource or child resources.')]"
              },
              "dependsOn": [
                "privateEndpoint"
              ]
            },
            "privateEndpoint_roleAssignments": {
              "copy": {
                "name": "privateEndpoint_roleAssignments",
                "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]"
              },
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.Network/privateEndpoints/{0}', parameters('name'))]",
              "name": "[guid(resourceId('Microsoft.Network/privateEndpoints', parameters('name')), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].principalId, coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName)]",
              "properties": {
                "roleDefinitionId": "[if(contains(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName), variables('builtInRoleNames')[coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName], if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName)))]",
                "principalId": "[coalesce(parameters('roleAssignments'), createArray())[copyIndex()].principalId]",
                "description": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'description')]",
                "principalType": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'principalType')]",
                "condition": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'condition')]",
                "conditionVersion": "[if(not(empty(tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                "delegatedManagedIdentityResourceId": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
              },
              "dependsOn": [
                "privateEndpoint"
              ]
            },
            "privateEndpoint_privateDnsZoneGroup": {
              "condition": "[not(empty(parameters('privateDnsZoneResourceIds')))]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('{0}-PrivateEndpoint-PrivateDnsZoneGroup', uniqueString(deployment().name))]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "name": {
                    "value": "[coalesce(parameters('privateDnsZoneGroupName'), 'default')]"
                  },
                  "privateDNSResourceIds": {
                    "value": "[coalesce(parameters('privateDnsZoneResourceIds'), createArray())]"
                  },
                  "privateEndpointName": {
                    "value": "[parameters('name')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.24.24.22086",
                      "templateHash": "9321937464667207030"
                    },
                    "name": "Private Endpoint Private DNS Zone Groups",
                    "description": "This module deploys a Private Endpoint Private DNS Zone Group.",
                    "owner": "Azure/module-maintainers"
                  },
                  "parameters": {
                    "privateEndpointName": {
                      "type": "string",
                      "metadata": {
                        "description": "Conditional. The name of the parent private endpoint. Required if the template is used in a standalone deployment."
                      }
                    },
                    "privateDNSResourceIds": {
                      "type": "array",
                      "minLength": 1,
                      "maxLength": 5,
                      "metadata": {
                        "description": "Required. Array of private DNS zone resource IDs. A DNS zone group can support up to 5 DNS zones."
                      }
                    },
                    "name": {
                      "type": "string",
                      "defaultValue": "default",
                      "metadata": {
                        "description": "Optional. The name of the private DNS zone group."
                      }
                    }
                  },
                  "variables": {
                    "copy": [
                      {
                        "name": "privateDnsZoneConfigs",
                        "count": "[length(parameters('privateDNSResourceIds'))]",
                        "input": {
                          "name": "[last(split(parameters('privateDNSResourceIds')[copyIndex('privateDnsZoneConfigs')], '/'))]",
                          "properties": {
                            "privateDnsZoneId": "[parameters('privateDNSResourceIds')[copyIndex('privateDnsZoneConfigs')]]"
                          }
                        }
                      }
                    ]
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
                      "apiVersion": "2023-04-01",
                      "name": "[format('{0}/{1}', parameters('privateEndpointName'), parameters('name'))]",
                      "properties": {
                        "privateDnsZoneConfigs": "[variables('privateDnsZoneConfigs')]"
                      }
                    }
                  ],
                  "outputs": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the private endpoint DNS zone group."
                      },
                      "value": "[parameters('name')]"
                    },
                    "resourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the private endpoint DNS zone group."
                      },
                      "value": "[resourceId('Microsoft.Network/privateEndpoints/privateDnsZoneGroups', parameters('privateEndpointName'), parameters('name'))]"
                    },
                    "resourceGroupName": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource group the private endpoint DNS zone group was deployed into."
                      },
                      "value": "[resourceGroup().name]"
                    }
                  }
                }
              },
              "dependsOn": [
                "privateEndpoint"
              ]
            }
          },
          "outputs": {
            "resourceGroupName": {
              "type": "string",
              "metadata": {
                "description": "The resource group the private endpoint was deployed into."
              },
              "value": "[resourceGroup().name]"
            },
            "resourceId": {
              "type": "string",
              "metadata": {
                "description": "The resource ID of the private endpoint."
              },
              "value": "[resourceId('Microsoft.Network/privateEndpoints', parameters('name'))]"
            },
            "name": {
              "type": "string",
              "metadata": {
                "description": "The name of the private endpoint."
              },
              "value": "[parameters('name')]"
            },
            "location": {
              "type": "string",
              "metadata": {
                "description": "The location the resource was deployed into."
              },
              "value": "[reference('privateEndpoint', '2023-04-01', 'full').location]"
            },
            "groupId": {
              "type": "string",
              "metadata": {
                "description": "The group Id for the private endpoint Group."
              },
              "value": "[if(not(empty(reference('privateEndpoint').manualPrivateLinkServiceConnections)), reference('privateEndpoint').manualPrivateLinkServiceConnections[0].properties.groupIds[0], reference('privateEndpoint').privateLinkServiceConnections[0].properties.groupIds[0])]"
            }
          }
        }
      },
      "dependsOn": [
        "storageAccount"
      ]
    },
    "storageAccount_managementPolicies": {
      "condition": "[not(empty(coalesce(parameters('managementPolicyRules'), createArray())))]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('{0}-Storage-ManagementPolicies', uniqueString(deployment().name, parameters('location')))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "storageAccountName": {
            "value": "[parameters('name')]"
          },
          "rules": {
            "value": "[coalesce(parameters('managementPolicyRules'), createArray())]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.25.53.49325",
              "templateHash": "774635646248081518"
            },
            "name": "Storage Account Management Policies",
            "description": "This module deploys a Storage Account Management Policy.",
            "owner": "Azure/module-maintainers"
          },
          "parameters": {
            "storageAccountName": {
              "type": "string",
              "maxLength": 24,
              "metadata": {
                "description": "Conditional. The name of the parent Storage Account. Required if the template is used in a standalone deployment."
              }
            },
            "rules": {
              "type": "array",
              "metadata": {
                "description": "Required. The Storage Account ManagementPolicies Rules."
              }
            }
          },
          "resources": [
            {
              "type": "Microsoft.Storage/storageAccounts/managementPolicies",
              "apiVersion": "2023-01-01",
              "name": "[format('{0}/{1}', parameters('storageAccountName'), 'default')]",
              "properties": {
                "policy": {
                  "rules": "[parameters('rules')]"
                }
              }
            }
          ],
          "outputs": {
            "resourceId": {
              "type": "string",
              "metadata": {
                "description": "The resource ID of the deployed management policy."
              },
              "value": "default"
            },
            "name": {
              "type": "string",
              "metadata": {
                "description": "The name of the deployed management policy."
              },
              "value": "default"
            },
            "resourceGroupName": {
              "type": "string",
              "metadata": {
                "description": "The resource group of the deployed management policy."
              },
              "value": "[resourceGroup().name]"
            }
          }
        }
      },
      "dependsOn": [
        "storageAccount",
        "storageAccount_blobServices"
      ]
    },
    "storageAccount_localUsers": {
      "copy": {
        "name": "storageAccount_localUsers",
        "count": "[length(parameters('localUsers'))]"
      },
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('{0}-Storage-LocalUsers-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "storageAccountName": {
            "value": "[parameters('name')]"
          },
          "name": {
            "value": "[parameters('localUsers')[copyIndex()].name]"
          },
          "hasSshKey": {
            "value": "[parameters('localUsers')[copyIndex()].hasSshKey]"
          },
          "hasSshPassword": {
            "value": "[parameters('localUsers')[copyIndex()].hasSshPassword]"
          },
          "permissionScopes": {
            "value": "[parameters('localUsers')[copyIndex()].permissionScopes]"
          },
          "hasSharedKey": {
            "value": "[tryGet(parameters('localUsers')[copyIndex()], 'hasSharedKey')]"
          },
          "homeDirectory": {
            "value": "[tryGet(parameters('localUsers')[copyIndex()], 'homeDirectory')]"
          },
          "sshAuthorizedKeys": {
            "value": "[tryGet(parameters('localUsers')[copyIndex()], 'sshAuthorizedKeys')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "languageVersion": "2.0",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.25.53.49325",
              "templateHash": "17117452291389534361"
            },
            "name": "Storage Account Local Users",
            "description": "This module deploys a Storage Account Local User, which is used for SFTP authentication.",
            "owner": "Azure/module-maintainers"
          },
          "definitions": {
            "sshAuthorizedKeysType": {
              "type": "secureObject",
              "properties": {
                "secureList": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "description": {
                        "type": "string",
                        "nullable": true,
                        "metadata": {
                          "description": "Optional. Description used to store the function/usage of the key."
                        }
                      },
                      "key": {
                        "type": "string",
                        "metadata": {
                          "description": "Required. SSH public key base64 encoded. The format should be: '{keyType} {keyData}', e.g. ssh-rsa AAAABBBB."
                        }
                      }
                    }
                  },
                  "metadata": {
                    "description": "Optional. The list of SSH authorized keys."
                  }
                }
              },
              "nullable": true
            }
          },
          "parameters": {
            "storageAccountName": {
              "type": "string",
              "maxLength": 24,
              "metadata": {
                "description": "Conditional. The name of the parent Storage Account. Required if the template is used in a standalone deployment."
              }
            },
            "name": {
              "type": "string",
              "metadata": {
                "description": "Required. The name of the local user used for SFTP Authentication."
              }
            },
            "hasSharedKey": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Optional. Indicates whether shared key exists. Set it to false to remove existing shared key."
              }
            },
            "hasSshKey": {
              "type": "bool",
              "metadata": {
                "description": "Required. Indicates whether SSH key exists. Set it to false to remove existing SSH key."
              }
            },
            "hasSshPassword": {
              "type": "bool",
              "metadata": {
                "description": "Required. Indicates whether SSH password exists. Set it to false to remove existing SSH password."
              }
            },
            "homeDirectory": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. The local user home directory."
              }
            },
            "permissionScopes": {
              "type": "array",
              "metadata": {
                "description": "Required. The permission scopes of the local user."
              }
            },
            "sshAuthorizedKeys": {
              "$ref": "#/definitions/sshAuthorizedKeysType",
              "metadata": {
                "description": "Optional. The local user SSH authorized keys for SFTP."
              }
            }
          },
          "resources": {
            "storageAccount": {
              "existing": true,
              "type": "Microsoft.Storage/storageAccounts",
              "apiVersion": "2021-09-01",
              "name": "[parameters('storageAccountName')]"
            },
            "localUsers": {
              "type": "Microsoft.Storage/storageAccounts/localUsers",
              "apiVersion": "2022-05-01",
              "name": "[format('{0}/{1}', parameters('storageAccountName'), parameters('name'))]",
              "properties": {
                "hasSharedKey": "[parameters('hasSharedKey')]",
                "hasSshKey": "[parameters('hasSshKey')]",
                "hasSshPassword": "[parameters('hasSshPassword')]",
                "homeDirectory": "[parameters('homeDirectory')]",
                "permissionScopes": "[parameters('permissionScopes')]",
                "sshAuthorizedKeys": "[tryGet(parameters('sshAuthorizedKeys'), 'secureList')]"
              },
              "dependsOn": [
                "storageAccount"
              ]
            }
          },
          "outputs": {
            "name": {
              "type": "string",
              "metadata": {
                "description": "The name of the deployed local user."
              },
              "value": "[parameters('name')]"
            },
            "resourceGroupName": {
              "type": "string",
              "metadata": {
                "description": "The resource group of the deployed local user."
              },
              "value": "[resourceGroup().name]"
            },
            "resourceId": {
              "type": "string",
              "metadata": {
                "description": "The resource ID of the deployed local user."
              },
              "value": "[resourceId('Microsoft.Storage/storageAccounts/localUsers', parameters('storageAccountName'), parameters('name'))]"
            }
          }
        }
      },
      "dependsOn": [
        "storageAccount"
      ]
    },
    "storageAccount_blobServices": {
      "condition": "[not(empty(parameters('blobServices')))]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('{0}-Storage-BlobServices', uniqueString(deployment().name, parameters('location')))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "storageAccountName": {
            "value": "[parameters('name')]"
          },
          "containers": {
            "value": "[tryGet(parameters('blobServices'), 'containers')]"
          },
          "automaticSnapshotPolicyEnabled": {
            "value": "[tryGet(parameters('blobServices'), 'automaticSnapshotPolicyEnabled')]"
          },
          "changeFeedEnabled": {
            "value": "[tryGet(parameters('blobServices'), 'changeFeedEnabled')]"
          },
          "changeFeedRetentionInDays": {
            "value": "[tryGet(parameters('blobServices'), 'changeFeedRetentionInDays')]"
          },
          "containerDeleteRetentionPolicyEnabled": {
            "value": "[tryGet(parameters('blobServices'), 'containerDeleteRetentionPolicyEnabled')]"
          },
          "containerDeleteRetentionPolicyDays": {
            "value": "[tryGet(parameters('blobServices'), 'containerDeleteRetentionPolicyDays')]"
          },
          "containerDeleteRetentionPolicyAllowPermanentDelete": {
            "value": "[tryGet(parameters('blobServices'), 'containerDeleteRetentionPolicyAllowPermanentDelete')]"
          },
          "corsRules": {
            "value": "[tryGet(parameters('blobServices'), 'corsRules')]"
          },
          "defaultServiceVersion": {
            "value": "[tryGet(parameters('blobServices'), 'defaultServiceVersion')]"
          },
          "deleteRetentionPolicyAllowPermanentDelete": {
            "value": "[tryGet(parameters('blobServices'), 'deleteRetentionPolicyAllowPermanentDelete')]"
          },
          "deleteRetentionPolicyEnabled": {
            "value": "[tryGet(parameters('blobServices'), 'deleteRetentionPolicyEnabled')]"
          },
          "deleteRetentionPolicyDays": {
            "value": "[tryGet(parameters('blobServices'), 'deleteRetentionPolicyDays')]"
          },
          "isVersioningEnabled": {
            "value": "[tryGet(parameters('blobServices'), 'isVersioningEnabled')]"
          },
          "lastAccessTimeTrackingPolicyEnabled": {
            "value": "[tryGet(parameters('blobServices'), 'lastAccessTimeTrackingPolicyEnabled')]"
          },
          "restorePolicyEnabled": {
            "value": "[tryGet(parameters('blobServices'), 'restorePolicyEnabled')]"
          },
          "restorePolicyDays": {
            "value": "[tryGet(parameters('blobServices'), 'restorePolicyDays')]"
          },
          "diagnosticSettings": {
            "value": "[tryGet(parameters('blobServices'), 'diagnosticSettings')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "languageVersion": "2.0",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.25.53.49325",
              "templateHash": "4746835745355709536"
            },
            "name": "Storage Account blob Services",
            "description": "This module deploys a Storage Account Blob Service.",
            "owner": "Azure/module-maintainers"
          },
          "definitions": {
            "diagnosticSettingType": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. The name of diagnostic setting."
                    }
                  },
                  "logCategoriesAndGroups": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "category": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Name of a Diagnostic Log category for a resource type this setting is applied to. Set the specific logs to collect here."
                          }
                        },
                        "categoryGroup": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Name of a Diagnostic Log category group for a resource type this setting is applied to. Set to `allLogs` to collect all logs."
                          }
                        },
                        "enabled": {
                          "type": "bool",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Enable or disable the category explicitly. Default is `true`."
                          }
                        }
                      }
                    },
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. The name of logs that will be streamed. \"allLogs\" includes all possible logs for the resource. Set to `[]` to disable log collection."
                    }
                  },
                  "metricCategories": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "category": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. Name of a Diagnostic Metric category for a resource type this setting is applied to. Set to `AllMetrics` to collect all metrics."
                          }
                        },
                        "enabled": {
                          "type": "bool",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Enable or disable the category explicitly. Default is `true`."
                          }
                        }
                      }
                    },
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. The name of logs that will be streamed. \"allLogs\" includes all possible logs for the resource. Set to `[]` to disable log collection."
                    }
                  },
                  "logAnalyticsDestinationType": {
                    "type": "string",
                    "allowedValues": [
                      "AzureDiagnostics",
                      "Dedicated"
                    ],
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. A string indicating whether the export to Log Analytics should use the default destination type, i.e. AzureDiagnostics, or use a destination type."
                    }
                  },
                  "workspaceResourceId": {
                    "type": "string",
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. Resource ID of the diagnostic log analytics workspace. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                    }
                  },
                  "storageAccountResourceId": {
                    "type": "string",
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. Resource ID of the diagnostic storage account. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                    }
                  },
                  "eventHubAuthorizationRuleResourceId": {
                    "type": "string",
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. Resource ID of the diagnostic event hub authorization rule for the Event Hubs namespace in which the event hub should be created or streamed to."
                    }
                  },
                  "eventHubName": {
                    "type": "string",
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. Name of the diagnostic event hub within the namespace to which logs are streamed. Without this, an event hub is created for each log category. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                    }
                  },
                  "marketplacePartnerResourceId": {
                    "type": "string",
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. The full ARM resource ID of the Marketplace resource to which you would like to send Diagnostic Logs."
                    }
                  }
                }
              },
              "nullable": true
            }
          },
          "parameters": {
            "storageAccountName": {
              "type": "string",
              "maxLength": 24,
              "metadata": {
                "description": "Conditional. The name of the parent Storage Account. Required if the template is used in a standalone deployment."
              }
            },
            "automaticSnapshotPolicyEnabled": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Optional. Automatic Snapshot is enabled if set to true."
              }
            },
            "changeFeedEnabled": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Optional. The blob service properties for change feed events. Indicates whether change feed event logging is enabled for the Blob service."
              }
            },
            "changeFeedRetentionInDays": {
              "type": "int",
              "nullable": true,
              "minValue": 0,
              "maxValue": 146000,
              "metadata": {
                "description": "Optional. Indicates whether change feed event logging is enabled for the Blob service. Indicates the duration of changeFeed retention in days. A \"0\" value indicates an infinite retention of the change feed."
              }
            },
            "containerDeleteRetentionPolicyEnabled": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Optional. The blob service properties for container soft delete. Indicates whether DeleteRetentionPolicy is enabled."
              }
            },
            "containerDeleteRetentionPolicyDays": {
              "type": "int",
              "nullable": true,
              "minValue": 1,
              "maxValue": 365,
              "metadata": {
                "description": "Optional. Indicates the number of days that the deleted item should be retained."
              }
            },
            "containerDeleteRetentionPolicyAllowPermanentDelete": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Optional. This property when set to true allows deletion of the soft deleted blob versions and snapshots. This property cannot be used with blob restore policy. This property only applies to blob service and does not apply to containers or file share."
              }
            },
            "corsRules": {
              "type": "array",
              "defaultValue": [],
              "metadata": {
                "description": "Optional. Specifies CORS rules for the Blob service. You can include up to five CorsRule elements in the request. If no CorsRule elements are included in the request body, all CORS rules will be deleted, and CORS will be disabled for the Blob service."
              }
            },
            "defaultServiceVersion": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. Indicates the default version to use for requests to the Blob service if an incoming request's version is not specified. Possible values include version 2008-10-27 and all more recent versions."
              }
            },
            "deleteRetentionPolicyEnabled": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Optional. The blob service properties for blob soft delete."
              }
            },
            "deleteRetentionPolicyDays": {
              "type": "int",
              "defaultValue": 7,
              "minValue": 1,
              "maxValue": 365,
              "metadata": {
                "description": "Optional. Indicates the number of days that the deleted blob should be retained."
              }
            },
            "deleteRetentionPolicyAllowPermanentDelete": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Optional. This property when set to true allows deletion of the soft deleted blob versions and snapshots. This property cannot be used with blob restore policy. This property only applies to blob service and does not apply to containers or file share."
              }
            },
            "isVersioningEnabled": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Optional. Use versioning to automatically maintain previous versions of your blobs."
              }
            },
            "lastAccessTimeTrackingPolicyEnabled": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Optional. The blob service property to configure last access time based tracking policy. When set to true last access time based tracking is enabled."
              }
            },
            "restorePolicyEnabled": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Optional. The blob service properties for blob restore policy. If point-in-time restore is enabled, then versioning, change feed, and blob soft delete must also be enabled."
              }
            },
            "restorePolicyDays": {
              "type": "int",
              "defaultValue": 6,
              "minValue": 1,
              "metadata": {
                "description": "Optional. How long this blob can be restored. It should be less than DeleteRetentionPolicy days."
              }
            },
            "containers": {
              "type": "array",
              "nullable": true,
              "metadata": {
                "description": "Optional. Blob containers to create."
              }
            },
            "diagnosticSettings": {
              "$ref": "#/definitions/diagnosticSettingType",
              "metadata": {
                "description": "Optional. The diagnostic settings of the service."
              }
            }
          },
          "variables": {
            "name": "default"
          },
          "resources": {
            "storageAccount": {
              "existing": true,
              "type": "Microsoft.Storage/storageAccounts",
              "apiVersion": "2022-09-01",
              "name": "[parameters('storageAccountName')]"
            },
            "blobServices": {
              "type": "Microsoft.Storage/storageAccounts/blobServices",
              "apiVersion": "2022-09-01",
              "name": "[format('{0}/{1}', parameters('storageAccountName'), variables('name'))]",
              "properties": {
                "automaticSnapshotPolicyEnabled": "[parameters('automaticSnapshotPolicyEnabled')]",
                "changeFeed": "[if(parameters('changeFeedEnabled'), createObject('enabled', true(), 'retentionInDays', parameters('changeFeedRetentionInDays')), null())]",
                "containerDeleteRetentionPolicy": {
                  "enabled": "[parameters('containerDeleteRetentionPolicyEnabled')]",
                  "days": "[parameters('containerDeleteRetentionPolicyDays')]",
                  "allowPermanentDelete": "[if(equals(parameters('containerDeleteRetentionPolicyEnabled'), true()), parameters('containerDeleteRetentionPolicyAllowPermanentDelete'), null())]"
                },
                "cors": {
                  "corsRules": "[parameters('corsRules')]"
                },
                "defaultServiceVersion": "[if(not(empty(parameters('defaultServiceVersion'))), parameters('defaultServiceVersion'), null())]",
                "deleteRetentionPolicy": {
                  "enabled": "[parameters('deleteRetentionPolicyEnabled')]",
                  "days": "[parameters('deleteRetentionPolicyDays')]",
                  "allowPermanentDelete": "[if(and(parameters('deleteRetentionPolicyEnabled'), parameters('deleteRetentionPolicyAllowPermanentDelete')), true(), null())]"
                },
                "isVersioningEnabled": "[parameters('isVersioningEnabled')]",
                "lastAccessTimeTrackingPolicy": "[if(not(equals(reference('storageAccount', '2022-09-01', 'full').kind, 'Storage')), createObject('enable', parameters('lastAccessTimeTrackingPolicyEnabled'), 'name', if(equals(parameters('lastAccessTimeTrackingPolicyEnabled'), true()), 'AccessTimeTracking', null()), 'trackingGranularityInDays', if(equals(parameters('lastAccessTimeTrackingPolicyEnabled'), true()), 1, null())), null())]",
                "restorePolicy": "[if(parameters('restorePolicyEnabled'), createObject('enabled', true(), 'days', parameters('restorePolicyDays')), null())]"
              },
              "dependsOn": [
                "storageAccount"
              ]
            },
            "blobServices_diagnosticSettings": {
              "copy": {
                "name": "blobServices_diagnosticSettings",
                "count": "[length(coalesce(parameters('diagnosticSettings'), createArray()))]"
              },
              "type": "Microsoft.Insights/diagnosticSettings",
              "apiVersion": "2021-05-01-preview",
              "scope": "[format('Microsoft.Storage/storageAccounts/{0}/blobServices/{1}', parameters('storageAccountName'), variables('name'))]",
              "name": "[coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'name'), format('{0}-diagnosticSettings', variables('name')))]",
              "properties": {
                "copy": [
                  {
                    "name": "metrics",
                    "count": "[length(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics'))))]",
                    "input": {
                      "category": "[coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics')))[copyIndex('metrics')].category]",
                      "enabled": "[coalesce(tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics')))[copyIndex('metrics')], 'enabled'), true())]",
                      "timeGrain": null
                    }
                  },
                  {
                    "name": "logs",
                    "count": "[length(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs'))))]",
                    "input": {
                      "categoryGroup": "[tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'categoryGroup')]",
                      "category": "[tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'category')]",
                      "enabled": "[coalesce(tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'enabled'), true())]"
                    }
                  }
                ],
                "storageAccountId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'storageAccountResourceId')]",
                "workspaceId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'workspaceResourceId')]",
                "eventHubAuthorizationRuleId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'eventHubAuthorizationRuleResourceId')]",
                "eventHubName": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'eventHubName')]",
                "marketplacePartnerId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'marketplacePartnerResourceId')]",
                "logAnalyticsDestinationType": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logAnalyticsDestinationType')]"
              },
              "dependsOn": [
                "blobServices"
              ]
            },
            "blobServices_container": {
              "copy": {
                "name": "blobServices_container",
                "count": "[length(coalesce(parameters('containers'), createArray()))]"
              },
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('{0}-Container-{1}', deployment().name, copyIndex())]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "storageAccountName": {
                    "value": "[parameters('storageAccountName')]"
                  },
                  "name": {
                    "value": "[coalesce(parameters('containers'), createArray())[copyIndex()].name]"
                  },
                  "defaultEncryptionScope": {
                    "value": "[tryGet(coalesce(parameters('containers'), createArray())[copyIndex()], 'defaultEncryptionScope')]"
                  },
                  "denyEncryptionScopeOverride": {
                    "value": "[tryGet(coalesce(parameters('containers'), createArray())[copyIndex()], 'denyEncryptionScopeOverride')]"
                  },
                  "enableNfsV3AllSquash": {
                    "value": "[tryGet(coalesce(parameters('containers'), createArray())[copyIndex()], 'enableNfsV3AllSquash')]"
                  },
                  "enableNfsV3RootSquash": {
                    "value": "[tryGet(coalesce(parameters('containers'), createArray())[copyIndex()], 'enableNfsV3RootSquash')]"
                  },
                  "immutableStorageWithVersioningEnabled": {
                    "value": "[tryGet(coalesce(parameters('containers'), createArray())[copyIndex()], 'immutableStorageWithVersioningEnabled')]"
                  },
                  "metadata": {
                    "value": "[tryGet(coalesce(parameters('containers'), createArray())[copyIndex()], 'metadata')]"
                  },
                  "publicAccess": {
                    "value": "[tryGet(coalesce(parameters('containers'), createArray())[copyIndex()], 'publicAccess')]"
                  },
                  "roleAssignments": {
                    "value": "[tryGet(coalesce(parameters('containers'), createArray())[copyIndex()], 'roleAssignments')]"
                  },
                  "immutabilityPolicyProperties": {
                    "value": "[tryGet(coalesce(parameters('containers'), createArray())[copyIndex()], 'immutabilityPolicyProperties')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "languageVersion": "2.0",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.25.53.49325",
                      "templateHash": "11351273351916968732"
                    },
                    "name": "Storage Account Blob Containers",
                    "description": "This module deploys a Storage Account Blob Container.",
                    "owner": "Azure/module-maintainers"
                  },
                  "definitions": {
                    "roleAssignmentType": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "roleDefinitionIdOrName": {
                            "type": "string",
                            "metadata": {
                              "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                            }
                          },
                          "principalId": {
                            "type": "string",
                            "metadata": {
                              "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                            }
                          },
                          "principalType": {
                            "type": "string",
                            "allowedValues": [
                              "Device",
                              "ForeignGroup",
                              "Group",
                              "ServicePrincipal",
                              "User"
                            ],
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The principal type of the assigned principal ID."
                            }
                          },
                          "description": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The description of the role assignment."
                            }
                          },
                          "condition": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                            }
                          },
                          "conditionVersion": {
                            "type": "string",
                            "allowedValues": [
                              "2.0"
                            ],
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. Version of the condition."
                            }
                          },
                          "delegatedManagedIdentityResourceId": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The Resource Id of the delegated managed identity resource."
                            }
                          }
                        }
                      },
                      "nullable": true
                    }
                  },
                  "parameters": {
                    "storageAccountName": {
                      "type": "string",
                      "maxLength": 24,
                      "metadata": {
                        "description": "Conditional. The name of the parent Storage Account. Required if the template is used in a standalone deployment."
                      }
                    },
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The name of the storage container to deploy."
                      }
                    },
                    "defaultEncryptionScope": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Default the container to use specified encryption scope for all writes."
                      }
                    },
                    "denyEncryptionScopeOverride": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "Optional. Block override of encryption scope from the container default."
                      }
                    },
                    "enableNfsV3AllSquash": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "Optional. Enable NFSv3 all squash on blob container."
                      }
                    },
                    "enableNfsV3RootSquash": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "Optional. Enable NFSv3 root squash on blob container."
                      }
                    },
                    "immutableStorageWithVersioningEnabled": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "Optional. This is an immutable property, when set to true it enables object level immutability at the container level. The property is immutable and can only be set to true at the container creation time. Existing containers must undergo a migration process."
                      }
                    },
                    "immutabilityPolicyName": {
                      "type": "string",
                      "defaultValue": "default",
                      "metadata": {
                        "description": "Optional. Name of the immutable policy."
                      }
                    },
                    "immutabilityPolicyProperties": {
                      "type": "object",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Configure immutability policy."
                      }
                    },
                    "metadata": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. A name-value pair to associate with the container as metadata."
                      }
                    },
                    "publicAccess": {
                      "type": "string",
                      "defaultValue": "None",
                      "allowedValues": [
                        "Container",
                        "Blob",
                        "None"
                      ],
                      "metadata": {
                        "description": "Optional. Specifies whether data in the container may be accessed publicly and the level of access."
                      }
                    },
                    "roleAssignments": {
                      "$ref": "#/definitions/roleAssignmentType",
                      "metadata": {
                        "description": "Optional. Array of role assignments to create."
                      }
                    }
                  },
                  "variables": {
                    "builtInRoleNames": {
                      "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                      "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                      "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                      "Reader and Data Access": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'c12c1c16-33a1-487b-954d-41c89c60f349')]",
                      "Role Based Access Control Administrator (Preview)": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]",
                      "Storage Account Backup Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'e5e2a7ff-d759-4cd2-bb51-3152d37e2eb1')]",
                      "Storage Account Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '17d1049b-9a84-46fb-8f53-869881c3d3ab')]",
                      "Storage Account Key Operator Service Role": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '81a9662b-bebf-436f-a333-f67b29880f12')]",
                      "Storage Blob Data Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'ba92f5b4-2d11-453d-a403-e96b0029c9fe')]",
                      "Storage Blob Data Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b7e6dc6d-f1e8-4753-8033-0f276bb0955b')]",
                      "Storage Blob Data Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '2a2b9908-6ea1-4ae2-8e65-a410df84e7d1')]",
                      "Storage Blob Delegator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'db58b8e5-c6ad-4a2a-8342-4190687cbf4a')]",
                      "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]"
                    }
                  },
                  "resources": {
                    "storageAccount::blobServices": {
                      "existing": true,
                      "type": "Microsoft.Storage/storageAccounts/blobServices",
                      "apiVersion": "2022-09-01",
                      "name": "[format('{0}/{1}', parameters('storageAccountName'), 'default')]",
                      "dependsOn": [
                        "storageAccount"
                      ]
                    },
                    "storageAccount": {
                      "existing": true,
                      "type": "Microsoft.Storage/storageAccounts",
                      "apiVersion": "2022-09-01",
                      "name": "[parameters('storageAccountName')]"
                    },
                    "container": {
                      "type": "Microsoft.Storage/storageAccounts/blobServices/containers",
                      "apiVersion": "2022-09-01",
                      "name": "[format('{0}/{1}/{2}', parameters('storageAccountName'), 'default', parameters('name'))]",
                      "properties": {
                        "defaultEncryptionScope": "[if(not(empty(parameters('defaultEncryptionScope'))), parameters('defaultEncryptionScope'), null())]",
                        "denyEncryptionScopeOverride": "[if(equals(parameters('denyEncryptionScopeOverride'), true()), parameters('denyEncryptionScopeOverride'), null())]",
                        "enableNfsV3AllSquash": "[if(equals(parameters('enableNfsV3AllSquash'), true()), parameters('enableNfsV3AllSquash'), null())]",
                        "enableNfsV3RootSquash": "[if(equals(parameters('enableNfsV3RootSquash'), true()), parameters('enableNfsV3RootSquash'), null())]",
                        "immutableStorageWithVersioning": "[if(equals(parameters('immutableStorageWithVersioningEnabled'), true()), createObject('enabled', parameters('immutableStorageWithVersioningEnabled')), null())]",
                        "metadata": "[parameters('metadata')]",
                        "publicAccess": "[parameters('publicAccess')]"
                      },
                      "dependsOn": [
                        "storageAccount::blobServices"
                      ]
                    },
                    "container_roleAssignments": {
                      "copy": {
                        "name": "container_roleAssignments",
                        "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]"
                      },
                      "type": "Microsoft.Authorization/roleAssignments",
                      "apiVersion": "2022-04-01",
                      "scope": "[format('Microsoft.Storage/storageAccounts/{0}/blobServices/{1}/containers/{2}', parameters('storageAccountName'), 'default', parameters('name'))]",
                      "name": "[guid(resourceId('Microsoft.Storage/storageAccounts/blobServices/containers', parameters('storageAccountName'), 'default', parameters('name')), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].principalId, coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName)]",
                      "properties": {
                        "roleDefinitionId": "[if(contains(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName), variables('builtInRoleNames')[coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName], if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName)))]",
                        "principalId": "[coalesce(parameters('roleAssignments'), createArray())[copyIndex()].principalId]",
                        "description": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'description')]",
                        "principalType": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'principalType')]",
                        "condition": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'condition')]",
                        "conditionVersion": "[if(not(empty(tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                        "delegatedManagedIdentityResourceId": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
                      },
                      "dependsOn": [
                        "container"
                      ]
                    },
                    "immutabilityPolicy": {
                      "condition": "[not(empty(coalesce(parameters('immutabilityPolicyProperties'), createObject())))]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[parameters('immutabilityPolicyName')]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "storageAccountName": {
                            "value": "[parameters('storageAccountName')]"
                          },
                          "containerName": {
                            "value": "[parameters('name')]"
                          },
                          "immutabilityPeriodSinceCreationInDays": {
                            "value": "[tryGet(parameters('immutabilityPolicyProperties'), 'immutabilityPeriodSinceCreationInDays')]"
                          },
                          "allowProtectedAppendWrites": {
                            "value": "[tryGet(parameters('immutabilityPolicyProperties'), 'allowProtectedAppendWrites')]"
                          },
                          "allowProtectedAppendWritesAll": {
                            "value": "[tryGet(parameters('immutabilityPolicyProperties'), 'allowProtectedAppendWritesAll')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.25.53.49325",
                              "templateHash": "10329548264889228160"
                            },
                            "name": "Storage Account Blob Container Immutability Policies",
                            "description": "This module deploys a Storage Account Blob Container Immutability Policy.",
                            "owner": "Azure/module-maintainers"
                          },
                          "parameters": {
                            "storageAccountName": {
                              "type": "string",
                              "maxLength": 24,
                              "metadata": {
                                "description": "Conditional. The name of the parent Storage Account. Required if the template is used in a standalone deployment."
                              }
                            },
                            "containerName": {
                              "type": "string",
                              "metadata": {
                                "description": "Conditional. The name of the parent container to apply the policy to. Required if the template is used in a standalone deployment."
                              }
                            },
                            "immutabilityPeriodSinceCreationInDays": {
                              "type": "int",
                              "defaultValue": 365,
                              "metadata": {
                                "description": "Optional. The immutability period for the blobs in the container since the policy creation, in days."
                              }
                            },
                            "allowProtectedAppendWrites": {
                              "type": "bool",
                              "defaultValue": true,
                              "metadata": {
                                "description": "Optional. This property can only be changed for unlocked time-based retention policies. When enabled, new blocks can be written to an append blob while maintaining immutability protection and compliance. Only new blocks can be added and any existing blocks cannot be modified or deleted. This property cannot be changed with ExtendImmutabilityPolicy API."
                              }
                            },
                            "allowProtectedAppendWritesAll": {
                              "type": "bool",
                              "defaultValue": true,
                              "metadata": {
                                "description": "Optional. This property can only be changed for unlocked time-based retention policies. When enabled, new blocks can be written to both \"Append and Block Blobs\" while maintaining immutability protection and compliance. Only new blocks can be added and any existing blocks cannot be modified or deleted. This property cannot be changed with ExtendImmutabilityPolicy API. The \"allowProtectedAppendWrites\" and \"allowProtectedAppendWritesAll\" properties are mutually exclusive."
                              }
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Storage/storageAccounts/blobServices/containers/immutabilityPolicies",
                              "apiVersion": "2022-09-01",
                              "name": "[format('{0}/{1}/{2}/{3}', parameters('storageAccountName'), 'default', parameters('containerName'), 'default')]",
                              "properties": {
                                "immutabilityPeriodSinceCreationInDays": "[parameters('immutabilityPeriodSinceCreationInDays')]",
                                "allowProtectedAppendWrites": "[parameters('allowProtectedAppendWrites')]",
                                "allowProtectedAppendWritesAll": "[parameters('allowProtectedAppendWritesAll')]"
                              }
                            }
                          ],
                          "outputs": {
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "The name of the deployed immutability policy."
                              },
                              "value": "default"
                            },
                            "resourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource ID of the deployed immutability policy."
                              },
                              "value": "[resourceId('Microsoft.Storage/storageAccounts/blobServices/containers/immutabilityPolicies', parameters('storageAccountName'), 'default', parameters('containerName'), 'default')]"
                            },
                            "resourceGroupName": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource group of the deployed immutability policy."
                              },
                              "value": "[resourceGroup().name]"
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "container",
                        "storageAccount"
                      ]
                    }
                  },
                  "outputs": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the deployed container."
                      },
                      "value": "[parameters('name')]"
                    },
                    "resourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the deployed container."
                      },
                      "value": "[resourceId('Microsoft.Storage/storageAccounts/blobServices/containers', parameters('storageAccountName'), 'default', parameters('name'))]"
                    },
                    "resourceGroupName": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource group of the deployed container."
                      },
                      "value": "[resourceGroup().name]"
                    }
                  }
                }
              },
              "dependsOn": [
                "storageAccount"
              ]
            }
          },
          "outputs": {
            "name": {
              "type": "string",
              "metadata": {
                "description": "The name of the deployed blob service."
              },
              "value": "[variables('name')]"
            },
            "resourceId": {
              "type": "string",
              "metadata": {
                "description": "The resource ID of the deployed blob service."
              },
              "value": "[resourceId('Microsoft.Storage/storageAccounts/blobServices', parameters('storageAccountName'), variables('name'))]"
            },
            "resourceGroupName": {
              "type": "string",
              "metadata": {
                "description": "The name of the deployed blob service."
              },
              "value": "[resourceGroup().name]"
            }
          }
        }
      },
      "dependsOn": [
        "storageAccount"
      ]
    },
    "storageAccount_fileServices": {
      "condition": "[not(empty(parameters('fileServices')))]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('{0}-Storage-FileServices', uniqueString(deployment().name, parameters('location')))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "storageAccountName": {
            "value": "[parameters('name')]"
          },
          "diagnosticSettings": {
            "value": "[tryGet(parameters('fileServices'), 'diagnosticSettings')]"
          },
          "protocolSettings": {
            "value": "[tryGet(parameters('fileServices'), 'protocolSettings')]"
          },
          "shareDeleteRetentionPolicy": {
            "value": "[tryGet(parameters('fileServices'), 'shareDeleteRetentionPolicy')]"
          },
          "shares": {
            "value": "[tryGet(parameters('fileServices'), 'shares')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "languageVersion": "2.0",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.25.53.49325",
              "templateHash": "5288106279947156711"
            },
            "name": "Storage Account File Share Services",
            "description": "This module deploys a Storage Account File Share Service.",
            "owner": "Azure/module-maintainers"
          },
          "definitions": {
            "diagnosticSettingType": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. The name of diagnostic setting."
                    }
                  },
                  "logCategoriesAndGroups": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "category": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Name of a Diagnostic Log category for a resource type this setting is applied to. Set the specific logs to collect here."
                          }
                        },
                        "categoryGroup": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Name of a Diagnostic Log category group for a resource type this setting is applied to. Set to `allLogs` to collect all logs."
                          }
                        },
                        "enabled": {
                          "type": "bool",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Enable or disable the category explicitly. Default is `true`."
                          }
                        }
                      }
                    },
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. The name of logs that will be streamed. \"allLogs\" includes all possible logs for the resource. Set to `[]` to disable log collection."
                    }
                  },
                  "metricCategories": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "category": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. Name of a Diagnostic Metric category for a resource type this setting is applied to. Set to `AllMetrics` to collect all metrics."
                          }
                        },
                        "enabled": {
                          "type": "bool",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Enable or disable the category explicitly. Default is `true`."
                          }
                        }
                      }
                    },
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. The name of logs that will be streamed. \"allLogs\" includes all possible logs for the resource. Set to `[]` to disable log collection."
                    }
                  },
                  "logAnalyticsDestinationType": {
                    "type": "string",
                    "allowedValues": [
                      "AzureDiagnostics",
                      "Dedicated"
                    ],
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. A string indicating whether the export to Log Analytics should use the default destination type, i.e. AzureDiagnostics, or use a destination type."
                    }
                  },
                  "workspaceResourceId": {
                    "type": "string",
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. Resource ID of the diagnostic log analytics workspace. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                    }
                  },
                  "storageAccountResourceId": {
                    "type": "string",
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. Resource ID of the diagnostic storage account. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                    }
                  },
                  "eventHubAuthorizationRuleResourceId": {
                    "type": "string",
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. Resource ID of the diagnostic event hub authorization rule for the Event Hubs namespace in which the event hub should be created or streamed to."
                    }
                  },
                  "eventHubName": {
                    "type": "string",
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. Name of the diagnostic event hub within the namespace to which logs are streamed. Without this, an event hub is created for each log category. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                    }
                  },
                  "marketplacePartnerResourceId": {
                    "type": "string",
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. The full ARM resource ID of the Marketplace resource to which you would like to send Diagnostic Logs."
                    }
                  }
                }
              },
              "nullable": true
            }
          },
          "parameters": {
            "storageAccountName": {
              "type": "string",
              "maxLength": 24,
              "metadata": {
                "description": "Conditional. The name of the parent Storage Account. Required if the template is used in a standalone deployment."
              }
            },
            "name": {
              "type": "string",
              "defaultValue": "default",
              "metadata": {
                "description": "Optional. The name of the file service."
              }
            },
            "protocolSettings": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "Optional. Protocol settings for file service."
              }
            },
            "shareDeleteRetentionPolicy": {
              "type": "object",
              "defaultValue": {
                "enabled": true,
                "days": 7
              },
              "metadata": {
                "description": "Optional. The service properties for soft delete."
              }
            },
            "diagnosticSettings": {
              "$ref": "#/definitions/diagnosticSettingType",
              "metadata": {
                "description": "Optional. The diagnostic settings of the service."
              }
            },
            "shares": {
              "type": "array",
              "nullable": true,
              "metadata": {
                "description": "Optional. File shares to create."
              }
            }
          },
          "resources": {
            "storageAccount": {
              "existing": true,
              "type": "Microsoft.Storage/storageAccounts",
              "apiVersion": "2021-09-01",
              "name": "[parameters('storageAccountName')]"
            },
            "fileServices": {
              "type": "Microsoft.Storage/storageAccounts/fileServices",
              "apiVersion": "2021-09-01",
              "name": "[format('{0}/{1}', parameters('storageAccountName'), parameters('name'))]",
              "properties": {
                "protocolSettings": "[parameters('protocolSettings')]",
                "shareDeleteRetentionPolicy": "[parameters('shareDeleteRetentionPolicy')]"
              },
              "dependsOn": [
                "storageAccount"
              ]
            },
            "fileServices_diagnosticSettings": {
              "copy": {
                "name": "fileServices_diagnosticSettings",
                "count": "[length(coalesce(parameters('diagnosticSettings'), createArray()))]"
              },
              "type": "Microsoft.Insights/diagnosticSettings",
              "apiVersion": "2021-05-01-preview",
              "scope": "[format('Microsoft.Storage/storageAccounts/{0}/fileServices/{1}', parameters('storageAccountName'), parameters('name'))]",
              "name": "[coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'name'), format('{0}-diagnosticSettings', parameters('name')))]",
              "properties": {
                "copy": [
                  {
                    "name": "metrics",
                    "count": "[length(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics'))))]",
                    "input": {
                      "category": "[coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics')))[copyIndex('metrics')].category]",
                      "enabled": "[coalesce(tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics')))[copyIndex('metrics')], 'enabled'), true())]",
                      "timeGrain": null
                    }
                  },
                  {
                    "name": "logs",
                    "count": "[length(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs'))))]",
                    "input": {
                      "categoryGroup": "[tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'categoryGroup')]",
                      "category": "[tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'category')]",
                      "enabled": "[coalesce(tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'enabled'), true())]"
                    }
                  }
                ],
                "storageAccountId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'storageAccountResourceId')]",
                "workspaceId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'workspaceResourceId')]",
                "eventHubAuthorizationRuleId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'eventHubAuthorizationRuleResourceId')]",
                "eventHubName": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'eventHubName')]",
                "marketplacePartnerId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'marketplacePartnerResourceId')]",
                "logAnalyticsDestinationType": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logAnalyticsDestinationType')]"
              },
              "dependsOn": [
                "fileServices"
              ]
            },
            "fileServices_shares": {
              "copy": {
                "name": "fileServices_shares",
                "count": "[length(coalesce(parameters('shares'), createArray()))]"
              },
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('{0}-shares-{1}', deployment().name, copyIndex())]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "storageAccountName": {
                    "value": "[parameters('storageAccountName')]"
                  },
                  "fileServicesName": {
                    "value": "[parameters('name')]"
                  },
                  "name": {
                    "value": "[coalesce(parameters('shares'), createArray())[copyIndex()].name]"
                  },
                  "accessTier": {
                    "value": "[coalesce(tryGet(coalesce(parameters('shares'), createArray())[copyIndex()], 'accessTier'), if(equals(reference('storageAccount', '2021-09-01', 'full').kind, 'FileStorage'), 'Premium', 'TransactionOptimized'))]"
                  },
                  "enabledProtocols": {
                    "value": "[tryGet(coalesce(parameters('shares'), createArray())[copyIndex()], 'enabledProtocols')]"
                  },
                  "rootSquash": {
                    "value": "[tryGet(coalesce(parameters('shares'), createArray())[copyIndex()], 'rootSquash')]"
                  },
                  "shareQuota": {
                    "value": "[tryGet(coalesce(parameters('shares'), createArray())[copyIndex()], 'shareQuota')]"
                  },
                  "roleAssignments": {
                    "value": "[tryGet(coalesce(parameters('shares'), createArray())[copyIndex()], 'roleAssignments')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "languageVersion": "2.0",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.25.53.49325",
                      "templateHash": "2026482374148202879"
                    },
                    "name": "Storage Account File Shares",
                    "description": "This module deploys a Storage Account File Share.",
                    "owner": "Azure/module-maintainers"
                  },
                  "definitions": {
                    "roleAssignmentType": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "roleDefinitionIdOrName": {
                            "type": "string",
                            "metadata": {
                              "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                            }
                          },
                          "principalId": {
                            "type": "string",
                            "metadata": {
                              "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                            }
                          },
                          "principalType": {
                            "type": "string",
                            "allowedValues": [
                              "Device",
                              "ForeignGroup",
                              "Group",
                              "ServicePrincipal",
                              "User"
                            ],
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The principal type of the assigned principal ID."
                            }
                          },
                          "description": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The description of the role assignment."
                            }
                          },
                          "condition": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                            }
                          },
                          "conditionVersion": {
                            "type": "string",
                            "allowedValues": [
                              "2.0"
                            ],
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. Version of the condition."
                            }
                          },
                          "delegatedManagedIdentityResourceId": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The Resource Id of the delegated managed identity resource."
                            }
                          }
                        }
                      },
                      "nullable": true
                    }
                  },
                  "parameters": {
                    "storageAccountName": {
                      "type": "string",
                      "maxLength": 24,
                      "metadata": {
                        "description": "Conditional. The name of the parent Storage Account. Required if the template is used in a standalone deployment."
                      }
                    },
                    "fileServicesName": {
                      "type": "string",
                      "defaultValue": "default",
                      "metadata": {
                        "description": "Conditional. The name of the parent file service. Required if the template is used in a standalone deployment."
                      }
                    },
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The name of the file share to create."
                      }
                    },
                    "accessTier": {
                      "type": "string",
                      "defaultValue": "TransactionOptimized",
                      "allowedValues": [
                        "Premium",
                        "Hot",
                        "Cool",
                        "TransactionOptimized"
                      ],
                      "metadata": {
                        "description": "Conditional. Access tier for specific share. Required if the Storage Account kind is set to FileStorage (should be set to \"Premium\"). GpV2 account can choose between TransactionOptimized (default), Hot, and Cool."
                      }
                    },
                    "shareQuota": {
                      "type": "int",
                      "defaultValue": 5120,
                      "metadata": {
                        "description": "Optional. The maximum size of the share, in gigabytes. Must be greater than 0, and less than or equal to 5120 (5TB). For Large File Shares, the maximum size is 102400 (100TB)."
                      }
                    },
                    "enabledProtocols": {
                      "type": "string",
                      "defaultValue": "SMB",
                      "allowedValues": [
                        "NFS",
                        "SMB"
                      ],
                      "metadata": {
                        "description": "Optional. The authentication protocol that is used for the file share. Can only be specified when creating a share."
                      }
                    },
                    "rootSquash": {
                      "type": "string",
                      "defaultValue": "NoRootSquash",
                      "allowedValues": [
                        "AllSquash",
                        "NoRootSquash",
                        "RootSquash"
                      ],
                      "metadata": {
                        "description": "Optional. Permissions for NFS file shares are enforced by the client OS rather than the Azure Files service. Toggling the root squash behavior reduces the rights of the root user for NFS shares."
                      }
                    },
                    "roleAssignments": {
                      "$ref": "#/definitions/roleAssignmentType",
                      "metadata": {
                        "description": "Optional. Array of role assignments to create."
                      }
                    }
                  },
                  "resources": {
                    "storageAccount::fileService": {
                      "existing": true,
                      "type": "Microsoft.Storage/storageAccounts/fileServices",
                      "apiVersion": "2021-09-01",
                      "name": "[format('{0}/{1}', parameters('storageAccountName'), parameters('fileServicesName'))]",
                      "dependsOn": [
                        "storageAccount"
                      ]
                    },
                    "storageAccount": {
                      "existing": true,
                      "type": "Microsoft.Storage/storageAccounts",
                      "apiVersion": "2021-09-01",
                      "name": "[parameters('storageAccountName')]"
                    },
                    "fileShare": {
                      "type": "Microsoft.Storage/storageAccounts/fileServices/shares",
                      "apiVersion": "2023-01-01",
                      "name": "[format('{0}/{1}/{2}', parameters('storageAccountName'), parameters('fileServicesName'), parameters('name'))]",
                      "properties": {
                        "accessTier": "[parameters('accessTier')]",
                        "shareQuota": "[parameters('shareQuota')]",
                        "rootSquash": "[if(equals(parameters('enabledProtocols'), 'NFS'), parameters('rootSquash'), null())]",
                        "enabledProtocols": "[parameters('enabledProtocols')]"
                      },
                      "dependsOn": [
                        "storageAccount::fileService"
                      ]
                    },
                    "fileShare_roleAssignments": {
                      "condition": "[not(empty(parameters('roleAssignments')))]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('{0}-Share-Rbac', uniqueString(deployment().name))]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "fileShareResourceId": {
                            "value": "[resourceId('Microsoft.Storage/storageAccounts/fileServices/shares', parameters('storageAccountName'), parameters('fileServicesName'), parameters('name'))]"
                          },
                          "roleAssignments": {
                            "value": "[parameters('roleAssignments')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.25.53.49325",
                              "templateHash": "15595600813016932186"
                            }
                          },
                          "parameters": {
                            "roleAssignments": {
                              "type": "array",
                              "metadata": {
                                "description": "Optional. Array of role assignments to create."
                              }
                            },
                            "fileShareResourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The resource id of the file share to assign the roles to."
                              }
                            }
                          },
                          "variables": {
                            "$fxv#0": {
                              "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                              "contentVersion": "1.0.0.0",
                              "parameters": {
                                "scope": {
                                  "type": "string",
                                  "metadata": {
                                    "description": "Required. The scope to deploy the role assignment to."
                                  }
                                },
                                "name": {
                                  "type": "string",
                                  "metadata": {
                                    "description": "Required. The name of the role assignment."
                                  }
                                },
                                "roleDefinitionId": {
                                  "type": "string",
                                  "metadata": {
                                    "description": "Required. The role definition Id to assign."
                                  }
                                },
                                "principalId": {
                                  "type": "string",
                                  "metadata": {
                                    "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                                  }
                                },
                                "principalType": {
                                  "type": "string",
                                  "allowedValues": [
                                    "Device",
                                    "ForeignGroup",
                                    "Group",
                                    "ServicePrincipal",
                                    "User",
                                    ""
                                  ],
                                  "defaultValue": "",
                                  "metadata": {
                                    "description": "Optional. The principal type of the assigned principal ID."
                                  }
                                },
                                "description": {
                                  "type": "string",
                                  "defaultValue": "",
                                  "metadata": {
                                    "description": "Optional. The description of the role assignment."
                                  }
                                },
                                "condition": {
                                  "type": "string",
                                  "defaultValue": "",
                                  "metadata": {
                                    "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\""
                                  }
                                },
                                "conditionVersion": {
                                  "type": "string",
                                  "allowedValues": [
                                    "2.0"
                                  ],
                                  "defaultValue": "2.0",
                                  "metadata": {
                                    "description": "Optional. Version of the condition."
                                  }
                                },
                                "delegatedManagedIdentityResourceId": {
                                  "type": "string",
                                  "defaultValue": "",
                                  "metadata": {
                                    "description": "Optional. The Resource Id of the delegated managed identity resource."
                                  }
                                }
                              },
                              "resources": [
                                {
                                  "type": "Microsoft.Authorization/roleAssignments",
                                  "apiVersion": "2022-04-01",
                                  "scope": "[[parameters('scope')]",
                                  "name": "[[parameters('name')]",
                                  "properties": {
                                    "roleDefinitionId": "[[parameters('roleDefinitionId')]",
                                    "principalId": "[[parameters('principalId')]",
                                    "description": "[[parameters('description')]",
                                    "principalType": "[[if(not(empty(parameters('principalType'))), parameters('principalType'), null())]",
                                    "condition": "[[if(not(empty(parameters('condition'))), parameters('condition'), null())]",
                                    "conditionVersion": "[[if(and(not(empty(parameters('conditionVersion'))), not(empty(parameters('condition')))), parameters('conditionVersion'), null())]",
                                    "delegatedManagedIdentityResourceId": "[[if(not(empty(parameters('delegatedManagedIdentityResourceId'))), parameters('delegatedManagedIdentityResourceId'), null())]"
                                  }
                                }
                              ]
                            },
                            "builtInRoleNames": {
                              "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                              "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                              "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                              "Reader and Data Access": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'c12c1c16-33a1-487b-954d-41c89c60f349')]",
                              "Role Based Access Control Administrator (Preview)": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]",
                              "Storage Account Backup Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'e5e2a7ff-d759-4cd2-bb51-3152d37e2eb1')]",
                              "Storage Account Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '17d1049b-9a84-46fb-8f53-869881c3d3ab')]",
                              "Storage Account Key Operator Service Role": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '81a9662b-bebf-436f-a333-f67b29880f12')]",
                              "Storage File Data SMB Share Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '0c867c2a-1d8c-454a-a3db-ab2ea1bdc8bb')]",
                              "Storage File Data SMB Share Elevated Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'a7264617-510b-434b-a828-9731dc254ea7')]",
                              "Storage File Data SMB Share Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'aba4ae5f-2193-4029-9191-0cb91df5e314')]",
                              "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]"
                            }
                          },
                          "resources": [
                            {
                              "copy": {
                                "name": "fileShare_roleAssignments",
                                "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]"
                              },
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2021-04-01",
                              "name": "[format('{0}-Share-Rbac-{1}', uniqueString(deployment().name), copyIndex())]",
                              "properties": {
                                "mode": "Incremental",
                                "expressionEvaluationOptions": {
                                  "scope": "Outer"
                                },
                                "template": "[variables('$fxv#0')]",
                                "parameters": {
                                  "scope": {
                                    "value": "[replace(parameters('fileShareResourceId'), '/shares/', '/fileShares/')]"
                                  },
                                  "name": {
                                    "value": "[guid(parameters('fileShareResourceId'), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].principalId, coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName, 'tyfa')]"
                                  },
                                  "roleDefinitionId": {
                                    "value": "[if(contains(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName), variables('builtInRoleNames')[coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName], if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName)))]"
                                  },
                                  "principalId": {
                                    "value": "[coalesce(parameters('roleAssignments'), createArray())[copyIndex()].principalId]"
                                  },
                                  "principalType": {
                                    "value": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'principalType')]"
                                  },
                                  "description": {
                                    "value": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'description')]"
                                  },
                                  "condition": {
                                    "value": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'condition')]"
                                  },
                                  "conditionVersion": {
                                    "value": "[if(not(empty(tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]"
                                  },
                                  "delegatedManagedIdentityResourceId": {
                                    "value": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
                                  }
                                }
                              }
                            }
                          ]
                        }
                      },
                      "dependsOn": [
                        "fileShare"
                      ]
                    }
                  },
                  "outputs": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the deployed file share."
                      },
                      "value": "[parameters('name')]"
                    },
                    "resourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the deployed file share."
                      },
                      "value": "[resourceId('Microsoft.Storage/storageAccounts/fileServices/shares', parameters('storageAccountName'), parameters('fileServicesName'), parameters('name'))]"
                    },
                    "resourceGroupName": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource group of the deployed file share."
                      },
                      "value": "[resourceGroup().name]"
                    }
                  }
                }
              },
              "dependsOn": [
                "fileServices",
                "storageAccount"
              ]
            }
          },
          "outputs": {
            "name": {
              "type": "string",
              "metadata": {
                "description": "The name of the deployed file share service."
              },
              "value": "[parameters('name')]"
            },
            "resourceId": {
              "type": "string",
              "metadata": {
                "description": "The resource ID of the deployed file share service."
              },
              "value": "[resourceId('Microsoft.Storage/storageAccounts/fileServices', parameters('storageAccountName'), parameters('name'))]"
            },
            "resourceGroupName": {
              "type": "string",
              "metadata": {
                "description": "The resource group of the deployed file share service."
              },
              "value": "[resourceGroup().name]"
            }
          }
        }
      },
      "dependsOn": [
        "storageAccount"
      ]
    },
    "storageAccount_queueServices": {
      "condition": "[not(empty(parameters('queueServices')))]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('{0}-Storage-QueueServices', uniqueString(deployment().name, parameters('location')))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "storageAccountName": {
            "value": "[parameters('name')]"
          },
          "diagnosticSettings": {
            "value": "[tryGet(parameters('queueServices'), 'diagnosticSettings')]"
          },
          "queues": {
            "value": "[tryGet(parameters('queueServices'), 'queues')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "languageVersion": "2.0",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.25.53.49325",
              "templateHash": "14446905482734328346"
            },
            "name": "Storage Account Queue Services",
            "description": "This module deploys a Storage Account Queue Service.",
            "owner": "Azure/module-maintainers"
          },
          "definitions": {
            "diagnosticSettingType": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. The name of diagnostic setting."
                    }
                  },
                  "logCategoriesAndGroups": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "category": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Name of a Diagnostic Log category for a resource type this setting is applied to. Set the specific logs to collect here."
                          }
                        },
                        "categoryGroup": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Name of a Diagnostic Log category group for a resource type this setting is applied to. Set to `allLogs` to collect all logs."
                          }
                        },
                        "enabled": {
                          "type": "bool",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Enable or disable the category explicitly. Default is `true`."
                          }
                        }
                      }
                    },
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. The name of logs that will be streamed. \"allLogs\" includes all possible logs for the resource. Set to `[]` to disable log collection."
                    }
                  },
                  "metricCategories": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "category": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. Name of a Diagnostic Metric category for a resource type this setting is applied to. Set to `AllMetrics` to collect all metrics."
                          }
                        },
                        "enabled": {
                          "type": "bool",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Enable or disable the category explicitly. Default is `true`."
                          }
                        }
                      }
                    },
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. The name of logs that will be streamed. \"allLogs\" includes all possible logs for the resource. Set to `[]` to disable log collection."
                    }
                  },
                  "logAnalyticsDestinationType": {
                    "type": "string",
                    "allowedValues": [
                      "AzureDiagnostics",
                      "Dedicated"
                    ],
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. A string indicating whether the export to Log Analytics should use the default destination type, i.e. AzureDiagnostics, or use a destination type."
                    }
                  },
                  "workspaceResourceId": {
                    "type": "string",
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. Resource ID of the diagnostic log analytics workspace. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                    }
                  },
                  "storageAccountResourceId": {
                    "type": "string",
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. Resource ID of the diagnostic storage account. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                    }
                  },
                  "eventHubAuthorizationRuleResourceId": {
                    "type": "string",
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. Resource ID of the diagnostic event hub authorization rule for the Event Hubs namespace in which the event hub should be created or streamed to."
                    }
                  },
                  "eventHubName": {
                    "type": "string",
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. Name of the diagnostic event hub within the namespace to which logs are streamed. Without this, an event hub is created for each log category. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                    }
                  },
                  "marketplacePartnerResourceId": {
                    "type": "string",
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. The full ARM resource ID of the Marketplace resource to which you would like to send Diagnostic Logs."
                    }
                  }
                }
              },
              "nullable": true
            }
          },
          "parameters": {
            "storageAccountName": {
              "type": "string",
              "maxLength": 24,
              "metadata": {
                "description": "Conditional. The name of the parent Storage Account. Required if the template is used in a standalone deployment."
              }
            },
            "queues": {
              "type": "array",
              "nullable": true,
              "metadata": {
                "description": "Optional. Queues to create."
              }
            },
            "diagnosticSettings": {
              "$ref": "#/definitions/diagnosticSettingType",
              "metadata": {
                "description": "Optional. The diagnostic settings of the service."
              }
            }
          },
          "variables": {
            "name": "default"
          },
          "resources": {
            "storageAccount": {
              "existing": true,
              "type": "Microsoft.Storage/storageAccounts",
              "apiVersion": "2021-09-01",
              "name": "[parameters('storageAccountName')]"
            },
            "queueServices": {
              "type": "Microsoft.Storage/storageAccounts/queueServices",
              "apiVersion": "2021-09-01",
              "name": "[format('{0}/{1}', parameters('storageAccountName'), variables('name'))]",
              "properties": {},
              "dependsOn": [
                "storageAccount"
              ]
            },
            "queueServices_diagnosticSettings": {
              "copy": {
                "name": "queueServices_diagnosticSettings",
                "count": "[length(coalesce(parameters('diagnosticSettings'), createArray()))]"
              },
              "type": "Microsoft.Insights/diagnosticSettings",
              "apiVersion": "2021-05-01-preview",
              "scope": "[format('Microsoft.Storage/storageAccounts/{0}/queueServices/{1}', parameters('storageAccountName'), variables('name'))]",
              "name": "[coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'name'), format('{0}-diagnosticSettings', variables('name')))]",
              "properties": {
                "copy": [
                  {
                    "name": "metrics",
                    "count": "[length(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics'))))]",
                    "input": {
                      "category": "[coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics')))[copyIndex('metrics')].category]",
                      "enabled": "[coalesce(tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics')))[copyIndex('metrics')], 'enabled'), true())]",
                      "timeGrain": null
                    }
                  },
                  {
                    "name": "logs",
                    "count": "[length(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs'))))]",
                    "input": {
                      "categoryGroup": "[tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'categoryGroup')]",
                      "category": "[tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'category')]",
                      "enabled": "[coalesce(tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'enabled'), true())]"
                    }
                  }
                ],
                "storageAccountId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'storageAccountResourceId')]",
                "workspaceId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'workspaceResourceId')]",
                "eventHubAuthorizationRuleId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'eventHubAuthorizationRuleResourceId')]",
                "eventHubName": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'eventHubName')]",
                "marketplacePartnerId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'marketplacePartnerResourceId')]",
                "logAnalyticsDestinationType": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logAnalyticsDestinationType')]"
              },
              "dependsOn": [
                "queueServices"
              ]
            },
            "queueServices_queues": {
              "copy": {
                "name": "queueServices_queues",
                "count": "[length(coalesce(parameters('queues'), createArray()))]"
              },
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('{0}-Queue-{1}', deployment().name, copyIndex())]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "storageAccountName": {
                    "value": "[parameters('storageAccountName')]"
                  },
                  "name": {
                    "value": "[coalesce(parameters('queues'), createArray())[copyIndex()].name]"
                  },
                  "metadata": {
                    "value": "[tryGet(coalesce(parameters('queues'), createArray())[copyIndex()], 'metadata')]"
                  },
                  "roleAssignments": {
                    "value": "[tryGet(coalesce(parameters('queues'), createArray())[copyIndex()], 'roleAssignments')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "languageVersion": "2.0",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.25.53.49325",
                      "templateHash": "12411465246702614738"
                    },
                    "name": "Storage Account Queues",
                    "description": "This module deploys a Storage Account Queue.",
                    "owner": "Azure/module-maintainers"
                  },
                  "definitions": {
                    "roleAssignmentType": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "roleDefinitionIdOrName": {
                            "type": "string",
                            "metadata": {
                              "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                            }
                          },
                          "principalId": {
                            "type": "string",
                            "metadata": {
                              "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                            }
                          },
                          "principalType": {
                            "type": "string",
                            "allowedValues": [
                              "Device",
                              "ForeignGroup",
                              "Group",
                              "ServicePrincipal",
                              "User"
                            ],
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The principal type of the assigned principal ID."
                            }
                          },
                          "description": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The description of the role assignment."
                            }
                          },
                          "condition": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                            }
                          },
                          "conditionVersion": {
                            "type": "string",
                            "allowedValues": [
                              "2.0"
                            ],
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. Version of the condition."
                            }
                          },
                          "delegatedManagedIdentityResourceId": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The Resource Id of the delegated managed identity resource."
                            }
                          }
                        }
                      },
                      "nullable": true
                    }
                  },
                  "parameters": {
                    "storageAccountName": {
                      "type": "string",
                      "maxLength": 24,
                      "metadata": {
                        "description": "Conditional. The name of the parent Storage Account. Required if the template is used in a standalone deployment."
                      }
                    },
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The name of the storage queue to deploy."
                      }
                    },
                    "metadata": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Required. A name-value pair that represents queue metadata."
                      }
                    },
                    "roleAssignments": {
                      "$ref": "#/definitions/roleAssignmentType",
                      "metadata": {
                        "description": "Optional. Array of role assignments to create."
                      }
                    }
                  },
                  "variables": {
                    "builtInRoleNames": {
                      "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                      "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                      "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                      "Reader and Data Access": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'c12c1c16-33a1-487b-954d-41c89c60f349')]",
                      "Role Based Access Control Administrator (Preview)": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]",
                      "Storage Account Backup Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'e5e2a7ff-d759-4cd2-bb51-3152d37e2eb1')]",
                      "Storage Account Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '17d1049b-9a84-46fb-8f53-869881c3d3ab')]",
                      "Storage Account Key Operator Service Role": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '81a9662b-bebf-436f-a333-f67b29880f12')]",
                      "Storage Queue Data Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '974c5e8b-45b9-4653-ba55-5f855dd0fb88')]",
                      "Storage Queue Data Message Processor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8a0f0c08-91a1-4084-bc3d-661d67233fed')]",
                      "Storage Queue Data Message Sender": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'c6a89b2d-59bc-44d0-9896-0f6e12d7b80a')]",
                      "Storage Queue Data Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '19e7f393-937e-4f77-808e-94535e297925')]",
                      "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]"
                    }
                  },
                  "resources": {
                    "storageAccount::queueServices": {
                      "existing": true,
                      "type": "Microsoft.Storage/storageAccounts/queueServices",
                      "apiVersion": "2021-09-01",
                      "name": "[format('{0}/{1}', parameters('storageAccountName'), 'default')]",
                      "dependsOn": [
                        "storageAccount"
                      ]
                    },
                    "storageAccount": {
                      "existing": true,
                      "type": "Microsoft.Storage/storageAccounts",
                      "apiVersion": "2021-09-01",
                      "name": "[parameters('storageAccountName')]"
                    },
                    "queue": {
                      "type": "Microsoft.Storage/storageAccounts/queueServices/queues",
                      "apiVersion": "2021-09-01",
                      "name": "[format('{0}/{1}/{2}', parameters('storageAccountName'), 'default', parameters('name'))]",
                      "properties": {
                        "metadata": "[parameters('metadata')]"
                      },
                      "dependsOn": [
                        "storageAccount::queueServices"
                      ]
                    },
                    "queue_roleAssignments": {
                      "copy": {
                        "name": "queue_roleAssignments",
                        "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]"
                      },
                      "type": "Microsoft.Authorization/roleAssignments",
                      "apiVersion": "2022-04-01",
                      "scope": "[format('Microsoft.Storage/storageAccounts/{0}/queueServices/{1}/queues/{2}', parameters('storageAccountName'), 'default', parameters('name'))]",
                      "name": "[guid(resourceId('Microsoft.Storage/storageAccounts/queueServices/queues', parameters('storageAccountName'), 'default', parameters('name')), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].principalId, coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName)]",
                      "properties": {
                        "roleDefinitionId": "[if(contains(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName), variables('builtInRoleNames')[coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName], if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName)))]",
                        "principalId": "[coalesce(parameters('roleAssignments'), createArray())[copyIndex()].principalId]",
                        "description": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'description')]",
                        "principalType": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'principalType')]",
                        "condition": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'condition')]",
                        "conditionVersion": "[if(not(empty(tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                        "delegatedManagedIdentityResourceId": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
                      },
                      "dependsOn": [
                        "queue"
                      ]
                    }
                  },
                  "outputs": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the deployed queue."
                      },
                      "value": "[parameters('name')]"
                    },
                    "resourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the deployed queue."
                      },
                      "value": "[resourceId('Microsoft.Storage/storageAccounts/queueServices/queues', parameters('storageAccountName'), 'default', parameters('name'))]"
                    },
                    "resourceGroupName": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource group of the deployed queue."
                      },
                      "value": "[resourceGroup().name]"
                    }
                  }
                }
              },
              "dependsOn": [
                "storageAccount"
              ]
            }
          },
          "outputs": {
            "name": {
              "type": "string",
              "metadata": {
                "description": "The name of the deployed file share service."
              },
              "value": "[variables('name')]"
            },
            "resourceId": {
              "type": "string",
              "metadata": {
                "description": "The resource ID of the deployed file share service."
              },
              "value": "[resourceId('Microsoft.Storage/storageAccounts/queueServices', parameters('storageAccountName'), variables('name'))]"
            },
            "resourceGroupName": {
              "type": "string",
              "metadata": {
                "description": "The resource group of the deployed file share service."
              },
              "value": "[resourceGroup().name]"
            }
          }
        }
      },
      "dependsOn": [
        "storageAccount"
      ]
    },
    "storageAccount_tableServices": {
      "condition": "[not(empty(parameters('tableServices')))]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('{0}-Storage-TableServices', uniqueString(deployment().name, parameters('location')))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "storageAccountName": {
            "value": "[parameters('name')]"
          },
          "diagnosticSettings": {
            "value": "[tryGet(parameters('tableServices'), 'diagnosticSettings')]"
          },
          "tables": {
            "value": "[tryGet(parameters('tableServices'), 'tables')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "languageVersion": "2.0",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.25.53.49325",
              "templateHash": "14471460242481977546"
            },
            "name": "Storage Account Table Services",
            "description": "This module deploys a Storage Account Table Service.",
            "owner": "Azure/module-maintainers"
          },
          "definitions": {
            "diagnosticSettingType": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. The name of diagnostic setting."
                    }
                  },
                  "logCategoriesAndGroups": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "category": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Name of a Diagnostic Log category for a resource type this setting is applied to. Set the specific logs to collect here."
                          }
                        },
                        "categoryGroup": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Name of a Diagnostic Log category group for a resource type this setting is applied to. Set to `allLogs` to collect all logs."
                          }
                        },
                        "enabled": {
                          "type": "bool",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Enable or disable the category explicitly. Default is `true`."
                          }
                        }
                      }
                    },
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. The name of logs that will be streamed. \"allLogs\" includes all possible logs for the resource. Set to `[]` to disable log collection."
                    }
                  },
                  "metricCategories": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "category": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. Name of a Diagnostic Metric category for a resource type this setting is applied to. Set to `AllMetrics` to collect all metrics."
                          }
                        },
                        "enabled": {
                          "type": "bool",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Enable or disable the category explicitly. Default is `true`."
                          }
                        }
                      }
                    },
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. The name of logs that will be streamed. \"allLogs\" includes all possible logs for the resource. Set to `[]` to disable log collection."
                    }
                  },
                  "logAnalyticsDestinationType": {
                    "type": "string",
                    "allowedValues": [
                      "AzureDiagnostics",
                      "Dedicated"
                    ],
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. A string indicating whether the export to Log Analytics should use the default destination type, i.e. AzureDiagnostics, or use a destination type."
                    }
                  },
                  "workspaceResourceId": {
                    "type": "string",
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. Resource ID of the diagnostic log analytics workspace. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                    }
                  },
                  "storageAccountResourceId": {
                    "type": "string",
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. Resource ID of the diagnostic storage account. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                    }
                  },
                  "eventHubAuthorizationRuleResourceId": {
                    "type": "string",
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. Resource ID of the diagnostic event hub authorization rule for the Event Hubs namespace in which the event hub should be created or streamed to."
                    }
                  },
                  "eventHubName": {
                    "type": "string",
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. Name of the diagnostic event hub within the namespace to which logs are streamed. Without this, an event hub is created for each log category. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                    }
                  },
                  "marketplacePartnerResourceId": {
                    "type": "string",
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. The full ARM resource ID of the Marketplace resource to which you would like to send Diagnostic Logs."
                    }
                  }
                }
              },
              "nullable": true
            }
          },
          "parameters": {
            "storageAccountName": {
              "type": "string",
              "maxLength": 24,
              "metadata": {
                "description": "Conditional. The name of the parent Storage Account. Required if the template is used in a standalone deployment."
              }
            },
            "tables": {
              "type": "array",
              "defaultValue": [],
              "metadata": {
                "description": "Optional. tables to create."
              }
            },
            "diagnosticSettings": {
              "$ref": "#/definitions/diagnosticSettingType",
              "metadata": {
                "description": "Optional. The diagnostic settings of the service."
              }
            }
          },
          "variables": {
            "name": "default"
          },
          "resources": {
            "storageAccount": {
              "existing": true,
              "type": "Microsoft.Storage/storageAccounts",
              "apiVersion": "2021-09-01",
              "name": "[parameters('storageAccountName')]"
            },
            "tableServices": {
              "type": "Microsoft.Storage/storageAccounts/tableServices",
              "apiVersion": "2021-09-01",
              "name": "[format('{0}/{1}', parameters('storageAccountName'), variables('name'))]",
              "properties": {},
              "dependsOn": [
                "storageAccount"
              ]
            },
            "tableServices_diagnosticSettings": {
              "copy": {
                "name": "tableServices_diagnosticSettings",
                "count": "[length(coalesce(parameters('diagnosticSettings'), createArray()))]"
              },
              "type": "Microsoft.Insights/diagnosticSettings",
              "apiVersion": "2021-05-01-preview",
              "scope": "[format('Microsoft.Storage/storageAccounts/{0}/tableServices/{1}', parameters('storageAccountName'), variables('name'))]",
              "name": "[coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'name'), format('{0}-diagnosticSettings', variables('name')))]",
              "properties": {
                "copy": [
                  {
                    "name": "metrics",
                    "count": "[length(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics'))))]",
                    "input": {
                      "category": "[coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics')))[copyIndex('metrics')].category]",
                      "enabled": "[coalesce(tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics')))[copyIndex('metrics')], 'enabled'), true())]",
                      "timeGrain": null
                    }
                  },
                  {
                    "name": "logs",
                    "count": "[length(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs'))))]",
                    "input": {
                      "categoryGroup": "[tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'categoryGroup')]",
                      "category": "[tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'category')]",
                      "enabled": "[coalesce(tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'enabled'), true())]"
                    }
                  }
                ],
                "storageAccountId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'storageAccountResourceId')]",
                "workspaceId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'workspaceResourceId')]",
                "eventHubAuthorizationRuleId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'eventHubAuthorizationRuleResourceId')]",
                "eventHubName": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'eventHubName')]",
                "marketplacePartnerId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'marketplacePartnerResourceId')]",
                "logAnalyticsDestinationType": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logAnalyticsDestinationType')]"
              },
              "dependsOn": [
                "tableServices"
              ]
            },
            "tableServices_tables": {
              "copy": {
                "name": "tableServices_tables",
                "count": "[length(parameters('tables'))]"
              },
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('{0}-Table-{1}', deployment().name, copyIndex())]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "name": {
                    "value": "[parameters('tables')[copyIndex()].name]"
                  },
                  "storageAccountName": {
                    "value": "[parameters('storageAccountName')]"
                  },
                  "roleAssignments": {
                    "value": "[tryGet(parameters('tables')[copyIndex()], 'roleAssignments')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "languageVersion": "2.0",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.25.53.49325",
                      "templateHash": "8824223095963877860"
                    },
                    "name": "Storage Account Table",
                    "description": "This module deploys a Storage Account Table.",
                    "owner": "Azure/module-maintainers"
                  },
                  "definitions": {
                    "roleAssignmentType": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "roleDefinitionIdOrName": {
                            "type": "string",
                            "metadata": {
                              "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                            }
                          },
                          "principalId": {
                            "type": "string",
                            "metadata": {
                              "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                            }
                          },
                          "principalType": {
                            "type": "string",
                            "allowedValues": [
                              "Device",
                              "ForeignGroup",
                              "Group",
                              "ServicePrincipal",
                              "User"
                            ],
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The principal type of the assigned principal ID."
                            }
                          },
                          "description": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The description of the role assignment."
                            }
                          },
                          "condition": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                            }
                          },
                          "conditionVersion": {
                            "type": "string",
                            "allowedValues": [
                              "2.0"
                            ],
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. Version of the condition."
                            }
                          },
                          "delegatedManagedIdentityResourceId": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The Resource Id of the delegated managed identity resource."
                            }
                          }
                        }
                      },
                      "nullable": true
                    }
                  },
                  "parameters": {
                    "storageAccountName": {
                      "type": "string",
                      "maxLength": 24,
                      "metadata": {
                        "description": "Conditional. The name of the parent Storage Account. Required if the template is used in a standalone deployment."
                      }
                    },
                    "roleAssignments": {
                      "$ref": "#/definitions/roleAssignmentType",
                      "metadata": {
                        "description": "Optional. Array of role assignments to create."
                      }
                    },
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Name of the table."
                      }
                    }
                  },
                  "variables": {
                    "builtInRoleNames": {
                      "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                      "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                      "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                      "Reader and Data Access": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'c12c1c16-33a1-487b-954d-41c89c60f349')]",
                      "Role Based Access Control Administrator (Preview)": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]",
                      "Storage Account Backup Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'e5e2a7ff-d759-4cd2-bb51-3152d37e2eb1')]",
                      "Storage Account Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '17d1049b-9a84-46fb-8f53-869881c3d3ab')]",
                      "Storage Account Key Operator Service Role": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '81a9662b-bebf-436f-a333-f67b29880f12')]",
                      "Storage Table Data Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '0a9a7e1f-b9d0-4cc4-a60d-0319b160aaa3')]",
                      "Storage Table Data Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '76199698-9eea-4c19-bc75-cec21354c6b6')]",
                      "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]"
                    }
                  },
                  "resources": {
                    "storageAccount::tableServices": {
                      "existing": true,
                      "type": "Microsoft.Storage/storageAccounts/tableServices",
                      "apiVersion": "2021-09-01",
                      "name": "[format('{0}/{1}', parameters('storageAccountName'), 'default')]",
                      "dependsOn": [
                        "storageAccount"
                      ]
                    },
                    "storageAccount": {
                      "existing": true,
                      "type": "Microsoft.Storage/storageAccounts",
                      "apiVersion": "2021-09-01",
                      "name": "[parameters('storageAccountName')]"
                    },
                    "table": {
                      "type": "Microsoft.Storage/storageAccounts/tableServices/tables",
                      "apiVersion": "2021-09-01",
                      "name": "[format('{0}/{1}/{2}', parameters('storageAccountName'), 'default', parameters('name'))]",
                      "dependsOn": [
                        "storageAccount::tableServices"
                      ]
                    },
                    "table_roleAssignments": {
                      "copy": {
                        "name": "table_roleAssignments",
                        "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]"
                      },
                      "type": "Microsoft.Authorization/roleAssignments",
                      "apiVersion": "2022-04-01",
                      "scope": "[format('Microsoft.Storage/storageAccounts/{0}/tableServices/{1}/tables/{2}', parameters('storageAccountName'), 'default', parameters('name'))]",
                      "name": "[guid(resourceId('Microsoft.Storage/storageAccounts/tableServices/tables', parameters('storageAccountName'), 'default', parameters('name')), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].principalId, coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName)]",
                      "properties": {
                        "roleDefinitionId": "[if(contains(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName), variables('builtInRoleNames')[coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName], if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName)))]",
                        "principalId": "[coalesce(parameters('roleAssignments'), createArray())[copyIndex()].principalId]",
                        "description": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'description')]",
                        "principalType": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'principalType')]",
                        "condition": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'condition')]",
                        "conditionVersion": "[if(not(empty(tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                        "delegatedManagedIdentityResourceId": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
                      },
                      "dependsOn": [
                        "table"
                      ]
                    }
                  },
                  "outputs": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the deployed file share service."
                      },
                      "value": "[parameters('name')]"
                    },
                    "resourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the deployed file share service."
                      },
                      "value": "[resourceId('Microsoft.Storage/storageAccounts/tableServices/tables', parameters('storageAccountName'), 'default', parameters('name'))]"
                    },
                    "resourceGroupName": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource group of the deployed file share service."
                      },
                      "value": "[resourceGroup().name]"
                    }
                  }
                }
              },
              "dependsOn": [
                "storageAccount"
              ]
            }
          },
          "outputs": {
            "name": {
              "type": "string",
              "metadata": {
                "description": "The name of the deployed table service."
              },
              "value": "[variables('name')]"
            },
            "resourceId": {
              "type": "string",
              "metadata": {
                "description": "The resource ID of the deployed table service."
              },
              "value": "[resourceId('Microsoft.Storage/storageAccounts/tableServices', parameters('storageAccountName'), variables('name'))]"
            },
            "resourceGroupName": {
              "type": "string",
              "metadata": {
                "description": "The resource group of the deployed table service."
              },
              "value": "[resourceGroup().name]"
            }
          }
        }
      },
      "dependsOn": [
        "storageAccount"
      ]
    }
  },
  "outputs": {
    "resourceId": {
      "type": "string",
      "metadata": {
        "description": "The resource ID of the deployed storage account."
      },
      "value": "[resourceId('Microsoft.Storage/storageAccounts', parameters('name'))]"
    },
    "name": {
      "type": "string",
      "metadata": {
        "description": "The name of the deployed storage account."
      },
      "value": "[parameters('name')]"
    },
    "resourceGroupName": {
      "type": "string",
      "metadata": {
        "description": "The resource group of the deployed storage account."
      },
      "value": "[resourceGroup().name]"
    },
    "primaryBlobEndpoint": {
      "type": "string",
      "metadata": {
        "description": "The primary blob endpoint reference if blob services are deployed."
      },
      "value": "[if(and(not(empty(parameters('blobServices'))), contains(parameters('blobServices'), 'containers')), reference(format('Microsoft.Storage/storageAccounts/{0}', parameters('name')), '2019-04-01').primaryEndpoints.blob, '')]"
    },
    "systemAssignedMIPrincipalId": {
      "type": "string",
      "metadata": {
        "description": "The principal ID of the system assigned identity."
      },
      "value": "[coalesce(tryGet(tryGet(reference('storageAccount', '2022-09-01', 'full'), 'identity'), 'principalId'), '')]"
    },
    "location": {
      "type": "string",
      "metadata": {
        "description": "The location the resource was deployed into."
      },
      "value": "[reference('storageAccount', '2022-09-01', 'full').location]"
    }
  }
}