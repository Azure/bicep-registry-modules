{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "languageVersion": "2.0",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "_generator": {
      "name": "bicep",
      "version": "0.38.3.11034",
      "templateHash": "5197639403763956260"
    },
    "name": "Load Balancers",
    "description": "This module deploys a Load Balancer."
  },
  "definitions": {
    "publicIPAddressConfigurationType": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "Optional. The name of the Public IP Address. If not provided, a default name will be generated."
          }
        },
        "publicIPAllocationMethod": {
          "type": "string",
          "allowedValues": [
            "Dynamic",
            "Static"
          ],
          "nullable": true,
          "metadata": {
            "description": "Optional. The public IP address allocation method."
          }
        },
        "availabilityZones": {
          "type": "array",
          "allowedValues": [
            1,
            2,
            3
          ],
          "nullable": true,
          "metadata": {
            "description": "Optional. A list of availability zones denoting the IP allocated for the resource needs to come from."
          }
        },
        "publicIPAddressVersion": {
          "type": "string",
          "allowedValues": [
            "IPv4",
            "IPv6"
          ],
          "nullable": true,
          "metadata": {
            "description": "Optional. IP address version."
          }
        },
        "dnsSettings": {
          "$ref": "#/definitions/dnsSettingsType",
          "nullable": true,
          "metadata": {
            "description": "Optional. The DNS settings of the public IP address."
          }
        },
        "ipTags": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/pipIpTagType"
          },
          "nullable": true,
          "metadata": {
            "description": "Optional. The list of tags associated with the public IP address."
          }
        },
        "skuName": {
          "type": "string",
          "allowedValues": [
            "Basic",
            "Standard"
          ],
          "nullable": true,
          "metadata": {
            "description": "Optional. Name of a public IP address SKU."
          }
        },
        "skuTier": {
          "type": "string",
          "allowedValues": [
            "Global",
            "Regional"
          ],
          "nullable": true,
          "metadata": {
            "description": "Optional. Tier of a public IP address SKU."
          }
        },
        "ddosSettings": {
          "$ref": "#/definitions/ddosSettingsType",
          "nullable": true,
          "metadata": {
            "description": "Optional. The DDoS protection plan configuration associated with the public IP address."
          }
        },
        "roleAssignments": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/roleAssignmentType"
          },
          "nullable": true,
          "metadata": {
            "description": "Optional. Array of role assignments to create for the public IP address."
          }
        },
        "idleTimeoutInMinutes": {
          "type": "int",
          "nullable": true,
          "metadata": {
            "description": "Optional. The idle timeout of the public IP address."
          }
        },
        "tags": {
          "type": "object",
          "metadata": {
            "__bicep_resource_derived_type!": {
              "source": "Microsoft.Network/publicIPAddresses@2024-10-01#properties/tags"
            },
            "description": "Optional. Tags of the public IP address resource."
          },
          "nullable": true
        },
        "diagnosticSettings": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/diagnosticSettingFullType"
          },
          "nullable": true,
          "metadata": {
            "description": "Optional. The diagnostic settings of the public IP address."
          }
        },
        "publicIpPrefixResourceId": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "Optional. Resource ID of the Public IP Prefix. This is only needed if you want your Public IPs created in a PIP Prefix."
          }
        },
        "enableTelemetry": {
          "type": "bool",
          "nullable": true,
          "metadata": {
            "description": "Optional. Enable/Disable usage telemetry for the public IP address module."
          }
        }
      },
      "metadata": {
        "__bicep_export!": true,
        "description": "The type for a public IP address configuration within a frontend IP configuration."
      }
    },
    "publicIPPrefixConfigurationType": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "Optional. The name of the Public IP Prefix. If not provided, a default name will be generated."
          }
        },
        "tier": {
          "type": "string",
          "allowedValues": [
            "Global",
            "Regional"
          ],
          "nullable": true,
          "metadata": {
            "description": "Optional. Tier of a public IP prefix SKU. If set to `Global`, the `zones` property must be empty."
          }
        },
        "prefixLength": {
          "type": "int",
          "nullable": true,
          "minValue": 28,
          "maxValue": 127,
          "metadata": {
            "description": "Optional. Length of the Public IP Prefix."
          }
        },
        "publicIPAddressVersion": {
          "type": "string",
          "allowedValues": [
            "IPv4",
            "IPv6"
          ],
          "nullable": true,
          "metadata": {
            "description": "Optional. The public IP address version."
          }
        },
        "lock": {
          "$ref": "#/definitions/lockType",
          "nullable": true,
          "metadata": {
            "description": "Optional. The lock settings of the public IP prefix."
          }
        },
        "roleAssignments": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/roleAssignmentType"
          },
          "nullable": true,
          "metadata": {
            "description": "Optional. Array of role assignments to create for the public IP prefix."
          }
        },
        "tags": {
          "type": "object",
          "metadata": {
            "__bicep_resource_derived_type!": {
              "source": "Microsoft.Network/publicIPPrefixes@2024-10-01#properties/tags"
            },
            "description": "Optional. Tags of the public IP prefix resource."
          },
          "nullable": true
        },
        "customIPPrefix": {
          "type": "object",
          "metadata": {
            "__bicep_resource_derived_type!": {
              "source": "Microsoft.Network/publicIPPrefixes@2024-10-01#properties/properties/properties/customIPPrefix"
            },
            "description": "Optional. The custom IP address prefix that this prefix is associated with. A custom IP address prefix is a contiguous range of IP addresses owned by an external customer and provisioned into a subscription. When a custom IP prefix is in Provisioned, Commissioning, or Commissioned state, a linked public IP prefix can be created. Either as a subset of the custom IP prefix range or the entire range."
          },
          "nullable": true
        },
        "ipTags": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/prefixIpTagType"
          },
          "nullable": true,
          "metadata": {
            "description": "Optional. The list of tags associated with the public IP prefix."
          }
        },
        "availabilityZones": {
          "type": "array",
          "allowedValues": [
            1,
            2,
            3
          ],
          "nullable": true,
          "metadata": {
            "description": "Optional. A list of availability zones denoting the IP allocated for the resource needs to come from. This is only applicable for regional public IP prefixes and must be empty for global public IP prefixes."
          }
        },
        "enableTelemetry": {
          "type": "bool",
          "nullable": true,
          "metadata": {
            "description": "Optional. Enable/Disable usage telemetry for the public IP prefix module."
          }
        }
      },
      "metadata": {
        "__bicep_export!": true,
        "description": "The type for a public IP prefix configuration within a frontend IP configuration."
      }
    },
    "frontendIPConfigurationType": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "metadata": {
            "description": "Required. The name of the frontend IP configuration."
          }
        },
        "publicIPAddressResourceId": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "Optional. The resource ID of an existing public IP address to use. Cannot be used together with publicIPAddressConfiguration."
          }
        },
        "publicIPAddressConfiguration": {
          "$ref": "#/definitions/publicIPAddressConfigurationType",
          "nullable": true,
          "metadata": {
            "description": "Optional. The configuration to create a new public IP address. Cannot be used together with publicIPAddressResourceId."
          }
        },
        "publicIPPrefixResourceId": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "Optional. The resource ID of an existing public IP prefix to use. Cannot be used together with publicIPPrefixConfiguration."
          }
        },
        "publicIPPrefixConfiguration": {
          "$ref": "#/definitions/publicIPPrefixConfigurationType",
          "nullable": true,
          "metadata": {
            "description": "Optional. The configuration to create a new public IP prefix. Cannot be used together with publicIPPrefixResourceId."
          }
        },
        "subnetResourceId": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "Optional. The resource ID of the subnet to use for a private frontend IP configuration."
          }
        },
        "privateIPAddress": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "Optional. The private IP address to use for a private frontend IP configuration. Requires subnetResourceId."
          }
        },
        "privateIPAddressVersion": {
          "type": "string",
          "allowedValues": [
            "IPv4",
            "IPv6"
          ],
          "nullable": true,
          "metadata": {
            "description": "Optional. The private IP address version. Only applicable for private frontend IP configurations."
          }
        },
        "gatewayLoadBalancerResourceId": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "Optional. The resource ID of the gateway load balancer."
          }
        },
        "availabilityZones": {
          "type": "array",
          "allowedValues": [
            1,
            2,
            3
          ],
          "nullable": true,
          "metadata": {
            "description": "Optional. A list of availability zones denoting the IP allocated for the resource needs to come from."
          }
        },
        "tags": {
          "type": "object",
          "metadata": {
            "__bicep_resource_derived_type!": {
              "source": "Microsoft.Network/loadBalancers@2024-10-01#properties/tags"
            },
            "description": "Optional. Tags of the frontend IP configuration."
          },
          "nullable": true
        }
      },
      "metadata": {
        "__bicep_export!": true,
        "description": "The type for a frontend IP configuration."
      }
    },
    "ddosSettingsType": {
      "type": "object",
      "properties": {
        "ddosProtectionPlan": {
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "metadata": {
                "description": "Required. The resource ID of the DDOS protection plan associated with the public IP address."
              }
            }
          },
          "nullable": true,
          "metadata": {
            "description": "Optional. The DDoS protection plan associated with the public IP address."
          }
        },
        "protectionMode": {
          "type": "string",
          "allowedValues": [
            "Enabled"
          ],
          "metadata": {
            "description": "Required. The DDoS protection policy customizations."
          }
        }
      },
      "metadata": {
        "__bicep_imported_from!": {
          "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/res/network/public-ip-address:0.9.1"
        }
      }
    },
    "diagnosticSettingFullType": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "Optional. The name of the diagnostic setting."
          }
        },
        "logCategoriesAndGroups": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "category": {
                "type": "string",
                "nullable": true,
                "metadata": {
                  "description": "Optional. Name of a Diagnostic Log category for a resource type this setting is applied to. Set the specific logs to collect here."
                }
              },
              "categoryGroup": {
                "type": "string",
                "nullable": true,
                "metadata": {
                  "description": "Optional. Name of a Diagnostic Log category group for a resource type this setting is applied to. Set to `allLogs` to collect all logs."
                }
              },
              "enabled": {
                "type": "bool",
                "nullable": true,
                "metadata": {
                  "description": "Optional. Enable or disable the category explicitly. Default is `true`."
                }
              }
            }
          },
          "nullable": true,
          "metadata": {
            "description": "Optional. The name of logs that will be streamed. \"allLogs\" includes all possible logs for the resource. Set to `[]` to disable log collection."
          }
        },
        "metricCategories": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "category": {
                "type": "string",
                "metadata": {
                  "description": "Required. Name of a Diagnostic Metric category for a resource type this setting is applied to. Set to `AllMetrics` to collect all metrics."
                }
              },
              "enabled": {
                "type": "bool",
                "nullable": true,
                "metadata": {
                  "description": "Optional. Enable or disable the category explicitly. Default is `true`."
                }
              }
            }
          },
          "nullable": true,
          "metadata": {
            "description": "Optional. The name of metrics that will be streamed. \"allMetrics\" includes all possible metrics for the resource. Set to `[]` to disable metric collection."
          }
        },
        "logAnalyticsDestinationType": {
          "type": "string",
          "allowedValues": [
            "AzureDiagnostics",
            "Dedicated"
          ],
          "nullable": true,
          "metadata": {
            "description": "Optional. A string indicating whether the export to Log Analytics should use the default destination type, i.e. AzureDiagnostics, or use a destination type."
          }
        },
        "workspaceResourceId": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "Optional. Resource ID of the diagnostic log analytics workspace. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
          }
        },
        "storageAccountResourceId": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "Optional. Resource ID of the diagnostic storage account. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
          }
        },
        "eventHubAuthorizationRuleResourceId": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "Optional. Resource ID of the diagnostic event hub authorization rule for the Event Hubs namespace in which the event hub should be created or streamed to."
          }
        },
        "eventHubName": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "Optional. Name of the diagnostic event hub within the namespace to which logs are streamed. Without this, an event hub is created for each log category. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
          }
        },
        "marketplacePartnerResourceId": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "Optional. The full ARM resource ID of the Marketplace resource to which you would like to send Diagnostic Logs."
          }
        }
      },
      "metadata": {
        "description": "An AVM-aligned type for a diagnostic setting. To be used if both logs & metrics are supported by the resource provider.",
        "__bicep_imported_from!": {
          "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.5.1"
        }
      }
    },
    "dnsSettingsType": {
      "type": "object",
      "properties": {
        "domainNameLabel": {
          "type": "string",
          "metadata": {
            "description": "Required. The domain name label. The concatenation of the domain name label and the regionalized DNS zone make up the fully qualified domain name associated with the public IP address. If a domain name label is specified, an A DNS record is created for the public IP in the Microsoft Azure DNS system."
          }
        },
        "domainNameLabelScope": {
          "type": "string",
          "allowedValues": [
            "NoReuse",
            "ResourceGroupReuse",
            "SubscriptionReuse",
            "TenantReuse"
          ],
          "nullable": true,
          "metadata": {
            "description": "Optional. The domain name label scope. If a domain name label and a domain name label scope are specified, an A DNS record is created for the public IP in the Microsoft Azure DNS system with a hashed value includes in FQDN."
          }
        },
        "fqdn": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "Optional. The Fully Qualified Domain Name of the A DNS record associated with the public IP. This is the concatenation of the domainNameLabel and the regionalized DNS zone."
          }
        },
        "reverseFqdn": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "Optional. The reverse FQDN. A user-visible, fully qualified domain name that resolves to this public IP address. If the reverseFqdn is specified, then a PTR DNS record is created pointing from the IP address in the in-addr.arpa domain to the reverse FQDN."
          }
        }
      },
      "metadata": {
        "__bicep_imported_from!": {
          "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/res/network/public-ip-address:0.9.1"
        }
      }
    },
    "lockType": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "Optional. Specify the name of lock."
          }
        },
        "kind": {
          "type": "string",
          "allowedValues": [
            "CanNotDelete",
            "None",
            "ReadOnly"
          ],
          "nullable": true,
          "metadata": {
            "description": "Optional. Specify the type of lock."
          }
        },
        "notes": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "Optional. Specify the notes of the lock."
          }
        }
      },
      "metadata": {
        "description": "An AVM-aligned type for a lock.",
        "__bicep_imported_from!": {
          "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.6.0"
        }
      }
    },
    "pipIpTagType": {
      "type": "object",
      "properties": {
        "ipTagType": {
          "type": "string",
          "metadata": {
            "description": "Required. The IP tag type."
          }
        },
        "tag": {
          "type": "string",
          "metadata": {
            "description": "Required. The IP tag."
          }
        }
      },
      "metadata": {
        "__bicep_imported_from!": {
          "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/res/network/public-ip-address:0.9.1",
          "originalIdentifier": "ipTagType"
        }
      }
    },
    "prefixIpTagType": {
      "type": "object",
      "properties": {
        "ipTagType": {
          "type": "string",
          "metadata": {
            "description": "Required. The IP tag type."
          }
        },
        "tag": {
          "type": "string",
          "metadata": {
            "description": "Required. The IP tag."
          }
        }
      },
      "metadata": {
        "__bicep_imported_from!": {
          "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/res/network/public-ip-prefix:0.7.1",
          "originalIdentifier": "ipTagType"
        }
      }
    },
    "roleAssignmentType": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "Optional. The name (as GUID) of the role assignment. If not provided, a GUID will be generated."
          }
        },
        "roleDefinitionIdOrName": {
          "type": "string",
          "metadata": {
            "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
          }
        },
        "principalId": {
          "type": "string",
          "metadata": {
            "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
          }
        },
        "principalType": {
          "type": "string",
          "allowedValues": [
            "Device",
            "ForeignGroup",
            "Group",
            "ServicePrincipal",
            "User"
          ],
          "nullable": true,
          "metadata": {
            "description": "Optional. The principal type of the assigned principal ID."
          }
        },
        "description": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "Optional. The description of the role assignment."
          }
        },
        "condition": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
          }
        },
        "conditionVersion": {
          "type": "string",
          "allowedValues": [
            "2.0"
          ],
          "nullable": true,
          "metadata": {
            "description": "Optional. Version of the condition."
          }
        },
        "delegatedManagedIdentityResourceId": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "Optional. The Resource Id of the delegated managed identity resource."
          }
        }
      },
      "metadata": {
        "description": "An AVM-aligned type for a role assignment.",
        "__bicep_imported_from!": {
          "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.5.1"
        }
      }
    }
  },
  "parameters": {
    "name": {
      "type": "string",
      "metadata": {
        "description": "Required. The Proximity Placement Groups Name."
      }
    },
    "location": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "Optional. Location for all resources."
      }
    },
    "skuName": {
      "type": "string",
      "defaultValue": "Standard",
      "allowedValues": [
        "Basic",
        "Standard"
      ],
      "metadata": {
        "description": "Optional. Name of a load balancer SKU."
      }
    },
    "frontendIPConfigurations": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/frontendIPConfigurationType"
      },
      "minLength": 1,
      "metadata": {
        "description": "Required. Array of objects containing all frontend IP configurations."
      }
    },
    "backendAddressPools": {
      "type": "array",
      "nullable": true,
      "metadata": {
        "description": "Optional. Collection of backend address pools used by a load balancer."
      }
    },
    "loadBalancingRules": {
      "type": "array",
      "nullable": true,
      "metadata": {
        "description": "Optional. Array of objects containing all load balancing rules."
      }
    },
    "probes": {
      "type": "array",
      "nullable": true,
      "metadata": {
        "description": "Optional. Array of objects containing all probes, these are references in the load balancing rules."
      }
    },
    "diagnosticSettings": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/diagnosticSettingFullType"
      },
      "nullable": true,
      "metadata": {
        "description": "Optional. The diagnostic settings of the service."
      }
    },
    "lock": {
      "$ref": "#/definitions/lockType",
      "nullable": true,
      "metadata": {
        "description": "Optional. The lock settings of the service."
      }
    },
    "roleAssignments": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/roleAssignmentType"
      },
      "nullable": true,
      "metadata": {
        "description": "Optional. Array of role assignments to create."
      }
    },
    "tags": {
      "type": "object",
      "metadata": {
        "__bicep_resource_derived_type!": {
          "source": "Microsoft.Network/loadBalancers@2024-10-01#properties/tags"
        },
        "description": "Optional. Tags of the resource."
      },
      "nullable": true
    },
    "enableTelemetry": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Optional. Enable/Disable usage telemetry for module."
      }
    },
    "inboundNatRules": {
      "type": "array",
      "defaultValue": [],
      "metadata": {
        "description": "Optional. Collection of inbound NAT Rules used by a load balancer. Defining inbound NAT rules on your load balancer is mutually exclusive with defining an inbound NAT pool. Inbound NAT pools are referenced from virtual machine scale sets. NICs that are associated with individual virtual machines cannot reference an Inbound NAT pool. They have to reference individual inbound NAT rules."
      }
    },
    "outboundRules": {
      "type": "array",
      "defaultValue": [],
      "metadata": {
        "description": "Optional. The outbound rules."
      }
    }
  },
  "variables": {
    "copy": [
      {
        "name": "loadBalancingRulesVar",
        "count": "[length(coalesce(parameters('loadBalancingRules'), createArray()))]",
        "input": {
          "name": "[coalesce(parameters('loadBalancingRules'), createArray())[copyIndex('loadBalancingRulesVar')].name]",
          "properties": {
            "backendAddressPool": {
              "id": "[resourceId('Microsoft.Network/loadBalancers/backendAddressPools', parameters('name'), coalesce(parameters('loadBalancingRules'), createArray())[copyIndex('loadBalancingRulesVar')].backendAddressPoolName)]"
            },
            "backendPort": "[coalesce(parameters('loadBalancingRules'), createArray())[copyIndex('loadBalancingRulesVar')].backendPort]",
            "disableOutboundSnat": "[coalesce(tryGet(coalesce(parameters('loadBalancingRules'), createArray())[copyIndex('loadBalancingRulesVar')], 'disableOutboundSnat'), true())]",
            "enableFloatingIP": "[coalesce(tryGet(coalesce(parameters('loadBalancingRules'), createArray())[copyIndex('loadBalancingRulesVar')], 'enableFloatingIP'), false())]",
            "enableTcpReset": "[coalesce(tryGet(coalesce(parameters('loadBalancingRules'), createArray())[copyIndex('loadBalancingRulesVar')], 'enableTcpReset'), false())]",
            "frontendIPConfiguration": {
              "id": "[resourceId('Microsoft.Network/loadBalancers/frontendIPConfigurations', parameters('name'), coalesce(parameters('loadBalancingRules'), createArray())[copyIndex('loadBalancingRulesVar')].frontendIPConfigurationName)]"
            },
            "frontendPort": "[coalesce(parameters('loadBalancingRules'), createArray())[copyIndex('loadBalancingRulesVar')].frontendPort]",
            "idleTimeoutInMinutes": "[coalesce(tryGet(coalesce(parameters('loadBalancingRules'), createArray())[copyIndex('loadBalancingRulesVar')], 'idleTimeoutInMinutes'), 4)]",
            "loadDistribution": "[coalesce(tryGet(coalesce(parameters('loadBalancingRules'), createArray())[copyIndex('loadBalancingRulesVar')], 'loadDistribution'), 'Default')]",
            "probe": {
              "id": "[format('{0}/probes/{1}', resourceId('Microsoft.Network/loadBalancers', parameters('name')), coalesce(parameters('loadBalancingRules'), createArray())[copyIndex('loadBalancingRulesVar')].probeName)]"
            },
            "protocol": "[coalesce(tryGet(coalesce(parameters('loadBalancingRules'), createArray())[copyIndex('loadBalancingRulesVar')], 'protocol'), 'Tcp')]"
          }
        }
      },
      {
        "name": "outboundRulesVar",
        "count": "[length(parameters('outboundRules'))]",
        "input": {
          "name": "[parameters('outboundRules')[copyIndex('outboundRulesVar')].name]",
          "properties": {
            "frontendIPConfigurations": [
              {
                "id": "[resourceId('Microsoft.Network/loadBalancers/frontendIPConfigurations', parameters('name'), parameters('outboundRules')[copyIndex('outboundRulesVar')].frontendIPConfigurationName)]"
              }
            ],
            "backendAddressPool": {
              "id": "[resourceId('Microsoft.Network/loadBalancers/backendAddressPools', parameters('name'), parameters('outboundRules')[copyIndex('outboundRulesVar')].backendAddressPoolName)]"
            },
            "protocol": "[coalesce(tryGet(parameters('outboundRules')[copyIndex('outboundRulesVar')], 'protocol'), 'All')]",
            "allocatedOutboundPorts": "[coalesce(tryGet(parameters('outboundRules')[copyIndex('outboundRulesVar')], 'allocatedOutboundPorts'), 63984)]",
            "enableTcpReset": "[coalesce(tryGet(parameters('outboundRules')[copyIndex('outboundRulesVar')], 'enableTcpReset'), true())]",
            "idleTimeoutInMinutes": "[coalesce(tryGet(parameters('outboundRules')[copyIndex('outboundRulesVar')], 'idleTimeoutInMinutes'), 4)]"
          }
        }
      },
      {
        "name": "probesVar",
        "count": "[length(coalesce(parameters('probes'), createArray()))]",
        "input": {
          "name": "[coalesce(parameters('probes'), createArray())[copyIndex('probesVar')].name]",
          "properties": {
            "protocol": "[coalesce(tryGet(coalesce(parameters('probes'), createArray())[copyIndex('probesVar')], 'protocol'), 'Tcp')]",
            "requestPath": "[if(not(equals(toLower(coalesce(parameters('probes'), createArray())[copyIndex('probesVar')].protocol), 'tcp')), coalesce(parameters('probes'), createArray())[copyIndex('probesVar')].requestPath, null())]",
            "port": "[coalesce(tryGet(coalesce(parameters('probes'), createArray())[copyIndex('probesVar')], 'port'), 80)]",
            "intervalInSeconds": "[coalesce(tryGet(coalesce(parameters('probes'), createArray())[copyIndex('probesVar')], 'intervalInSeconds'), 5)]",
            "numberOfProbes": "[coalesce(tryGet(coalesce(parameters('probes'), createArray())[copyIndex('probesVar')], 'numberOfProbes'), 2)]"
          }
        }
      },
      {
        "name": "backendAddressPoolNames",
        "count": "[length(coalesce(parameters('backendAddressPools'), createArray()))]",
        "input": {
          "name": "[coalesce(parameters('backendAddressPools'), createArray())[copyIndex('backendAddressPoolNames')].name]"
        }
      },
      {
        "name": "formattedRoleAssignments",
        "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]",
        "input": "[union(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')], createObject('roleDefinitionId', coalesce(tryGet(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName), if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName)))))]"
      }
    ],
    "enableReferencedModulesTelemetry": false,
    "builtInRoleNames": {
      "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
      "Network Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4d97b98b-1d4f-4787-a291-c67834d212e7')]",
      "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
      "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
      "Role Based Access Control Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]",
      "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]"
    }
  },
  "resources": {
    "avmTelemetry": {
      "condition": "[parameters('enableTelemetry')]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2024-03-01",
      "name": "[format('46d3xbcp.res.network-loadbalancer.{0}.{1}', replace('-..--..-', '.', '-'), substring(uniqueString(deployment().name, parameters('location')), 0, 4))]",
      "properties": {
        "mode": "Incremental",
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "resources": [],
          "outputs": {
            "telemetry": {
              "type": "String",
              "value": "For more information, see https://aka.ms/avm/TelemetryInfo"
            }
          }
        }
      }
    },
    "loadBalancer": {
      "type": "Microsoft.Network/loadBalancers",
      "apiVersion": "2024-07-01",
      "name": "[parameters('name')]",
      "location": "[parameters('location')]",
      "tags": "[parameters('tags')]",
      "sku": {
        "name": "[parameters('skuName')]"
      },
      "properties": {
        "copy": [
          {
            "name": "frontendIPConfigurations",
            "count": "[length(parameters('frontendIPConfigurations'))]",
            "input": {
              "name": "[parameters('frontendIPConfigurations')[copyIndex('frontendIPConfigurations')].name]",
              "properties": {
                "privateIPAddress": "[tryGet(parameters('frontendIPConfigurations')[copyIndex('frontendIPConfigurations')], 'privateIPAddress')]",
                "privateIPAddressVersion": "[coalesce(tryGet(parameters('frontendIPConfigurations')[copyIndex('frontendIPConfigurations')], 'privateIPAddressVersion'), 'IPv4')]",
                "privateIPAllocationMethod": "[if(not(empty(tryGet(parameters('frontendIPConfigurations')[copyIndex('frontendIPConfigurations')], 'subnetResourceId'))), if(contains(parameters('frontendIPConfigurations')[copyIndex('frontendIPConfigurations')], 'privateIPAddress'), 'Static', 'Dynamic'), null())]",
                "publicIPAddress": "[if(not(empty(tryGet(parameters('frontendIPConfigurations')[copyIndex('frontendIPConfigurations')], 'publicIPAddressConfiguration'))), if(not(empty(tryGet(parameters('frontendIPConfigurations')[copyIndex('frontendIPConfigurations')], 'publicIPAddressResourceId'))), createObject('id', tryGet(parameters('frontendIPConfigurations')[copyIndex('frontendIPConfigurations')], 'publicIPAddressResourceId')), createObject('id', reference(format('loadBalancer_publicIPAddresses[{0}]', copyIndex('frontendIPConfigurations'))).outputs.resourceId.value)), null())]",
                "publicIPPrefix": "[if(not(empty(tryGet(parameters('frontendIPConfigurations')[copyIndex('frontendIPConfigurations')], 'publicIPPrefixConfiguration'))), if(not(empty(tryGet(parameters('frontendIPConfigurations')[copyIndex('frontendIPConfigurations')], 'publicIPPrefixResourceId'))), createObject('id', tryGet(parameters('frontendIPConfigurations')[copyIndex('frontendIPConfigurations')], 'publicIPPrefixResourceId')), createObject('id', reference(format('loadBalancer_publicIPPrefixes[{0}]', copyIndex('frontendIPConfigurations'))).outputs.resourceId.value)), null())]",
                "gatewayLoadBalancer": "[if(not(empty(tryGet(parameters('frontendIPConfigurations')[copyIndex('frontendIPConfigurations')], 'gatewayLoadBalancerResourceId'))), createObject('id', tryGet(parameters('frontendIPConfigurations')[copyIndex('frontendIPConfigurations')], 'gatewayLoadBalancerResourceId')), null())]",
                "subnet": "[if(not(empty(tryGet(parameters('frontendIPConfigurations')[copyIndex('frontendIPConfigurations')], 'subnetResourceId'))), createObject('id', tryGet(parameters('frontendIPConfigurations')[copyIndex('frontendIPConfigurations')], 'subnetResourceId')), null())]"
              },
              "zones": "[if(not(empty(tryGet(parameters('frontendIPConfigurations')[copyIndex('frontendIPConfigurations')], 'availabilityZones'))), map(coalesce(tryGet(parameters('frontendIPConfigurations')[copyIndex('frontendIPConfigurations')], 'availabilityZones'), createArray()), lambda('zone', string(lambdaVariables('zone')))), if(equals(parameters('skuName'), 'Standard'), createArray('1', '2', '3'), null()))]"
            }
          }
        ],
        "loadBalancingRules": "[variables('loadBalancingRulesVar')]",
        "backendAddressPools": "[variables('backendAddressPoolNames')]",
        "outboundRules": "[variables('outboundRulesVar')]",
        "probes": "[variables('probesVar')]"
      },
      "dependsOn": [
        "loadBalancer_publicIPAddresses",
        "loadBalancer_publicIPPrefixes"
      ]
    },
    "loadBalancer_lock": {
      "condition": "[and(not(empty(coalesce(parameters('lock'), createObject()))), not(equals(tryGet(parameters('lock'), 'kind'), 'None')))]",
      "type": "Microsoft.Authorization/locks",
      "apiVersion": "2020-05-01",
      "scope": "[format('Microsoft.Network/loadBalancers/{0}', parameters('name'))]",
      "name": "[coalesce(tryGet(parameters('lock'), 'name'), format('lock-{0}', parameters('name')))]",
      "properties": {
        "level": "[coalesce(tryGet(parameters('lock'), 'kind'), '')]",
        "notes": "[coalesce(tryGet(parameters('lock'), 'notes'), if(equals(tryGet(parameters('lock'), 'kind'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot delete or modify the resource or child resources.'))]"
      },
      "dependsOn": [
        "loadBalancer"
      ]
    },
    "loadBalancer_diagnosticSettings": {
      "copy": {
        "name": "loadBalancer_diagnosticSettings",
        "count": "[length(coalesce(parameters('diagnosticSettings'), createArray()))]"
      },
      "type": "Microsoft.Insights/diagnosticSettings",
      "apiVersion": "2021-05-01-preview",
      "scope": "[format('Microsoft.Network/loadBalancers/{0}', parameters('name'))]",
      "name": "[coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'name'), format('{0}-diagnosticSettings', parameters('name')))]",
      "properties": {
        "copy": [
          {
            "name": "metrics",
            "count": "[length(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics'))))]",
            "input": {
              "category": "[coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics')))[copyIndex('metrics')].category]",
              "enabled": "[coalesce(tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics')))[copyIndex('metrics')], 'enabled'), true())]",
              "timeGrain": null
            }
          },
          {
            "name": "logs",
            "count": "[length(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs'))))]",
            "input": {
              "categoryGroup": "[tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'categoryGroup')]",
              "category": "[tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'category')]",
              "enabled": "[coalesce(tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'enabled'), true())]"
            }
          }
        ],
        "storageAccountId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'storageAccountResourceId')]",
        "workspaceId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'workspaceResourceId')]",
        "eventHubAuthorizationRuleId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'eventHubAuthorizationRuleResourceId')]",
        "eventHubName": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'eventHubName')]",
        "marketplacePartnerId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'marketplacePartnerResourceId')]",
        "logAnalyticsDestinationType": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logAnalyticsDestinationType')]"
      },
      "dependsOn": [
        "loadBalancer"
      ]
    },
    "loadBalancer_roleAssignments": {
      "copy": {
        "name": "loadBalancer_roleAssignments",
        "count": "[length(coalesce(variables('formattedRoleAssignments'), createArray()))]"
      },
      "type": "Microsoft.Authorization/roleAssignments",
      "apiVersion": "2022-04-01",
      "scope": "[format('Microsoft.Network/loadBalancers/{0}', parameters('name'))]",
      "name": "[coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'name'), guid(resourceId('Microsoft.Network/loadBalancers', parameters('name')), coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId, coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId))]",
      "properties": {
        "roleDefinitionId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId]",
        "principalId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId]",
        "description": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'description')]",
        "principalType": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'principalType')]",
        "condition": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition')]",
        "conditionVersion": "[if(not(empty(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
        "delegatedManagedIdentityResourceId": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
      },
      "dependsOn": [
        "loadBalancer"
      ]
    },
    "loadBalancer_publicIPAddresses": {
      "copy": {
        "name": "loadBalancer_publicIPAddresses",
        "count": "[length(parameters('frontendIPConfigurations'))]"
      },
      "condition": "[and(not(empty(tryGet(parameters('frontendIPConfigurations')[copyIndex()], 'publicIPAddressConfiguration'))), empty(tryGet(parameters('frontendIPConfigurations')[copyIndex()], 'publicIPAddressResourceId')))]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2025-04-01",
      "name": "[format('{0}-publicIP-{1}', deployment().name, copyIndex())]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "name": {
            "value": "[coalesce(tryGet(tryGet(parameters('frontendIPConfigurations')[copyIndex()], 'publicIPAddressConfiguration'), 'name'), format('{0}-pip-{1}', parameters('name'), copyIndex()))]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "lock": {
            "value": "[parameters('lock')]"
          },
          "diagnosticSettings": {
            "value": "[tryGet(tryGet(parameters('frontendIPConfigurations')[copyIndex()], 'publicIPAddressConfiguration'), 'diagnosticSettings')]"
          },
          "idleTimeoutInMinutes": {
            "value": "[tryGet(tryGet(parameters('frontendIPConfigurations')[copyIndex()], 'publicIPAddressConfiguration'), 'idleTimeoutInMinutes')]"
          },
          "ddosSettings": {
            "value": "[tryGet(tryGet(parameters('frontendIPConfigurations')[copyIndex()], 'publicIPAddressConfiguration'), 'ddosSettings')]"
          },
          "dnsSettings": {
            "value": "[tryGet(tryGet(parameters('frontendIPConfigurations')[copyIndex()], 'publicIPAddressConfiguration'), 'dnsSettings')]"
          },
          "publicIPAddressVersion": {
            "value": "[tryGet(tryGet(parameters('frontendIPConfigurations')[copyIndex()], 'publicIPAddressConfiguration'), 'publicIPAddressVersion')]"
          },
          "publicIPAllocationMethod": {
            "value": "[tryGet(tryGet(parameters('frontendIPConfigurations')[copyIndex()], 'publicIPAddressConfiguration'), 'publicIPAllocationMethod')]"
          },
          "publicIpPrefixResourceId": {
            "value": "[tryGet(tryGet(parameters('frontendIPConfigurations')[copyIndex()], 'publicIPAddressConfiguration'), 'publicIpPrefixResourceId')]"
          },
          "roleAssignments": {
            "value": "[tryGet(tryGet(parameters('frontendIPConfigurations')[copyIndex()], 'publicIPAddressConfiguration'), 'roleAssignments')]"
          },
          "skuName": {
            "value": "[coalesce(tryGet(tryGet(parameters('frontendIPConfigurations')[copyIndex()], 'publicIPAddressConfiguration'), 'skuName'), parameters('skuName'))]"
          },
          "skuTier": {
            "value": "[tryGet(tryGet(parameters('frontendIPConfigurations')[copyIndex()], 'publicIPAddressConfiguration'), 'skuTier')]"
          },
          "tags": {
            "value": "[coalesce(tryGet(parameters('frontendIPConfigurations')[copyIndex()], 'tags'), parameters('tags'))]"
          },
          "availabilityZones": {
            "value": "[tryGet(tryGet(parameters('frontendIPConfigurations')[copyIndex()], 'publicIPAddressConfiguration'), 'availabilityZones')]"
          },
          "enableTelemetry": {
            "value": "[variables('enableReferencedModulesTelemetry')]"
          },
          "ipTags": {
            "value": "[tryGet(tryGet(parameters('frontendIPConfigurations')[copyIndex()], 'publicIPAddressConfiguration'), 'ipTags')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "languageVersion": "2.0",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.38.5.1644",
              "templateHash": "7550528442771433353"
            },
            "name": "Public IP Addresses",
            "description": "This module deploys a Public IP Address."
          },
          "definitions": {
            "dnsSettingsType": {
              "type": "object",
              "properties": {
                "domainNameLabel": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. The domain name label. The concatenation of the domain name label and the regionalized DNS zone make up the fully qualified domain name associated with the public IP address. If a domain name label is specified, an A DNS record is created for the public IP in the Microsoft Azure DNS system."
                  }
                },
                "domainNameLabelScope": {
                  "type": "string",
                  "allowedValues": [
                    "NoReuse",
                    "ResourceGroupReuse",
                    "SubscriptionReuse",
                    "TenantReuse"
                  ],
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The domain name label scope. If a domain name label and a domain name label scope are specified, an A DNS record is created for the public IP in the Microsoft Azure DNS system with a hashed value includes in FQDN."
                  }
                },
                "fqdn": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The Fully Qualified Domain Name of the A DNS record associated with the public IP. This is the concatenation of the domainNameLabel and the regionalized DNS zone."
                  }
                },
                "reverseFqdn": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The reverse FQDN. A user-visible, fully qualified domain name that resolves to this public IP address. If the reverseFqdn is specified, then a PTR DNS record is created pointing from the IP address in the in-addr.arpa domain to the reverse FQDN."
                  }
                }
              },
              "metadata": {
                "__bicep_export!": true
              }
            },
            "ddosSettingsType": {
              "type": "object",
              "properties": {
                "ddosProtectionPlan": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The resource ID of the DDOS protection plan associated with the public IP address."
                      }
                    }
                  },
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The DDoS protection plan associated with the public IP address."
                  }
                },
                "protectionMode": {
                  "type": "string",
                  "allowedValues": [
                    "Enabled"
                  ],
                  "metadata": {
                    "description": "Required. The DDoS protection policy customizations."
                  }
                }
              },
              "metadata": {
                "__bicep_export!": true
              }
            },
            "ipTagType": {
              "type": "object",
              "properties": {
                "ipTagType": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. The IP tag type."
                  }
                },
                "tag": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. The IP tag."
                  }
                }
              },
              "metadata": {
                "__bicep_export!": true
              }
            },
            "diagnosticSettingFullType": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The name of the diagnostic setting."
                  }
                },
                "logCategoriesAndGroups": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "category": {
                        "type": "string",
                        "nullable": true,
                        "metadata": {
                          "description": "Optional. Name of a Diagnostic Log category for a resource type this setting is applied to. Set the specific logs to collect here."
                        }
                      },
                      "categoryGroup": {
                        "type": "string",
                        "nullable": true,
                        "metadata": {
                          "description": "Optional. Name of a Diagnostic Log category group for a resource type this setting is applied to. Set to `allLogs` to collect all logs."
                        }
                      },
                      "enabled": {
                        "type": "bool",
                        "nullable": true,
                        "metadata": {
                          "description": "Optional. Enable or disable the category explicitly. Default is `true`."
                        }
                      }
                    }
                  },
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The name of logs that will be streamed. \"allLogs\" includes all possible logs for the resource. Set to `[]` to disable log collection."
                  }
                },
                "metricCategories": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "category": {
                        "type": "string",
                        "metadata": {
                          "description": "Required. Name of a Diagnostic Metric category for a resource type this setting is applied to. Set to `AllMetrics` to collect all metrics."
                        }
                      },
                      "enabled": {
                        "type": "bool",
                        "nullable": true,
                        "metadata": {
                          "description": "Optional. Enable or disable the category explicitly. Default is `true`."
                        }
                      }
                    }
                  },
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The name of metrics that will be streamed. \"allMetrics\" includes all possible metrics for the resource. Set to `[]` to disable metric collection."
                  }
                },
                "logAnalyticsDestinationType": {
                  "type": "string",
                  "allowedValues": [
                    "AzureDiagnostics",
                    "Dedicated"
                  ],
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. A string indicating whether the export to Log Analytics should use the default destination type, i.e. AzureDiagnostics, or use a destination type."
                  }
                },
                "workspaceResourceId": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Resource ID of the diagnostic log analytics workspace. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                  }
                },
                "storageAccountResourceId": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Resource ID of the diagnostic storage account. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                  }
                },
                "eventHubAuthorizationRuleResourceId": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Resource ID of the diagnostic event hub authorization rule for the Event Hubs namespace in which the event hub should be created or streamed to."
                  }
                },
                "eventHubName": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Name of the diagnostic event hub within the namespace to which logs are streamed. Without this, an event hub is created for each log category. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                  }
                },
                "marketplacePartnerResourceId": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The full ARM resource ID of the Marketplace resource to which you would like to send Diagnostic Logs."
                  }
                }
              },
              "metadata": {
                "description": "An AVM-aligned type for a diagnostic setting. To be used if both logs & metrics are supported by the resource provider.",
                "__bicep_imported_from!": {
                  "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.2.1"
                }
              }
            },
            "lockType": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Specify the name of lock."
                  }
                },
                "kind": {
                  "type": "string",
                  "allowedValues": [
                    "CanNotDelete",
                    "None",
                    "ReadOnly"
                  ],
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Specify the type of lock."
                  }
                },
                "notes": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Specify the notes of the lock."
                  }
                }
              },
              "metadata": {
                "description": "An AVM-aligned type for a lock.",
                "__bicep_imported_from!": {
                  "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.6.0"
                }
              }
            },
            "roleAssignmentType": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The name (as GUID) of the role assignment. If not provided, a GUID will be generated."
                  }
                },
                "roleDefinitionIdOrName": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                  }
                },
                "principalId": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                  }
                },
                "principalType": {
                  "type": "string",
                  "allowedValues": [
                    "Device",
                    "ForeignGroup",
                    "Group",
                    "ServicePrincipal",
                    "User"
                  ],
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The principal type of the assigned principal ID."
                  }
                },
                "description": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The description of the role assignment."
                  }
                },
                "condition": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                  }
                },
                "conditionVersion": {
                  "type": "string",
                  "allowedValues": [
                    "2.0"
                  ],
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Version of the condition."
                  }
                },
                "delegatedManagedIdentityResourceId": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The Resource Id of the delegated managed identity resource."
                  }
                }
              },
              "metadata": {
                "description": "An AVM-aligned type for a role assignment.",
                "__bicep_imported_from!": {
                  "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.2.1"
                }
              }
            }
          },
          "parameters": {
            "name": {
              "type": "string",
              "metadata": {
                "description": "Required. The name of the Public IP Address."
              }
            },
            "publicIpPrefixResourceId": {
              "type": "string",
              "nullable": true,
              "metadata": {
                "description": "Optional. Resource ID of the Public IP Prefix object. This is only needed if you want your Public IPs created in a PIP Prefix."
              }
            },
            "publicIPAllocationMethod": {
              "type": "string",
              "defaultValue": "Static",
              "allowedValues": [
                "Dynamic",
                "Static"
              ],
              "metadata": {
                "description": "Optional. The public IP address allocation method."
              }
            },
            "availabilityZones": {
              "type": "array",
              "items": {
                "type": "int"
              },
              "defaultValue": [
                1,
                2,
                3
              ],
              "allowedValues": [
                1,
                2,
                3
              ],
              "metadata": {
                "description": "Optional. A list of availability zones denoting the IP allocated for the resource needs to come from."
              }
            },
            "publicIPAddressVersion": {
              "type": "string",
              "defaultValue": "IPv4",
              "allowedValues": [
                "IPv4",
                "IPv6"
              ],
              "metadata": {
                "description": "Optional. IP address version."
              }
            },
            "dnsSettings": {
              "$ref": "#/definitions/dnsSettingsType",
              "nullable": true,
              "metadata": {
                "description": "Optional. The DNS settings of the public IP address."
              }
            },
            "ipTags": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ipTagType"
              },
              "nullable": true,
              "metadata": {
                "description": "Optional. The list of tags associated with the public IP address."
              }
            },
            "lock": {
              "$ref": "#/definitions/lockType",
              "nullable": true,
              "metadata": {
                "description": "Optional. The lock settings of the service."
              }
            },
            "skuName": {
              "type": "string",
              "defaultValue": "Standard",
              "allowedValues": [
                "Basic",
                "Standard"
              ],
              "metadata": {
                "description": "Optional. Name of a public IP address SKU."
              }
            },
            "skuTier": {
              "type": "string",
              "defaultValue": "Regional",
              "allowedValues": [
                "Global",
                "Regional"
              ],
              "metadata": {
                "description": "Optional. Tier of a public IP address SKU."
              }
            },
            "ddosSettings": {
              "$ref": "#/definitions/ddosSettingsType",
              "nullable": true,
              "metadata": {
                "description": "Optional. The DDoS protection plan configuration associated with the public IP address."
              }
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]",
              "metadata": {
                "description": "Optional. Location for all resources."
              }
            },
            "roleAssignments": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/roleAssignmentType"
              },
              "nullable": true,
              "metadata": {
                "description": "Optional. Array of role assignments to create."
              }
            },
            "enableTelemetry": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Optional. Enable/Disable usage telemetry for module."
              }
            },
            "idleTimeoutInMinutes": {
              "type": "int",
              "defaultValue": 4,
              "metadata": {
                "description": "Optional. The idle timeout of the public IP address."
              }
            },
            "tags": {
              "type": "object",
              "metadata": {
                "__bicep_resource_derived_type!": {
                  "source": "Microsoft.Network/publicIPAddresses@2024-10-01#properties/tags"
                },
                "description": "Optional. Tags of the resource."
              },
              "nullable": true
            },
            "diagnosticSettings": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/diagnosticSettingFullType"
              },
              "nullable": true,
              "metadata": {
                "description": "Optional. The diagnostic settings of the service."
              }
            }
          },
          "variables": {
            "copy": [
              {
                "name": "formattedRoleAssignments",
                "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]",
                "input": "[union(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')], createObject('roleDefinitionId', coalesce(tryGet(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName), if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName)))))]"
              }
            ],
            "builtInRoleNames": {
              "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
              "DNS Resolver Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '0f2ebee7-ffd4-4fc0-b3b7-664099fdad5d')]",
              "DNS Zone Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'befefa01-2a29-4197-83a8-272ff33ce314')]",
              "Domain Services Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'eeaeda52-9324-47f6-8069-5d5bade478b2')]",
              "Domain Services Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '361898ef-9ed1-48c2-849c-a832951106bb')]",
              "Network Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4d97b98b-1d4f-4787-a291-c67834d212e7')]",
              "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
              "Private DNS Zone Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b12aa53e-6015-4669-85d0-8515ebb3ae7f')]",
              "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
              "Role Based Access Control Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]"
            }
          },
          "resources": {
            "avmTelemetry": {
              "condition": "[parameters('enableTelemetry')]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2024-03-01",
              "name": "[format('46d3xbcp.res.network-publicipaddress.{0}.{1}', replace('0.9.1', '.', '-'), substring(uniqueString(deployment().name, parameters('location')), 0, 4))]",
              "properties": {
                "mode": "Incremental",
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "resources": [],
                  "outputs": {
                    "telemetry": {
                      "type": "String",
                      "value": "For more information, see https://aka.ms/avm/TelemetryInfo"
                    }
                  }
                }
              }
            },
            "publicIpAddress": {
              "type": "Microsoft.Network/publicIPAddresses",
              "apiVersion": "2024-05-01",
              "name": "[parameters('name')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "sku": {
                "name": "[parameters('skuName')]",
                "tier": "[parameters('skuTier')]"
              },
              "zones": "[map(parameters('availabilityZones'), lambda('zone', string(lambdaVariables('zone'))))]",
              "properties": {
                "ddosSettings": "[parameters('ddosSettings')]",
                "dnsSettings": "[parameters('dnsSettings')]",
                "publicIPAddressVersion": "[parameters('publicIPAddressVersion')]",
                "publicIPAllocationMethod": "[parameters('publicIPAllocationMethod')]",
                "publicIPPrefix": "[if(not(empty(parameters('publicIpPrefixResourceId'))), createObject('id', parameters('publicIpPrefixResourceId')), null())]",
                "idleTimeoutInMinutes": "[parameters('idleTimeoutInMinutes')]",
                "ipTags": "[parameters('ipTags')]"
              }
            },
            "publicIpAddress_lock": {
              "condition": "[and(not(empty(coalesce(parameters('lock'), createObject()))), not(equals(tryGet(parameters('lock'), 'kind'), 'None')))]",
              "type": "Microsoft.Authorization/locks",
              "apiVersion": "2020-05-01",
              "scope": "[format('Microsoft.Network/publicIPAddresses/{0}', parameters('name'))]",
              "name": "[coalesce(tryGet(parameters('lock'), 'name'), format('lock-{0}', parameters('name')))]",
              "properties": {
                "level": "[coalesce(tryGet(parameters('lock'), 'kind'), '')]",
                "notes": "[coalesce(tryGet(parameters('lock'), 'notes'), if(equals(tryGet(parameters('lock'), 'kind'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot delete or modify the resource or child resources.'))]"
              },
              "dependsOn": [
                "publicIpAddress"
              ]
            },
            "publicIpAddress_roleAssignments": {
              "copy": {
                "name": "publicIpAddress_roleAssignments",
                "count": "[length(coalesce(variables('formattedRoleAssignments'), createArray()))]"
              },
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.Network/publicIPAddresses/{0}', parameters('name'))]",
              "name": "[coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'name'), guid(resourceId('Microsoft.Network/publicIPAddresses', parameters('name')), coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId, coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId))]",
              "properties": {
                "roleDefinitionId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId]",
                "principalId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId]",
                "description": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'description')]",
                "principalType": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'principalType')]",
                "condition": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition')]",
                "conditionVersion": "[if(not(empty(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                "delegatedManagedIdentityResourceId": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
              },
              "dependsOn": [
                "publicIpAddress"
              ]
            },
            "publicIpAddress_diagnosticSettings": {
              "copy": {
                "name": "publicIpAddress_diagnosticSettings",
                "count": "[length(coalesce(parameters('diagnosticSettings'), createArray()))]"
              },
              "type": "Microsoft.Insights/diagnosticSettings",
              "apiVersion": "2021-05-01-preview",
              "scope": "[format('Microsoft.Network/publicIPAddresses/{0}', parameters('name'))]",
              "name": "[coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'name'), format('{0}-diagnosticSettings', parameters('name')))]",
              "properties": {
                "copy": [
                  {
                    "name": "metrics",
                    "count": "[length(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics'))))]",
                    "input": {
                      "category": "[coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics')))[copyIndex('metrics')].category]",
                      "enabled": "[coalesce(tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics')))[copyIndex('metrics')], 'enabled'), true())]",
                      "timeGrain": null
                    }
                  },
                  {
                    "name": "logs",
                    "count": "[length(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs'))))]",
                    "input": {
                      "categoryGroup": "[tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'categoryGroup')]",
                      "category": "[tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'category')]",
                      "enabled": "[coalesce(tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'enabled'), true())]"
                    }
                  }
                ],
                "storageAccountId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'storageAccountResourceId')]",
                "workspaceId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'workspaceResourceId')]",
                "eventHubAuthorizationRuleId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'eventHubAuthorizationRuleResourceId')]",
                "eventHubName": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'eventHubName')]",
                "marketplacePartnerId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'marketplacePartnerResourceId')]",
                "logAnalyticsDestinationType": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logAnalyticsDestinationType')]"
              },
              "dependsOn": [
                "publicIpAddress"
              ]
            }
          },
          "outputs": {
            "resourceGroupName": {
              "type": "string",
              "metadata": {
                "description": "The resource group the public IP address was deployed into."
              },
              "value": "[resourceGroup().name]"
            },
            "name": {
              "type": "string",
              "metadata": {
                "description": "The name of the public IP address."
              },
              "value": "[parameters('name')]"
            },
            "resourceId": {
              "type": "string",
              "metadata": {
                "description": "The resource ID of the public IP address."
              },
              "value": "[resourceId('Microsoft.Network/publicIPAddresses', parameters('name'))]"
            },
            "ipAddress": {
              "type": "string",
              "metadata": {
                "description": "The public IP address of the public IP address resource."
              },
              "value": "[coalesce(tryGet(reference('publicIpAddress'), 'ipAddress'), '')]"
            },
            "location": {
              "type": "string",
              "metadata": {
                "description": "The location the resource was deployed into."
              },
              "value": "[reference('publicIpAddress', '2024-05-01', 'full').location]"
            }
          }
        }
      }
    },
    "loadBalancer_publicIPPrefixes": {
      "copy": {
        "name": "loadBalancer_publicIPPrefixes",
        "count": "[length(parameters('frontendIPConfigurations'))]"
      },
      "condition": "[and(not(empty(tryGet(parameters('frontendIPConfigurations')[copyIndex()], 'publicIPPrefixConfiguration'))), empty(tryGet(parameters('frontendIPConfigurations')[copyIndex()], 'publicIPPrefixResourceId')))]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2025-04-01",
      "name": "[format('{0}-LoadBalancer-PIPPrefix-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "name": {
            "value": "[coalesce(tryGet(tryGet(parameters('frontendIPConfigurations')[copyIndex()], 'publicIPPrefixConfiguration'), 'name'), format('{0}-pip-prefix-{1}', parameters('name'), copyIndex()))]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "lock": {
            "value": "[coalesce(tryGet(tryGet(parameters('frontendIPConfigurations')[copyIndex()], 'publicIPPrefixConfiguration'), 'lock'), parameters('lock'))]"
          },
          "prefixLength": {
            "value": "[coalesce(tryGet(tryGet(parameters('frontendIPConfigurations')[copyIndex()], 'publicIPPrefixConfiguration'), 'prefixLength'), 28)]"
          },
          "customIPPrefix": {
            "value": "[tryGet(tryGet(parameters('frontendIPConfigurations')[copyIndex()], 'publicIPPrefixConfiguration'), 'customIPPrefix')]"
          },
          "roleAssignments": {
            "value": "[tryGet(tryGet(parameters('frontendIPConfigurations')[copyIndex()], 'publicIPPrefixConfiguration'), 'roleAssignments')]"
          },
          "tags": {
            "value": "[coalesce(tryGet(tryGet(parameters('frontendIPConfigurations')[copyIndex()], 'publicIPPrefixConfiguration'), 'tags'), parameters('tags'))]"
          },
          "enableTelemetry": {
            "value": "[variables('enableReferencedModulesTelemetry')]"
          },
          "availabilityZones": {
            "value": "[tryGet(tryGet(parameters('frontendIPConfigurations')[copyIndex()], 'publicIPPrefixConfiguration'), 'availabilityZones')]"
          },
          "ipTags": {
            "value": "[tryGet(tryGet(parameters('frontendIPConfigurations')[copyIndex()], 'publicIPPrefixConfiguration'), 'ipTags')]"
          },
          "publicIPAddressVersion": {
            "value": "[tryGet(tryGet(parameters('frontendIPConfigurations')[copyIndex()], 'publicIPPrefixConfiguration'), 'publicIPAddressVersion')]"
          },
          "tier": {
            "value": "[tryGet(tryGet(parameters('frontendIPConfigurations')[copyIndex()], 'publicIPPrefixConfiguration'), 'tier')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "languageVersion": "2.0",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.38.5.1644",
              "templateHash": "14373448508245329501"
            },
            "name": "Public IP Prefixes",
            "description": "This module deploys a Public IP Prefix."
          },
          "definitions": {
            "ipTagType": {
              "type": "object",
              "properties": {
                "ipTagType": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. The IP tag type."
                  }
                },
                "tag": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. The IP tag."
                  }
                }
              },
              "metadata": {
                "__bicep_export!": true
              }
            },
            "lockType": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Specify the name of lock."
                  }
                },
                "kind": {
                  "type": "string",
                  "allowedValues": [
                    "CanNotDelete",
                    "None",
                    "ReadOnly"
                  ],
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Specify the type of lock."
                  }
                },
                "notes": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Specify the notes of the lock."
                  }
                }
              },
              "metadata": {
                "description": "An AVM-aligned type for a lock.",
                "__bicep_imported_from!": {
                  "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.6.0"
                }
              }
            },
            "roleAssignmentType": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The name (as GUID) of the role assignment. If not provided, a GUID will be generated."
                  }
                },
                "roleDefinitionIdOrName": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                  }
                },
                "principalId": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                  }
                },
                "principalType": {
                  "type": "string",
                  "allowedValues": [
                    "Device",
                    "ForeignGroup",
                    "Group",
                    "ServicePrincipal",
                    "User"
                  ],
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The principal type of the assigned principal ID."
                  }
                },
                "description": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The description of the role assignment."
                  }
                },
                "condition": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                  }
                },
                "conditionVersion": {
                  "type": "string",
                  "allowedValues": [
                    "2.0"
                  ],
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Version of the condition."
                  }
                },
                "delegatedManagedIdentityResourceId": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The Resource Id of the delegated managed identity resource."
                  }
                }
              },
              "metadata": {
                "description": "An AVM-aligned type for a role assignment.",
                "__bicep_imported_from!": {
                  "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.2.1"
                }
              }
            }
          },
          "parameters": {
            "name": {
              "type": "string",
              "minLength": 1,
              "metadata": {
                "description": "Required. The name of the Public IP Prefix."
              }
            },
            "tier": {
              "type": "string",
              "defaultValue": "Regional",
              "allowedValues": [
                "Global",
                "Regional"
              ],
              "metadata": {
                "description": "Optional. Tier of a public IP prefix SKU. If set to `Global`, the `zones` property must be empty."
              }
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]",
              "metadata": {
                "description": "Optional. Location for all resources."
              }
            },
            "prefixLength": {
              "type": "int",
              "minValue": 21,
              "maxValue": 127,
              "metadata": {
                "description": "Required. Length of the Public IP Prefix."
              }
            },
            "publicIPAddressVersion": {
              "type": "string",
              "defaultValue": "IPv4",
              "allowedValues": [
                "IPv4",
                "IPv6"
              ],
              "metadata": {
                "description": "Optional. The public IP address version."
              }
            },
            "lock": {
              "$ref": "#/definitions/lockType",
              "nullable": true,
              "metadata": {
                "description": "Optional. The lock settings of the service."
              }
            },
            "roleAssignments": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/roleAssignmentType"
              },
              "nullable": true,
              "metadata": {
                "description": "Optional. Array of role assignments to create."
              }
            },
            "tags": {
              "type": "object",
              "metadata": {
                "__bicep_resource_derived_type!": {
                  "source": "Microsoft.Network/publicIPPrefixes@2024-10-01#properties/tags"
                },
                "description": "Optional. Tags of the resource."
              },
              "nullable": true
            },
            "customIPPrefix": {
              "type": "object",
              "metadata": {
                "__bicep_resource_derived_type!": {
                  "source": "Microsoft.Network/publicIPPrefixes@2024-01-01#properties/properties/properties/customIPPrefix"
                },
                "description": "Optional. The custom IP address prefix that this prefix is associated with. A custom IP address prefix is a contiguous range of IP addresses owned by an external customer and provisioned into a subscription. When a custom IP prefix is in Provisioned, Commissioning, or Commissioned state, a linked public IP prefix can be created. Either as a subset of the custom IP prefix range or the entire range."
              },
              "nullable": true
            },
            "ipTags": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ipTagType"
              },
              "nullable": true,
              "metadata": {
                "description": "Optional. The list of tags associated with the public IP prefix."
              }
            },
            "availabilityZones": {
              "type": "array",
              "items": {
                "type": "int"
              },
              "defaultValue": [
                1,
                2,
                3
              ],
              "allowedValues": [
                1,
                2,
                3
              ],
              "metadata": {
                "description": "Optional. A list of availability zones denoting the IP allocated for the resource needs to come from. This is only applicable for regional public IP prefixes and must be empty for global public IP prefixes."
              }
            },
            "enableTelemetry": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Optional. Enable/Disable usage telemetry for module."
              }
            }
          },
          "variables": {
            "copy": [
              {
                "name": "formattedRoleAssignments",
                "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]",
                "input": "[union(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')], createObject('roleDefinitionId', coalesce(tryGet(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName), if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName)))))]"
              }
            ],
            "builtInRoleNames": {
              "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
              "Network Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4d97b98b-1d4f-4787-a291-c67834d212e7')]",
              "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
              "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
              "Role Based Access Control Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]",
              "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]"
            }
          },
          "resources": {
            "avmTelemetry": {
              "condition": "[parameters('enableTelemetry')]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2024-03-01",
              "name": "[format('46d3xbcp.res.network-publicipprefix.{0}.{1}', replace('0.7.1', '.', '-'), substring(uniqueString(deployment().name, parameters('location')), 0, 4))]",
              "properties": {
                "mode": "Incremental",
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "resources": [],
                  "outputs": {
                    "telemetry": {
                      "type": "String",
                      "value": "For more information, see https://aka.ms/avm/TelemetryInfo"
                    }
                  }
                }
              }
            },
            "publicIpPrefix": {
              "type": "Microsoft.Network/publicIPPrefixes",
              "apiVersion": "2024-01-01",
              "name": "[parameters('name')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "sku": {
                "name": "Standard",
                "tier": "[parameters('tier')]"
              },
              "zones": "[map(parameters('availabilityZones'), lambda('zone', string(lambdaVariables('zone'))))]",
              "properties": {
                "customIPPrefix": "[parameters('customIPPrefix')]",
                "publicIPAddressVersion": "[parameters('publicIPAddressVersion')]",
                "prefixLength": "[parameters('prefixLength')]",
                "ipTags": "[parameters('ipTags')]"
              }
            },
            "publicIpPrefix_lock": {
              "condition": "[and(not(empty(coalesce(parameters('lock'), createObject()))), not(equals(tryGet(parameters('lock'), 'kind'), 'None')))]",
              "type": "Microsoft.Authorization/locks",
              "apiVersion": "2020-05-01",
              "scope": "[format('Microsoft.Network/publicIPPrefixes/{0}', parameters('name'))]",
              "name": "[coalesce(tryGet(parameters('lock'), 'name'), format('lock-{0}', parameters('name')))]",
              "properties": {
                "level": "[coalesce(tryGet(parameters('lock'), 'kind'), '')]",
                "notes": "[coalesce(tryGet(parameters('lock'), 'notes'), if(equals(tryGet(parameters('lock'), 'kind'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot delete or modify the resource or child resources.'))]"
              },
              "dependsOn": [
                "publicIpPrefix"
              ]
            },
            "publicIpPrefix_roleAssignments": {
              "copy": {
                "name": "publicIpPrefix_roleAssignments",
                "count": "[length(coalesce(variables('formattedRoleAssignments'), createArray()))]"
              },
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.Network/publicIPPrefixes/{0}', parameters('name'))]",
              "name": "[coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'name'), guid(resourceId('Microsoft.Network/publicIPPrefixes', parameters('name')), coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId, coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId))]",
              "properties": {
                "roleDefinitionId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId]",
                "principalId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId]",
                "description": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'description')]",
                "principalType": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'principalType')]",
                "condition": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition')]",
                "conditionVersion": "[if(not(empty(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                "delegatedManagedIdentityResourceId": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
              },
              "dependsOn": [
                "publicIpPrefix"
              ]
            }
          },
          "outputs": {
            "resourceId": {
              "type": "string",
              "metadata": {
                "description": "The resource ID of the public IP prefix."
              },
              "value": "[resourceId('Microsoft.Network/publicIPPrefixes', parameters('name'))]"
            },
            "resourceGroupName": {
              "type": "string",
              "metadata": {
                "description": "The resource group the public IP prefix was deployed into."
              },
              "value": "[resourceGroup().name]"
            },
            "name": {
              "type": "string",
              "metadata": {
                "description": "The name of the public IP prefix."
              },
              "value": "[parameters('name')]"
            },
            "location": {
              "type": "string",
              "metadata": {
                "description": "The location the resource was deployed into."
              },
              "value": "[reference('publicIpPrefix', '2024-01-01', 'full').location]"
            }
          }
        }
      }
    },
    "loadBalancer_backendAddressPools": {
      "copy": {
        "name": "loadBalancer_backendAddressPools",
        "count": "[length(coalesce(parameters('backendAddressPools'), createArray()))]"
      },
      "condition": "[not(equals(tryGet(coalesce(parameters('backendAddressPools'), createArray())[copyIndex()], 'backendMembershipMode'), 'NIC'))]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2025-04-01",
      "name": "[format('{0}-loadBalancer-backendAddPools-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "loadBalancerName": {
            "value": "[parameters('name')]"
          },
          "name": {
            "value": "[coalesce(parameters('backendAddressPools'), createArray())[copyIndex()].name]"
          },
          "backendMembershipMode": {
            "value": "[tryGet(coalesce(parameters('backendAddressPools'), createArray())[copyIndex()], 'backendMembershipMode')]"
          },
          "tunnelInterfaces": {
            "value": "[tryGet(coalesce(parameters('backendAddressPools'), createArray())[copyIndex()], 'tunnelInterfaces')]"
          },
          "loadBalancerBackendAddresses": {
            "value": "[tryGet(coalesce(parameters('backendAddressPools'), createArray())[copyIndex()], 'loadBalancerBackendAddresses')]"
          },
          "drainPeriodInSeconds": {
            "value": "[tryGet(coalesce(parameters('backendAddressPools'), createArray())[copyIndex()], 'drainPeriodInSeconds')]"
          },
          "virtualNetworkResourceId": {
            "value": "[tryGet(coalesce(parameters('backendAddressPools'), createArray())[copyIndex()], 'virtualNetworkResourceId')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.38.3.11034",
              "templateHash": "10670439602612325976"
            },
            "name": "Load Balancer Backend Address Pools",
            "description": "This module deploys a Load Balancer Backend Address Pools."
          },
          "parameters": {
            "loadBalancerName": {
              "type": "string",
              "metadata": {
                "description": "Conditional. The name of the parent load balancer. Required if the template is used in a standalone deployment."
              }
            },
            "name": {
              "type": "string",
              "metadata": {
                "description": "Required. The name of the backend address pool."
              }
            },
            "loadBalancerBackendAddresses": {
              "type": "array",
              "defaultValue": [],
              "metadata": {
                "description": "Optional. An array of backend addresses."
              }
            },
            "tunnelInterfaces": {
              "type": "array",
              "defaultValue": [],
              "metadata": {
                "description": "Optional. An array of gateway load balancer tunnel interfaces."
              }
            },
            "drainPeriodInSeconds": {
              "type": "int",
              "defaultValue": 0,
              "metadata": {
                "description": "Optional. Amount of seconds Load Balancer waits for before sending RESET to client and backend address. if value is 0 then this property will be set to null. Subscription must register the feature Microsoft.Network/SLBAllowConnectionDraining before using this property."
              }
            },
            "syncMode": {
              "type": "string",
              "defaultValue": "",
              "allowedValues": [
                "",
                "Automatic",
                "Manual"
              ],
              "metadata": {
                "description": "Optional. Backend address synchronous mode for the backend pool."
              }
            },
            "virtualNetworkResourceId": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. The resource Id of the virtual network."
              }
            },
            "backendMembershipMode": {
              "type": "string",
              "defaultValue": "None",
              "allowedValues": [
                "NIC",
                "BackendAddress",
                "None"
              ],
              "metadata": {
                "description": "Optional. How backend pool members are managed. NIC = via NIC IP configs, BackendAddress = via backend addresses, None = empty pool."
              }
            }
          },
          "resources": [
            {
              "condition": "[not(equals(parameters('backendMembershipMode'), 'NIC'))]",
              "type": "Microsoft.Network/loadBalancers/backendAddressPools",
              "apiVersion": "2024-10-01",
              "name": "[format('{0}/{1}', parameters('loadBalancerName'), parameters('name'))]",
              "properties": {
                "loadBalancerBackendAddresses": "[if(equals(parameters('backendMembershipMode'), 'BackendAddress'), parameters('loadBalancerBackendAddresses'), null())]",
                "tunnelInterfaces": "[parameters('tunnelInterfaces')]",
                "drainPeriodInSeconds": "[if(not(equals(parameters('drainPeriodInSeconds'), 0)), parameters('drainPeriodInSeconds'), null())]",
                "syncMode": "[if(not(empty(parameters('syncMode'))), parameters('syncMode'), null())]",
                "virtualNetwork": "[if(not(empty(parameters('virtualNetworkResourceId'))), createObject('id', parameters('virtualNetworkResourceId')), null())]"
              }
            }
          ],
          "outputs": {
            "name": {
              "type": "string",
              "metadata": {
                "description": "The name of the backend address pool."
              },
              "value": "[if(not(equals(parameters('backendMembershipMode'), 'NIC')), parameters('name'), parameters('name'))]"
            },
            "resourceId": {
              "type": "string",
              "metadata": {
                "description": "The resource ID of the backend address pool."
              },
              "value": "[if(not(equals(parameters('backendMembershipMode'), 'NIC')), resourceId('Microsoft.Network/loadBalancers/backendAddressPools', parameters('loadBalancerName'), parameters('name')), format('{0}/backendAddressPools/{1}', resourceId('Microsoft.Network/loadBalancers', parameters('loadBalancerName')), parameters('name')))]"
            },
            "resourceGroupName": {
              "type": "string",
              "metadata": {
                "description": "The resource group the backend address pool was deployed into."
              },
              "value": "[resourceGroup().name]"
            }
          }
        }
      },
      "dependsOn": [
        "loadBalancer"
      ]
    },
    "loadBalancer_inboundNATRules": {
      "copy": {
        "name": "loadBalancer_inboundNATRules",
        "count": "[length(parameters('inboundNatRules'))]"
      },
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2025-04-01",
      "name": "[format('{0}-LoadBalancer-inboundNatRules-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "loadBalancerName": {
            "value": "[parameters('name')]"
          },
          "name": {
            "value": "[parameters('inboundNatRules')[copyIndex()].name]"
          },
          "frontendIPConfigurationName": {
            "value": "[parameters('inboundNatRules')[copyIndex()].frontendIPConfigurationName]"
          },
          "frontendPort": {
            "value": "[tryGet(parameters('inboundNatRules')[copyIndex()], 'frontendPort')]"
          },
          "backendPort": {
            "value": "[parameters('inboundNatRules')[copyIndex()].backendPort]"
          },
          "backendAddressPoolName": {
            "value": "[tryGet(parameters('inboundNatRules')[copyIndex()], 'backendAddressPoolName')]"
          },
          "enableFloatingIP": {
            "value": "[tryGet(parameters('inboundNatRules')[copyIndex()], 'enableFloatingIP')]"
          },
          "enableTcpReset": {
            "value": "[tryGet(parameters('inboundNatRules')[copyIndex()], 'enableTcpReset')]"
          },
          "frontendPortRangeEnd": {
            "value": "[tryGet(parameters('inboundNatRules')[copyIndex()], 'frontendPortRangeEnd')]"
          },
          "frontendPortRangeStart": {
            "value": "[tryGet(parameters('inboundNatRules')[copyIndex()], 'frontendPortRangeStart')]"
          },
          "idleTimeoutInMinutes": {
            "value": "[tryGet(parameters('inboundNatRules')[copyIndex()], 'idleTimeoutInMinutes')]"
          },
          "protocol": {
            "value": "[tryGet(parameters('inboundNatRules')[copyIndex()], 'protocol')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "languageVersion": "2.0",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.38.3.11034",
              "templateHash": "8943275705446718462"
            },
            "name": "Load Balancer Inbound NAT Rules",
            "description": "This module deploys a Load Balancer Inbound NAT Rules."
          },
          "parameters": {
            "loadBalancerName": {
              "type": "string",
              "metadata": {
                "description": "Conditional. The name of the parent load balancer. Required if the template is used in a standalone deployment."
              }
            },
            "name": {
              "type": "string",
              "metadata": {
                "description": "Required. The name of the inbound NAT rule."
              }
            },
            "frontendPort": {
              "type": "int",
              "nullable": true,
              "minValue": 0,
              "maxValue": 65534,
              "metadata": {
                "description": "Conditional. The port for the external endpoint. Port numbers for each rule must be unique within the Load Balancer. Required if FrontendPortRangeStart and FrontendPortRangeEnd are not specified."
              }
            },
            "backendPort": {
              "type": "int",
              "minValue": 0,
              "maxValue": 65535,
              "metadata": {
                "description": "Required. The port used for the internal endpoint."
              }
            },
            "backendAddressPoolName": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. Name of the backend address pool."
              }
            },
            "enableFloatingIP": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Optional. Configures a virtual machine's endpoint for the floating IP capability required to configure a SQL AlwaysOn Availability Group. This setting is required when using the SQL AlwaysOn Availability Groups in SQL server. This setting can't be changed after you create the endpoint."
              }
            },
            "enableTcpReset": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Optional. Receive bidirectional TCP Reset on TCP flow idle timeout or unexpected connection termination. This element is only used when the protocol is set to TCP."
              }
            },
            "frontendIPConfigurationName": {
              "type": "string",
              "metadata": {
                "description": "Required. The name of the frontend IP address to set for the inbound NAT rule."
              }
            },
            "frontendPortRangeEnd": {
              "type": "int",
              "nullable": true,
              "minValue": 0,
              "maxValue": 65534,
              "metadata": {
                "description": "Conditional. The port range end for the external endpoint. This property is used together with BackendAddressPool and FrontendPortRangeStart. Individual inbound NAT rule port mappings will be created for each backend address from BackendAddressPool. Required if FrontendPort is not specified."
              }
            },
            "frontendPortRangeStart": {
              "type": "int",
              "nullable": true,
              "minValue": 0,
              "maxValue": 65534,
              "metadata": {
                "description": "Conditional. The port range start for the external endpoint. This property is used together with BackendAddressPool and FrontendPortRangeEnd. Individual inbound NAT rule port mappings will be created for each backend address from BackendAddressPool. Required if FrontendPort is not specified."
              }
            },
            "idleTimeoutInMinutes": {
              "type": "int",
              "defaultValue": 4,
              "metadata": {
                "description": "Optional. The timeout for the TCP idle connection. The value can be set between 4 and 30 minutes. The default value is 4 minutes. This element is only used when the protocol is set to TCP."
              }
            },
            "protocol": {
              "type": "string",
              "defaultValue": "Tcp",
              "allowedValues": [
                "All",
                "Tcp",
                "Udp"
              ],
              "metadata": {
                "description": "Optional. The transport protocol for the endpoint."
              }
            }
          },
          "resources": {
            "loadBalancer": {
              "existing": true,
              "type": "Microsoft.Network/loadBalancers",
              "apiVersion": "2024-10-01",
              "name": "[parameters('loadBalancerName')]"
            },
            "inboundNatRule": {
              "type": "Microsoft.Network/loadBalancers/inboundNatRules",
              "apiVersion": "2024-10-01",
              "name": "[format('{0}/{1}', parameters('loadBalancerName'), parameters('name'))]",
              "properties": {
                "frontendPort": "[parameters('frontendPort')]",
                "backendPort": "[parameters('backendPort')]",
                "backendAddressPool": "[if(not(empty(parameters('backendAddressPoolName'))), createObject('id', format('{0}/backendAddressPools/{1}', resourceId('Microsoft.Network/loadBalancers', parameters('loadBalancerName')), parameters('backendAddressPoolName'))), null())]",
                "enableFloatingIP": "[parameters('enableFloatingIP')]",
                "enableTcpReset": "[parameters('enableTcpReset')]",
                "frontendIPConfiguration": {
                  "id": "[format('{0}/frontendIPConfigurations/{1}', resourceId('Microsoft.Network/loadBalancers', parameters('loadBalancerName')), parameters('frontendIPConfigurationName'))]"
                },
                "frontendPortRangeStart": "[parameters('frontendPortRangeStart')]",
                "frontendPortRangeEnd": "[parameters('frontendPortRangeEnd')]",
                "idleTimeoutInMinutes": "[parameters('idleTimeoutInMinutes')]",
                "protocol": "[parameters('protocol')]"
              }
            }
          },
          "outputs": {
            "name": {
              "type": "string",
              "metadata": {
                "description": "The name of the inbound NAT rule."
              },
              "value": "[parameters('name')]"
            },
            "resourceId": {
              "type": "string",
              "metadata": {
                "description": "The resource ID of the inbound NAT rule."
              },
              "value": "[resourceId('Microsoft.Network/loadBalancers/inboundNatRules', parameters('loadBalancerName'), parameters('name'))]"
            },
            "resourceGroupName": {
              "type": "string",
              "metadata": {
                "description": "The resource group the inbound NAT rule was deployed into."
              },
              "value": "[resourceGroup().name]"
            }
          }
        }
      },
      "dependsOn": [
        "loadBalancer",
        "loadBalancer_backendAddressPools"
      ]
    }
  },
  "outputs": {
    "name": {
      "type": "string",
      "metadata": {
        "description": "The name of the load balancer."
      },
      "value": "[parameters('name')]"
    },
    "resourceId": {
      "type": "string",
      "metadata": {
        "description": "The resource ID of the load balancer."
      },
      "value": "[resourceId('Microsoft.Network/loadBalancers', parameters('name'))]"
    },
    "resourceGroupName": {
      "type": "string",
      "metadata": {
        "description": "The resource group the load balancer was deployed into."
      },
      "value": "[resourceGroup().name]"
    },
    "backendpools": {
      "type": "array",
      "metadata": {
        "description": "The backend address pools available in the load balancer."
      },
      "value": "[reference('loadBalancer').backendAddressPools]"
    },
    "location": {
      "type": "string",
      "metadata": {
        "description": "The location the resource was deployed into."
      },
      "value": "[reference('loadBalancer', '2024-07-01', 'full').location]"
    }
  }
}