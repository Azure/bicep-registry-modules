{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "languageVersion": "2.0",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "_generator": {
      "name": "bicep",
      "version": "0.38.5.1644",
      "templateHash": "10593926005855712519"
    },
    "name": "Network Watchers",
    "description": "This module deploys a Network Watcher."
  },
  "definitions": {
    "flowLogType": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "Optional. Name of the resource."
          }
        },
        "tags": {
          "type": "object",
          "metadata": {
            "__bicep_resource_derived_type!": {
              "source": "Microsoft.Network/networkWatchers/flowLogs@2024-05-01#properties/tags"
            },
            "description": "Optional. Tags of the resource."
          },
          "nullable": true
        },
        "location": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "Optional. Location for all resources."
          }
        },
        "targetResourceId": {
          "type": "string",
          "metadata": {
            "description": "Required. Resource ID of the NSG that must be enabled for Flow Logs."
          }
        },
        "storageResourceId": {
          "type": "string",
          "metadata": {
            "description": "Required. Resource ID of the diagnostic storage account."
          }
        },
        "enabled": {
          "type": "bool",
          "nullable": true,
          "metadata": {
            "description": "Optional. If the flow log should be enabled."
          }
        },
        "formatVersion": {
          "type": "int",
          "allowedValues": [
            1,
            2
          ],
          "nullable": true,
          "metadata": {
            "description": "Optional. The flow log format version."
          }
        },
        "workspaceResourceId": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "Optional. Specify the Log Analytics Workspace Resource ID."
          }
        },
        "trafficAnalyticsInterval": {
          "type": "int",
          "allowedValues": [
            10,
            60
          ],
          "nullable": true,
          "metadata": {
            "description": "Optional. The interval in minutes which would decide how frequently TA service should do flow analytics."
          }
        },
        "retentionInDays": {
          "type": "int",
          "nullable": true,
          "minValue": 0,
          "maxValue": 365,
          "metadata": {
            "description": "Optional. Specifies the number of days that logs will be kept for; a value of 0 will retain data indefinitely."
          }
        },
        "enabledFilteringCriteria": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "Optional. Field to filter network traffic logs based on SrcIP, SrcPort, DstIP, DstPort, Protocol, Encryption, Direction and Action. If not specified, all network traffic will be logged."
          }
        }
      },
      "metadata": {
        "__bicep_export!": true,
        "description": "The type of a flow log."
      }
    },
    "connectionMonitorType": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "metadata": {
            "description": "Required. Name of the resource."
          }
        },
        "tags": {
          "type": "object",
          "metadata": {
            "__bicep_resource_derived_type!": {
              "source": "Microsoft.Network/networkWatchers/connectionMonitors@2024-05-01#properties/tags"
            },
            "description": "Optional. Tags of the resource."
          },
          "nullable": true
        },
        "location": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "Optional. Location for all resources."
          }
        },
        "endpoints": {
          "type": "array",
          "metadata": {
            "__bicep_resource_derived_type!": {
              "source": "Microsoft.Network/networkWatchers/connectionMonitors@2024-05-01#properties/properties/properties/endpoints"
            },
            "description": "Optional. List of connection monitor endpoints."
          },
          "nullable": true
        },
        "testConfigurations": {
          "type": "array",
          "metadata": {
            "__bicep_resource_derived_type!": {
              "source": "Microsoft.Network/networkWatchers/connectionMonitors@2024-05-01#properties/properties/properties/testConfigurations"
            },
            "description": "Optional. List of connection monitor test configurations."
          },
          "nullable": true
        },
        "testGroups": {
          "type": "array",
          "metadata": {
            "__bicep_resource_derived_type!": {
              "source": "Microsoft.Network/networkWatchers/connectionMonitors@2024-05-01#properties/properties/properties/testGroups"
            },
            "description": "Optional. List of connection monitor test groups."
          },
          "nullable": true
        },
        "workspaceResourceId": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "Optional. Specify the Log Analytics Workspace Resource ID."
          }
        },
        "autoStart": {
          "type": "bool",
          "nullable": true,
          "metadata": {
            "description": "Optional. Determines if the connection monitor will start automatically once created."
          }
        },
        "destination": {
          "type": "object",
          "metadata": {
            "__bicep_resource_derived_type!": {
              "source": "Microsoft.Network/networkWatchers/connectionMonitors@2024-05-01#properties/properties/properties/destination"
            },
            "description": "Optional. Describes the destination of connection monitor."
          },
          "nullable": true
        },
        "monitoringIntervalInSeconds": {
          "type": "int",
          "nullable": true,
          "minValue": 30,
          "maxValue": 1800,
          "metadata": {
            "description": "Optional. Monitoring interval in seconds."
          }
        },
        "notes": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "Optional. Notes to be associated with the connection monitor."
          }
        },
        "source": {
          "type": "object",
          "metadata": {
            "__bicep_resource_derived_type!": {
              "source": "Microsoft.Network/networkWatchers/connectionMonitors@2024-05-01#properties/properties/properties/source"
            },
            "description": "Optional. Describes the source of connection monitor."
          },
          "nullable": true
        }
      },
      "metadata": {
        "__bicep_export!": true,
        "description": "The type of a connection monitor."
      }
    },
    "lockType": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "Optional. Specify the name of lock."
          }
        },
        "kind": {
          "type": "string",
          "allowedValues": [
            "CanNotDelete",
            "None",
            "ReadOnly"
          ],
          "nullable": true,
          "metadata": {
            "description": "Optional. Specify the type of lock."
          }
        },
        "notes": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "Optional. Specify the notes of the lock."
          }
        }
      },
      "metadata": {
        "description": "An AVM-aligned type for a lock.",
        "__bicep_imported_from!": {
          "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.6.1"
        }
      }
    },
    "roleAssignmentType": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "Optional. The name (as GUID) of the role assignment. If not provided, a GUID will be generated."
          }
        },
        "roleDefinitionIdOrName": {
          "type": "string",
          "metadata": {
            "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
          }
        },
        "principalId": {
          "type": "string",
          "metadata": {
            "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
          }
        },
        "principalType": {
          "type": "string",
          "allowedValues": [
            "Device",
            "ForeignGroup",
            "Group",
            "ServicePrincipal",
            "User"
          ],
          "nullable": true,
          "metadata": {
            "description": "Optional. The principal type of the assigned principal ID."
          }
        },
        "description": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "Optional. The description of the role assignment."
          }
        },
        "condition": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
          }
        },
        "conditionVersion": {
          "type": "string",
          "allowedValues": [
            "2.0"
          ],
          "nullable": true,
          "metadata": {
            "description": "Optional. Version of the condition."
          }
        },
        "delegatedManagedIdentityResourceId": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "Optional. The Resource Id of the delegated managed identity resource."
          }
        }
      },
      "metadata": {
        "description": "An AVM-aligned type for a role assignment.",
        "__bicep_imported_from!": {
          "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.6.1"
        }
      }
    }
  },
  "parameters": {
    "name": {
      "type": "string",
      "defaultValue": "[format('NetworkWatcher_{0}', parameters('location'))]",
      "minLength": 1,
      "metadata": {
        "description": "Optional. Name of the Network Watcher resource (hidden)."
      }
    },
    "location": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "Optional. Location for all resources."
      }
    },
    "connectionMonitors": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/connectionMonitorType"
      },
      "nullable": true,
      "metadata": {
        "description": "Optional. Array that contains the Connection Monitors."
      }
    },
    "flowLogs": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/flowLogType"
      },
      "nullable": true,
      "metadata": {
        "description": "Optional. Array that contains the Flow Logs."
      }
    },
    "lock": {
      "$ref": "#/definitions/lockType",
      "nullable": true,
      "metadata": {
        "description": "Optional. The lock settings of the service."
      }
    },
    "roleAssignments": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/roleAssignmentType"
      },
      "nullable": true,
      "metadata": {
        "description": "Optional. Array of role assignments to create."
      }
    },
    "tags": {
      "type": "object",
      "metadata": {
        "__bicep_resource_derived_type!": {
          "source": "Microsoft.Network/networkWatchers@2024-05-01#properties/tags"
        },
        "description": "Optional. Tags of the resource."
      },
      "nullable": true
    },
    "enableTelemetry": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Optional. Enable/Disable usage telemetry for module."
      }
    }
  },
  "variables": {
    "copy": [
      {
        "name": "formattedRoleAssignments",
        "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]",
        "input": "[union(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')], createObject('roleDefinitionId', coalesce(tryGet(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName), if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName)))))]"
      }
    ],
    "builtInRoleNames": {
      "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
      "Network Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4d97b98b-1d4f-4787-a291-c67834d212e7')]",
      "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
      "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
      "Role Based Access Control Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]",
      "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]"
    }
  },
  "resources": {
    "avmTelemetry": {
      "condition": "[parameters('enableTelemetry')]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2024-03-01",
      "name": "[format('46d3xbcp.res.network-networkwatcher.{0}.{1}', replace('-..--..-', '.', '-'), substring(uniqueString(deployment().name, parameters('location')), 0, 4))]",
      "properties": {
        "mode": "Incremental",
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "resources": [],
          "outputs": {
            "telemetry": {
              "type": "String",
              "value": "For more information, see https://aka.ms/avm/TelemetryInfo"
            }
          }
        }
      }
    },
    "networkWatcher": {
      "type": "Microsoft.Network/networkWatchers",
      "apiVersion": "2024-10-01",
      "name": "[parameters('name')]",
      "location": "[parameters('location')]",
      "tags": "[parameters('tags')]",
      "properties": {}
    },
    "networkWatcher_lock": {
      "condition": "[and(not(empty(coalesce(parameters('lock'), createObject()))), not(equals(tryGet(parameters('lock'), 'kind'), 'None')))]",
      "type": "Microsoft.Authorization/locks",
      "apiVersion": "2020-05-01",
      "scope": "[format('Microsoft.Network/networkWatchers/{0}', parameters('name'))]",
      "name": "[coalesce(tryGet(parameters('lock'), 'name'), format('lock-{0}', parameters('name')))]",
      "properties": {
        "level": "[coalesce(tryGet(parameters('lock'), 'kind'), '')]",
        "notes": "[coalesce(tryGet(parameters('lock'), 'notes'), if(equals(tryGet(parameters('lock'), 'kind'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot delete or modify the resource or child resources.'))]"
      },
      "dependsOn": [
        "networkWatcher"
      ]
    },
    "networkWatcher_roleAssignments": {
      "copy": {
        "name": "networkWatcher_roleAssignments",
        "count": "[length(coalesce(variables('formattedRoleAssignments'), createArray()))]"
      },
      "type": "Microsoft.Authorization/roleAssignments",
      "apiVersion": "2022-04-01",
      "scope": "[format('Microsoft.Network/networkWatchers/{0}', parameters('name'))]",
      "name": "[coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'name'), guid(resourceId('Microsoft.Network/networkWatchers', parameters('name')), coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId, coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId))]",
      "properties": {
        "roleDefinitionId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId]",
        "principalId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId]",
        "description": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'description')]",
        "principalType": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'principalType')]",
        "condition": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition')]",
        "conditionVersion": "[if(not(empty(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
        "delegatedManagedIdentityResourceId": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
      },
      "dependsOn": [
        "networkWatcher"
      ]
    },
    "networkWatcher_connectionMonitors": {
      "copy": {
        "name": "networkWatcher_connectionMonitors",
        "count": "[length(coalesce(parameters('connectionMonitors'), createArray()))]"
      },
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2025-04-01",
      "name": "[format('{0}-NW-ConnectionMonitor-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "tags": {
            "value": "[parameters('tags')]"
          },
          "endpoints": {
            "value": "[tryGet(coalesce(parameters('connectionMonitors'), createArray())[copyIndex()], 'endpoints')]"
          },
          "name": {
            "value": "[coalesce(parameters('connectionMonitors'), createArray())[copyIndex()].name]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "networkWatcherName": {
            "value": "[parameters('name')]"
          },
          "testConfigurations": {
            "value": "[tryGet(coalesce(parameters('connectionMonitors'), createArray())[copyIndex()], 'testConfigurations')]"
          },
          "testGroups": {
            "value": "[tryGet(coalesce(parameters('connectionMonitors'), createArray())[copyIndex()], 'testGroups')]"
          },
          "workspaceResourceId": {
            "value": "[tryGet(coalesce(parameters('connectionMonitors'), createArray())[copyIndex()], 'workspaceResourceId')]"
          },
          "autoStart": {
            "value": "[tryGet(coalesce(parameters('connectionMonitors'), createArray())[copyIndex()], 'autoStart')]"
          },
          "destination": {
            "value": "[tryGet(coalesce(parameters('connectionMonitors'), createArray())[copyIndex()], 'destination')]"
          },
          "monitoringIntervalInSeconds": {
            "value": "[tryGet(coalesce(parameters('connectionMonitors'), createArray())[copyIndex()], 'monitoringIntervalInSeconds')]"
          },
          "notes": {
            "value": "[tryGet(coalesce(parameters('connectionMonitors'), createArray())[copyIndex()], 'notes')]"
          },
          "source": {
            "value": "[tryGet(coalesce(parameters('connectionMonitors'), createArray())[copyIndex()], 'source')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "languageVersion": "2.0",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.38.5.1644",
              "templateHash": "9988153364509308698"
            },
            "name": "Network Watchers Connection Monitors",
            "description": "This module deploys a Network Watcher Connection Monitor."
          },
          "parameters": {
            "networkWatcherName": {
              "type": "string",
              "defaultValue": "[format('NetworkWatcher_{0}', resourceGroup().location)]",
              "metadata": {
                "description": "Optional. Name of the network watcher resource. Must be in the resource group where the Flow log will be created and same region as the NSG."
              }
            },
            "name": {
              "type": "string",
              "metadata": {
                "description": "Required. Name of the resource."
              }
            },
            "tags": {
              "type": "object",
              "metadata": {
                "__bicep_resource_derived_type!": {
                  "source": "Microsoft.Network/networkWatchers/connectionMonitors@2024-05-01#properties/tags"
                },
                "description": "Optional. Tags of the resource."
              },
              "nullable": true
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]",
              "metadata": {
                "description": "Optional. Location for all resources."
              }
            },
            "endpoints": {
              "type": "array",
              "metadata": {
                "__bicep_resource_derived_type!": {
                  "source": "Microsoft.Network/networkWatchers/connectionMonitors@2024-05-01#properties/properties/properties/endpoints"
                },
                "description": "Optional. List of connection monitor endpoints."
              },
              "defaultValue": []
            },
            "testConfigurations": {
              "type": "array",
              "metadata": {
                "__bicep_resource_derived_type!": {
                  "source": "Microsoft.Network/networkWatchers/connectionMonitors@2024-05-01#properties/properties/properties/testConfigurations"
                },
                "description": "Optional. List of connection monitor test configurations."
              },
              "defaultValue": []
            },
            "testGroups": {
              "type": "array",
              "metadata": {
                "__bicep_resource_derived_type!": {
                  "source": "Microsoft.Network/networkWatchers/connectionMonitors@2024-05-01#properties/properties/properties/testGroups"
                },
                "description": "Optional. List of connection monitor test groups."
              },
              "defaultValue": []
            },
            "workspaceResourceId": {
              "type": "string",
              "nullable": true,
              "metadata": {
                "description": "Optional. Specify the Log Analytics Workspace Resource ID."
              }
            },
            "autoStart": {
              "type": "bool",
              "nullable": true,
              "metadata": {
                "description": "Optional. Determines if the connection monitor will start automatically once created."
              }
            },
            "destination": {
              "type": "object",
              "metadata": {
                "__bicep_resource_derived_type!": {
                  "source": "Microsoft.Network/networkWatchers/connectionMonitors@2024-05-01#properties/properties/properties/destination"
                },
                "description": "Optional. Describes the destination of connection monitor."
              },
              "nullable": true
            },
            "monitoringIntervalInSeconds": {
              "type": "int",
              "nullable": true,
              "minValue": 30,
              "maxValue": 1800,
              "metadata": {
                "description": "Optional. Monitoring interval in seconds."
              }
            },
            "notes": {
              "type": "string",
              "nullable": true,
              "metadata": {
                "description": "Optional. Notes to be associated with the connection monitor."
              }
            },
            "source": {
              "type": "object",
              "metadata": {
                "__bicep_resource_derived_type!": {
                  "source": "Microsoft.Network/networkWatchers/connectionMonitors@2024-05-01#properties/properties/properties/source"
                },
                "description": "Optional. Describes the source of connection monitor."
              },
              "nullable": true
            }
          },
          "resources": {
            "networkWatcher": {
              "existing": true,
              "type": "Microsoft.Network/networkWatchers",
              "apiVersion": "2024-10-01",
              "name": "[parameters('networkWatcherName')]"
            },
            "connectionMonitor": {
              "type": "Microsoft.Network/networkWatchers/connectionMonitors",
              "apiVersion": "2024-10-01",
              "name": "[format('{0}/{1}', parameters('networkWatcherName'), parameters('name'))]",
              "tags": "[parameters('tags')]",
              "location": "[parameters('location')]",
              "properties": {
                "endpoints": "[parameters('endpoints')]",
                "testConfigurations": "[parameters('testConfigurations')]",
                "testGroups": "[parameters('testGroups')]",
                "autoStart": "[parameters('autoStart')]",
                "destination": "[parameters('destination')]",
                "monitoringIntervalInSeconds": "[parameters('monitoringIntervalInSeconds')]",
                "notes": "[parameters('notes')]",
                "source": "[parameters('source')]",
                "outputs": "[if(not(empty(parameters('workspaceResourceId'))), createArray(createObject('type', 'Workspace', 'workspaceSettings', createObject('workspaceResourceId', parameters('workspaceResourceId')))), null())]"
              }
            }
          },
          "outputs": {
            "name": {
              "type": "string",
              "metadata": {
                "description": "The name of the deployed connection monitor."
              },
              "value": "[parameters('name')]"
            },
            "resourceId": {
              "type": "string",
              "metadata": {
                "description": "The resource ID of the deployed connection monitor."
              },
              "value": "[resourceId('Microsoft.Network/networkWatchers/connectionMonitors', parameters('networkWatcherName'), parameters('name'))]"
            },
            "resourceGroupName": {
              "type": "string",
              "metadata": {
                "description": "The resource group the connection monitor was deployed into."
              },
              "value": "[resourceGroup().name]"
            },
            "location": {
              "type": "string",
              "metadata": {
                "description": "The location the resource was deployed into."
              },
              "value": "[reference('connectionMonitor', '2024-10-01', 'full').location]"
            }
          }
        }
      },
      "dependsOn": [
        "networkWatcher"
      ]
    },
    "networkWatcher_flowLogs": {
      "copy": {
        "name": "networkWatcher_flowLogs",
        "count": "[length(coalesce(parameters('flowLogs'), createArray()))]"
      },
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2025-04-01",
      "name": "[format('{0}-NW-FlowLog-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "tags": {
            "value": "[parameters('tags')]"
          },
          "enabled": {
            "value": "[tryGet(coalesce(parameters('flowLogs'), createArray())[copyIndex()], 'enabled')]"
          },
          "formatVersion": {
            "value": "[tryGet(coalesce(parameters('flowLogs'), createArray())[copyIndex()], 'formatVersion')]"
          },
          "location": {
            "value": "[tryGet(coalesce(parameters('flowLogs'), createArray())[copyIndex()], 'location')]"
          },
          "name": {
            "value": "[tryGet(coalesce(parameters('flowLogs'), createArray())[copyIndex()], 'name')]"
          },
          "networkWatcherName": {
            "value": "[parameters('name')]"
          },
          "retentionInDays": {
            "value": "[tryGet(coalesce(parameters('flowLogs'), createArray())[copyIndex()], 'retentionInDays')]"
          },
          "storageResourceId": {
            "value": "[coalesce(parameters('flowLogs'), createArray())[copyIndex()].storageResourceId]"
          },
          "targetResourceId": {
            "value": "[coalesce(parameters('flowLogs'), createArray())[copyIndex()].targetResourceId]"
          },
          "trafficAnalyticsInterval": {
            "value": "[tryGet(coalesce(parameters('flowLogs'), createArray())[copyIndex()], 'trafficAnalyticsInterval')]"
          },
          "workspaceResourceId": {
            "value": "[tryGet(coalesce(parameters('flowLogs'), createArray())[copyIndex()], 'workspaceResourceId')]"
          },
          "enabledFilteringCriteria": {
            "value": "[tryGet(coalesce(parameters('flowLogs'), createArray())[copyIndex()], 'enabledFilteringCriteria')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "languageVersion": "2.0",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.38.5.1644",
              "templateHash": "7643257579849162716"
            },
            "name": "NSG Flow Logs",
            "description": "This module controls the Network Security Group Flow Logs and analytics settings.\n**Note: this module must be run on the Resource Group where Network Watcher is deployed**"
          },
          "parameters": {
            "networkWatcherName": {
              "type": "string",
              "defaultValue": "[format('NetworkWatcher_{0}', resourceGroup().location)]",
              "metadata": {
                "description": "Optional. Name of the network watcher resource. Must be in the resource group where the Flow log will be created and same region as the NSG."
              }
            },
            "name": {
              "type": "string",
              "defaultValue": "[format('{0}-{1}-flowlog', last(split(parameters('targetResourceId'), '/')), split(parameters('targetResourceId'), '/')[4])]",
              "metadata": {
                "description": "Optional. Name of the resource."
              }
            },
            "tags": {
              "type": "object",
              "metadata": {
                "__bicep_resource_derived_type!": {
                  "source": "Microsoft.Network/networkWatchers/flowLogs@2024-05-01#properties/tags"
                },
                "description": "Optional. Tags of the resource."
              },
              "nullable": true
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]",
              "metadata": {
                "description": "Optional. Location for all resources."
              }
            },
            "targetResourceId": {
              "type": "string",
              "metadata": {
                "description": "Required. Resource ID of the NSG that must be enabled for Flow Logs."
              }
            },
            "storageResourceId": {
              "type": "string",
              "metadata": {
                "description": "Required. Resource ID of the diagnostic storage account."
              }
            },
            "enabled": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Optional. If the flow log should be enabled."
              }
            },
            "formatVersion": {
              "type": "int",
              "defaultValue": 2,
              "allowedValues": [
                1,
                2
              ],
              "metadata": {
                "description": "Optional. The flow log format version."
              }
            },
            "workspaceResourceId": {
              "type": "string",
              "nullable": true,
              "metadata": {
                "description": "Optional. Specify the Log Analytics Workspace Resource ID."
              }
            },
            "trafficAnalyticsInterval": {
              "type": "int",
              "defaultValue": 60,
              "allowedValues": [
                10,
                60
              ],
              "metadata": {
                "description": "Optional. The interval in minutes which would decide how frequently TA service should do flow analytics."
              }
            },
            "retentionInDays": {
              "type": "int",
              "defaultValue": 365,
              "minValue": 0,
              "maxValue": 365,
              "metadata": {
                "description": "Optional. Specifies the number of days that logs will be kept for; a value of 0 will retain data indefinitely."
              }
            },
            "enabledFilteringCriteria": {
              "type": "string",
              "nullable": true,
              "metadata": {
                "description": "Optional. Field to filter network traffic logs based on SrcIP, SrcPort, DstIP, DstPort, Protocol, Encryption, Direction and Action. If not specified, all network traffic will be logged."
              }
            }
          },
          "resources": {
            "networkWatcher": {
              "existing": true,
              "type": "Microsoft.Network/networkWatchers",
              "apiVersion": "2024-10-01",
              "name": "[parameters('networkWatcherName')]"
            },
            "flowLog": {
              "type": "Microsoft.Network/networkWatchers/flowLogs",
              "apiVersion": "2024-10-01",
              "name": "[format('{0}/{1}', parameters('networkWatcherName'), parameters('name'))]",
              "tags": "[parameters('tags')]",
              "location": "[parameters('location')]",
              "properties": {
                "targetResourceId": "[parameters('targetResourceId')]",
                "storageId": "[parameters('storageResourceId')]",
                "enabled": "[parameters('enabled')]",
                "enabledFilteringCriteria": "[parameters('enabledFilteringCriteria')]",
                "retentionPolicy": {
                  "days": "[parameters('retentionInDays')]",
                  "enabled": "[if(equals(parameters('retentionInDays'), 0), false(), true())]"
                },
                "format": {
                  "type": "JSON",
                  "version": "[parameters('formatVersion')]"
                },
                "flowAnalyticsConfiguration": "[if(and(not(empty(parameters('workspaceResourceId'))), parameters('enabled')), createObject('networkWatcherFlowAnalyticsConfiguration', createObject('enabled', true(), 'workspaceResourceId', parameters('workspaceResourceId'), 'trafficAnalyticsInterval', parameters('trafficAnalyticsInterval'))), createObject('networkWatcherFlowAnalyticsConfiguration', createObject('enabled', false())))]"
              }
            }
          },
          "outputs": {
            "name": {
              "type": "string",
              "metadata": {
                "description": "The name of the flow log."
              },
              "value": "[parameters('name')]"
            },
            "resourceId": {
              "type": "string",
              "metadata": {
                "description": "The resource ID of the flow log."
              },
              "value": "[resourceId('Microsoft.Network/networkWatchers/flowLogs', parameters('networkWatcherName'), parameters('name'))]"
            },
            "resourceGroupName": {
              "type": "string",
              "metadata": {
                "description": "The resource group the flow log was deployed into."
              },
              "value": "[resourceGroup().name]"
            },
            "location": {
              "type": "string",
              "metadata": {
                "description": "The location the resource was deployed into."
              },
              "value": "[reference('flowLog', '2024-10-01', 'full').location]"
            }
          }
        }
      },
      "dependsOn": [
        "networkWatcher"
      ]
    }
  },
  "outputs": {
    "name": {
      "type": "string",
      "metadata": {
        "description": "The name of the deployed network watcher."
      },
      "value": "[parameters('name')]"
    },
    "resourceId": {
      "type": "string",
      "metadata": {
        "description": "The resource ID of the deployed network watcher."
      },
      "value": "[resourceId('Microsoft.Network/networkWatchers', parameters('name'))]"
    },
    "resourceGroupName": {
      "type": "string",
      "metadata": {
        "description": "The resource group the network watcher was deployed into."
      },
      "value": "[resourceGroup().name]"
    },
    "location": {
      "type": "string",
      "metadata": {
        "description": "The location the resource was deployed into."
      },
      "value": "[reference('networkWatcher', '2024-10-01', 'full').location]"
    }
  }
}