{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "languageVersion": "2.0",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "_generator": {
      "name": "bicep",
      "version": "0.30.23.60470",
      "templateHash": "13657670923843039959"
    },
    "name": "Front Door Web Application Firewall (WAF) Policies",
    "description": "This module deploys a Front Door Web Application Firewall (WAF) Policy.",
    "owner": "Azure/module-maintainers"
  },
  "definitions": {
    "lockType": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "Optional. Specify the name of lock."
          }
        },
        "kind": {
          "type": "string",
          "allowedValues": [
            "CanNotDelete",
            "None",
            "ReadOnly"
          ],
          "nullable": true,
          "metadata": {
            "description": "Optional. Specify the type of lock."
          }
        }
      },
      "nullable": true
    },
    "roleAssignmentType": {
      "type": "array",
      "items": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true,
            "metadata": {
              "description": "Optional. The name (as GUID) of the role assignment. If not provided, a GUID will be generated."
            }
          },
          "roleDefinitionIdOrName": {
            "type": "string",
            "metadata": {
              "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
            }
          },
          "principalId": {
            "type": "string",
            "metadata": {
              "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
            }
          },
          "principalType": {
            "type": "string",
            "allowedValues": [
              "Device",
              "ForeignGroup",
              "Group",
              "ServicePrincipal",
              "User"
            ],
            "nullable": true,
            "metadata": {
              "description": "Optional. The principal type of the assigned principal ID."
            }
          },
          "description": {
            "type": "string",
            "nullable": true,
            "metadata": {
              "description": "Optional. The description of the role assignment."
            }
          },
          "condition": {
            "type": "string",
            "nullable": true,
            "metadata": {
              "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
            }
          },
          "conditionVersion": {
            "type": "string",
            "allowedValues": [
              "2.0"
            ],
            "nullable": true,
            "metadata": {
              "description": "Optional. Version of the condition."
            }
          },
          "delegatedManagedIdentityResourceId": {
            "type": "string",
            "nullable": true,
            "metadata": {
              "description": "Optional. The Resource Id of the delegated managed identity resource."
            }
          }
        }
      },
      "nullable": true
    },
    "managedRulesType": {
      "type": "object",
      "properties": {
        "managedRuleSets": {
          "$ref": "#/definitions/managedRuleSetsType",
          "metadata": {
            "description": "Optional. List of rule sets."
          }
        }
      }
    },
    "managedRuleSetsType": {
      "type": "array",
      "items": {
        "type": "object",
        "properties": {
          "ruleSetType": {
            "type": "string",
            "metadata": {
              "description": "Required. Defines the rule set type to use."
            }
          },
          "ruleSetVersion": {
            "type": "string",
            "metadata": {
              "description": "Required. Defines the version of the rule set to use."
            }
          },
          "ruleGroupOverrides": {
            "type": "array",
            "nullable": true,
            "metadata": {
              "description": "Optional. Defines the rule group overrides to apply to the rule set."
            }
          },
          "exclusions": {
            "type": "array",
            "nullable": true,
            "metadata": {
              "description": "Optional. Describes the exclusions that are applied to all rules in the set."
            }
          },
          "ruleSetAction": {
            "type": "string",
            "allowedValues": [
              "Block",
              "Log",
              "Redirect"
            ],
            "nullable": true,
            "metadata": {
              "description": "Optional. Defines the rule set action."
            }
          }
        }
      },
      "nullable": true
    },
    "customRulesType": {
      "type": "object",
      "properties": {
        "rules": {
          "$ref": "#/definitions/customRulesRuleType",
          "metadata": {
            "description": "Optional. List of rules."
          }
        }
      }
    },
    "customRulesRuleType": {
      "type": "array",
      "items": {
        "type": "object",
        "properties": {
          "action": {
            "type": "string",
            "allowedValues": [
              "Allow",
              "Block",
              "Log",
              "Redirect"
            ],
            "metadata": {
              "description": "Required. Describes what action to be applied when rule matches."
            }
          },
          "enabledState": {
            "type": "string",
            "allowedValues": [
              "Disabled",
              "Enabled"
            ],
            "metadata": {
              "description": "Required. Describes if the custom rule is in enabled or disabled state."
            }
          },
          "matchConditions": {
            "type": "array",
            "metadata": {
              "description": "Required. List of match conditions. See https://learn.microsoft.com/en-us/azure/templates/microsoft.network/frontdoorwebapplicationfirewallpolicies#matchcondition for details."
            }
          },
          "name": {
            "type": "string",
            "metadata": {
              "description": "Required. Describes the name of the rule."
            }
          },
          "priority": {
            "type": "int",
            "metadata": {
              "description": "Required. Describes priority of the rule. Rules with a lower value will be evaluated before rules with a higher value."
            }
          },
          "rateLimitDurationInMinutes": {
            "type": "int",
            "nullable": true,
            "metadata": {
              "description": "Optional. Time window for resetting the rate limit count. Default is 1 minute."
            }
          },
          "rateLimitThreshold": {
            "type": "int",
            "nullable": true,
            "metadata": {
              "description": "Optional. Number of allowed requests per client within the time window."
            }
          },
          "ruleType": {
            "type": "string",
            "allowedValues": [
              "MatchRule",
              "RateLimitRule"
            ],
            "metadata": {
              "description": "Required. Describes type of rule."
            }
          }
        }
      },
      "nullable": true
    }
  },
  "parameters": {
    "name": {
      "type": "string",
      "minLength": 1,
      "maxLength": 128,
      "metadata": {
        "description": "Required. Name of the Front Door WAF policy."
      }
    },
    "location": {
      "type": "string",
      "defaultValue": "global",
      "metadata": {
        "description": "Optional. Location for all resources."
      }
    },
    "sku": {
      "type": "string",
      "defaultValue": "Standard_AzureFrontDoor",
      "allowedValues": [
        "Standard_AzureFrontDoor",
        "Premium_AzureFrontDoor"
      ],
      "metadata": {
        "description": "Optional. The pricing tier of the WAF profile."
      }
    },
    "tags": {
      "type": "object",
      "nullable": true,
      "metadata": {
        "description": "Optional. Resource tags."
      }
    },
    "enableTelemetry": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Optional. Enable/Disable usage telemetry for module."
      }
    },
    "managedRules": {
      "$ref": "#/definitions/managedRulesType",
      "defaultValue": {
        "managedRuleSets": [
          {
            "ruleSetType": "Microsoft_DefaultRuleSet",
            "ruleSetVersion": "2.1",
            "ruleGroupOverrides": [],
            "exclusions": [],
            "ruleSetAction": "Block"
          },
          {
            "ruleSetType": "Microsoft_BotManagerRuleSet",
            "ruleSetVersion": "1.0",
            "ruleGroupOverrides": [],
            "exclusions": []
          }
        ]
      },
      "metadata": {
        "description": "Optional. Describes the managedRules structure."
      }
    },
    "customRules": {
      "$ref": "#/definitions/customRulesType",
      "defaultValue": {
        "rules": [
          {
            "name": "ApplyGeoFilter",
            "priority": 100,
            "enabledState": "Enabled",
            "ruleType": "MatchRule",
            "action": "Block",
            "matchConditions": [
              {
                "matchVariable": "RemoteAddr",
                "operator": "GeoMatch",
                "negateCondition": true,
                "matchValue": [
                  "ZZ"
                ]
              }
            ]
          }
        ]
      },
      "metadata": {
        "description": "Optional. The custom rules inside the policy."
      }
    },
    "policySettings": {
      "type": "object",
      "defaultValue": {
        "enabledState": "Enabled",
        "mode": "Prevention"
      },
      "metadata": {
        "description": "Optional. The PolicySettings for policy."
      }
    },
    "lock": {
      "$ref": "#/definitions/lockType",
      "metadata": {
        "description": "Optional. The lock settings of the service."
      }
    },
    "roleAssignments": {
      "$ref": "#/definitions/roleAssignmentType",
      "metadata": {
        "description": "Optional. Array of role assignments to create."
      }
    }
  },
  "variables": {
    "copy": [
      {
        "name": "formattedRoleAssignments",
        "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]",
        "input": "[union(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')], createObject('roleDefinitionId', coalesce(tryGet(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName), if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName)))))]"
      }
    ],
    "builtInRoleNames": {
      "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
      "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
      "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
      "Role Based Access Control Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]",
      "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]"
    }
  },
  "resources": {
    "avmTelemetry": {
      "condition": "[parameters('enableTelemetry')]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2024-03-01",
      "name": "[format('46d3xbcp.res.network-frontdoorwebappfwpolicy.{0}.{1}', replace('-..--..-', '.', '-'), substring(uniqueString(deployment().name, parameters('location')), 0, 4))]",
      "properties": {
        "mode": "Incremental",
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "resources": [],
          "outputs": {
            "telemetry": {
              "type": "String",
              "value": "For more information, see https://aka.ms/avm/TelemetryInfo"
            }
          }
        }
      }
    },
    "frontDoorWAFPolicy": {
      "type": "Microsoft.Network/FrontDoorWebApplicationFirewallPolicies",
      "apiVersion": "2024-02-01",
      "name": "[parameters('name')]",
      "location": "[parameters('location')]",
      "sku": {
        "name": "[parameters('sku')]"
      },
      "tags": "[parameters('tags')]",
      "properties": {
        "customRules": "[parameters('customRules')]",
        "managedRules": "[if(equals(parameters('sku'), 'Premium_AzureFrontDoor'), parameters('managedRules'), createObject('managedRuleSets', createArray()))]",
        "policySettings": "[parameters('policySettings')]"
      }
    },
    "frontDoorWAFPolicy_lock": {
      "condition": "[and(not(empty(coalesce(parameters('lock'), createObject()))), not(equals(tryGet(parameters('lock'), 'kind'), 'None')))]",
      "type": "Microsoft.Authorization/locks",
      "apiVersion": "2020-05-01",
      "scope": "[format('Microsoft.Network/FrontDoorWebApplicationFirewallPolicies/{0}', parameters('name'))]",
      "name": "[coalesce(tryGet(parameters('lock'), 'name'), format('lock-{0}', parameters('name')))]",
      "properties": {
        "level": "[coalesce(tryGet(parameters('lock'), 'kind'), '')]",
        "notes": "[if(equals(tryGet(parameters('lock'), 'kind'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot delete or modify the resource or child resources.')]"
      },
      "dependsOn": [
        "frontDoorWAFPolicy"
      ]
    },
    "frontDoorWAFPolicy_roleAssignments": {
      "copy": {
        "name": "frontDoorWAFPolicy_roleAssignments",
        "count": "[length(coalesce(variables('formattedRoleAssignments'), createArray()))]"
      },
      "type": "Microsoft.Authorization/roleAssignments",
      "apiVersion": "2022-04-01",
      "scope": "[format('Microsoft.Network/FrontDoorWebApplicationFirewallPolicies/{0}', parameters('name'))]",
      "name": "[coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'name'), guid(resourceId('Microsoft.Network/FrontDoorWebApplicationFirewallPolicies', parameters('name')), coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId, coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId))]",
      "properties": {
        "roleDefinitionId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId]",
        "principalId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId]",
        "description": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'description')]",
        "principalType": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'principalType')]",
        "condition": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition')]",
        "conditionVersion": "[if(not(empty(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
        "delegatedManagedIdentityResourceId": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
      },
      "dependsOn": [
        "frontDoorWAFPolicy"
      ]
    }
  },
  "outputs": {
    "name": {
      "type": "string",
      "metadata": {
        "description": "The name of the Front Door WAF policy."
      },
      "value": "[parameters('name')]"
    },
    "resourceId": {
      "type": "string",
      "metadata": {
        "description": "The resource ID of the Front Door WAF policy."
      },
      "value": "[resourceId('Microsoft.Network/FrontDoorWebApplicationFirewallPolicies', parameters('name'))]"
    },
    "resourceGroupName": {
      "type": "string",
      "metadata": {
        "description": "The resource group the Front Door WAF policy was deployed into."
      },
      "value": "[resourceGroup().name]"
    },
    "location": {
      "type": "string",
      "metadata": {
        "description": "The location the resource was deployed into."
      },
      "value": "[reference('frontDoorWAFPolicy', '2024-02-01', 'full').location]"
    }
  }
}