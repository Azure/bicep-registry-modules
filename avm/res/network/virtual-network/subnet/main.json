{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "languageVersion": "2.0",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "_generator": {
      "name": "bicep",
      "version": "0.22.6.54827",
      "templateHash": "17180599685720534663"
    },
    "name": "Virtual Network Subnets",
    "description": "This module deploys a Virtual Network Subnet.",
    "owner": "Azure/module-maintainers"
  },
  "definitions": {
    "roleAssignmentType": {
      "type": "array",
      "items": {
        "type": "object",
        "properties": {
          "roleDefinitionIdOrName": {
            "type": "string",
            "metadata": {
              "description": "Required. The name of the role to assign. If it cannot be found you can specify the role definition ID instead."
            }
          },
          "principalId": {
            "type": "string",
            "metadata": {
              "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
            }
          },
          "principalType": {
            "type": "string",
            "allowedValues": [
              "Device",
              "ForeignGroup",
              "Group",
              "ServicePrincipal",
              "User"
            ],
            "nullable": true,
            "metadata": {
              "description": "Optional. The principal type of the assigned principal ID."
            }
          },
          "description": {
            "type": "string",
            "nullable": true,
            "metadata": {
              "description": "Optional. The description of the role assignment."
            }
          },
          "condition": {
            "type": "string",
            "nullable": true,
            "metadata": {
              "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\""
            }
          },
          "conditionVersion": {
            "type": "string",
            "allowedValues": [
              "2.0"
            ],
            "nullable": true,
            "metadata": {
              "description": "Optional. Version of the condition."
            }
          },
          "delegatedManagedIdentityResourceId": {
            "type": "string",
            "nullable": true,
            "metadata": {
              "description": "Optional. The Resource Id of the delegated managed identity resource."
            }
          }
        }
      },
      "nullable": true
    }
  },
  "parameters": {
    "name": {
      "type": "string",
      "metadata": {
        "description": "Optional. The Name of the subnet resource."
      }
    },
    "virtualNetworkName": {
      "type": "string",
      "metadata": {
        "description": "Conditional. The name of the parent virtual network. Required if the template is used in a standalone deployment."
      }
    },
    "addressPrefix": {
      "type": "string",
      "metadata": {
        "description": "Required. The address prefix for the subnet."
      }
    },
    "networkSecurityGroupId": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Optional. The resource ID of the network security group to assign to the subnet."
      }
    },
    "routeTableId": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Optional. The resource ID of the route table to assign to the subnet."
      }
    },
    "serviceEndpoints": {
      "type": "array",
      "defaultValue": [],
      "metadata": {
        "description": "Optional. The service endpoints to enable on the subnet."
      }
    },
    "delegations": {
      "type": "array",
      "defaultValue": [],
      "metadata": {
        "description": "Optional. The delegations to enable on the subnet."
      }
    },
    "natGatewayId": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Optional. The resource ID of the NAT Gateway to use for the subnet."
      }
    },
    "privateEndpointNetworkPolicies": {
      "type": "string",
      "defaultValue": "",
      "allowedValues": [
        "Disabled",
        "Enabled",
        ""
      ],
      "metadata": {
        "description": "Optional. enable or disable apply network policies on private endpoint in the subnet."
      }
    },
    "privateLinkServiceNetworkPolicies": {
      "type": "string",
      "defaultValue": "",
      "allowedValues": [
        "Disabled",
        "Enabled",
        ""
      ],
      "metadata": {
        "description": "Optional. enable or disable apply network policies on private link service in the subnet."
      }
    },
    "addressPrefixes": {
      "type": "array",
      "defaultValue": [],
      "metadata": {
        "description": "Optional. List of address prefixes for the subnet."
      }
    },
    "applicationGatewayIPConfigurations": {
      "type": "array",
      "defaultValue": [],
      "metadata": {
        "description": "Optional. Application gateway IP configurations of virtual network resource."
      }
    },
    "ipAllocations": {
      "type": "array",
      "defaultValue": [],
      "metadata": {
        "description": "Optional. Array of IpAllocation which reference this subnet."
      }
    },
    "serviceEndpointPolicies": {
      "type": "array",
      "defaultValue": [],
      "metadata": {
        "description": "Optional. An array of service endpoint policies."
      }
    },
    "roleAssignments": {
      "$ref": "#/definitions/roleAssignmentType",
      "metadata": {
        "description": "Optional. Array of role assignment objects that contain the 'roleDefinitionIdOrName' and 'principalId' to define RBAC role assignments on this resource. In the roleDefinitionIdOrName attribute, you can provide either the display name of the role definition, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
      }
    },
    "enableDefaultTelemetry": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Optional. Enable telemetry via a Globally Unique Identifier (GUID)."
      }
    }
  },
  "variables": {
    "builtInRoleNames": {
      "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
      "Network Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4d97b98b-1d4f-4787-a291-c67834d212e7')]",
      "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
      "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
      "Role Based Access Control Administrator (Preview)": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]",
      "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]"
    }
  },
  "resources": {
    "defaultTelemetry": {
      "condition": "[parameters('enableDefaultTelemetry')]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2021-04-01",
      "name": "[format('pid-47ed15a6-730a-4827-bcb4-0fd963ffbd82-{0}', uniqueString(deployment().name))]",
      "properties": {
        "mode": "Incremental",
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "resources": []
        }
      }
    },
    "virtualNetwork": {
      "existing": true,
      "type": "Microsoft.Network/virtualNetworks",
      "apiVersion": "2023-04-01",
      "name": "[parameters('virtualNetworkName')]"
    },
    "subnet": {
      "type": "Microsoft.Network/virtualNetworks/subnets",
      "apiVersion": "2023-04-01",
      "name": "[format('{0}/{1}', parameters('virtualNetworkName'), parameters('name'))]",
      "properties": {
        "addressPrefix": "[parameters('addressPrefix')]",
        "networkSecurityGroup": "[if(not(empty(parameters('networkSecurityGroupId'))), createObject('id', parameters('networkSecurityGroupId')), null())]",
        "routeTable": "[if(not(empty(parameters('routeTableId'))), createObject('id', parameters('routeTableId')), null())]",
        "natGateway": "[if(not(empty(parameters('natGatewayId'))), createObject('id', parameters('natGatewayId')), null())]",
        "serviceEndpoints": "[parameters('serviceEndpoints')]",
        "delegations": "[parameters('delegations')]",
        "privateEndpointNetworkPolicies": "[if(not(empty(parameters('privateEndpointNetworkPolicies'))), parameters('privateEndpointNetworkPolicies'), null())]",
        "privateLinkServiceNetworkPolicies": "[if(not(empty(parameters('privateLinkServiceNetworkPolicies'))), parameters('privateLinkServiceNetworkPolicies'), null())]",
        "addressPrefixes": "[parameters('addressPrefixes')]",
        "applicationGatewayIPConfigurations": "[parameters('applicationGatewayIPConfigurations')]",
        "ipAllocations": "[parameters('ipAllocations')]",
        "serviceEndpointPolicies": "[parameters('serviceEndpointPolicies')]"
      },
      "dependsOn": [
        "virtualNetwork"
      ]
    },
    "subnet_roleAssignments": {
      "copy": {
        "name": "subnet_roleAssignments",
        "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]"
      },
      "type": "Microsoft.Authorization/roleAssignments",
      "apiVersion": "2022-04-01",
      "scope": "[format('Microsoft.Network/virtualNetworks/{0}/subnets/{1}', parameters('virtualNetworkName'), parameters('name'))]",
      "name": "[guid(resourceId('Microsoft.Network/virtualNetworks/subnets', parameters('virtualNetworkName'), parameters('name')), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].principalId, coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName)]",
      "properties": {
        "roleDefinitionId": "[if(contains(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName), variables('builtInRoleNames')[coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName], coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName)]",
        "principalId": "[coalesce(parameters('roleAssignments'), createArray())[copyIndex()].principalId]",
        "description": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'description')]",
        "principalType": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'principalType')]",
        "condition": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'condition')]",
        "conditionVersion": "[if(not(empty(tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
        "delegatedManagedIdentityResourceId": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
      },
      "dependsOn": [
        "subnet"
      ]
    }
  },
  "outputs": {
    "resourceGroupName": {
      "type": "string",
      "metadata": {
        "description": "The resource group the virtual network peering was deployed into."
      },
      "value": "[resourceGroup().name]"
    },
    "name": {
      "type": "string",
      "metadata": {
        "description": "The name of the virtual network peering."
      },
      "value": "[parameters('name')]"
    },
    "resourceId": {
      "type": "string",
      "metadata": {
        "description": "The resource ID of the virtual network peering."
      },
      "value": "[resourceId('Microsoft.Network/virtualNetworks/subnets', parameters('virtualNetworkName'), parameters('name'))]"
    },
    "subnetAddressPrefix": {
      "type": "string",
      "metadata": {
        "description": "The address prefix for the subnet."
      },
      "value": "[reference('subnet').addressPrefix]"
    },
    "subnetAddressPrefixes": {
      "type": "array",
      "metadata": {
        "description": "List of address prefixes for the subnet."
      },
      "value": "[if(not(empty(parameters('addressPrefixes'))), reference('subnet').addressPrefixes, createArray())]"
    }
  }
}