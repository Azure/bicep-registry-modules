{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "languageVersion": "2.0",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "_generator": {
      "name": "bicep",
      "version": "0.30.23.60470",
      "templateHash": "15412546608723758936"
    },
    "name": "Firewall Policies",
    "description": "This module deploys a Firewall Policy.",
    "owner": "Azure/module-maintainers"
  },
  "definitions": {
    "managedIdentitiesType": {
      "type": "object",
      "properties": {
        "userAssignedResourceIds": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "metadata": {
            "description": "Optional. The resource ID(s) to assign to the resource."
          }
        }
      },
      "nullable": true
    },
    "roleAssignmentType": {
      "type": "array",
      "items": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true,
            "metadata": {
              "description": "Optional. The name (as GUID) of the role assignment. If not provided, a GUID will be generated."
            }
          },
          "roleDefinitionIdOrName": {
            "type": "string",
            "metadata": {
              "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
            }
          },
          "principalId": {
            "type": "string",
            "metadata": {
              "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
            }
          },
          "principalType": {
            "type": "string",
            "allowedValues": [
              "Device",
              "ForeignGroup",
              "Group",
              "ServicePrincipal",
              "User"
            ],
            "nullable": true,
            "metadata": {
              "description": "Optional. The principal type of the assigned principal ID."
            }
          },
          "description": {
            "type": "string",
            "nullable": true,
            "metadata": {
              "description": "Optional. The description of the role assignment."
            }
          },
          "condition": {
            "type": "string",
            "nullable": true,
            "metadata": {
              "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
            }
          },
          "conditionVersion": {
            "type": "string",
            "allowedValues": [
              "2.0"
            ],
            "nullable": true,
            "metadata": {
              "description": "Optional. Version of the condition."
            }
          },
          "delegatedManagedIdentityResourceId": {
            "type": "string",
            "nullable": true,
            "metadata": {
              "description": "Optional. The Resource Id of the delegated managed identity resource."
            }
          }
        }
      },
      "nullable": true
    },
    "lockType": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "Optional. Specify the name of lock."
          }
        },
        "kind": {
          "type": "string",
          "allowedValues": [
            "CanNotDelete",
            "None",
            "ReadOnly"
          ],
          "nullable": true,
          "metadata": {
            "description": "Optional. Specify the type of lock."
          }
        }
      },
      "nullable": true
    }
  },
  "parameters": {
    "name": {
      "type": "string",
      "metadata": {
        "description": "Required. Name of the Firewall Policy."
      }
    },
    "location": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "Optional. Location for all resources."
      }
    },
    "tags": {
      "type": "object",
      "nullable": true,
      "metadata": {
        "description": "Optional. Tags of the Firewall policy resource."
      }
    },
    "managedIdentities": {
      "$ref": "#/definitions/managedIdentitiesType",
      "metadata": {
        "description": "Optional. The managed identity definition for this resource."
      }
    },
    "basePolicyResourceId": {
      "type": "string",
      "nullable": true,
      "metadata": {
        "description": "Optional. Resource ID of the base policy."
      }
    },
    "enableProxy": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Optional. Enable DNS Proxy on Firewalls attached to the Firewall Policy."
      }
    },
    "servers": {
      "type": "array",
      "nullable": true,
      "metadata": {
        "description": "Optional. List of Custom DNS Servers."
      }
    },
    "insightsIsEnabled": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Optional. A flag to indicate if the insights are enabled on the policy."
      }
    },
    "defaultWorkspaceId": {
      "type": "string",
      "nullable": true,
      "metadata": {
        "description": "Optional. Default Log Analytics Resource ID for Firewall Policy Insights."
      }
    },
    "workspaces": {
      "type": "array",
      "nullable": true,
      "metadata": {
        "description": "Optional. List of workspaces for Firewall Policy Insights."
      }
    },
    "retentionDays": {
      "type": "int",
      "defaultValue": 365,
      "metadata": {
        "description": "Optional. Number of days the insights should be enabled on the policy."
      }
    },
    "bypassTrafficSettings": {
      "type": "array",
      "nullable": true,
      "metadata": {
        "description": "Optional. List of rules for traffic to bypass."
      }
    },
    "signatureOverrides": {
      "type": "array",
      "nullable": true,
      "metadata": {
        "description": "Optional. List of specific signatures states."
      }
    },
    "mode": {
      "type": "string",
      "defaultValue": "Off",
      "allowedValues": [
        "Alert",
        "Deny",
        "Off"
      ],
      "metadata": {
        "description": "Optional. The configuring of intrusion detection."
      }
    },
    "tier": {
      "type": "string",
      "defaultValue": "Standard",
      "allowedValues": [
        "Premium",
        "Standard",
        "Basic"
      ],
      "metadata": {
        "description": "Optional. Tier of Firewall Policy."
      }
    },
    "privateRanges": {
      "type": "array",
      "defaultValue": [],
      "metadata": {
        "description": "Optional. List of private IP addresses/IP address ranges to not be SNAT."
      }
    },
    "autoLearnPrivateRanges": {
      "type": "string",
      "defaultValue": "Disabled",
      "allowedValues": [
        "Disabled",
        "Enabled"
      ],
      "metadata": {
        "description": "Optional. The operation mode for automatically learning private ranges to not be SNAT."
      }
    },
    "threatIntelMode": {
      "type": "string",
      "defaultValue": "Off",
      "allowedValues": [
        "Alert",
        "Deny",
        "Off"
      ],
      "metadata": {
        "description": "Optional. The operation mode for Threat Intel."
      }
    },
    "allowSqlRedirect": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Optional. A flag to indicate if SQL Redirect traffic filtering is enabled. Turning on the flag requires no rule using port 11000-11999."
      }
    },
    "fqdns": {
      "type": "array",
      "nullable": true,
      "metadata": {
        "description": "Optional. List of FQDNs for the ThreatIntel Allowlist."
      }
    },
    "ipAddresses": {
      "type": "array",
      "nullable": true,
      "metadata": {
        "description": "Optional. List of IP addresses for the ThreatIntel Allowlist."
      }
    },
    "keyVaultSecretId": {
      "type": "string",
      "nullable": true,
      "metadata": {
        "description": "Optional. Secret ID of (base-64 encoded unencrypted PFX) Secret or Certificate object stored in KeyVault."
      }
    },
    "certificateName": {
      "type": "string",
      "nullable": true,
      "metadata": {
        "description": "Optional. Name of the CA certificate."
      }
    },
    "enableTelemetry": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Optional. Enable/Disable usage telemetry for module."
      }
    },
    "ruleCollectionGroups": {
      "type": "array",
      "nullable": true,
      "metadata": {
        "description": "Optional. Rule collection groups."
      }
    },
    "lock": {
      "$ref": "#/definitions/lockType",
      "metadata": {
        "description": "Optional. The lock settings of the service."
      }
    },
    "roleAssignments": {
      "$ref": "#/definitions/roleAssignmentType",
      "metadata": {
        "description": "Optional. Array of role assignments to create."
      }
    }
  },
  "variables": {
    "copy": [
      {
        "name": "formattedRoleAssignments",
        "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]",
        "input": "[union(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')], createObject('roleDefinitionId', coalesce(tryGet(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName), if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName)))))]"
      }
    ],
    "formattedUserAssignedIdentities": "[reduce(map(coalesce(tryGet(parameters('managedIdentities'), 'userAssignedResourceIds'), createArray()), lambda('id', createObject(format('{0}', lambdaVariables('id')), createObject()))), createObject(), lambda('cur', 'next', union(lambdaVariables('cur'), lambdaVariables('next'))))]",
    "identity": "[if(not(empty(parameters('managedIdentities'))), createObject('type', 'UserAssigned', 'userAssignedIdentities', if(not(empty(variables('formattedUserAssignedIdentities'))), variables('formattedUserAssignedIdentities'), null())), null())]",
    "builtInRoleNames": {
      "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
      "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
      "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
      "Role Based Access Control Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]",
      "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]"
    }
  },
  "resources": {
    "avmTelemetry": {
      "condition": "[parameters('enableTelemetry')]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2024-03-01",
      "name": "[format('46d3xbcp.res.network-firewallpolicy.{0}.{1}', replace('-..--..-', '.', '-'), substring(uniqueString(deployment().name, parameters('location')), 0, 4))]",
      "properties": {
        "mode": "Incremental",
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "resources": [],
          "outputs": {
            "telemetry": {
              "type": "String",
              "value": "For more information, see https://aka.ms/avm/TelemetryInfo"
            }
          }
        }
      }
    },
    "firewallPolicy": {
      "type": "Microsoft.Network/firewallPolicies",
      "apiVersion": "2023-04-01",
      "name": "[parameters('name')]",
      "location": "[parameters('location')]",
      "tags": "[parameters('tags')]",
      "identity": "[variables('identity')]",
      "properties": {
        "basePolicy": "[if(not(empty(coalesce(parameters('basePolicyResourceId'), ''))), createObject('id', parameters('basePolicyResourceId')), null())]",
        "dnsSettings": "[if(parameters('enableProxy'), createObject('enableProxy', parameters('enableProxy'), 'servers', coalesce(parameters('servers'), createArray())), null())]",
        "insights": "[if(parameters('insightsIsEnabled'), createObject('isEnabled', parameters('insightsIsEnabled'), 'logAnalyticsResources', createObject('defaultWorkspaceId', createObject('id', parameters('defaultWorkspaceId')), 'workspaces', parameters('workspaces')), 'retentionDays', parameters('retentionDays')), null())]",
        "intrusionDetection": "[if(not(equals(parameters('mode'), 'Off')), createObject('configuration', createObject('bypassTrafficSettings', parameters('bypassTrafficSettings'), 'signatureOverrides', parameters('signatureOverrides')), 'mode', parameters('mode')), null())]",
        "sku": {
          "tier": "[parameters('tier')]"
        },
        "snat": "[if(not(empty(parameters('privateRanges'))), createObject('autoLearnPrivateRanges', parameters('autoLearnPrivateRanges'), 'privateRanges', parameters('privateRanges')), null())]",
        "sql": {
          "allowSqlRedirect": "[parameters('allowSqlRedirect')]"
        },
        "threatIntelMode": "[parameters('threatIntelMode')]",
        "threatIntelWhitelist": {
          "fqdns": "[coalesce(parameters('fqdns'), createArray())]",
          "ipAddresses": "[coalesce(parameters('ipAddresses'), createArray())]"
        },
        "transportSecurity": "[if(or(not(empty(coalesce(parameters('keyVaultSecretId'), createArray()))), not(empty(coalesce(parameters('certificateName'), '')))), createObject('certificateAuthority', createObject('keyVaultSecretId', parameters('keyVaultSecretId'), 'name', parameters('certificateName'))), null())]"
      }
    },
    "firewallPolicy_roleAssignments": {
      "copy": {
        "name": "firewallPolicy_roleAssignments",
        "count": "[length(coalesce(variables('formattedRoleAssignments'), createArray()))]"
      },
      "type": "Microsoft.Authorization/roleAssignments",
      "apiVersion": "2022-04-01",
      "scope": "[format('Microsoft.Network/firewallPolicies/{0}', parameters('name'))]",
      "name": "[coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'name'), guid(resourceId('Microsoft.Network/firewallPolicies', parameters('name')), coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId, coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId))]",
      "properties": {
        "roleDefinitionId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId]",
        "principalId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId]",
        "description": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'description')]",
        "principalType": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'principalType')]",
        "condition": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition')]",
        "conditionVersion": "[if(not(empty(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
        "delegatedManagedIdentityResourceId": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
      },
      "dependsOn": [
        "firewallPolicy"
      ]
    },
    "firewallPolicy_lock": {
      "condition": "[and(not(empty(coalesce(parameters('lock'), createObject()))), not(equals(tryGet(parameters('lock'), 'kind'), 'None')))]",
      "type": "Microsoft.Authorization/locks",
      "apiVersion": "2020-05-01",
      "scope": "[format('Microsoft.Network/firewallPolicies/{0}', parameters('name'))]",
      "name": "[coalesce(tryGet(parameters('lock'), 'name'), format('lock-{0}', parameters('name')))]",
      "properties": {
        "level": "[coalesce(tryGet(parameters('lock'), 'kind'), '')]",
        "notes": "[if(equals(tryGet(parameters('lock'), 'kind'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot delete or modify the resource or child resources.')]"
      },
      "dependsOn": [
        "firewallPolicy"
      ]
    },
    "firewallPolicy_ruleCollectionGroups": {
      "copy": {
        "name": "firewallPolicy_ruleCollectionGroups",
        "count": "[length(coalesce(parameters('ruleCollectionGroups'), createArray()))]",
        "mode": "serial",
        "batchSize": 1
      },
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('{0}-firewallPolicy_ruleCollectionGroups-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "firewallPolicyName": {
            "value": "[parameters('name')]"
          },
          "name": {
            "value": "[coalesce(parameters('ruleCollectionGroups'), createArray())[copyIndex()].name]"
          },
          "priority": {
            "value": "[coalesce(parameters('ruleCollectionGroups'), createArray())[copyIndex()].priority]"
          },
          "ruleCollections": {
            "value": "[coalesce(parameters('ruleCollectionGroups'), createArray())[copyIndex()].ruleCollections]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "languageVersion": "2.0",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.30.23.60470",
              "templateHash": "4286918441341976962"
            },
            "name": "Firewall Policy Rule Collection Groups",
            "description": "This module deploys a Firewall Policy Rule Collection Group.",
            "owner": "Azure/module-maintainers"
          },
          "parameters": {
            "firewallPolicyName": {
              "type": "string",
              "metadata": {
                "description": "Conditional. The name of the parent Firewall Policy. Required if the template is used in a standalone deployment."
              }
            },
            "name": {
              "type": "string",
              "metadata": {
                "description": "Required. The name of the rule collection group to deploy."
              }
            },
            "priority": {
              "type": "int",
              "metadata": {
                "description": "Required. Priority of the Firewall Policy Rule Collection Group resource."
              }
            },
            "ruleCollections": {
              "type": "array",
              "nullable": true,
              "metadata": {
                "description": "Optional. Group of Firewall Policy rule collections."
              }
            }
          },
          "resources": {
            "firewallPolicy": {
              "existing": true,
              "type": "Microsoft.Network/firewallPolicies",
              "apiVersion": "2023-04-01",
              "name": "[parameters('firewallPolicyName')]"
            },
            "ruleCollectionGroup": {
              "type": "Microsoft.Network/firewallPolicies/ruleCollectionGroups",
              "apiVersion": "2023-04-01",
              "name": "[format('{0}/{1}', parameters('firewallPolicyName'), parameters('name'))]",
              "properties": {
                "priority": "[parameters('priority')]",
                "ruleCollections": "[coalesce(parameters('ruleCollections'), createArray())]"
              },
              "dependsOn": [
                "firewallPolicy"
              ]
            }
          },
          "outputs": {
            "name": {
              "type": "string",
              "metadata": {
                "description": "The name of the deployed rule collection group."
              },
              "value": "[parameters('name')]"
            },
            "resourceId": {
              "type": "string",
              "metadata": {
                "description": "The resource ID of the deployed rule collection group."
              },
              "value": "[resourceId('Microsoft.Network/firewallPolicies/ruleCollectionGroups', parameters('firewallPolicyName'), parameters('name'))]"
            },
            "resourceGroupName": {
              "type": "string",
              "metadata": {
                "description": "The resource group of the deployed rule collection group."
              },
              "value": "[resourceGroup().name]"
            }
          }
        }
      },
      "dependsOn": [
        "firewallPolicy"
      ]
    }
  },
  "outputs": {
    "name": {
      "type": "string",
      "metadata": {
        "description": "The name of the deployed firewall policy."
      },
      "value": "[parameters('name')]"
    },
    "resourceId": {
      "type": "string",
      "metadata": {
        "description": "The resource ID of the deployed firewall policy."
      },
      "value": "[resourceId('Microsoft.Network/firewallPolicies', parameters('name'))]"
    },
    "resourceGroupName": {
      "type": "string",
      "metadata": {
        "description": "The resource group of the deployed firewall policy."
      },
      "value": "[resourceGroup().name]"
    },
    "location": {
      "type": "string",
      "metadata": {
        "description": "The location the resource was deployed into."
      },
      "value": "[reference('firewallPolicy', '2023-04-01', 'full').location]"
    }
  }
}