metadata name = 'Azure SQL Server Vulnerability Assessments'
metadata description = 'This module deploys an Azure SQL Server Vulnerability Assessment.'
metadata owner = 'Azure/module-maintainers'

@description('Required. The name of the vulnerability assessment.')
param name string

@description('Conditional. The Name of SQL Server. Required if the template is used in a standalone deployment.')
param serverName string

@description('Optional. Recurring scans state.')
param recurringScansIsEnabled bool = false

@description('Optional. Specifies that the schedule scan notification will be is sent to the subscription administrators.')
param recurringScansEmailSubscriptionAdmins bool = false

@description('Optional. Specifies an array of email addresses to which the scan notification is sent.')
param recurringScansEmails array = []

@description('Required. A blob storage to hold the scan results.')
param storageAccountResourceId string

@description('Optional. Use Access Key to access the storage account. The storage account cannot be behind a firewall or virtual network. If an access key is not used, the SQL Server system assigned managed identity must be assigned the Storage Blob Data Contributor role on the storage account.')
param useStorageAccountAccessKey bool = false

@description('Optional. Create the Storage Blob Data Contributor role assignment on the storage account. Note, the role assignment must not already exist on the storage account.')
param createStorageRoleAssignment bool = true

@description('Optional. Enable telemetry via a Globally Unique Identifier (GUID).')
param enableDefaultTelemetry bool = true

resource defaultTelemetry 'Microsoft.Resources/deployments@2021-04-01' = if (enableDefaultTelemetry) {
  name: 'pid-9319755b-f697-4146-b966-4656e0b46cac-${uniqueString(deployment().name)}'
  properties: {
    mode: 'Incremental'
    template: {
      '$schema': 'https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#'
      contentVersion: '1.0.0.0'
      resources: []
    }
  }
}

resource server 'Microsoft.Sql/servers@2022-05-01-preview' existing = {
  name: serverName
}

// Assign SQL Server MSI access to storage account
module storageAccount_sbdc_rbac 'modules/nested_storageRoleAssignment.bicep' = if (!useStorageAccountAccessKey && createStorageRoleAssignment) {
  name: '${server.name}-sbdc-rbac'
  scope: resourceGroup(split(storageAccountResourceId, '/')[4])
  params: {
    storageAccountName: last(split(storageAccountResourceId, '/'))
    managedInstanceIdentityPrincipalId: server.identity.principalId
  }
}

resource vulnerabilityAssessment 'Microsoft.Sql/servers/vulnerabilityAssessments@2022-05-01-preview' = {
  name: name
  parent: server
  properties: {
    storageContainerPath: 'https://${last(split(storageAccountResourceId, '/'))}.blob.${environment().suffixes.storage}/vulnerability-assessment/'
    storageAccountAccessKey: useStorageAccountAccessKey ? listKeys(storageAccountResourceId, '2019-06-01').keys[0].value : any(null)
    recurringScans: {
      isEnabled: recurringScansIsEnabled
      emailSubscriptionAdmins: recurringScansEmailSubscriptionAdmins
      emails: recurringScansEmails
    }
  }
}

@description('The name of the deployed vulnerability assessment.')
output name string = vulnerabilityAssessment.name

@description('The resource ID of the deployed vulnerability assessment.')
output resourceId string = vulnerabilityAssessment.id

@description('The resource group of the deployed vulnerability assessment.')
output resourceGroupName string = resourceGroup().name
