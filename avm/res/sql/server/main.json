{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "languageVersion": "2.0",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "_generator": {
      "name": "bicep",
      "version": "0.36.1.42791",
      "templateHash": "8900848350284880182"
    },
    "name": "Azure SQL Servers",
    "description": "This module deploys an Azure SQL Server."
  },
  "definitions": {
    "privateEndpointOutputType": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "metadata": {
            "description": "The name of the private endpoint."
          }
        },
        "resourceId": {
          "type": "string",
          "metadata": {
            "description": "The resource ID of the private endpoint."
          }
        },
        "groupId": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "The group Id for the private endpoint Group."
          }
        },
        "customDnsConfigs": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "fqdn": {
                "type": "string",
                "nullable": true,
                "metadata": {
                  "description": "FQDN that resolves to private endpoint IP address."
                }
              },
              "ipAddresses": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "metadata": {
                  "description": "A list of private IP addresses of the private endpoint."
                }
              }
            }
          },
          "metadata": {
            "description": "The custom DNS configurations of the private endpoint."
          }
        },
        "networkInterfaceResourceIds": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "metadata": {
            "description": "The IDs of the network interfaces associated with the private endpoint."
          }
        }
      },
      "metadata": {
        "__bicep_export!": true,
        "description": "The type for a private endpoint output."
      }
    },
    "auditSettingsType": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "Optional. Specifies the name of the audit settings."
          }
        },
        "auditActionsAndGroups": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "nullable": true,
          "metadata": {
            "description": "Optional. Specifies the Actions-Groups and Actions to audit."
          }
        },
        "isAzureMonitorTargetEnabled": {
          "type": "bool",
          "nullable": true,
          "metadata": {
            "description": "Optional. Specifies whether audit events are sent to Azure Monitor."
          }
        },
        "isDevopsAuditEnabled": {
          "type": "bool",
          "nullable": true,
          "metadata": {
            "description": "Optional. Specifies the state of devops audit. If state is Enabled, devops logs will be sent to Azure Monitor."
          }
        },
        "isManagedIdentityInUse": {
          "type": "bool",
          "nullable": true,
          "metadata": {
            "description": "Optional. Specifies whether Managed Identity is used to access blob storage."
          }
        },
        "isStorageSecondaryKeyInUse": {
          "type": "bool",
          "nullable": true,
          "metadata": {
            "description": "Optional. Specifies whether storageAccountAccessKey value is the storage's secondary key."
          }
        },
        "queueDelayMs": {
          "type": "int",
          "nullable": true,
          "metadata": {
            "description": "Optional. Specifies the amount of time in milliseconds that can elapse before audit actions are forced to be processed."
          }
        },
        "retentionDays": {
          "type": "int",
          "nullable": true,
          "metadata": {
            "description": "Optional. Specifies the number of days to keep in the audit logs in the storage account."
          }
        },
        "state": {
          "type": "string",
          "allowedValues": [
            "Disabled",
            "Enabled"
          ],
          "nullable": true,
          "metadata": {
            "description": "Optional. Specifies the state of the audit. If state is Enabled, storageEndpoint or isAzureMonitorTargetEnabled are required."
          }
        },
        "storageAccountResourceId": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "Optional. Specifies the identifier key of the auditing storage account."
          }
        }
      },
      "metadata": {
        "__bicep_export!": true,
        "description": "The type for audit settings."
      }
    },
    "secretsExportConfigurationType": {
      "type": "object",
      "properties": {
        "keyVaultResourceId": {
          "type": "string",
          "metadata": {
            "description": "Required. The resource ID of the key vault where to store the secrets of this module."
          }
        },
        "sqlAdminPasswordSecretName": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "Optional. The sqlAdminPassword secret name to create."
          }
        },
        "sqlAzureConnectionStringSecretName": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "Optional. The sqlAzureConnectionString secret name to create."
          }
        }
      },
      "metadata": {
        "__bicep_export!": true,
        "description": "The type for a secrets export configuration."
      }
    },
    "serverExternalAdministratorType": {
      "type": "object",
      "properties": {
        "administratorType": {
          "type": "string",
          "allowedValues": [
            "ActiveDirectory"
          ],
          "nullable": true,
          "metadata": {
            "description": "Optional. Type of the sever administrator."
          }
        },
        "azureADOnlyAuthentication": {
          "type": "bool",
          "metadata": {
            "description": "Required. Azure Active Directory only Authentication enabled."
          }
        },
        "login": {
          "type": "string",
          "metadata": {
            "description": "Required. Login name of the server administrator."
          }
        },
        "principalType": {
          "type": "string",
          "allowedValues": [
            "Application",
            "Group",
            "User"
          ],
          "metadata": {
            "description": "Required. Principal Type of the sever administrator."
          }
        },
        "sid": {
          "type": "string",
          "metadata": {
            "description": "Required. SID (object ID) of the server administrator."
          }
        },
        "tenantId": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "Optional. Tenant ID of the administrator."
          }
        }
      },
      "metadata": {
        "__bicep_export!": true,
        "description": "The type for a sever-external administrator."
      }
    },
    "databaseType": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "metadata": {
            "description": "Required. The name of the Elastic Pool."
          }
        },
        "tags": {
          "type": "object",
          "nullable": true,
          "metadata": {
            "description": "Optional. Tags of the resource."
          }
        },
        "lock": {
          "$ref": "#/definitions/lockType",
          "nullable": true,
          "metadata": {
            "description": "Optional. The lock settings of the database."
          }
        },
        "managedIdentities": {
          "$ref": "#/definitions/managedIdentityOnlyUserAssignedType",
          "nullable": true,
          "metadata": {
            "description": "Optional. The managed identities for the database."
          }
        },
        "sku": {
          "$ref": "#/definitions/databaseSkuType",
          "nullable": true,
          "metadata": {
            "description": "Optional. The database SKU."
          }
        },
        "autoPauseDelay": {
          "type": "int",
          "nullable": true,
          "metadata": {
            "description": "Optional. Time in minutes after which database is automatically paused. A value of -1 means that automatic pause is disabled."
          }
        },
        "availabilityZone": {
          "type": "int",
          "allowedValues": [
            -1,
            1,
            2,
            3
          ],
          "metadata": {
            "description": "Required. If set to 1, 2 or 3, the availability zone is hardcoded to that value. If set to -1, no zone is defined. Note that the availability zone numbers here are the logical availability zone in your Azure subscription. Different subscriptions might have a different mapping of the physical zone and logical zone. To understand more, please refer to [Physical and logical availability zones](https://learn.microsoft.com/en-us/azure/reliability/availability-zones-overview?tabs=azure-cli#physical-and-logical-availability-zones)."
          }
        },
        "catalogCollation": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "Optional. Collation of the metadata catalog."
          }
        },
        "collation": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "Optional. The collation of the database."
          }
        },
        "createMode": {
          "type": "string",
          "allowedValues": [
            "Copy",
            "Default",
            "OnlineSecondary",
            "PointInTimeRestore",
            "Recovery",
            "Restore",
            "RestoreExternalBackup",
            "RestoreExternalBackupSecondary",
            "RestoreLongTermRetentionBackup",
            "Secondary"
          ],
          "nullable": true,
          "metadata": {
            "description": "Optional. Specifies the mode of database creation."
          }
        },
        "elasticPoolResourceId": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "Optional. The resource identifier of the elastic pool containing this database."
          }
        },
        "customerManagedKey": {
          "$ref": "#/definitions/customerManagedKeyWithAutoRotateType",
          "nullable": true,
          "metadata": {
            "description": "Optional. The customer managed key definition for database TDE."
          }
        },
        "federatedClientId": {
          "type": "string",
          "nullable": true,
          "minLength": 36,
          "maxLength": 36,
          "metadata": {
            "description": "Optional. The Client id used for cross tenant per database CMK scenario."
          }
        },
        "freeLimitExhaustionBehavior": {
          "type": "string",
          "allowedValues": [
            "AutoPause",
            "BillOverUsage"
          ],
          "nullable": true,
          "metadata": {
            "description": "Optional. Specifies the behavior when monthly free limits are exhausted for the free database."
          }
        },
        "highAvailabilityReplicaCount": {
          "type": "int",
          "nullable": true,
          "metadata": {
            "description": "Optional. The number of secondary replicas associated with the database that are used to provide high availability. Not applicable to a Hyperscale database within an elastic pool."
          }
        },
        "isLedgerOn": {
          "type": "bool",
          "nullable": true,
          "metadata": {
            "description": "Optional. Whether or not this database is a ledger database, which means all tables in the database are ledger tables."
          }
        },
        "licenseType": {
          "type": "string",
          "allowedValues": [
            "BasePrice",
            "LicenseIncluded"
          ],
          "nullable": true,
          "metadata": {
            "description": "Optional. The license type to apply for this database."
          }
        },
        "longTermRetentionBackupResourceId": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "Optional. The resource identifier of the long term retention backup associated with create operation of this database."
          }
        },
        "maintenanceConfigurationId": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "Optional. Maintenance configuration id assigned to the database. This configuration defines the period when the maintenance updates will occur."
          }
        },
        "manualCutover": {
          "type": "bool",
          "nullable": true,
          "metadata": {
            "description": "Optional. Whether or not customer controlled manual cutover needs to be done during Update Database operation to Hyperscale tier."
          }
        },
        "maxSizeBytes": {
          "type": "int",
          "nullable": true,
          "metadata": {
            "description": "Optional. The max size of the database expressed in bytes."
          }
        },
        "minCapacity": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "Optional. Minimal capacity that database will always have allocated, if not paused."
          }
        },
        "performCutover": {
          "type": "bool",
          "nullable": true,
          "metadata": {
            "description": "Optional. To trigger customer controlled manual cutover during the wait state while Scaling operation is in progress."
          }
        },
        "preferredEnclaveType": {
          "type": "string",
          "allowedValues": [
            "Default",
            "VBS"
          ],
          "nullable": true,
          "metadata": {
            "description": "Optional. Type of enclave requested on the database."
          }
        },
        "readScale": {
          "type": "string",
          "allowedValues": [
            "Disabled",
            "Enabled"
          ],
          "nullable": true,
          "metadata": {
            "description": "Optional. The state of read-only routing. If enabled, connections that have application intent set to readonly in their connection string may be routed to a readonly secondary replica in the same region. Not applicable to a Hyperscale database within an elastic pool."
          }
        },
        "recoverableDatabaseResourceId": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "Optional. The resource identifier of the recoverable database associated with create operation of this database."
          }
        },
        "recoveryServicesRecoveryPointResourceId": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "Optional. The resource identifier of the recovery point associated with create operation of this database."
          }
        },
        "requestedBackupStorageRedundancy": {
          "type": "string",
          "allowedValues": [
            "Geo",
            "GeoZone",
            "Local",
            "Zone"
          ],
          "nullable": true,
          "metadata": {
            "description": "Optional. The storage account type to be used to store backups for this database."
          }
        },
        "restorableDroppedDatabaseResourceId": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "Optional. The resource identifier of the restorable dropped database associated with create operation of this database."
          }
        },
        "restorePointInTime": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "Optional. Specifies the point in time (ISO8601 format) of the source database that will be restored to create the new database."
          }
        },
        "sampleName": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "Optional. The name of the sample schema to apply when creating this database."
          }
        },
        "secondaryType": {
          "type": "string",
          "allowedValues": [
            "Geo",
            "Named",
            "Standby"
          ],
          "nullable": true,
          "metadata": {
            "description": "Optional. The secondary type of the database if it is a secondary."
          }
        },
        "sourceDatabaseDeletionDate": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "Optional. Specifies the time that the database was deleted."
          }
        },
        "sourceDatabaseResourceId": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "Optional. The resource identifier of the source database associated with create operation of this database."
          }
        },
        "sourceResourceId": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "Optional. The resource identifier of the source associated with the create operation of this database."
          }
        },
        "useFreeLimit": {
          "type": "bool",
          "nullable": true,
          "metadata": {
            "description": "Optional. Whether or not the database uses free monthly limits. Allowed on one database in a subscription."
          }
        },
        "zoneRedundant": {
          "type": "bool",
          "nullable": true,
          "metadata": {
            "description": "Optional. Whether or not this database is zone redundant, which means the replicas of this database will be spread across multiple availability zones."
          }
        },
        "diagnosticSettings": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/diagnosticSettingFullType"
          },
          "nullable": true,
          "metadata": {
            "description": "Optional. The diagnostic settings of the service."
          }
        },
        "backupShortTermRetentionPolicy": {
          "$ref": "#/definitions/shortTermBackupRetentionPolicyType",
          "nullable": true,
          "metadata": {
            "description": "Optional. The short term backup retention policy for the database."
          }
        },
        "backupLongTermRetentionPolicy": {
          "$ref": "#/definitions/longTermBackupRetentionPolicyType",
          "nullable": true,
          "metadata": {
            "description": "Optional. The long term backup retention policy for the database."
          }
        }
      },
      "metadata": {
        "__bicep_export!": true,
        "description": "The type for a database."
      }
    },
    "elasticPoolType": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "metadata": {
            "description": "Required. The name of the Elastic Pool."
          }
        },
        "tags": {
          "type": "object",
          "nullable": true,
          "metadata": {
            "description": "Optional. Tags of the resource."
          }
        },
        "lock": {
          "$ref": "#/definitions/lockType",
          "nullable": true,
          "metadata": {
            "description": "Optional. The lock settings of the elastic pool."
          }
        },
        "sku": {
          "$ref": "#/definitions/skuType",
          "nullable": true,
          "metadata": {
            "description": "Optional. The elastic pool SKU."
          }
        },
        "autoPauseDelay": {
          "type": "int",
          "nullable": true,
          "metadata": {
            "description": "Optional. Time in minutes after which elastic pool is automatically paused. A value of -1 means that automatic pause is disabled."
          }
        },
        "availabilityZone": {
          "type": "int",
          "allowedValues": [
            -1,
            1,
            2,
            3
          ],
          "metadata": {
            "description": "Required. If set to 1, 2 or 3, the availability zone is hardcoded to that value. If set to -1, no zone is defined. Note that the availability zone numbers here are the logical availability zone in your Azure subscription. Different subscriptions might have a different mapping of the physical zone and logical zone. To understand more, please refer to [Physical and logical availability zones](https://learn.microsoft.com/en-us/azure/reliability/availability-zones-overview?tabs=azure-cli#physical-and-logical-availability-zones)."
          }
        },
        "highAvailabilityReplicaCount": {
          "type": "int",
          "nullable": true,
          "metadata": {
            "description": "Optional. The number of secondary replicas associated with the elastic pool that are used to provide high availability. Applicable only to Hyperscale elastic pools."
          }
        },
        "licenseType": {
          "type": "string",
          "allowedValues": [
            "BasePrice",
            "LicenseIncluded"
          ],
          "nullable": true,
          "metadata": {
            "description": "Optional. The license type to apply for this elastic pool."
          }
        },
        "maintenanceConfigurationId": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "Optional. Maintenance configuration id assigned to the elastic pool. This configuration defines the period when the maintenance updates will will occur."
          }
        },
        "maxSizeBytes": {
          "type": "int",
          "nullable": true,
          "metadata": {
            "description": "Optional. The storage limit for the database elastic pool in bytes."
          }
        },
        "minCapacity": {
          "type": "int",
          "nullable": true,
          "metadata": {
            "description": "Optional. Minimal capacity that serverless pool will not shrink below, if not paused."
          }
        },
        "perDatabaseSettings": {
          "$ref": "#/definitions/perDatabaseSettingsType",
          "nullable": true,
          "metadata": {
            "description": "Optional. The per database settings for the elastic pool."
          }
        },
        "preferredEnclaveType": {
          "type": "string",
          "allowedValues": [
            "Default",
            "VBS"
          ],
          "nullable": true,
          "metadata": {
            "description": "Optional. Type of enclave requested on the elastic pool."
          }
        },
        "roleAssignments": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/roleAssignmentType"
          },
          "nullable": true,
          "metadata": {
            "description": "Optional. Array of role assignments to create."
          }
        },
        "zoneRedundant": {
          "type": "bool",
          "nullable": true,
          "metadata": {
            "description": "Optional. Whether or not this elastic pool is zone redundant, which means the replicas of this elastic pool will be spread across multiple availability zones."
          }
        }
      },
      "metadata": {
        "__bicep_export!": true,
        "description": "The type for an elastic pool property."
      }
    },
    "vulnerabilityAssessmentType": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "metadata": {
            "description": "Required. The name of the vulnerability assessment."
          }
        },
        "recurringScans": {
          "$ref": "#/definitions/recurringScansType",
          "nullable": true,
          "metadata": {
            "description": "Optional. The recurring scans settings."
          }
        },
        "storageAccountResourceId": {
          "type": "string",
          "metadata": {
            "description": "Required. The resource ID of the storage account to store the scan reports."
          }
        },
        "useStorageAccountAccessKey": {
          "type": "bool",
          "nullable": true,
          "metadata": {
            "description": "Optional. Specifies whether to use the storage account access key to access the storage account."
          }
        },
        "createStorageRoleAssignment": {
          "type": "bool",
          "nullable": true,
          "metadata": {
            "description": "Optional. Specifies whether to create a role assignment for the storage account."
          }
        }
      },
      "metadata": {
        "__bicep_export!": true,
        "description": "The type for a vulnerability assessment."
      }
    },
    "firewallRuleType": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "metadata": {
            "description": "Required. The name of the firewall rule."
          }
        },
        "startIpAddress": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "Optional. The start IP address of the firewall rule. Must be IPv4 format. Use value '0.0.0.0' for all Azure-internal IP addresses."
          }
        },
        "endIpAddress": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "Optional. The end IP address of the firewall rule. Must be IPv4 format. Must be greater than or equal to startIpAddress. Use value '0.0.0.0' for all Azure-internal IP addresses."
          }
        }
      },
      "metadata": {
        "__bicep_export!": true,
        "description": "The type for a firewall rule."
      }
    },
    "keyType": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "Optional. The name of the key. Must follow the [<keyVaultName>_<keyName>_<keyVersion>] pattern."
          }
        },
        "serverKeyType": {
          "type": "string",
          "allowedValues": [
            "AzureKeyVault",
            "ServiceManaged"
          ],
          "nullable": true,
          "metadata": {
            "description": "Optional. The server key type."
          }
        },
        "uri": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "Optional. The URI of the server key. If the ServerKeyType is AzureKeyVault, then the URI is required. The AKV URI is required to be in this format: 'https://YourVaultName.azure.net/keys/YourKeyName/YourKeyVersion'."
          }
        }
      },
      "metadata": {
        "__bicep_export!": true,
        "description": "The type for a key."
      }
    },
    "virtualNetworkRuleType": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "metadata": {
            "description": "Required. The name of the Server Virtual Network Rule."
          }
        },
        "virtualNetworkSubnetResourceId": {
          "type": "string",
          "metadata": {
            "description": "Required. The resource ID of the virtual network subnet."
          }
        },
        "ignoreMissingVnetServiceEndpoint": {
          "type": "bool",
          "nullable": true,
          "metadata": {
            "description": "Optional. Allow creating a firewall rule before the virtual network has vnet service endpoint enabled."
          }
        }
      },
      "metadata": {
        "__bicep_export!": true,
        "description": "The type for a virtual network rule."
      }
    },
    "securityAlerPolicyType": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "metadata": {
            "description": "Required. The name of the Security Alert Policy."
          }
        },
        "disabledAlerts": {
          "type": "array",
          "allowedValues": [
            "Access_Anomaly",
            "Brute_Force",
            "Data_Exfiltration",
            "Sql_Injection",
            "Sql_Injection_Vulnerability",
            "Unsafe_Action"
          ],
          "nullable": true,
          "metadata": {
            "description": "Optional. Alerts to disable."
          }
        },
        "emailAccountAdmins": {
          "type": "bool",
          "nullable": true,
          "metadata": {
            "description": "Optional. Specifies that the alert is sent to the account administrators."
          }
        },
        "emailAddresses": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "nullable": true,
          "metadata": {
            "description": "Optional. Specifies an array of email addresses to which the alert is sent."
          }
        },
        "retentionDays": {
          "type": "int",
          "nullable": true,
          "metadata": {
            "description": "Optional. Specifies the number of days to keep in the Threat Detection audit logs."
          }
        },
        "state": {
          "type": "string",
          "allowedValues": [
            "Disabled",
            "Enabled"
          ],
          "nullable": true,
          "metadata": {
            "description": "Optional. Specifies the state of the policy, whether it is enabled or disabled or a policy has not been applied yet on the specific database."
          }
        },
        "storageAccountAccessKey": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "Optional. Specifies the identifier key of the Threat Detection audit storage account."
          }
        },
        "storageEndpoint": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "Optional. Specifies the blob storage endpoint. This blob storage will hold all Threat Detection audit logs."
          }
        }
      },
      "metadata": {
        "__bicep_export!": true,
        "description": "The type for a security alert policy."
      }
    },
    "failoverGroupType": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "metadata": {
            "description": "Required. The name of the failover group."
          }
        },
        "tags": {
          "type": "object",
          "nullable": true,
          "metadata": {
            "description": "Optional. Tags of the resource."
          }
        },
        "databases": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "metadata": {
            "description": "Required. List of databases in the failover group."
          }
        },
        "partnerServers": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "metadata": {
            "description": "Required. List of the partner servers for the failover group."
          }
        },
        "readOnlyEndpoint": {
          "$ref": "#/definitions/readOnlyEndpointType",
          "nullable": true,
          "metadata": {
            "description": "Optional. Read-only endpoint of the failover group instance."
          }
        },
        "readWriteEndpoint": {
          "$ref": "#/definitions/readWriteEndpointType",
          "metadata": {
            "description": "Required. Read-write endpoint of the failover group instance."
          }
        },
        "secondaryType": {
          "type": "string",
          "allowedValues": [
            "Geo",
            "Standby"
          ],
          "metadata": {
            "description": "Required. Databases secondary type on partner server."
          }
        }
      },
      "metadata": {
        "__bicep_export!": true,
        "description": "The type for a failover group."
      }
    },
    "_1.privateEndpointCustomDnsConfigType": {
      "type": "object",
      "properties": {
        "fqdn": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "Optional. FQDN that resolves to private endpoint IP address."
          }
        },
        "ipAddresses": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "metadata": {
            "description": "Required. A list of private IP addresses of the private endpoint."
          }
        }
      },
      "metadata": {
        "__bicep_imported_from!": {
          "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.5.1"
        }
      }
    },
    "_1.privateEndpointIpConfigurationType": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "metadata": {
            "description": "Required. The name of the resource that is unique within a resource group."
          }
        },
        "properties": {
          "type": "object",
          "properties": {
            "groupId": {
              "type": "string",
              "metadata": {
                "description": "Required. The ID of a group obtained from the remote resource that this private endpoint should connect to."
              }
            },
            "memberName": {
              "type": "string",
              "metadata": {
                "description": "Required. The member name of a group obtained from the remote resource that this private endpoint should connect to."
              }
            },
            "privateIPAddress": {
              "type": "string",
              "metadata": {
                "description": "Required. A private IP address obtained from the private endpoint's subnet."
              }
            }
          },
          "metadata": {
            "description": "Required. Properties of private endpoint IP configurations."
          }
        }
      },
      "metadata": {
        "__bicep_imported_from!": {
          "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.5.1"
        }
      }
    },
    "_1.privateEndpointPrivateDnsZoneGroupType": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "Optional. The name of the Private DNS Zone Group."
          }
        },
        "privateDnsZoneGroupConfigs": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string",
                "nullable": true,
                "metadata": {
                  "description": "Optional. The name of the private DNS Zone Group config."
                }
              },
              "privateDnsZoneResourceId": {
                "type": "string",
                "metadata": {
                  "description": "Required. The resource id of the private DNS zone."
                }
              }
            }
          },
          "metadata": {
            "description": "Required. The private DNS Zone Groups to associate the Private Endpoint. A DNS Zone Group can support up to 5 DNS zones."
          }
        }
      },
      "metadata": {
        "__bicep_imported_from!": {
          "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.5.1"
        }
      }
    },
    "_1.secretSetOutputType": {
      "type": "object",
      "properties": {
        "secretResourceId": {
          "type": "string",
          "metadata": {
            "description": "The resourceId of the exported secret."
          }
        },
        "secretUri": {
          "type": "string",
          "metadata": {
            "description": "The secret URI of the exported secret."
          }
        },
        "secretUriWithVersion": {
          "type": "string",
          "metadata": {
            "description": "The secret URI with version of the exported secret."
          }
        }
      },
      "metadata": {
        "description": "An AVM-aligned type for the output of the secret set via the secrets export feature.",
        "__bicep_imported_from!": {
          "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.5.1"
        }
      }
    },
    "customerManagedKeyWithAutoRotateType": {
      "type": "object",
      "properties": {
        "keyVaultResourceId": {
          "type": "string",
          "metadata": {
            "description": "Required. The resource ID of a key vault to reference a customer managed key for encryption from."
          }
        },
        "keyName": {
          "type": "string",
          "metadata": {
            "description": "Required. The name of the customer managed key to use for encryption."
          }
        },
        "keyVersion": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "Optional. The version of the customer managed key to reference for encryption. If not provided, using version as per 'autoRotationEnabled' setting."
          }
        },
        "autoRotationEnabled": {
          "type": "bool",
          "nullable": true,
          "metadata": {
            "description": "Optional. Enable or disable auto-rotating to the latest key version. Default is `true`. If set to `false`, the latest key version at the time of the deployment is used."
          }
        },
        "userAssignedIdentityResourceId": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "Optional. User assigned identity to use when fetching the customer managed key. Required if no system assigned identity is available for use."
          }
        }
      },
      "metadata": {
        "description": "An AVM-aligned type for a customer-managed key. To be used if the resource type supports auto-rotation of the customer-managed key.",
        "__bicep_imported_from!": {
          "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.5.1"
        }
      }
    },
    "databaseSkuType": {
      "type": "object",
      "properties": {
        "capacity": {
          "type": "int",
          "nullable": true,
          "metadata": {
            "description": "Optional. The capacity of the particular SKU."
          }
        },
        "family": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "Optional. If the service has different generations of hardware, for the same SKU, then that can be captured here."
          }
        },
        "name": {
          "type": "string",
          "metadata": {
            "description": "Required. The name of the SKU, typically, a letter + Number code, e.g. P3."
          }
        },
        "size": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "Optional. Size of the particular SKU."
          }
        },
        "tier": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "Optional. The tier or edition of the particular SKU, e.g. Basic, Premium."
          }
        }
      },
      "metadata": {
        "description": "The database SKU.",
        "__bicep_imported_from!": {
          "sourceTemplate": "database/main.bicep"
        }
      }
    },
    "diagnosticSettingFullType": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "Optional. The name of the diagnostic setting."
          }
        },
        "logCategoriesAndGroups": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "category": {
                "type": "string",
                "nullable": true,
                "metadata": {
                  "description": "Optional. Name of a Diagnostic Log category for a resource type this setting is applied to. Set the specific logs to collect here."
                }
              },
              "categoryGroup": {
                "type": "string",
                "nullable": true,
                "metadata": {
                  "description": "Optional. Name of a Diagnostic Log category group for a resource type this setting is applied to. Set to `allLogs` to collect all logs."
                }
              },
              "enabled": {
                "type": "bool",
                "nullable": true,
                "metadata": {
                  "description": "Optional. Enable or disable the category explicitly. Default is `true`."
                }
              }
            }
          },
          "nullable": true,
          "metadata": {
            "description": "Optional. The name of logs that will be streamed. \"allLogs\" includes all possible logs for the resource. Set to `[]` to disable log collection."
          }
        },
        "metricCategories": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "category": {
                "type": "string",
                "metadata": {
                  "description": "Required. Name of a Diagnostic Metric category for a resource type this setting is applied to. Set to `AllMetrics` to collect all metrics."
                }
              },
              "enabled": {
                "type": "bool",
                "nullable": true,
                "metadata": {
                  "description": "Optional. Enable or disable the category explicitly. Default is `true`."
                }
              }
            }
          },
          "nullable": true,
          "metadata": {
            "description": "Optional. The name of metrics that will be streamed. \"allMetrics\" includes all possible metrics for the resource. Set to `[]` to disable metric collection."
          }
        },
        "logAnalyticsDestinationType": {
          "type": "string",
          "allowedValues": [
            "AzureDiagnostics",
            "Dedicated"
          ],
          "nullable": true,
          "metadata": {
            "description": "Optional. A string indicating whether the export to Log Analytics should use the default destination type, i.e. AzureDiagnostics, or use a destination type."
          }
        },
        "workspaceResourceId": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "Optional. Resource ID of the diagnostic log analytics workspace. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
          }
        },
        "storageAccountResourceId": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "Optional. Resource ID of the diagnostic storage account. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
          }
        },
        "eventHubAuthorizationRuleResourceId": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "Optional. Resource ID of the diagnostic event hub authorization rule for the Event Hubs namespace in which the event hub should be created or streamed to."
          }
        },
        "eventHubName": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "Optional. Name of the diagnostic event hub within the namespace to which logs are streamed. Without this, an event hub is created for each log category. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
          }
        },
        "marketplacePartnerResourceId": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "Optional. The full ARM resource ID of the Marketplace resource to which you would like to send Diagnostic Logs."
          }
        }
      },
      "metadata": {
        "description": "An AVM-aligned type for a diagnostic setting. To be used if both logs & metrics are supported by the resource provider.",
        "__bicep_imported_from!": {
          "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.5.1"
        }
      }
    },
    "lockType": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "Optional. Specify the name of lock."
          }
        },
        "kind": {
          "type": "string",
          "allowedValues": [
            "CanNotDelete",
            "None",
            "ReadOnly"
          ],
          "nullable": true,
          "metadata": {
            "description": "Optional. Specify the type of lock."
          }
        }
      },
      "metadata": {
        "description": "An AVM-aligned type for a lock.",
        "__bicep_imported_from!": {
          "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.5.1"
        }
      }
    },
    "longTermBackupRetentionPolicyType": {
      "type": "object",
      "properties": {
        "monthlyRetention": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "Optional. Monthly retention in ISO 8601 duration format."
          }
        },
        "weeklyRetention": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "Optional. Weekly retention in ISO 8601 duration format."
          }
        },
        "weekOfYear": {
          "type": "int",
          "nullable": true,
          "metadata": {
            "description": "Optional. Week of year backup to keep for yearly retention."
          }
        },
        "yearlyRetention": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "Optional. Yearly retention in ISO 8601 duration format."
          }
        }
      },
      "metadata": {
        "description": "The long-term backup retention policy for the database.",
        "__bicep_imported_from!": {
          "sourceTemplate": "database/main.bicep"
        }
      }
    },
    "managedIdentityAllType": {
      "type": "object",
      "properties": {
        "systemAssigned": {
          "type": "bool",
          "nullable": true,
          "metadata": {
            "description": "Optional. Enables system assigned managed identity on the resource."
          }
        },
        "userAssignedResourceIds": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "nullable": true,
          "metadata": {
            "description": "Optional. The resource ID(s) to assign to the resource. Required if a user assigned identity is used for encryption."
          }
        }
      },
      "metadata": {
        "description": "An AVM-aligned type for a managed identity configuration. To be used if both a system-assigned & user-assigned identities are supported by the resource provider.",
        "__bicep_imported_from!": {
          "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.5.1"
        }
      }
    },
    "managedIdentityOnlyUserAssignedType": {
      "type": "object",
      "properties": {
        "userAssignedResourceIds": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "nullable": true,
          "metadata": {
            "description": "Optional. The resource ID(s) to assign to the resource. Required if a user assigned identity is used for encryption."
          }
        }
      },
      "metadata": {
        "description": "An AVM-aligned type for a managed identity configuration. To be used if only user-assigned identities are supported by the resource provider.",
        "__bicep_imported_from!": {
          "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.5.1"
        }
      }
    },
    "perDatabaseSettingsType": {
      "type": "object",
      "properties": {
        "autoPauseDelay": {
          "type": "int",
          "nullable": true,
          "metadata": {
            "description": "Optional. Auto Pause Delay for per database within pool."
          }
        },
        "maxCapacity": {
          "type": "string",
          "metadata": {
            "description": "Required. The maximum capacity any one database can consume. Examples: '0.5', '2'."
          }
        },
        "minCapacity": {
          "type": "string",
          "metadata": {
            "description": "Required. The minimum capacity all databases are guaranteed. Examples: '0.5', '1'."
          }
        }
      },
      "metadata": {
        "description": "The per database settings for the elastic pool.",
        "__bicep_imported_from!": {
          "sourceTemplate": "elastic-pool/main.bicep"
        }
      }
    },
    "privateEndpointSingleServiceType": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "Optional. The name of the Private Endpoint."
          }
        },
        "location": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "Optional. The location to deploy the Private Endpoint to."
          }
        },
        "privateLinkServiceConnectionName": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "Optional. The name of the private link connection to create."
          }
        },
        "service": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "Optional. The subresource to deploy the Private Endpoint for. For example \"vault\" for a Key Vault Private Endpoint."
          }
        },
        "subnetResourceId": {
          "type": "string",
          "metadata": {
            "description": "Required. Resource ID of the subnet where the endpoint needs to be created."
          }
        },
        "resourceGroupResourceId": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "Optional. The resource ID of the Resource Group the Private Endpoint will be created in. If not specified, the Resource Group of the provided Virtual Network Subnet is used."
          }
        },
        "privateDnsZoneGroup": {
          "$ref": "#/definitions/_1.privateEndpointPrivateDnsZoneGroupType",
          "nullable": true,
          "metadata": {
            "description": "Optional. The private DNS Zone Group to configure for the Private Endpoint."
          }
        },
        "isManualConnection": {
          "type": "bool",
          "nullable": true,
          "metadata": {
            "description": "Optional. If Manual Private Link Connection is required."
          }
        },
        "manualConnectionRequestMessage": {
          "type": "string",
          "nullable": true,
          "maxLength": 140,
          "metadata": {
            "description": "Optional. A message passed to the owner of the remote resource with the manual connection request."
          }
        },
        "customDnsConfigs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/_1.privateEndpointCustomDnsConfigType"
          },
          "nullable": true,
          "metadata": {
            "description": "Optional. Custom DNS configurations."
          }
        },
        "ipConfigurations": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/_1.privateEndpointIpConfigurationType"
          },
          "nullable": true,
          "metadata": {
            "description": "Optional. A list of IP configurations of the Private Endpoint. This will be used to map to the first-party Service endpoints."
          }
        },
        "applicationSecurityGroupResourceIds": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "nullable": true,
          "metadata": {
            "description": "Optional. Application security groups in which the Private Endpoint IP configuration is included."
          }
        },
        "customNetworkInterfaceName": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "Optional. The custom name of the network interface attached to the Private Endpoint."
          }
        },
        "lock": {
          "$ref": "#/definitions/lockType",
          "nullable": true,
          "metadata": {
            "description": "Optional. Specify the type of lock."
          }
        },
        "roleAssignments": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/roleAssignmentType"
          },
          "nullable": true,
          "metadata": {
            "description": "Optional. Array of role assignments to create."
          }
        },
        "tags": {
          "type": "object",
          "nullable": true,
          "metadata": {
            "description": "Optional. Tags to be applied on all resources/Resource Groups in this deployment."
          }
        },
        "enableTelemetry": {
          "type": "bool",
          "nullable": true,
          "metadata": {
            "description": "Optional. Enable/Disable usage telemetry for module."
          }
        }
      },
      "metadata": {
        "description": "An AVM-aligned type for a private endpoint. To be used if the private endpoint's default service / groupId can be assumed (i.e., for services that only have one Private Endpoint type like 'vault' for key vault).",
        "__bicep_imported_from!": {
          "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.5.1"
        }
      }
    },
    "readOnlyEndpointType": {
      "type": "object",
      "properties": {
        "failoverPolicy": {
          "type": "string",
          "allowedValues": [
            "Disabled",
            "Enabled"
          ],
          "metadata": {
            "description": "Required. Failover policy of the read-only endpoint for the failover group."
          }
        },
        "targetServer": {
          "type": "string",
          "metadata": {
            "description": "Required. The target partner server where the read-only endpoint points to."
          }
        }
      },
      "metadata": {
        "description": "The type for a read-only endpoint.",
        "__bicep_imported_from!": {
          "sourceTemplate": "failover-group/main.bicep"
        }
      }
    },
    "readWriteEndpointType": {
      "type": "object",
      "properties": {
        "failoverPolicy": {
          "type": "string",
          "allowedValues": [
            "Automatic",
            "Manual"
          ],
          "metadata": {
            "description": "Required. Failover policy of the read-write endpoint for the failover group. If failoverPolicy is Automatic then failoverWithDataLossGracePeriodMinutes is required."
          }
        },
        "failoverWithDataLossGracePeriodMinutes": {
          "type": "int",
          "nullable": true,
          "metadata": {
            "description": "Optional. Grace period before failover with data loss is attempted for the read-write endpoint."
          }
        }
      },
      "metadata": {
        "description": "The type for a read-write endpoint.",
        "__bicep_imported_from!": {
          "sourceTemplate": "failover-group/main.bicep"
        }
      }
    },
    "recurringScansType": {
      "type": "object",
      "properties": {
        "emails": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "metadata": {
            "description": "Required. Specifies an array of e-mail addresses to which the scan notification is sent."
          }
        },
        "emailSubscriptionAdmins": {
          "type": "bool",
          "nullable": true,
          "metadata": {
            "description": "Optional. Specifies that the schedule scan notification will be sent to the subscription administrators."
          }
        },
        "isEnabled": {
          "type": "bool",
          "nullable": true,
          "metadata": {
            "description": "Optional. Recurring scans state."
          }
        }
      },
      "metadata": {
        "description": "The type for recurring scans.",
        "__bicep_imported_from!": {
          "sourceTemplate": "vulnerability-assessment/main.bicep"
        }
      }
    },
    "roleAssignmentType": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "Optional. The name (as GUID) of the role assignment. If not provided, a GUID will be generated."
          }
        },
        "roleDefinitionIdOrName": {
          "type": "string",
          "metadata": {
            "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
          }
        },
        "principalId": {
          "type": "string",
          "metadata": {
            "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
          }
        },
        "principalType": {
          "type": "string",
          "allowedValues": [
            "Device",
            "ForeignGroup",
            "Group",
            "ServicePrincipal",
            "User"
          ],
          "nullable": true,
          "metadata": {
            "description": "Optional. The principal type of the assigned principal ID."
          }
        },
        "description": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "Optional. The description of the role assignment."
          }
        },
        "condition": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
          }
        },
        "conditionVersion": {
          "type": "string",
          "allowedValues": [
            "2.0"
          ],
          "nullable": true,
          "metadata": {
            "description": "Optional. Version of the condition."
          }
        },
        "delegatedManagedIdentityResourceId": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "Optional. The Resource Id of the delegated managed identity resource."
          }
        }
      },
      "metadata": {
        "description": "An AVM-aligned type for a role assignment.",
        "__bicep_imported_from!": {
          "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.5.1"
        }
      }
    },
    "secretsOutputType": {
      "type": "object",
      "properties": {},
      "additionalProperties": {
        "$ref": "#/definitions/_1.secretSetOutputType",
        "metadata": {
          "description": "An exported secret's references."
        }
      },
      "metadata": {
        "description": "A map of the exported secrets",
        "__bicep_imported_from!": {
          "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.5.1"
        }
      }
    },
    "shortTermBackupRetentionPolicyType": {
      "type": "object",
      "properties": {
        "diffBackupIntervalInHours": {
          "type": "int",
          "nullable": true,
          "metadata": {
            "description": "Optional. Differential backup interval in hours. For Hyperscale tiers this value will be ignored."
          }
        },
        "retentionDays": {
          "type": "int",
          "nullable": true,
          "metadata": {
            "description": "Optional. Point-in-time retention in days."
          }
        }
      },
      "metadata": {
        "description": "The short-term backup retention policy for the database.",
        "__bicep_imported_from!": {
          "sourceTemplate": "database/main.bicep"
        }
      }
    },
    "skuType": {
      "type": "object",
      "properties": {
        "capacity": {
          "type": "int",
          "nullable": true,
          "metadata": {
            "description": "Optional. The capacity of the particular SKU."
          }
        },
        "family": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "Optional. If the service has different generations of hardware, for the same SKU, then that can be captured here."
          }
        },
        "name": {
          "type": "string",
          "allowedValues": [
            "BC_DC",
            "BC_Gen5",
            "BasicPool",
            "GP_DC",
            "GP_FSv2",
            "GP_Gen5",
            "HS_Gen5",
            "HS_MOPRMS",
            "HS_PRMS",
            "PremiumPool",
            "ServerlessPool",
            "StandardPool"
          ],
          "metadata": {
            "description": "Required. The name of the SKU, typically, a letter + Number code, e.g. P3."
          }
        },
        "size": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "Optional. Size of the particular SKU."
          }
        },
        "tier": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "Optional. The tier or edition of the particular SKU, e.g. Basic, Premium."
          }
        }
      },
      "metadata": {
        "description": "The elastic pool SKU.",
        "__bicep_imported_from!": {
          "sourceTemplate": "elastic-pool/main.bicep"
        }
      }
    }
  },
  "parameters": {
    "administratorLogin": {
      "type": "string",
      "nullable": true,
      "metadata": {
        "description": "Conditional. The administrator username for the server. Required if no `administrators` object for AAD authentication is provided."
      }
    },
    "administratorLoginPassword": {
      "type": "securestring",
      "nullable": true,
      "metadata": {
        "description": "Conditional. The administrator login password. Required if no `administrators` object for AAD authentication is provided."
      }
    },
    "location": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "Optional. Location for all resources."
      }
    },
    "name": {
      "type": "string",
      "metadata": {
        "description": "Required. The name of the server."
      }
    },
    "managedIdentities": {
      "$ref": "#/definitions/managedIdentityAllType",
      "nullable": true,
      "metadata": {
        "description": "Optional. The managed identity definition for this resource."
      }
    },
    "primaryUserAssignedIdentityResourceId": {
      "type": "string",
      "nullable": true,
      "metadata": {
        "description": "Conditional. The resource ID of a user assigned identity to be used by default. Required if \"userAssignedIdentities\" is not empty."
      }
    },
    "lock": {
      "$ref": "#/definitions/lockType",
      "nullable": true,
      "metadata": {
        "description": "Optional. The lock settings of the service."
      }
    },
    "roleAssignments": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/roleAssignmentType"
      },
      "nullable": true,
      "metadata": {
        "description": "Optional. Array of role assignments to create."
      }
    },
    "tags": {
      "type": "object",
      "nullable": true,
      "metadata": {
        "description": "Optional. Tags of the resource."
      }
    },
    "enableTelemetry": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Optional. Enable/Disable usage telemetry for module."
      }
    },
    "databases": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/databaseType"
      },
      "nullable": true,
      "metadata": {
        "description": "Optional. The databases to create in the server."
      }
    },
    "elasticPools": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/elasticPoolType"
      },
      "nullable": true,
      "metadata": {
        "description": "Optional. The Elastic Pools to create in the server."
      }
    },
    "firewallRules": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/firewallRuleType"
      },
      "nullable": true,
      "metadata": {
        "description": "Optional. The firewall rules to create in the server."
      }
    },
    "virtualNetworkRules": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/virtualNetworkRuleType"
      },
      "nullable": true,
      "metadata": {
        "description": "Optional. The virtual network rules to create in the server."
      }
    },
    "securityAlertPolicies": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/securityAlerPolicyType"
      },
      "nullable": true,
      "metadata": {
        "description": "Optional. The security alert policies to create in the server."
      }
    },
    "keys": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/keyType"
      },
      "nullable": true,
      "metadata": {
        "description": "Optional. The keys to configure."
      }
    },
    "customerManagedKey": {
      "$ref": "#/definitions/customerManagedKeyWithAutoRotateType",
      "nullable": true,
      "metadata": {
        "description": "Optional. The customer managed key definition for server TDE."
      }
    },
    "administrators": {
      "$ref": "#/definitions/serverExternalAdministratorType",
      "nullable": true,
      "metadata": {
        "description": "Conditional. The Azure Active Directory (AAD) administrator authentication. Required if no `administratorLogin` & `administratorLoginPassword` is provided."
      }
    },
    "federatedClientId": {
      "type": "string",
      "nullable": true,
      "minLength": 36,
      "maxLength": 36,
      "metadata": {
        "description": "Optional. The Client id used for cross tenant CMK scenario."
      }
    },
    "minimalTlsVersion": {
      "type": "string",
      "defaultValue": "1.2",
      "allowedValues": [
        "1.0",
        "1.1",
        "1.2",
        "1.3"
      ],
      "metadata": {
        "description": "Optional. Minimal TLS version allowed."
      }
    },
    "isIPv6Enabled": {
      "type": "string",
      "defaultValue": "Disabled",
      "allowedValues": [
        "Disabled",
        "Enabled"
      ],
      "metadata": {
        "description": "Optional. Whether or not to enable IPv6 support for this server."
      }
    },
    "privateEndpoints": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/privateEndpointSingleServiceType"
      },
      "nullable": true,
      "metadata": {
        "description": "Optional. Configuration details for private endpoints. For security reasons, it is recommended to use private endpoints whenever possible."
      }
    },
    "publicNetworkAccess": {
      "type": "string",
      "defaultValue": "",
      "allowedValues": [
        "",
        "Enabled",
        "Disabled",
        "SecuredByPerimeter"
      ],
      "metadata": {
        "description": "Optional. Whether or not public network access is allowed for this resource. For security reasons it should be disabled. If not specified, it will be disabled by default if private endpoints are set and neither firewall rules nor virtual network rules are set."
      }
    },
    "restrictOutboundNetworkAccess": {
      "type": "string",
      "nullable": true,
      "allowedValues": [
        "Enabled",
        "Disabled"
      ],
      "metadata": {
        "description": "Optional. Whether or not to restrict outbound network access for this server."
      }
    },
    "connectionPolicy": {
      "type": "string",
      "defaultValue": "Default",
      "allowedValues": [
        "Default",
        "Redirect",
        "Proxy"
      ],
      "metadata": {
        "description": "Optional. SQL logical server connection policy."
      }
    },
    "vulnerabilityAssessmentsObj": {
      "$ref": "#/definitions/vulnerabilityAssessmentType",
      "nullable": true,
      "metadata": {
        "description": "Optional. The vulnerability assessment configuration."
      }
    },
    "auditSettings": {
      "$ref": "#/definitions/auditSettingsType",
      "defaultValue": {
        "state": "Enabled"
      },
      "metadata": {
        "description": "Optional. The audit settings configuration. If you want to disable auditing, set the parmaeter to an empty object."
      }
    },
    "secretsExportConfiguration": {
      "$ref": "#/definitions/secretsExportConfigurationType",
      "nullable": true,
      "metadata": {
        "description": "Optional. Key vault reference and secret settings for the module's secrets export."
      }
    },
    "failoverGroups": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/failoverGroupType"
      },
      "nullable": true,
      "metadata": {
        "description": "Optional. The failover groups configuration."
      }
    }
  },
  "variables": {
    "copy": [
      {
        "name": "formattedRoleAssignments",
        "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]",
        "input": "[union(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')], createObject('roleDefinitionId', coalesce(tryGet(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName), if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName)))))]"
      }
    ],
    "formattedUserAssignedIdentities": "[reduce(map(coalesce(tryGet(parameters('managedIdentities'), 'userAssignedResourceIds'), createArray()), lambda('id', createObject(format('{0}', lambdaVariables('id')), createObject()))), createObject(), lambda('cur', 'next', union(lambdaVariables('cur'), lambdaVariables('next'))))]",
    "identity": "[if(not(empty(parameters('managedIdentities'))), createObject('type', if(coalesce(tryGet(parameters('managedIdentities'), 'systemAssigned'), false()), if(not(empty(coalesce(tryGet(parameters('managedIdentities'), 'userAssignedResourceIds'), createObject()))), 'SystemAssigned,UserAssigned', 'SystemAssigned'), if(not(empty(coalesce(tryGet(parameters('managedIdentities'), 'userAssignedResourceIds'), createObject()))), 'UserAssigned', null())), 'userAssignedIdentities', if(not(empty(variables('formattedUserAssignedIdentities'))), variables('formattedUserAssignedIdentities'), null())), null())]",
    "enableReferencedModulesTelemetry": false,
    "builtInRoleNames": {
      "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
      "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
      "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
      "Log Analytics Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '92aaf0da-9dab-42b6-94a3-d43ce8d16293')]",
      "Log Analytics Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '73c42c96-874c-492b-b04d-ab87d138a893')]",
      "Monitoring Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '749f88d5-cbae-40b8-bcfc-e573ddc772fa')]",
      "Monitoring Metrics Publisher": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '3913510d-42f4-4e42-8a64-420c390055eb')]",
      "Monitoring Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '43d0d8ad-25c7-4714-9337-8ba259a9fe05')]",
      "Reservation Purchaser": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f7b75c60-3036-4b75-91c3-6b41c27c1689')]",
      "Resource Policy Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '36243c78-bf99-498c-9df9-86d9f8d28608')]",
      "SQL DB Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '9b7fa17d-e63e-47b0-bb0a-15c516ac86ec')]",
      "SQL Security Manager": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '056cd41c-7e88-42e1-933e-88ba6a50c9c3')]",
      "SQL Server Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '6d8ee4ec-f05a-4a1d-8b00-a9b17e38b437')]",
      "SqlDb Migration Role": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '189207d4-bb67-4208-a635-b06afe8b2c57')]"
    }
  },
  "resources": {
    "cMKKeyVault::cMKKey": {
      "condition": "[and(not(empty(tryGet(parameters('customerManagedKey'), 'keyVaultResourceId'))), and(not(empty(tryGet(parameters('customerManagedKey'), 'keyVaultResourceId'))), not(empty(tryGet(parameters('customerManagedKey'), 'keyName')))))]",
      "existing": true,
      "type": "Microsoft.KeyVault/vaults/keys",
      "apiVersion": "2023-07-01",
      "subscriptionId": "[split(tryGet(parameters('customerManagedKey'), 'keyVaultResourceId'), '/')[2]]",
      "resourceGroup": "[split(tryGet(parameters('customerManagedKey'), 'keyVaultResourceId'), '/')[4]]",
      "name": "[format('{0}/{1}', last(split(tryGet(parameters('customerManagedKey'), 'keyVaultResourceId'), '/')), tryGet(parameters('customerManagedKey'), 'keyName'))]"
    },
    "cMKKeyVault": {
      "condition": "[not(empty(tryGet(parameters('customerManagedKey'), 'keyVaultResourceId')))]",
      "existing": true,
      "type": "Microsoft.KeyVault/vaults",
      "apiVersion": "2023-07-01",
      "subscriptionId": "[split(tryGet(parameters('customerManagedKey'), 'keyVaultResourceId'), '/')[2]]",
      "resourceGroup": "[split(tryGet(parameters('customerManagedKey'), 'keyVaultResourceId'), '/')[4]]",
      "name": "[last(split(tryGet(parameters('customerManagedKey'), 'keyVaultResourceId'), '/'))]"
    },
    "avmTelemetry": {
      "condition": "[parameters('enableTelemetry')]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2024-03-01",
      "name": "[format('46d3xbcp.res.sql-server.{0}.{1}', replace('-..--..-', '.', '-'), substring(uniqueString(deployment().name, parameters('location')), 0, 4))]",
      "properties": {
        "mode": "Incremental",
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "resources": [],
          "outputs": {
            "telemetry": {
              "type": "String",
              "value": "For more information, see https://aka.ms/avm/TelemetryInfo"
            }
          }
        }
      }
    },
    "server": {
      "type": "Microsoft.Sql/servers",
      "apiVersion": "2023-08-01",
      "name": "[parameters('name')]",
      "location": "[parameters('location')]",
      "tags": "[parameters('tags')]",
      "identity": "[variables('identity')]",
      "properties": {
        "administratorLogin": "[parameters('administratorLogin')]",
        "administratorLoginPassword": "[parameters('administratorLoginPassword')]",
        "administrators": "[union(createObject('administratorType', 'ActiveDirectory'), coalesce(parameters('administrators'), createObject()))]",
        "federatedClientId": "[parameters('federatedClientId')]",
        "isIPv6Enabled": "[parameters('isIPv6Enabled')]",
        "keyId": "[if(not(equals(parameters('customerManagedKey'), null())), if(not(empty(tryGet(parameters('customerManagedKey'), 'keyVersion'))), format('{0}/{1}', reference('cMKKeyVault::cMKKey').keyUri, tryGet(parameters('customerManagedKey'), 'keyVersion')), reference('cMKKeyVault::cMKKey').keyUriWithVersion), null())]",
        "version": "12.0",
        "minimalTlsVersion": "[parameters('minimalTlsVersion')]",
        "primaryUserAssignedIdentityId": "[parameters('primaryUserAssignedIdentityResourceId')]",
        "publicNetworkAccess": "[if(not(empty(parameters('publicNetworkAccess'))), parameters('publicNetworkAccess'), if(and(and(not(empty(parameters('privateEndpoints'))), empty(parameters('firewallRules'))), empty(parameters('virtualNetworkRules'))), 'Disabled', null()))]",
        "restrictOutboundNetworkAccess": "[parameters('restrictOutboundNetworkAccess')]"
      },
      "dependsOn": [
        "cMKKeyVault::cMKKey"
      ]
    },
    "server_lock": {
      "condition": "[and(not(empty(coalesce(parameters('lock'), createObject()))), not(equals(tryGet(parameters('lock'), 'kind'), 'None')))]",
      "type": "Microsoft.Authorization/locks",
      "apiVersion": "2020-05-01",
      "scope": "[format('Microsoft.Sql/servers/{0}', parameters('name'))]",
      "name": "[coalesce(tryGet(parameters('lock'), 'name'), format('lock-{0}', parameters('name')))]",
      "properties": {
        "level": "[coalesce(tryGet(parameters('lock'), 'kind'), '')]",
        "notes": "[if(equals(tryGet(parameters('lock'), 'kind'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot delete or modify the resource or child resources.')]"
      },
      "dependsOn": [
        "server"
      ]
    },
    "server_roleAssignments": {
      "copy": {
        "name": "server_roleAssignments",
        "count": "[length(coalesce(variables('formattedRoleAssignments'), createArray()))]"
      },
      "type": "Microsoft.Authorization/roleAssignments",
      "apiVersion": "2022-04-01",
      "scope": "[format('Microsoft.Sql/servers/{0}', parameters('name'))]",
      "name": "[coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'name'), guid(resourceId('Microsoft.Sql/servers', parameters('name')), coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId, coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId))]",
      "properties": {
        "roleDefinitionId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId]",
        "principalId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId]",
        "description": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'description')]",
        "principalType": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'principalType')]",
        "condition": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition')]",
        "conditionVersion": "[if(not(empty(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
        "delegatedManagedIdentityResourceId": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
      },
      "dependsOn": [
        "server"
      ]
    },
    "server_connection_policy": {
      "type": "Microsoft.Sql/servers/connectionPolicies",
      "apiVersion": "2023-08-01",
      "name": "[format('{0}/{1}', parameters('name'), 'default')]",
      "properties": {
        "connectionType": "[parameters('connectionPolicy')]"
      },
      "dependsOn": [
        "server"
      ]
    },
    "server_databases": {
      "copy": {
        "name": "server_databases",
        "count": "[length(coalesce(parameters('databases'), createArray()))]"
      },
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('{0}-Sql-DB-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "serverName": {
            "value": "[parameters('name')]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "tags": {
            "value": "[coalesce(tryGet(coalesce(parameters('databases'), createArray())[copyIndex()], 'tags'), parameters('tags'))]"
          },
          "name": {
            "value": "[coalesce(parameters('databases'), createArray())[copyIndex()].name]"
          },
          "managedIdentities": {
            "value": "[tryGet(coalesce(parameters('databases'), createArray())[copyIndex()], 'managedIdentities')]"
          },
          "sku": {
            "value": "[tryGet(coalesce(parameters('databases'), createArray())[copyIndex()], 'sku')]"
          },
          "autoPauseDelay": {
            "value": "[tryGet(coalesce(parameters('databases'), createArray())[copyIndex()], 'autoPauseDelay')]"
          },
          "availabilityZone": {
            "value": "[tryGet(coalesce(parameters('databases'), createArray())[copyIndex()], 'availabilityZone')]"
          },
          "catalogCollation": {
            "value": "[tryGet(coalesce(parameters('databases'), createArray())[copyIndex()], 'catalogCollation')]"
          },
          "collation": {
            "value": "[tryGet(coalesce(parameters('databases'), createArray())[copyIndex()], 'collation')]"
          },
          "createMode": {
            "value": "[tryGet(coalesce(parameters('databases'), createArray())[copyIndex()], 'createMode')]"
          },
          "elasticPoolResourceId": {
            "value": "[tryGet(coalesce(parameters('databases'), createArray())[copyIndex()], 'elasticPoolResourceId')]"
          },
          "customerManagedKey": {
            "value": "[tryGet(coalesce(parameters('databases'), createArray())[copyIndex()], 'customerManagedKey')]"
          },
          "federatedClientId": {
            "value": "[tryGet(coalesce(parameters('databases'), createArray())[copyIndex()], 'federatedClientId')]"
          },
          "freeLimitExhaustionBehavior": {
            "value": "[tryGet(coalesce(parameters('databases'), createArray())[copyIndex()], 'freeLimitExhaustionBehavior')]"
          },
          "highAvailabilityReplicaCount": {
            "value": "[tryGet(coalesce(parameters('databases'), createArray())[copyIndex()], 'highAvailabilityReplicaCount')]"
          },
          "isLedgerOn": {
            "value": "[tryGet(coalesce(parameters('databases'), createArray())[copyIndex()], 'isLedgerOn')]"
          },
          "licenseType": {
            "value": "[tryGet(coalesce(parameters('databases'), createArray())[copyIndex()], 'licenseType')]"
          },
          "lock": {
            "value": "[tryGet(coalesce(parameters('databases'), createArray())[copyIndex()], 'lock')]"
          },
          "longTermRetentionBackupResourceId": {
            "value": "[tryGet(coalesce(parameters('databases'), createArray())[copyIndex()], 'longTermRetentionBackupResourceId')]"
          },
          "maintenanceConfigurationId": {
            "value": "[tryGet(coalesce(parameters('databases'), createArray())[copyIndex()], 'maintenanceConfigurationId')]"
          },
          "manualCutover": {
            "value": "[tryGet(coalesce(parameters('databases'), createArray())[copyIndex()], 'manualCutover')]"
          },
          "maxSizeBytes": {
            "value": "[tryGet(coalesce(parameters('databases'), createArray())[copyIndex()], 'maxSizeBytes')]"
          },
          "minCapacity": {
            "value": "[tryGet(coalesce(parameters('databases'), createArray())[copyIndex()], 'minCapacity')]"
          },
          "performCutover": {
            "value": "[tryGet(coalesce(parameters('databases'), createArray())[copyIndex()], 'performCutover')]"
          },
          "preferredEnclaveType": {
            "value": "[tryGet(coalesce(parameters('databases'), createArray())[copyIndex()], 'preferredEnclaveType')]"
          },
          "readScale": {
            "value": "[tryGet(coalesce(parameters('databases'), createArray())[copyIndex()], 'readScale')]"
          },
          "recoverableDatabaseResourceId": {
            "value": "[tryGet(coalesce(parameters('databases'), createArray())[copyIndex()], 'recoverableDatabaseResourceId')]"
          },
          "recoveryServicesRecoveryPointResourceId": {
            "value": "[tryGet(coalesce(parameters('databases'), createArray())[copyIndex()], 'recoveryServicesRecoveryPointResourceId')]"
          },
          "requestedBackupStorageRedundancy": {
            "value": "[tryGet(coalesce(parameters('databases'), createArray())[copyIndex()], 'requestedBackupStorageRedundancy')]"
          },
          "restorableDroppedDatabaseResourceId": {
            "value": "[tryGet(coalesce(parameters('databases'), createArray())[copyIndex()], 'restorableDroppedDatabaseResourceId')]"
          },
          "restorePointInTime": {
            "value": "[tryGet(coalesce(parameters('databases'), createArray())[copyIndex()], 'restorePointInTime')]"
          },
          "sampleName": {
            "value": "[tryGet(coalesce(parameters('databases'), createArray())[copyIndex()], 'sampleName')]"
          },
          "secondaryType": {
            "value": "[tryGet(coalesce(parameters('databases'), createArray())[copyIndex()], 'secondaryType')]"
          },
          "sourceDatabaseDeletionDate": {
            "value": "[tryGet(coalesce(parameters('databases'), createArray())[copyIndex()], 'sourceDatabaseDeletionDate')]"
          },
          "sourceDatabaseResourceId": {
            "value": "[tryGet(coalesce(parameters('databases'), createArray())[copyIndex()], 'sourceDatabaseResourceId')]"
          },
          "sourceResourceId": {
            "value": "[tryGet(coalesce(parameters('databases'), createArray())[copyIndex()], 'sourceResourceId')]"
          },
          "useFreeLimit": {
            "value": "[tryGet(coalesce(parameters('databases'), createArray())[copyIndex()], 'useFreeLimit')]"
          },
          "zoneRedundant": {
            "value": "[tryGet(coalesce(parameters('databases'), createArray())[copyIndex()], 'zoneRedundant')]"
          },
          "diagnosticSettings": {
            "value": "[tryGet(coalesce(parameters('databases'), createArray())[copyIndex()], 'diagnosticSettings')]"
          },
          "backupShortTermRetentionPolicy": {
            "value": "[tryGet(coalesce(parameters('databases'), createArray())[copyIndex()], 'backupShortTermRetentionPolicy')]"
          },
          "backupLongTermRetentionPolicy": {
            "value": "[tryGet(coalesce(parameters('databases'), createArray())[copyIndex()], 'backupLongTermRetentionPolicy')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "languageVersion": "2.0",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.36.1.42791",
              "templateHash": "13916745959726876819"
            },
            "name": "SQL Server Database",
            "description": "This module deploys an Azure SQL Server Database."
          },
          "definitions": {
            "databaseSkuType": {
              "type": "object",
              "properties": {
                "capacity": {
                  "type": "int",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The capacity of the particular SKU."
                  }
                },
                "family": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. If the service has different generations of hardware, for the same SKU, then that can be captured here."
                  }
                },
                "name": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. The name of the SKU, typically, a letter + Number code, e.g. P3."
                  }
                },
                "size": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Size of the particular SKU."
                  }
                },
                "tier": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The tier or edition of the particular SKU, e.g. Basic, Premium."
                  }
                }
              },
              "metadata": {
                "__bicep_export!": true,
                "description": "The database SKU."
              }
            },
            "shortTermBackupRetentionPolicyType": {
              "type": "object",
              "properties": {
                "diffBackupIntervalInHours": {
                  "type": "int",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Differential backup interval in hours. For Hyperscale tiers this value will be ignored."
                  }
                },
                "retentionDays": {
                  "type": "int",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Point-in-time retention in days."
                  }
                }
              },
              "metadata": {
                "__bicep_export!": true,
                "description": "The short-term backup retention policy for the database."
              }
            },
            "longTermBackupRetentionPolicyType": {
              "type": "object",
              "properties": {
                "monthlyRetention": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Monthly retention in ISO 8601 duration format."
                  }
                },
                "weeklyRetention": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Weekly retention in ISO 8601 duration format."
                  }
                },
                "weekOfYear": {
                  "type": "int",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Week of year backup to keep for yearly retention."
                  }
                },
                "yearlyRetention": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Yearly retention in ISO 8601 duration format."
                  }
                }
              },
              "metadata": {
                "__bicep_export!": true,
                "description": "The long-term backup retention policy for the database."
              }
            },
            "customerManagedKeyWithAutoRotateType": {
              "type": "object",
              "properties": {
                "keyVaultResourceId": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. The resource ID of a key vault to reference a customer managed key for encryption from."
                  }
                },
                "keyName": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. The name of the customer managed key to use for encryption."
                  }
                },
                "keyVersion": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The version of the customer managed key to reference for encryption. If not provided, using version as per 'autoRotationEnabled' setting."
                  }
                },
                "autoRotationEnabled": {
                  "type": "bool",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Enable or disable auto-rotating to the latest key version. Default is `true`. If set to `false`, the latest key version at the time of the deployment is used."
                  }
                },
                "userAssignedIdentityResourceId": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. User assigned identity to use when fetching the customer managed key. Required if no system assigned identity is available for use."
                  }
                }
              },
              "metadata": {
                "description": "An AVM-aligned type for a customer-managed key. To be used if the resource type supports auto-rotation of the customer-managed key.",
                "__bicep_imported_from!": {
                  "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.5.1"
                }
              }
            },
            "diagnosticSettingFullType": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The name of the diagnostic setting."
                  }
                },
                "logCategoriesAndGroups": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "category": {
                        "type": "string",
                        "nullable": true,
                        "metadata": {
                          "description": "Optional. Name of a Diagnostic Log category for a resource type this setting is applied to. Set the specific logs to collect here."
                        }
                      },
                      "categoryGroup": {
                        "type": "string",
                        "nullable": true,
                        "metadata": {
                          "description": "Optional. Name of a Diagnostic Log category group for a resource type this setting is applied to. Set to `allLogs` to collect all logs."
                        }
                      },
                      "enabled": {
                        "type": "bool",
                        "nullable": true,
                        "metadata": {
                          "description": "Optional. Enable or disable the category explicitly. Default is `true`."
                        }
                      }
                    }
                  },
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The name of logs that will be streamed. \"allLogs\" includes all possible logs for the resource. Set to `[]` to disable log collection."
                  }
                },
                "metricCategories": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "category": {
                        "type": "string",
                        "metadata": {
                          "description": "Required. Name of a Diagnostic Metric category for a resource type this setting is applied to. Set to `AllMetrics` to collect all metrics."
                        }
                      },
                      "enabled": {
                        "type": "bool",
                        "nullable": true,
                        "metadata": {
                          "description": "Optional. Enable or disable the category explicitly. Default is `true`."
                        }
                      }
                    }
                  },
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The name of metrics that will be streamed. \"allMetrics\" includes all possible metrics for the resource. Set to `[]` to disable metric collection."
                  }
                },
                "logAnalyticsDestinationType": {
                  "type": "string",
                  "allowedValues": [
                    "AzureDiagnostics",
                    "Dedicated"
                  ],
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. A string indicating whether the export to Log Analytics should use the default destination type, i.e. AzureDiagnostics, or use a destination type."
                  }
                },
                "workspaceResourceId": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Resource ID of the diagnostic log analytics workspace. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                  }
                },
                "storageAccountResourceId": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Resource ID of the diagnostic storage account. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                  }
                },
                "eventHubAuthorizationRuleResourceId": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Resource ID of the diagnostic event hub authorization rule for the Event Hubs namespace in which the event hub should be created or streamed to."
                  }
                },
                "eventHubName": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Name of the diagnostic event hub within the namespace to which logs are streamed. Without this, an event hub is created for each log category. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                  }
                },
                "marketplacePartnerResourceId": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The full ARM resource ID of the Marketplace resource to which you would like to send Diagnostic Logs."
                  }
                }
              },
              "metadata": {
                "description": "An AVM-aligned type for a diagnostic setting. To be used if both logs & metrics are supported by the resource provider.",
                "__bicep_imported_from!": {
                  "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.5.1"
                }
              }
            },
            "lockType": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Specify the name of lock."
                  }
                },
                "kind": {
                  "type": "string",
                  "allowedValues": [
                    "CanNotDelete",
                    "None",
                    "ReadOnly"
                  ],
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Specify the type of lock."
                  }
                }
              },
              "metadata": {
                "description": "An AVM-aligned type for a lock.",
                "__bicep_imported_from!": {
                  "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.5.1"
                }
              }
            },
            "managedIdentityOnlyUserAssignedType": {
              "type": "object",
              "properties": {
                "userAssignedResourceIds": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The resource ID(s) to assign to the resource. Required if a user assigned identity is used for encryption."
                  }
                }
              },
              "metadata": {
                "description": "An AVM-aligned type for a managed identity configuration. To be used if only user-assigned identities are supported by the resource provider.",
                "__bicep_imported_from!": {
                  "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.5.1"
                }
              }
            }
          },
          "parameters": {
            "name": {
              "type": "string",
              "metadata": {
                "description": "Required. The name of the database."
              }
            },
            "serverName": {
              "type": "string",
              "metadata": {
                "description": "Conditional. The name of the parent SQL Server. Required if the template is used in a standalone deployment."
              }
            },
            "sku": {
              "$ref": "#/definitions/databaseSkuType",
              "defaultValue": {
                "name": "GP_Gen5_2",
                "tier": "GeneralPurpose"
              },
              "metadata": {
                "description": "Optional. The database SKU."
              }
            },
            "autoPauseDelay": {
              "type": "int",
              "defaultValue": -1,
              "metadata": {
                "description": "Optional. Time in minutes after which database is automatically paused. A value of -1 means that automatic pause is disabled."
              }
            },
            "availabilityZone": {
              "type": "int",
              "allowedValues": [
                -1,
                1,
                2,
                3
              ],
              "metadata": {
                "description": "Required. If set to 1, 2 or 3, the availability zone is hardcoded to that value. If set to -1, no zone is defined. Note that the availability zone numbers here are the logical availability zone in your Azure subscription. Different subscriptions might have a different mapping of the physical zone and logical zone. To understand more, please refer to [Physical and logical availability zones](https://learn.microsoft.com/en-us/azure/reliability/availability-zones-overview?tabs=azure-cli#physical-and-logical-availability-zones)."
              }
            },
            "catalogCollation": {
              "type": "string",
              "defaultValue": "DATABASE_DEFAULT",
              "metadata": {
                "description": "Optional. Collation of the metadata catalog."
              }
            },
            "collation": {
              "type": "string",
              "defaultValue": "SQL_Latin1_General_CP1_CI_AS",
              "metadata": {
                "description": "Optional. The collation of the database."
              }
            },
            "createMode": {
              "type": "string",
              "allowedValues": [
                "Copy",
                "Default",
                "OnlineSecondary",
                "PointInTimeRestore",
                "Recovery",
                "Restore",
                "RestoreExternalBackup",
                "RestoreExternalBackupSecondary",
                "RestoreLongTermRetentionBackup",
                "Secondary"
              ],
              "defaultValue": "Default",
              "metadata": {
                "description": "Optional. Specifies the mode of database creation."
              }
            },
            "elasticPoolResourceId": {
              "type": "string",
              "nullable": true,
              "metadata": {
                "description": "Optional. The resource ID of the elastic pool containing this database."
              }
            },
            "federatedClientId": {
              "type": "string",
              "nullable": true,
              "minLength": 36,
              "maxLength": 36,
              "metadata": {
                "description": "Optional. The Client id used for cross tenant per database CMK scenario."
              }
            },
            "freeLimitExhaustionBehavior": {
              "type": "string",
              "allowedValues": [
                "AutoPause",
                "BillOverUsage"
              ],
              "nullable": true,
              "metadata": {
                "description": "Optional. Specifies the behavior when monthly free limits are exhausted for the free database."
              }
            },
            "highAvailabilityReplicaCount": {
              "type": "int",
              "defaultValue": 0,
              "metadata": {
                "description": "Optional. The number of readonly secondary replicas associated with the database."
              }
            },
            "isLedgerOn": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Optional. Whether or not this database is a ledger database, which means all tables in the database are ledger tables. Note: the value of this property cannot be changed after the database has been created."
              }
            },
            "licenseType": {
              "type": "string",
              "allowedValues": [
                "BasePrice",
                "LicenseIncluded"
              ],
              "nullable": true,
              "metadata": {
                "description": "Optional. The license type to apply for this database."
              }
            },
            "longTermRetentionBackupResourceId": {
              "type": "string",
              "nullable": true,
              "metadata": {
                "description": "Optional. The resource identifier of the long term retention backup associated with create operation of this database."
              }
            },
            "maintenanceConfigurationId": {
              "type": "string",
              "nullable": true,
              "metadata": {
                "description": "Optional. Maintenance configuration ID assigned to the database. This configuration defines the period when the maintenance updates will occur."
              }
            },
            "manualCutover": {
              "type": "bool",
              "nullable": true,
              "metadata": {
                "description": "Optional. Whether or not customer controlled manual cutover needs to be done during Update Database operation to Hyperscale tier."
              }
            },
            "maxSizeBytes": {
              "type": "int",
              "defaultValue": 34359738368,
              "metadata": {
                "description": "Optional. The max size of the database expressed in bytes."
              }
            },
            "minCapacity": {
              "type": "string",
              "defaultValue": "0",
              "metadata": {
                "description": "Optional. Minimal capacity that database will always have allocated."
              }
            },
            "performCutover": {
              "type": "bool",
              "nullable": true,
              "metadata": {
                "description": "Optional. To trigger customer controlled manual cutover during the wait state while Scaling operation is in progress."
              }
            },
            "preferredEnclaveType": {
              "type": "string",
              "allowedValues": [
                "Default",
                "VBS"
              ],
              "nullable": true,
              "metadata": {
                "description": "Optional. Type of enclave requested on the database i.e. Default or VBS enclaves."
              }
            },
            "readScale": {
              "type": "string",
              "allowedValues": [
                "Disabled",
                "Enabled"
              ],
              "defaultValue": "Disabled",
              "metadata": {
                "description": "Optional. The state of read-only routing."
              }
            },
            "recoverableDatabaseResourceId": {
              "type": "string",
              "nullable": true,
              "metadata": {
                "description": "Optional. The resource identifier of the recoverable database associated with create operation of this database."
              }
            },
            "recoveryServicesRecoveryPointResourceId": {
              "type": "string",
              "nullable": true,
              "metadata": {
                "description": "Optional. The resource identifier of the recovery point associated with create operation of this database."
              }
            },
            "requestedBackupStorageRedundancy": {
              "type": "string",
              "allowedValues": [
                "Geo",
                "GeoZone",
                "Local",
                "Zone"
              ],
              "defaultValue": "Local",
              "metadata": {
                "description": "Optional. The storage account type to be used to store backups for this database."
              }
            },
            "restorableDroppedDatabaseResourceId": {
              "type": "string",
              "nullable": true,
              "metadata": {
                "description": "Optional. The resource identifier of the restorable dropped database associated with create operation of this database."
              }
            },
            "restorePointInTime": {
              "type": "string",
              "nullable": true,
              "metadata": {
                "description": "Optional. Point in time (ISO8601 format) of the source database to restore when createMode set to Restore or PointInTimeRestore."
              }
            },
            "sampleName": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. The name of the sample schema to apply when creating this database."
              }
            },
            "secondaryType": {
              "type": "string",
              "allowedValues": [
                "Geo",
                "Named",
                "Standby"
              ],
              "nullable": true,
              "metadata": {
                "description": "Optional. The secondary type of the database if it is a secondary."
              }
            },
            "sourceDatabaseDeletionDate": {
              "type": "string",
              "nullable": true,
              "metadata": {
                "description": "Optional. The time that the database was deleted when restoring a deleted database."
              }
            },
            "sourceDatabaseResourceId": {
              "type": "string",
              "nullable": true,
              "metadata": {
                "description": "Optional. The resource identifier of the source database associated with create operation of this database."
              }
            },
            "sourceResourceId": {
              "type": "string",
              "nullable": true,
              "metadata": {
                "description": "Optional. The resource identifier of the source associated with the create operation of this database."
              }
            },
            "useFreeLimit": {
              "type": "bool",
              "nullable": true,
              "metadata": {
                "description": "Optional. Whether or not the database uses free monthly limits. Allowed on one database in a subscription."
              }
            },
            "zoneRedundant": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Optional. Whether or not this database is zone redundant."
              }
            },
            "tags": {
              "type": "object",
              "nullable": true,
              "metadata": {
                "description": "Optional. Tags of the resource."
              }
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]",
              "metadata": {
                "description": "Optional. Location for all resources."
              }
            },
            "lock": {
              "$ref": "#/definitions/lockType",
              "nullable": true,
              "metadata": {
                "description": "Optional. The lock settings of the databse."
              }
            },
            "diagnosticSettings": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/diagnosticSettingFullType"
              },
              "nullable": true,
              "metadata": {
                "description": "Optional. The diagnostic settings of the service."
              }
            },
            "backupShortTermRetentionPolicy": {
              "$ref": "#/definitions/shortTermBackupRetentionPolicyType",
              "nullable": true,
              "metadata": {
                "description": "Optional. The short term backup retention policy to create for the database."
              }
            },
            "backupLongTermRetentionPolicy": {
              "$ref": "#/definitions/longTermBackupRetentionPolicyType",
              "nullable": true,
              "metadata": {
                "description": "Optional. The long term backup retention policy to create for the database."
              }
            },
            "managedIdentities": {
              "$ref": "#/definitions/managedIdentityOnlyUserAssignedType",
              "nullable": true,
              "metadata": {
                "description": "Optional. The managed identity definition for this resource."
              }
            },
            "customerManagedKey": {
              "$ref": "#/definitions/customerManagedKeyWithAutoRotateType",
              "nullable": true,
              "metadata": {
                "description": "Optional. The customer managed key definition for database TDE."
              }
            }
          },
          "variables": {
            "formattedUserAssignedIdentities": "[reduce(map(coalesce(tryGet(parameters('managedIdentities'), 'userAssignedResourceIds'), createArray()), lambda('id', createObject(format('{0}', lambdaVariables('id')), createObject()))), createObject(), lambda('cur', 'next', union(lambdaVariables('cur'), lambdaVariables('next'))))]",
            "identity": "[if(not(empty(parameters('managedIdentities'))), createObject('type', if(not(empty(coalesce(tryGet(parameters('managedIdentities'), 'userAssignedResourceIds'), createObject()))), 'UserAssigned', null()), 'userAssignedIdentities', if(not(empty(variables('formattedUserAssignedIdentities'))), variables('formattedUserAssignedIdentities'), null())), null())]"
          },
          "resources": {
            "cMKKeyVault::cMKKey": {
              "condition": "[and(not(empty(tryGet(parameters('customerManagedKey'), 'keyVaultResourceId'))), and(not(empty(tryGet(parameters('customerManagedKey'), 'keyVaultResourceId'))), not(empty(tryGet(parameters('customerManagedKey'), 'keyName')))))]",
              "existing": true,
              "type": "Microsoft.KeyVault/vaults/keys",
              "apiVersion": "2023-07-01",
              "subscriptionId": "[split(tryGet(parameters('customerManagedKey'), 'keyVaultResourceId'), '/')[2]]",
              "resourceGroup": "[split(tryGet(parameters('customerManagedKey'), 'keyVaultResourceId'), '/')[4]]",
              "name": "[format('{0}/{1}', last(split(tryGet(parameters('customerManagedKey'), 'keyVaultResourceId'), '/')), tryGet(parameters('customerManagedKey'), 'keyName'))]"
            },
            "server": {
              "existing": true,
              "type": "Microsoft.Sql/servers",
              "apiVersion": "2023-08-01",
              "name": "[parameters('serverName')]"
            },
            "cMKKeyVault": {
              "condition": "[not(empty(tryGet(parameters('customerManagedKey'), 'keyVaultResourceId')))]",
              "existing": true,
              "type": "Microsoft.KeyVault/vaults",
              "apiVersion": "2023-07-01",
              "subscriptionId": "[split(tryGet(parameters('customerManagedKey'), 'keyVaultResourceId'), '/')[2]]",
              "resourceGroup": "[split(tryGet(parameters('customerManagedKey'), 'keyVaultResourceId'), '/')[4]]",
              "name": "[last(split(tryGet(parameters('customerManagedKey'), 'keyVaultResourceId'), '/'))]"
            },
            "database": {
              "type": "Microsoft.Sql/servers/databases",
              "apiVersion": "2023-08-01",
              "name": "[format('{0}/{1}', parameters('serverName'), parameters('name'))]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "sku": "[parameters('sku')]",
              "identity": "[variables('identity')]",
              "properties": {
                "autoPauseDelay": "[parameters('autoPauseDelay')]",
                "availabilityZone": "[if(not(equals(parameters('availabilityZone'), -1)), string(parameters('availabilityZone')), 'NoPreference')]",
                "catalogCollation": "[parameters('catalogCollation')]",
                "collation": "[parameters('collation')]",
                "createMode": "[parameters('createMode')]",
                "elasticPoolId": "[parameters('elasticPoolResourceId')]",
                "encryptionProtector": "[if(not(equals(parameters('customerManagedKey'), null())), if(not(empty(tryGet(parameters('customerManagedKey'), 'keyVersion'))), format('{0}/{1}', reference('cMKKeyVault::cMKKey').keyUri, tryGet(parameters('customerManagedKey'), 'keyVersion')), reference('cMKKeyVault::cMKKey').keyUriWithVersion), null())]",
                "encryptionProtectorAutoRotation": "[tryGet(parameters('customerManagedKey'), 'autoRotationEnabled')]",
                "federatedClientId": "[parameters('federatedClientId')]",
                "freeLimitExhaustionBehavior": "[parameters('freeLimitExhaustionBehavior')]",
                "highAvailabilityReplicaCount": "[parameters('highAvailabilityReplicaCount')]",
                "isLedgerOn": "[parameters('isLedgerOn')]",
                "licenseType": "[parameters('licenseType')]",
                "longTermRetentionBackupResourceId": "[parameters('longTermRetentionBackupResourceId')]",
                "maintenanceConfigurationId": "[parameters('maintenanceConfigurationId')]",
                "manualCutover": "[parameters('manualCutover')]",
                "maxSizeBytes": "[parameters('maxSizeBytes')]",
                "minCapacity": "[if(not(empty(parameters('minCapacity'))), json(parameters('minCapacity')), 0)]",
                "performCutover": "[parameters('performCutover')]",
                "preferredEnclaveType": "[parameters('preferredEnclaveType')]",
                "readScale": "[parameters('readScale')]",
                "recoverableDatabaseId": "[parameters('recoverableDatabaseResourceId')]",
                "recoveryServicesRecoveryPointId": "[parameters('recoveryServicesRecoveryPointResourceId')]",
                "requestedBackupStorageRedundancy": "[parameters('requestedBackupStorageRedundancy')]",
                "restorableDroppedDatabaseId": "[parameters('restorableDroppedDatabaseResourceId')]",
                "restorePointInTime": "[parameters('restorePointInTime')]",
                "sampleName": "[parameters('sampleName')]",
                "secondaryType": "[parameters('secondaryType')]",
                "sourceDatabaseDeletionDate": "[parameters('sourceDatabaseDeletionDate')]",
                "sourceDatabaseId": "[parameters('sourceDatabaseResourceId')]",
                "sourceResourceId": "[parameters('sourceResourceId')]",
                "useFreeLimit": "[parameters('useFreeLimit')]",
                "zoneRedundant": "[parameters('zoneRedundant')]"
              },
              "dependsOn": [
                "cMKKeyVault::cMKKey"
              ]
            },
            "database_diagnosticSettings": {
              "copy": {
                "name": "database_diagnosticSettings",
                "count": "[length(coalesce(parameters('diagnosticSettings'), createArray()))]"
              },
              "type": "Microsoft.Insights/diagnosticSettings",
              "apiVersion": "2021-05-01-preview",
              "scope": "[format('Microsoft.Sql/servers/{0}/databases/{1}', parameters('serverName'), parameters('name'))]",
              "name": "[coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'name'), format('{0}-diagnosticSettings', replace(parameters('name'), ' ', '_')))]",
              "properties": {
                "copy": [
                  {
                    "name": "metrics",
                    "count": "[length(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics'))))]",
                    "input": {
                      "category": "[coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics')))[copyIndex('metrics')].category]",
                      "enabled": "[coalesce(tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics')))[copyIndex('metrics')], 'enabled'), true())]",
                      "timeGrain": null
                    }
                  },
                  {
                    "name": "logs",
                    "count": "[length(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs'))))]",
                    "input": {
                      "categoryGroup": "[tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'categoryGroup')]",
                      "category": "[tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'category')]",
                      "enabled": "[coalesce(tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'enabled'), true())]"
                    }
                  }
                ],
                "storageAccountId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'storageAccountResourceId')]",
                "workspaceId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'workspaceResourceId')]",
                "eventHubAuthorizationRuleId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'eventHubAuthorizationRuleResourceId')]",
                "eventHubName": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'eventHubName')]",
                "marketplacePartnerId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'marketplacePartnerResourceId')]",
                "logAnalyticsDestinationType": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logAnalyticsDestinationType')]"
              },
              "dependsOn": [
                "database"
              ]
            },
            "database_lock": {
              "condition": "[and(not(empty(coalesce(parameters('lock'), createObject()))), not(equals(tryGet(parameters('lock'), 'kind'), 'None')))]",
              "type": "Microsoft.Authorization/locks",
              "apiVersion": "2020-05-01",
              "scope": "[format('Microsoft.Sql/servers/{0}/databases/{1}', parameters('serverName'), parameters('name'))]",
              "name": "[coalesce(tryGet(parameters('lock'), 'name'), format('lock-{0}', parameters('name')))]",
              "properties": {
                "level": "[coalesce(tryGet(parameters('lock'), 'kind'), '')]",
                "notes": "[if(equals(tryGet(parameters('lock'), 'kind'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot delete or modify the resource or child resources.')]"
              },
              "dependsOn": [
                "database"
              ]
            },
            "database_backupShortTermRetentionPolicy": {
              "condition": "[not(empty(parameters('backupShortTermRetentionPolicy')))]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('{0}-shBakRetPol', uniqueString(deployment().name, parameters('location')))]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "serverName": {
                    "value": "[parameters('serverName')]"
                  },
                  "databaseName": {
                    "value": "[parameters('name')]"
                  },
                  "diffBackupIntervalInHours": {
                    "value": "[tryGet(parameters('backupShortTermRetentionPolicy'), 'diffBackupIntervalInHours')]"
                  },
                  "retentionDays": {
                    "value": "[tryGet(parameters('backupShortTermRetentionPolicy'), 'retentionDays')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.36.1.42791",
                      "templateHash": "9948442514033354219"
                    },
                    "name": "Azure SQL Server Database Short Term Backup Retention Policies",
                    "description": "This module deploys an Azure SQL Server Database Short-Term Backup Retention Policy."
                  },
                  "parameters": {
                    "serverName": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The name of the parent SQL Server."
                      }
                    },
                    "databaseName": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The name of the parent database."
                      }
                    },
                    "diffBackupIntervalInHours": {
                      "type": "int",
                      "defaultValue": 24,
                      "metadata": {
                        "description": "Optional. Differential backup interval in hours. For Hyperscal tiers this value will be ignored."
                      }
                    },
                    "retentionDays": {
                      "type": "int",
                      "defaultValue": 7,
                      "metadata": {
                        "description": "Optional. Poin-in-time retention in days."
                      }
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Sql/servers/databases/backupShortTermRetentionPolicies",
                      "apiVersion": "2023-08-01",
                      "name": "[format('{0}/{1}/{2}', parameters('serverName'), parameters('databaseName'), 'default')]",
                      "properties": {
                        "diffBackupIntervalInHours": "[if(equals(reference(resourceId('Microsoft.Sql/servers/databases', parameters('serverName'), parameters('databaseName')), '2023-08-01', 'full').sku.tier, 'Hyperscale'), null(), parameters('diffBackupIntervalInHours'))]",
                        "retentionDays": "[parameters('retentionDays')]"
                      }
                    }
                  ],
                  "outputs": {
                    "resourceGroupName": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource group the short-term policy was deployed into."
                      },
                      "value": "[resourceGroup().name]"
                    },
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the short-term policy."
                      },
                      "value": "default"
                    },
                    "resourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the short-term policy."
                      },
                      "value": "[resourceId('Microsoft.Sql/servers/databases/backupShortTermRetentionPolicies', parameters('serverName'), parameters('databaseName'), 'default')]"
                    }
                  }
                }
              },
              "dependsOn": [
                "database"
              ]
            },
            "database_backupLongTermRetentionPolicy": {
              "condition": "[not(empty(parameters('backupLongTermRetentionPolicy')))]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('{0}-lgBakRetPol', uniqueString(deployment().name, parameters('location')))]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "serverName": {
                    "value": "[parameters('serverName')]"
                  },
                  "databaseName": {
                    "value": "[parameters('name')]"
                  },
                  "weeklyRetention": {
                    "value": "[tryGet(parameters('backupLongTermRetentionPolicy'), 'weeklyRetention')]"
                  },
                  "monthlyRetention": {
                    "value": "[tryGet(parameters('backupLongTermRetentionPolicy'), 'monthlyRetention')]"
                  },
                  "yearlyRetention": {
                    "value": "[tryGet(parameters('backupLongTermRetentionPolicy'), 'yearlyRetention')]"
                  },
                  "weekOfYear": {
                    "value": "[tryGet(parameters('backupLongTermRetentionPolicy'), 'weekOfYear')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "languageVersion": "2.0",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.36.1.42791",
                      "templateHash": "10140872033464442933"
                    },
                    "name": "SQL Server Database Long Term Backup Retention Policies",
                    "description": "This module deploys an Azure SQL Server Database Long-Term Backup Retention Policy."
                  },
                  "parameters": {
                    "serverName": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The name of the parent SQL Server."
                      }
                    },
                    "databaseName": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The name of the parent database."
                      }
                    },
                    "monthlyRetention": {
                      "type": "string",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Monthly retention in ISO 8601 duration format."
                      }
                    },
                    "weeklyRetention": {
                      "type": "string",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Weekly retention in ISO 8601 duration format."
                      }
                    },
                    "weekOfYear": {
                      "type": "int",
                      "defaultValue": 1,
                      "metadata": {
                        "description": "Optional. Week of year backup to keep for yearly retention."
                      }
                    },
                    "yearlyRetention": {
                      "type": "string",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Yearly retention in ISO 8601 duration format."
                      }
                    }
                  },
                  "resources": {
                    "server::database": {
                      "existing": true,
                      "type": "Microsoft.Sql/servers/databases",
                      "apiVersion": "2023-08-01",
                      "name": "[format('{0}/{1}', parameters('serverName'), parameters('databaseName'))]"
                    },
                    "server": {
                      "existing": true,
                      "type": "Microsoft.Sql/servers",
                      "apiVersion": "2023-08-01",
                      "name": "[parameters('serverName')]"
                    },
                    "backupLongTermRetentionPolicy": {
                      "type": "Microsoft.Sql/servers/databases/backupLongTermRetentionPolicies",
                      "apiVersion": "2023-08-01",
                      "name": "[format('{0}/{1}/{2}', parameters('serverName'), parameters('databaseName'), 'default')]",
                      "properties": {
                        "monthlyRetention": "[parameters('monthlyRetention')]",
                        "weeklyRetention": "[parameters('weeklyRetention')]",
                        "weekOfYear": "[parameters('weekOfYear')]",
                        "yearlyRetention": "[parameters('yearlyRetention')]"
                      }
                    }
                  },
                  "outputs": {
                    "resourceGroupName": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource group the long-term policy was deployed into."
                      },
                      "value": "[resourceGroup().name]"
                    },
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the long-term policy."
                      },
                      "value": "default"
                    },
                    "resourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the long-term policy."
                      },
                      "value": "[resourceId('Microsoft.Sql/servers/databases/backupLongTermRetentionPolicies', parameters('serverName'), parameters('databaseName'), 'default')]"
                    }
                  }
                }
              },
              "dependsOn": [
                "database"
              ]
            }
          },
          "outputs": {
            "name": {
              "type": "string",
              "metadata": {
                "description": "The name of the deployed database."
              },
              "value": "[parameters('name')]"
            },
            "resourceId": {
              "type": "string",
              "metadata": {
                "description": "The resource ID of the deployed database."
              },
              "value": "[resourceId('Microsoft.Sql/servers/databases', parameters('serverName'), parameters('name'))]"
            },
            "resourceGroupName": {
              "type": "string",
              "metadata": {
                "description": "The resource group of the deployed database."
              },
              "value": "[resourceGroup().name]"
            },
            "location": {
              "type": "string",
              "metadata": {
                "description": "The location the resource was deployed into."
              },
              "value": "[reference('database', '2023-08-01', 'full').location]"
            }
          }
        }
      },
      "dependsOn": [
        "server",
        "server_elasticPools"
      ]
    },
    "server_elasticPools": {
      "copy": {
        "name": "server_elasticPools",
        "count": "[length(coalesce(parameters('elasticPools'), createArray()))]"
      },
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('{0}-SQLServer-ElasticPool-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "serverName": {
            "value": "[parameters('name')]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "tags": {
            "value": "[coalesce(tryGet(coalesce(parameters('elasticPools'), createArray())[copyIndex()], 'tags'), parameters('tags'))]"
          },
          "name": {
            "value": "[coalesce(parameters('elasticPools'), createArray())[copyIndex()].name]"
          },
          "sku": {
            "value": "[tryGet(coalesce(parameters('elasticPools'), createArray())[copyIndex()], 'sku')]"
          },
          "autoPauseDelay": {
            "value": "[tryGet(coalesce(parameters('elasticPools'), createArray())[copyIndex()], 'autoPauseDelay')]"
          },
          "availabilityZone": {
            "value": "[tryGet(coalesce(parameters('elasticPools'), createArray())[copyIndex()], 'availabilityZone')]"
          },
          "highAvailabilityReplicaCount": {
            "value": "[tryGet(coalesce(parameters('elasticPools'), createArray())[copyIndex()], 'highAvailabilityReplicaCount')]"
          },
          "licenseType": {
            "value": "[tryGet(coalesce(parameters('elasticPools'), createArray())[copyIndex()], 'licenseType')]"
          },
          "lock": {
            "value": "[tryGet(coalesce(parameters('elasticPools'), createArray())[copyIndex()], 'lock')]"
          },
          "maintenanceConfigurationId": {
            "value": "[tryGet(coalesce(parameters('elasticPools'), createArray())[copyIndex()], 'maintenanceConfigurationId')]"
          },
          "maxSizeBytes": {
            "value": "[tryGet(coalesce(parameters('elasticPools'), createArray())[copyIndex()], 'maxSizeBytes')]"
          },
          "minCapacity": {
            "value": "[tryGet(coalesce(parameters('elasticPools'), createArray())[copyIndex()], 'minCapacity')]"
          },
          "perDatabaseSettings": {
            "value": "[tryGet(coalesce(parameters('elasticPools'), createArray())[copyIndex()], 'perDatabaseSettings')]"
          },
          "preferredEnclaveType": {
            "value": "[tryGet(coalesce(parameters('elasticPools'), createArray())[copyIndex()], 'preferredEnclaveType')]"
          },
          "zoneRedundant": {
            "value": "[tryGet(coalesce(parameters('elasticPools'), createArray())[copyIndex()], 'zoneRedundant')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "languageVersion": "2.0",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.36.1.42791",
              "templateHash": "13597336529535443631"
            },
            "name": "SQL Server Elastic Pool",
            "description": "This module deploys an Azure SQL Server Elastic Pool."
          },
          "definitions": {
            "perDatabaseSettingsType": {
              "type": "object",
              "properties": {
                "autoPauseDelay": {
                  "type": "int",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Auto Pause Delay for per database within pool."
                  }
                },
                "maxCapacity": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. The maximum capacity any one database can consume. Examples: '0.5', '2'."
                  }
                },
                "minCapacity": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. The minimum capacity all databases are guaranteed. Examples: '0.5', '1'."
                  }
                }
              },
              "metadata": {
                "__bicep_export!": true,
                "description": "The per database settings for the elastic pool."
              }
            },
            "skuType": {
              "type": "object",
              "properties": {
                "capacity": {
                  "type": "int",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The capacity of the particular SKU."
                  }
                },
                "family": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. If the service has different generations of hardware, for the same SKU, then that can be captured here."
                  }
                },
                "name": {
                  "type": "string",
                  "allowedValues": [
                    "BC_DC",
                    "BC_Gen5",
                    "BasicPool",
                    "GP_DC",
                    "GP_FSv2",
                    "GP_Gen5",
                    "HS_Gen5",
                    "HS_MOPRMS",
                    "HS_PRMS",
                    "PremiumPool",
                    "ServerlessPool",
                    "StandardPool"
                  ],
                  "metadata": {
                    "description": "Required. The name of the SKU, typically, a letter + Number code, e.g. P3."
                  }
                },
                "size": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Size of the particular SKU."
                  }
                },
                "tier": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The tier or edition of the particular SKU, e.g. Basic, Premium."
                  }
                }
              },
              "metadata": {
                "__bicep_export!": true,
                "description": "The elastic pool SKU."
              }
            },
            "lockType": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Specify the name of lock."
                  }
                },
                "kind": {
                  "type": "string",
                  "allowedValues": [
                    "CanNotDelete",
                    "None",
                    "ReadOnly"
                  ],
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Specify the type of lock."
                  }
                }
              },
              "metadata": {
                "description": "An AVM-aligned type for a lock.",
                "__bicep_imported_from!": {
                  "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.5.1"
                }
              }
            },
            "roleAssignmentType": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The name (as GUID) of the role assignment. If not provided, a GUID will be generated."
                  }
                },
                "roleDefinitionIdOrName": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                  }
                },
                "principalId": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                  }
                },
                "principalType": {
                  "type": "string",
                  "allowedValues": [
                    "Device",
                    "ForeignGroup",
                    "Group",
                    "ServicePrincipal",
                    "User"
                  ],
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The principal type of the assigned principal ID."
                  }
                },
                "description": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The description of the role assignment."
                  }
                },
                "condition": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                  }
                },
                "conditionVersion": {
                  "type": "string",
                  "allowedValues": [
                    "2.0"
                  ],
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Version of the condition."
                  }
                },
                "delegatedManagedIdentityResourceId": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The Resource Id of the delegated managed identity resource."
                  }
                }
              },
              "metadata": {
                "description": "An AVM-aligned type for a role assignment.",
                "__bicep_imported_from!": {
                  "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.5.1"
                }
              }
            }
          },
          "parameters": {
            "name": {
              "type": "string",
              "metadata": {
                "description": "Required. The name of the Elastic Pool."
              }
            },
            "serverName": {
              "type": "string",
              "metadata": {
                "description": "Conditional. The name of the parent SQL Server. Required if the template is used in a standalone deployment."
              }
            },
            "tags": {
              "type": "object",
              "nullable": true,
              "metadata": {
                "description": "Optional. Tags of the resource."
              }
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]",
              "metadata": {
                "description": "Optional. Location for all resources."
              }
            },
            "lock": {
              "$ref": "#/definitions/lockType",
              "nullable": true,
              "metadata": {
                "description": "Optional. The lock settings of the elastic pool."
              }
            },
            "sku": {
              "$ref": "#/definitions/skuType",
              "defaultValue": {
                "capacity": 2,
                "name": "GP_Gen5",
                "tier": "GeneralPurpose"
              },
              "metadata": {
                "description": "Optional. The elastic pool SKU."
              }
            },
            "autoPauseDelay": {
              "type": "int",
              "defaultValue": -1,
              "metadata": {
                "description": "Optional. Time in minutes after which elastic pool is automatically paused. A value of -1 means that automatic pause is disabled."
              }
            },
            "availabilityZone": {
              "type": "int",
              "allowedValues": [
                -1,
                1,
                2,
                3
              ],
              "metadata": {
                "description": "Required. If set to 1, 2 or 3, the availability zone is hardcoded to that value. If set to -1, no zone is defined. Note that the availability zone numbers here are the logical availability zone in your Azure subscription. Different subscriptions might have a different mapping of the physical zone and logical zone. To understand more, please refer to [Physical and logical availability zones](https://learn.microsoft.com/en-us/azure/reliability/availability-zones-overview?tabs=azure-cli#physical-and-logical-availability-zones)."
              }
            },
            "highAvailabilityReplicaCount": {
              "type": "int",
              "nullable": true,
              "metadata": {
                "description": "Optional. The number of secondary replicas associated with the elastic pool that are used to provide high availability. Applicable only to Hyperscale elastic pools."
              }
            },
            "licenseType": {
              "type": "string",
              "defaultValue": "LicenseIncluded",
              "allowedValues": [
                "BasePrice",
                "LicenseIncluded"
              ],
              "metadata": {
                "description": "Optional. The license type to apply for this elastic pool."
              }
            },
            "maintenanceConfigurationId": {
              "type": "string",
              "nullable": true,
              "metadata": {
                "description": "Optional. Maintenance configuration resource ID assigned to the elastic pool. This configuration defines the period when the maintenance updates will will occur."
              }
            },
            "maxSizeBytes": {
              "type": "int",
              "defaultValue": 34359738368,
              "metadata": {
                "description": "Optional. The storage limit for the database elastic pool in bytes."
              }
            },
            "minCapacity": {
              "type": "int",
              "nullable": true,
              "metadata": {
                "description": "Optional. Minimal capacity that serverless pool will not shrink below, if not paused."
              }
            },
            "perDatabaseSettings": {
              "$ref": "#/definitions/perDatabaseSettingsType",
              "defaultValue": {
                "autoPauseDelay": -1,
                "maxCapacity": "2",
                "minCapacity": "0"
              },
              "metadata": {
                "description": "Optional. The per database settings for the elastic pool."
              }
            },
            "preferredEnclaveType": {
              "type": "string",
              "allowedValues": [
                "Default",
                "VBS"
              ],
              "defaultValue": "Default",
              "metadata": {
                "description": "Optional. Type of enclave requested on the elastic pool."
              }
            },
            "zoneRedundant": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Optional. Whether or not this elastic pool is zone redundant, which means the replicas of this elastic pool will be spread across multiple availability zones."
              }
            },
            "roleAssignments": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/roleAssignmentType"
              },
              "nullable": true,
              "metadata": {
                "description": "Optional. Array of role assignments to create."
              }
            }
          },
          "variables": {
            "copy": [
              {
                "name": "formattedRoleAssignments",
                "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]",
                "input": "[union(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')], createObject('roleDefinitionId', coalesce(tryGet(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName), if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName)))))]"
              }
            ],
            "builtInRoleNames": {
              "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
              "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
              "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
              "Log Analytics Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '92aaf0da-9dab-42b6-94a3-d43ce8d16293')]",
              "Log Analytics Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '73c42c96-874c-492b-b04d-ab87d138a893')]",
              "Monitoring Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '749f88d5-cbae-40b8-bcfc-e573ddc772fa')]",
              "Monitoring Metrics Publisher": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '3913510d-42f4-4e42-8a64-420c390055eb')]",
              "Monitoring Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '43d0d8ad-25c7-4714-9337-8ba259a9fe05')]",
              "Reservation Purchaser": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f7b75c60-3036-4b75-91c3-6b41c27c1689')]",
              "Resource Policy Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '36243c78-bf99-498c-9df9-86d9f8d28608')]",
              "SQL DB Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '9b7fa17d-e63e-47b0-bb0a-15c516ac86ec')]",
              "SQL Security Manager": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '056cd41c-7e88-42e1-933e-88ba6a50c9c3')]",
              "SQL Server Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '6d8ee4ec-f05a-4a1d-8b00-a9b17e38b437')]",
              "SqlDb Migration Role": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '189207d4-bb67-4208-a635-b06afe8b2c57')]"
            }
          },
          "resources": {
            "server": {
              "existing": true,
              "type": "Microsoft.Sql/servers",
              "apiVersion": "2023-08-01",
              "name": "[parameters('serverName')]"
            },
            "elasticPool": {
              "type": "Microsoft.Sql/servers/elasticPools",
              "apiVersion": "2023-08-01",
              "name": "[format('{0}/{1}', parameters('serverName'), parameters('name'))]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "sku": "[parameters('sku')]",
              "properties": {
                "autoPauseDelay": "[parameters('autoPauseDelay')]",
                "availabilityZone": "[if(not(equals(parameters('availabilityZone'), -1)), string(parameters('availabilityZone')), 'NoPreference')]",
                "highAvailabilityReplicaCount": "[parameters('highAvailabilityReplicaCount')]",
                "licenseType": "[parameters('licenseType')]",
                "maintenanceConfigurationId": "[parameters('maintenanceConfigurationId')]",
                "maxSizeBytes": "[parameters('maxSizeBytes')]",
                "minCapacity": "[parameters('minCapacity')]",
                "perDatabaseSettings": "[if(not(empty(parameters('perDatabaseSettings'))), createObject('autoPauseDelay', tryGet(parameters('perDatabaseSettings'), 'autoPauseDelay'), 'maxCapacity', json(tryGet(parameters('perDatabaseSettings'), 'maxCapacity')), 'minCapacity', json(tryGet(parameters('perDatabaseSettings'), 'minCapacity'))), null())]",
                "preferredEnclaveType": "[parameters('preferredEnclaveType')]",
                "zoneRedundant": "[parameters('zoneRedundant')]"
              }
            },
            "elasticPool_lock": {
              "condition": "[and(not(empty(coalesce(parameters('lock'), createObject()))), not(equals(tryGet(parameters('lock'), 'kind'), 'None')))]",
              "type": "Microsoft.Authorization/locks",
              "apiVersion": "2020-05-01",
              "scope": "[format('Microsoft.Sql/servers/{0}/elasticPools/{1}', parameters('serverName'), parameters('name'))]",
              "name": "[coalesce(tryGet(parameters('lock'), 'name'), format('lock-{0}', parameters('name')))]",
              "properties": {
                "level": "[coalesce(tryGet(parameters('lock'), 'kind'), '')]",
                "notes": "[if(equals(tryGet(parameters('lock'), 'kind'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot delete or modify the resource or child resources.')]"
              },
              "dependsOn": [
                "elasticPool"
              ]
            },
            "elasticPool_roleAssignments": {
              "copy": {
                "name": "elasticPool_roleAssignments",
                "count": "[length(coalesce(variables('formattedRoleAssignments'), createArray()))]"
              },
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.Sql/servers/{0}/elasticPools/{1}', parameters('serverName'), parameters('name'))]",
              "name": "[coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'name'), guid(resourceId('Microsoft.Sql/servers', parameters('serverName')), coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId, coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId))]",
              "properties": {
                "roleDefinitionId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId]",
                "principalId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId]",
                "description": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'description')]",
                "principalType": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'principalType')]",
                "condition": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition')]",
                "conditionVersion": "[if(not(empty(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                "delegatedManagedIdentityResourceId": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
              },
              "dependsOn": [
                "elasticPool"
              ]
            }
          },
          "outputs": {
            "name": {
              "type": "string",
              "metadata": {
                "description": "The name of the deployed Elastic Pool."
              },
              "value": "[parameters('name')]"
            },
            "resourceId": {
              "type": "string",
              "metadata": {
                "description": "The resource ID of the deployed Elastic Pool."
              },
              "value": "[resourceId('Microsoft.Sql/servers/elasticPools', parameters('serverName'), parameters('name'))]"
            },
            "resourceGroupName": {
              "type": "string",
              "metadata": {
                "description": "The resource group of the deployed Elastic Pool."
              },
              "value": "[resourceGroup().name]"
            },
            "location": {
              "type": "string",
              "metadata": {
                "description": "The location the resource was deployed into."
              },
              "value": "[reference('elasticPool', '2023-08-01', 'full').location]"
            }
          }
        }
      },
      "dependsOn": [
        "server"
      ]
    },
    "server_privateEndpoints": {
      "copy": {
        "name": "server_privateEndpoints",
        "count": "[length(coalesce(parameters('privateEndpoints'), createArray()))]"
      },
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('{0}-server-PrivateEndpoint-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
      "subscriptionId": "[split(coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'resourceGroupResourceId'), resourceGroup().id), '/')[2]]",
      "resourceGroup": "[split(coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'resourceGroupResourceId'), resourceGroup().id), '/')[4]]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "name": {
            "value": "[coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'name'), format('pep-{0}-{1}-{2}', last(split(resourceId('Microsoft.Sql/servers', parameters('name')), '/')), coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'service'), 'sqlServer'), copyIndex()))]"
          },
          "privateLinkServiceConnections": "[if(not(equals(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'isManualConnection'), true())), createObject('value', createArray(createObject('name', coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'privateLinkServiceConnectionName'), format('{0}-{1}-{2}', last(split(resourceId('Microsoft.Sql/servers', parameters('name')), '/')), coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'service'), 'sqlServer'), copyIndex())), 'properties', createObject('privateLinkServiceId', resourceId('Microsoft.Sql/servers', parameters('name')), 'groupIds', createArray(coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'service'), 'sqlServer')))))), createObject('value', null()))]",
          "manualPrivateLinkServiceConnections": "[if(equals(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'isManualConnection'), true()), createObject('value', createArray(createObject('name', coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'privateLinkServiceConnectionName'), format('{0}-{1}-{2}', last(split(resourceId('Microsoft.Sql/servers', parameters('name')), '/')), coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'service'), 'sqlServer'), copyIndex())), 'properties', createObject('privateLinkServiceId', resourceId('Microsoft.Sql/servers', parameters('name')), 'groupIds', createArray(coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'service'), 'sqlServer')), 'requestMessage', coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'manualConnectionRequestMessage'), 'Manual approval required.'))))), createObject('value', null()))]",
          "subnetResourceId": {
            "value": "[coalesce(parameters('privateEndpoints'), createArray())[copyIndex()].subnetResourceId]"
          },
          "enableTelemetry": {
            "value": "[variables('enableReferencedModulesTelemetry')]"
          },
          "location": {
            "value": "[coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'location'), reference(split(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()].subnetResourceId, '/subnets/')[0], '2020-06-01', 'Full').location)]"
          },
          "lock": {
            "value": "[coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'lock'), parameters('lock'))]"
          },
          "privateDnsZoneGroup": {
            "value": "[tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'privateDnsZoneGroup')]"
          },
          "roleAssignments": {
            "value": "[tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'roleAssignments')]"
          },
          "tags": {
            "value": "[coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'tags'), parameters('tags'))]"
          },
          "customDnsConfigs": {
            "value": "[tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'customDnsConfigs')]"
          },
          "ipConfigurations": {
            "value": "[tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'ipConfigurations')]"
          },
          "applicationSecurityGroupResourceIds": {
            "value": "[tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'applicationSecurityGroupResourceIds')]"
          },
          "customNetworkInterfaceName": {
            "value": "[tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'customNetworkInterfaceName')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "languageVersion": "2.0",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.34.44.8038",
              "templateHash": "12389807800450456797"
            },
            "name": "Private Endpoints",
            "description": "This module deploys a Private Endpoint."
          },
          "definitions": {
            "privateDnsZoneGroupType": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The name of the Private DNS Zone Group."
                  }
                },
                "privateDnsZoneGroupConfigs": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/privateDnsZoneGroupConfigType"
                  },
                  "metadata": {
                    "description": "Required. The private DNS zone groups to associate the private endpoint. A DNS zone group can support up to 5 DNS zones."
                  }
                }
              },
              "metadata": {
                "__bicep_export!": true
              }
            },
            "ipConfigurationType": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. The name of the resource that is unique within a resource group."
                  }
                },
                "properties": {
                  "type": "object",
                  "properties": {
                    "groupId": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The ID of a group obtained from the remote resource that this private endpoint should connect to. If used with private link service connection, this property must be defined as empty string."
                      }
                    },
                    "memberName": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The member name of a group obtained from the remote resource that this private endpoint should connect to. If used with private link service connection, this property must be defined as empty string."
                      }
                    },
                    "privateIPAddress": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. A private IP address obtained from the private endpoint's subnet."
                      }
                    }
                  },
                  "metadata": {
                    "description": "Required. Properties of private endpoint IP configurations."
                  }
                }
              },
              "metadata": {
                "__bicep_export!": true
              }
            },
            "privateLinkServiceConnectionType": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. The name of the private link service connection."
                  }
                },
                "properties": {
                  "type": "object",
                  "properties": {
                    "groupIds": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "metadata": {
                        "description": "Required. The ID of a group obtained from the remote resource that this private endpoint should connect to. If used with private link service connection, this property must be defined as empty string array `[]`."
                      }
                    },
                    "privateLinkServiceId": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The resource id of private link service."
                      }
                    },
                    "requestMessage": {
                      "type": "string",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. A message passed to the owner of the remote resource with this connection request. Restricted to 140 chars."
                      }
                    }
                  },
                  "metadata": {
                    "description": "Required. Properties of private link service connection."
                  }
                }
              },
              "metadata": {
                "__bicep_export!": true
              }
            },
            "customDnsConfigType": {
              "type": "object",
              "properties": {
                "fqdn": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. FQDN that resolves to private endpoint IP address."
                  }
                },
                "ipAddresses": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "metadata": {
                    "description": "Required. A list of private IP addresses of the private endpoint."
                  }
                }
              },
              "metadata": {
                "__bicep_export!": true
              }
            },
            "lockType": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Specify the name of lock."
                  }
                },
                "kind": {
                  "type": "string",
                  "allowedValues": [
                    "CanNotDelete",
                    "None",
                    "ReadOnly"
                  ],
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Specify the type of lock."
                  }
                }
              },
              "metadata": {
                "description": "An AVM-aligned type for a lock.",
                "__bicep_imported_from!": {
                  "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.5.1"
                }
              }
            },
            "privateDnsZoneGroupConfigType": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The name of the private DNS zone group config."
                  }
                },
                "privateDnsZoneResourceId": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. The resource id of the private DNS zone."
                  }
                }
              },
              "metadata": {
                "__bicep_imported_from!": {
                  "sourceTemplate": "private-dns-zone-group/main.bicep"
                }
              }
            },
            "roleAssignmentType": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The name (as GUID) of the role assignment. If not provided, a GUID will be generated."
                  }
                },
                "roleDefinitionIdOrName": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                  }
                },
                "principalId": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                  }
                },
                "principalType": {
                  "type": "string",
                  "allowedValues": [
                    "Device",
                    "ForeignGroup",
                    "Group",
                    "ServicePrincipal",
                    "User"
                  ],
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The principal type of the assigned principal ID."
                  }
                },
                "description": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The description of the role assignment."
                  }
                },
                "condition": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                  }
                },
                "conditionVersion": {
                  "type": "string",
                  "allowedValues": [
                    "2.0"
                  ],
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Version of the condition."
                  }
                },
                "delegatedManagedIdentityResourceId": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The Resource Id of the delegated managed identity resource."
                  }
                }
              },
              "metadata": {
                "description": "An AVM-aligned type for a role assignment.",
                "__bicep_imported_from!": {
                  "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.5.1"
                }
              }
            }
          },
          "parameters": {
            "name": {
              "type": "string",
              "metadata": {
                "description": "Required. Name of the private endpoint resource to create."
              }
            },
            "subnetResourceId": {
              "type": "string",
              "metadata": {
                "description": "Required. Resource ID of the subnet where the endpoint needs to be created."
              }
            },
            "applicationSecurityGroupResourceIds": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "nullable": true,
              "metadata": {
                "description": "Optional. Application security groups in which the private endpoint IP configuration is included."
              }
            },
            "customNetworkInterfaceName": {
              "type": "string",
              "nullable": true,
              "metadata": {
                "description": "Optional. The custom name of the network interface attached to the private endpoint."
              }
            },
            "ipConfigurations": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ipConfigurationType"
              },
              "nullable": true,
              "metadata": {
                "description": "Optional. A list of IP configurations of the private endpoint. This will be used to map to the First Party Service endpoints."
              }
            },
            "privateDnsZoneGroup": {
              "$ref": "#/definitions/privateDnsZoneGroupType",
              "nullable": true,
              "metadata": {
                "description": "Optional. The private DNS zone group to configure for the private endpoint."
              }
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]",
              "metadata": {
                "description": "Optional. Location for all Resources."
              }
            },
            "lock": {
              "$ref": "#/definitions/lockType",
              "nullable": true,
              "metadata": {
                "description": "Optional. The lock settings of the service."
              }
            },
            "roleAssignments": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/roleAssignmentType"
              },
              "nullable": true,
              "metadata": {
                "description": "Optional. Array of role assignments to create."
              }
            },
            "tags": {
              "type": "object",
              "nullable": true,
              "metadata": {
                "description": "Optional. Tags to be applied on all resources/resource groups in this deployment."
              }
            },
            "customDnsConfigs": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/customDnsConfigType"
              },
              "nullable": true,
              "metadata": {
                "description": "Optional. Custom DNS configurations."
              }
            },
            "manualPrivateLinkServiceConnections": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/privateLinkServiceConnectionType"
              },
              "nullable": true,
              "metadata": {
                "description": "Conditional. A grouping of information about the connection to the remote resource. Used when the network admin does not have access to approve connections to the remote resource. Required if `privateLinkServiceConnections` is empty."
              }
            },
            "privateLinkServiceConnections": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/privateLinkServiceConnectionType"
              },
              "nullable": true,
              "metadata": {
                "description": "Conditional. A grouping of information about the connection to the remote resource. Required if `manualPrivateLinkServiceConnections` is empty."
              }
            },
            "enableTelemetry": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Optional. Enable/Disable usage telemetry for module."
              }
            }
          },
          "variables": {
            "copy": [
              {
                "name": "formattedRoleAssignments",
                "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]",
                "input": "[union(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')], createObject('roleDefinitionId', coalesce(tryGet(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName), if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName)))))]"
              }
            ],
            "builtInRoleNames": {
              "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
              "DNS Resolver Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '0f2ebee7-ffd4-4fc0-b3b7-664099fdad5d')]",
              "DNS Zone Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'befefa01-2a29-4197-83a8-272ff33ce314')]",
              "Domain Services Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'eeaeda52-9324-47f6-8069-5d5bade478b2')]",
              "Domain Services Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '361898ef-9ed1-48c2-849c-a832951106bb')]",
              "Network Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4d97b98b-1d4f-4787-a291-c67834d212e7')]",
              "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
              "Private DNS Zone Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b12aa53e-6015-4669-85d0-8515ebb3ae7f')]",
              "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
              "Role Based Access Control Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]"
            }
          },
          "resources": {
            "avmTelemetry": {
              "condition": "[parameters('enableTelemetry')]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2024-03-01",
              "name": "[format('46d3xbcp.res.network-privateendpoint.{0}.{1}', replace('0.11.0', '.', '-'), substring(uniqueString(deployment().name, parameters('location')), 0, 4))]",
              "properties": {
                "mode": "Incremental",
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "resources": [],
                  "outputs": {
                    "telemetry": {
                      "type": "String",
                      "value": "For more information, see https://aka.ms/avm/TelemetryInfo"
                    }
                  }
                }
              }
            },
            "privateEndpoint": {
              "type": "Microsoft.Network/privateEndpoints",
              "apiVersion": "2024-05-01",
              "name": "[parameters('name')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "properties": {
                "copy": [
                  {
                    "name": "applicationSecurityGroups",
                    "count": "[length(coalesce(parameters('applicationSecurityGroupResourceIds'), createArray()))]",
                    "input": {
                      "id": "[coalesce(parameters('applicationSecurityGroupResourceIds'), createArray())[copyIndex('applicationSecurityGroups')]]"
                    }
                  }
                ],
                "customDnsConfigs": "[coalesce(parameters('customDnsConfigs'), createArray())]",
                "customNetworkInterfaceName": "[coalesce(parameters('customNetworkInterfaceName'), '')]",
                "ipConfigurations": "[coalesce(parameters('ipConfigurations'), createArray())]",
                "manualPrivateLinkServiceConnections": "[coalesce(parameters('manualPrivateLinkServiceConnections'), createArray())]",
                "privateLinkServiceConnections": "[coalesce(parameters('privateLinkServiceConnections'), createArray())]",
                "subnet": {
                  "id": "[parameters('subnetResourceId')]"
                }
              }
            },
            "privateEndpoint_lock": {
              "condition": "[and(not(empty(coalesce(parameters('lock'), createObject()))), not(equals(tryGet(parameters('lock'), 'kind'), 'None')))]",
              "type": "Microsoft.Authorization/locks",
              "apiVersion": "2020-05-01",
              "scope": "[format('Microsoft.Network/privateEndpoints/{0}', parameters('name'))]",
              "name": "[coalesce(tryGet(parameters('lock'), 'name'), format('lock-{0}', parameters('name')))]",
              "properties": {
                "level": "[coalesce(tryGet(parameters('lock'), 'kind'), '')]",
                "notes": "[if(equals(tryGet(parameters('lock'), 'kind'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot delete or modify the resource or child resources.')]"
              },
              "dependsOn": [
                "privateEndpoint"
              ]
            },
            "privateEndpoint_roleAssignments": {
              "copy": {
                "name": "privateEndpoint_roleAssignments",
                "count": "[length(coalesce(variables('formattedRoleAssignments'), createArray()))]"
              },
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.Network/privateEndpoints/{0}', parameters('name'))]",
              "name": "[coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'name'), guid(resourceId('Microsoft.Network/privateEndpoints', parameters('name')), coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId, coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId))]",
              "properties": {
                "roleDefinitionId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId]",
                "principalId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId]",
                "description": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'description')]",
                "principalType": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'principalType')]",
                "condition": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition')]",
                "conditionVersion": "[if(not(empty(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                "delegatedManagedIdentityResourceId": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
              },
              "dependsOn": [
                "privateEndpoint"
              ]
            },
            "privateEndpoint_privateDnsZoneGroup": {
              "condition": "[not(empty(parameters('privateDnsZoneGroup')))]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('{0}-PrivateEndpoint-PrivateDnsZoneGroup', uniqueString(deployment().name))]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "name": {
                    "value": "[tryGet(parameters('privateDnsZoneGroup'), 'name')]"
                  },
                  "privateEndpointName": {
                    "value": "[parameters('name')]"
                  },
                  "privateDnsZoneConfigs": {
                    "value": "[parameters('privateDnsZoneGroup').privateDnsZoneGroupConfigs]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "languageVersion": "2.0",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.34.44.8038",
                      "templateHash": "13997305779829540948"
                    },
                    "name": "Private Endpoint Private DNS Zone Groups",
                    "description": "This module deploys a Private Endpoint Private DNS Zone Group."
                  },
                  "definitions": {
                    "privateDnsZoneGroupConfigType": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The name of the private DNS zone group config."
                          }
                        },
                        "privateDnsZoneResourceId": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. The resource id of the private DNS zone."
                          }
                        }
                      },
                      "metadata": {
                        "__bicep_export!": true
                      }
                    }
                  },
                  "parameters": {
                    "privateEndpointName": {
                      "type": "string",
                      "metadata": {
                        "description": "Conditional. The name of the parent private endpoint. Required if the template is used in a standalone deployment."
                      }
                    },
                    "privateDnsZoneConfigs": {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/privateDnsZoneGroupConfigType"
                      },
                      "minLength": 1,
                      "maxLength": 5,
                      "metadata": {
                        "description": "Required. Array of private DNS zone configurations of the private DNS zone group. A DNS zone group can support up to 5 DNS zones."
                      }
                    },
                    "name": {
                      "type": "string",
                      "defaultValue": "default",
                      "metadata": {
                        "description": "Optional. The name of the private DNS zone group."
                      }
                    }
                  },
                  "variables": {
                    "copy": [
                      {
                        "name": "privateDnsZoneConfigsVar",
                        "count": "[length(parameters('privateDnsZoneConfigs'))]",
                        "input": {
                          "name": "[coalesce(tryGet(parameters('privateDnsZoneConfigs')[copyIndex('privateDnsZoneConfigsVar')], 'name'), last(split(parameters('privateDnsZoneConfigs')[copyIndex('privateDnsZoneConfigsVar')].privateDnsZoneResourceId, '/')))]",
                          "properties": {
                            "privateDnsZoneId": "[parameters('privateDnsZoneConfigs')[copyIndex('privateDnsZoneConfigsVar')].privateDnsZoneResourceId]"
                          }
                        }
                      }
                    ]
                  },
                  "resources": {
                    "privateEndpoint": {
                      "existing": true,
                      "type": "Microsoft.Network/privateEndpoints",
                      "apiVersion": "2024-05-01",
                      "name": "[parameters('privateEndpointName')]"
                    },
                    "privateDnsZoneGroup": {
                      "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
                      "apiVersion": "2024-05-01",
                      "name": "[format('{0}/{1}', parameters('privateEndpointName'), parameters('name'))]",
                      "properties": {
                        "privateDnsZoneConfigs": "[variables('privateDnsZoneConfigsVar')]"
                      }
                    }
                  },
                  "outputs": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the private endpoint DNS zone group."
                      },
                      "value": "[parameters('name')]"
                    },
                    "resourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the private endpoint DNS zone group."
                      },
                      "value": "[resourceId('Microsoft.Network/privateEndpoints/privateDnsZoneGroups', parameters('privateEndpointName'), parameters('name'))]"
                    },
                    "resourceGroupName": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource group the private endpoint DNS zone group was deployed into."
                      },
                      "value": "[resourceGroup().name]"
                    }
                  }
                }
              },
              "dependsOn": [
                "privateEndpoint"
              ]
            }
          },
          "outputs": {
            "resourceGroupName": {
              "type": "string",
              "metadata": {
                "description": "The resource group the private endpoint was deployed into."
              },
              "value": "[resourceGroup().name]"
            },
            "resourceId": {
              "type": "string",
              "metadata": {
                "description": "The resource ID of the private endpoint."
              },
              "value": "[resourceId('Microsoft.Network/privateEndpoints', parameters('name'))]"
            },
            "name": {
              "type": "string",
              "metadata": {
                "description": "The name of the private endpoint."
              },
              "value": "[parameters('name')]"
            },
            "location": {
              "type": "string",
              "metadata": {
                "description": "The location the resource was deployed into."
              },
              "value": "[reference('privateEndpoint', '2024-05-01', 'full').location]"
            },
            "customDnsConfigs": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/customDnsConfigType"
              },
              "metadata": {
                "description": "The custom DNS configurations of the private endpoint."
              },
              "value": "[reference('privateEndpoint').customDnsConfigs]"
            },
            "networkInterfaceResourceIds": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "metadata": {
                "description": "The resource IDs of the network interfaces associated with the private endpoint."
              },
              "value": "[map(reference('privateEndpoint').networkInterfaces, lambda('nic', lambdaVariables('nic').id))]"
            },
            "groupId": {
              "type": "string",
              "nullable": true,
              "metadata": {
                "description": "The group Id for the private endpoint Group."
              },
              "value": "[coalesce(tryGet(tryGet(tryGet(tryGet(reference('privateEndpoint'), 'manualPrivateLinkServiceConnections'), 0, 'properties'), 'groupIds'), 0), tryGet(tryGet(tryGet(tryGet(reference('privateEndpoint'), 'privateLinkServiceConnections'), 0, 'properties'), 'groupIds'), 0))]"
            }
          }
        }
      },
      "dependsOn": [
        "server"
      ]
    },
    "server_firewallRules": {
      "copy": {
        "name": "server_firewallRules",
        "count": "[length(coalesce(parameters('firewallRules'), createArray()))]"
      },
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('{0}-Sql-FirewallRules-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "name": {
            "value": "[coalesce(parameters('firewallRules'), createArray())[copyIndex()].name]"
          },
          "serverName": {
            "value": "[parameters('name')]"
          },
          "endIpAddress": {
            "value": "[tryGet(coalesce(parameters('firewallRules'), createArray())[copyIndex()], 'endIpAddress')]"
          },
          "startIpAddress": {
            "value": "[tryGet(coalesce(parameters('firewallRules'), createArray())[copyIndex()], 'startIpAddress')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.36.1.42791",
              "templateHash": "4373974379110057634"
            },
            "name": "Azure SQL Server Firewall Rule",
            "description": "This module deploys an Azure SQL Server Firewall Rule."
          },
          "parameters": {
            "name": {
              "type": "string",
              "metadata": {
                "description": "Required. The name of the Server Firewall Rule."
              }
            },
            "endIpAddress": {
              "type": "string",
              "defaultValue": "0.0.0.0",
              "metadata": {
                "description": "Optional. The end IP address of the firewall rule. Must be IPv4 format. Must be greater than or equal to startIpAddress. Use value '0.0.0.0' for all Azure-internal IP addresses."
              }
            },
            "startIpAddress": {
              "type": "string",
              "defaultValue": "0.0.0.0",
              "metadata": {
                "description": "Optional. The start IP address of the firewall rule. Must be IPv4 format. Use value '0.0.0.0' for all Azure-internal IP addresses."
              }
            },
            "serverName": {
              "type": "string",
              "metadata": {
                "description": "Conditional. The name of the parent SQL Server. Required if the template is used in a standalone deployment."
              }
            }
          },
          "resources": [
            {
              "type": "Microsoft.Sql/servers/firewallRules",
              "apiVersion": "2023-08-01",
              "name": "[format('{0}/{1}', parameters('serverName'), parameters('name'))]",
              "properties": {
                "endIpAddress": "[parameters('endIpAddress')]",
                "startIpAddress": "[parameters('startIpAddress')]"
              }
            }
          ],
          "outputs": {
            "name": {
              "type": "string",
              "metadata": {
                "description": "The name of the deployed firewall rule."
              },
              "value": "[parameters('name')]"
            },
            "resourceId": {
              "type": "string",
              "metadata": {
                "description": "The resource ID of the deployed firewall rule."
              },
              "value": "[resourceId('Microsoft.Sql/servers/firewallRules', parameters('serverName'), parameters('name'))]"
            },
            "resourceGroupName": {
              "type": "string",
              "metadata": {
                "description": "The resource group of the deployed firewall rule."
              },
              "value": "[resourceGroup().name]"
            }
          }
        }
      },
      "dependsOn": [
        "server"
      ]
    },
    "server_virtualNetworkRules": {
      "copy": {
        "name": "server_virtualNetworkRules",
        "count": "[length(coalesce(parameters('virtualNetworkRules'), createArray()))]"
      },
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('{0}-Sql-VirtualNetworkRules-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "serverName": {
            "value": "[parameters('name')]"
          },
          "name": {
            "value": "[coalesce(parameters('virtualNetworkRules'), createArray())[copyIndex()].name]"
          },
          "ignoreMissingVnetServiceEndpoint": {
            "value": "[tryGet(coalesce(parameters('virtualNetworkRules'), createArray())[copyIndex()], 'ignoreMissingVnetServiceEndpoint')]"
          },
          "virtualNetworkSubnetResourceId": {
            "value": "[coalesce(parameters('virtualNetworkRules'), createArray())[copyIndex()].virtualNetworkSubnetResourceId]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.36.1.42791",
              "templateHash": "4329943834463874399"
            },
            "name": "Azure SQL Server Virtual Network Rules",
            "description": "This module deploys an Azure SQL Server Virtual Network Rule."
          },
          "parameters": {
            "name": {
              "type": "string",
              "metadata": {
                "description": "Required. The name of the Server Virtual Network Rule."
              }
            },
            "ignoreMissingVnetServiceEndpoint": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Optional. Allow creating a firewall rule before the virtual network has vnet service endpoint enabled."
              }
            },
            "virtualNetworkSubnetResourceId": {
              "type": "string",
              "metadata": {
                "description": "Required. The resource ID of the virtual network subnet."
              }
            },
            "serverName": {
              "type": "string",
              "metadata": {
                "description": "Conditional. The name of the parent SQL Server. Required if the template is used in a standalone deployment."
              }
            }
          },
          "resources": [
            {
              "type": "Microsoft.Sql/servers/virtualNetworkRules",
              "apiVersion": "2023-08-01",
              "name": "[format('{0}/{1}', parameters('serverName'), parameters('name'))]",
              "properties": {
                "ignoreMissingVnetServiceEndpoint": "[parameters('ignoreMissingVnetServiceEndpoint')]",
                "virtualNetworkSubnetId": "[parameters('virtualNetworkSubnetResourceId')]"
              }
            }
          ],
          "outputs": {
            "name": {
              "type": "string",
              "metadata": {
                "description": "The name of the deployed virtual network rule."
              },
              "value": "[parameters('name')]"
            },
            "resourceId": {
              "type": "string",
              "metadata": {
                "description": "The resource ID of the deployed virtual network rule."
              },
              "value": "[resourceId('Microsoft.Sql/servers/virtualNetworkRules', parameters('serverName'), parameters('name'))]"
            },
            "resourceGroupName": {
              "type": "string",
              "metadata": {
                "description": "The resource group of the deployed virtual network rule."
              },
              "value": "[resourceGroup().name]"
            }
          }
        }
      },
      "dependsOn": [
        "server"
      ]
    },
    "server_securityAlertPolicies": {
      "copy": {
        "name": "server_securityAlertPolicies",
        "count": "[length(coalesce(parameters('securityAlertPolicies'), createArray()))]"
      },
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('{0}-Sql-SecAlertPolicy-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "name": {
            "value": "[coalesce(parameters('securityAlertPolicies'), createArray())[copyIndex()].name]"
          },
          "serverName": {
            "value": "[parameters('name')]"
          },
          "disabledAlerts": {
            "value": "[tryGet(coalesce(parameters('securityAlertPolicies'), createArray())[copyIndex()], 'disabledAlerts')]"
          },
          "emailAccountAdmins": {
            "value": "[tryGet(coalesce(parameters('securityAlertPolicies'), createArray())[copyIndex()], 'emailAccountAdmins')]"
          },
          "emailAddresses": {
            "value": "[tryGet(coalesce(parameters('securityAlertPolicies'), createArray())[copyIndex()], 'emailAddresses')]"
          },
          "retentionDays": {
            "value": "[tryGet(coalesce(parameters('securityAlertPolicies'), createArray())[copyIndex()], 'retentionDays')]"
          },
          "state": {
            "value": "[tryGet(coalesce(parameters('securityAlertPolicies'), createArray())[copyIndex()], 'state')]"
          },
          "storageAccountAccessKey": {
            "value": "[tryGet(coalesce(parameters('securityAlertPolicies'), createArray())[copyIndex()], 'storageAccountAccessKey')]"
          },
          "storageEndpoint": {
            "value": "[tryGet(coalesce(parameters('securityAlertPolicies'), createArray())[copyIndex()], 'storageEndpoint')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "languageVersion": "2.0",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.36.1.42791",
              "templateHash": "15348652978067640813"
            },
            "name": "Azure SQL Server Security Alert Policies",
            "description": "This module deploys an Azure SQL Server Security Alert Policy."
          },
          "parameters": {
            "name": {
              "type": "string",
              "metadata": {
                "description": "Required. The name of the Security Alert Policy."
              }
            },
            "disabledAlerts": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "defaultValue": [],
              "allowedValues": [
                "Sql_Injection",
                "Sql_Injection_Vulnerability",
                "Access_Anomaly",
                "Data_Exfiltration",
                "Unsafe_Action",
                "Brute_Force"
              ],
              "metadata": {
                "description": "Optional. Alerts to disable."
              }
            },
            "emailAccountAdmins": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Optional. Specifies that the alert is sent to the account administrators."
              }
            },
            "emailAddresses": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "defaultValue": [],
              "metadata": {
                "description": "Optional. Specifies an array of email addresses to which the alert is sent."
              }
            },
            "retentionDays": {
              "type": "int",
              "defaultValue": 0,
              "metadata": {
                "description": "Optional. Specifies the number of days to keep in the Threat Detection audit logs."
              }
            },
            "state": {
              "type": "string",
              "defaultValue": "Disabled",
              "allowedValues": [
                "Disabled",
                "Enabled"
              ],
              "metadata": {
                "description": "Optional. Specifies the state of the policy, whether it is enabled or disabled or a policy has not been applied yet on the specific database."
              }
            },
            "storageAccountAccessKey": {
              "type": "securestring",
              "nullable": true,
              "metadata": {
                "description": "Optional. Specifies the identifier key of the Threat Detection audit storage account."
              }
            },
            "storageEndpoint": {
              "type": "string",
              "nullable": true,
              "metadata": {
                "description": "Optional. Specifies the blob storage endpoint. This blob storage will hold all Threat Detection audit logs."
              }
            },
            "serverName": {
              "type": "string",
              "metadata": {
                "description": "Conditional. The name of the parent SQL Server. Required if the template is used in a standalone deployment."
              }
            }
          },
          "resources": {
            "server": {
              "existing": true,
              "type": "Microsoft.Sql/servers",
              "apiVersion": "2023-08-01",
              "name": "[parameters('serverName')]"
            },
            "securityAlertPolicy": {
              "type": "Microsoft.Sql/servers/securityAlertPolicies",
              "apiVersion": "2023-08-01",
              "name": "[format('{0}/{1}', parameters('serverName'), parameters('name'))]",
              "properties": {
                "disabledAlerts": "[parameters('disabledAlerts')]",
                "emailAccountAdmins": "[parameters('emailAccountAdmins')]",
                "emailAddresses": "[parameters('emailAddresses')]",
                "retentionDays": "[parameters('retentionDays')]",
                "state": "[parameters('state')]",
                "storageAccountAccessKey": "[parameters('storageAccountAccessKey')]",
                "storageEndpoint": "[parameters('storageEndpoint')]"
              }
            }
          },
          "outputs": {
            "name": {
              "type": "string",
              "metadata": {
                "description": "The name of the deployed security alert policy."
              },
              "value": "[parameters('name')]"
            },
            "resourceId": {
              "type": "string",
              "metadata": {
                "description": "The resource ID of the deployed security alert policy."
              },
              "value": "[resourceId('Microsoft.Sql/servers/securityAlertPolicies', parameters('serverName'), parameters('name'))]"
            },
            "resourceGroupName": {
              "type": "string",
              "metadata": {
                "description": "The resource group of the deployed security alert policy."
              },
              "value": "[resourceGroup().name]"
            }
          }
        }
      },
      "dependsOn": [
        "server"
      ]
    },
    "server_vulnerabilityAssessment": {
      "condition": "[not(equals(parameters('vulnerabilityAssessmentsObj'), null()))]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('{0}-Sql-VulnAssessm', uniqueString(deployment().name, parameters('location')))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "serverName": {
            "value": "[parameters('name')]"
          },
          "name": {
            "value": "[parameters('vulnerabilityAssessmentsObj').name]"
          },
          "recurringScans": {
            "value": "[tryGet(parameters('vulnerabilityAssessmentsObj'), 'recurringScans')]"
          },
          "storageAccountResourceId": {
            "value": "[parameters('vulnerabilityAssessmentsObj').storageAccountResourceId]"
          },
          "useStorageAccountAccessKey": {
            "value": "[tryGet(parameters('vulnerabilityAssessmentsObj'), 'useStorageAccountAccessKey')]"
          },
          "createStorageRoleAssignment": {
            "value": "[tryGet(parameters('vulnerabilityAssessmentsObj'), 'createStorageRoleAssignment')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "languageVersion": "2.0",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.36.1.42791",
              "templateHash": "2856119284131810417"
            },
            "name": "Azure SQL Server Vulnerability Assessments",
            "description": "This module deploys an Azure SQL Server Vulnerability Assessment."
          },
          "definitions": {
            "recurringScansType": {
              "type": "object",
              "properties": {
                "emails": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "metadata": {
                    "description": "Required. Specifies an array of e-mail addresses to which the scan notification is sent."
                  }
                },
                "emailSubscriptionAdmins": {
                  "type": "bool",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Specifies that the schedule scan notification will be sent to the subscription administrators."
                  }
                },
                "isEnabled": {
                  "type": "bool",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Recurring scans state."
                  }
                }
              },
              "metadata": {
                "__bicep_export!": true,
                "description": "The type for recurring scans."
              }
            }
          },
          "parameters": {
            "name": {
              "type": "string",
              "metadata": {
                "description": "Required. The name of the vulnerability assessment."
              }
            },
            "serverName": {
              "type": "string",
              "metadata": {
                "description": "Conditional. The Name of SQL Server. Required if the template is used in a standalone deployment."
              }
            },
            "recurringScans": {
              "$ref": "#/definitions/recurringScansType",
              "defaultValue": {
                "emails": [],
                "emailSubscriptionAdmins": false,
                "isEnabled": false
              },
              "metadata": {
                "description": "Optional. The recurring scans settings."
              }
            },
            "storageAccountResourceId": {
              "type": "string",
              "metadata": {
                "description": "Required. A blob storage to hold the scan results."
              }
            },
            "useStorageAccountAccessKey": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Optional. Use Access Key to access the storage account. The storage account cannot be behind a firewall or virtual network. If an access key is not used, the SQL Server system assigned managed identity must be assigned the Storage Blob Data Contributor role on the storage account."
              }
            },
            "createStorageRoleAssignment": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Optional. Create the Storage Blob Data Contributor role assignment on the storage account. Note, the role assignment must not already exist on the storage account."
              }
            }
          },
          "resources": {
            "server": {
              "existing": true,
              "type": "Microsoft.Sql/servers",
              "apiVersion": "2023-08-01",
              "name": "[parameters('serverName')]"
            },
            "vulnerabilityAssessment": {
              "type": "Microsoft.Sql/servers/vulnerabilityAssessments",
              "apiVersion": "2023-08-01",
              "name": "[format('{0}/{1}', parameters('serverName'), parameters('name'))]",
              "properties": {
                "storageContainerPath": "[format('https://{0}.blob.{1}/vulnerability-assessment/', last(split(parameters('storageAccountResourceId'), '/')), environment().suffixes.storage)]",
                "storageAccountAccessKey": "[if(parameters('useStorageAccountAccessKey'), listKeys(parameters('storageAccountResourceId'), '2019-06-01').keys[0].value, null())]",
                "recurringScans": "[parameters('recurringScans')]"
              }
            },
            "storageAccount_sbdc_rbac": {
              "condition": "[and(not(parameters('useStorageAccountAccessKey')), parameters('createStorageRoleAssignment'))]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('{0}-sbdc-rbac', parameters('serverName'))]",
              "subscriptionId": "[split(parameters('storageAccountResourceId'), '/')[2]]",
              "resourceGroup": "[split(parameters('storageAccountResourceId'), '/')[4]]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "storageAccountName": {
                    "value": "[last(split(parameters('storageAccountResourceId'), '/'))]"
                  },
                  "managedInstanceIdentityPrincipalId": {
                    "value": "[reference('server', '2023-08-01', 'full').identity.principalId]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.36.1.42791",
                      "templateHash": "16708437053172304191"
                    }
                  },
                  "parameters": {
                    "storageAccountName": {
                      "type": "string"
                    },
                    "managedInstanceIdentityPrincipalId": {
                      "type": "string"
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Authorization/roleAssignments",
                      "apiVersion": "2022-04-01",
                      "scope": "[format('Microsoft.Storage/storageAccounts/{0}', parameters('storageAccountName'))]",
                      "name": "[guid(format('{0}-{1}-Storage-Blob-Data-Contributor', resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName')), parameters('managedInstanceIdentityPrincipalId')))]",
                      "properties": {
                        "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'ba92f5b4-2d11-453d-a403-e96b0029c9fe')]",
                        "principalId": "[parameters('managedInstanceIdentityPrincipalId')]",
                        "principalType": "ServicePrincipal"
                      }
                    }
                  ]
                }
              },
              "dependsOn": [
                "server"
              ]
            }
          },
          "outputs": {
            "name": {
              "type": "string",
              "metadata": {
                "description": "The name of the deployed vulnerability assessment."
              },
              "value": "[parameters('name')]"
            },
            "resourceId": {
              "type": "string",
              "metadata": {
                "description": "The resource ID of the deployed vulnerability assessment."
              },
              "value": "[resourceId('Microsoft.Sql/servers/vulnerabilityAssessments', parameters('serverName'), parameters('name'))]"
            },
            "resourceGroupName": {
              "type": "string",
              "metadata": {
                "description": "The resource group of the deployed vulnerability assessment."
              },
              "value": "[resourceGroup().name]"
            }
          }
        }
      },
      "dependsOn": [
        "server",
        "server_securityAlertPolicies"
      ]
    },
    "server_keys": {
      "copy": {
        "name": "server_keys",
        "count": "[length(coalesce(parameters('keys'), createArray()))]"
      },
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('{0}-Sql-Key-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "serverName": {
            "value": "[parameters('name')]"
          },
          "name": {
            "value": "[tryGet(coalesce(parameters('keys'), createArray())[copyIndex()], 'name')]"
          },
          "serverKeyType": {
            "value": "[tryGet(coalesce(parameters('keys'), createArray())[copyIndex()], 'serverKeyType')]"
          },
          "uri": {
            "value": "[tryGet(coalesce(parameters('keys'), createArray())[copyIndex()], 'uri')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "languageVersion": "2.0",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.36.1.42791",
              "templateHash": "11129867292095349286"
            },
            "name": "Azure SQL Server Keys",
            "description": "This module deploys an Azure SQL Server Key."
          },
          "parameters": {
            "name": {
              "type": "string",
              "nullable": true,
              "metadata": {
                "description": "Optional. The name of the key. Must follow the [<keyVaultName>_<keyName>_<keyVersion>] pattern."
              }
            },
            "serverName": {
              "type": "string",
              "metadata": {
                "description": "Conditional. The name of the parent SQL server. Required if the template is used in a standalone deployment."
              }
            },
            "serverKeyType": {
              "type": "string",
              "defaultValue": "ServiceManaged",
              "allowedValues": [
                "AzureKeyVault",
                "ServiceManaged"
              ],
              "metadata": {
                "description": "Optional. The server key type."
              }
            },
            "uri": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. The URI of the server key. If the ServerKeyType is AzureKeyVault, then the URI is required. The AKV URI is required to be in this format: 'https://YourVaultName.azure.net/keys/YourKeyName/YourKeyVersion'."
              }
            }
          },
          "variables": {
            "splittedKeyUri": "[split(parameters('uri'), '/')]",
            "serverKeyName": "[if(empty(parameters('uri')), 'ServiceManaged', format('{0}_{1}_{2}', split(variables('splittedKeyUri')[2], '.')[0], variables('splittedKeyUri')[4], variables('splittedKeyUri')[5]))]"
          },
          "resources": {
            "server": {
              "existing": true,
              "type": "Microsoft.Sql/servers",
              "apiVersion": "2023-08-01",
              "name": "[parameters('serverName')]"
            },
            "key": {
              "type": "Microsoft.Sql/servers/keys",
              "apiVersion": "2023-08-01",
              "name": "[format('{0}/{1}', parameters('serverName'), coalesce(parameters('name'), variables('serverKeyName')))]",
              "properties": {
                "serverKeyType": "[parameters('serverKeyType')]",
                "uri": "[parameters('uri')]"
              }
            }
          },
          "outputs": {
            "name": {
              "type": "string",
              "metadata": {
                "description": "The name of the deployed server key."
              },
              "value": "[coalesce(parameters('name'), variables('serverKeyName'))]"
            },
            "resourceId": {
              "type": "string",
              "metadata": {
                "description": "The resource ID of the deployed server key."
              },
              "value": "[resourceId('Microsoft.Sql/servers/keys', parameters('serverName'), coalesce(parameters('name'), variables('serverKeyName')))]"
            },
            "resourceGroupName": {
              "type": "string",
              "metadata": {
                "description": "The resource group of the deployed server key."
              },
              "value": "[resourceGroup().name]"
            }
          }
        }
      },
      "dependsOn": [
        "server"
      ]
    },
    "cmk_key": {
      "condition": "[not(equals(parameters('customerManagedKey'), null()))]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('{0}-Sql-Key', uniqueString(deployment().name, parameters('location')))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "serverName": {
            "value": "[parameters('name')]"
          },
          "name": {
            "value": "[format('{0}_{1}_{2}', last(split(tryGet(parameters('customerManagedKey'), 'keyVaultResourceId'), '/')), tryGet(parameters('customerManagedKey'), 'keyName'), if(not(empty(tryGet(parameters('customerManagedKey'), 'keyVersion'))), tryGet(parameters('customerManagedKey'), 'keyVersion'), last(split(reference('cMKKeyVault::cMKKey').keyUriWithVersion, '/'))))]"
          },
          "serverKeyType": {
            "value": "AzureKeyVault"
          },
          "uri": "[if(not(empty(tryGet(parameters('customerManagedKey'), 'keyVersion'))), createObject('value', format('{0}/{1}', reference('cMKKeyVault::cMKKey').keyUri, tryGet(parameters('customerManagedKey'), 'keyVersion'))), createObject('value', reference('cMKKeyVault::cMKKey').keyUriWithVersion))]"
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "languageVersion": "2.0",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.36.1.42791",
              "templateHash": "11129867292095349286"
            },
            "name": "Azure SQL Server Keys",
            "description": "This module deploys an Azure SQL Server Key."
          },
          "parameters": {
            "name": {
              "type": "string",
              "nullable": true,
              "metadata": {
                "description": "Optional. The name of the key. Must follow the [<keyVaultName>_<keyName>_<keyVersion>] pattern."
              }
            },
            "serverName": {
              "type": "string",
              "metadata": {
                "description": "Conditional. The name of the parent SQL server. Required if the template is used in a standalone deployment."
              }
            },
            "serverKeyType": {
              "type": "string",
              "defaultValue": "ServiceManaged",
              "allowedValues": [
                "AzureKeyVault",
                "ServiceManaged"
              ],
              "metadata": {
                "description": "Optional. The server key type."
              }
            },
            "uri": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. The URI of the server key. If the ServerKeyType is AzureKeyVault, then the URI is required. The AKV URI is required to be in this format: 'https://YourVaultName.azure.net/keys/YourKeyName/YourKeyVersion'."
              }
            }
          },
          "variables": {
            "splittedKeyUri": "[split(parameters('uri'), '/')]",
            "serverKeyName": "[if(empty(parameters('uri')), 'ServiceManaged', format('{0}_{1}_{2}', split(variables('splittedKeyUri')[2], '.')[0], variables('splittedKeyUri')[4], variables('splittedKeyUri')[5]))]"
          },
          "resources": {
            "server": {
              "existing": true,
              "type": "Microsoft.Sql/servers",
              "apiVersion": "2023-08-01",
              "name": "[parameters('serverName')]"
            },
            "key": {
              "type": "Microsoft.Sql/servers/keys",
              "apiVersion": "2023-08-01",
              "name": "[format('{0}/{1}', parameters('serverName'), coalesce(parameters('name'), variables('serverKeyName')))]",
              "properties": {
                "serverKeyType": "[parameters('serverKeyType')]",
                "uri": "[parameters('uri')]"
              }
            }
          },
          "outputs": {
            "name": {
              "type": "string",
              "metadata": {
                "description": "The name of the deployed server key."
              },
              "value": "[coalesce(parameters('name'), variables('serverKeyName'))]"
            },
            "resourceId": {
              "type": "string",
              "metadata": {
                "description": "The resource ID of the deployed server key."
              },
              "value": "[resourceId('Microsoft.Sql/servers/keys', parameters('serverName'), coalesce(parameters('name'), variables('serverKeyName')))]"
            },
            "resourceGroupName": {
              "type": "string",
              "metadata": {
                "description": "The resource group of the deployed server key."
              },
              "value": "[resourceGroup().name]"
            }
          }
        }
      },
      "dependsOn": [
        "cMKKeyVault::cMKKey",
        "server"
      ]
    },
    "server_encryptionProtector": {
      "condition": "[not(equals(parameters('customerManagedKey'), null()))]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('{0}-Sql-EncryProtector', uniqueString(deployment().name, parameters('location')))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "sqlServerName": {
            "value": "[parameters('name')]"
          },
          "serverKeyName": {
            "value": "[reference('cmk_key').outputs.name.value]"
          },
          "serverKeyType": {
            "value": "AzureKeyVault"
          },
          "autoRotationEnabled": {
            "value": "[tryGet(parameters('customerManagedKey'), 'autoRotationEnabled')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.36.1.42791",
              "templateHash": "17490849737310265082"
            },
            "name": "Azure SQL Server Encryption Protector",
            "description": "This module deploys an Azure SQL Server Encryption Protector."
          },
          "parameters": {
            "sqlServerName": {
              "type": "string",
              "metadata": {
                "description": "Conditional. The name of the sql server. Required if the template is used in a standalone deployment."
              }
            },
            "serverKeyName": {
              "type": "string",
              "metadata": {
                "description": "Required. The name of the server key."
              }
            },
            "autoRotationEnabled": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Optional. Key auto rotation opt-in flag."
              }
            },
            "serverKeyType": {
              "type": "string",
              "defaultValue": "ServiceManaged",
              "allowedValues": [
                "AzureKeyVault",
                "ServiceManaged"
              ],
              "metadata": {
                "description": "Optional. The encryption protector type."
              }
            }
          },
          "resources": [
            {
              "type": "Microsoft.Sql/servers/encryptionProtector",
              "apiVersion": "2023-08-01",
              "name": "[format('{0}/{1}', parameters('sqlServerName'), 'current')]",
              "properties": {
                "serverKeyType": "[parameters('serverKeyType')]",
                "autoRotationEnabled": "[parameters('autoRotationEnabled')]",
                "serverKeyName": "[parameters('serverKeyName')]"
              }
            }
          ],
          "outputs": {
            "name": {
              "type": "string",
              "metadata": {
                "description": "The name of the deployed encryption protector."
              },
              "value": "current"
            },
            "resourceId": {
              "type": "string",
              "metadata": {
                "description": "The resource ID of the encryption protector."
              },
              "value": "[resourceId('Microsoft.Sql/servers/encryptionProtector', parameters('sqlServerName'), 'current')]"
            },
            "resourceGroupName": {
              "type": "string",
              "metadata": {
                "description": "The resource group of the deployed encryption protector."
              },
              "value": "[resourceGroup().name]"
            }
          }
        }
      },
      "dependsOn": [
        "cmk_key",
        "server"
      ]
    },
    "server_audit_settings": {
      "condition": "[not(empty(parameters('auditSettings')))]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('{0}-Sql-AuditSettings', uniqueString(deployment().name, parameters('location')))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "serverName": {
            "value": "[parameters('name')]"
          },
          "name": {
            "value": "[coalesce(tryGet(parameters('auditSettings'), 'name'), 'default')]"
          },
          "state": {
            "value": "[tryGet(parameters('auditSettings'), 'state')]"
          },
          "auditActionsAndGroups": {
            "value": "[tryGet(parameters('auditSettings'), 'auditActionsAndGroups')]"
          },
          "isAzureMonitorTargetEnabled": {
            "value": "[tryGet(parameters('auditSettings'), 'isAzureMonitorTargetEnabled')]"
          },
          "isDevopsAuditEnabled": {
            "value": "[tryGet(parameters('auditSettings'), 'isDevopsAuditEnabled')]"
          },
          "isManagedIdentityInUse": {
            "value": "[tryGet(parameters('auditSettings'), 'isManagedIdentityInUse')]"
          },
          "isStorageSecondaryKeyInUse": {
            "value": "[tryGet(parameters('auditSettings'), 'isStorageSecondaryKeyInUse')]"
          },
          "queueDelayMs": {
            "value": "[tryGet(parameters('auditSettings'), 'queueDelayMs')]"
          },
          "retentionDays": {
            "value": "[tryGet(parameters('auditSettings'), 'retentionDays')]"
          },
          "storageAccountResourceId": {
            "value": "[tryGet(parameters('auditSettings'), 'storageAccountResourceId')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "languageVersion": "2.0",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.36.1.42791",
              "templateHash": "10207867872798857173"
            },
            "name": "Azure SQL Server Audit Settings",
            "description": "This module deploys an Azure SQL Server Audit Settings."
          },
          "parameters": {
            "name": {
              "type": "string",
              "metadata": {
                "description": "Required. The name of the audit settings."
              }
            },
            "serverName": {
              "type": "string",
              "metadata": {
                "description": "Conditional. The Name of SQL Server. Required if the template is used in a standalone deployment."
              }
            },
            "state": {
              "type": "string",
              "defaultValue": "Enabled",
              "allowedValues": [
                "Enabled",
                "Disabled"
              ],
              "metadata": {
                "description": "Optional. Specifies the state of the audit. If state is Enabled, storageEndpoint or isAzureMonitorTargetEnabled are required."
              }
            },
            "auditActionsAndGroups": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "defaultValue": [
                "BATCH_COMPLETED_GROUP",
                "SUCCESSFUL_DATABASE_AUTHENTICATION_GROUP",
                "FAILED_DATABASE_AUTHENTICATION_GROUP"
              ],
              "metadata": {
                "description": "Optional. Specifies the Actions-Groups and Actions to audit."
              }
            },
            "isAzureMonitorTargetEnabled": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Optional. Specifies whether audit events are sent to Azure Monitor."
              }
            },
            "isDevopsAuditEnabled": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Optional. Specifies the state of devops audit. If state is Enabled, devops logs will be sent to Azure Monitor."
              }
            },
            "isManagedIdentityInUse": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Optional. Specifies whether Managed Identity is used to access blob storage."
              }
            },
            "isStorageSecondaryKeyInUse": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Optional. Specifies whether storageAccountAccessKey value is the storage's secondary key."
              }
            },
            "queueDelayMs": {
              "type": "int",
              "defaultValue": 1000,
              "metadata": {
                "description": "Optional. Specifies the amount of time in milliseconds that can elapse before audit actions are forced to be processed."
              }
            },
            "retentionDays": {
              "type": "int",
              "defaultValue": 90,
              "metadata": {
                "description": "Optional. Specifies the number of days to keep in the audit logs in the storage account."
              }
            },
            "storageAccountResourceId": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. A blob storage to hold the auditing storage account."
              }
            }
          },
          "resources": {
            "server": {
              "existing": true,
              "type": "Microsoft.Sql/servers",
              "apiVersion": "2023-08-01",
              "name": "[parameters('serverName')]"
            },
            "auditSettings": {
              "type": "Microsoft.Sql/servers/auditingSettings",
              "apiVersion": "2023-08-01",
              "name": "[format('{0}/{1}', parameters('serverName'), parameters('name'))]",
              "properties": {
                "state": "[parameters('state')]",
                "auditActionsAndGroups": "[parameters('auditActionsAndGroups')]",
                "isAzureMonitorTargetEnabled": "[parameters('isAzureMonitorTargetEnabled')]",
                "isDevopsAuditEnabled": "[parameters('isDevopsAuditEnabled')]",
                "isManagedIdentityInUse": "[parameters('isManagedIdentityInUse')]",
                "isStorageSecondaryKeyInUse": "[parameters('isStorageSecondaryKeyInUse')]",
                "queueDelayMs": "[parameters('queueDelayMs')]",
                "retentionDays": "[parameters('retentionDays')]",
                "storageAccountAccessKey": "[if(and(not(empty(parameters('storageAccountResourceId'))), not(parameters('isManagedIdentityInUse'))), listKeys(parameters('storageAccountResourceId'), '2019-06-01').keys[0].value, null())]",
                "storageAccountSubscriptionId": "[if(not(empty(parameters('storageAccountResourceId'))), split(parameters('storageAccountResourceId'), '/')[2], null())]",
                "storageEndpoint": "[if(not(empty(parameters('storageAccountResourceId'))), format('https://{0}.blob.{1}', last(split(parameters('storageAccountResourceId'), '/')), environment().suffixes.storage), null())]"
              }
            },
            "storageAccount_sbdc_rbac": {
              "condition": "[and(parameters('isManagedIdentityInUse'), not(empty(parameters('storageAccountResourceId'))))]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('storageAccount_sbdc_rbac-{0}', uniqueString('storageAccount_sbdc_rbac', deployment().name))]",
              "subscriptionId": "[split(coalesce(parameters('storageAccountResourceId'), resourceGroup().id), '/')[2]]",
              "resourceGroup": "[split(coalesce(parameters('storageAccountResourceId'), resourceGroup().id), '/')[4]]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "storageAccountName": {
                    "value": "[last(split(parameters('storageAccountResourceId'), '/'))]"
                  },
                  "managedIdentityPrincipalId": "[if(equals(reference('server', '2023-08-01', 'full').identity.type, 'UserAssigned'), createObject('value', filter(items(reference('server', '2023-08-01', 'full').identity.userAssignedIdentities), lambda('identity', equals(lambdaVariables('identity').key, reference('server').primaryUserAssignedIdentityId)))[0].value.principalId), createObject('value', reference('server', '2023-08-01', 'full').identity.principalId))]"
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.36.1.42791",
                      "templateHash": "16469435463567159258"
                    }
                  },
                  "parameters": {
                    "storageAccountName": {
                      "type": "string"
                    },
                    "managedIdentityPrincipalId": {
                      "type": "string"
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Authorization/roleAssignments",
                      "apiVersion": "2022-04-01",
                      "scope": "[format('Microsoft.Storage/storageAccounts/{0}', parameters('storageAccountName'))]",
                      "name": "[guid(format('{0}-{1}-Storage-Blob-Data-Contributor', resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName')), parameters('managedIdentityPrincipalId')))]",
                      "properties": {
                        "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'ba92f5b4-2d11-453d-a403-e96b0029c9fe')]",
                        "principalId": "[parameters('managedIdentityPrincipalId')]",
                        "principalType": "ServicePrincipal"
                      }
                    }
                  ]
                }
              },
              "dependsOn": [
                "server"
              ]
            }
          },
          "outputs": {
            "name": {
              "type": "string",
              "metadata": {
                "description": "The name of the deployed audit settings."
              },
              "value": "[parameters('name')]"
            },
            "resourceId": {
              "type": "string",
              "metadata": {
                "description": "The resource ID of the deployed audit settings."
              },
              "value": "[resourceId('Microsoft.Sql/servers/auditingSettings', parameters('serverName'), parameters('name'))]"
            },
            "resourceGroupName": {
              "type": "string",
              "metadata": {
                "description": "The resource group of the deployed audit settings."
              },
              "value": "[resourceGroup().name]"
            }
          }
        }
      },
      "dependsOn": [
        "server"
      ]
    },
    "secretsExport": {
      "condition": "[not(equals(parameters('secretsExportConfiguration'), null()))]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('{0}-secrets-kv', uniqueString(deployment().name, parameters('location')))]",
      "subscriptionId": "[split(tryGet(parameters('secretsExportConfiguration'), 'keyVaultResourceId'), '/')[2]]",
      "resourceGroup": "[split(tryGet(parameters('secretsExportConfiguration'), 'keyVaultResourceId'), '/')[4]]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "keyVaultName": {
            "value": "[last(split(tryGet(parameters('secretsExportConfiguration'), 'keyVaultResourceId'), '/'))]"
          },
          "secretsToSet": {
            "value": "[union(createArray(), if(contains(parameters('secretsExportConfiguration'), 'sqlAdminPasswordSecretName'), createArray(createObject('name', tryGet(parameters('secretsExportConfiguration'), 'sqlAdminPasswordSecretName'), 'value', parameters('administratorLoginPassword'))), createArray()), if(contains(parameters('secretsExportConfiguration'), 'sqlAzureConnectionStringSecretName'), createArray(createObject('name', tryGet(parameters('secretsExportConfiguration'), 'sqlAzureConnectionStringSecretName'), 'value', format('Server={0}; Database={1}; User={2}; Password={3}', reference('server').fullyQualifiedDomainName, if(not(empty(parameters('databases'))), tryGet(parameters('databases'), 0, 'name'), ''), parameters('administratorLogin'), parameters('administratorLoginPassword')))), createArray()))]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "languageVersion": "2.0",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.36.1.42791",
              "templateHash": "18255389690016246128"
            }
          },
          "definitions": {
            "secretSetOutputType": {
              "type": "object",
              "properties": {
                "secretResourceId": {
                  "type": "string",
                  "metadata": {
                    "description": "The resourceId of the exported secret."
                  }
                },
                "secretUri": {
                  "type": "string",
                  "metadata": {
                    "description": "The secret URI of the exported secret."
                  }
                },
                "secretUriWithVersion": {
                  "type": "string",
                  "metadata": {
                    "description": "The secret URI with version of the exported secret."
                  }
                }
              },
              "metadata": {
                "description": "An AVM-aligned type for the output of the secret set via the secrets export feature.",
                "__bicep_imported_from!": {
                  "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.5.1"
                }
              }
            },
            "secretToSetType": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. The name of the secret to set."
                  }
                },
                "value": {
                  "type": "securestring",
                  "metadata": {
                    "description": "Required. The value of the secret to set."
                  }
                }
              },
              "metadata": {
                "description": "An AVM-aligned type for the secret to set via the secrets export feature.",
                "__bicep_imported_from!": {
                  "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.5.1"
                }
              }
            }
          },
          "parameters": {
            "keyVaultName": {
              "type": "string",
              "metadata": {
                "description": "Required. The name of the Key Vault to set the secrets in."
              }
            },
            "secretsToSet": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/secretToSetType"
              },
              "metadata": {
                "description": "Required. The secrets to set in the Key Vault."
              }
            }
          },
          "resources": {
            "keyVault": {
              "existing": true,
              "type": "Microsoft.KeyVault/vaults",
              "apiVersion": "2024-11-01",
              "name": "[parameters('keyVaultName')]"
            },
            "secrets": {
              "copy": {
                "name": "secrets",
                "count": "[length(parameters('secretsToSet'))]"
              },
              "type": "Microsoft.KeyVault/vaults/secrets",
              "apiVersion": "2024-11-01",
              "name": "[format('{0}/{1}', parameters('keyVaultName'), parameters('secretsToSet')[copyIndex()].name)]",
              "properties": {
                "value": "[parameters('secretsToSet')[copyIndex()].value]"
              }
            }
          },
          "outputs": {
            "secretsSet": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/secretSetOutputType"
              },
              "metadata": {
                "description": "The references to the secrets exported to the provided Key Vault."
              },
              "copy": {
                "count": "[length(range(0, length(coalesce(parameters('secretsToSet'), createArray()))))]",
                "input": {
                  "secretResourceId": "[resourceId('Microsoft.KeyVault/vaults/secrets', parameters('keyVaultName'), parameters('secretsToSet')[range(0, length(coalesce(parameters('secretsToSet'), createArray())))[copyIndex()]].name)]",
                  "secretUri": "[reference(format('secrets[{0}]', range(0, length(coalesce(parameters('secretsToSet'), createArray())))[copyIndex()])).secretUri]",
                  "secretUriWithVersion": "[reference(format('secrets[{0}]', range(0, length(coalesce(parameters('secretsToSet'), createArray())))[copyIndex()])).secretUriWithVersion]"
                }
              }
            }
          }
        }
      },
      "dependsOn": [
        "server"
      ]
    },
    "failover_groups": {
      "copy": {
        "name": "failover_groups",
        "count": "[length(coalesce(parameters('failoverGroups'), createArray()))]"
      },
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('{0}-Sql-FailoverGroup-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "name": {
            "value": "[coalesce(parameters('failoverGroups'), createArray())[copyIndex()].name]"
          },
          "tags": {
            "value": "[coalesce(tryGet(coalesce(parameters('failoverGroups'), createArray())[copyIndex()], 'tags'), parameters('tags'))]"
          },
          "serverName": {
            "value": "[parameters('name')]"
          },
          "databases": {
            "value": "[coalesce(parameters('failoverGroups'), createArray())[copyIndex()].databases]"
          },
          "partnerServers": {
            "value": "[coalesce(parameters('failoverGroups'), createArray())[copyIndex()].partnerServers]"
          },
          "readOnlyEndpoint": {
            "value": "[tryGet(coalesce(parameters('failoverGroups'), createArray())[copyIndex()], 'readOnlyEndpoint')]"
          },
          "readWriteEndpoint": {
            "value": "[coalesce(parameters('failoverGroups'), createArray())[copyIndex()].readWriteEndpoint]"
          },
          "secondaryType": {
            "value": "[coalesce(parameters('failoverGroups'), createArray())[copyIndex()].secondaryType]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "languageVersion": "2.0",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.36.1.42791",
              "templateHash": "7002329445517579297"
            },
            "name": "Azure SQL Server failover group",
            "description": "This module deploys Azure SQL Server failover group."
          },
          "definitions": {
            "readOnlyEndpointType": {
              "type": "object",
              "properties": {
                "failoverPolicy": {
                  "type": "string",
                  "allowedValues": [
                    "Disabled",
                    "Enabled"
                  ],
                  "metadata": {
                    "description": "Required. Failover policy of the read-only endpoint for the failover group."
                  }
                },
                "targetServer": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. The target partner server where the read-only endpoint points to."
                  }
                }
              },
              "metadata": {
                "__bicep_export!": true,
                "description": "The type for a read-only endpoint."
              }
            },
            "readWriteEndpointType": {
              "type": "object",
              "properties": {
                "failoverPolicy": {
                  "type": "string",
                  "allowedValues": [
                    "Automatic",
                    "Manual"
                  ],
                  "metadata": {
                    "description": "Required. Failover policy of the read-write endpoint for the failover group. If failoverPolicy is Automatic then failoverWithDataLossGracePeriodMinutes is required."
                  }
                },
                "failoverWithDataLossGracePeriodMinutes": {
                  "type": "int",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Grace period before failover with data loss is attempted for the read-write endpoint."
                  }
                }
              },
              "metadata": {
                "__bicep_export!": true,
                "description": "The type for a read-write endpoint."
              }
            }
          },
          "parameters": {
            "name": {
              "type": "string",
              "metadata": {
                "description": "Required. The name of the failover group."
              }
            },
            "serverName": {
              "type": "string",
              "metadata": {
                "description": "Conditional. The Name of SQL Server. Required if the template is used in a standalone deployment."
              }
            },
            "databases": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "metadata": {
                "description": "Required. List of databases in the failover group."
              }
            },
            "partnerServers": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "metadata": {
                "description": "Required. List of the partner servers for the failover group."
              }
            },
            "readOnlyEndpoint": {
              "$ref": "#/definitions/readOnlyEndpointType",
              "nullable": true,
              "metadata": {
                "description": "Optional. Read-only endpoint of the failover group instance."
              }
            },
            "readWriteEndpoint": {
              "$ref": "#/definitions/readWriteEndpointType",
              "metadata": {
                "description": "Required. Read-write endpoint of the failover group instance."
              }
            },
            "secondaryType": {
              "type": "string",
              "allowedValues": [
                "Geo",
                "Standby"
              ],
              "metadata": {
                "description": "Required. Databases secondary type on partner server."
              }
            },
            "tags": {
              "type": "object",
              "nullable": true,
              "metadata": {
                "description": "Optional. Tags of the resource."
              }
            }
          },
          "resources": {
            "server": {
              "existing": true,
              "type": "Microsoft.Sql/servers",
              "apiVersion": "2023-08-01",
              "name": "[parameters('serverName')]"
            },
            "failoverGroup": {
              "type": "Microsoft.Sql/servers/failoverGroups",
              "apiVersion": "2024-05-01-preview",
              "name": "[format('{0}/{1}', parameters('serverName'), parameters('name'))]",
              "tags": "[parameters('tags')]",
              "properties": {
                "copy": [
                  {
                    "name": "databases",
                    "count": "[length(parameters('databases'))]",
                    "input": "[resourceId('Microsoft.Sql/servers/databases', parameters('serverName'), parameters('databases')[copyIndex('databases')])]"
                  },
                  {
                    "name": "partnerServers",
                    "count": "[length(parameters('partnerServers'))]",
                    "input": {
                      "id": "[resourceId(resourceGroup().name, 'Microsoft.Sql/servers', parameters('partnerServers')[copyIndex('partnerServers')])]"
                    }
                  }
                ],
                "readOnlyEndpoint": "[if(not(empty(parameters('readOnlyEndpoint'))), createObject('failoverPolicy', parameters('readOnlyEndpoint').failoverPolicy, 'targetServer', resourceId(resourceGroup().name, 'Microsoft.Sql/servers', parameters('readOnlyEndpoint').targetServer)), null())]",
                "readWriteEndpoint": "[parameters('readWriteEndpoint')]",
                "secondaryType": "[parameters('secondaryType')]"
              }
            }
          },
          "outputs": {
            "name": {
              "type": "string",
              "metadata": {
                "description": "The name of the deployed failover group."
              },
              "value": "[parameters('name')]"
            },
            "resourceId": {
              "type": "string",
              "metadata": {
                "description": "The resource ID of the deployed failover group."
              },
              "value": "[resourceId('Microsoft.Sql/servers/failoverGroups', parameters('serverName'), parameters('name'))]"
            },
            "resourceGroupName": {
              "type": "string",
              "metadata": {
                "description": "The resource group of the deployed failover group."
              },
              "value": "[resourceGroup().name]"
            }
          }
        }
      },
      "dependsOn": [
        "server",
        "server_databases"
      ]
    }
  },
  "outputs": {
    "name": {
      "type": "string",
      "metadata": {
        "description": "The name of the deployed SQL server."
      },
      "value": "[parameters('name')]"
    },
    "resourceId": {
      "type": "string",
      "metadata": {
        "description": "The resource ID of the deployed SQL server."
      },
      "value": "[resourceId('Microsoft.Sql/servers', parameters('name'))]"
    },
    "fullyQualifiedDomainName": {
      "type": "string",
      "metadata": {
        "description": "The fully qualified domain name of the deployed SQL server."
      },
      "value": "[reference('server').fullyQualifiedDomainName]"
    },
    "resourceGroupName": {
      "type": "string",
      "metadata": {
        "description": "The resource group of the deployed SQL server."
      },
      "value": "[resourceGroup().name]"
    },
    "systemAssignedMIPrincipalId": {
      "type": "string",
      "nullable": true,
      "metadata": {
        "description": "The principal ID of the system assigned identity."
      },
      "value": "[tryGet(tryGet(reference('server', '2023-08-01', 'full'), 'identity'), 'principalId')]"
    },
    "location": {
      "type": "string",
      "metadata": {
        "description": "The location the resource was deployed into."
      },
      "value": "[reference('server', '2023-08-01', 'full').location]"
    },
    "exportedSecrets": {
      "$ref": "#/definitions/secretsOutputType",
      "metadata": {
        "description": "A hashtable of references to the secrets exported to the provided Key Vault. The key of each reference is each secret's name."
      },
      "value": "[if(not(equals(parameters('secretsExportConfiguration'), null())), toObject(reference('secretsExport').outputs.secretsSet.value, lambda('secret', last(split(lambdaVariables('secret').secretResourceId, '/'))), lambda('secret', lambdaVariables('secret'))), createObject())]"
    },
    "privateEndpoints": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/privateEndpointOutputType"
      },
      "metadata": {
        "description": "The private endpoints of the SQL server."
      },
      "copy": {
        "count": "[length(coalesce(parameters('privateEndpoints'), createArray()))]",
        "input": {
          "name": "[reference(format('server_privateEndpoints[{0}]', copyIndex())).outputs.name.value]",
          "resourceId": "[reference(format('server_privateEndpoints[{0}]', copyIndex())).outputs.resourceId.value]",
          "groupId": "[tryGet(tryGet(reference(format('server_privateEndpoints[{0}]', copyIndex())).outputs, 'groupId'), 'value')]",
          "customDnsConfigs": "[reference(format('server_privateEndpoints[{0}]', copyIndex())).outputs.customDnsConfigs.value]",
          "networkInterfaceResourceIds": "[reference(format('server_privateEndpoints[{0}]', copyIndex())).outputs.networkInterfaceResourceIds.value]"
        }
      }
    }
  }
}