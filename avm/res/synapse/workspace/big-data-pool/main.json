{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "languageVersion": "2.0",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "_generator": {
      "name": "bicep",
      "version": "0.36.1.42791",
      "templateHash": "1105798698592936047"
    },
    "name": "Synapse Workspaces Big Data Pools",
    "description": "This module deploys a Synapse Workspaces Big Data Pool."
  },
  "definitions": {
    "autoScaleType": {
      "type": "object",
      "properties": {
        "maxNodeCount": {
          "type": "int",
          "minValue": 3,
          "maxValue": 200,
          "metadata": {
            "description": "Required. Synapse workspace Big Data Pools Auto-scaling maximum node count."
          }
        },
        "minNodeCount": {
          "type": "int",
          "minValue": 3,
          "maxValue": 200,
          "metadata": {
            "description": "Required. Synapse workspace Big Data Pools Auto-scaling minimum node count."
          }
        }
      },
      "metadata": {
        "__bicep_export!": true,
        "description": "The synapse workspace Big Data Pools Auto-scaling properties."
      }
    },
    "dynamicExecutorAllocationType": {
      "type": "object",
      "properties": {
        "minExecutors": {
          "type": "int",
          "minValue": 1,
          "maxValue": 10,
          "metadata": {
            "description": "Required. Synapse workspace Big Data Pools Dynamic Executor Allocation minimum executors."
          }
        },
        "maxExecutors": {
          "type": "int",
          "minValue": 1,
          "maxValue": 10,
          "metadata": {
            "description": "Required. Synapse workspace Big Data Pools Dynamic Executor Allocation maximum executors (maxNodeCount-1)."
          }
        }
      },
      "metadata": {
        "__bicep_export!": true,
        "description": "The synapse workspace Big Data Pools Dynamic Executor Allocation properties."
      }
    },
    "sparkConfigPropertiesType": {
      "type": "object",
      "properties": {
        "configurationType": {
          "type": "string",
          "allowedValues": [
            "Artifact",
            "File"
          ],
          "metadata": {
            "description": "Required. The configuration type."
          }
        },
        "content": {
          "type": "string",
          "metadata": {
            "description": "Required. The configuration content."
          }
        },
        "filename": {
          "type": "string",
          "metadata": {
            "description": "Required. The configuration filename."
          }
        }
      },
      "metadata": {
        "__bicep_export!": true,
        "description": "The synapse workspace Big Data Pools Spark configuration file properties."
      }
    },
    "diagnosticSettingFullType": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "Optional. The name of the diagnostic setting."
          }
        },
        "logCategoriesAndGroups": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "category": {
                "type": "string",
                "nullable": true,
                "metadata": {
                  "description": "Optional. Name of a Diagnostic Log category for a resource type this setting is applied to. Set the specific logs to collect here."
                }
              },
              "categoryGroup": {
                "type": "string",
                "nullable": true,
                "metadata": {
                  "description": "Optional. Name of a Diagnostic Log category group for a resource type this setting is applied to. Set to `allLogs` to collect all logs."
                }
              },
              "enabled": {
                "type": "bool",
                "nullable": true,
                "metadata": {
                  "description": "Optional. Enable or disable the category explicitly. Default is `true`."
                }
              }
            }
          },
          "nullable": true,
          "metadata": {
            "description": "Optional. The name of logs that will be streamed. \"allLogs\" includes all possible logs for the resource. Set to `[]` to disable log collection."
          }
        },
        "metricCategories": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "category": {
                "type": "string",
                "metadata": {
                  "description": "Required. Name of a Diagnostic Metric category for a resource type this setting is applied to. Set to `AllMetrics` to collect all metrics."
                }
              },
              "enabled": {
                "type": "bool",
                "nullable": true,
                "metadata": {
                  "description": "Optional. Enable or disable the category explicitly. Default is `true`."
                }
              }
            }
          },
          "nullable": true,
          "metadata": {
            "description": "Optional. The name of metrics that will be streamed. \"allMetrics\" includes all possible metrics for the resource. Set to `[]` to disable metric collection."
          }
        },
        "logAnalyticsDestinationType": {
          "type": "string",
          "allowedValues": [
            "AzureDiagnostics",
            "Dedicated"
          ],
          "nullable": true,
          "metadata": {
            "description": "Optional. A string indicating whether the export to Log Analytics should use the default destination type, i.e. AzureDiagnostics, or use a destination type."
          }
        },
        "workspaceResourceId": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "Optional. Resource ID of the diagnostic log analytics workspace. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
          }
        },
        "storageAccountResourceId": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "Optional. Resource ID of the diagnostic storage account. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
          }
        },
        "eventHubAuthorizationRuleResourceId": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "Optional. Resource ID of the diagnostic event hub authorization rule for the Event Hubs namespace in which the event hub should be created or streamed to."
          }
        },
        "eventHubName": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "Optional. Name of the diagnostic event hub within the namespace to which logs are streamed. Without this, an event hub is created for each log category. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
          }
        },
        "marketplacePartnerResourceId": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "Optional. The full ARM resource ID of the Marketplace resource to which you would like to send Diagnostic Logs."
          }
        }
      },
      "metadata": {
        "description": "An AVM-aligned type for a diagnostic setting. To be used if both logs & metrics are supported by the resource provider.",
        "__bicep_imported_from!": {
          "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.5.1"
        }
      }
    },
    "lockType": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "Optional. Specify the name of lock."
          }
        },
        "kind": {
          "type": "string",
          "allowedValues": [
            "CanNotDelete",
            "None",
            "ReadOnly"
          ],
          "nullable": true,
          "metadata": {
            "description": "Optional. Specify the type of lock."
          }
        }
      },
      "metadata": {
        "description": "An AVM-aligned type for a lock.",
        "__bicep_imported_from!": {
          "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.5.1"
        }
      }
    },
    "roleAssignmentType": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "Optional. The name (as GUID) of the role assignment. If not provided, a GUID will be generated."
          }
        },
        "roleDefinitionIdOrName": {
          "type": "string",
          "metadata": {
            "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
          }
        },
        "principalId": {
          "type": "string",
          "metadata": {
            "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
          }
        },
        "principalType": {
          "type": "string",
          "allowedValues": [
            "Device",
            "ForeignGroup",
            "Group",
            "ServicePrincipal",
            "User"
          ],
          "nullable": true,
          "metadata": {
            "description": "Optional. The principal type of the assigned principal ID."
          }
        },
        "description": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "Optional. The description of the role assignment."
          }
        },
        "condition": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
          }
        },
        "conditionVersion": {
          "type": "string",
          "allowedValues": [
            "2.0"
          ],
          "nullable": true,
          "metadata": {
            "description": "Optional. Version of the condition."
          }
        },
        "delegatedManagedIdentityResourceId": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "Optional. The Resource Id of the delegated managed identity resource."
          }
        }
      },
      "metadata": {
        "description": "An AVM-aligned type for a role assignment.",
        "__bicep_imported_from!": {
          "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.5.1"
        }
      }
    }
  },
  "parameters": {
    "workspaceName": {
      "type": "string",
      "metadata": {
        "description": "Conditional. The name of the parent Synapse Workspace. Required if the template is used in a standalone deployment."
      }
    },
    "name": {
      "type": "string",
      "metadata": {
        "description": "Required. The name of the Big Data Pool."
      }
    },
    "location": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "Optional. The geo-location where the resource lives."
      }
    },
    "nodeSizeFamily": {
      "type": "string",
      "defaultValue": "MemoryOptimized",
      "allowedValues": [
        "HardwareAcceleratedFPGA",
        "HardwareAcceleratedGPU",
        "MemoryOptimized",
        "None"
      ],
      "metadata": {
        "description": "Optional. The kind of nodes that the Big Data pool provides."
      }
    },
    "nodeSize": {
      "type": "string",
      "allowedValues": [
        "Large",
        "Medium",
        "None",
        "Small",
        "XLarge",
        "XXLarge",
        "XXXLarge"
      ],
      "metadata": {
        "description": "Required. The level of compute power that each node in the Big Data pool has."
      }
    },
    "autoScale": {
      "$ref": "#/definitions/autoScaleType",
      "nullable": true,
      "metadata": {
        "description": "Optional. Auto-scaling properties."
      }
    },
    "nodeCount": {
      "type": "int",
      "defaultValue": 3,
      "minValue": 3,
      "maxValue": 200,
      "metadata": {
        "description": "Optional. The number of nodes in the Big Data pool if Auto-scaling is disabled."
      }
    },
    "dynamicExecutorAllocation": {
      "$ref": "#/definitions/dynamicExecutorAllocationType",
      "nullable": true,
      "metadata": {
        "description": "Optional. Dynamic Executor Allocation."
      }
    },
    "autoPauseDelayInMinutes": {
      "type": "int",
      "defaultValue": -1,
      "minValue": -1,
      "maxValue": 10080,
      "metadata": {
        "description": "Optional. Synapse workspace Big Data Pools Auto-pausing delay in minutes (5-10080). Disabled if value not provided."
      }
    },
    "sparkVersion": {
      "type": "string",
      "defaultValue": "3.4",
      "allowedValues": [
        "3.4",
        "3.5"
      ],
      "metadata": {
        "description": "Optional. The Apache Spark version."
      }
    },
    "sparkConfigProperties": {
      "$ref": "#/definitions/sparkConfigPropertiesType",
      "nullable": true,
      "metadata": {
        "description": "Optional. Spark configuration file to specify additional properties."
      }
    },
    "sessionLevelPackagesEnabled": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Optional. Whether session level packages enabled. Disabled if value not provided."
      }
    },
    "cacheSize": {
      "type": "int",
      "defaultValue": 50,
      "minValue": 0,
      "maxValue": 100,
      "metadata": {
        "description": "Optional. The cache size."
      }
    },
    "defaultSparkLogFolder": {
      "type": "string",
      "nullable": true,
      "metadata": {
        "description": "Optional. The default folder where Spark logs will be written."
      }
    },
    "autotuneEnabled": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Optional. Whether Auto-tune is Enabled or not. Disabled if value not provided."
      }
    },
    "computeIsolationEnabled": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Optional. Whether Compute Isolation is enabled or not. Disabled if value not provided."
      }
    },
    "sparkEventsFolder": {
      "type": "string",
      "nullable": true,
      "metadata": {
        "description": "Optional. The Spark events folder."
      }
    },
    "diagnosticSettings": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/diagnosticSettingFullType"
      },
      "nullable": true,
      "metadata": {
        "description": "Optional. The diagnostic settings of the service."
      }
    },
    "roleAssignments": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/roleAssignmentType"
      },
      "nullable": true,
      "metadata": {
        "description": "Optional. Array of role assignments to create."
      }
    },
    "lock": {
      "$ref": "#/definitions/lockType",
      "nullable": true,
      "metadata": {
        "description": "Optional. The lock settings of the service."
      }
    },
    "tags": {
      "type": "object",
      "nullable": true,
      "metadata": {
        "description": "Optional. Tags of the resource."
      }
    }
  },
  "variables": {
    "copy": [
      {
        "name": "formattedRoleAssignments",
        "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]",
        "input": "[union(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')], createObject('roleDefinitionId', coalesce(tryGet(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName), if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName)))))]"
      }
    ],
    "builtInRoleNames": {
      "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
      "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
      "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
      "Role Based Access Control Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]",
      "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]"
    }
  },
  "resources": {
    "workspace": {
      "existing": true,
      "type": "Microsoft.Synapse/workspaces",
      "apiVersion": "2021-06-01",
      "name": "[parameters('workspaceName')]"
    },
    "bigDataPool": {
      "type": "Microsoft.Synapse/workspaces/bigDataPools",
      "apiVersion": "2021-06-01",
      "name": "[format('{0}/{1}', parameters('workspaceName'), parameters('name'))]",
      "location": "[parameters('location')]",
      "tags": "[parameters('tags')]",
      "properties": {
        "nodeSizeFamily": "[parameters('nodeSizeFamily')]",
        "nodeSize": "[parameters('nodeSize')]",
        "autoScale": "[if(not(empty(parameters('autoScale'))), createObject('enabled', true(), 'minNodeCount', tryGet(parameters('autoScale'), 'minNodeCount'), 'maxNodeCount', tryGet(parameters('autoScale'), 'maxNodeCount')), createObject('enabled', false()))]",
        "nodeCount": "[if(empty(parameters('autoScale')), parameters('nodeCount'), null())]",
        "dynamicExecutorAllocation": "[if(not(empty(parameters('dynamicExecutorAllocation'))), createObject('enabled', true(), 'minExecutors', tryGet(parameters('dynamicExecutorAllocation'), 'minExecutors'), 'maxExecutors', tryGet(parameters('dynamicExecutorAllocation'), 'maxExecutors')), createObject('enabled', false()))]",
        "autoPause": "[if(not(equals(parameters('autoPauseDelayInMinutes'), -1)), createObject('enabled', true(), 'delayInMinutes', if(less(parameters('autoPauseDelayInMinutes'), 5), 5, parameters('autoPauseDelayInMinutes'))), createObject('enabled', false()))]",
        "sparkVersion": "[parameters('sparkVersion')]",
        "sparkConfigProperties": "[parameters('sparkConfigProperties')]",
        "sessionLevelPackagesEnabled": "[parameters('sessionLevelPackagesEnabled')]",
        "cacheSize": "[parameters('cacheSize')]",
        "defaultSparkLogFolder": "[if(not(empty(parameters('defaultSparkLogFolder'))), parameters('defaultSparkLogFolder'), null())]",
        "isAutotuneEnabled": "[parameters('autotuneEnabled')]",
        "isComputeIsolationEnabled": "[parameters('computeIsolationEnabled')]",
        "sparkEventsFolder": "[if(not(empty(parameters('sparkEventsFolder'))), parameters('sparkEventsFolder'), null())]"
      }
    },
    "bigDataPool_lock": {
      "condition": "[and(not(empty(coalesce(parameters('lock'), createObject()))), not(equals(tryGet(parameters('lock'), 'kind'), 'None')))]",
      "type": "Microsoft.Authorization/locks",
      "apiVersion": "2020-05-01",
      "scope": "[format('Microsoft.Synapse/workspaces/{0}/bigDataPools/{1}', parameters('workspaceName'), parameters('name'))]",
      "name": "[coalesce(tryGet(parameters('lock'), 'name'), format('lock-{0}', parameters('name')))]",
      "properties": {
        "level": "[coalesce(tryGet(parameters('lock'), 'kind'), '')]",
        "notes": "[if(equals(tryGet(parameters('lock'), 'kind'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot delete or modify the resource or child resources.')]"
      },
      "dependsOn": [
        "bigDataPool"
      ]
    },
    "bigDataPool_diagnosticSettings": {
      "copy": {
        "name": "bigDataPool_diagnosticSettings",
        "count": "[length(coalesce(parameters('diagnosticSettings'), createArray()))]"
      },
      "type": "Microsoft.Insights/diagnosticSettings",
      "apiVersion": "2021-05-01-preview",
      "scope": "[format('Microsoft.Synapse/workspaces/{0}/bigDataPools/{1}', parameters('workspaceName'), parameters('name'))]",
      "name": "[coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'name'), format('{0}-diagnosticSettings', parameters('name')))]",
      "properties": {
        "copy": [
          {
            "name": "metrics",
            "count": "[length(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics'))))]",
            "input": {
              "category": "[coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics')))[copyIndex('metrics')].category]",
              "enabled": "[coalesce(tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics')))[copyIndex('metrics')], 'enabled'), true())]",
              "timeGrain": null
            }
          },
          {
            "name": "logs",
            "count": "[length(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs'))))]",
            "input": {
              "categoryGroup": "[tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'categoryGroup')]",
              "category": "[tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'category')]",
              "enabled": "[coalesce(tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'enabled'), true())]"
            }
          }
        ],
        "storageAccountId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'storageAccountResourceId')]",
        "workspaceId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'workspaceResourceId')]",
        "eventHubAuthorizationRuleId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'eventHubAuthorizationRuleResourceId')]",
        "eventHubName": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'eventHubName')]",
        "marketplacePartnerId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'marketplacePartnerResourceId')]",
        "logAnalyticsDestinationType": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logAnalyticsDestinationType')]"
      },
      "dependsOn": [
        "bigDataPool"
      ]
    },
    "bigDataPool_roleAssignments": {
      "copy": {
        "name": "bigDataPool_roleAssignments",
        "count": "[length(coalesce(variables('formattedRoleAssignments'), createArray()))]"
      },
      "type": "Microsoft.Authorization/roleAssignments",
      "apiVersion": "2022-04-01",
      "scope": "[format('Microsoft.Synapse/workspaces/{0}/bigDataPools/{1}', parameters('workspaceName'), parameters('name'))]",
      "name": "[coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'name'), guid(resourceId('Microsoft.Synapse/workspaces/bigDataPools', parameters('workspaceName'), parameters('name')), coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId, coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId))]",
      "properties": {
        "roleDefinitionId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId]",
        "principalId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId]",
        "description": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'description')]",
        "principalType": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'principalType')]",
        "condition": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition')]",
        "conditionVersion": "[if(not(empty(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
        "delegatedManagedIdentityResourceId": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
      },
      "dependsOn": [
        "bigDataPool"
      ]
    }
  },
  "outputs": {
    "name": {
      "type": "string",
      "metadata": {
        "description": "The name of the deployed Big Data Pool."
      },
      "value": "[parameters('name')]"
    },
    "resourceId": {
      "type": "string",
      "metadata": {
        "description": "The resource ID of the deployed Big Data Pool."
      },
      "value": "[resourceId('Microsoft.Synapse/workspaces/bigDataPools', parameters('workspaceName'), parameters('name'))]"
    },
    "resourceGroupName": {
      "type": "string",
      "metadata": {
        "description": "The resource group of the deployed Big Data Pool."
      },
      "value": "[resourceGroup().name]"
    }
  }
}