{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "languageVersion": "2.0",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "_generator": {
      "name": "bicep",
      "version": "0.25.3.34343",
      "templateHash": "4492220200871045953"
    },
    "name": "Key Vault Keys",
    "description": "This module deploys a Key Vault Key.",
    "owner": "Azure/module-maintainers"
  },
  "definitions": {
    "roleAssignmentType": {
      "type": "array",
      "items": {
        "type": "object",
        "properties": {
          "roleDefinitionIdOrName": {
            "type": "string",
            "metadata": {
              "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
            }
          },
          "principalId": {
            "type": "string",
            "metadata": {
              "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
            }
          },
          "principalType": {
            "type": "string",
            "allowedValues": [
              "Device",
              "ForeignGroup",
              "Group",
              "ServicePrincipal",
              "User"
            ],
            "nullable": true,
            "metadata": {
              "description": "Optional. The principal type of the assigned principal ID."
            }
          },
          "description": {
            "type": "string",
            "nullable": true,
            "metadata": {
              "description": "Optional. The description of the role assignment."
            }
          },
          "condition": {
            "type": "string",
            "nullable": true,
            "metadata": {
              "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
            }
          },
          "conditionVersion": {
            "type": "string",
            "allowedValues": [
              "2.0"
            ],
            "nullable": true,
            "metadata": {
              "description": "Optional. Version of the condition."
            }
          },
          "delegatedManagedIdentityResourceId": {
            "type": "string",
            "nullable": true,
            "metadata": {
              "description": "Optional. The Resource Id of the delegated managed identity resource."
            }
          }
        }
      },
      "nullable": true
    },
    "keyType": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "metadata": {
            "description": "Required. The name of the key."
          }
        },
        "tags": {
          "type": "object",
          "nullable": true,
          "metadata": {
            "description": "Optional. Resource tags."
          }
        },
        "attributes": {
          "type": "object",
          "properties": {
            "enabled": {
              "type": "bool",
              "nullable": true,
              "metadata": {
                "description": "Optional. Defines whether the key is enabled or disabled."
              }
            },
            "exp": {
              "type": "int",
              "nullable": true,
              "metadata": {
                "description": "Optional. Defines when the key will become invalid. Defined in seconds since 1970-01-01T00:00:00Z."
              }
            },
            "nbf": {
              "type": "int",
              "nullable": true,
              "metadata": {
                "description": "Optional. If set, defines the date from which onwards the key becomes valid. Defined in seconds since 1970-01-01T00:00:00Z."
              }
            }
          },
          "nullable": true,
          "metadata": {
            "description": "Optional. Contains attributes of the key."
          }
        },
        "curveName": {
          "type": "string",
          "allowedValues": [
            "P-256",
            "P-256K",
            "P-384",
            "P-521"
          ],
          "nullable": true,
          "metadata": {
            "description": "Optional. The elliptic curve name. Default value is \"P-256\"."
          }
        },
        "keyOps": {
          "type": "array",
          "allowedValues": [
            "decrypt",
            "encrypt",
            "import",
            "release",
            "sign",
            "unwrapKey",
            "verify",
            "wrapKey"
          ],
          "nullable": true,
          "metadata": {
            "description": "Optional. The allowed operations on this key."
          }
        },
        "keySize": {
          "type": "int",
          "allowedValues": [
            2048,
            3072,
            4096
          ],
          "nullable": true,
          "metadata": {
            "description": "Optional. The key size in bits."
          }
        },
        "kty": {
          "type": "string",
          "allowedValues": [
            "EC",
            "EC-HSM",
            "RSA",
            "RSA-HSM"
          ],
          "nullable": true,
          "metadata": {
            "description": "Optional. The type of the key. Default value is \"EC\"."
          }
        },
        "releasePolicy": {
          "type": "object",
          "properties": {
            "contentType": {
              "type": "string",
              "nullable": true,
              "metadata": {
                "description": "Optional. Content type and version of key release policy."
              }
            },
            "data": {
              "type": "string",
              "nullable": true,
              "metadata": {
                "description": "Optional. Blob encoding the policy rules under which the key can be released."
              }
            }
          },
          "nullable": true,
          "metadata": {
            "description": "Optional. Key release policy."
          }
        },
        "rotationPolicy": {
          "$ref": "#/definitions/rotationPolicyType",
          "nullable": true,
          "metadata": {
            "description": "Optional. Key rotation policy."
          }
        },
        "roleAssignments": {
          "$ref": "#/definitions/roleAssignmentType",
          "nullable": true,
          "metadata": {
            "description": "Optional. Array of role assignments to create."
          }
        }
      }
    },
    "rotationPolicyType": {
      "type": "object",
      "properties": {
        "attributes": {
          "type": "object",
          "properties": {
            "expiryTime": {
              "type": "string",
              "nullable": true,
              "metadata": {
                "description": "Optional. The expiration time for the new key version. It should be in ISO8601 format. Eg: \"P90D\", \"P1Y\"."
              }
            }
          },
          "nullable": true,
          "metadata": {
            "description": "Optional. The attributes of key rotation policy."
          }
        },
        "lifetimeActions": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "action": {
                "type": "object",
                "properties": {
                  "type": {
                    "type": "string",
                    "allowedValues": [
                      "Notify",
                      "Rotate"
                    ],
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. The type of action."
                    }
                  }
                },
                "nullable": true,
                "metadata": {
                  "description": "Optional. The action of key rotation policy lifetimeAction."
                }
              },
              "trigger": {
                "type": "object",
                "properties": {
                  "timeAfterCreate": {
                    "type": "string",
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. The time duration after key creation to rotate the key. It only applies to rotate. It will be in ISO 8601 duration format. Eg: \"P90D\", \"P1Y\"."
                    }
                  },
                  "timeBeforeExpiry": {
                    "type": "string",
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. The time duration before key expiring to rotate or notify. It will be in ISO 8601 duration format. Eg: \"P90D\", \"P1Y\"."
                    }
                  }
                },
                "nullable": true,
                "metadata": {
                  "description": "Optional. The trigger of key rotation policy lifetimeAction."
                }
              }
            }
          },
          "nullable": true,
          "metadata": {
            "description": "Optional. The lifetimeActions for key rotation action."
          }
        }
      },
      "nullable": true
    }
  },
  "parameters": {
    "keyVaultName": {
      "type": "string",
      "metadata": {
        "description": "Conditional. The name of the parent key vault. Required if the template is used in a standalone deployment."
      }
    },
    "keyProperties": {
      "$ref": "#/definitions/keyType",
      "metadata": {
        "description": "Optional. Sets the attributes of the secret."
      }
    }
  },
  "variables": {
    "builtInRoleNames": {
      "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
      "Key Vault Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '00482a5a-887f-4fb3-b363-3b7fe8e74483')]",
      "Key Vault Certificates Officer": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'a4417e6f-fecd-4de8-b567-7b0420556985')]",
      "Key Vault Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f25e0fa2-a7c8-4377-a976-54943a77a395')]",
      "Key Vault Crypto Officer": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '14b46e9e-c2b7-41b4-b07b-48a6ebf60603')]",
      "Key Vault Crypto Service Encryption User": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'e147488a-f6f5-4113-8e2d-b22465e65bf6')]",
      "Key Vault Crypto User": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '12338af0-0e69-4776-bea7-57ae8d297424')]",
      "Key Vault Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '21090545-7ca7-4776-b22c-e363652d74d2')]",
      "Key Vault Secrets Officer": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b86a8fe4-44ce-4948-aee5-eccb2c155cd7')]",
      "Key Vault Secrets User": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4633458b-17de-408a-b874-0445c86b69e6')]",
      "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
      "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
      "Role Based Access Control Administrator (Preview)": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]",
      "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]"
    }
  },
  "resources": {
    "keyVault": {
      "existing": true,
      "type": "Microsoft.KeyVault/vaults",
      "apiVersion": "2022-07-01",
      "name": "[parameters('keyVaultName')]"
    },
    "key": {
      "type": "Microsoft.KeyVault/vaults/keys",
      "apiVersion": "2022-07-01",
      "name": "[format('{0}/{1}', parameters('keyVaultName'), parameters('keyProperties').name)]",
      "tags": "[coalesce(tryGet(parameters('keyProperties'), 'tags'), createObject())]",
      "properties": {
        "attributes": {
          "enabled": "[tryGet(parameters('keyProperties').attributes, 'enabled')]",
          "exp": "[tryGet(parameters('keyProperties').attributes, 'exp')]",
          "nbf": "[tryGet(parameters('keyProperties').attributes, 'nbf')]"
        },
        "curveName": "[coalesce(tryGet(parameters('keyProperties'), 'curveName'), 'P-256')]",
        "keyOps": "[tryGet(parameters('keyProperties'), 'keyOps')]",
        "keySize": "[tryGet(parameters('keyProperties'), 'keySize')]",
        "kty": "[coalesce(tryGet(parameters('keyProperties'), 'kty'), 'EC')]",
        "release_policy": "[coalesce(tryGet(parameters('keyProperties'), 'releasePolicy'), createObject())]",
        "rotationPolicy": "[coalesce(tryGet(parameters('keyProperties'), 'rotationPolicy'), createObject())]"
      },
      "dependsOn": [
        "keyVault"
      ]
    },
    "key_roleAssignments": {
      "copy": {
        "name": "key_roleAssignments",
        "count": "[length(coalesce(tryGet(parameters('keyProperties'), 'roleAssignments'), createArray()))]"
      },
      "type": "Microsoft.Authorization/roleAssignments",
      "apiVersion": "2022-04-01",
      "scope": "[format('Microsoft.KeyVault/vaults/{0}/keys/{1}', parameters('keyVaultName'), parameters('keyProperties').name)]",
      "name": "[guid(resourceId('Microsoft.KeyVault/vaults/keys', parameters('keyVaultName'), parameters('keyProperties').name), coalesce(tryGet(parameters('keyProperties'), 'roleAssignments'), createArray())[copyIndex()].principalId, coalesce(tryGet(parameters('keyProperties'), 'roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName)]",
      "properties": {
        "roleDefinitionId": "[if(contains(variables('builtInRoleNames'), coalesce(tryGet(parameters('keyProperties'), 'roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName), variables('builtInRoleNames')[coalesce(tryGet(parameters('keyProperties'), 'roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName], if(contains(coalesce(tryGet(parameters('keyProperties'), 'roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(tryGet(parameters('keyProperties'), 'roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(tryGet(parameters('keyProperties'), 'roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName)))]",
        "principalId": "[coalesce(tryGet(parameters('keyProperties'), 'roleAssignments'), createArray())[copyIndex()].principalId]",
        "description": "[tryGet(coalesce(tryGet(parameters('keyProperties'), 'roleAssignments'), createArray())[copyIndex()], 'description')]",
        "principalType": "[tryGet(coalesce(tryGet(parameters('keyProperties'), 'roleAssignments'), createArray())[copyIndex()], 'principalType')]",
        "condition": "[tryGet(coalesce(tryGet(parameters('keyProperties'), 'roleAssignments'), createArray())[copyIndex()], 'condition')]",
        "conditionVersion": "[if(not(empty(tryGet(coalesce(tryGet(parameters('keyProperties'), 'roleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(tryGet(parameters('keyProperties'), 'roleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
        "delegatedManagedIdentityResourceId": "[tryGet(coalesce(tryGet(parameters('keyProperties'), 'roleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
      },
      "dependsOn": [
        "key"
      ]
    }
  },
  "outputs": {
    "name": {
      "type": "string",
      "metadata": {
        "description": "The name of the key."
      },
      "value": "[parameters('keyProperties').name]"
    },
    "resourceId": {
      "type": "string",
      "metadata": {
        "description": "The resource ID of the key."
      },
      "value": "[resourceId('Microsoft.KeyVault/vaults/keys', parameters('keyVaultName'), parameters('keyProperties').name)]"
    },
    "resourceGroupName": {
      "type": "string",
      "metadata": {
        "description": "The name of the resource group the key was created in."
      },
      "value": "[resourceGroup().name]"
    }
  }
}