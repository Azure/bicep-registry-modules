{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "languageVersion": "2.0",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "_generator": {
      "name": "bicep",
      "version": "0.23.1.45101",
      "templateHash": "16618408806092022062"
    },
    "name": "Healthcare API Workspaces",
    "description": "This module deploys a Healthcare API Workspace.",
    "owner": "Azure/module-maintainers"
  },
  "definitions": {
    "lockType": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "Optional. Specify the name of lock."
          }
        },
        "kind": {
          "type": "string",
          "allowedValues": [
            "CanNotDelete",
            "None",
            "ReadOnly"
          ],
          "nullable": true,
          "metadata": {
            "description": "Optional. Specify the type of lock."
          }
        }
      },
      "nullable": true
    },
    "roleAssignmentType": {
      "type": "array",
      "items": {
        "type": "object",
        "properties": {
          "roleDefinitionIdOrName": {
            "type": "string",
            "metadata": {
              "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
            }
          },
          "principalId": {
            "type": "string",
            "metadata": {
              "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
            }
          },
          "principalType": {
            "type": "string",
            "allowedValues": [
              "Device",
              "ForeignGroup",
              "Group",
              "ServicePrincipal",
              "User"
            ],
            "nullable": true,
            "metadata": {
              "description": "Optional. The principal type of the assigned principal ID."
            }
          },
          "description": {
            "type": "string",
            "nullable": true,
            "metadata": {
              "description": "Optional. The description of the role assignment."
            }
          },
          "condition": {
            "type": "string",
            "nullable": true,
            "metadata": {
              "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\""
            }
          },
          "conditionVersion": {
            "type": "string",
            "allowedValues": [
              "2.0"
            ],
            "nullable": true,
            "metadata": {
              "description": "Optional. Version of the condition."
            }
          },
          "delegatedManagedIdentityResourceId": {
            "type": "string",
            "nullable": true,
            "metadata": {
              "description": "Optional. The Resource Id of the delegated managed identity resource."
            }
          }
        }
      },
      "nullable": true
    }
  },
  "parameters": {
    "name": {
      "type": "string",
      "maxLength": 50,
      "metadata": {
        "description": "Required. The name of the Health Data Services Workspace service."
      }
    },
    "location": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "Optional. Location for all resources."
      }
    },
    "lock": {
      "$ref": "#/definitions/lockType",
      "metadata": {
        "description": "Optional. The lock settings of the service."
      }
    },
    "roleAssignments": {
      "$ref": "#/definitions/roleAssignmentType",
      "metadata": {
        "description": "Optional. Array of role assignments to create."
      }
    },
    "publicNetworkAccess": {
      "type": "string",
      "defaultValue": "Disabled",
      "allowedValues": [
        "Disabled",
        "Enabled"
      ],
      "metadata": {
        "description": "Optional. Control permission for data plane traffic coming from public networks while private endpoint is enabled."
      }
    },
    "tags": {
      "type": "object",
      "nullable": true,
      "metadata": {
        "description": "Optional. Tags of the resource."
      }
    },
    "enableDefaultTelemetry": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Optional. Enable telemetry via the Customer Usage Attribution ID (GUID)."
      }
    },
    "dicomservices": {
      "type": "array",
      "defaultValue": [],
      "metadata": {
        "description": "Optional. Deploy DICOM services."
      }
    },
    "fhirservices": {
      "type": "array",
      "defaultValue": [],
      "metadata": {
        "description": "Optional. Deploy FHIR services."
      }
    },
    "iotconnectors": {
      "type": "array",
      "defaultValue": [],
      "metadata": {
        "description": "Optional. Deploy IOT connectors."
      }
    }
  },
  "variables": {
    "enableReferencedModulesTelemetry": false,
    "builtInRoleNames": {
      "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
      "DICOM Data Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '58a3b984-7adf-4c20-983a-32417c86fbc8')]",
      "DICOM Data Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'e89c7a3c-2f64-4fa1-a847-3e4c9ba4283a')]",
      "FHIR Data Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '5a1fc7df-4bf1-4951-a576-89034ee01acd')]",
      "FHIR Data Converter": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'a1705bd2-3a8f-45a5-8683-466fcfd5cc24')]",
      "FHIR Data Exporter": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '3db33094-8700-4567-8da5-1501d4e7e843')]",
      "FHIR Data Importer": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4465e953-8ced-4406-a58e-0f6e3f3b530b')]",
      "FHIR Data Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4c8d0bbc-75d3-4935-991f-5f3c56d81508')]",
      "FHIR Data Writer": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '3f88fce4-5892-4214-ae73-ba5294559913')]",
      "FHIR SMART User": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4ba50f17-9666-485c-a643-ff00808643f0')]",
      "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
      "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
      "Role Based Access Control Administrator (Preview)": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]",
      "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]"
    }
  },
  "resources": {
    "defaultTelemetry": {
      "condition": "[parameters('enableDefaultTelemetry')]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2021-04-01",
      "name": "[format('pid-47ed15a6-730a-4827-bcb4-0fd963ffbd82-{0}', uniqueString(deployment().name, parameters('location')))]",
      "properties": {
        "mode": "Incremental",
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "resources": []
        }
      }
    },
    "workspace": {
      "type": "Microsoft.HealthcareApis/workspaces",
      "apiVersion": "2022-06-01",
      "name": "[parameters('name')]",
      "location": "[parameters('location')]",
      "tags": "[parameters('tags')]",
      "properties": {
        "publicNetworkAccess": "[parameters('publicNetworkAccess')]"
      }
    },
    "workspace_lock": {
      "condition": "[and(not(empty(coalesce(parameters('lock'), createObject()))), not(equals(tryGet(parameters('lock'), 'kind'), 'None')))]",
      "type": "Microsoft.Authorization/locks",
      "apiVersion": "2020-05-01",
      "scope": "[format('Microsoft.HealthcareApis/workspaces/{0}', parameters('name'))]",
      "name": "[coalesce(tryGet(parameters('lock'), 'name'), format('lock-{0}', parameters('name')))]",
      "properties": {
        "level": "[coalesce(tryGet(parameters('lock'), 'kind'), '')]",
        "notes": "[if(equals(tryGet(parameters('lock'), 'kind'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot delete or modify the resource or child resources.')]"
      },
      "dependsOn": [
        "workspace"
      ]
    },
    "workspace_roleAssignments": {
      "copy": {
        "name": "workspace_roleAssignments",
        "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]"
      },
      "type": "Microsoft.Authorization/roleAssignments",
      "apiVersion": "2022-04-01",
      "scope": "[format('Microsoft.HealthcareApis/workspaces/{0}', parameters('name'))]",
      "name": "[guid(resourceId('Microsoft.HealthcareApis/workspaces', parameters('name')), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].principalId, coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName)]",
      "properties": {
        "roleDefinitionId": "[if(contains(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName), variables('builtInRoleNames')[coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName], if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName)))]",
        "principalId": "[coalesce(parameters('roleAssignments'), createArray())[copyIndex()].principalId]",
        "description": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'description')]",
        "principalType": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'principalType')]",
        "condition": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'condition')]",
        "conditionVersion": "[if(not(empty(tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
        "delegatedManagedIdentityResourceId": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
      },
      "dependsOn": [
        "workspace"
      ]
    },
    "workspace_fhirservices": {
      "copy": {
        "name": "workspace_fhirservices",
        "count": "[length(parameters('fhirservices'))]"
      },
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('{0}-Health-FHIR-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "name": {
            "value": "[parameters('fhirservices')[copyIndex()].name]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "workspaceName": {
            "value": "[parameters('name')]"
          },
          "kind": {
            "value": "[parameters('fhirservices')[copyIndex()].kind]"
          },
          "tags": {
            "value": "[coalesce(tryGet(parameters('fhirservices')[copyIndex()], 'tags'), parameters('tags'))]"
          },
          "publicNetworkAccess": "[if(contains(parameters('fhirservices')[copyIndex()], 'publicNetworkAccess'), createObject('value', parameters('fhirservices')[copyIndex()].publicNetworkAccess), createObject('value', 'Disabled'))]",
          "managedIdentities": "[if(contains(parameters('fhirservices')[copyIndex()], 'managedIdentities'), createObject('value', parameters('fhirservices')[copyIndex()].managedIdentities), createObject('value', null()))]",
          "roleAssignments": "[if(contains(parameters('fhirservices')[copyIndex()], 'roleAssignments'), createObject('value', parameters('fhirservices')[copyIndex()].roleAssignments), createObject('value', createArray()))]",
          "accessPolicyObjectIds": "[if(contains(parameters('fhirservices')[copyIndex()], 'accessPolicyObjectIds'), createObject('value', parameters('fhirservices')[copyIndex()].accessPolicyObjectIds), createObject('value', createArray()))]",
          "acrLoginServers": "[if(contains(parameters('fhirservices')[copyIndex()], 'acrLoginServers'), createObject('value', parameters('fhirservices')[copyIndex()].acrLoginServers), createObject('value', createArray()))]",
          "acrOciArtifacts": "[if(contains(parameters('fhirservices')[copyIndex()], 'acrOciArtifacts'), createObject('value', parameters('fhirservices')[copyIndex()].acrOciArtifacts), createObject('value', createArray()))]",
          "authenticationAuthority": "[if(contains(parameters('fhirservices')[copyIndex()], 'authenticationAuthority'), createObject('value', parameters('fhirservices')[copyIndex()].authenticationAuthority), createObject('value', uri(environment().authentication.loginEndpoint, subscription().tenantId)))]",
          "authenticationAudience": "[if(contains(parameters('fhirservices')[copyIndex()], 'authenticationAudience'), createObject('value', parameters('fhirservices')[copyIndex()].authenticationAudience), createObject('value', format('https://{0}-{1}.fhir.azurehealthcareapis.com', parameters('name'), parameters('fhirservices')[copyIndex()].name)))]",
          "corsOrigins": "[if(contains(parameters('fhirservices')[copyIndex()], 'corsOrigins'), createObject('value', parameters('fhirservices')[copyIndex()].corsOrigins), createObject('value', createArray()))]",
          "corsHeaders": "[if(contains(parameters('fhirservices')[copyIndex()], 'corsHeaders'), createObject('value', parameters('fhirservices')[copyIndex()].corsHeaders), createObject('value', createArray()))]",
          "corsMethods": "[if(contains(parameters('fhirservices')[copyIndex()], 'corsMethods'), createObject('value', parameters('fhirservices')[copyIndex()].corsMethods), createObject('value', createArray()))]",
          "corsMaxAge": "[if(contains(parameters('fhirservices')[copyIndex()], 'corsMaxAge'), createObject('value', parameters('fhirservices')[copyIndex()].corsMaxAge), createObject('value', -1))]",
          "corsAllowCredentials": "[if(contains(parameters('fhirservices')[copyIndex()], 'corsAllowCredentials'), createObject('value', parameters('fhirservices')[copyIndex()].corsAllowCredentials), createObject('value', false()))]",
          "diagnosticSettings": {
            "value": "[tryGet(parameters('fhirservices')[copyIndex()], 'diagnosticSettings')]"
          },
          "exportStorageAccountName": "[if(contains(parameters('fhirservices')[copyIndex()], 'exportStorageAccountName'), createObject('value', parameters('fhirservices')[copyIndex()].exportStorageAccountName), createObject('value', ''))]",
          "importStorageAccountName": "[if(contains(parameters('fhirservices')[copyIndex()], 'importStorageAccountName'), createObject('value', parameters('fhirservices')[copyIndex()].importStorageAccountName), createObject('value', ''))]",
          "importEnabled": "[if(contains(parameters('fhirservices')[copyIndex()], 'importEnabled'), createObject('value', parameters('fhirservices')[copyIndex()].importEnabled), createObject('value', false()))]",
          "initialImportMode": "[if(contains(parameters('fhirservices')[copyIndex()], 'initialImportMode'), createObject('value', parameters('fhirservices')[copyIndex()].initialImportMode), createObject('value', false()))]",
          "lock": {
            "value": "[coalesce(tryGet(parameters('fhirservices')[copyIndex()], 'lock'), parameters('lock'))]"
          },
          "resourceVersionPolicy": "[if(contains(parameters('fhirservices')[copyIndex()], 'resourceVersionPolicy'), createObject('value', parameters('fhirservices')[copyIndex()].resourceVersionPolicy), createObject('value', 'versioned'))]",
          "resourceVersionOverrides": "[if(contains(parameters('fhirservices')[copyIndex()], 'resourceVersionOverrides'), createObject('value', parameters('fhirservices')[copyIndex()].resourceVersionOverrides), createObject('value', createObject()))]",
          "smartProxyEnabled": "[if(contains(parameters('fhirservices')[copyIndex()], 'smartProxyEnabled'), createObject('value', parameters('fhirservices')[copyIndex()].smartProxyEnabled), createObject('value', false()))]",
          "enableDefaultTelemetry": {
            "value": "[variables('enableReferencedModulesTelemetry')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "languageVersion": "2.0",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.23.1.45101",
              "templateHash": "13185908730981475512"
            },
            "name": "Healthcare API Workspace FHIR Services",
            "description": "This module deploys a Healthcare API Workspace FHIR Service.",
            "owner": "Azure/module-maintainers"
          },
          "definitions": {
            "managedIdentitiesType": {
              "type": "object",
              "properties": {
                "systemAssigned": {
                  "type": "bool",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Enables system assigned managed identity on the resource."
                  }
                },
                "userAssignedResourceIds": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The resource ID(s) to assign to the resource."
                  }
                }
              },
              "nullable": true
            },
            "lockType": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Specify the name of lock."
                  }
                },
                "kind": {
                  "type": "string",
                  "allowedValues": [
                    "CanNotDelete",
                    "None",
                    "ReadOnly"
                  ],
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Specify the type of lock."
                  }
                }
              },
              "nullable": true
            },
            "roleAssignmentType": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "roleDefinitionIdOrName": {
                    "type": "string",
                    "metadata": {
                      "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                    }
                  },
                  "principalId": {
                    "type": "string",
                    "metadata": {
                      "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                    }
                  },
                  "principalType": {
                    "type": "string",
                    "allowedValues": [
                      "Device",
                      "ForeignGroup",
                      "Group",
                      "ServicePrincipal",
                      "User"
                    ],
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. The principal type of the assigned principal ID."
                    }
                  },
                  "description": {
                    "type": "string",
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. The description of the role assignment."
                    }
                  },
                  "condition": {
                    "type": "string",
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\""
                    }
                  },
                  "conditionVersion": {
                    "type": "string",
                    "allowedValues": [
                      "2.0"
                    ],
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. Version of the condition."
                    }
                  },
                  "delegatedManagedIdentityResourceId": {
                    "type": "string",
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. The Resource Id of the delegated managed identity resource."
                    }
                  }
                }
              },
              "nullable": true
            },
            "diagnosticSettingType": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. The name of diagnostic setting."
                    }
                  },
                  "logCategoriesAndGroups": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "category": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Name of a Diagnostic Log category for a resource type this setting is applied to. Set the specific logs to collect here."
                          }
                        },
                        "categoryGroup": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Name of a Diagnostic Log category group for a resource type this setting is applied to. Set to 'AllLogs' to collect all logs."
                          }
                        }
                      }
                    },
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. The name of logs that will be streamed. \"allLogs\" includes all possible logs for the resource. Set to '' to disable log collection."
                    }
                  },
                  "metricCategories": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "category": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. Name of a Diagnostic Metric category for a resource type this setting is applied to. Set to 'AllMetrics' to collect all metrics."
                          }
                        }
                      }
                    },
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. The name of logs that will be streamed. \"allLogs\" includes all possible logs for the resource. Set to '' to disable log collection."
                    }
                  },
                  "logAnalyticsDestinationType": {
                    "type": "string",
                    "allowedValues": [
                      "AzureDiagnostics",
                      "Dedicated"
                    ],
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. A string indicating whether the export to Log Analytics should use the default destination type, i.e. AzureDiagnostics, or use a destination type."
                    }
                  },
                  "workspaceResourceId": {
                    "type": "string",
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. Resource ID of the diagnostic log analytics workspace. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                    }
                  },
                  "storageAccountResourceId": {
                    "type": "string",
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. Resource ID of the diagnostic storage account. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                    }
                  },
                  "eventHubAuthorizationRuleResourceId": {
                    "type": "string",
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. Resource ID of the diagnostic event hub authorization rule for the Event Hubs namespace in which the event hub should be created or streamed to."
                    }
                  },
                  "eventHubName": {
                    "type": "string",
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. Name of the diagnostic event hub within the namespace to which logs are streamed. Without this, an event hub is created for each log category. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                    }
                  },
                  "marketplacePartnerResourceId": {
                    "type": "string",
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. The full ARM resource ID of the Marketplace resource to which you would like to send Diagnostic Logs."
                    }
                  }
                }
              },
              "nullable": true
            }
          },
          "parameters": {
            "name": {
              "type": "string",
              "maxLength": 50,
              "metadata": {
                "description": "Required. The name of the FHIR service."
              }
            },
            "kind": {
              "type": "string",
              "defaultValue": "fhir-R4",
              "allowedValues": [
                "fhir-R4",
                "fhir-Stu3"
              ],
              "metadata": {
                "description": "Optional. The kind of the service. Defaults to R4."
              }
            },
            "workspaceName": {
              "type": "string",
              "metadata": {
                "description": "Conditional. The name of the parent health data services workspace. Required if the template is used in a standalone deployment."
              }
            },
            "accessPolicyObjectIds": {
              "type": "array",
              "defaultValue": [],
              "metadata": {
                "description": "Optional. List of Azure AD object IDs (User or Apps) that is allowed access to the FHIR service."
              }
            },
            "acrLoginServers": {
              "type": "array",
              "defaultValue": [],
              "metadata": {
                "description": "Optional. The list of the Azure container registry login servers."
              }
            },
            "acrOciArtifacts": {
              "type": "array",
              "defaultValue": [],
              "metadata": {
                "description": "Optional. The list of Open Container Initiative (OCI) artifacts."
              }
            },
            "authenticationAuthority": {
              "type": "string",
              "defaultValue": "[uri(environment().authentication.loginEndpoint, subscription().tenantId)]",
              "metadata": {
                "description": "Optional. The authority url for the service."
              }
            },
            "authenticationAudience": {
              "type": "string",
              "defaultValue": "[format('https://{0}-{1}.fhir.azurehealthcareapis.com', parameters('workspaceName'), parameters('name'))]",
              "metadata": {
                "description": "Optional. The audience url for the service."
              }
            },
            "corsOrigins": {
              "type": "array",
              "defaultValue": [],
              "metadata": {
                "description": "Optional. Specify URLs of origin sites that can access this API, or use \"*\" to allow access from any site."
              }
            },
            "corsHeaders": {
              "type": "array",
              "defaultValue": [],
              "metadata": {
                "description": "Optional. Specify HTTP headers which can be used during the request. Use \"*\" for any header."
              }
            },
            "corsMethods": {
              "type": "array",
              "defaultValue": [],
              "allowedValues": [
                "DELETE",
                "GET",
                "OPTIONS",
                "PATCH",
                "POST",
                "PUT"
              ],
              "metadata": {
                "description": "Optional. Specify the allowed HTTP methods."
              }
            },
            "corsMaxAge": {
              "type": "int",
              "defaultValue": -1,
              "metadata": {
                "description": "Optional. Specify how long a result from a request can be cached in seconds. Example: 600 means 10 minutes."
              }
            },
            "corsAllowCredentials": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Optional. Use this setting to indicate that cookies should be included in CORS requests."
              }
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]",
              "metadata": {
                "description": "Optional. Location for all resources."
              }
            },
            "diagnosticSettings": {
              "$ref": "#/definitions/diagnosticSettingType",
              "metadata": {
                "description": "Optional. The diagnostic settings of the service."
              }
            },
            "exportStorageAccountName": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. The name of the default export storage account."
              }
            },
            "importStorageAccountName": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. The name of the default integration storage account."
              }
            },
            "importEnabled": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Optional. If the import operation is enabled."
              }
            },
            "initialImportMode": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Optional. If the FHIR service is in InitialImportMode."
              }
            },
            "lock": {
              "$ref": "#/definitions/lockType",
              "metadata": {
                "description": "Optional. The lock settings of the service."
              }
            },
            "roleAssignments": {
              "$ref": "#/definitions/roleAssignmentType",
              "metadata": {
                "description": "Optional. Array of role assignments to create."
              }
            },
            "publicNetworkAccess": {
              "type": "string",
              "defaultValue": "Disabled",
              "allowedValues": [
                "Disabled",
                "Enabled"
              ],
              "metadata": {
                "description": "Optional. Control permission for data plane traffic coming from public networks while private endpoint is enabled."
              }
            },
            "resourceVersionPolicy": {
              "type": "string",
              "defaultValue": "versioned",
              "allowedValues": [
                "no-version",
                "versioned",
                "versioned-update"
              ],
              "metadata": {
                "description": "Optional. The default value for tracking history across all resources."
              }
            },
            "resourceVersionOverrides": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "Optional. A list of FHIR Resources and their version policy overrides."
              }
            },
            "smartProxyEnabled": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Optional. If the SMART on FHIR proxy is enabled."
              }
            },
            "managedIdentities": {
              "$ref": "#/definitions/managedIdentitiesType",
              "metadata": {
                "description": "Optional. The managed identity definition for this resource."
              }
            },
            "tags": {
              "type": "object",
              "nullable": true,
              "metadata": {
                "description": "Optional. Tags of the resource."
              }
            },
            "enableDefaultTelemetry": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Optional. Enable telemetry via the Customer Usage Attribution ID (GUID)."
              }
            }
          },
          "variables": {
            "copy": [
              {
                "name": "accessPolicies",
                "count": "[length(parameters('accessPolicyObjectIds'))]",
                "input": {
                  "objectId": "[parameters('accessPolicyObjectIds')[copyIndex('accessPolicies')]]"
                }
              }
            ],
            "formattedUserAssignedIdentities": "[reduce(map(coalesce(tryGet(parameters('managedIdentities'), 'userAssignedResourceIds'), createArray()), lambda('id', createObject(format('{0}', lambdaVariables('id')), createObject()))), createObject(), lambda('cur', 'next', union(lambdaVariables('cur'), lambdaVariables('next'))))]",
            "identity": "[if(not(empty(parameters('managedIdentities'))), createObject('type', if(coalesce(tryGet(parameters('managedIdentities'), 'systemAssigned'), false()), if(not(empty(coalesce(tryGet(parameters('managedIdentities'), 'userAssignedResourceIds'), createObject()))), 'SystemAssigned,UserAssigned', 'SystemAssigned'), if(not(empty(coalesce(tryGet(parameters('managedIdentities'), 'userAssignedResourceIds'), createObject()))), 'UserAssigned', null())), 'userAssignedIdentities', if(not(empty(variables('formattedUserAssignedIdentities'))), variables('formattedUserAssignedIdentities'), null())), null())]",
            "exportConfiguration": {
              "storageAccountName": "[parameters('exportStorageAccountName')]"
            },
            "builtInRoleNames": {
              "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
              "DICOM Data Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '58a3b984-7adf-4c20-983a-32417c86fbc8')]",
              "DICOM Data Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'e89c7a3c-2f64-4fa1-a847-3e4c9ba4283a')]",
              "FHIR Data Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '5a1fc7df-4bf1-4951-a576-89034ee01acd')]",
              "FHIR Data Converter": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'a1705bd2-3a8f-45a5-8683-466fcfd5cc24')]",
              "FHIR Data Exporter": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '3db33094-8700-4567-8da5-1501d4e7e843')]",
              "FHIR Data Importer": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4465e953-8ced-4406-a58e-0f6e3f3b530b')]",
              "FHIR Data Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4c8d0bbc-75d3-4935-991f-5f3c56d81508')]",
              "FHIR Data Writer": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '3f88fce4-5892-4214-ae73-ba5294559913')]",
              "FHIR SMART User": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4ba50f17-9666-485c-a643-ff00808643f0')]",
              "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
              "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
              "Role Based Access Control Administrator (Preview)": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]",
              "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]"
            }
          },
          "resources": {
            "defaultTelemetry": {
              "condition": "[parameters('enableDefaultTelemetry')]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2021-04-01",
              "name": "[format('pid-47ed15a6-730a-4827-bcb4-0fd963ffbd82-{0}', uniqueString(deployment().name, parameters('location')))]",
              "properties": {
                "mode": "Incremental",
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "resources": []
                }
              }
            },
            "workspace": {
              "existing": true,
              "type": "Microsoft.HealthcareApis/workspaces",
              "apiVersion": "2022-06-01",
              "name": "[parameters('workspaceName')]"
            },
            "fhir": {
              "type": "Microsoft.HealthcareApis/workspaces/fhirservices",
              "apiVersion": "2022-06-01",
              "name": "[format('{0}/{1}', parameters('workspaceName'), parameters('name'))]",
              "location": "[parameters('location')]",
              "kind": "[parameters('kind')]",
              "tags": "[parameters('tags')]",
              "identity": "[variables('identity')]",
              "properties": {
                "accessPolicies": "[variables('accessPolicies')]",
                "authenticationConfiguration": {
                  "authority": "[parameters('authenticationAuthority')]",
                  "audience": "[parameters('authenticationAudience')]",
                  "smartProxyEnabled": "[parameters('smartProxyEnabled')]"
                },
                "corsConfiguration": {
                  "allowCredentials": "[parameters('corsAllowCredentials')]",
                  "headers": "[parameters('corsHeaders')]",
                  "maxAge": "[if(equals(parameters('corsMaxAge'), -1), null(), parameters('corsMaxAge'))]",
                  "methods": "[parameters('corsMethods')]",
                  "origins": "[parameters('corsOrigins')]"
                },
                "publicNetworkAccess": "[parameters('publicNetworkAccess')]",
                "exportConfiguration": "[if(equals(parameters('exportStorageAccountName'), ''), createObject(), variables('exportConfiguration'))]",
                "importConfiguration": {
                  "enabled": "[parameters('importEnabled')]",
                  "initialImportMode": "[parameters('initialImportMode')]",
                  "integrationDataStore": "[if(equals(parameters('importStorageAccountName'), ''), null(), parameters('importStorageAccountName'))]"
                },
                "resourceVersionPolicyConfiguration": {
                  "default": "[parameters('resourceVersionPolicy')]",
                  "resourceTypeOverrides": "[if(empty(parameters('resourceVersionOverrides')), null(), parameters('resourceVersionOverrides'))]"
                },
                "acrConfiguration": {
                  "loginServers": "[parameters('acrLoginServers')]",
                  "ociArtifacts": "[if(empty(parameters('acrOciArtifacts')), null(), parameters('acrOciArtifacts'))]"
                }
              },
              "dependsOn": [
                "workspace"
              ]
            },
            "fhir_lock": {
              "condition": "[and(not(empty(coalesce(parameters('lock'), createObject()))), not(equals(tryGet(parameters('lock'), 'kind'), 'None')))]",
              "type": "Microsoft.Authorization/locks",
              "apiVersion": "2020-05-01",
              "scope": "[format('Microsoft.HealthcareApis/workspaces/{0}/fhirservices/{1}', parameters('workspaceName'), parameters('name'))]",
              "name": "[coalesce(tryGet(parameters('lock'), 'name'), format('lock-{0}', parameters('name')))]",
              "properties": {
                "level": "[coalesce(tryGet(parameters('lock'), 'kind'), '')]",
                "notes": "[if(equals(tryGet(parameters('lock'), 'kind'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot delete or modify the resource or child resources.')]"
              },
              "dependsOn": [
                "fhir"
              ]
            },
            "fhir_diagnosticSettings": {
              "copy": {
                "name": "fhir_diagnosticSettings",
                "count": "[length(coalesce(parameters('diagnosticSettings'), createArray()))]"
              },
              "type": "Microsoft.Insights/diagnosticSettings",
              "apiVersion": "2021-05-01-preview",
              "scope": "[format('Microsoft.HealthcareApis/workspaces/{0}/fhirservices/{1}', parameters('workspaceName'), parameters('name'))]",
              "name": "[coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'name'), format('{0}-diagnosticSettings', parameters('name')))]",
              "properties": {
                "storageAccountId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'storageAccountResourceId')]",
                "workspaceId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'workspaceResourceId')]",
                "eventHubAuthorizationRuleId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'eventHubAuthorizationRuleResourceId')]",
                "eventHubName": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'eventHubName')]",
                "metrics": "[coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics', 'timeGrain', null(), 'enabled', true())))]",
                "logs": "[coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'AllLogs', 'enabled', true())))]",
                "marketplacePartnerId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'marketplacePartnerResourceId')]",
                "logAnalyticsDestinationType": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logAnalyticsDestinationType')]"
              },
              "dependsOn": [
                "fhir"
              ]
            },
            "fhir_roleAssignments": {
              "copy": {
                "name": "fhir_roleAssignments",
                "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]"
              },
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.HealthcareApis/workspaces/{0}/fhirservices/{1}', parameters('workspaceName'), parameters('name'))]",
              "name": "[guid(resourceId('Microsoft.HealthcareApis/workspaces/fhirservices', parameters('workspaceName'), parameters('name')), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].principalId, coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName)]",
              "properties": {
                "roleDefinitionId": "[if(contains(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName), variables('builtInRoleNames')[coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName], if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName)))]",
                "principalId": "[coalesce(parameters('roleAssignments'), createArray())[copyIndex()].principalId]",
                "description": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'description')]",
                "principalType": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'principalType')]",
                "condition": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'condition')]",
                "conditionVersion": "[if(not(empty(tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                "delegatedManagedIdentityResourceId": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
              },
              "dependsOn": [
                "fhir"
              ]
            }
          },
          "outputs": {
            "name": {
              "type": "string",
              "metadata": {
                "description": "The name of the fhir service."
              },
              "value": "[parameters('name')]"
            },
            "resourceId": {
              "type": "string",
              "metadata": {
                "description": "The resource ID of the fhir service."
              },
              "value": "[resourceId('Microsoft.HealthcareApis/workspaces/fhirservices', parameters('workspaceName'), parameters('name'))]"
            },
            "resourceGroupName": {
              "type": "string",
              "metadata": {
                "description": "The resource group where the namespace is deployed."
              },
              "value": "[resourceGroup().name]"
            },
            "systemAssignedMIPrincipalId": {
              "type": "string",
              "metadata": {
                "description": "The principal ID of the system assigned identity."
              },
              "value": "[if(and(coalesce(tryGet(parameters('managedIdentities'), 'systemAssigned'), false()), contains(reference('fhir', '2022-06-01', 'full').identity, 'principalId')), reference('fhir', '2022-06-01', 'full').identity.principalId, '')]"
            },
            "location": {
              "type": "string",
              "metadata": {
                "description": "The location the resource was deployed into."
              },
              "value": "[reference('fhir', '2022-06-01', 'full').location]"
            },
            "workspaceName": {
              "type": "string",
              "metadata": {
                "description": "The name of the fhir workspace."
              },
              "value": "[parameters('workspaceName')]"
            }
          }
        }
      },
      "dependsOn": [
        "workspace"
      ]
    },
    "workspace_dicomservices": {
      "copy": {
        "name": "workspace_dicomservices",
        "count": "[length(parameters('dicomservices'))]"
      },
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('{0}-Health-DICOM-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "name": {
            "value": "[parameters('dicomservices')[copyIndex()].name]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "workspaceName": {
            "value": "[parameters('name')]"
          },
          "tags": {
            "value": "[coalesce(tryGet(parameters('dicomservices')[copyIndex()], 'tags'), parameters('tags'))]"
          },
          "publicNetworkAccess": "[if(contains(parameters('dicomservices')[copyIndex()], 'publicNetworkAccess'), createObject('value', parameters('dicomservices')[copyIndex()].publicNetworkAccess), createObject('value', 'Disabled'))]",
          "managedIdentities": "[if(contains(parameters('dicomservices')[copyIndex()], 'managedIdentities'), createObject('value', parameters('dicomservices')[copyIndex()].managedIdentities), createObject('value', null()))]",
          "corsOrigins": "[if(contains(parameters('dicomservices')[copyIndex()], 'corsOrigins'), createObject('value', parameters('dicomservices')[copyIndex()].corsOrigins), createObject('value', createArray()))]",
          "corsHeaders": "[if(contains(parameters('dicomservices')[copyIndex()], 'corsHeaders'), createObject('value', parameters('dicomservices')[copyIndex()].corsHeaders), createObject('value', createArray()))]",
          "corsMethods": "[if(contains(parameters('dicomservices')[copyIndex()], 'corsMethods'), createObject('value', parameters('dicomservices')[copyIndex()].corsMethods), createObject('value', createArray()))]",
          "corsMaxAge": "[if(contains(parameters('dicomservices')[copyIndex()], 'corsMaxAge'), createObject('value', parameters('dicomservices')[copyIndex()].corsMaxAge), createObject('value', -1))]",
          "corsAllowCredentials": "[if(contains(parameters('dicomservices')[copyIndex()], 'corsAllowCredentials'), createObject('value', parameters('dicomservices')[copyIndex()].corsAllowCredentials), createObject('value', false()))]",
          "diagnosticSettings": {
            "value": "[tryGet(parameters('dicomservices')[copyIndex()], 'diagnosticSettings')]"
          },
          "lock": {
            "value": "[coalesce(tryGet(parameters('dicomservices')[copyIndex()], 'lock'), parameters('lock'))]"
          },
          "enableDefaultTelemetry": {
            "value": "[variables('enableReferencedModulesTelemetry')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "languageVersion": "2.0",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.23.1.45101",
              "templateHash": "4829507560537153518"
            },
            "name": "Healthcare API Workspace DICOM Services",
            "description": "This module deploys a Healthcare API Workspace DICOM Service.",
            "owner": "Azure/module-maintainers"
          },
          "definitions": {
            "managedIdentitiesType": {
              "type": "object",
              "properties": {
                "systemAssigned": {
                  "type": "bool",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Enables system assigned managed identity on the resource."
                  }
                },
                "userAssignedResourceIds": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The resource ID(s) to assign to the resource."
                  }
                }
              },
              "nullable": true
            },
            "lockType": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Specify the name of lock."
                  }
                },
                "kind": {
                  "type": "string",
                  "allowedValues": [
                    "CanNotDelete",
                    "None",
                    "ReadOnly"
                  ],
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Specify the type of lock."
                  }
                }
              },
              "nullable": true
            },
            "diagnosticSettingType": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. The name of diagnostic setting."
                    }
                  },
                  "logCategoriesAndGroups": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "category": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Name of a Diagnostic Log category for a resource type this setting is applied to. Set the specific logs to collect here."
                          }
                        },
                        "categoryGroup": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Name of a Diagnostic Log category group for a resource type this setting is applied to. Set to 'AllLogs' to collect all logs."
                          }
                        }
                      }
                    },
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. The name of logs that will be streamed. \"allLogs\" includes all possible logs for the resource. Set to '' to disable log collection."
                    }
                  },
                  "metricCategories": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "category": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. Name of a Diagnostic Metric category for a resource type this setting is applied to. Set to 'AllMetrics' to collect all metrics."
                          }
                        }
                      }
                    },
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. The name of logs that will be streamed. \"allLogs\" includes all possible logs for the resource. Set to '' to disable log collection."
                    }
                  },
                  "logAnalyticsDestinationType": {
                    "type": "string",
                    "allowedValues": [
                      "AzureDiagnostics",
                      "Dedicated"
                    ],
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. A string indicating whether the export to Log Analytics should use the default destination type, i.e. AzureDiagnostics, or use a destination type."
                    }
                  },
                  "workspaceResourceId": {
                    "type": "string",
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. Resource ID of the diagnostic log analytics workspace. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                    }
                  },
                  "storageAccountResourceId": {
                    "type": "string",
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. Resource ID of the diagnostic storage account. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                    }
                  },
                  "eventHubAuthorizationRuleResourceId": {
                    "type": "string",
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. Resource ID of the diagnostic event hub authorization rule for the Event Hubs namespace in which the event hub should be created or streamed to."
                    }
                  },
                  "eventHubName": {
                    "type": "string",
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. Name of the diagnostic event hub within the namespace to which logs are streamed. Without this, an event hub is created for each log category. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                    }
                  },
                  "marketplacePartnerResourceId": {
                    "type": "string",
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. The full ARM resource ID of the Marketplace resource to which you would like to send Diagnostic Logs."
                    }
                  }
                }
              },
              "nullable": true
            }
          },
          "parameters": {
            "name": {
              "type": "string",
              "maxLength": 50,
              "metadata": {
                "description": "Required. The name of the DICOM service."
              }
            },
            "workspaceName": {
              "type": "string",
              "metadata": {
                "description": "Conditional. The name of the parent health data services workspace. Required if the template is used in a standalone deployment."
              }
            },
            "corsOrigins": {
              "type": "array",
              "defaultValue": [],
              "metadata": {
                "description": "Optional. Specify URLs of origin sites that can access this API, or use \"*\" to allow access from any site."
              }
            },
            "corsHeaders": {
              "type": "array",
              "defaultValue": [],
              "metadata": {
                "description": "Optional. Specify HTTP headers which can be used during the request. Use \"*\" for any header."
              }
            },
            "corsMethods": {
              "type": "array",
              "defaultValue": [],
              "allowedValues": [
                "DELETE",
                "GET",
                "OPTIONS",
                "PATCH",
                "POST",
                "PUT"
              ],
              "metadata": {
                "description": "Optional. Specify the allowed HTTP methods."
              }
            },
            "corsMaxAge": {
              "type": "int",
              "defaultValue": -1,
              "metadata": {
                "description": "Optional. Specify how long a result from a request can be cached in seconds. Example: 600 means 10 minutes."
              }
            },
            "corsAllowCredentials": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Optional. Use this setting to indicate that cookies should be included in CORS requests."
              }
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]",
              "metadata": {
                "description": "Optional. Location for all resources."
              }
            },
            "diagnosticSettings": {
              "$ref": "#/definitions/diagnosticSettingType",
              "metadata": {
                "description": "Optional. The diagnostic settings of the service."
              }
            },
            "lock": {
              "$ref": "#/definitions/lockType",
              "metadata": {
                "description": "Optional. The lock settings of the service."
              }
            },
            "publicNetworkAccess": {
              "type": "string",
              "defaultValue": "Disabled",
              "allowedValues": [
                "Disabled",
                "Enabled"
              ],
              "metadata": {
                "description": "Optional. Control permission for data plane traffic coming from public networks while private endpoint is enabled."
              }
            },
            "managedIdentities": {
              "$ref": "#/definitions/managedIdentitiesType",
              "metadata": {
                "description": "Optional. The managed identity definition for this resource."
              }
            },
            "tags": {
              "type": "object",
              "nullable": true,
              "metadata": {
                "description": "Optional. Tags of the resource."
              }
            },
            "enableDefaultTelemetry": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Optional. Enable telemetry via the Customer Usage Attribution ID (GUID)."
              }
            }
          },
          "variables": {
            "formattedUserAssignedIdentities": "[reduce(map(coalesce(tryGet(parameters('managedIdentities'), 'userAssignedResourceIds'), createArray()), lambda('id', createObject(format('{0}', lambdaVariables('id')), createObject()))), createObject(), lambda('cur', 'next', union(lambdaVariables('cur'), lambdaVariables('next'))))]",
            "identity": "[if(not(empty(parameters('managedIdentities'))), createObject('type', if(coalesce(tryGet(parameters('managedIdentities'), 'systemAssigned'), false()), if(not(empty(coalesce(tryGet(parameters('managedIdentities'), 'userAssignedResourceIds'), createObject()))), 'SystemAssigned,UserAssigned', 'SystemAssigned'), if(not(empty(coalesce(tryGet(parameters('managedIdentities'), 'userAssignedResourceIds'), createObject()))), 'UserAssigned', null())), 'userAssignedIdentities', if(not(empty(variables('formattedUserAssignedIdentities'))), variables('formattedUserAssignedIdentities'), null())), null())]"
          },
          "resources": {
            "defaultTelemetry": {
              "condition": "[parameters('enableDefaultTelemetry')]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2021-04-01",
              "name": "[format('pid-47ed15a6-730a-4827-bcb4-0fd963ffbd82-{0}', uniqueString(deployment().name, parameters('location')))]",
              "properties": {
                "mode": "Incremental",
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "resources": []
                }
              }
            },
            "workspace": {
              "existing": true,
              "type": "Microsoft.HealthcareApis/workspaces",
              "apiVersion": "2022-06-01",
              "name": "[parameters('workspaceName')]"
            },
            "dicom": {
              "type": "Microsoft.HealthcareApis/workspaces/dicomservices",
              "apiVersion": "2022-06-01",
              "name": "[format('{0}/{1}', parameters('workspaceName'), parameters('name'))]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "identity": "[variables('identity')]",
              "properties": {
                "corsConfiguration": {
                  "allowCredentials": "[parameters('corsAllowCredentials')]",
                  "headers": "[parameters('corsHeaders')]",
                  "maxAge": "[if(equals(parameters('corsMaxAge'), -1), null(), parameters('corsMaxAge'))]",
                  "methods": "[parameters('corsMethods')]",
                  "origins": "[parameters('corsOrigins')]"
                },
                "publicNetworkAccess": "[parameters('publicNetworkAccess')]"
              },
              "dependsOn": [
                "workspace"
              ]
            },
            "dicom_lock": {
              "condition": "[and(not(empty(coalesce(parameters('lock'), createObject()))), not(equals(tryGet(parameters('lock'), 'kind'), 'None')))]",
              "type": "Microsoft.Authorization/locks",
              "apiVersion": "2020-05-01",
              "scope": "[format('Microsoft.HealthcareApis/workspaces/{0}/dicomservices/{1}', parameters('workspaceName'), parameters('name'))]",
              "name": "[coalesce(tryGet(parameters('lock'), 'name'), format('lock-{0}', parameters('name')))]",
              "properties": {
                "level": "[coalesce(tryGet(parameters('lock'), 'kind'), '')]",
                "notes": "[if(equals(tryGet(parameters('lock'), 'kind'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot delete or modify the resource or child resources.')]"
              },
              "dependsOn": [
                "dicom"
              ]
            },
            "dicom_diagnosticSettings": {
              "copy": {
                "name": "dicom_diagnosticSettings",
                "count": "[length(coalesce(parameters('diagnosticSettings'), createArray()))]"
              },
              "type": "Microsoft.Insights/diagnosticSettings",
              "apiVersion": "2021-05-01-preview",
              "scope": "[format('Microsoft.HealthcareApis/workspaces/{0}/dicomservices/{1}', parameters('workspaceName'), parameters('name'))]",
              "name": "[coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'name'), format('{0}-diagnosticSettings', parameters('name')))]",
              "properties": {
                "storageAccountId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'storageAccountResourceId')]",
                "workspaceId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'workspaceResourceId')]",
                "eventHubAuthorizationRuleId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'eventHubAuthorizationRuleResourceId')]",
                "eventHubName": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'eventHubName')]",
                "metrics": "[coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics', 'timeGrain', null(), 'enabled', true())))]",
                "logs": "[coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'AllLogs', 'enabled', true())))]",
                "marketplacePartnerId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'marketplacePartnerResourceId')]",
                "logAnalyticsDestinationType": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logAnalyticsDestinationType')]"
              },
              "dependsOn": [
                "dicom"
              ]
            }
          },
          "outputs": {
            "name": {
              "type": "string",
              "metadata": {
                "description": "The name of the dicom service."
              },
              "value": "[parameters('name')]"
            },
            "resourceId": {
              "type": "string",
              "metadata": {
                "description": "The resource ID of the dicom service."
              },
              "value": "[resourceId('Microsoft.HealthcareApis/workspaces/dicomservices', parameters('workspaceName'), parameters('name'))]"
            },
            "resourceGroupName": {
              "type": "string",
              "metadata": {
                "description": "The resource group where the namespace is deployed."
              },
              "value": "[resourceGroup().name]"
            },
            "systemAssignedMIPrincipalId": {
              "type": "string",
              "metadata": {
                "description": "The principal ID of the system assigned identity."
              },
              "value": "[if(and(coalesce(tryGet(parameters('managedIdentities'), 'systemAssigned'), false()), contains(reference('dicom', '2022-06-01', 'full').identity, 'principalId')), reference('dicom', '2022-06-01', 'full').identity.principalId, '')]"
            },
            "location": {
              "type": "string",
              "metadata": {
                "description": "The location the resource was deployed into."
              },
              "value": "[reference('dicom', '2022-06-01', 'full').location]"
            }
          }
        }
      },
      "dependsOn": [
        "workspace"
      ]
    },
    "workspace_iotconnector": {
      "copy": {
        "name": "workspace_iotconnector",
        "count": "[length(parameters('iotconnectors'))]"
      },
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('{0}-Health-IOMT-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "name": {
            "value": "[parameters('iotconnectors')[copyIndex()].name]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "workspaceName": {
            "value": "[parameters('name')]"
          },
          "tags": {
            "value": "[coalesce(tryGet(parameters('iotconnectors')[copyIndex()], 'tags'), parameters('tags'))]"
          },
          "eventHubName": {
            "value": "[parameters('iotconnectors')[copyIndex()].eventHubName]"
          },
          "eventHubNamespaceName": {
            "value": "[parameters('iotconnectors')[copyIndex()].eventHubNamespaceName]"
          },
          "deviceMapping": "[if(contains(parameters('iotconnectors')[copyIndex()], 'deviceMapping'), createObject('value', parameters('iotconnectors')[copyIndex()].deviceMapping), createObject('value', createObject('templateType', 'CollectionContent', 'template', createArray())))]",
          "fhirdestination": "[if(contains(parameters('iotconnectors')[copyIndex()], 'fhirdestination'), createObject('value', parameters('iotconnectors')[copyIndex()].fhirdestination), createObject('value', createObject()))]",
          "consumerGroup": "[if(contains(parameters('iotconnectors')[copyIndex()], 'consumerGroup'), createObject('value', parameters('iotconnectors')[copyIndex()].consumerGroup), createObject('value', parameters('iotconnectors')[copyIndex()].name))]",
          "managedIdentities": "[if(contains(parameters('iotconnectors')[copyIndex()], 'managedIdentities'), createObject('value', parameters('iotconnectors')[copyIndex()].managedIdentities), createObject('value', null()))]",
          "diagnosticSettings": {
            "value": "[tryGet(parameters('iotconnectors')[copyIndex()], 'diagnosticSettings')]"
          },
          "lock": {
            "value": "[coalesce(tryGet(parameters('iotconnectors')[copyIndex()], 'lock'), parameters('lock'))]"
          },
          "enableDefaultTelemetry": {
            "value": "[variables('enableReferencedModulesTelemetry')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "languageVersion": "2.0",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.23.1.45101",
              "templateHash": "15635348365399723785"
            },
            "name": "Healthcare API Workspace IoT Connectors",
            "description": "This module deploys a Healthcare API Workspace IoT Connector.",
            "owner": "Azure/module-maintainers"
          },
          "definitions": {
            "managedIdentitiesType": {
              "type": "object",
              "properties": {
                "systemAssigned": {
                  "type": "bool",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Enables system assigned managed identity on the resource."
                  }
                },
                "userAssignedResourceIds": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The resource ID(s) to assign to the resource."
                  }
                }
              },
              "nullable": true
            },
            "lockType": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Specify the name of lock."
                  }
                },
                "kind": {
                  "type": "string",
                  "allowedValues": [
                    "CanNotDelete",
                    "None",
                    "ReadOnly"
                  ],
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Specify the type of lock."
                  }
                }
              },
              "nullable": true
            },
            "diagnosticSettingType": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. The name of diagnostic setting."
                    }
                  },
                  "logCategoriesAndGroups": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "category": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Name of a Diagnostic Log category for a resource type this setting is applied to. Set the specific logs to collect here."
                          }
                        },
                        "categoryGroup": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Name of a Diagnostic Log category group for a resource type this setting is applied to. Set to 'AllLogs' to collect all logs."
                          }
                        }
                      }
                    },
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. The name of logs that will be streamed. \"allLogs\" includes all possible logs for the resource. Set to '' to disable log collection."
                    }
                  },
                  "metricCategories": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "category": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. Name of a Diagnostic Metric category for a resource type this setting is applied to. Set to 'AllMetrics' to collect all metrics."
                          }
                        }
                      }
                    },
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. The name of logs that will be streamed. \"allLogs\" includes all possible logs for the resource. Set to '' to disable log collection."
                    }
                  },
                  "logAnalyticsDestinationType": {
                    "type": "string",
                    "allowedValues": [
                      "AzureDiagnostics",
                      "Dedicated"
                    ],
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. A string indicating whether the export to Log Analytics should use the default destination type, i.e. AzureDiagnostics, or use a destination type."
                    }
                  },
                  "workspaceResourceId": {
                    "type": "string",
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. Resource ID of the diagnostic log analytics workspace. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                    }
                  },
                  "storageAccountResourceId": {
                    "type": "string",
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. Resource ID of the diagnostic storage account. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                    }
                  },
                  "eventHubAuthorizationRuleResourceId": {
                    "type": "string",
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. Resource ID of the diagnostic event hub authorization rule for the Event Hubs namespace in which the event hub should be created or streamed to."
                    }
                  },
                  "eventHubName": {
                    "type": "string",
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. Name of the diagnostic event hub within the namespace to which logs are streamed. Without this, an event hub is created for each log category. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                    }
                  },
                  "marketplacePartnerResourceId": {
                    "type": "string",
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. The full ARM resource ID of the Marketplace resource to which you would like to send Diagnostic Logs."
                    }
                  }
                }
              },
              "nullable": true
            }
          },
          "parameters": {
            "name": {
              "type": "string",
              "maxLength": 50,
              "metadata": {
                "description": "Required. The name of the MedTech service."
              }
            },
            "workspaceName": {
              "type": "string",
              "metadata": {
                "description": "Conditional. The name of the parent health data services workspace. Required if the template is used in a standalone deployment."
              }
            },
            "eventHubName": {
              "type": "string",
              "metadata": {
                "description": "Required. Event Hub name to connect to."
              }
            },
            "consumerGroup": {
              "type": "string",
              "defaultValue": "[parameters('name')]",
              "metadata": {
                "description": "Optional. Consumer group of the event hub to connected to."
              }
            },
            "eventHubNamespaceName": {
              "type": "string",
              "metadata": {
                "description": "Required. Namespace of the Event Hub to connect to."
              }
            },
            "deviceMapping": {
              "type": "object",
              "defaultValue": {
                "templateType": "CollectionContent",
                "template": []
              },
              "metadata": {
                "description": "Required. The mapping JSON that determines how incoming device data is normalized."
              }
            },
            "fhirdestination": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "Optional. FHIR Destination."
              }
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]",
              "metadata": {
                "description": "Optional. Location for all resources."
              }
            },
            "diagnosticSettings": {
              "$ref": "#/definitions/diagnosticSettingType",
              "metadata": {
                "description": "Optional. The diagnostic settings of the service."
              }
            },
            "lock": {
              "$ref": "#/definitions/lockType",
              "metadata": {
                "description": "Optional. The lock settings of the service."
              }
            },
            "managedIdentities": {
              "$ref": "#/definitions/managedIdentitiesType",
              "metadata": {
                "description": "Optional. The managed identity definition for this resource."
              }
            },
            "tags": {
              "type": "object",
              "nullable": true,
              "metadata": {
                "description": "Optional. Tags of the resource."
              }
            },
            "enableDefaultTelemetry": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Optional. Enable telemetry via the Customer Usage Attribution ID (GUID)."
              }
            }
          },
          "variables": {
            "formattedUserAssignedIdentities": "[reduce(map(coalesce(tryGet(parameters('managedIdentities'), 'userAssignedResourceIds'), createArray()), lambda('id', createObject(format('{0}', lambdaVariables('id')), createObject()))), createObject(), lambda('cur', 'next', union(lambdaVariables('cur'), lambdaVariables('next'))))]",
            "identity": "[if(not(empty(parameters('managedIdentities'))), createObject('type', if(coalesce(tryGet(parameters('managedIdentities'), 'systemAssigned'), false()), if(not(empty(coalesce(tryGet(parameters('managedIdentities'), 'userAssignedResourceIds'), createObject()))), 'SystemAssigned,UserAssigned', 'SystemAssigned'), if(not(empty(coalesce(tryGet(parameters('managedIdentities'), 'userAssignedResourceIds'), createObject()))), 'UserAssigned', null())), 'userAssignedIdentities', if(not(empty(variables('formattedUserAssignedIdentities'))), variables('formattedUserAssignedIdentities'), null())), null())]",
            "enableReferencedModulesTelemetry": false
          },
          "resources": {
            "defaultTelemetry": {
              "condition": "[parameters('enableDefaultTelemetry')]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2021-04-01",
              "name": "[format('pid-47ed15a6-730a-4827-bcb4-0fd963ffbd82-{0}', uniqueString(deployment().name, parameters('location')))]",
              "properties": {
                "mode": "Incremental",
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "resources": []
                }
              }
            },
            "workspace": {
              "existing": true,
              "type": "Microsoft.HealthcareApis/workspaces",
              "apiVersion": "2022-06-01",
              "name": "[parameters('workspaceName')]"
            },
            "iotConnector": {
              "type": "Microsoft.HealthcareApis/workspaces/iotconnectors",
              "apiVersion": "2022-06-01",
              "name": "[format('{0}/{1}', parameters('workspaceName'), parameters('name'))]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "identity": "[variables('identity')]",
              "properties": {
                "ingestionEndpointConfiguration": {
                  "eventHubName": "[parameters('eventHubName')]",
                  "consumerGroup": "[parameters('consumerGroup')]",
                  "fullyQualifiedEventHubNamespace": "[format('{0}.servicebus.windows.net', parameters('eventHubNamespaceName'))]"
                },
                "deviceMapping": {
                  "content": "[parameters('deviceMapping')]"
                }
              },
              "dependsOn": [
                "workspace"
              ]
            },
            "iotConnector_lock": {
              "condition": "[and(not(empty(coalesce(parameters('lock'), createObject()))), not(equals(tryGet(parameters('lock'), 'kind'), 'None')))]",
              "type": "Microsoft.Authorization/locks",
              "apiVersion": "2020-05-01",
              "scope": "[format('Microsoft.HealthcareApis/workspaces/{0}/iotconnectors/{1}', parameters('workspaceName'), parameters('name'))]",
              "name": "[coalesce(tryGet(parameters('lock'), 'name'), format('lock-{0}', parameters('name')))]",
              "properties": {
                "level": "[coalesce(tryGet(parameters('lock'), 'kind'), '')]",
                "notes": "[if(equals(tryGet(parameters('lock'), 'kind'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot delete or modify the resource or child resources.')]"
              },
              "dependsOn": [
                "iotConnector"
              ]
            },
            "iotConnector_diagnosticSettings": {
              "copy": {
                "name": "iotConnector_diagnosticSettings",
                "count": "[length(coalesce(parameters('diagnosticSettings'), createArray()))]"
              },
              "type": "Microsoft.Insights/diagnosticSettings",
              "apiVersion": "2021-05-01-preview",
              "scope": "[format('Microsoft.HealthcareApis/workspaces/{0}/iotconnectors/{1}', parameters('workspaceName'), parameters('name'))]",
              "name": "[coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'name'), format('{0}-diagnosticSettings', parameters('name')))]",
              "properties": {
                "storageAccountId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'storageAccountResourceId')]",
                "workspaceId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'workspaceResourceId')]",
                "eventHubAuthorizationRuleId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'eventHubAuthorizationRuleResourceId')]",
                "eventHubName": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'eventHubName')]",
                "metrics": "[coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics', 'timeGrain', null(), 'enabled', true())))]",
                "logs": "[coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'AllLogs', 'enabled', true())))]",
                "marketplacePartnerId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'marketplacePartnerResourceId')]",
                "logAnalyticsDestinationType": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logAnalyticsDestinationType')]"
              },
              "dependsOn": [
                "iotConnector"
              ]
            },
            "fhir_destination": {
              "condition": "[not(empty(parameters('fhirdestination')))]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('{0}-FhirDestination', deployment().name)]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "name": {
                    "value": "[format('{0}-map', uniqueString(parameters('workspaceName'), parameters('name')))]"
                  },
                  "iotConnectorName": {
                    "value": "[parameters('name')]"
                  },
                  "resourceIdentityResolutionType": "[if(contains(parameters('fhirdestination'), 'resourceIdentityResolutionType'), createObject('value', parameters('fhirdestination').resourceIdentityResolutionType), createObject('value', 'Lookup'))]",
                  "fhirServiceResourceId": {
                    "value": "[parameters('fhirdestination').fhirServiceResourceId]"
                  },
                  "destinationMapping": "[if(contains(parameters('fhirdestination'), 'destinationMapping'), createObject('value', parameters('fhirdestination').destinationMapping), createObject('value', createObject('templateType', 'CollectionFhir', 'template', createArray())))]",
                  "enableDefaultTelemetry": {
                    "value": "[variables('enableReferencedModulesTelemetry')]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "workspaceName": {
                    "value": "[parameters('workspaceName')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.23.1.45101",
                      "templateHash": "6245123463457389463"
                    },
                    "name": "Healthcare API Workspace IoT Connector FHIR Destinations",
                    "description": "This module deploys a Healthcare API Workspace IoT Connector FHIR Destination.",
                    "owner": "Azure/module-maintainers"
                  },
                  "parameters": {
                    "name": {
                      "type": "string",
                      "maxLength": 24,
                      "metadata": {
                        "description": "Required. The name of the FHIR destination."
                      }
                    },
                    "destinationMapping": {
                      "type": "object",
                      "defaultValue": {
                        "templateType": "CollectionFhir",
                        "template": []
                      },
                      "metadata": {
                        "description": "Required. The mapping JSON that determines how normalized data is converted to FHIR Observations."
                      }
                    },
                    "iotConnectorName": {
                      "type": "string",
                      "metadata": {
                        "description": "Conditional. The name of the MedTech service to add this destination to. Required if the template is used in a standalone deployment."
                      }
                    },
                    "workspaceName": {
                      "type": "string",
                      "metadata": {
                        "description": "Conditional. The name of the parent health data services workspace. Required if the template is used in a standalone deployment."
                      }
                    },
                    "fhirServiceResourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The resource identifier of the FHIR Service to connect to."
                      }
                    },
                    "location": {
                      "type": "string",
                      "defaultValue": "[resourceGroup().location]",
                      "metadata": {
                        "description": "Optional. Location for all resources."
                      }
                    },
                    "enableDefaultTelemetry": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "Optional. Enable telemetry via the Customer Usage Attribution ID (GUID)."
                      }
                    },
                    "resourceIdentityResolutionType": {
                      "type": "string",
                      "defaultValue": "Lookup",
                      "allowedValues": [
                        "Create",
                        "Lookup"
                      ],
                      "metadata": {
                        "description": "Optional. Determines how resource identity is resolved on the destination."
                      }
                    }
                  },
                  "resources": [
                    {
                      "condition": "[parameters('enableDefaultTelemetry')]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2021-04-01",
                      "name": "[format('pid-47ed15a6-730a-4827-bcb4-0fd963ffbd82-{0}', uniqueString(deployment().name, parameters('location')))]",
                      "properties": {
                        "mode": "Incremental",
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "resources": []
                        }
                      }
                    },
                    {
                      "type": "Microsoft.HealthcareApis/workspaces/iotconnectors/fhirdestinations",
                      "apiVersion": "2022-06-01",
                      "name": "[format('{0}/{1}/{2}', parameters('workspaceName'), parameters('iotConnectorName'), parameters('name'))]",
                      "location": "[parameters('location')]",
                      "properties": {
                        "resourceIdentityResolutionType": "[parameters('resourceIdentityResolutionType')]",
                        "fhirServiceResourceId": "[parameters('fhirServiceResourceId')]",
                        "fhirMapping": {
                          "content": "[parameters('destinationMapping')]"
                        }
                      }
                    }
                  ],
                  "outputs": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the FHIR destination."
                      },
                      "value": "[parameters('name')]"
                    },
                    "resourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the FHIR destination."
                      },
                      "value": "[resourceId('Microsoft.HealthcareApis/workspaces/iotconnectors/fhirdestinations', parameters('workspaceName'), parameters('iotConnectorName'), parameters('name'))]"
                    },
                    "resourceGroupName": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource group where the namespace is deployed."
                      },
                      "value": "[resourceGroup().name]"
                    },
                    "location": {
                      "type": "string",
                      "metadata": {
                        "description": "The location the resource was deployed into."
                      },
                      "value": "[reference(resourceId('Microsoft.HealthcareApis/workspaces/iotconnectors/fhirdestinations', parameters('workspaceName'), parameters('iotConnectorName'), parameters('name')), '2022-06-01', 'full').location]"
                    },
                    "iotConnectorName": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the medtech service."
                      },
                      "value": "[parameters('iotConnectorName')]"
                    }
                  }
                }
              },
              "dependsOn": [
                "iotConnector"
              ]
            }
          },
          "outputs": {
            "name": {
              "type": "string",
              "metadata": {
                "description": "The name of the medtech service."
              },
              "value": "[parameters('name')]"
            },
            "resourceId": {
              "type": "string",
              "metadata": {
                "description": "The resource ID of the medtech service."
              },
              "value": "[resourceId('Microsoft.HealthcareApis/workspaces/iotconnectors', parameters('workspaceName'), parameters('name'))]"
            },
            "resourceGroupName": {
              "type": "string",
              "metadata": {
                "description": "The resource group where the namespace is deployed."
              },
              "value": "[resourceGroup().name]"
            },
            "systemAssignedMIPrincipalId": {
              "type": "string",
              "metadata": {
                "description": "The principal ID of the system assigned identity."
              },
              "value": "[if(and(coalesce(tryGet(parameters('managedIdentities'), 'systemAssigned'), false()), contains(reference('iotConnector', '2022-06-01', 'full').identity, 'principalId')), reference('iotConnector', '2022-06-01', 'full').identity.principalId, '')]"
            },
            "location": {
              "type": "string",
              "metadata": {
                "description": "The location the resource was deployed into."
              },
              "value": "[reference('iotConnector', '2022-06-01', 'full').location]"
            },
            "workspaceName": {
              "type": "string",
              "metadata": {
                "description": "The name of the medtech workspace."
              },
              "value": "[parameters('workspaceName')]"
            }
          }
        }
      },
      "dependsOn": [
        "workspace"
      ]
    }
  },
  "outputs": {
    "name": {
      "type": "string",
      "metadata": {
        "description": "The name of the health data services workspace."
      },
      "value": "[parameters('name')]"
    },
    "resourceId": {
      "type": "string",
      "metadata": {
        "description": "The resource ID of the health data services workspace."
      },
      "value": "[resourceId('Microsoft.HealthcareApis/workspaces', parameters('name'))]"
    },
    "resourceGroupName": {
      "type": "string",
      "metadata": {
        "description": "The resource group where the workspace is deployed."
      },
      "value": "[resourceGroup().name]"
    },
    "location": {
      "type": "string",
      "metadata": {
        "description": "The location the resource was deployed into."
      },
      "value": "[reference('workspace', '2022-06-01', 'full').location]"
    }
  }
}